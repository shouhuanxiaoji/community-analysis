{"totalCount": 263, "pageInfo": {"hasNextPage": true, "endCursor": "ca77af3efd75b1b86ba5ab4ce350edb78f021c37 99", "startCursor": "ca77af3efd75b1b86ba5ab4ce350edb78f021c37 0"}, "edges": [{"node": {"oid": "ca77af3efd75b1b86ba5ab4ce350edb78f021c37", "committedDate": "2023-07-19T00:19:53Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "4c3a74323830a9f9bc6fe87e8fee2d2f88f734e1", "committedDate": "2023-07-18T00:19:26Z", "message": "Daily bump.", "chatglm2-6b": "\"I am unable to recognize the paragraph you provided as it is only \\\"Daily bump.\\\" It does not contain any information that could be categorized into the criteria you provided. Therefore, the paragraph can be classified as \\\"neither.\\\"\""}}, {"node": {"oid": "0b84c6cc6a7909c114146c7751e2094fe9d4296f", "committedDate": "2023-07-17T00:19:20Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "57dd3d8c1bca75354fc514c6a1b0ec051c180a52", "committedDate": "2023-07-16T00:19:17Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "68af3efa63ce6f308bf0d9f9638d0b978b09b299", "committedDate": "2023-07-15T00:19:37Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "eeb8e9a36d7aa9bc4ac8b0d7abe1e84e9afc4250", "committedDate": "2023-07-14T20:04:57Z", "message": "cprop: Do not set REG_EQUAL note when simplifying paradoxical subreg [PR110206]\n\ncprop1 pass does not consider paradoxical subreg and for (insn 22) claims\nthat it equals 8 elements of HImodeby setting REG_EQUAL note:\n\n(insn 21 19 22 4 (set (reg:V4QI 98)\n        (mem/u/c:V4QI (symbol_ref/u:DI (\"*.LC1\") [flags 0x2]) [0  S4 A32])) \"pr110206.c\":12:42 1530 {*movv4qi_internal}\n     (expr_list:REG_EQUAL (const_vector:V4QI [\n                (const_int -52 [0xffffffffffffffcc]) repeated x4\n            ])\n        (nil)))\n(insn 22 21 23 4 (set (reg:V8HI 100)\n        (zero_extend:V8HI (vec_select:V8QI (subreg:V16QI (reg:V4QI 98) 0)\n                (parallel [\n                        (const_int 0 [0])\n                        (const_int 1 [0x1])\n                        (const_int 2 [0x2])\n                        (const_int 3 [0x3])\n                        (const_int 4 [0x4])\n                        (const_int 5 [0x5])\n                        (const_int 6 [0x6])\n                        (const_int 7 [0x7])\n                    ])))) \"pr110206.c\":12:42 7471 {sse4_1_zero_extendv8qiv8hi2}\n     (expr_list:REG_EQUAL (const_vector:V8HI [\n                (const_int 204 [0xcc]) repeated x8\n            ])\n        (expr_list:REG_DEAD (reg:V4QI 98)\n            (nil))))\n\nWe rely on the \"undefined\" vals to have a specific value (from the earlier\nREG_EQUAL note) but actual code generation doesn't ensure this (it doesn't\nneed to).  That said, the issue isn't the constant folding per-se but that\nwe do not actually constant fold but register an equality that doesn't hold.\n\n\tPR target/110206\n\ngcc/ChangeLog:\n\n\t* fwprop.cc (contains_paradoxical_subreg_p): Move to ...\n\t* rtlanal.cc (contains_paradoxical_subreg_p): ... here.\n\t* rtlanal.h (contains_paradoxical_subreg_p): Add prototype.\n\t* cprop.cc (try_replace_reg): Do not set REG_EQUAL note\n\twhen the original source contains a paradoxical subreg.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr110206.c: New test.\n\n(cherry picked from commit 1815e313a8fb519a77c94a908eb6dafc4ce51ffe)", "chatglm2-6b": "\"The paragraph does not contain any information that can be classified under the criteria you provided. It appears to be a description of a bug fix, but it does not provide any information about new security features, new features other than security, bug fixes, or performance optimization. Therefore, the paragraph cannot be classified into any of the categories you provided.\""}}, {"node": {"oid": "995c717500c368c5aec7889dfa047cff7cb0139b", "committedDate": "2023-07-14T18:28:07Z", "message": "Fortran: formal symbol attributes for intrinsic procedures [PR110288]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/110288\n\t* symbol.cc (gfc_copy_formal_args_intr): When deriving the formal\n\targument attributes from the actual ones for intrinsic procedure\n\tcalls, take special care of CHARACTER arguments that we do not\n\twrongly treat them formally as deferred-length.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/110288\n\t* gfortran.dg/findloc_10.f90: New test.\n\n(cherry picked from commit 3b2c523ae31b68fc3b8363b458a55eec53a44365)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "5f20f736c1144dd9f2ae2f99099b7f7b21a3ab4e", "committedDate": "2023-07-14T01:46:19Z", "message": "SH: Fix PR101469 peephole bug\n\ngcc/ChangeLog:\n\n\tPR target/101469\n\t* config/sh/sh.md (peephole2): Handle case where eliminated reg\n\tis also\tused by the address of the following memory operand.", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "762b7e42394b05b0616613ff84a53c62fd1f9b88", "committedDate": "2023-07-14T00:22:48Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "4520e2dbc73262028ad556f732871565101ef615", "committedDate": "2023-07-13T16:34:01Z", "message": "alpha: Fix computation mode in alpha_emit_set_long_cost [PR106966]\n\n\tPR target/106966\n\ngcc/ChangeLog:\n\n\t* config/alpha/alpha.cc (alpha_emit_set_long_const):\n\tAlways use DImode when constructing long const.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/alpha/pr106966.c: New test.\n\n(cherry picked from commit 337649c1660211db733c1ba34ae260b8c66a3578)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "68e4bb1e6de6ee0a8e9d6a16a9d246e265261f48", "committedDate": "2023-07-13T00:19:48Z", "message": "Daily bump.", "chatglm2-6b": "\"\\\"neither\\\"\""}}, {"node": {"oid": "530b749c71d7aaaf965d53227911411572c35146", "committedDate": "2023-07-12T20:16:44Z", "message": "libstdc++: Check conversion from filesystem::path to wide strings [PR95048]\n\nThe testcase added for this bug only checks conversion from wide strings\non construction, but the fix also covered conversion to wide strings via\npath::wstring(). Add checks for that, and u16string() and u32string().\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/95048\n\t* testsuite/27_io/filesystem/path/construct/95048.cc: Check\n\tconversions to wide strings.\n\t* testsuite/experimental/filesystem/path/construct/95048.cc:\n\tLikewise.\n\n(cherry picked from commit d6384ad1a9ab7ea46990a7ed1299d5a2be4acece)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "dfbe77ab8a70bc7eb48a96775da04095d933a3a6", "committedDate": "2023-07-12T19:27:07Z", "message": "c++: NSDMI instantiation during overload resolution [PR110468]\n\nHere we find ourselves instantiating the NSDMI for A<1>::m when\ncomputing argument conversions during overload resolution, and\nthus tf_conv is set.  The flag causes mark_used for the constructor\nused in the NSDMI to exit early and not instantiate its noexcept-spec,\nwhich eventually leads to an ICE from nothrow_spec_p.\n\nThis patch fixes this by clearing any special tsubst flags during\ninstantiation of an NSDMI, since the result should be independent of\nthe context that requires the instantiation.\n\n\tPR c++/110468\n\ngcc/cp/ChangeLog:\n\n\t* init.cc (maybe_instantiate_nsdmi_init): Mask out all\n\ttsubst flags except for tf_warning_or_error.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/noexcept79.C: New test.\n\n(cherry picked from commit 9479da4515f7d019b4ef282d0e21536431c44f71)", "chatglm2-6b": "\"Based on the criteria provided, the paragraph cannot be classified into any category. It does not mention any fixes, new security features, new features other than security, bug fixes, or performance optimization.\""}}, {"node": {"oid": "623d28e713bb17160f3e1107d5de2ed824599847", "committedDate": "2023-07-12T00:19:10Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "3fe26353fd302a04c7d4767a0756cdff02dc1792", "committedDate": "2023-07-11T00:19:30Z", "message": "Daily bump.", "chatglm2-6b": "\"I cannot recognize the paragraph. Therefore, I cannot categorize it according to the criteria provided.\""}}, {"node": {"oid": "87482df5e09c075c13c0cf5c77f7a31a7fd08407", "committedDate": "2023-07-10T00:19:03Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "b29e90ec2c47253fe1b6b56d590c20c5282c3f91", "committedDate": "2023-07-09T00:18:52Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "2d416f352be898c408fd3db402719d6625f26720", "committedDate": "2023-07-08T18:44:39Z", "message": "Fortran: simplification of FINDLOC for constant complex arguments [PR110585]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/110585\n\t* arith.cc (gfc_compare_expr): Handle equality comparison of constant\n\tcomplex gfc_expr arguments.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/110585\n\t* gfortran.dg/findloc_9.f90: New test.\n\n(cherry picked from commit 7ac1581d066a6f3a0d4acf1042a74634258b4966)", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "45aab94325eb4b44547c38ac0090eeacc723c589", "committedDate": "2023-07-08T09:32:47Z", "message": "doc: Fix typo in Warning Options [PR110595]\n\ngcc/ChangeLog:\n\n\tPR c++/110595\n\t* doc/invoke.texi (Warning Options): Fix typo.\n\n(cherry picked from commit 238944752e20d7714352152cb26a08fb26aea831)", "chatglm2-6b": "\"Based on the given paragraph, it appears to be a bug fix. The paragraph mentions a fix for a \\\"typo\\\" in the \\\"Warning Options\\\" section of a document, which is specifically related to the \\\"doc/invoke.texi\\\" file. It is also indicated that the fix was cherry-picked from a specific commit and commit message. Therefore, the paragraph can be classified as a bug fix.\""}}, {"node": {"oid": "3d36bf02f4b22e12f2598ea1f7150cc968d7af22", "committedDate": "2023-07-08T00:18:22Z", "message": "Daily bump.", "chatglm2-6b": "\"I am unable to recognize the paragraph as it is only \\\"Daily bump.\\\" It does not provide any information about CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. Therefore, the paragraph cannot be classified into any category.\""}}, {"node": {"oid": "0444c2065aef569aa16e43cffc564c202a59af33", "committedDate": "2023-07-07T19:24:25Z", "message": "d: Fix PR 108842: Cannot use enum array with -fno-druntime\n\nRestrict the generating of CONST_DECLs for D manifest constants to just\nscalars without pointers.  It shouldn't happen that a reference to a\nmanifest constant has not been expanded within a function body during\ncodegen, but it has been found to occur in older versions of the D\nfront-end (PR98277), so if the decl of a non-scalar constant is\nrequested, just return its initializer as an expression.\n\n\tPR d/108842\n\ngcc/d/ChangeLog:\n\n\t* decl.cc (DeclVisitor::visit (VarDeclaration *)): Only emit scalar\n\tmanifest constants.\n\t(get_symbol_decl): Don't generate CONST_DECL for non-scalar manifest\n\tconstants.\n\t* imports.cc (ImportVisitor::visit (VarDeclaration *)): New method.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/pr98277.d: Add more tests.\n\t* gdc.dg/pr108842.d: New test.\n\n(cherry picked from commit f934c5753849f7c48c6a3abfcd73b8f6008e8371)", "chatglm2-6b": "\"The paragraph does not meet the criteria for any of the given categories. It does not discuss CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. Additionally, the paragraph is a cherry-picked commit from a specific commit ID, which does not provide enough context to determine what the paragraph is referring to.\""}}, {"node": {"oid": "456ec5a2aa17f27d740a450019cbcbd25f6b91e8", "committedDate": "2023-07-07T00:19:41Z", "message": "Daily bump.", "chatglm2-6b": "\"\\\"neither\\\"\""}}, {"node": {"oid": "67bda4331dc4f548820ed2f3138aa7f64fd4c77d", "committedDate": "2023-07-06T15:43:56Z", "message": "libstdc++: Document --enable-cstdio=stdio_pure [PR104299]\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/104299\n\t* doc/xml/manual/configure.xml: Describe stdio_pure argument to\n\t--enable-cstdio.\n\t* doc/html/manual/configure.html: Regenerate.\n\n(cherry picked from commit b90a70984a9beee39b41f842b56926f9db2069ca)", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "a7edbb014f8d4730395e6da0f74a993170d3bc5d", "committedDate": "2023-07-06T00:20:38Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "7fc075626012b9fd09b20049d8681f2d72395f5c", "committedDate": "2023-07-05T18:09:35Z", "message": "Fix power10 fusion bug with prefixed loads, PR target/105325\n\nThis changes fixes PR target/105325.  PR target/105325 is a bug where an\ninvalid lwa instruction is generated due to power10 fusion of a load\ninstruction to a GPR and an compare immediate instruction with the immediate\nbeing -1, 0, or 1.\n\nIn some cases, when the load instruction is done, the GCC compiler would\ngenerate a load instruction with an offset that was too large to fit into the\nnormal load instruction.\n\nIn particular, loads from the stack might originally have a small offset, so\nthat the load is not a prefixed load.  However, after the stack is set up, and\nregister allocation has been done, the offset now is large enough that we would\nhave to use a prefixed load instruction.\n\nThe support for prefixed loads did not consider that patterns with a fused load\nand compare might have a prefixed address.  Without this support, the proper\nprefixed load won't be generated.\n\nIn the original code, when the split2 pass is run after reload has finished the\nds_form_mem_operand predicate that was used for lwa and ld no longer returns\ntrue.  When the pattern was created, ds_form_mem_operand recognized the insn as\nbeing valid since the offset was small.  But after register allocation,\nds_form_mem_operand did not return true.  Because it didn't return true, the\ninsn could not be split.  Since the insn was not split and the prefix support\ndid not indicate a prefixed instruction was used, the wrong load is generated.\n\nThe solution involves:\n\n    1)\tDon't use ds_form_mem_operand for ld and lwa, always use\n\tnon_update_memory_operand.\n\n    2)\tDelete ds_form_mem_operand since it is no longer used.\n\n    3)\tUse the \"YZ\" constraints for ld/lwa instead of \"m\".\n\n    4)\tIf we don't need to sign extend the lwa, convert it to lwz, and use\n\tcmpwi instead of cmpdi.  Adjust the insn name to reflect the code\n\tgenerate.\n\n    5)\tInsure that the insn using lwa will be recognized as having a prefixed\n\toperand (and hence the insn length will be 16 bytes instead of 8\n\tbytes).\n\n\t5a) Set the prefixed and maybe_prefix attributes to know that\n\t    fused_load_cmpi are also load insns;\n\n\t5b) In the case where we are just setting CC and not using the memory\n\t    afterward, set the clobber to use a DI register, and put an\n\t    explicit sign_extend operation in the split;\n\n\t5c) Set the sign_extend attribute to \"yes\" for lwa.\n\n\t5d) 5a-5c are the things that prefixed_load_p in rs6000.cc checks to\n\t    ensure that lwa is treated as a ds-form instruction and not as\n\t    a d-form instruction (i.e. lwz).\n\n    6)\tAdd a new test case for this case.\n\n    7)\tAdjust the insn counts in fusion-p10-ldcmpi.c.  Because we are no\n\tlonger using ds_form_mem_operand, the ld and lwa instructions will fuse\n\tx-form (reg+reg) addresses in addition ds-form (reg+offset or reg).\n\n2023-06-23   Michael Meissner  <meissner@linux.ibm.com>\n\ngcc/\n\n\tPR target/105325\n\t* config/rs6000/genfusion.pl (gen_ld_cmpi_p10_one): Fix problems that\n\tallowed prefixed lwa to be generated.\n\t* config/rs6000/fusion.md: Regenerate.\n\t* config/rs6000/predicates.md (ds_form_mem_operand): Delete.\n\t* config/rs6000/rs6000.md (prefixed attribute): Add support for load\n\tplus compare immediate fused insns.\n\t(maybe_prefixed): Likewise.\n\ngcc/testsuite/\n\n\tPR target/105325\n\t* g++.target/powerpc/pr105325.C: New test.\n\t* gcc.target/powerpc/fusion-p10-ldcmpi.c: Update insn counts.\n\n\t(cherry picked from commit 370de1488a9a49956c47e5ec8c8f1489b4314a34)\n\nCo-Authored-By: Aaron Sawdey  <acsawdey@linux.ibm.com>", "chatglm2-6b": "\"Based on the criteria provided, the paragraph can be classified into \\\"bug fixes\\\" and \\\"new security features\\\". The paragraph discusses a bug fix where an invalid lwa instruction is generated due to power10 fusion of a load instruction to a GPR and an compare immediate instruction with the immediate being -1, 0, or 1. Additionally, it mentions the implementation of new security features, specifically the support for prefixed loads and the fix of problems that allowed prefixed lwa to be generated.\""}}, {"node": {"oid": "c70c3bea37bbbaea0c68d072cf7395553b08730b", "committedDate": "2023-07-05T17:53:01Z", "message": "rs6000: genfusion: Rewrite load/compare code\n\nThis makes the code more readable, more digestible, more maintainable,\nmore extensible.  That kind of thing.  It does that by pulling things\napart a bit, but also making what stays together more cohesive lumps.\n\nThe original function was a bunch of loops and early-outs, and then\nquite a bit of stuff done per iteration, with the iterations essentially\nindependent of each other.  This patch moves the stuff done for one\niteration to a new _one function.\n\nThe second big thing is the stuff printed to the .md file is done in\n\"here documents\" now, which is a lot more readable than having to quote\nand escape and double-escape pieces of text.  Whitespace inside the\nhere-document is significant (will be printed as-is), which is a bit\nawkward sometimes, or might take some getting used to, but it is also\none of the benefits of using them.\n\nLocal variables are declared at first use (or close to first use).\nThere also shouldn't be many at all, often you can write easier to\nread and manage code by omitting to name something that is hard to name\nin the first place.\n\nFinally some things are done in more typical, more modern, and tighter\nPerl style, for example REs in \"if\"s or \"qw\" for lists of constants.\n\n2023-06-06  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\t* config/rs6000/genfusion.pl (gen_ld_cmpi_p10_one): New, rewritten and\n\tsplit out from...\n\t(gen_ld_cmpi_p10): ... this.\n\n(cherry picked from commit 19e5bf1d5fac00da0b8cd4144d5651b2979d8308)", "chatglm2-6b": "\"The paragraph does not satisfy the criteria for any of the given categories. It does not mention any CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. It only describes a patch that makes the code more readable, extensible and maintainable.\""}}, {"node": {"oid": "6c072ec50158d6ca9134d4778ad60bb452b1f664", "committedDate": "2023-07-05T00:19:53Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "94907dba5250b8038be24b3d0e57daec7ac822eb", "committedDate": "2023-07-04T07:42:35Z", "message": "x86: Update model values for Alderlake and Rocketlake.\n\nUpdate model values for Alderlake and Rocketlake according to SDM.\n\ngcc/ChangeLog\n\n\t* common/config/i386/cpuinfo.h (get_intel_cpu): Remove model value 0xa8\n\tfrom Rocketlake, remove model value 0xbf from Alderlake.", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "4600de6f961c1495433e7fef69a9ef57d86aec56", "committedDate": "2023-07-04T00:20:45Z", "message": "Daily bump.", "chatglm2-6b": "\"\\\"neither\\\"\""}}, {"node": {"oid": "2577f8a936c2d6e0508d4696cbc8dd15e6e6b287", "committedDate": "2023-07-03T00:20:57Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "b224692084e40aabcba1e73166eedf55dfd7f563", "committedDate": "2023-07-02T01:39:18Z", "message": "d: Fix core.volatile.volatileLoad discarded if result is unused\n\nThe first pass of code generation in the D front-end splits up all\ncompound expressions and discards expressions that have no side effects.\nThis included calls to the `volatileLoad' intrinsic if its result was\nnot used, causing such calls to be eliminated from the program.\n\nWe already set TREE_THIS_VOLATILE on the expression, however the\ntree documentation says if this bit is set in an expression, so is\nTREE_SIDE_EFFECTS.  So set TREE_SIDE_EFFECTS on the expression too.\nThis prevents any early discarding from occuring.\n\n\tPR d/110516\n\ngcc/d/ChangeLog:\n\n\t* intrinsics.cc (expand_volatile_load): Set TREE_SIDE_EFFECTS on the\n\texpanded expression.\n\t(expand_volatile_store): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/torture/pr110516a.d: New test.\n\t* gdc.dg/torture/pr110516b.d: New test.\n\n(cherry picked from commit 80ae426a195a0d035640a6301da833564deade52)", "chatglm2-6b": "\"The paragraph does not meet the criteria for any of the given categories. It does not discuss CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. It only mentions a call to the `volatileLoad` intrinsic and a change in the TREE\\\\_THIS\\\\_VOLATILE and TREE\\\\_SIDE\\\\_EFFECTS bits, but does not provide any additional context or information.\""}}, {"node": {"oid": "6f47eb40bdbb7690bcf8faa505c3200fae5fe7b8", "committedDate": "2023-07-02T00:19:38Z", "message": "Daily bump.", "chatglm2-6b": "\"I am unable to recognize the paragraph you provided as it does not contain any information that can be categorized into the criteria you provided. Therefore, my answer is \\\"neither.\\\"\""}}, {"node": {"oid": "750526ee180ae2af66ee07db95c9787e8d86ed4b", "committedDate": "2023-07-01T23:20:08Z", "message": "d: Fix accesses of immutable arrays using constant index still bounds checked\n\nStarts setting TREE_READONLY against specific kinds of VAR_DECLs, so\nthat the middle-end/optimization passes can more aggressively constant\nfold D code that makes use of `immutable' or `const'.\n\n\tPR d/110514\n\ngcc/d/ChangeLog:\n\n\t* decl.cc (get_symbol_decl): Set TREE_READONLY on certain kinds of\n\tconst and immutable variables.\n\t* expr.cc (ExprVisitor::visit (ArrayLiteralExp *)): Set TREE_READONLY\n\ton immutable dynamic array literals.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/pr110514a.d: New test.\n\t* gdc.dg/pr110514b.d: New test.\n\t* gdc.dg/pr110514c.d: New test.\n\t* gdc.dg/pr110514d.d: New test.\n\n(cherry picked from commit 61b1c562f8c703bff045e91257120e42b7fae523)", "chatglm2-6b": "\"The paragraph is not classified into any category. It only lists a series of changes made to the code, including some changes related to security and performance optimization, but does not mention any new features or bug fixes.\""}}, {"node": {"oid": "3fd9e4742a943d358d326afbba90a807ef5f374f", "committedDate": "2023-07-01T00:22:01Z", "message": "Daily bump.", "chatglm2-6b": "\"\\\"neither\\\"\""}}, {"node": {"oid": "d972c592b33ec81be55539d3c524986190ed2d8a", "committedDate": "2023-06-30T19:48:05Z", "message": "Fix couple of endianness issues in fold_ctor_reference\n\nfold_ctor_reference attempts to use a recursive local processing in order\nto call native_encode_expr on the leaf nodes of the constructor, before\nfalling back to calling native_encode_initializer if this fails.\n\nThere are a couple of issues related to endianness present in it:\n  1) it does not specifically handle integral bit-fields; now these are left\njustified on big-endian platforms so cannot be treated like ordinary fields.\n  2) it does not check that the constructor uses the native storage order.\n\ngcc/\n\t* gimple-fold.cc (fold_array_ctor_reference): Fix head comment.\n\t(fold_nonarray_ctor_reference): Likewise.  Specifically deal\n\twith integral bit-fields.\n\t(fold_ctor_reference): Make sure that the constructor uses the\n\tnative storage order.\n\ngcc/testsuite/\n\t* gcc.c-torture/execute/20230630-1.c: New test.\n\t* gcc.c-torture/execute/20230630-2.c: Likewise.\n\t* gcc.c-torture/execute/20230630-3.c: Likewise\n\t* gcc.c-torture/execute/20230630-4.c: Likewise", "chatglm2-6b": "\"The paragraph does not meet the criteria for any of the given categories. It does not provide information about CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. Additionally, the paragraph does not provide any specific information about the issues related to endianness that are present in the code. It only mentions the issues that are related to the use of endianness in the code.\""}}, {"node": {"oid": "1fb30818cf4eaa5f4cdf46dfc3b0c02dce8cd21e", "committedDate": "2023-06-30T00:20:49Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "a435939ba7e5e489a422071014f943c1a577bfe6", "committedDate": "2023-06-29T01:28:03Z", "message": "Refine maskstore patterns with UNSPEC_MASKMOV.\n\nSimilar like r14-2070-gc79476da46728e\n\nIf mem_addr points to a memory region with less than whole vector size\nbytes of accessible memory and k is a mask that would prevent reading\nthe inaccessible bytes from mem_addr, add UNSPEC_MASKMOV to prevent\nit to be transformed to any other whole memory access instructions.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/110237\n\t* config/i386/sse.md (<avx512>_store<mode>_mask): Refine with\n\tUNSPEC_MASKMOV.\n\t(maskstore<mode><avx512fmaskmodelower): Ditto.\n\t(*<avx512>_store<mode>_mask): New define_insn, it's renamed\n\tfrom original <avx512>_store<mode>_mask.", "chatglm2-6b": "\"The paragraph is classified into \\\"new security features\\\" and \\\"new features other than security\\\" categories.\""}}, {"node": {"oid": "1f5591a9578b8cacda9d4c73a25d93598d68e028", "committedDate": "2023-06-29T01:28:01Z", "message": "Refine maskloadmn pattern with UNSPEC_MASKLOAD.\n\nIf mem_addr points to a memory region with less than whole vector size\nbytes of accessible memory and k is a mask that would prevent reading\nthe inaccessible bytes from mem_addr, add UNSPEC_MASKLOAD to prevent\nit to be transformed to vpblendd.\n\ngcc/ChangeLog:\n\n\tPR target/110309\n\t* config/i386/sse.md (maskload<mode><avx512fmaskmodelower>):\n\tRefine pattern with UNSPEC_MASKLOAD.\n\t(maskload<mode><avx512fmaskmodelower>): Ditto.\n\t(*<avx512>_load<mode>_mask): Extend mode iterator to\n\tVI12HF_AVX512VL.\n\t(*<avx512>_load<mode>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr110309.c: New test.", "chatglm2-6b": "\"The paragraph does not satisfy any of the criteria. It does not mention any CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. It only mentions a refine maskloadmn pattern with UNSPEC_MASKLOAD and a change in the config file related to the maskload<mode> value.\""}}, {"node": {"oid": "ff54abd2beebaa309762603bb7bf8f46ea530388", "committedDate": "2023-06-29T00:26:23Z", "message": "i386: Sync tune_string with arch_string for target attribute arch=*\n\nFor function with target attribute arch=*, current logic will set its\ntune to -mtune from command line so all target_clones will get same\ntuning flags which would affect the performance for each clone. Override\ntune with arch if tune was not explicitly specified to get proper tuning\nflags for target_clones.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-options.cc (ix86_valid_target_attribute_tree):\n\tOverride tune_string with arch_string if tune_string is not\n\texplicitly specified.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/mvc17.c: New test.\n\n(cherry picked from commit 2916278d14e9ac28c361c396a67256acbebda6e8)", "chatglm2-6b": "\"The paragraph does not provide information on new security features, new features other than security, bug fixes, or performance optimization. It only mentions a fix for a specific vulnerability and a change in the behavior of the i386 architecture. Therefore, the paragraph can be classified as \\\"neither\\\".\""}}, {"node": {"oid": "c6f1968b85aa5a0952ec5fab88982ff4c7e3cce8", "committedDate": "2023-06-29T00:21:03Z", "message": "Daily bump.", "chatglm2-6b": "\"I cannot recognize the paragraph. Therefore, I cannot categorize it according to the criteria provided.\""}}, {"node": {"oid": "b4561b782427cdfe0fac1a869e79a49187817ffe", "committedDate": "2023-06-28T11:40:16Z", "message": "Support parallel testing in libgomp: fallback Perl 'flock' [PR66005]\n\nFollow-up to commit 6c3b30ef9e0578509bdaf59c13da4a212fe6c2ba\n\"Support parallel testing in libgomp, part II [PR66005]\"\n(\"..., and enable if 'flock' is available for serializing execution testing\"),\nwhere we saw:\n\n> On my Dell Precision 7530 laptop:\n>\n>     $ uname -srvi\n>     Linux 5.15.0-71-generic #78-Ubuntu SMP Tue Apr 18 09:00:29 UTC 2023 x86_64\n>     $ grep '^model name' < /proc/cpuinfo | uniq -c\n>          12 model name      : Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz\n>     $ nvidia-smi -L\n>     GPU 0: Quadro P1000 (UUID: GPU-e043973b-b52a-d02b-c066-a8fdbf64e8ea)\n>\n> ... [...]: case (c) standard configuration, no offloading\n> configured, [...]\n\n>     $ \\time make check-target-libgomp\n>\n> Case (c), baseline; [...]:\n>\n>     1180.98user 110.80system 19:36.40elapsed 109%CPU (0avgtext+0avgdata 505148maxresident)k\n>     1133.22user 111.08system 19:35.75elapsed 105%CPU (0avgtext+0avgdata 505212maxresident)k\n>\n> Case (c), parallelized [using 'flock']:\n>\n> [...]\n>     -j12 GCC_TEST_PARALLEL_SLOTS=12\n>     2591.04user 192.64system 4:44.98elapsed 976%CPU (0avgtext+0avgdata 505216maxresident)k\n>     2581.23user 195.21system 4:47.51elapsed 965%CPU (0avgtext+0avgdata 505212maxresident)k\n\nQuite the same when instead of 'flock' using this fallback Perl 'flock':\n\n    2565.23user 194.35system 4:46.77elapsed 962%CPU (0avgtext+0avgdata 505216maxresident)k\n    2549.38user 200.20system 4:46.08elapsed 961%CPU (0avgtext+0avgdata 505216maxresident)k\n\n\tPR testsuite/66005\n\tgcc/\n\t* doc/install.texi: Document (optional) Perl usage for parallel\n\ttesting of libgomp.\n\tlibgomp/\n\t* testsuite/lib/libgomp.exp: 'flock' through stdout.\n\t* testsuite/flock: New.\n\t* configure.ac (FLOCK): Point to that if no 'flock' available, but\n\t'perl' is.\n\t* configure: Regenerate.\n\n(cherry picked from commit 04abe1944d30eb18a2060cfcd9695d085f7b4752)", "chatglm2-6b": "\"The paragraph is classified into one category, which is \\\"bug fixes\\\". The paragraph does not mention any new security features, new features other than security, performance optimization, or CVE fixes. It only mentions\\u4fee\\u590d\\u4e86\\u4e00\\u4e2a\\u5df2\\u77e5\\u7684\\u6f0f\\u6d1e(PR66005) and includes some debugging information about the use of Perl for parallel testing in libgomp.\""}}, {"node": {"oid": "5c6515076f2ba55a31149085d3826e975c114fe5", "committedDate": "2023-06-28T11:40:15Z", "message": "Support parallel testing in libgomp, part II [PR66005]\n\n..., and enable if 'flock' is available for serializing execution testing.\n\nRegarding the default of 19 parallel slots, this turned out to be a local\nminimum for wall time when testing this on:\n\n    $ uname -srvi\n    Linux 4.2.0-42-generic #49~14.04.1-Ubuntu SMP Wed Jun 29 20:22:11 UTC 2016 x86_64\n    $ grep '^model name' < /proc/cpuinfo | uniq -c\n         32 model name      : Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHz\n\n... in two configurations: case (a) standard configuration, no offloading\nconfigured, case (b) offloading for GCN and nvptx configured but no devices\navailable.  For both cases, default plus '-m32' variant.\n\n    $ \\time make check-target-libgomp RUNTESTFLAGS=\"--target_board=unix\\{,-m32\\}\"\n\nCase (a), baseline:\n\n    6432.23user 332.38system 47:32.28elapsed 237%CPU (0avgtext+0avgdata 505044maxresident)k\n    6382.43user 319.21system 47:06.04elapsed 237%CPU (0avgtext+0avgdata 505172maxresident)k\n\nThis is what people have been complaining about, rightly so, in\n<https://gcc.gnu.org/PR66005> \"libgomp make check time is excessive\" and\nelsewhere.\n\nCase (a), parallelized:\n\n    -j12 GCC_TEST_PARALLEL_SLOTS=10\n    3088.49user 267.74system 6:43.82elapsed 831%CPU (0avgtext+0avgdata 505188maxresident)k\n    -j15 GCC_TEST_PARALLEL_SLOTS=15\n    3308.08user 294.79system 5:56.04elapsed 1011%CPU (0avgtext+0avgdata 505360maxresident)k\n    -j17 GCC_TEST_PARALLEL_SLOTS=17\n    3539.93user 298.99system 5:27.86elapsed 1170%CPU (0avgtext+0avgdata 505112maxresident)k\n    -j18 GCC_TEST_PARALLEL_SLOTS=18\n    3697.50user 317.18system 5:14.63elapsed 1275%CPU (0avgtext+0avgdata 505360maxresident)k\n    -j19 GCC_TEST_PARALLEL_SLOTS=19\n    3765.94user 324.27system 5:13.22elapsed 1305%CPU (0avgtext+0avgdata 505128maxresident)k\n    -j20 GCC_TEST_PARALLEL_SLOTS=20\n    3684.66user 312.32system 5:15.26elapsed 1267%CPU (0avgtext+0avgdata 505100maxresident)k\n    -j23 GCC_TEST_PARALLEL_SLOTS=23\n    4040.59user 347.10system 5:29.12elapsed 1333%CPU (0avgtext+0avgdata 505200maxresident)k\n    -j26 GCC_TEST_PARALLEL_SLOTS=26\n    3973.24user 377.96system 5:24.70elapsed 1340%CPU (0avgtext+0avgdata 505160maxresident)k\n    -j32 GCC_TEST_PARALLEL_SLOTS=32\n    4004.42user 346.10system 5:16.11elapsed 1376%CPU (0avgtext+0avgdata 505160maxresident)k\n\nYay!\n\nCase (b), baseline; 2+ h:\n\n    7227.58user 700.54system 2:14:33elapsed 98%CPU (0avgtext+0avgdata 994264maxresident)k\n\nCase (b), parallelized:\n\n    -j12 GCC_TEST_PARALLEL_SLOTS=10\n    7377.46user 777.52system 16:06.63elapsed 843%CPU (0avgtext+0avgdata 994344maxresident)k\n    -j15 GCC_TEST_PARALLEL_SLOTS=15\n    8019.18user 721.42system 12:13.56elapsed 1191%CPU (0avgtext+0avgdata 994228maxresident)k\n    -j17 GCC_TEST_PARALLEL_SLOTS=17\n    8530.11user 716.95system 10:45.92elapsed 1431%CPU (0avgtext+0avgdata 994176maxresident)k\n    -j18 GCC_TEST_PARALLEL_SLOTS=18\n    8776.79user 645.89system 10:27.20elapsed 1502%CPU (0avgtext+0avgdata 994248maxresident)k\n    -j19 GCC_TEST_PARALLEL_SLOTS=19\n    9332.37user 641.76system 10:15.09elapsed 1621%CPU (0avgtext+0avgdata 994260maxresident)k\n    -j20 GCC_TEST_PARALLEL_SLOTS=20\n    9609.54user 789.88system 10:26.94elapsed 1658%CPU (0avgtext+0avgdata 994284maxresident)k\n    -j23 GCC_TEST_PARALLEL_SLOTS=23\n    10362.40user 911.14system 10:44.47elapsed 1749%CPU (0avgtext+0avgdata 994208maxresident)k\n    -j26 GCC_TEST_PARALLEL_SLOTS=26\n    11159.44user 850.99system 11:09.25elapsed 1794%CPU (0avgtext+0avgdata 994256maxresident)k\n    -j32 GCC_TEST_PARALLEL_SLOTS=32\n    11453.50user 939.52system 11:00.38elapsed 1876%CPU (0avgtext+0avgdata 994240maxresident)k\n\nOn my Dell Precision 7530 laptop:\n\n    $ uname -srvi\n    Linux 5.15.0-71-generic #78-Ubuntu SMP Tue Apr 18 09:00:29 UTC 2023 x86_64\n    $ grep '^model name' < /proc/cpuinfo | uniq -c\n         12 model name      : Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz\n    $ nvidia-smi -L\n    GPU 0: Quadro P1000 (UUID: GPU-e043973b-b52a-d02b-c066-a8fdbf64e8ea)\n\n... in two configurations: case (c) standard configuration, no offloading\nconfigured, case (d) offloading for nvptx configured and device available.\nFor both cases, only default variant, no '-m32'.\n\n    $ \\time make check-target-libgomp\n\nCase (c), baseline; roughly half of case (a) (just one variant):\n\n    1180.98user 110.80system 19:36.40elapsed 109%CPU (0avgtext+0avgdata 505148maxresident)k\n    1133.22user 111.08system 19:35.75elapsed 105%CPU (0avgtext+0avgdata 505212maxresident)k\n\nCase (c), parallelized:\n\n    -j12 GCC_TEST_PARALLEL_SLOTS=2\n    1143.83user 110.76system 10:20.46elapsed 202%CPU (0avgtext+0avgdata 505216maxresident)k\n    -j12 GCC_TEST_PARALLEL_SLOTS=6\n    1737.08user 143.94system 4:59.48elapsed 628%CPU (0avgtext+0avgdata 505200maxresident)k\n    1730.31user 143.02system 4:58.75elapsed 627%CPU (0avgtext+0avgdata 505152maxresident)k\n    -j12 GCC_TEST_PARALLEL_SLOTS=8\n    2192.63user 169.34system 4:52.96elapsed 806%CPU (0avgtext+0avgdata 505216maxresident)k\n    2219.04user 167.67system 4:53.19elapsed 814%CPU (0avgtext+0avgdata 505152maxresident)k\n    -j12 GCC_TEST_PARALLEL_SLOTS=10\n    2463.93user 184.98system 4:48.39elapsed 918%CPU (0avgtext+0avgdata 505200maxresident)k\n    2455.62user 183.68system 4:47.40elapsed 918%CPU (0avgtext+0avgdata 505216maxresident)k\n    -j12 GCC_TEST_PARALLEL_SLOTS=12\n    2591.04user 192.64system 4:44.98elapsed 976%CPU (0avgtext+0avgdata 505216maxresident)k\n    2581.23user 195.21system 4:47.51elapsed 965%CPU (0avgtext+0avgdata 505212maxresident)k\n    -j20 GCC_TEST_PARALLEL_SLOTS=20 [oversubscribe]\n    2613.18user 199.51system 4:44.06elapsed 990%CPU (0avgtext+0avgdata 505216maxresident)k\n\nCase (d), baseline (compared to case (b): only nvptx offloading compilation,\nbut also nvptx offloading execution); ~1 h:\n\n    2841.93user 653.68system 1:02:26elapsed 93%CPU (0avgtext+0avgdata 909792maxresident)k\n    2842.03user 654.39system 1:02:24elapsed 93%CPU (0avgtext+0avgdata 909880maxresident)k\n\nCase (d), parallelized:\n\n    -j12 GCC_TEST_PARALLEL_SLOTS=2\n    2856.39user 606.87system 33:58.64elapsed 169%CPU (0avgtext+0avgdata 909948maxresident)k\n    -j12 GCC_TEST_PARALLEL_SLOTS=6\n    3444.90user 666.86system 18:37.57elapsed 367%CPU (0avgtext+0avgdata 909856maxresident)k\n    3462.13user 667.13system 18:36.87elapsed 369%CPU (0avgtext+0avgdata 909872maxresident)k\n    -j12 GCC_TEST_PARALLEL_SLOTS=8\n    3929.74user 716.22system 18:02.36elapsed 429%CPU (0avgtext+0avgdata 909832maxresident)k\n    -j12 GCC_TEST_PARALLEL_SLOTS=10\n    4152.84user 736.16system 17:43.05elapsed 459%CPU (0avgtext+0avgdata 909872maxresident)k\n    -j12 GCC_TEST_PARALLEL_SLOTS=12\n    4209.60user 749.00system 17:35.20elapsed 469%CPU (0avgtext+0avgdata 909840maxresident)k\n    -j20 GCC_TEST_PARALLEL_SLOTS=20 [oversubscribe]\n    4255.54user 756.78system 17:29.06elapsed 477%CPU (0avgtext+0avgdata 909868maxresident)k\n\nWorth noting is that with nvptx offloading, there is one execution test case\nthat times out ('libgomp.fortran/reverse-offload-5.f90').  This effectively\nstalls progress for almost 5 min: quickly other executions test cases queue up\non the lock for all parallel slots.  That's working as expected; just noting\nthis as it accordingly does skew the wall time numbers.\n\n\tPR testsuite/66005\n\tlibgomp/\n\t* configure.ac: Look for 'flock'.\n\t* testsuite/Makefile.am (gcc_test_parallel_slots): Enable parallel testing.\n\t* testsuite/config/default.exp: Don't 'load_lib \"standard.exp\"' here...\n\t* testsuite/lib/libgomp.exp: ... but here, instead.\n\t(libgomp_load): Override for parallel testing.\n\t* testsuite/libgomp-site-extra.exp.in (FLOCK): Set.\n\t* configure: Regenerate.\n\t* Makefile.in: Regenerate.\n\t* testsuite/Makefile.in: Regenerate.\n\n(cherry picked from commit 6c3b30ef9e0578509bdaf59c13da4a212fe6c2ba)", "chatglm2-6b": "\"Based\""}}, {"node": {"oid": "66df913899d32e7726f986afb61c5c5615eb2a36", "committedDate": "2023-06-28T11:40:15Z", "message": "Support parallel testing in libgomp, part I [PR66005]\n\n..., while still hard-coding the number of parallel slots to one.\n\n\tPR testsuite/66005\n\tlibgomp/\n\t* testsuite/Makefile.am (PWD_COMMAND): New variable.\n\t(%/site.exp): New target.\n\t(check_p_numbers0, check_p_numbers1, check_p_numbers2)\n\t(check_p_numbers3, check_p_numbers4, check_p_numbers5)\n\t(check_p_numbers6, check_p_numbers, gcc_test_parallel_slots)\n\t(check_p_subdirs)\n\t(check_DEJAGNU_libgomp_targets): New variables.\n\t($(check_DEJAGNU_libgomp_targets)): New target.\n\t($(check_DEJAGNU_libgomp_targets)): New dependency.\n\t(check-DEJAGNU $(check_DEJAGNU_libgomp_targets)): New targets.\n\t* testsuite/Makefile.in: Regenerate.\n\t* testsuite/lib/libgomp.exp: For parallel testing,\n\t'load_file ../libgomp-test-support.exp'.\n\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>\n(cherry picked from commit e797db5c744f7b4e110f23a495fca8e6b8aebe83)", "chatglm2-6b": "\"category: \\\"new security features\\\"\\n\\nThis paragraph does not contain any information that could be classified as \\\"CVE fixes\\\", \\\"new features other than security\\\", \\\"bug fixes\\\", or \\\"performance optimization\\\". However, it does mention the addition of a new variable, a new target, and the generation of a new test suite. Additionally, it lists the names of the authors and a release number.\""}}, {"node": {"oid": "a3d6d29656392195fe9b31e340dd6d23fc9d2ce5", "committedDate": "2023-06-28T11:40:15Z", "message": "libgomp C++ testsuite: Use 'lang_include_flags' instead of 'libstdcxx_includes'\n\nWith nvptx offloading configured, and supported, and CUDA available:\n\n    $ make check-target-libgomp RUNTESTFLAGS=\"--all c.exp=context-1.c c++.exp=context-1.c\"\n    [...]\n    Running [...]/libgomp.oacc-c/c.exp ...\n    PASS: libgomp.oacc-c/../libgomp.oacc-c-c++-common/context-1.c -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none  -O0  (test for excess errors)\n    PASS: libgomp.oacc-c/../libgomp.oacc-c-c++-common/context-1.c -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none  -O0  execution test\n    PASS: libgomp.oacc-c/../libgomp.oacc-c-c++-common/context-1.c -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none  -O2  (test for excess errors)\n    PASS: libgomp.oacc-c/../libgomp.oacc-c-c++-common/context-1.c -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none  -O2  execution test\n    UNSUPPORTED: libgomp.oacc-c/../libgomp.oacc-c-c++-common/context-1.c -DACC_DEVICE_TYPE_host=1 -DACC_MEM_SHARED=1 -foffload=disable  -O2\n    Running [...]/libgomp.oacc-c++/c++.exp ...\n    PASS: libgomp.oacc-c++/../libgomp.oacc-c-c++-common/context-1.c -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none  -O0  (test for excess errors)\n    PASS: libgomp.oacc-c++/../libgomp.oacc-c-c++-common/context-1.c -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none  -O0  execution test\n    PASS: libgomp.oacc-c++/../libgomp.oacc-c-c++-common/context-1.c -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none  -O2  (test for excess errors)\n    PASS: libgomp.oacc-c++/../libgomp.oacc-c-c++-common/context-1.c -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none  -O2  execution test\n    UNSUPPORTED: libgomp.oacc-c++/../libgomp.oacc-c-c++-common/context-1.c -DACC_DEVICE_TYPE_host=1 -DACC_MEM_SHARED=1 -foffload=disable  -O2\n    [...]\n\n..., but for 'c++.exp=context-1.c' alone, we currently get all-UNSUPPORTED:\n\n    $ make check-target-libgomp RUNTESTFLAGS_=\"--all c++.exp=context-1.c\"\n    [...]\n    Running [...]/libgomp.oacc-c++/c++.exp ...\n    UNSUPPORTED: libgomp.oacc-c++/../libgomp.oacc-c-c++-common/context-1.c -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none  -O0\n    UNSUPPORTED: libgomp.oacc-c++/../libgomp.oacc-c-c++-common/context-1.c -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none  -O2\n    UNSUPPORTED: libgomp.oacc-c++/../libgomp.oacc-c-c++-common/context-1.c -DACC_DEVICE_TYPE_host=1 -DACC_MEM_SHARED=1 -foffload=disable  -O2\n    [...]\n\nThat is, if 'c.exp' executes first, it does successfully evaluate\n'dg-require-effective-target openacc_cublas' -- and does cache this result (so\nit isn't reevaluated for 'c++.exp').  However, for 'c++.exp' alone (that is,\nwithout the 'c.exp' result cached), we run into:\n\n    spawn -ignore SIGHUP [xgcc] [...] -x c++ openacc_cublas2311907.c [...]\n    In file included from /usr/include/cuda_fp16.h:3673,\n                     from /usr/include/cublas_api.h:75,\n                     from /usr/include/cublas_v2.h:65,\n                     from openacc_cublas2311907.c:3:\n    /usr/include/cuda_fp16.hpp:67:10: fatal error: utility: No such file or directory\n\nWe're missing include paths to C++/libstdc++ build-tree headers.\n\nFix this by using the mechanism introduced for Fortran in\nr212268 (commit f707da16f714f7fe5a42391748212c84dfec639b) re\n\"libgomp.fortran/fortran.exp - add -fintrinsic-modules-path ${blddir}\".\n\n\tlibgomp/\n\t* testsuite/libgomp.c++/c++.exp: Use 'lang_include_flags' instead\n\tof 'libstdcxx_includes'.\n\t* testsuite/libgomp.oacc-c++/c++.exp: Likewise.\n\n(cherry picked from commit 1b93b9191d073bf9e867ab8bfc8e4b59ba5af1f3)", "chatglm2-6b": "\"\\\"new security features\\\", \\\"new features other than security\\\", \\\"bug fixes\\\", \\\"performance optimization\\\", \\\"CVE fixes\\\", \\\"new security features\\\", \\\"new features other than security\\\", \\\"bug fixes\\\", \\\"performance optimization\\\", \\\"neither\\\"\""}}, {"node": {"oid": "91cf372463a26e62f83276074dda7a0b7405b0ab", "committedDate": "2023-06-28T02:41:17Z", "message": "go: Update usage of TARGET_AIX to TARGET_AIX_OS\n\nTARGET_AIX is defined to a non-zero value on linux and maybe other\npowerpc64le targets.  This leads to unexpected behavior such as\ndropping the .go_export section when linking a shared library\non linux/powerpc64le.\n\nInstead, use TARGET_AIX_OS to toggle AIX specific behavior.\n\nFixes golang/go#60798.\n\n2023-06-22  Paul E. Murphy  <murphyp@linux.ibm.com>\n\ngcc/go/\n\t* go-backend.cc [TARGET_AIX]: Rename and update usage to TARGET_AIX_OS.\n\t* go-lang.cc: Likewise.\n\n(cherry picked from commit b76cd1ec361712e1ac9ca5e0246da24ea2b78916)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "41b037966ce4ad9b6381def1e4933111d1974da1", "committedDate": "2023-06-28T01:54:03Z", "message": "Make option mvzeroupper independent of optimization level.\n\npass_insert_vzeroupper is under condition\n\nTARGET_AVX && TARGET_VZEROUPPER\n&& flag_expensive_optimizations && !optimize_size\n\nBut the document of mvzeroupper doesn't mention the insertion\nrequired -O2 and above, it may confuse users when they explicitly\nuse -Os -mvzeroupper.\n\n------------\nmvzeroupper\nTarget Mask(VZEROUPPER) Save\nGenerate vzeroupper instruction before a transfer of control flow out of\nthe function.\n------------\n\nThe patch moves flag_expensive_optimizations && !optimize_size to\nix86_option_override_internal. It makes -mvzeroupper independent of\noptimization level, but still keeps the behavior of architecture\ntuning(emit_vzeroupper) unchanged.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-features.cc (pass_insert_vzeroupper:gate):\n\tMove flag_expensive_optimizations && !optimize_size to ..\n\t* config/i386/i386-options.cc (ix86_option_override_internal):\n\t.. this, it makes -mvzeroupper independent of optimization\n\tlevel, but still keeps the behavior of architecture\n\ttuning(emit_vzeroupper) unchanged.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-vzeroupper-29.c: New testcase.\n\t* gcc.target/i386/avx-vzeroupper-12.c: Adjust testcase.\n\t* gcc.target/i386/avx-vzeroupper-7.c: Ditto.\n\t* gcc.target/i386/avx-vzeroupper-9.c: Ditto.", "chatglm2-6b": "\"Based on the criteria provided, the paragraph can be classified into \\\"new security features\\\" and \\\"new features other than security\\\" with a hint of \\\"bug fixes\\\" and \\\"performance optimization\\\" in the last two sentences. However, it is difficult to determine if there are any specific \\\"CVE fixes\\\" or \\\"new features other than security\\\" as the paragraph does not mention those terms. Additionally, the paragraph does not provide any information about performance optimization beyond the general optimization level mentioned in the last sentence. Overall, the paragraph appears to be related to optimizing the performance of the AVX-VZEROUPPER instruction in the i386 architecture.\""}}, {"node": {"oid": "5b9b636513cd17447ea708f2dba21978cb96909b", "committedDate": "2023-06-28T00:21:28Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "ee3bb7cb5d2ecfc64adcfd61afb390e72cc08661", "committedDate": "2023-06-27T16:50:34Z", "message": "Mark asm goto with outputs as volatile\n\nThe manual references asm goto as being implicitly volatile already\nand that was done when asm goto could not have outputs. When outputs\nwere added to `asm goto`, only asm goto without outputs were still being\nmarked as volatile. Now some parts of GCC decide, removing the `asm goto`\nis ok if the output is not used, though not updating the CFG (this happens\non both the RTL level and the gimple level). Since the biggest user of `asm goto`\nis the Linux kernel and they expect them to be volatile (they use them to\ncopy to/from userspace), we should just mark the inline-asm as volatile.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu.\n\n\tPR middle-end/110420\n\tPR middle-end/103979\n\tPR middle-end/98619\n\ngcc/ChangeLog:\n\n\t* gimplify.cc (gimplify_asm_expr): Mark asm with labels as volatile.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.c-torture/compile/asmgoto-6.c: New test.\n\n(cherry picked from commit 478840a2ca491fbff44371caee4983d1e7b7b7cf)", "chatglm2-6b": "\"The paragraph does not satisfy any of the criteria specified. It does not mention any CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. It only mentions that the manual references asm goto as being implicitly volatile already and that was done when asm goto could not have outputs. The paragraph also mentions that some parts of GCC decide to remove the `asm goto` if the output is not used, though not updating the CFG.\""}}, {"node": {"oid": "41cc784882428922c73691ed6811be41cdb4a583", "committedDate": "2023-06-27T00:21:48Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "0f54a73b998b72f7c8452a63730ec3b16fc47854", "committedDate": "2023-06-26T01:32:13Z", "message": "d: Suboptimal codegen for __builtin_expect(cond, false)\n\nSince PR96435, both boolean objects and expressions have been evaluated\nin the following way.\n\n    (*(ubyte*)&obj_or_expr) & 1\n\nIt has been noted that sometimes this can cause the back-end to optimize\nin non-obvious ways - in particular with __builtin_expect.\n\nThis @safe feature is now restricted to just when reading the value of a\nbool field that comes from a union.\n\n\tPR d/110359\n\ngcc/d/ChangeLog:\n\n\t* d-convert.cc (convert_for_rvalue): Only apply the @safe boolean\n\tconversion to boolean fields of a union.\n\t(convert_for_condition): Call convert_for_rvalue in the default case.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/pr110359.d: New test.\n\n(cherry picked from commit ab98db1e8c1b997414539f41b7fb814019497d8d)", "chatglm2-6b": "\"The paragraph does not meet the criteria for any of the given categories. It does not discuss CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. It only mentions a change in the behavior of the `__builtin_expect` function with regards to boolean objects and expressions.\""}}, {"node": {"oid": "016047f54713dc601c661ab57c78a26da3759608", "committedDate": "2023-06-26T00:47:15Z", "message": "d: Fix crash in d/dmd/root/aav.d:127 dmd_aaGetRvalue from DsymbolTable::lookup\n\nBackports patch from upstream dmd mainline for fixing PR110113.\n\nThe data being Mem.xrealloc'd contains many Array(T) fields, some of\nwhich have self references in their data.ptr field thanks to the\nsmallarray optimization used by Array.\n\nNaturally then, the memcpy from old GC data to new retains those self\nreferenced addresses, and the GC marks the old data as \"free\". Some time\nlater GC.malloc will return a pointer to said \"free\" data. So now we\nhave two GC references to the same memory. One that is treating the data\nas an Array(VarDeclaration) in dmd.escape.escapeByStorage, and the other\nas an AA in the symtab of a dmd.dsymbol.ScopeDsymbol.\n\nFix this memory corruption by not storing the data in a global variable\nfor reuse.  If there are no more live references, the GC will free it.\n\n\tPR d/110113\n\ngcc/d/ChangeLog:\n\n\t* dmd/escape.d (checkMutableArguments): Always allocate new buffer for\n\tcomputing escapeBy.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.test/compilable/test23978.d: New test.\n\nReviewed-on: https://github.com/dlang/dmd/pull/15302\n(cherry picked from commit ae3a4cefd855512b10b833a56f275b701bacdb34)", "chatglm2-6b": "\"The paragraph does not satisfy any of the criteria. It does not provide information about CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. It only mentions a fix for a memory corruption and some changes related to the dmd mainline.\""}}, {"node": {"oid": "f315d6592d4d313b02eac340b7b4b5e0147e7cb4", "committedDate": "2023-06-26T00:20:00Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "fb4a080d854d2e517afe1013a316ee3327aecb68", "committedDate": "2023-06-25T00:19:43Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "e64fd0c315ea9ee5a6fe0a5124f73cdd0642b2ad", "committedDate": "2023-06-24T00:20:02Z", "message": "Daily bump.", "chatglm2-6b": "\"I am unable to recognize the paragraph you provided. Therefore, I am unable to categorize it according to the criteria you have provided.\""}}, {"node": {"oid": "f4d011b4aa0fc7a9e3df0dada2fd3e1e95e32a6c", "committedDate": "2023-06-23T23:16:06Z", "message": "compiler, libgo: support bootstrapping gc compiler\n\nIn the Go 1.21 release the package internal/profile imports\ninternal/lazyregexp.  That works when bootstrapping with Go 1.17,\nbecause that compiler has internal/lazyregep and permits importing it.\nWe also have internal/lazyregexp in libgo, but since it is not installed\nit is not available for importing.  This CL adds internal/lazyregexp\nto the list of internal packages that are installed for bootstrapping.\n\nThe Go 1.21, and earlier, releases have a couple of functions in\nthe internal/abi package that are always fully intrinsified.\nThe gofrontend recognizes and intrinsifies those functions as well.\nHowever, the gofrontend was also building function descriptors\nfor references to the functions without calling them, which\nfailed because there was nothing to refer to.  That is OK for the\ngc compiler, which guarantees that the functions are only called,\nnot referenced.  This CL arranges to not generate function descriptors\nfor these functions.\n\nFor golang/go#60913\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/504798", "chatglm2-6b": "\"The paragraph describes a series of changes to the Go programming language, including the addition of a new package (internal/profile) and the import of an existing package (internal/lazyregexp). It also mentions the removal of function descriptors for functions that are not fully intrinsified and the prevention of the gofrontend from building function descriptors for functions that are not called. Based on this analysis, the paragraph can be classified as \\\"new security features\\\" and \\\"new features other than security\\\".\""}}, {"node": {"oid": "72ceed08d45137b0f1a9b4ea8ca533aa6489bc39", "committedDate": "2023-06-23T12:58:50Z", "message": "libstdc++: Document removal of implicit allocator rebinding extensions\n\nTraditionally libstdc++ allowed containers to be\ninstantiated with allocator's that have the wrong value type, implicitly\nrebinding the allocator to the container's value type. Since C++20 that\nhas been explicitly ill-formed, so the extension is no longer supported\nin strict modes (e.g. -std=c++17) and in C++20 and later.\n\nlibstdc++-v3/ChangeLog:\n\n\t* doc/xml/manual/evolution.xml: Document removal of implicit\n\tallocator rebinding extensions in strict mode and for C++20.\n\t* doc/html/*: Regenerate.\n\n(cherry picked from commit 8cbaf679a3c1875c5475bd1cb0fb86fb9d03b2d4)", "chatglm2-6b": "\"The paragraph is classified into one category: \\\"bug fixes\\\".\""}}, {"node": {"oid": "c409f2a1cc5d5bffe2fb93454924ae402c57f8f6", "committedDate": "2023-06-23T10:34:03Z", "message": "tree-optimization/110298 - CFG cleanup and stale nb_iterations\n\nWhen unrolling we eventually kill nb_iterations info since it may\nrefer to removed SSA names.  But we do this only after cleaning\nup the CFG which in turn can end up accessing it.  Fixed by\nswapping the two.\n\n\tPR tree-optimization/110298\n\t* tree-ssa-loop-ivcanon.cc (tree_unroll_loops_completely):\n\tClear number of iterations info before cleaning up the CFG.\n\n\t* gcc.dg/torture/pr110298.c: New testcase.\n\n(cherry picked from commit 916add3bf6e46467e4391e358b11ecfbc4daa275)", "chatglm2-6b": "\"The paragraph is not classified into any of the given categories. It only contains information about a bug fix and a new feature (CVE fix) related to performance optimization.\""}}, {"node": {"oid": "f06f1b4102b1c6965ad6b1da0094d6de5c3a2940", "committedDate": "2023-06-23T10:33:32Z", "message": "middle-end/110182 - TYPE_PRECISION on VECTOR_TYPE causes wrong-code\n\nWhen folding two conversions in a row we use TYPE_PRECISION but\nthat's invalid for VECTOR_TYPE.  The following fixes this by\nusing element_precision instead.\n\n\tPR middle-end/110182\n\t* match.pd (two conversions in a row): Use element_precision\n\tto DTRT for VECTOR_TYPE.\n\n(cherry picked from commit 3e12669a0eb968cfcbe9242b382fd8020935edf8)", "chatglm2-6b": "\"The paragraph does not meet the criteria for any of the given categories. It does not mention any CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. Therefore, the answer is \\\"neither.\\\"\""}}, {"node": {"oid": "c3f04b79eca06c8fe4ad5d2e3d194942a7c2ef10", "committedDate": "2023-06-23T00:20:18Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "4481d70c9edcd89a8d9f6c0d705b05230aa080e3", "committedDate": "2023-06-22T10:13:55Z", "message": "aarch64: Allow compiler to define ls64 builtins [PR110132]\n\nThis patch refactors the ls64 builtins to allow the compiler to define them\ndirectly instead of having wrapper functions in arm_acle.h. This should be not\nonly easier to maintain, but it makes two important correctness fixes:\n - It fixes PR110132, where the builtins ended up getting declared with\n   invisible bindings in the C FE, so the FE ended up synthesizing\n   incompatible implicit definitions for these builtins.\n - It allows the builtins to be used with LTO, which didn't work previously.\n\nWe also take the opportunity to add test coverage from C++ for these\nbuiltins.\n\ngcc/ChangeLog:\n\n\tPR target/110132\n\t* config/aarch64/aarch64-builtins.cc (aarch64_general_simulate_builtin):\n\tNew. Use it ...\n\t(aarch64_init_ls64_builtins): ... here. Switch to declaring public ACLE\n\tnames for builtins.\n\t(aarch64_general_init_builtins): Ensure we invoke the arm_acle.h\n\tsetup if in_lto_p, just like we do for SVE.\n\t* config/aarch64/arm_acle.h: (__arm_ld64b): Delete.\n\t(__arm_st64b): Delete.\n\t(__arm_st64bv): Delete.\n\t(__arm_st64bv0): Delete.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/110132\n\t* lib/target-supports.exp (check_effective_target_aarch64_asm_FUNC_ok):\n\tExtend to ls64.\n\t* g++.target/aarch64/acle/acle.exp: New.\n\t* g++.target/aarch64/acle/ls64.C: New test.\n\t* g++.target/aarch64/acle/ls64_lto.C: New test.\n\t* gcc.target/aarch64/acle/ls64_lto.c: New test.\n\t* gcc.target/aarch64/acle/pr110132.c: New test.\n\n(cherry picked from commit 9963029a24f2d2510b82e7106fae3f364da33c5d)", "chatglm2-6b": "\"The paragraph does not satisfy any of the criteria. It does not mention any CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. It only mentions refactoring the ls64 builtins to allow the compiler to define them directly instead of having wrapper functions in arm\\\\_acle.h, which should make it easier to maintain and correct two important issues.\""}}, {"node": {"oid": "0112ed013847ca9dbef4ba21f1c3f94c5bbe310b", "committedDate": "2023-06-22T10:13:55Z", "message": "aarch64: Fix wrong code with st64b builtin [PR110100]\n\nThe st64b pattern incorrectly had an output constraint on the register\noperand containing the destination address for the store, leading to\nwrong code. This patch fixes that.\n\ngcc/ChangeLog:\n\n\tPR target/110100\n\t* config/aarch64/aarch64-builtins.cc (aarch64_expand_builtin_ls64):\n\tUse input operand for the destination address.\n\t* config/aarch64/aarch64.md (st64b): Fix constraint on address\n\toperand.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/110100\n\t* gcc.target/aarch64/acle/pr110100.c: New test.\n\n(cherry picked from commit 737a0b749a7bc3e7cb904ea2d4b18dc130514b85)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "c0ab0d4af51382d9d8d4e6b026865842d8e06d7e", "committedDate": "2023-06-22T10:13:55Z", "message": "aarch64: Fix whitespace in ls64 builtin implementation [PR110100]\n\nThe ls64 builtin code was using incorrect GNU style with eight spaces where\nthere should be a tab. Fixed thusly.\n\ngcc/ChangeLog:\n\n\tPR target/110100\n\t* config/aarch64/aarch64-builtins.cc (aarch64_init_ls64_builtins_types):\n\tReplace eight consecutive spaces with tabs.\n\t(aarch64_init_ls64_builtins): Likewise.\n\t(aarch64_expand_builtin_ls64): Likewise.\n\t* config/aarch64/aarch64.md (ld64b): Likewise.\n\t(st64b): Likewise.\n\t(st64bv): Likewise\n\t(st64bv0): Likewise.\n\n(cherry picked from commit 713613541254039a34e1dd8fd4a613a299af1fd6)", "chatglm2-6b": "\"The paragraph does not meet the criteria for any of the given categories. It does not mention any CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. Therefore, the answer is \\\"neither.\\\"\""}}, {"node": {"oid": "2dfa92f0653771f6872847d1f2629abce21c9158", "committedDate": "2023-06-22T00:19:48Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "636795a6dfc17ead7b22b9f76b0fc47bdb9d357d", "committedDate": "2023-06-21T09:09:41Z", "message": "libstdc++: avoid bogus -Wrestrict [PR105651]\n\n\tPR tree-optimization/105651\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.tcc (_M_replace): Add an assert\n\tto avoid -Wrestrict false positive.", "chatglm2-6b": "\"The paragraph is classified as \\\"new security features\\\" and \\\"new features other than security\\\" because it mentions two new features: \\\"CVE fixes\\\" and \\\"new security features\\\". It does not mention \\\"bug fixes\\\" or \\\"performance optimization\\\". Therefore, the answer is \\\"new security features\\\" and \\\"new features other than security\\\".\""}}, {"node": {"oid": "5071f380a1bd741a361982750d28c20acc9f1f05", "committedDate": "2023-06-21T00:20:53Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "4591c2c8a6b15ca99ba049d84e0e694f12db4f60", "committedDate": "2023-06-20T03:20:18Z", "message": "testsuite: Check int128 effective target for pr109932-{1,2}.c [PR110230]\n\nThis patch is to make newly added test cases pr109932-{1,2}.c\ncheck int128 effective target to avoid unsupported type error\non 32-bit.  I did hit this failure during testing and fixed\nit, but made a stupid mistake not updating the local formatted\npatch which was actually out of date.\n\n\tPR testsuite/110230\n\tPR target/109932\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr109932-1.c: Adjust with int128 effective target.\n\t* gcc.target/powerpc/pr109932-2.c: Ditto.\n\n(cherry picked from commit 16eb9d69079d769b2aa2c07ce54aca20f5547c14)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "31d88c795a0eb05df5a0684c34ec74116cce133f", "committedDate": "2023-06-20T03:20:18Z", "message": "rs6000: Guard __builtin_{un,}pack_vector_int128 with vsx [PR109932]\n\nAs PR109932 shows, builtins __builtin_{un,}pack_vector_int128\nshould be guarded under vsx rather than power7, as their\ncorresponding bif patterns have the conditions TARGET_VSX\nand VECTOR_MEM_ALTIVEC_OR_VSX_P (V1TImode).  This patch is to\nmove __builtin_{un,}pack_vector_int128 to stanza vsx to ensure\ntheir supports.\n\n\tPR target/109932\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000-builtins.def (__builtin_pack_vector_int128,\n\t__builtin_unpack_vector_int128): Move from stanza power7 to vsx.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr109932-1.c: New test.\n\t* gcc.target/powerpc/pr109932-2.c: New test.\n\n(cherry picked from commit ff83d1b47aadcdaf80a4fda84b0dc00bb2cd3641)", "chatglm2-6b": "\"Based on the criteria you have provided, the paragraph cannot be classified into any category. It does not mention any CVE fixes, new security features, new features other than security, bug fixes, or performance optimization.\""}}, {"node": {"oid": "90e1030d4c6d981c2293d89db6d1d57c057ad61d", "committedDate": "2023-06-20T03:20:18Z", "message": "rs6000: Don't use TFmode for 128 bits fp constant in toc [PR110011]\n\nAs PR110011 shows, when encoding 128 bits fp constant into\ntoc, we adopts REAL_VALUE_TO_TARGET_LONG_DOUBLE which is\nto find the first float mode with LONG_DOUBLE_TYPE_SIZE\nbits of precision, it would be TFmode here.  But the 128\nbits fp constant can be with mode IFmode or KFmode, which\ndoesn't necessarily have the same underlying float format\nas the one of TFmode, like this PR exposes, with option\n-mabi=ibmlongdouble TFmode has ibm_extended_format while\nKFmode has ieee_quad_format, mixing up the formats (the\nencoding/decoding ways) would cause unexpected results.\n\nThis patch is to make it use constant's own mode instead\nof TFmode for real_to_target call.\n\n\tPR target/110011\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.cc (output_toc): Use the mode of the 128-bit\n\tfloating constant itself for real_to_target call.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr110011.c: New test.\n\n(cherry picked from commit 388809f2afde874180da0669c669e241037eeba0)", "chatglm2-6b": "\"Only one category can be determined from the given paragraph: \\\"bug fixes\\\". The paragraph mentions a fix for a specific issue (using the wrong float mode for a constant), but does not mention any new security features, new features other than security, or performance optimization.\""}}, {"node": {"oid": "372d0240a07cd765cd45e47ef9bf4c401a2ee8dd", "committedDate": "2023-06-20T00:21:04Z", "message": "Daily bump.", "chatglm2-6b": "\"\\\"neither\\\"\""}}, {"node": {"oid": "782bb52886eb05f83d9f86898f27027d49060c39", "committedDate": "2023-06-19T00:20:34Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "4dd85040abf0c26aa5395f7bd44fbf4207b5e252", "committedDate": "2023-06-18T00:20:33Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "5a8af9c5a03edad65917b5789ffae6b3d90cf35a", "committedDate": "2023-06-17T00:21:07Z", "message": "Daily bump.", "chatglm2-6b": "\"I am unable to recognize the paragraph you provided. Therefore, I cannot categorize it according to the criteria you have provided.\""}}, {"node": {"oid": "43e8299b7181c4828eab984259a8d76edfec0bd2", "committedDate": "2023-06-16T00:20:59Z", "message": "Daily bump.", "chatglm2-6b": "\"I am unable to recognize the paragraph you provided. Please provide more context or clarify the paragraph content so I can better assist you.\""}}, {"node": {"oid": "b93928b36dbc88efd55cbefecb3a26302fc099db", "committedDate": "2023-06-15T10:20:25Z", "message": "aarch64: testsuite: disable stack protector for tests relying on stack offset\n\nStack protector needs a guard value on the stack and change the stack\nlayout.  So we need to disable it for those tests, to avoid test failure\nwith --enable-default-ssp.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/shrink_wrap_1.c (dg-options): Add\n\t-fno-stack-protector.\n\t* gcc.target/aarch64/stack-check-cfa-1.c (dg-options): Add\n\t-fno-stack-protector.\n\t* gcc.target/aarch64/stack-check-cfa-2.c (dg-options): Add\n\t-fno-stack-protector.\n\t* gcc.target/aarch64/test_frame_17.c (dg-options): Add\n\t-fno-stack-protector.\n\n(cherry picked from commit 59a72acbccf4c81a04b4d09760fc8b16992de106)", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "cd0b91e1dfa6a60e7e7981207c43695f0ba422a1", "committedDate": "2023-06-15T10:20:19Z", "message": "aarch64: testsuite: disable stack protector for pr104005.c\n\nStoring stack guarding variable need one stp instruction, breaking the\nscan-assembler-not pattern in the test.  Disable stack protector to\navoid a test failure with --enable-default-ssp.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/pr104005.c (dg-options): Add\n\t-fno-stack-protector.\n\n(cherry picked from commit 5937cfb981debb2aeb72a1ed255fc3ed5a5835c4)", "chatglm2-6b": "\"The paragraph is classified as \\\"new security features\\\" and \\\"new features other than security\\\".\""}}, {"node": {"oid": "868371e673de074565b5340f81049eb61d070b07", "committedDate": "2023-06-15T10:20:14Z", "message": "aarch64: testsuite: disable stack protector for auto-init-7.c\n\nThe test scans for \"const_int 0\" in the RTL dump, but stack protector\ncan produce more \"const_int 0\".  To avoid a failure with\n--enable-default-ssp, disable stack protector for this.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/auto-init-7.c (dg-options): Add\n\t-fno-stack-protector.\n\n(cherry picked from commit 4c59cfc4a4da579d60bfd82404e3ff51c72aca79)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "df39444ecfb2eaca1b24a52c6fc54e7ef70d5e98", "committedDate": "2023-06-15T10:20:09Z", "message": "aarch64: testsuite: disable stack protector for pr103147-10 tests\n\nStack protector influence code generation and cause function body checks\nfail.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/pr103147-10.c (dg-options): Add\n\t-fno-stack-protector.\n\t* g++.target/aarch64/pr103147-10.C: Likewise.\n\n(cherry picked from commit 2fa31207ea602d48b8f69982e0bde1d143e54ecb)", "chatglm2-6b": "\"The paragraph is classified as \\\"new security features\\\" and \\\"new features other than security\\\".\""}}, {"node": {"oid": "9391ed101cb401e5fda6b39978bd16b263931526", "committedDate": "2023-06-15T10:19:55Z", "message": "aarch64: testsuite: disable stack protector for sve-pcs tests\n\nIf GCC is configured with --enable-default-ssp, the stack protector can\nmake many sve-pcs tests fail.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/sve/pcs/aarch64-sve-pcs.exp (sve_flags):\n\tAdd -fno-stack-protector.\n\n(cherry picked from commit edb336cc575a82cfc2a883e4c3453c36267482c1)", "chatglm2-6b": "\"The paragraph is classified as \\\"new security features\\\" and \\\"new features other than security\\\" because it mentions two new features: \\\"stack protector\\\" and \\\" disable stack protector\\\". It is not classified as \\\"CVE fixes\\\", \\\"new security features\\\", \\\"bug fixes\\\", or \\\"performance optimization\\\" because it does not mention any of these criteria.\""}}, {"node": {"oid": "5a21f78294624dd7166e1a25a57c805a759dc0d2", "committedDate": "2023-06-15T10:19:48Z", "message": "aarch64: testsuite: disable PIE for fuse_adrp_add_1.c [PR70150]\n\nIn PIE, symbol \"fixed_regs\" is addressed via GOT.  It will break the\nscan-assembler pattern and cause test failure with --enable-default-pie.\n\ngcc/testsuite/ChangeLog:\n\n\tPR testsuite/70150\n\t* gcc.target/aarch64/fuse_adrp_add_1.c (dg-options): Add\n\t-fno-pie.\n\n(cherry picked from commit 7e8a3dbbb26f66ce8ea60be48962022b5fb2ef55)", "chatglm2-6b": "\"The paragraph does not satisfy any of the criteria. It only mentions a CVE fix for a specific test case related to PIE (position independent error) and mentions a change in the gcc test suite for aarch64 architecture. It does not mention any new security features, new features other than security, bug fixes, or performance optimization.\""}}, {"node": {"oid": "b2d29f2622c215201cb415565ab4f18b738ca35c", "committedDate": "2023-06-15T10:19:36Z", "message": "aarch64: testsuite: disable PIE for tests with large code model [PR70150]\n\nThese tests set large code model with -mcmodel=large or target pragma for\nAArch64.  But if GCC is configured with --enable-default-pie, it triggers\n\"sorry: unimplemented: code model large with -fpic\".  Disable PIE to make\navoid the issue.\n\ngcc/testsuite/ChangeLog:\n\n\tPR testsuite/70150\n\t* gcc.dg/tls/pr78796.c (dg-additional-options): Add -fno-pie\n\t-no-pie for aarch64-*-*.\n\t* gcc.target/aarch64/pr63304_1.c (dg-options): Add -fno-pie.\n\t* gcc.target/aarch64/pr70120-2.c (dg-options): Add -fno-pie.\n\t* gcc.target/aarch64/pr78733.c (dg-options): Add -fno-pie.\n\t* gcc.target/aarch64/pr79041-2.c (dg-options): Add -fno-pie.\n\t* gcc.target/aarch64/pr94530.c (dg-options): Add -fno-pie.\n\t* gcc.target/aarch64/pr94577.c (dg-options): Add -fno-pie.\n\t* gcc.target/aarch64/reload-valid-spoff.c (dg-options): Add\n\t-fno-pie.\n\n(cherry picked from commit a1ccb4583dfaa267648110aa7da7275acc3000f8)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "e8ee5a0b00dc7a7c25dd3264e9007f440457a791", "committedDate": "2023-06-15T10:19:26Z", "message": "aarch64: testsuite: disable PIE for aapcs64 tests [PR70150]\n\nIf GCC is built with --enable-default-pie, a lot of aapcs64 tests fail\nbecause relocation unsupported in PIE is used.\n\ngcc/testsuite/ChangeLog:\n\n\tPR testsuite/70150\n\t* gcc.target/aarch64/aapcs64/aapcs64.exp (additional_flags):\n\tAdd -fno-pie -no-pie.\n\n(cherry picked from commit f30f04b1fbd4b4e13a7535fad8e698c7b24db9b8)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "ddec24e5abe99033c8d6bbe544b4c2b35a0232f2", "committedDate": "2023-06-15T08:23:42Z", "message": "LoongArch: Avoid non-returning indirect jumps through $ra [PR110136]\n\nMicro-architecture unconditionally treats a \"jr $ra\" as \"return from subroutine\",\nhence doing \"jr $ra\" would interfere with both subroutine return prediction and\nthe more general indirect branch prediction.\n\nTherefore, a problem like PR110136 can cause a significant increase in branch error\nprediction rate and affect performance. The same problem exists with \"indirect_jump\".\n\ngcc/ChangeLog:\n\n\tPR target/110136\n\t* config/loongarch/loongarch.md: Modify the register constraints for template\n\t\"jumptable\" and \"indirect_jump\" from \"r\" to \"e\".\n\nCo-authored-by: Andrew Pinski <apinski@marvell.com>\n\n(cherry picked from commit 5430c86e71927492399129f3df80824c6c334ddf)", "chatglm2-6b": "\"The paragraph describes a problem with non-returning indirect jumps through a specific register, \\\"jr $ra,\\\" which can cause a significant increase in branch error prediction rate and affect performance. The paragraph mentions the potential problem with \\\"indirect\\\\_jump\\\" and suggests modifying the register constraints for \\\"jumptable\\\" and \\\"indirect\\\\_jump\\\" from \\\"r\\\" to \\\"e\\\" to avoid the issue.\\n\\nCriteria:\\n\\n* \\\"CVE fixes\\\": None\\n* \\\"new security features\\\": None\\n* \\\"new features other than security\\\": None\\n* \\\"bug fixes\\\": None\\n* \\\"performance optimization\\\": None\\n* \\\"neither\\\": Neither\""}}, {"node": {"oid": "a58bda46377ba74df9ba2bf0a22111c74a1abae8", "committedDate": "2023-06-15T00:20:49Z", "message": "Daily bump.", "chatglm2-6b": "\"\\\"neither\\\"\""}}, {"node": {"oid": "ac3a1795043a30535cb5e00016abf4fe71e364af", "committedDate": "2023-06-14T00:20:50Z", "message": "Daily bump.", "chatglm2-6b": "\"I am unable to recognize the paragraph you provided. Therefore, I cannot categorize it according to the criteria you have provided.\""}}, {"node": {"oid": "0ec543abd50ce7b54de0bfcc11bcda2d690e0947", "committedDate": "2023-06-13T00:21:18Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "d5f72834a4817b180625a540b99f5c1934c2e0b8", "committedDate": "2023-06-12T09:03:14Z", "message": "middle-end/110200 - genmatch force-leaf and convert interaction\n\nThe following fixes code GENERIC generation for (convert! ...)\nwhich currently generates\n\n  if (TREE_TYPE (_o1[0]) != type)\n    _r1 = fold_build1_loc (loc, NOP_EXPR, type, _o1[0]);\n    if (EXPR_P (_r1))\n      goto next_after_fail867;\n  else\n    _r1 = _o1[0];\n\nwhere obviously braces are missing.\n\n\tPR middle-end/110200\n\t* genmatch.cc (expr::gen_transform): Put braces around\n\tthe if arm for the (convert ...) short-cut.\n\n(cherry picked from commit 820d1aec89c43dbbc70d3d0b888201878388454c)", "chatglm2-6b": "\"The paragraph does not meet the criteria for any of the given categories. It does not discuss CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. It only mentions a specific fix for the `convert!` short-cut, but it does not provide any additional context or information about the fix. Therefore, the paragraph cannot be classified into any of the given categories. The answer is \\\"neither.\\\"\""}}, {"node": {"oid": "94c8326f42707301a37070c280447e148d5322c2", "committedDate": "2023-06-12T00:20:55Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "a7739a073a8620495c87acfa37596aaea3ca5e04", "committedDate": "2023-06-11T00:20:46Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "ee92dc2dae45acc79d4dc08ea31adf894831840a", "committedDate": "2023-06-10T20:27:13Z", "message": "target/109650: Fix wrong code after cc0 -> CCmode transition.\n\nThis patch fixes a wrong-code bug in the wake of PR92729, the transition that\nturned the AVR backend from cc0 to CCmode.  In cc0, the insn that uses cc0 like\na conditional branch always follows the cc0 setter, which is no more the case\nwith CCmode where set and use of REG_CC might be in different basic blocks.\n\nThis patch removes the machine-dependent reorg pass in avr_reorg entirely.\n\nIt is replaced by a new, AVR specific mini-pass that runs prior to split2.\nCanonicalization of comparisons away from the \"difficult\" codes GT[U] and LE[U]\nis now mostly performed by implementing TARGET_CANONICALIZE_COMPARISON.\n\nMoreover:\n\n* Text peephole conditions get \"dead_or_set_regno_p (*, REG_CC)\" as needed.\n\n* RTL peephole conditions get \"peep2_regno_dead_p (*, REG_CC)\" as needed.\n\n* Conditional branches no more clobber REG_CC.\n\n* insn output for compares looks ahead to determine the branch mode in use.\n  This needs also \"dead_or_set_regno_p (*, REG_CC)\".\n\n* Add RTL peepholes for decrement-and-branch detection.\n\n* Some of the patterns like \"*cmphi.zero-extend.0\" lost their\n  combine-ational part wit PR92729.  Restore them.\n\nFinally, it fixes some of the many indentation glitches left over from PR92729.\n\ngcc/\n\tPR target/109650\n\tPR target/92729\n\tBackport from 2023-05-10 master r14-1688.\n\t* config/avr/avr-passes.def (avr_pass_ifelse): Insert new pass.\n\t* config/avr/avr.cc (avr_pass_ifelse): New RTL pass.\n\t(avr_pass_data_ifelse): New pass_data for it.\n\t(make_avr_pass_ifelse, avr_redundant_compare, avr_cbranch_cost)\n\t(avr_canonicalize_comparison, avr_out_plus_set_ZN)\n\t(avr_out_cmp_ext): New functions.\n\t(compare_condtition): Make sure REG_CC dies in the branch insn.\n\t(avr_rtx_costs_1): Add computation of cbranch costs.\n\t(avr_adjust_insn_length) [ADJUST_LEN_ADD_SET_ZN, ADJUST_LEN_CMP_ZEXT]:\n\t[ADJUST_LEN_CMP_SEXT]Handle them.\n\t(TARGET_CANONICALIZE_COMPARISON): New define.\n\t(avr_simplify_comparison_p, compare_diff_p, avr_compare_pattern)\n\t(avr_reorg_remove_redundant_compare, avr_reorg): Remove functions.\n\t(TARGET_MACHINE_DEPENDENT_REORG): Remove define.\n\t* config/avr/avr-protos.h (avr_simplify_comparison_p): Remove proto.\n\t(make_avr_pass_ifelse, avr_out_plus_set_ZN, cc_reg_rtx)\n\t(avr_out_cmp_zext): New Protos\n\t* config/avr/avr.md (branch, difficult_branch): Don't split insns.\n\t(*cbranchhi.zero-extend.0\", *cbranchhi.zero-extend.1\")\n\t(*swapped_tst<mode>, *add.for.eqne.<mode>): New insns.\n\t(*cbranch<mode>4): Rename to cbranch<mode>4_insn.\n\t(define_peephole): Add dead_or_set_regno_p(insn,REG_CC) as needed.\n\t(define_deephole2): Add peep2_regno_dead_p(*,REG_CC) as needed.\n\tAdd new RTL peepholes for decrement-and-branch and *swapped_tst<mode>.\n\tRework signtest-and-branch peepholes for *sbrx_branch<mode>.\n\t(adjust_len) [add_set_ZN, cmp_zext]: New.\n\t(QIPSI): New mode iterator.\n\t(ALLs1, ALLs2, ALLs4, ALLs234): New mode iterators.\n\t(gelt): New code iterator.\n\t(gelt_eqne): New code attribute.\n\t(rvbranch, *rvbranch, difficult_rvbranch, *difficult_rvbranch)\n\t(branch_unspec, *negated_tst<mode>, *reversed_tst<mode>)\n\t(*cmpqi_sign_extend): Remove insns.\n\t(define_c_enum \"unspec\") [UNSPEC_IDENTITY]: Remove.\n\t* config/avr/avr-dimode.md (cbranch<mode>4): Canonicalize comparisons.\n\t* config/avr/predicates.md (scratch_or_d_register_operand): New.\n\t* config/avr/constraints.md (Yxx): New constraint.\n\ngcc/testsuite/\n\tPR target/109650\n\tBackport from 2023-05-10 master r14-1688.\n\t* gcc.target/avr/torture/pr109650-1.c: New test.\n\t* gcc.target/avr/torture/pr109650-2.c: New test.", "chatglm2-6b": "\"The paragraph describes a patch fix for a bug in the wake of a software release. The fix addresses a wrong-code bug in the AVR backend transition from cc0 to CCmode. The patch removes the machine-dependent reorg pass in avr\\\\_reorg and replaces it with a new, AVR-specific mini-pass that runs prior to split2. The patch also performs text peephole conditions, RTL peephole conditions, and conditional branches. Additionally, the patch fixes some indentation glitches left over from a previous release. The paragraph can be classified into one category: \\\"bug fixes\\\".\""}}, {"node": {"oid": "2614b3f942d2a0e05cc69a3a080d0cf23e36573d", "committedDate": "2023-06-10T00:21:07Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "3b09a5453114fee10b0f0984793ce968503dbea7", "committedDate": "2023-06-09T08:47:41Z", "message": "rs6000: Remove duplicate expression [PR106907]\n\nPR106907 has few warnings spotted from cppcheck. In that addressing duplicate\nexpression issue here. Here the same expression is used twice in logical\nAND(&&) operation which result in same result so removing that.\n\n2023-06-06  Jeevitha Palanisamy  <jeevitha@linux.ibm.com>\n\ngcc/\n\tPR target/106907\n\t* config/rs6000/rs6000.cc (vec_const_128bit_to_bytes): Remove\n\tduplicate expression.\n\n(cherry picked from commit c4deccd44655c5d748dfed200a37f2b678c32fe8)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "8d64b55db0bec62873503739fabc2a4d3219ad58", "committedDate": "2023-06-09T08:19:25Z", "message": "Darwin, PPC: Fix struct layout with pragma pack [PR110044].\n\nThis bug was essentially that darwin_rs6000_special_round_type_align()\nwas ignoring externally-imposed capping of field alignment.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\n\tPR target/110044\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.cc (darwin_rs6000_special_round_type_align):\n\tMake sure that we do not have a cap on field alignment before altering\n\tthe struct layout based on the type alignment of the first entry.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/darwin-abi-13-0.c: New test.\n\t* gcc.target/powerpc/darwin-abi-13-1.c: New test.\n\t* gcc.target/powerpc/darwin-abi-13-2.c: New test.\n\t* gcc.target/powerpc/darwin-structs-0.h: New test.\n\n(cherry picked from commit 84d080a29a780973bef47171ba708ae2f7b4ee47)", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "bc4adb88611cb17280ab15ac4e13ab1d05b11825", "committedDate": "2023-06-09T07:58:07Z", "message": "fortran: Fix ICE on pr96024.f90 on big-endian hosts [PR96024]\n\nThe pr96024.f90 testcase ICEs on big-endian hosts.  The problem is\nthat length->val.integer is accessed after checking\nlength->expr_type == EXPR_CONSTANT, but it is a CHARACTER constant\nwhich uses length->val.character union member instead and on big-endian\nwe end up reading constant 0x100000000 rather than some small number\non little-endian and if target doesn't have enough memory for 4 times\nthat (i.e. 16GB allocation), it ICEs.\n\n2023-06-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR fortran/96024\n\t* primary.cc (gfc_convert_to_structure_constructor): Only do\n\tconstant string ctor length verification and truncation/padding\n\tif constant length has INTEGER type.\n\n(cherry picked from commit 4cf6e322adc19f927859e0a5edfa93cec4b8c844)", "chatglm2-6b": "\"Based on the criteria provided, the paragraph cannot be classified into any category. It does not mention any CVE fixes, new security features, new features other than security, bug fixes, or performance optimization.\""}}, {"node": {"oid": "887f903ab05ddcac498247384734efbc6cf45147", "committedDate": "2023-06-09T01:46:42Z", "message": "Explicitly view_convert_expr mask to signed type when folding pblendvb builtins.\n\nSince mask < 0 will be always false for vector char when\n-funsigned-char, but vpblendvb needs to check the most significant\nbit. The patch explicitly VCE to vector signed char.\n\ngcc/ChangeLog:\n\n\tPR target/110108\n\t* config/i386/i386.cc (ix86_gimple_fold_builtin): Explicitly\n\tview_convert_expr mask to signed type when folding pblendvb\n\tbuiltins.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr110108-2.c: New test.", "chatglm2-6b": "\"The paragraph does not mention any new security features, new features other than security, bug fixes, or performance optimization. It only mentions a bug fix and a patch explicitly VCE to vector signed char. Therefore, the paragraph can be classified as \\\"neither\\\".\""}}, {"node": {"oid": "7a6e2986aa6f2e30ccae2b826982026232a33fa2", "committedDate": "2023-06-09T00:20:37Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "43619dc6e120a80305d4a52d7f9b8833c110a7db", "committedDate": "2023-06-08T17:31:01Z", "message": "arm: Fix ICE due to infinite splitting [PR109800]\n\nIn r11-966-g9a182ef9ee011935d827ab5c6c9a7cd8e22257d8 we introduce a\nsimplification to emit_move_insn that attempts to simplify moves of the form:\n\n(set (subreg:M1 (reg:M2 ...)) (constant C))\n\nwhere M1 and M2 are of equal mode size. That is problematic for the splitter\nvfp.md:no_literal_pool_df_immediate in the arm backend, which tries to pun an\nlvalue DFmode pseudo into DImode and assign a constant to it with\nemit_move_insn, as the new transformation simply undoes this, and we end up\nsplitting indefinitely.\n\nThis patch changes things around in the arm backend so that we use a\nDImode temporary (instead of DFmode) and first load the DImode constant\ninto the pseudo, and then pun the pseudo into DFmode as an rvalue in a\nreg -> reg move. I believe this should be semantically equivalent but\navoids the pathalogical behaviour seen in the PR.\n\ngcc/ChangeLog:\n\n\tPR target/109800\n\t* config/arm/arm.md (movdf): Generate temporary pseudo in DImode\n\tinstead of DFmode.\n\t* config/arm/vfp.md (no_literal_pool_df_immediate): Rather than punning an\n\tlvalue DFmode pseudo into DImode, use a DImode pseudo and pun it into\n\tDFmode as an rvalue.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/109800\n\t* gcc.target/arm/pure-code/pr109800.c: New test.\n\n(cherry picked from commit f5298d9969b4fa34ff3aecd54b9630e22b2984a5)", "chatglm2-6b": "\"Based on the criteria provided, the paragraph does not satisfy any of the categories. Therefore, the answer is \\\"neither.\\\"\""}}, {"node": {"oid": "a620451032abb28343c31438a4e779ea5d2e1bbf", "committedDate": "2023-06-08T08:54:14Z", "message": "arm: PR target/109939 Correct signedness of return type of __ssat intrinsics\n\nAs the PR says we shouldn't be using qualifier_unsigned for the return type of the __ssat intrinsics.\nUNSIGNED_SAT_BINOP_UNSIGNED_IMM_QUALIFIERS already exists for that.\nThis was just a thinko.\nThis patch fixes this and the warning with -Wconversion goes away.\n\nBootstrapped and tested on arm-none-linux-gnueabihf.\n\ngcc/ChangeLog:\n\n\tPR target/109939\n\t* config/arm/arm-builtins.cc (SAT_BINOP_UNSIGNED_IMM_QUALIFIERS): Use\n\tqualifier_none for the return operand.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/109939\n\t* gcc.target/arm/pr109939.c: New test.\n\n(cherry picked from commit 95542a6ec4b350c653b793b7c36a8210b0e9a89d)", "chatglm2-6b": "\"The paragraph is classified as \\\"new security features\\\" and \\\"new features other than security\\\".\""}}, {"node": {"oid": "7e464d07d6acb1a209e28f88a686593fce19c658", "committedDate": "2023-06-08T00:20:56Z", "message": "Daily bump.", "chatglm2-6b": "\"I cannot recognize the paragraph as it is not provided. Please provide the paragraph so that I can analyze it and categorize it according to the criteria you have specified.\""}}, {"node": {"oid": "104da95833b28b9d2af786b8ee194c83be6e8da4", "committedDate": "2023-06-07T00:21:41Z", "message": "Daily bump.", "chatglm2-6b": "\"I am unable to recognize the paragraph as it is only \\\"Daily bump.\\\" and does not contain any information that could be categorized into the criteria you provided. \\\"Daily bump.\\\" is not a criteria that I am familiar with and therefore I am unable to provide a classification.\""}}, {"node": {"oid": "6a204757ffc734de7e7794e337cd6d387cf18a48", "committedDate": "2023-06-06T13:25:59Z", "message": "d: Merge upstream dmd 316b89f1e3, phobos 8e8aaae50.\n\nUpdates D language version to v2.100.2.\n\nPhobos changes:\n\n    - Fix instantiating std.container.array.Array!T where T is a\n      shared class.\n    - Fix calling toString on a const std.typecons.Nullable type.\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 316b89f1e3.\n\t* dmd/VERSION: Bump version to v2.100.2.\n\nlibphobos/ChangeLog:\n\n\t* src/MERGE: Merge upstream phobos 8e8aaae50.", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "eb89c6ec171fcc388398395419ea8ee89ef8c76a", "committedDate": "2023-06-06T00:21:30Z", "message": "Daily bump.", "chatglm2-6b": "\"\\\"neither\\\"\""}}, {"node": {"oid": "256cb821273d328e98d87aae2a061e0e889ec408", "committedDate": "2023-06-05T00:20:32Z", "message": "Daily bump.", "chatglm2-6b": "\"I am unable to recognize the paragraph as it is not provided. Please provide the paragraph so that I can analyze it and categorize it according to the criteria you have specified.\""}}, {"node": {"oid": "59a264d5d8bb3fb73557aafc21319fd4fa6b1ab4", "committedDate": "2023-06-04T18:12:57Z", "message": "Fortran: fix diagnostics for SELECT RANK [PR100607]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/100607\n\t* resolve.cc (resolve_select_rank): Remove duplicate error.\n\t(resolve_fl_var_and_proc): Prevent NULL pointer dereference and\n\tsuppress error message for temporary.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/100607\n\t* gfortran.dg/select_rank_6.f90: New test.\n\n(cherry picked from commit fae09dfc0e6bf4cfe35d817558827aea78c6426f)", "chatglm2-6b": "\"The paragraph does not provide information that can be classified into the criteria you specified. It is a simple description of a fix in the Fortran programming language for a bug in the SELECT RANK function.\""}}, {"node": {"oid": "e9fda0f289dd654b3ef3b91584b1377a9a0f0c6e", "committedDate": "2023-06-04T00:20:12Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "a55d4a7474cd1ce3547857a1342f3897d1da15e5", "committedDate": "2023-06-03T00:20:46Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "6f8e64989c2418bb8a4050fc1f50039a7b9a0225", "committedDate": "2023-06-02T10:56:09Z", "message": "target/110088: Improve operation of l-reg with const after move from d-reg.\n\nAfter reload, there may be sequences like\n   lreg = dreg\n   lreg = lreg <op> const\nwith an LD_REGS dreg, non-LD_REGS lreg, and <op> in PLUS, IOR, AND.\nIf dreg dies after the first insn, it is possible to use\n   dreg = dreg <op> const\n   lreg = dreg\ninstead which is more efficient.\n\ngcc/\n\tPR target/110088\n\t* config/avr/avr.md: Add an RTL peephole to optimize operations on\n\tnon-LD_REGS after a move from LD_REGS.\n\t(piaop): New code iterator.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "148e717a0cda31cdea59c2f8b61c16c8249b31a6", "committedDate": "2023-06-02T00:21:19Z", "message": "Daily bump.", "chatglm2-6b": "\"I cannot recognize the paragraph as it is not provided. Please provide the paragraph so that I can analyze it and categorize it according to the criteria you have specified.\""}}, {"node": {"oid": "4466c5ba6e2f1759a2ce461f15fc4e018872a22e", "committedDate": "2023-06-01T12:00:28Z", "message": "doc: Fix description of x86 -m32 option [PR109954]\n\nThis option does not imply -march=i386 so it's incorrect to say it\ngenerates code that will run on \"any i386 system\".\n\ngcc/ChangeLog:\n\n\tPR target/109954\n\t* doc/invoke.texi (x86 Options): Fix description of -m32 option.\n\n(cherry picked from commit eeb92704967875411416b0b9508aa6f49e8192fd)", "chatglm2-6b": "\"neither\""}}, {"node": {"oid": "bc92a44b59e2531285ae89ae518919e067d07a14", "committedDate": "2023-06-01T00:20:39Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "6bd66f01b2b629d2af66c3ce3c372f05ba59d11b", "committedDate": "2023-05-31T00:20:34Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "9d43cd02c6e53155916ac0e2f8bdc48b6703771c", "committedDate": "2023-05-30T21:59:25Z", "message": "[libstdc++] [testsuite] xfail double-prec from_chars for x86_64 ldbl\n\nWhen long double is wider than double, but from_chars is implemented\nin terms of double, tests that involve the full precision of long\ndouble are expected to fail.  Mark them as such on x86_64-*-vxworks*.\n\nfor  libstdc++-v3/ChangeLog\n\n\t* testsuite/20_util/from_chars/4.cc: Skip long double test06\n\ton x86_64-vxworks.\n\t* testsuite/20_util/to_chars/long_double.cc: Xfail run on\n\tx86_64-vxworks.\n\n(cherry picked from commit 282e4e745981c5c6e3edaae315e1f499a45402df)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "b99118d46f4c35c355f99983809cfccc8cd67d7f", "committedDate": "2023-05-30T21:59:24Z", "message": "[libstdc++] [testsuite] xfail to_chars/long_double on x86-vxworks\n\nJust as on aarch64, x86's wider long double experiences loss of\nprecision with from_chars implemented in terms of double.  Expect the\nexecution fail.\n\n\nfor  libstdc++-v3/ChangeLog\n\n\t* testsuite/20_util/to_chars/long_double.cc: Expect execution\n\tfail on x86-vxworks.\n\n(cherry picked from commit 7daa166fe89fca4ff1baa063c00a5a690f7e462f)", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "987b24420bc8ce95830992d36a1304e585be79b3", "committedDate": "2023-05-30T21:59:24Z", "message": "[libstdc++] [testsuite] xfail double-prec from_chars for ldbl\n\nWhen long double is wider than double, but from_chars is implemented\nin terms of double, tests that involve the full precision of long\ndouble are expected to fail.  Mark them as such on aarch64-*-vxworks.\n\n\nfor  libstdc++-v3/ChangeLog\n\n\t* testsuite/20_util/from_chars/4.cc: Skip long double test06\n\ton aarch64-vxworks.\n\t* testsuite/20_util/to_chars/long_double.cc: Xfail run on\n\taarch64-vxworks.\n\n(cherry picked from commit e383fc69d2a3eab37319ea41543ee09c8cdd6e57)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "467887d5750d03d438ab704437b2c5e5da78497e", "committedDate": "2023-05-30T20:04:42Z", "message": "libstdc++: Correct NTTP and simd_mask ctor call\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/109822\n\t* include/experimental/bits/simd.h (to_native): Use int NTTP\n\tas specified in PTS2.\n\t(to_compatible): Likewise. Add missing tag to call mask\n\tgenerator ctor.\n\t* testsuite/experimental/simd/pr109822_cast_functions.cc: New\n\ttest.\n\n(cherry picked from commit 668d43502f465d48adbc1fe2956b979f36657e5f)", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "64295a0340faf2c3a711b983ea8f65163ab18a9e", "committedDate": "2023-05-30T20:04:42Z", "message": "libstdc++: Simplify calculation of expected value in simd test\n\nThis avoids a failure on PR109964.\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/experimental/simd/tests/integer_operators.cc:\n\tCompute expected value differently to avoid getting turned into\n\ta vector shift.\n\n(cherry picked from commit 3e2689e568425f14d6728504ad6f5d32b90320ad)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "c6ce93538145372d2d6077e3991a3053c1262e14", "committedDate": "2023-05-30T20:04:42Z", "message": "libstdc++: Fix test assumptions on long and long double\n\nExpect that long might not fit into the long double mantissa bits.\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/experimental/simd/tests/operator_cvt.cc: Make long\n\tdouble <-> (u)long conversion tests conditional on sizeof(long\n\tdouble) and sizeof(long).\n\n(cherry picked from commit 291549d43e823f163fa9961e42a751b5ce0d57fb)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "7c184ac708535c808df04a8ec074c934c971f9c4", "committedDate": "2023-05-30T20:04:42Z", "message": "libstdc++: Resolve -Wsign-compare issue\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd_ppc.h (_S_bit_shift_left):\n\tNegative __y is UB, so prefer signed compare.\n\n(cherry picked from commit 1a1abec1d618cde709c585fcce89330bb33b07ac)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "6ae07a5cd9b43a4d1cb0bbde938fbd0a53f7ae3c", "committedDate": "2023-05-30T15:51:21Z", "message": "testsuite: make mve_intrinsic_type_overloads-int.c libc-agnostic\n\nGlibc defines int32_t as 'int' while newlib defines it as 'long int'.\n\nAlthough these correspond to the same size, g++ complains when using the\n'wrong' version:\n  invalid conversion from 'long int*' to 'int32_t*' {aka 'int*'} [-fpermissive]\nor\n  invalid conversion from 'int*' to 'int32_t*' {aka 'long int*'} [-fpermissive]\n\nwhen calling vst1q(int32*, int32x4_t) with a first parameter of type\n'long int *' (resp. 'int *')\n\nTo make this test pass with any type of toolchain, this patch defines\n'word_type' according to which libc is in use.\n\n2023-05-23  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/testsuite/\n\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-int.c:\n\tSupport both definitions of int32_t.\n\n(cherry picked from commit d12d2aa4fccc76a9a08c8120c5e37d9cab8683e8)", "chatglm2-6b": "\"The paragraph is not classified into any category. It only provides information about the different definitions of the integer type in the Glibc and newlib libraries and how g++ complains when using the wrong version.\""}}, {"node": {"oid": "2910660f00c74d12d17e3114870e287804a3332c", "committedDate": "2023-05-30T11:22:18Z", "message": "riscv: update riscv_asan_shadow_offset\n\ngcc/\n\tPR target/110036\n\t* config/riscv/riscv.cc (riscv_asan_shadow_offset): Update to\n\tmatch libsanitizer.", "chatglm2-6b": "\"The paragraph is classified as \\\"new security features\\\" and \\\"new features other than security\\\" because it mentions two new features: \\\"riscv\\\\_asan\\\\_shadow\\\\_offset\\\" and \\\"update riscv\\\\_asan\\\\_shadow\\\\_offset\\\\n\\\\ngcc/\\\". It does not mention any bug fixes or performance optimizations.\""}}, {"node": {"oid": "7b75c5fd57cccdc3d509317a8a10acaf98f77311", "committedDate": "2023-05-30T00:20:05Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "5fefed9dbbf5a0258a372c000e0fc331b9e75252", "committedDate": "2023-05-29T11:18:01Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "b189fdbd54e564afcf56020ee3677e4150ea0597", "committedDate": "2023-05-28T00:19:29Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "10ebb8b9db2ec7ad53e4fc1f2900d9a8c8ddeaea", "committedDate": "2023-05-27T00:19:37Z", "message": "Daily bump.", "chatglm2-6b": "\"I cannot recognize the paragraph as it is not provided. Please provide the paragraph so that I can analyze it and categorize it according to the criteria you have specified.\""}}, {"node": {"oid": "16dc59588804e099b2bd59452232f78a10fe965a", "committedDate": "2023-05-26T00:20:14Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "0537c71aa7ef88c4ffe754cf7af81e346273b079", "committedDate": "2023-05-25T17:42:06Z", "message": "target/104327: Allow more inlining between different optimization levels.\n\navr-common.cc introduces the following options that are set depending\non optimization level: -mgas-isr-prologues, -mmain-is-OS-task and\n-fsplit-wide-types-early.  The inliner thinks that different options\ndisallow cross-optimization inlining, so provide can_inline_p.\n\ngcc/\n\tPR target/104327\n\t* config/avr/avr.cc (avr_can_inline_p): New static function.\n\t(TARGET_CAN_INLINE_P): Define to that function.", "chatglm2-6b": "\"The paragraph does not meet the criteria for any of the given categories. It only introduces a new optimization option for AVR and does not provide any information about security features or bug fixes.\""}}, {"node": {"oid": "4d39f68b891ed2ac7aca5ef24119f50976b84c22", "committedDate": "2023-05-25T17:28:56Z", "message": "target/82931: Make a pattern more generic to match more bit-transfers.\n\nThere is already a pattern in avr.md that matches single-bit transfers\nfrom one register to another one, but it only handled bit 0 of 8-bit\nregisters.  This change makes that pattern more generic so it matches\nmore of similar single-bit transfers.\n\ngcc/\n\tPR target/82931\n\t* config/avr/avr.md (*movbitqi.0): Rename to *movbit<mode>.0-6.\n\tHandle any bit position and use mode QISI.\n\t* config/avr/avr.cc (avr_rtx_costs_1) [IOR]: Return a cost\n\tof 2 insns for bit-transfer of respective style.\n\ngcc/testsuite/\n\tPR target/82931\n\t* gcc.target/avr/pr82931.c: New test.", "chatglm2-6b": "\"The paragraph does not satisfy any of the criteria. It does not mention any CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. It only mentions a change in the avr.md pattern to make it more generic in matching single-bit transfers.\""}}, {"node": {"oid": "002a4f04b3c9479380b07e93a2072b99778f06d4", "committedDate": "2023-05-25T00:20:23Z", "message": "Daily bump.", "chatglm2-6b": "\"\\\"neither\\\"\""}}, {"node": {"oid": "ff7360dafe209b960535eaaa3efcfbaaa44daff9", "committedDate": "2023-05-24T19:40:28Z", "message": "libstdc++: Fix type of first argument to vec_cntm call\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/109949\n\t* include/experimental/bits/simd.h (__intrinsic_type): If\n\t__ALTIVEC__ is defined, map gnu::vector_size types to their\n\tcorresponding __vector T types without losing unsignedness of\n\tinteger types. Also prefer long long over long.\n\t* include/experimental/bits/simd_ppc.h (_S_popcount): Cast mask\n\tobject to the expected unsigned vector type.\n\n(cherry picked from commit efd2b55d8562c6e80cb7ee8b9b1f9418f0c00cd9)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "2b502c3119c91fe3ba2313f0842a3bedd395bc91", "committedDate": "2023-05-24T19:40:28Z", "message": "libstdc++: Fix SFINAE for __is_intrinsic_type on ARM\n\nOn ARM NEON doesn't support double, so __is_intrinsic_type_v<double,\nwhatever> should say false (instead of being ill-formed).\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/109261\n\t* include/experimental/bits/simd.h (__intrinsic_type):\n\tSpecialize __intrinsic_type<double, 8> and\n\t__intrinsic_type<double, 16> in any case, but provide the member\n\ttype only with __aarch64__.\n\n(cherry picked from commit aa8b363171a95b8f867a74f29c75f9577e9087e1)", "chatglm2-6b": "\"The paragraph is classified into one category: \\\"new security features\\\".\""}}, {"node": {"oid": "8be71168f7bbafa04f592a7524432351ffea71ba", "committedDate": "2023-05-24T19:40:27Z", "message": "libstdc++: Add missing constexpr to simd_neon\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/109261\n\t* include/experimental/bits/simd_neon.h (_S_reduce): Add\n\tconstexpr and make NEON implementation conditional on\n\tnot __builtin_is_constant_evaluated.\n\n(cherry picked from commit b0a483b0a011f9cbc8b25053eae809c77dae2a12)", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "387618b72e1c26962d4454bbdad0a536dcfe0391", "committedDate": "2023-05-24T00:21:23Z", "message": "Daily bump.", "chatglm2-6b": "\"\\\"neither\\\"\""}}, {"node": {"oid": "2fb4dfb35a5eefca4df7814511aa7ba6840cc2a7", "committedDate": "2023-05-23T17:18:05Z", "message": "Improve cost computation for single-bit bit insertions.\n\nSome miscomputation of rtx_costs lead to sub-optimal code for\nsingle-bit bit insertions.  This patch implements TARGET_INSN_COST,\nwhich has a chance to see the whole insn during insn combination;\nin particular the SET_DEST of (set (zero_extract (...) ...)).\n\ngcc/\n\t* config/avr/avr.cc (avr_insn_cost): New static function.\n\t(TARGET_INSN_COST): Define to that function.", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "3acbaf1b25321508d780a8220b772fc9cd871b13", "committedDate": "2023-05-23T08:20:18Z", "message": "libstdc++: Add missing constexpr to simd\n\nThe constexpr API is only available with -std=gnu++XX (and proposed for\nC++26). The proposal is to have the complete simd API usable in constant\nexpressions.\n\nThis patch resolves several issues with using simd in constant\nexpressions.\n\nIssues why constant_evaluated branches are necessary:\n* subscripting vector builtins is not allowed in constant expressions\n* if the implementation needs/uses memcpy\n* if the implementation would otherwise call SIMD intrinsics/builtins\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/109261\n\t* include/experimental/bits/simd.h (_SimdWrapper::_M_set):\n\tAvoid vector builtin subscripting in constant expressions.\n\t(resizing_simd_cast): Avoid memcpy if constant_evaluated.\n\t(const_where_expression, where_expression, where)\n\t(__extract_part, simd_mask, _SimdIntOperators, simd): Add either\n\t_GLIBCXX_SIMD_CONSTEXPR (on public APIs), or constexpr (on\n\tinternal APIs).\n\t* include/experimental/bits/simd_builtin.h (__vector_permute)\n\t(__vector_shuffle, __extract_part, _GnuTraits::_SimdCastType1)\n\t(_GnuTraits::_SimdCastType2, _SimdImplBuiltin)\n\t(_MaskImplBuiltin::_S_store): Add constexpr.\n\t(_CommonImplBuiltin::_S_store_bool_array)\n\t(_SimdImplBuiltin::_S_load, _SimdImplBuiltin::_S_store)\n\t(_SimdImplBuiltin::_S_reduce, _MaskImplBuiltin::_S_load): Add\n\tconstant_evaluated case.\n\t* include/experimental/bits/simd_fixed_size.h\n\t(_S_masked_load): Reword comment.\n\t(__tuple_element_meta, __make_meta, _SimdTuple::_M_apply_r)\n\t(_SimdTuple::_M_subscript_read, _SimdTuple::_M_subscript_write)\n\t(__make_simd_tuple, __optimize_simd_tuple, __extract_part)\n\t(__autocvt_to_simd, _Fixed::__traits::_SimdBase)\n\t(_Fixed::__traits::_SimdCastType, _SimdImplFixedSize): Add\n\tconstexpr.\n\t(_SimdTuple::operator[], _M_set): Add constexpr and add\n\tconstant_evaluated case.\n\t(_MaskImplFixedSize::_S_load): Add constant_evaluated case.\n\t* include/experimental/bits/simd_scalar.h: Add constexpr.\n\n\t* include/experimental/bits/simd_x86.h (_CommonImplX86): Add\n\tconstexpr and add constant_evaluated case.\n\t(_SimdImplX86::_S_equal_to, _S_not_equal_to, _S_less)\n\t(_S_less_equal): Value-initialize to satisfy constexpr\n\tevaluation.\n\t(_MaskImplX86::_S_load): Add constant_evaluated case.\n\t(_MaskImplX86::_S_store): Add constexpr and constant_evaluated\n\tcase. Value-initialize local variables.\n\t(_MaskImplX86::_S_logical_and, _S_logical_or, _S_bit_not)\n\t(_S_bit_and, _S_bit_or, _S_bit_xor): Add constant_evaluated\n\tcase.\n\t* testsuite/experimental/simd/pr109261_constexpr_simd.cc: New\n\ttest.\n\n(cherry picked from commit da579188807ede4ee9466d0b5bf51559c96a0b51)", "chatglm2-6b": "\"The paragraph is classified as \\\"neither\\\". It does not contain any of the given categories.\""}}, {"node": {"oid": "8d23bf575e12c0e7dd57fe409916402d354416e9", "committedDate": "2023-05-23T08:20:11Z", "message": "libstdc++: Resolve -Wunused-variable warnings in stdx::simd and tests\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd_builtin.h (_S_fpclassify): Move\n\t__infn into #ifdef'ed block.\n\t* testsuite/experimental/simd/tests/fpclassify.cc: Declare\n\tconstants only when used.\n\t* testsuite/experimental/simd/tests/frexp.cc: Likewise.\n\t* testsuite/experimental/simd/tests/logarithm.cc: Likewise.\n\t* testsuite/experimental/simd/tests/trunc_ceil_floor.cc:\n\tLikewise.\n\t* testsuite/experimental/simd/tests/ldexp_scalbn_scalbln_modf.cc:\n\tMove totest and expect1 into #ifdef'ed block.\n\n(cherry picked from commit a7129e82bed1bd4f513fc3c3f401721e2c96a865)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "36a02f8ce382c0ed40f22180da2d0c039324cc9f", "committedDate": "2023-05-23T08:20:03Z", "message": "libstdc++: Add missing trait is_simd_flag_type\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd.h (is_simd_flag_type): New.\n\t(_IsSimdFlagType): New.\n\t(copy_from, copy_to, load ctors): Constrain _Flags using\n\t_IsSimdFlagType.\n\n(cherry picked from commit 97383b4116ea63486eb5bfb0a7140871bed75fb4)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "336c91bf7f611d04b5fbcb5f6fa39bfa258a16e2", "committedDate": "2023-05-23T08:19:47Z", "message": "libstdc++: Fix operator% implementation for Clang\n\nThis resolves a regression of my previous fix where Clang would ICE on\n_S_divides.\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd_x86.h (_SimdImplX86): Use\n\t_Base::_S_divides if the optimized _S_divides function is hidden\n\tvia the preprocessor.\n\n(cherry picked from commit 1a62008123694b2ac07f28e25fc6e5ff371925f5)", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "425637cb8f2ddc3f53a9b531899f265c0650e7ed", "committedDate": "2023-05-23T08:13:25Z", "message": "libstdc++: Fix simd compilation with Clang\n\nClang fails to compile some constant expressions involving simd.\nTherefore, just disable this non-conforming extension for clang.\n\nFix AVX512 blend implementation for Clang. It was converting the bitmask\nto bool before, which is obviously wrong. Instead use a Clang builtin to\nconvert the bitmask to vector-mask before using a vector blend ?:. A\nsimilar change is required for the masked unary implementation, because\nthe GCC builtins do not exist on Clang.\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd_detail.h: Don't declare the\n\tsimd API as constexpr with Clang.\n\t* include/experimental/bits/simd_x86.h (__movm): New.\n\t(_S_blend_avx512): Resolve FIXME. Implement blend using __movm\n\tand ?:.\n\t(_SimdImplX86::_S_masked_unary): Clang does not implement the\n\tsame builtins. Implement the function using __movm, ?:, and -\n\toperators on vector_size types instead.\n\n(cherry picked from commit 8ff3ca2d94721fab78f167d435d4ea4fa4fdca6a)", "chatglm2-6b": "\"Based on the criteria provided, the paragraph can be classified into the following categories:\\n\\n* \\\"New security features\\\": The paragraph mentions the need to disable a non-conforming extension for Clang and the implementation of a similar change for the masked unary function. This suggests the addition of new security features to the library.\\n* \\\"New features other than security\\\": The paragraph discusses the fix for AVX512 blend implementation for Clang, which was incorrectly converting the bitmask to a boolean value. The paragraph also mentions the implementation of a similar function using __movm, which is not a part of the original library.\\n* \\\"Bug fixes\\\": The paragraph mentions the resolution of a FIXME issue and the implementation of a function using __movm, which is a bug fix.\\n* \\\"Performance optimization\\\": The paragraph does not mention any performance optimization techniques.\\n\\nTherefore, the paragraph can be classified into the categories \\\"New security features\\\", \\\"New features other than security\\\", \\\"Bug fixes\\\", and \\\"Performance optimization\\\".\""}}, {"node": {"oid": "26740dbf577eb8c81296dc61d5b9d9b241046fc7", "committedDate": "2023-05-23T08:13:07Z", "message": "libstdc++: Fix formatting\n\nWhitespace changes only.\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd.h: Line breaks and indenting\n\tfixed to follow the libstdc++ standard.\n\t* include/experimental/bits/simd_builtin.h: Likewise.\n\t* include/experimental/bits/simd_fixed_size.h: Likewise.\n\t* include/experimental/bits/simd_neon.h: Likewise.\n\t* include/experimental/bits/simd_ppc.h: Likewise.\n\t* include/experimental/bits/simd_scalar.h: Likewise.\n\t* include/experimental/bits/simd_x86.h: Likewise.\n\n(cherry picked from commit b31186e589caee43ac5720a538d9a41ebf514e81)", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "c989c9196f6900c2ab6f0665751ca0320d2f3cdc", "committedDate": "2023-05-23T08:12:51Z", "message": "libstdc++: Always-inline most of non-cmath fixed_size implementation\n\nFor simd, the inlining behavior should be similar to builtin types. (No\noperator on buitin types is ever translated into a function call.)\nTherefore, always_inline is the right choice (i.e. inline on -O0 as\nwell).\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/108030\n\t* include/experimental/bits/simd_fixed_size.h\n\t(_SimdImplFixedSize::_S_broadcast): Replace inline with\n\t_GLIBCXX_SIMD_INTRINSIC.\n\t(_SimdImplFixedSize::_S_generate): Likewise.\n\t(_SimdImplFixedSize::_S_load): Likewise.\n\t(_SimdImplFixedSize::_S_masked_load): Likewise.\n\t(_SimdImplFixedSize::_S_store): Likewise.\n\t(_SimdImplFixedSize::_S_masked_store): Likewise.\n\t(_SimdImplFixedSize::_S_min): Likewise.\n\t(_SimdImplFixedSize::_S_max): Likewise.\n\t(_SimdImplFixedSize::_S_complement): Likewise.\n\t(_SimdImplFixedSize::_S_unary_minus): Likewise.\n\t(_SimdImplFixedSize::_S_plus): Likewise.\n\t(_SimdImplFixedSize::_S_minus): Likewise.\n\t(_SimdImplFixedSize::_S_multiplies): Likewise.\n\t(_SimdImplFixedSize::_S_divides): Likewise.\n\t(_SimdImplFixedSize::_S_modulus): Likewise.\n\t(_SimdImplFixedSize::_S_bit_and): Likewise.\n\t(_SimdImplFixedSize::_S_bit_or): Likewise.\n\t(_SimdImplFixedSize::_S_bit_xor): Likewise.\n\t(_SimdImplFixedSize::_S_bit_shift_left): Likewise.\n\t(_SimdImplFixedSize::_S_bit_shift_right): Likewise.\n\t(_SimdImplFixedSize::_S_remquo): Add inline keyword (to be\n\texplicit about not always-inline, yet).\n\t(_SimdImplFixedSize::_S_isinf): Likewise.\n\t(_SimdImplFixedSize::_S_isfinite): Likewise.\n\t(_SimdImplFixedSize::_S_isnan): Likewise.\n\t(_SimdImplFixedSize::_S_isnormal): Likewise.\n\t(_SimdImplFixedSize::_S_signbit): Likewise.\n\n(cherry picked from commit e37b04328ae68f91efe1fb2c5de9122be34bc74a)", "chatglm2-6b": "\"Based on the criteria provided, the paragraph can be classified into the category of \\\"new features other than security\\\".\""}}, {"node": {"oid": "4452077962d0c327dcb08670ab73f7197be53e91", "committedDate": "2023-05-23T08:12:23Z", "message": "libstdc++: More efficient masked inc-/decrement implementation\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/108856\n\t* include/experimental/bits/simd_builtin.h\n\t(_SimdImplBuiltin::_S_masked_unary): More efficient\n\timplementation of masked inc-/decrement for integers and floats\n\twithout AVX2.\n\t* include/experimental/bits/simd_x86.h\n\t(_SimdImplX86::_S_masked_unary): New. Use AVX512 masked subtract\n\tbuiltins for masked inc-/decrement.\n\n(cherry picked from commit 6ce55180d494b616e2e3e68ffedfe9007e42ca06)", "chatglm2-6b": "\"The paragraph is classified into one category: \\\"new security features\\\".\""}}, {"node": {"oid": "88cfa0807472946db6af345f2b7ac7e1626697e3", "committedDate": "2023-05-23T08:12:11Z", "message": "libstdc++: Test that integral simd reductions are precise\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/experimental/simd/tests/reductions.cc: Introduce\n\tmax_distance as the type-dependent max error.\n\n(cherry picked from commit 8fda668e0919af9ceda9435f02a1708b375b2913)", "chatglm2-6b": "\"The paragraph is not classified into any category. It only contains a brief description of a security feature in the form of \\\"intrinsic simd reductions are precise\\\".\""}}, {"node": {"oid": "41f75cfea48d97ea5cadd220d932163a1e17cf9a", "committedDate": "2023-05-23T08:11:58Z", "message": "libstdc++: Fix simd build failure on clang\n\nClang does not support __attribute__ on lambdas. Therefore, only set\n_GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA if __clang__ is not defined.\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/108030\n\t* include/experimental/bits/simd_detail.h\n\t(_GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA): Define as empty for\n\t__clang__.\n\n(cherry picked from commit 92c47b15d5af3e7f93d11ad69a45b6d1cb8661c5)", "chatglm2-6b": "\"The paragraph is not classified into any category. It only contains a single line that mentions a bug fix and a security feature, but does not provide any information about new features, performance optimization, or CVE fixes.\""}}, {"node": {"oid": "d3217028725f06f4eb67a4c80b12e1a3219d3502", "committedDate": "2023-05-23T08:11:39Z", "message": "libstdc++: Annotate most lambdas with always_inline\n\nAll of the annotated lambdas are simply a necessary means for\nimplementing these functions and should never result in an actual\nfunction call. Many of these lambdas would go away if C++ had better\nlanguage support for packs.\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/108030\n\t* include/experimental/bits/simd_detail.h: Define\n\t_GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA.\n\t* include/experimental/bits/simd.h: Annotate lambdas with\n\t_GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA.\n\t* include/experimental/bits/simd_builtin.h: Ditto.\n\t* include/experimental/bits/simd_converter.h: Ditto.\n\t* include/experimental/bits/simd_fixed_size.h: Ditto.\n\t* include/experimental/bits/simd_math.h: Ditto.\n\t* include/experimental/bits/simd_neon.h: Ditto.\n\t* include/experimental/bits/simd_x86.h: Ditto.\n\n(cherry picked from commit 53b55701aed6896f456cdec7997ac6bbef1d6074)", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "a460f10796ed21900c9f85e702de6bde5134f3c7", "committedDate": "2023-05-23T00:19:56Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "3bb91d31a272d7fd9f02301df101e3041d5aeb5d", "committedDate": "2023-05-22T15:13:09Z", "message": "Do not generate vmaddfp and vnmsubfp\n\nThis is version 3 of the patch.  This is essentially version 1 with the removal\nof changes to altivec.md, and cleanup of the comments.\n\nVersion 2 generated the vmaddfp and vnmsubfp instructions if -Ofast was used,\nand those changes are deleted in this patch.\n\nThe Altivec instructions vmaddfp and vnmsubfp have different rounding behaviors\nthan the VSX xvmaddsp and xvnmsubsp instructions.  In particular, generating\nthese instructions seems to break Eigen on big endian systems.\n\nI have done bootstrap builds on power9 little endian (with both IEEE long\ndouble and IBM long double).  I have also done the builds and test on a power8\nbig endian system (testing both 32-bit and 64-bit code generation).  Chip has\nverified that it fixes the problem that Eigen encountered.  Can I check this\ninto the master GCC branch?  After a burn-in period, can I check this patch\ninto the active GCC branches?\n\nThanks in advance.\n\n2023-05-22   Michael Meissner  <meissner@linux.ibm.com>\n\ngcc/\n\n\tPR target/70243\n\t* config/rs6000/vsx.md (vsx_fmav4sf4): Do not generate vmaddfp.\n\t(vsx_nfmsv4sf4): Do not generate vnmsubfp.  Back port from master\n\t04/10/2023 change.\n\ngcc/testsuite/\n\n\tPR target/70243\n\t* gcc.target/powerpc/pr70243.c: New test.  Back port from master\n\t04/10/2023 change.", "chatglm2-6b": "\"This paragraph does not meet the criteria for any of the given categories. It does not mention any CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. It only mentions a patch version and some changes related to Altivec instructions.\""}}, {"node": {"oid": "6ef4e2e11c653f1d51f9a304a8d1cf44a53b4ad7", "committedDate": "2023-05-22T14:09:22Z", "message": "atch.pd: Ensure (op CONSTANT_CLASS_P CONSTANT_CLASS_P) is simplified [PR109505]\n\nOn the following testcase we hang, because POLY_INT_CST is CONSTANT_CLASS_P,\nbut BIT_AND_EXPR with it and INTEGER_CST doesn't simplify and the\n(x | CST1) & CST2 -> (x & CST2) | (CST1 & CST2)\nsimplification actually relies on the (CST1 & CST2) simplification,\notherwise it is a deoptimization, trading 2 ops for 3 and furthermore\nrunning into\n/* Given a bit-wise operation CODE applied to ARG0 and ARG1, see if both\n   operands are another bit-wise operation with a common input.  If so,\n   distribute the bit operations to save an operation and possibly two if\n   constants are involved.  For example, convert\n     (A | B) & (A | C) into A | (B & C)\n   Further simplification will occur if B and C are constants.  */\nsimplification which simplifies that\n(x & CST2) | (CST1 & CST2) back to\nCST2 & (x | CST1).\nI went through all other places I could find where we have a simplification\nwith 2 CONSTANT_CLASS_P operands and perform some operation on those two,\nwhile the other spots aren't that severe (just trade 2 operations for\nanother 2 if the two constants don't simplify, rather than as in the above\ncase trading 2 ops for 3), I still think all those spots really intend\nto optimize only if the 2 constants simplify.\n\nSo, the following patch adds to those a ! modifier to ensure that,\neven at GENERIC that modifier means !EXPR_P which is exactly what we want\nIMHO.\n\n2023-05-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/109505\n\t* match.pd ((x | CST1) & CST2 -> (x & CST2) | (CST1 & CST2),\n\tCombine successive equal operations with constants,\n\t(A +- CST1) +- CST2 -> A + CST3, (CST1 - A) +- CST2 -> CST3 - A,\n\tCST1 - (CST2 - A) -> CST3 + A): Use ! on ops with 2 CONSTANT_CLASS_P\n\toperands.\n\n\t* gcc.target/aarch64/sve/pr109505.c: New test.\n\n(cherry picked from commit f211757f6fa9515e3fd1a4f66f1a8b48e500c9de)", "chatglm2-6b": "\"The paragraph does not meet the criteria for any of the given categories. It does not describe any CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. Therefore, the answer is \\\"neither.\\\"\""}}, {"node": {"oid": "15db4bdc93826fe262abcb254b81edf6cfab6fe8", "committedDate": "2023-05-22T02:36:01Z", "message": "vect: Don't retry if the previous analysis fails\n\nWhen working on a cost tweaking patch, I found that a newly\nadded test case has different dumpings with stage-1 and\nbootstrapped gcc.  By looking into it, the apparent reason\nis vect_analyze_loop_2 doesn't get slp_done_for_suggested_uf\nset expectedly, the following retrying will use the garbage\nslp_done_for_suggested_uf instead.  In fact, the setting of\nslp_done_for_suggested_uf only happens when the previous\nanalysis succeeds, for the mentioned test case, its previous\nanalysis does fail, it's unexpected to use the value of\nslp_done_for_suggested_uf any more.\n\nIn function vect_analyze_loop_1, we only return success when\nres is true, which is the result of 1st analysis.  It means\nwe never try to vectorize with unroll_vinfo if the previous\nanalysis fails.  So this patch shouldn't break anything, and\njust stop some useless analysis early.\n\ngcc/ChangeLog:\n\n\t* tree-vect-loop.cc (vect_analyze_loop_1): Don't retry analysis with\n\tsuggested unroll factor once the previous analysis fails.\n\n(cherry picked from commit a04bf39f61ce7814d197d712760f08c206daf4f1)", "chatglm2-6b": "\"category: bug fixes\\n\\nThis paragraph describes a bug fix where a new test case was added and it had unexpected behavior when compared to previous analysis. The analysis failed and the solution was to use a different analysis to achieve the expected behavior.\""}}, {"node": {"oid": "cdab84e127daf8ea2582e2f0c8faaeadb6dca66a", "committedDate": "2023-05-22T00:20:36Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "a3ec0bd85945a271a6a253faea4a073cc1efec9a", "committedDate": "2023-05-21T18:43:25Z", "message": "Darwin, libgcc : Adjust min version supported for the OS.\n\nTools from later versions of the OS deprecate or fail to support\nearlier OS revisions.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\nlibgcc/ChangeLog:\n\n\t* config.host: Arrange to set min Darwin OS versions from\n\tthe configured host version.\n\t* config/darwin10-unwind-find-enc-func.c: Do not use current\n\theaders, but declare the nexessary structures locally to the\n\tversions in use for Mac OSX 10.6.\n\t* config/t-darwin: Amend to handle configured min OS\n\tversions.\n\t* config/t-darwin-min-1: New.\n\t* config/t-darwin-min-5: New.\n\t* config/t-darwin-min-8: New.\n\n(cherry picked from commit 20b8779ea9bd82b26eeb195b30f695168cd7ae1d)", "chatglm2-6b": "\"The paragraph is not classified into any category. It contains information about changes to the min version supported for the OS, but does not mention new security features, new features other than security, bug fixes, or performance optimization.\""}}, {"node": {"oid": "1df72374dd367d7549217c2625b7f843ec1c8e6e", "committedDate": "2023-05-21T18:42:50Z", "message": "libsanitizer, darwin: Unsupport Darwin >= 22 for now.\n\nThe mechanism for location dyld has altered from Darwin22 since dyld is now\nin the shared cache.  The implemented mechanism for walking the cache uses\nApple Blocks which GCC does not yet support, and the fallback to the original\nmechanism does not work there.\n\nUntil a suitable work-around can be found, unsupport Darwin22+.\n\n\tSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\nlibsanitizer/ChangeLog:\n\n\t* configure.tgt: Unsupport Darwin22+ until a mechanism can be found\n\tto locate dyld in the shared cache.\n\n(cherry picked from commit e722a1f42b28092c9f709a3f758fc4fe57db32b0)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "bdbb2ba03096392b749866a9f47c6823b2d12f42", "committedDate": "2023-05-21T00:20:00Z", "message": "Daily bump.", "chatglm2-6b": "\"I am unable to recognize the paragraph you provided as it is not clear what it is referring to. Therefore, I am unable to categorize it according to the criteria you have provided.\""}}, {"node": {"oid": "7259fd5bd4c922f396465c9cfec2ec342969f9a9", "committedDate": "2023-05-20T20:06:26Z", "message": "Fortran: CLASS pointer function result in variable definition context [PR109846]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/109846\n\t* expr.cc (gfc_check_vardef_context): Check appropriate pointer\n\tattribute for CLASS vs. non-CLASS function result in variable\n\tdefinition context.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/109846\n\t* gfortran.dg/ptr-func-5.f90: New test.\n\n(cherry picked from commit fa0569e90efe8a5cb895a3f50dd502f849940828)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "95ca40b04cffd9e3bb8d61654c3a1f2c2d50bb15", "committedDate": "2023-05-20T06:26:45Z", "message": "target/105753: Fix ICE in add_clobbers due to extra PARALLEL in insn.\n\nThis patch removes the superfluous parallel in [u]divmod patterns in\nthe AVR backend.  Effect of extra parallel is that add_clobbers reaches\ngcc_unreachable() because the clobbers for [u]divmod are missing.\nIf an insn has multiple parts like clobbers, the parallel around the\nparts of the insn pattern is implicit.\n\ngcc/\n\tPR target/105753\n\tBackport from 2023-05-20 https://gcc.gnu.org/r14-1016\n\t* config/avr/avr.md (divmodpsi, udivmodpsi, divmodsi, udivmodsi):\n\tRemove superfluous \"parallel\" in insn pattern.\n\t([u]divmod<mode>4): Tidy code.  Use gcc_unreachable() instead of\n\tprinting error text to assembly.\n\ngcc/testsuite/\n\tPR target/105753\n\tBackport from 2023-05-20 https://gcc.gnu.org/r14-1016\n\t* gcc.target/avr/torture/pr105753.c: New test.", "chatglm2-6b": "\"The paragraph does not satisfy any of the criteria. It does not mention any CVE fixes, new security features, new features other than security, bug fixes, or performance optimization. It only mentions a patch that removes extra parallel in the AVR backend, which is not a new feature or security fix.\""}}, {"node": {"oid": "75526d3f2fc2be8daa8d1e75d2fe6e86f11ba75c", "committedDate": "2023-05-20T00:20:06Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "a4d13e54822dddda4a53137c9f5e23770a798a0b", "committedDate": "2023-05-19T14:37:22Z", "message": "c++: add feature-test macro for auto(x)\n\nThis adds the feature-test macro for PR0849R8, as per\nhttps://github.com/cplusplus/CWG/issues/281.\n\ngcc/c-family/ChangeLog:\n\n\t* c-cppbuiltin.cc (c_cpp_builtins): Predefine __cpp_auto_cast\n\tfor C++23.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp23/feat-cxx2b.C: Test __cpp_auto_cast.\n\n(cherry picked from commit 32b81d897629b6c3bd9e2780831a1c45b38b5ac3)", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "4ca8a87a9a0de933d037b9729a5a72c209261d44", "committedDate": "2023-05-19T00:21:45Z", "message": "Daily bump.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "942374058b7d3f077a3454318c50151468949041", "committedDate": "2023-05-18T10:34:03Z", "message": "[arm] complete vmsr/vmrs blank and case adjustments\n\nBack in September last year, some of the vmsr and vmrs patterns had an\nextraneous blank removed, and the case of register names lowered, but\nanother instance remained, and so did a testcase.\n\nfor  gcc/ChangeLog\n\n\t* config/arm/vfp.md (*thumb2_movsi_vfp): Drop blank after tab\n\tafter vmsr and vmrs, and lower the case of P0.\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.target/arm/acle/cde-mve-full-assembly.c: Drop blank\n\tafter tab after vmsr, and lower the case of P0.", "chatglm2-6b": "\"Neither.\""}}, {"node": {"oid": "16df8b8884291171cfdd886f620be496e70e7ee3", "committedDate": "2023-05-18T10:34:03Z", "message": "arm testsuite: Shifts and get_FPSCR ACLE optimisation fixes\n\nThese newly updated tests were rewritten by Andrea. Some of them\nneeded further manual fixing as follows:\n\n* The #shift immediate value not in the check-function-bodies as expected\n* The ACLE was specifying sub-optimal code: lsr+and instead of ubfx. In\n  this case the test rewritten from the ACLE had the lsr+and pattern,\n  but the compiler was able to optimise to ubfx. Hence I've changed the\n  test to now match on ubfx.\n* Added a separate test to check shift on constants being optimised to\n  movs.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/srshr.c: Update shift value.\n\t* gcc.target/arm/mve/intrinsics/srshrl.c: Update shift value.\n\t* gcc.target/arm/mve/intrinsics/uqshl.c: Update shift value.\n\t* gcc.target/arm/mve/intrinsics/uqshll.c: Update shift value.\n\t* gcc.target/arm/mve/intrinsics/urshr.c: Update shift value.\n\t* gcc.target/arm/mve/intrinsics/urshrl.c: Update shift value.\n\t* gcc.target/arm/mve/intrinsics/vadciq_m_s32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vadciq_m_u32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vadciq_s32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vadciq_u32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vadcq_m_s32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vadcq_m_u32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vadcq_s32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vadcq_u32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vsbciq_m_s32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vsbciq_m_u32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vsbciq_s32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vsbciq_u32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vsbcq_m_s32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vsbcq_m_u32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vsbcq_s32.c: Update to ubfx.\n\t* gcc.target/arm/mve/intrinsics/vsbcq_u32.c: Update to ubfx.\n\t* gcc.target/arm/mve/mve_const_shifts.c: New test.", "chatglm2-6b": "\"Based on the criteria provided, the paragraph is classified as \\\"new security features\\\" and \\\"new features other than security\\\".\""}}, {"node": {"oid": "8ed701b52847e49d63634f03ec8800ff92b76dea", "committedDate": "2023-05-18T10:34:03Z", "message": "arm testsuite: XFAIL or relax registers in some tests [PR109697]\n\nHi all,\n\nThis is a simple testsuite tidy-up patch, addressing to types of errors:\n\n* The vcmp vector-scalar tests failing due to the compiler's preference\nof vector-vector comparisons, over vector-scalar comparisons. This is\ndue to the lack of cost model for MVE and the compiler not knowing that\nthe RTL vec_duplicate is free in those instructions. For now, we simply\nXFAIL these checks.\n* The tests for pr108177 had strict usage of q0 and r0 registers,\nmeaning that they would FAIL with -mfloat-abi=softf. The register checks\nhave now been relaxed. A couple of these run-tests also had incosistent\nuse of integer MVE with floating point vectors, so I've now changed\nthese to use FP MVE.\n\ngcc/testsuite/ChangeLog:\n\tPR target/109697\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u16.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u32.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u8.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u16.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u32.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u8.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f16.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f32.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u16.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u32.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u8.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f16.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f32.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f16.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f32.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f16.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f32.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u16.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u32.c: XFAIL check.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u8.c: XFAIL check.\n\t* gcc.target/arm/mve/pr108177-1.c: Relax registers.\n\t* gcc.target/arm/mve/pr108177-10.c: Relax registers.\n\t* gcc.target/arm/mve/pr108177-11.c: Relax registers.\n\t* gcc.target/arm/mve/pr108177-12.c: Relax registers.\n\t* gcc.target/arm/mve/pr108177-13.c: Relax registers.\n\t* gcc.target/arm/mve/pr108177-13-run.c: use mve_fp\n\t* gcc.target/arm/mve/pr108177-14.c: Relax registers.\n\t* gcc.target/arm/mve/pr108177-14-run.c: use mve_fp\n\t* gcc.target/arm/mve/pr108177-2.c: Relax registers.\n\t* gcc.target/arm/mve/pr108177-3.c: Relax registers.\n\t* gcc.target/arm/mve/pr108177-4.c: Relax registers.\n\t* gcc.target/arm/mve/pr108177-5.c: Relax registers.\n\t* gcc.target/arm/mve/pr108177-6.c: Relax registers.\n\t* gcc.target/arm/mve/pr108177-7.c: Relax registers.\n\t* gcc.target/arm/mve/pr108177-8.c: Relax registers.\n\t* gcc.target/arm/mve/pr108177-9.c: Relax registers.", "chatglm2-6b": "\"Based on the given paragraph, the paragraph is classified into the category of \\\"bug fixes\\\". The paragraph contains several bug fixes, including relaxing the\\u6ce8\\u518c\\u4ee5\\u89e3\\u51b3\\u7f16\\u8bd1\\u5668\\u504f\\u597d\\u95ee\\u9898\\u3001\\u4f7f\\u7528FP MVE\\u800c\\u4e0d\\u662finteger MVE\\u3001\\u4fee\\u590d\\u4e86\\u51e0\\u4e2a\\u6d4b\\u8bd5\\u4e2d\\u4f7f\\u7528\\u7684\\u65e0\\u6548\\u7684\\u4f7f\\u7528\\u6574\\u6570MVE\\u7684\\u95ee\\u9898\\u3002\""}}, {"node": {"oid": "379f99f1d7aaab7953530513902edb0a167318af", "committedDate": "2023-05-18T10:34:03Z", "message": "arm testsuite: Remove reduntant tests\n\nFollowing Andrea's overhaul of the MVE testsuite, these tests are now\nreduntant, as equivalent checks have been added to the each intrinsic's\n<intrinsic name>.c test.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/mve_fp_vaddq_n.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vaddq_m.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vaddq_n.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_m_n_u16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_m_n_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_m_n_u8.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_n_u16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_n_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_n_u8.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_x_n_u16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_x_n_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vddupq_x_n_u8.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vdwdupq_x_n_u16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vdwdupq_x_n_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vdwdupq_x_n_u8.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_m_n_u16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_m_n_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_m_n_u8.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_n_u16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_n_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_n_u8.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_x_n_u16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_x_n_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vidupq_x_n_u8.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_viwdupq_x_n_u16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_viwdupq_x_n_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_viwdupq_x_n_u8.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_offset_s64.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_offset_u64.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_offset_z_s64.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_offset_z_u64.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_shifted_offset_s64.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_shifted_offset_u64.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_shifted_offset_z_s64.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrdq_gather_shifted_offset_z_u64.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_f16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_s16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_s32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_u16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_f16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_s16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_s32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_u16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_offset_z_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_f16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_s16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_s32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_u16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_f16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_s16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_s32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_u16.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrhq_gather_shifted_offset_z_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_f32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_s32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_z_f32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_z_s32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_offset_z_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_f32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_s32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_z_f32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_z_s32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vldrwq_gather_shifted_offset_z_u32.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vstore_scatter_shifted_offset.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/mve_vstore_scatter_shifted_offset_p.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_m_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_m_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_f32-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_f16-1.c: Removed.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_f32-1.c: Removed.", "chatglm2-6b": "\"Based\""}}, {"node": {"oid": "5d013704c80b6211e6af60beae6cda4bd271ddbe", "committedDate": "2023-05-18T10:34:02Z", "message": "arm: Fix MVE header pointer overloads this time (and a bit more tidying)\n\nHi all,\n\nPreviously we had fixed the overloading of scalar arguments to intrinsics\nwith the introduction of a new `__ARM_mve_coerce3` _ Generic association.\nThis allowed users to give types other than int32_t, e.g. int, short, long,\netc., which previously would emit a nonsensical error message from the\n_Generic.\n\nHere I adjust that handling slightly and I am also doing the same thing, but\nfor pointer types:\n(un)signed char* can be now used instead of (u)int8_t*\n(un)signed short* can be now used instead of (u)int16_t*\n(un)signed int* and long* can be now used instead of (u)int32_t*\n(un)signed long long* can be now used instead of (u)int64_t*\n__fp16* and _Float16* can be now used instead of float16_t*\nfloat* can be now used instead of float32_t*\n\nThis required me to break down the _coerce_ generics for the specific\npointer types.\nOn the scalar types, the change in this patch is minor, renaming the\n_coerce_ generics and passing all scalars through the `__typeof` for\nconsistency with each-other.\n\nNo test regressions in the GCC testsuite or CMSIS-NN.\n\ngcc/ChangeLog:\n\n\t* config/arm/arm_mve.h: (__ARM_mve_typeid): Add more pointer types.\n\t(__ARM_mve_coerce1): Remove.\n\t(__ARM_mve_coerce2): Remove.\n\t(__ARM_mve_coerce3): Remove.\n\t(__ARM_mve_coerce_i_scalar): New.\n\t(__ARM_mve_coerce_s8_ptr): New.\n\t(__ARM_mve_coerce_u8_ptr): New.\n\t(__ARM_mve_coerce_s16_ptr): New.\n\t(__ARM_mve_coerce_u16_ptr): New.\n\t(__ARM_mve_coerce_s32_ptr): New.\n\t(__ARM_mve_coerce_u32_ptr): New.\n\t(__ARM_mve_coerce_s64_ptr): New.\n\t(__ARM_mve_coerce_u64_ptr): New.\n\t(__ARM_mve_coerce_f_scalar): New.\n\t(__ARM_mve_coerce_f16_ptr): New.\n\t(__ARM_mve_coerce_f32_ptr): New.\n\t(__arm_vst4q): Change _coerce_ overloads.\n\t(__arm_vbicq): Change _coerce_ overloads.\n\t(__arm_vmulq): Change _coerce_ overloads.\n\t(__arm_vcmpeqq): Change _coerce_ overloads.\n\t(__arm_vcmpneq): Change _coerce_ overloads.\n\t(__arm_vmaxnmavq): Change _coerce_ overloads.\n\t(__arm_vmaxnmvq): Change _coerce_ overloads.\n\t(__arm_vminnmavq): Change _coerce_ overloads.\n\t(__arm_vsubq): Change _coerce_ overloads.\n\t(__arm_vminnmvq): Change _coerce_ overloads.\n\t(__arm_vrshlq): Change _coerce_ overloads.\n\t(__arm_vqsubq): Change _coerce_ overloads.\n\t(__arm_vqdmulltq): Change _coerce_ overloads.\n\t(__arm_vqdmullbq): Change _coerce_ overloads.\n\t(__arm_vqdmulhq): Change _coerce_ overloads.\n\t(__arm_vqaddq): Change _coerce_ overloads.\n\t(__arm_vhaddq): Change _coerce_ overloads.\n\t(__arm_vhsubq): Change _coerce_ overloads.\n\t(__arm_vqdmlashq): Change _coerce_ overloads.\n\t(__arm_vqrdmlahq): Change _coerce_ overloads.\n\t(__arm_vmlasq): Change _coerce_ overloads.\n\t(__arm_vqdmlahq): Change _coerce_ overloads.\n\t(__arm_vmaxnmavq_p): Change _coerce_ overloads.\n\t(__arm_vmaxnmvq_p): Change _coerce_ overloads.\n\t(__arm_vminnmavq_p): Change _coerce_ overloads.\n\t(__arm_vminnmvq_p): Change _coerce_ overloads.\n\t(__arm_vfmasq_m): Change _coerce_ overloads.\n\t(__arm_vld1q): Change _coerce_ overloads.\n\t(__arm_vld1q_z): Change _coerce_ overloads.\n\t(__arm_vld2q): Change _coerce_ overloads.\n\t(__arm_vld4q): Change _coerce_ overloads.\n\t(__arm_vldrhq_gather_offset): Change _coerce_ overloads.\n\t(__arm_vldrhq_gather_offset_z): Change _coerce_ overloads.\n\t(__arm_vldrhq_gather_shifted_offset): Change _coerce_ overloads.\n\t(__arm_vldrhq_gather_shifted_offset_z): Change _coerce_ overloads.\n\t(__arm_vldrwq_gather_offset): Change _coerce_ overloads.\n\t(__arm_vldrwq_gather_offset_z): Change _coerce_ overloads.\n\t(__arm_vldrwq_gather_shifted_offset): Change _coerce_ overloads.\n\t(__arm_vldrwq_gather_shifted_offset_z): Change _coerce_ overloads.\n\t(__arm_vst1q_p): Change _coerce_ overloads.\n\t(__arm_vst2q): Change _coerce_ overloads.\n\t(__arm_vst1q): Change _coerce_ overloads.\n\t(__arm_vstrhq): Change _coerce_ overloads.\n\t(__arm_vstrhq_p): Change _coerce_ overloads.\n\t(__arm_vstrhq_scatter_offset_p): Change _coerce_ overloads.\n\t(__arm_vstrhq_scatter_offset): Change _coerce_ overloads.\n\t(__arm_vstrhq_scatter_shifted_offset_p): Change _coerce_ overloads.\n\t(__arm_vstrhq_scatter_shifted_offset): Change _coerce_ overloads.\n\t(__arm_vstrwq_p): Change _coerce_ overloads.\n\t(__arm_vstrwq): Change _coerce_ overloads.\n\t(__arm_vstrwq_scatter_offset): Change _coerce_ overloads.\n\t(__arm_vstrwq_scatter_offset_p): Change _coerce_ overloads.\n\t(__arm_vstrwq_scatter_shifted_offset): Change _coerce_ overloads.\n\t(__arm_vstrwq_scatter_shifted_offset_p): Change _coerce_ overloads.\n\t(__arm_vsetq_lane): Change _coerce_ overloads.\n\t(__arm_vcmpneq_m): Change _coerce_ overloads.\n\t(__arm_vldrbq_gather_offset): Change _coerce_ overloads.\n\t(__arm_vdwdupq_x_u8): Change _coerce_ overloads.\n\t(__arm_vdwdupq_x_u16): Change _coerce_ overloads.\n\t(__arm_vdwdupq_x_u32): Change _coerce_ overloads.\n\t(__arm_viwdupq_x_u8): Change _coerce_ overloads.\n\t(__arm_viwdupq_x_u16): Change _coerce_ overloads.\n\t(__arm_viwdupq_x_u32): Change _coerce_ overloads.\n\t(__arm_vidupq_x_u8): Change _coerce_ overloads.\n\t(__arm_vddupq_x_u8): Change _coerce_ overloads.\n\t(__arm_vidupq_x_u16): Change _coerce_ overloads.\n\t(__arm_vddupq_x_u16): Change _coerce_ overloads.\n\t(__arm_vidupq_x_u32): Change _coerce_ overloads.\n\t(__arm_vddupq_x_u32): Change _coerce_ overloads.\n\t(__arm_vhaddq_x): Change _coerce_ overloads.\n\t(__arm_vhsubq_x): Change _coerce_ overloads.\n\t(__arm_vldrdq_gather_offset): Change _coerce_ overloads.\n\t(__arm_vldrdq_gather_offset_z): Change _coerce_ overloads.\n\t(__arm_vldrdq_gather_shifted_offset): Change _coerce_ overloads.\n\t(__arm_vldrdq_gather_shifted_offset_z): Change _coerce_ overloads.\n\t(__arm_vldrbq_gather_offset_z): Change _coerce_ overloads.\n\t(__arm_vqrdmlahq_m): Change _coerce_ overloads.\n\t(__arm_vqrdmlashq_m): Change _coerce_ overloads.\n\t(__arm_vqdmlashq_m): Change _coerce_ overloads.\n\t(__arm_vmlaldavaxq_p): Change _coerce_ overloads.\n\t(__arm_vmlasq_m): Change _coerce_ overloads.\n\t(__arm_vqdmulhq_m): Change _coerce_ overloads.\n\t(__arm_vqdmulltq_m): Change _coerce_ overloads.\n\t(__arm_vidupq_u16): Change _coerce_ overloads.\n\t(__arm_vidupq_u32): Change _coerce_ overloads.\n\t(__arm_vidupq_u8): Change _coerce_ overloads.\n\t(__arm_vddupq_u16): Change _coerce_ overloads.\n\t(__arm_vddupq_u32): Change _coerce_ overloads.\n\t(__arm_vddupq_u8): Change _coerce_ overloads.\n\t(__arm_viwdupq_m): Change _coerce_ overloads.\n\t(__arm_viwdupq_u16): Change _coerce_ overloads.\n\t(__arm_viwdupq_u32): Change _coerce_ overloads.\n\t(__arm_viwdupq_u8): Change _coerce_ overloads.\n\t(__arm_vdwdupq_m): Change _coerce_ overloads.\n\t(__arm_vdwdupq_u16): Change _coerce_ overloads.\n\t(__arm_vdwdupq_u32): Change _coerce_ overloads.\n\t(__arm_vdwdupq_u8): Change _coerce_ overloads.\n\t(__arm_vaddlvaq): Change _coerce_ overloads.\n\t(__arm_vaddlvaq_p): Change _coerce_ overloads.\n\t(__arm_vaddvaq): Change _coerce_ overloads.\n\t(__arm_vaddvaq_p): Change _coerce_ overloads.\n\t(__arm_vcmphiq_m): Change _coerce_ overloads.\n\t(__arm_vmladavaq_p): Change _coerce_ overloads.\n\t(__arm_vmladavaxq): Change _coerce_ overloads.\n\t(__arm_vmlaldavaxq): Change _coerce_ overloads.\n\t(__arm_vstrbq): Change _coerce_ overloads.\n\t(__arm_vstrbq_p): Change _coerce_ overloads.\n\t(__arm_vrmlaldavhaq_p): Change _coerce_ overloads.\n\t(__arm_vstrbq_scatter_offset): Change _coerce_ overloads.\n\t(__arm_vstrbq_scatter_offset_p): Change _coerce_ overloads.\n\t(__arm_vstrdq_scatter_offset_p): Change _coerce_ overloads.\n\t(__arm_vstrdq_scatter_offset): Change _coerce_ overloads.\n\t(__arm_vstrdq_scatter_shifted_offset_p): Change _coerce_ overloads.\n\t(__arm_vstrdq_scatter_shifted_offset): Change _coerce_ overloads.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-fp.c: Add testcases.\n\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-int.c: Add testcases.", "chatglm2-6b": "\"Based\""}}, {"node": {"oid": "eaae2bf98ddb7d4cea34dd44c6ecfdbf23b3065b", "committedDate": "2023-05-18T10:34:02Z", "message": "arm: Fix overloading of MVE scalar constant parameters on vbicq, vmvnq_m\n\nWe found this as part of the wider testsuite updates.\n\nThe applicable tests are authored by Andrea earlier in this patch series\n\nOk for trunk?\n\ngcc/ChangeLog:\n\n\t* config/arm/arm_mve.h (__arm_vbicq): Change coerce on\n\tscalar constant.\n\t(__arm_vmvnq_m): Likewise.", "chatglm2-6b": "\"The paragraph is classified as \\\"new security features\\\" and \\\"new features other than security\\\" because it mentions the discovery of a new issue and the implementation of a fix. The paragraph is not classified as \\\"CVE fixes\\\", \\\"new security features\\\", \\\"new features other than security\\\", \\\"bug fixes\\\", or \\\"performance optimization\\\" because it does not mention any of those specific criteria.\""}}, {"node": {"oid": "15fbceddeef868b9fa7ebdf3b20aac9ac0afb9a2", "committedDate": "2023-05-18T10:34:02Z", "message": "arm: Add vorrq_n overloading into vorrq _Generic\n\nWe found this as part of the wider testsuite updates.\n\nThe applicable tests are authored by Andrea earlier in this patch series\n\nOk for trunk?\n\ngcc/ChangeLog:\n\n\t* config/arm/arm_mve.h (__arm_vorrq): Add _n variant.", "chatglm2-6b": "\"Neither\""}}, {"node": {"oid": "f51bc071a57fb07b33f0c200011ef319d1be397d", "committedDate": "2023-05-18T10:34:02Z", "message": "arm: Stop vadcq, vsbcq intrinsics from overwriting the FPSCR NZ flags\n\nHi all,\n\nWe noticed that calls to the vadcq and vsbcq intrinsics, both of\nwhich use __builtin_arm_set_fpscr_nzcvqc to set the Carry flag in\nthe FPSCR, would produce the following code:\n\n```\n< r2 is the *carry input >\nvmrs\tr3, FPSCR_nzcvqc\nbic\tr3, r3, #536870912\norr\tr3, r3, r2, lsl #29\nvmsr\tFPSCR_nzcvqc, r3\n```\n\nwhen the MVE ACLE instead gives a different instruction sequence of:\n```\n< Rt is the *carry input >\nVMRS Rs,FPSCR_nzcvqc\nBFI Rs,Rt,#29,#1\nVMSR FPSCR_nzcvqc,Rs\n```\n\nthe bic + orr pair is slower and it's also wrong, because, if the\n*carry input is greater than 1, then we risk overwriting the top two\nbits of the FPSCR register (the N and Z flags).\n\nThis turned out to be a problem in the header file and the solution was\nto simply add a `& 1x0u` to the `*carry` input: then the compiler knows\nthat we only care about the lowest bit and can optimise to a BFI.\n\nOk for trunk?\n\nThanks,\nStam Markianos-Wright\n\ngcc/ChangeLog:\n\n\t* config/arm/arm_mve.h (__arm_vadcq_s32): Fix arithmetic.\n\t(__arm_vadcq_u32): Likewise.\n\t(__arm_vadcq_m_s32): Likewise.\n\t(__arm_vadcq_m_u32): Likewise.\n\t(__arm_vsbcq_s32): Likewise.\n\t(__arm_vsbcq_u32): Likewise.\n\t(__arm_vsbcq_m_s32): Likewise.\n\t(__arm_vsbcq_m_u32): Likewise.\n\t* config/arm/mve.md (get_fpscr_nzcvqc): Make unspec_volatile.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/arm/mve/mve_vadcq_vsbcq_fpscr_overwrite.c: New.\n\n(cherry picked from commit f1417d051be094ffbce228e11951f3e12e8fca1c)", "chatglm2-6b": "\"Based on the criteria provided, the paragraph can be classified into the category of \\\"bug fixes\\\". The paragraph mentions a bug in the header file and provides a solution by adding a `& 1x0u` to the `*carry` input.\""}}, {"node": {"oid": "958a3c54645f2a47a188d17e2c43b5e56ba88430", "committedDate": "2023-05-18T10:34:01Z", "message": "arm: Mve backend + testsuite fixes 2\n\nHi all,\n\nthis patch improves a number of MVE tests in the testsuite for more\nprecise and better coverage using check-function-bodies instead of\nscan-assembler checks.  Also all intrusctions prescribed in the\nACLE[1] are now checked.\n\nAlso a number of simple fixes are done in the backend to fix\ncapitalization and spacing.\n\nBest Regards\n\n  Andrea\n\n[1] <https://github.com/ARM-software/acle>\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vrndq_m_f<mode>, mve_vrev64q_f<mode>)\n\t(mve_vrev32q_fv8hf, mve_vcvttq_f32_f16v4sf)\n\t(mve_vcvtbq_f32_f16v4sf, mve_vcvtq_to_f_<supf><mode>)\n\t(mve_vrev64q_<supf><mode>, mve_vcvtq_from_f_<supf><mode>)\n\t(mve_vmovltq_<supf><mode>, mve_vmovlbq_<supf><mode>)\n\t(mve_vcvtpq_<supf><mode>, mve_vcvtnq_<supf><mode>)\n\t(mve_vcvtmq_<supf><mode>, mve_vcvtaq_<supf><mode>)\n\t(mve_vmvnq_n_<supf><mode>, mve_vrev16q_<supf>v16qi)\n\t(mve_vctp<mode1>qhi, mve_vbrsrq_n_f<mode>)\n\t(mve_vbrsrq_n_<supf><mode>, mve_vandq_f<mode>, mve_vbicq_f<mode>)\n\t(mve_vbicq_n_<supf><mode>, mve_vctp<mode1>q_mhi)\n\t(mve_vcvtbq_f16_f32v8hf, mve_vcvttq_f16_f32v8hf)\n\t(mve_veorq_f<mode>, mve_vmlaldavxq_s<mode>, mve_vmlsldavq_s<mode>)\n\t(mve_vmlsldavxq_s<mode>, mve_vornq_f<mode>, mve_vorrq_f<mode>)\n\t(mve_vrmlaldavhxq_sv4si, mve_vbicq_m_n_<supf><mode>)\n\t(mve_vcvtq_m_to_f_<supf><mode>, mve_vshlcq_<supf><mode>)\n\t(mve_vmvnq_m_<supf><mode>, mve_vpselq_<supf><mode>)\n\t(mve_vcvtbq_m_f16_f32v8hf, mve_vcvtbq_m_f32_f16v4sf)\n\t(mve_vcvttq_m_f16_f32v8hf, mve_vcvttq_m_f32_f16v4sf)\n\t(mve_vmlaldavq_p_<supf><mode>, mve_vmlsldavaq_s<mode>)\n\t(mve_vmlsldavaxq_s<mode>, mve_vmlsldavq_p_s<mode>)\n\t(mve_vmlsldavxq_p_s<mode>, mve_vmvnq_m_n_<supf><mode>)\n\t(mve_vorrq_m_n_<supf><mode>, mve_vpselq_f<mode>)\n\t(mve_vrev32q_m_fv8hf, mve_vrev32q_m_<supf><mode>)\n\t(mve_vrev64q_m_f<mode>, mve_vrmlaldavhaxq_sv4si)\n\t(mve_vrmlaldavhxq_p_sv4si, mve_vrmlsldavhaxq_sv4si)\n\t(mve_vrmlsldavhq_p_sv4si, mve_vrmlsldavhxq_p_sv4si)\n\t(mve_vrev16q_m_<supf>v16qi, mve_vrmlaldavhq_p_<supf>v4si)\n\t(mve_vrmlsldavhaq_sv4si, mve_vandq_m_<supf><mode>)\n\t(mve_vbicq_m_<supf><mode>, mve_veorq_m_<supf><mode>)\n\t(mve_vornq_m_<supf><mode>, mve_vorrq_m_<supf><mode>)\n\t(mve_vandq_m_f<mode>, mve_vbicq_m_f<mode>, mve_veorq_m_f<mode>)\n\t(mve_vornq_m_f<mode>, mve_vorrq_m_f<mode>)\n\t(mve_vstrdq_scatter_shifted_offset_p_<supf>v2di_insn)\n\t(mve_vstrdq_scatter_shifted_offset_<supf>v2di_insn)\n\t(mve_vstrdq_scatter_base_wb_p_<supf>v2di) : Fix spacing and\n\tcapitalization in the emitted asm.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/asrl.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/lsll.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/sqrshr.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/sqrshrl_sat48.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/sqshl.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/sqshll.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/srshr.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/srshrl.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/uqrshl.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/uqrshll_sat48.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/uqshl.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/uqshll.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/urshr.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/urshrl.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vadciq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vadciq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vadciq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vadciq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vadcq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vadcq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vadcq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vadcq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vctp16q.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vctp16q_m.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vctp32q.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vctp32q_m.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vctp64q.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vctp64q_m.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vctp8q.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vctp8q_m.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_m_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_m_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_m_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_m_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_x_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_x_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_x_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_x_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtbq_f16_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtbq_f32_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtbq_m_f16_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtbq_m_f32_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtbq_x_f32_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_m_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_m_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_m_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_m_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_x_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_x_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_x_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_x_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_m_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_m_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_m_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_m_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_x_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_x_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_x_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_x_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_m_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_m_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_m_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_m_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_x_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_x_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_x_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_x_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_f16_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_f16_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_f32_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_f32_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_f16_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_f16_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_f32_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_f32_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_f16_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_f16_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_f32_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_f32_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_f16_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_f16_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_f32_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_f32_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_n_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_f16_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_f16_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_f32_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_f32_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_f16_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_f16_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_f32_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_f32_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvttq_f16_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvttq_f32_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvttq_m_f16_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvttq_m_f32_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvttq_x_f32_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmsq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmsq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmsq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmsq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavxq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpnot.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovunbq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovunbq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovunbq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovunbq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovuntq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovuntq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovuntq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovuntq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrunbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrunbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrunbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrunbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshruntq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshruntq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshruntq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshruntq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_r_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_r_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_r_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_r_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_r_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_r_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_r_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshluq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshluq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshluq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshluq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshluq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshluq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrunbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrunbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrunbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrunbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshruntq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshruntq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshruntq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshruntq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev16q_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev16q_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev16q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev16q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev16q_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev16q_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndaq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndaq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndaq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndmq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndmq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndmq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndmq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndmq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndmq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndnq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndnq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndnq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndnq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndnq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndnq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndpq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndpq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndpq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndpq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndpq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndpq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndxq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndxq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndxq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndxq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndxq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndxq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbciq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbciq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbciq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbciq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbcq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbcq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbcq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbcq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_r_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_r_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_r_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_r_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_r_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_r_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_r_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_p_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_p_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_\u2026", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "732102a21b75c972129c9589b491451e0b0289b5", "committedDate": "2023-05-18T10:34:01Z", "message": "arm: Fix vstrwq* backend + testsuite\n\nHi all,\n\nthis patch fixes the vstrwq* MVE instrinsics failing to emit the\ncorrect sequence of instruction due to a missing predicate. Also the\nimmediate range is fixed to be multiples of 2 up between [-252, 252].\n\nBest Regards\n\n  Andrea\n\ngcc/ChangeLog:\n\n\t* config/arm/constraints.md (mve_vldrd_immediate): Move it to\n\tpredicates.md.\n\t(Ri): Move constraint definition from predicates.md.\n\t(Rl): Define new constraint.\n\t* config/arm/mve.md (mve_vstrwq_scatter_base_wb_p_<supf>v4si): Add\n\tmissing constraint.\n\t(mve_vstrwq_scatter_base_wb_p_fv4sf): Add missing Up constraint\n\tfor op 1, use mve_vstrw_immediate predicate and Rl constraint for\n\top 2. Fix asm output spacing.\n\t(mve_vstrdq_scatter_base_wb_p_<supf>v2di): Add missing constraint.\n\t* config/arm/predicates.md (Ri) Move constraint to constraints.md\n\t(mve_vldrd_immediate): Move it from\n\tconstraints.md.\n\t(mve_vstrw_immediate): New predicate.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vstrwq_f32.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_shifted_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_u32.c: Likewise.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "d04583df6e2ae2cffb7f5df79081bbbc539b7af9", "committedDate": "2023-05-18T10:34:01Z", "message": "arm: Mve testsuite improvements\n\nHello all,\n\nthis patch improves a number of MVE tests in the testsuite for more\nprecise and better coverage using check-function-bodies instead of\nscan-assembler checks.  Also all intrusctions prescribed in the ACLE[1]\nare now checked.\n\nBest Regards\n\n  Andrea\n\n[1] <https://github.com/ARM-software/acle>\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vld1q_f16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vld1q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_z_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_z_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_z_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_z_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_z_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_offset_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_offset_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_offset_z_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_offset_z_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_shifted_offset_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_shifted_offset_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_shifted_offset_z_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_shifted_offset_z_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_z_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_z_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_offset_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_z_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_shifted_offset_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_z_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst4q_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst4q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst4q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst4q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst4q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst4q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst4q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst4q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_scatter_shifted_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrhq_u32.c: Likewise.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "0b968346dad68953acf964575ff984b8004a6520", "committedDate": "2023-05-18T10:34:01Z", "message": "arm: remove unused variables from test\n\nThis is just a minor issue I found with a previous test\nof mine that caused it to fail in C++ mode due to these\nunused const variables being uninitialised. I forgot to\nremove these after removing some test cases that did use\nthem. I removed the test cases, because I came to the\nconclusion that the const-ness of the immediate was\nirrelevant to the test itself.\nRemoving the variables now makes the test PASS for C++.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-fp.c: Remove unused variables.\n\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-int.c: Remove unused variables.\n\n(cherry picked from commit 1d509f190393627cffffdf0afffc427b25dd21c2)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "60e54b99f597a594a9ad8deaa2af1ed66eb451c7", "committedDate": "2023-05-18T10:34:00Z", "message": "arm: fix __arm_vld1q_z* and __arm_vst1q_p* intrinsics [PR108442]\n\nThe MVE ACLE allows for __ARM_MVE_PRESERVE_USER_NAMESPACE to be defined,\nwhich removes definitions for intrinsic functions without the __arm_\nprefix. __arm_vld1q_z* and __arm_vst1q_p* are currently implemented via\ncalls to vldr* and vstr*, which results in several compile-time errors when\n__ARM_MVE_PRESERVE_USER_NAMESPACE is defined. This patch replaces these\nwith calls to their prefixed counterparts, __arm_vldr* and __arm_str*,\nand adds a test covering the definition of __ARM_MVE_PRESERVE_USER_NAMESPACE.\n\ngcc/ChangeLog:\n\n\tPR target/108442\n\t* config/arm/arm_mve.h (__arm_vst1q_p_u8): Use prefixed intrinsic\n\tfunction.\n\t(__arm_vst1q_p_s8): Likewise.\n\t(__arm_vld1q_z_u8): Likewise.\n\t(__arm_vld1q_z_s8): Likewise.\n\t(__arm_vst1q_p_u16): Likewise.\n\t(__arm_vst1q_p_s16): Likewise.\n\t(__arm_vld1q_z_u16): Likewise.\n\t(__arm_vld1q_z_s16): Likewise.\n\t(__arm_vst1q_p_u32): Likewise.\n\t(__arm_vst1q_p_s32): Likewise.\n\t(__arm_vld1q_z_u32): Likewise.\n\t(__arm_vld1q_z_s32): Likewise.\n\t(__arm_vld1q_z_f16): Likewise.\n\t(__arm_vst1q_p_f16): Likewise.\n\t(__arm_vld1q_z_f32): Likewise.\n\t(__arm_vst1q_p_f32): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/general/preserve_user_namespace_1.c: New test.\n\n(cherry picked from commit f54e31ddefe3ea7146624eabcb75b1c90dc59f1a)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "bb113a56e31159f4fbe26cc06ee25e4972ce74b5", "committedDate": "2023-05-18T10:34:00Z", "message": "arm: Make MVE masked stores read memory operand [PR 108177]\n\nThis patch adds the memory operand of MVE masked stores as input operands to\nmimic the 'partial' writes, to prevent erroneous write-after-write\noptimizations as described in the PR.\n\ngcc/ChangeLog:\n\n\tPR target/108177\n\t* config/arm/mve.md (mve_vstrbq_p_<supf><mode>, mve_vstrhq_p_fv8hf,\n\tmve_vstrhq_p_<supf><mode>, mve_vstrwq_p_<supf>v4si): Add memory operand\n\tas input operand.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/pr108177-1-run.c: New test.\n\t* gcc.target/arm/mve/pr108177-1.c: New test.\n\t* gcc.target/arm/mve/pr108177-10-run.c: New test.\n\t* gcc.target/arm/mve/pr108177-10.c: New test.\n\t* gcc.target/arm/mve/pr108177-11-run.c: New test.\n\t* gcc.target/arm/mve/pr108177-11.c: New test.\n\t* gcc.target/arm/mve/pr108177-12-run.c: New test.\n\t* gcc.target/arm/mve/pr108177-12.c: New test.\n\t* gcc.target/arm/mve/pr108177-13-run.c: New test.\n\t* gcc.target/arm/mve/pr108177-13.c: New test.\n\t* gcc.target/arm/mve/pr108177-14-run.c: New test.\n\t* gcc.target/arm/mve/pr108177-14.c: New test.\n\t* gcc.target/arm/mve/pr108177-2-run.c: New test.\n\t* gcc.target/arm/mve/pr108177-2.c: New test.\n\t* gcc.target/arm/mve/pr108177-3-run.c: New test.\n\t* gcc.target/arm/mve/pr108177-3.c: New test.\n\t* gcc.target/arm/mve/pr108177-4-run.c: New test.\n\t* gcc.target/arm/mve/pr108177-4.c: New test.\n\t* gcc.target/arm/mve/pr108177-5-run.c: New test.\n\t* gcc.target/arm/mve/pr108177-5.c: New test.\n\t* gcc.target/arm/mve/pr108177-6-run.c: New test.\n\t* gcc.target/arm/mve/pr108177-6.c: New test.\n\t* gcc.target/arm/mve/pr108177-7-run.c: New test.\n\t* gcc.target/arm/mve/pr108177-7.c: New test.\n\t* gcc.target/arm/mve/pr108177-8-run.c: New test.\n\t* gcc.target/arm/mve/pr108177-8.c: New test.\n\t* gcc.target/arm/mve/pr108177-9-run.c: New test.\n\t* gcc.target/arm/mve/pr108177-9.c: New test.\n\t* gcc.target/arm/mve/pr108177-main.x: New test include.\n\t* gcc.target/arm/mve/pr108177.x: New test include.\n\n(cherry picked from commit c1093923733a1072a237f112e3239b5ebd88eadd)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "09f0fd468f5fc5b67344c0f2e86376804e52aee3", "committedDate": "2023-05-18T10:34:00Z", "message": "arm: Fix vcreate definition\n\nFrom the initial merge of the MVE backend, the vcreate\nintrinsic has had the vector lanes mixed up, compared\nto the intended (as per the ACLE) definition. This is\nalso a discrepancy with clang:\nhttps://godbolt.org/z/4n93e5aqj\n\nThis patches simply switches the operands around and\nmakes the tests more specific on the input registers\n(I do not touch the output Q regs as they vary based\non softfp/hardfp or the input registers when the input\nis a constant, since, in that case, a single register\nis loaded with a constant and then the same register is\nused twice as \"vmov q0[2], q0[0], r2, r2\" and the reg\nnum might not always be guaranteed).\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vcvtq_n_to_f_<supf><mode>): Swap operands.\n\t(mve_vcreateq_f<mode>): Swap operands.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vcreateq_f16.c: Tighten test.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_f32.c: Tighten test.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s16.c: Tighten test.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s32.c: Tighten test.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s64.c: Tighten test.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s8.c: Tighten test.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u16.c: Tighten test.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u32.c: Tighten test.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u64.c: Tighten test.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u8.c: Tighten test.\n\n(cherry picked from commit 3f0ca7a3e4431534bff3b8eb73709cc822e489b0)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "c7c4dfb5989e80ffc8e8439a8d9a9ed654612b90", "committedDate": "2023-05-18T10:34:00Z", "message": "arm: Split up MVE _Generic associations to prevent type clashes [PR107515]\n\nWith these previous patches:\nhttps://gcc.gnu.org/pipermail/gcc-patches/2022-November/606586.html\nhttps://gcc.gnu.org/pipermail/gcc-patches/2022-November/606587.html\nwe enabled the MVE overloaded _Generic associations to handle more\nscalar types, however at PR 107515 we found a new regression that\nwasn't detected in our testing:\n\nWith glibc's posix/types.h:\n```\ntypedef signed int __int32_t;\n...\ntypedef __int32_t int32_t;\n```\nWe would get a `error: '_Generic' specifies two compatible types`\nfrom `__ARM_mve_coerce3` because of `type: param`, when `type` is\n`int` and `int32_t: param` both being the same under the hood.\n\nThe same did not happen with Newlib's header sys/_stdint.h:\n```\ntypedef long int __int32_t;\n...\ntypedef __int32_t int32_t ;\n```\nwhich worked fine, because it uses `long int`.\n\nThe same could feasibly happen in `__ARM_mve_coerce2` between\n`__fp16` and `float16_t`.\n\nThe solution here is to break the _Generic down so that the similar\ntypes don't appear at the same level, as is done in `__ARM_mve_typeid`\n\ngcc/ChangeLog:\n\tPR target/96795\n\tPR target/107515\n\t* config/arm/arm_mve.h (__ARM_mve_coerce2): Split types.\n\t(__ARM_mve_coerce3): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR target/96795\n\tPR target/107515\n\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-fp.c: New test.\n\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-int.c: New test.\n\n(cherry picked from commit 8a1360e72d6c6056606aa5edd8c906c50f26de59)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "fc68bca6a77c20931d61c96ef47cf6ee85783331", "committedDate": "2023-05-18T10:34:00Z", "message": "arm: fix missing extern \"C\" in MVE tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s16.c: Add missing extern\n\t\"C\".\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u8.c: Likewise.\n\n(cherry picked from commit 267f01a493ab8a0bec9325ce3386b946c46f2e98)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "af4cdaa51a3bb93331f4f35ac13536a3c477142d", "committedDate": "2023-05-18T10:34:00Z", "message": "arm: improve tests for vld2q*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vld2q_f16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vld2q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_u8.c: Likewise.\n\n(cherry picked from commit a8704dc9d5f00bff9f52cf626f129ac1c6520d65)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "856c74b2cbac0f3eae91735af92013496077ef21", "committedDate": "2023-05-18T10:33:59Z", "message": "arm: improve tests and fix vqnegq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vqnegq_s<mode>): Fix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqnegq_s8.c: Likewise.\n\n(cherry picked from commit 1563de6f9d3a9607ae2872b87d9718add3cf6e6a)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "a0cbc3d6d96ac7391b6fc4ce5951bf92e66077e1", "committedDate": "2023-05-18T10:33:59Z", "message": "arm: improve tests for vqrdmulhq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s8.c: Likewise.\n\n(cherry picked from commit 73a712e9c6620f8b7aede3eb1c2984fb91646201)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "b56b280c8703aa565a6c20f43ac4d0c7aca4d417", "committedDate": "2023-05-18T10:33:59Z", "message": "arm: improve tests for vqrdmlsdhxq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s8.c: Likewise.\n\n(cherry picked from commit ef0bec9036cef36b26006d9a3d22b879d705e75c)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "eae89159b54ce7d276a0bec0372f50fa63a7e388", "committedDate": "2023-05-18T10:33:59Z", "message": "arm: improve tests for vqrdmlsdhq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s8.c: Likewise.\n\n(cherry picked from commit 79090d68ba7bd59b1cf2585a1478fd5781f577d4)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "997b86eda16b7aa750c8431b3c36f6dd9edeeead", "committedDate": "2023-05-18T10:33:59Z", "message": "arm: improve tests for vqdmlsdhxq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s8.c: Likewise.\n\n(cherry picked from commit 8b9fcce72f7f93b11129a298c54c9c178e510cf0)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "4971715f884823a3bd18ee57fffb3a9e1d571d26", "committedDate": "2023-05-18T10:33:59Z", "message": "arm: improve tests for vqdmlsdhq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_s8.c: Likewise.\n\n(cherry picked from commit 8de09beb71a9bdc24c969ab648c4c5570204ab87)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "48afcf6f720b8a69dd0cab3010d3c423d038d569", "committedDate": "2023-05-18T10:33:59Z", "message": "arm: improve tests for vqrdmlashq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s8.c: Likewise.\n\n(cherry picked from commit 26c400b1d82482b905f4d804e959b090fe72ab39)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "017b5dbc34282ed221370f32343dff908252d039", "committedDate": "2023-05-18T10:33:58Z", "message": "arm: improve tests for vqrdmladhxq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s8.c: Likewise.\n\n(cherry picked from commit 22a02a9576d234c517f33972e572541438eb9018)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "98c45781be3fed8ed8c8819cf196faa2b5753892", "committedDate": "2023-05-18T10:33:58Z", "message": "arm: improve tests for vqrdmladhq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s8.c: Likewise.\n\n(cherry picked from commit 6c43db2480f0e50878ba4da4d47c6621513fe91f)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "e776a8333bab96a997738a8a0a647eae28ba379c", "committedDate": "2023-05-18T10:33:58Z", "message": "arm: improve tests for vqdmladhxq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_s8.c: Likewise.\n\n(cherry picked from commit f2a324b29e07b5d9b3b0c299dbb6558a9f3b8574)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "9d80744291001fe3e29d2d7430639a3c46265622", "committedDate": "2023-05-18T10:33:58Z", "message": "arm: improve tests for vqdmladhq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqdmladhq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhq_s8.c: Likewise.\n\n(cherry picked from commit d26036dd88ab6c792928032ed05cc7e0a3dd345e)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "f25c97c8326c211ec65aecfda495599adf3caa72", "committedDate": "2023-05-18T10:33:58Z", "message": "arm: improve tests and fix vqabsq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vqabsq_s<mode>): Fix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_s8.c: Likewise.\n\n(cherry picked from commit 672eec5db5e673713540022c5a467ce6be165f53)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "6171e0b1701e580800eded08844e6f1d02af55da", "committedDate": "2023-05-18T10:33:58Z", "message": "arm: improve tests for vcmulq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vcmulq_f16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_x_f32.c: Likewise.\n\n(cherry picked from commit c3c828436e7db1787d644153fe07daf356c99f2a)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "455461dfccc0747c4731c4f69d8ae3a353cd9798", "committedDate": "2023-05-18T10:33:57Z", "message": "arm: improve tests for vcmlaq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_f16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_m_f32.c: Likewise.\n\n(cherry picked from commit 0ea30b2a83c908323d73309b6f698331607eb2e0)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "633a203732f52443d314d0519ff3571641866b88", "committedDate": "2023-05-18T10:33:57Z", "message": "arm: improve tests for vcaddq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_f16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u8.c: Likewise.\n\n(cherry picked from commit 6764c13b14b036e70da28b0245c1299aecc061a9)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "99bcb2f22e3d45aeba2bf582d53307408b8ecbf2", "committedDate": "2023-05-18T10:33:57Z", "message": "arm: improve tests for vmulltq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_m_p16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_m_p8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_p16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_p8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_x_p16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_x_p8.c: Likewise.\n\n(cherry picked from commit 59d46d5ba0bf81a7431c0bae1ad8d1024249be47)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "b821e3502632ef6fb2e136ca80c00a14101983c5", "committedDate": "2023-05-18T10:33:57Z", "message": "arm: improve tests for vmullbq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_m_p16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_m_p8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_p16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_p8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_x_p16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_x_p8.c: Likewise.\n\n(cherry picked from commit e6f52130d0db50ca3f59e45676db9431fa44457c)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "4fdbf8cb806575df6e6c8f249ab2e778bee70899", "committedDate": "2023-05-18T10:33:57Z", "message": "arm: improve tests for vmulhq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vmulhq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_x_u8.c: Likewise.\n\n(cherry picked from commit 6c61fac9016891c5444be859b080872ce96b63cf)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "cb444c6df76b786b445163751e803281f62c61ce", "committedDate": "2023-05-18T10:33:57Z", "message": "arm: improve tests and fix vnegq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vnegq_f<mode>, mve_vnegq_s<mode>):\n\tFix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vnegq_f16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vnegq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_s8.c: Likewise.\n\t* gcc.target/arm/simd/mve-vneg.c: Update test.\n\t* gcc.target/arm/simd/mve-vshr.c: Likewise\n\n(cherry picked from commit c8cb7e062664e5db5969de4239be513dfd6ab1d1)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "a47749ddad831939c177fdd005fe5e6ce9f4499a", "committedDate": "2023-05-18T10:33:57Z", "message": "arm: improve tests and fix vclzq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (@mve_vclzq_s<mode>): Fix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_u8.c: Likewise.\n\t* gcc.target/arm/simd/mve-vclz.c: Update test.\n\n(cherry picked from commit 16452c63e10f7a44c70bec0216358ac405abfcf6)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "4036a318fc9ec66604cca5566d45fd7fe11f87cc", "committedDate": "2023-05-18T10:33:56Z", "message": "arm: improve tests and fix vclsq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vclsq_s<mode>): Fix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vclsq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks. Use extern\n\t\"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vclsq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_x_s8.c: Likewise.\n\n(cherry picked from commit dd4424ef898608321b60610c4f3c98737ace3680)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "c2dbbfbd9b118bfa26217d3de19d23c973300310", "committedDate": "2023-05-18T10:33:56Z", "message": "arm: fix mve intrinsics scan body tests for C++\n\nHi all,\n\nthis patch is to export the functions defined in these MVE tests as C\nso the body scan assembler works as expected also for our C++ tests.\n\nBest Regards and sorry for the regression!\n\n  Andrea\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_s16.c: Extern functions\n\tas \"C\".\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_u8.c: Likewise.\n\n(cherry picked from commit 8d4f007398bc3f8fea812fb8cff4d7d0556d12f1)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "537b7a344626ff8a77f1c8fb6626eaf6d5d36277", "committedDate": "2023-05-18T10:33:56Z", "message": "arm: [MVE] Add missing length=8 attribute\n\nI have noticed that the \"length\" \"8\" attribute is missing in a few\npatterns in mve.md.\n\n\tgcc/\n\t* config/arm/mve.md (mve_vabavq_p_<supf><mode>): Add length\n\tattribute.\n\t(mve_vqshluq_m_n_s<mode>): Likewise.\n\t(mve_vshlq_m_<supf><mode>): Likewise.\n\t(mve_vsriq_m_n_<supf><mode>): Likewise.\n\t(mve_vsubq_m_<supf><mode>): Likewise.\n\n(cherry picked from commit 330d665ce6dcc63ed0bd78d807e69bbfc55255b6)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "37601980933e867813f6c7ac112e1942ad40bd47", "committedDate": "2023-05-18T10:33:56Z", "message": "testsuite: [arm] Relax expected register names in MVE tests\n\nThese two tests have hardcoded q0 as destination/source of load/store\ninstructions, but this register is actually used only under\n-mfloat-abi=hard. When using -mfloat-abi=softfp, other registers\n(eg. q3) can be used to transfer function arguments from core\nregisters to MVE registers, making the expected regexp fail.\n\nThis small patch replaces q0 with q[0-7] to accept any 'q' register.\nIn several places where we had q[0-9]+, replace it with q[0-7] as MVE\nonly has q0-q7 registers.\n\nOK for trunk?\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/mve_load_memory_modes.c: Update expected\n\tregisters.\n\t* gcc.target/arm/mve/mve_store_memory_modes.c: Likewise.\n\n(cherry picked from commit c09663eabfb84ac56ddd8d44abcab3f4902c83bd)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "51df90d7fca8c96f35f71dc1bb4d2ecf7f820e70", "committedDate": "2023-05-18T10:33:56Z", "message": "arm: Add missing early clobber to MVE vrev64q_m patterns\n\nLike the non-predicated vrev64q patterns, mve_vrev64q_m_<supf><mode>\nand mve_vrev64q_m_f<mode> need an early clobber constraint, otherwise\nwe can generate an unpredictable instruction:\n\nWarning: 64-bit element size and same destination and source operands makes instruction UNPREDICTABLE\nwhen calling vrevq64_m* with the same first and second arguments.\n\nOK for trunk?\n\nThanks,\n\nChristophe\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vrev64q_m_<supf><mode>): Add early\n\tclobber.\n\t(mve_vrev64q_m_f<mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_s16-clobber.c: New test.\n\n(cherry picked from commit 06aa66af7d0dacc1b247d9e38175e789ef159191)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "3de0d4c749f2dd08bafc333cd4922d72757c09ee", "committedDate": "2023-05-18T10:33:55Z", "message": "arm: Fix MVE testsuite fallouts\n\nAfter the recent patches to improve / tidy up MVE tests and patterns,\na few more tests need to be updated (replacing spaces with tabs).\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/simd/mve-compare-1.c: Update.\n\t* gcc.target/arm/simd/mve-compare-scalar-1.c: Update.\n\t* gcc.target/arm/simd/mve-vabs.c: Update.\n\t* gcc.target/arm/simd/mve-vadd-1.c: Update.\n\t* gcc.target/arm/simd/mve-vadd-scalar-1.c: Update.\n\t* gcc.target/arm/simd/mve-vcmp.c: Update.\n\t* gcc.target/arm/simd/pr101325.c: Update.\n\n(cherry picked from commit ecc363971aeac52481d92de8b37521f6cc2d38e6)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "8baa54ba478ba980234d89aa51a0be84f0bb08bf", "committedDate": "2023-05-18T10:33:55Z", "message": "arm: improve tests for vsetq_lane*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u8.c: Likewise.\n\n(cherry picked from commit f2b54e5b796b00f0072b61f9cd6a964c66ead29b)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "92c75bf33c141661ae4b60258e0cd70b456b93e8", "committedDate": "2023-05-18T10:33:55Z", "message": "arm: improve tests for vrshlq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_s16.c: Improve tests.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_u8.c: Likewise.\n\n(cherry picked from commit 32be9d72f9c485068b5fb30ede0ab7572cdd1c21)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "8b7e613b9d99f040fe45dc717342d83501f945e4", "committedDate": "2023-05-18T10:33:55Z", "message": "arm: improve tests and fix vrmlaldavhaq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vrmlaldavhq_<supf>v4si,\n\tmve_vrmlaldavhaq_<supf>v4si): Fix spacing vs tabs.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_p_s32.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_p_u32.c: Likewise.\n\n(cherry picked from commit a59b9af355d69db7fa656c7a3bb6dd8e0d29f98b)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "77268ac037386d39aaa561fb749850bd8daa953c", "committedDate": "2023-05-18T10:33:55Z", "message": "arm: improve tests for vqsubq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s16.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s32.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s8.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u16.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u32.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u8.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s16.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s32.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s8.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u16.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u32.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u8.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s16.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s32.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_s8.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u16.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u32.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_n_u8.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_s16.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_s32.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_s8.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_u16.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_u32.c:\n\t* gcc.target/arm/mve/intrinsics/vqsubq_u8.c:\n\n(cherry picked from commit 329ccff3be53bfad4bb6aace2c77382099271a4a)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "321c5596a2674b59c195f741bb139c538a1f9d6d", "committedDate": "2023-05-18T10:33:55Z", "message": "arm: improve tests for vqrdmlashq_m*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s16.c:\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s32.c:\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s8.c:\n\n(cherry picked from commit 354172c5708888d5c6dfec10a0b334775fe9f1fe)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "374aefaae67489d3c8282bc9f75fa3fcf5a26bd1", "committedDate": "2023-05-18T10:33:55Z", "message": "arm: improve tests for vqrdmlahq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_n_s8.c: Likewise.\n\n(cherry picked from commit 5ea0ea55cd062b1a043ba6e30ee2c2e30f8dc2fc)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "82eb1588060b52652b6b884cf020433e09d8fef3", "committedDate": "2023-05-18T10:33:54Z", "message": "arm: improve tests for vqdmul*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s16.c: Improve tests.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_s32.c: Likewise.\n\n(cherry picked from commit 020708443d6bbb288f53da32faa2d76dbdb8d0dd)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "ec357ce4bce80544fca424549e25d58117849899", "committedDate": "2023-05-18T10:33:54Z", "message": "arm: improve tests for vqdmlahq_m*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s8.c: Likewise.\n\n(cherry picked from commit f974a7b3ecd0c3a0676dc7413af2e8faef005add)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "aa1c6b2a3c278a9425a8ae31553f03882c7588d8", "committedDate": "2023-05-18T10:33:54Z", "message": "arm: improve tests for vqaddq_m*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_u8.c: Likewise.\n\n(cherry picked from commit 7e8cf19eee2ec215ff6b714cbf4e6e150e6eb04a)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "06c2f5154960f8164fd3d3142ee7ca682b9c5fa4", "committedDate": "2023-05-18T10:33:54Z", "message": "arm: improve tests for vmlasq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_n_u8.c: Likewise.\n\n(cherry picked from commit 4e73978c92be03d54f81d047ad79102c0efcbc5b)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "fd2b43d3ba21d8b6fe271efff2db04d2c970696d", "committedDate": "2023-05-18T10:33:54Z", "message": "arm: improve tests and fix vmlaldavaxq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vmlaldavaq_<supf><mode>)\n\t(mve_vmlaldavaxq_s<mode>, mve_vmlaldavaxq_p_<supf><mode>): Fix\n\tspacing vs tabs.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s16.c: Improve tests.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_s32.c: Likewise.\n\n(cherry picked from commit 5a21c1451fc68c8d97e19aac62ed53fa0b803242)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "4cd5d4d335d86144994b0baf3b6674fcd8e6ab42", "committedDate": "2023-05-18T10:33:54Z", "message": "arm: improve tests for vmladavaq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s16.c: Improve tests.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s8.c: Likewise.\n\n(cherry picked from commit 69405ebb53323f5c32062b75ab7af304e7eb6656)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "31d6b46658c55827bb8f515e7bbf67955a576efa", "committedDate": "2023-05-18T10:33:53Z", "message": "arm: improve tests for viwdupq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u16.c: Improve tests.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u8.c: Likewise.\n\n(cherry picked from commit ce9dd996b9de7727e092769055931f07bc6f4e5c)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "b6314488b4d6fae84cab5d24e99f7f2d32d7091b", "committedDate": "2023-05-18T10:33:53Z", "message": "arm: improve tests for vhsubq_m*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u8.c: Likewise.\n\n(cherry picked from commit d63992a20ae196be73acc0098a957b6e11dbca53)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "cfc47e6e672764c4f80d426531444caafb8caa8b", "committedDate": "2023-05-18T10:33:53Z", "message": "arm: improve tests for vhaddq_m*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u8.c: Likewise.\n\n(cherry picked from commit 4b440ef5bc199a2a994aeb748b3a65d0c35cc4ed)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "c2d80e30cebfb6daaa84a62e505eeea8e344d2e9", "committedDate": "2023-05-18T10:33:53Z", "message": "arm: improve tests for vfmasq_m*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f32.c: Likewise.\n\n(cherry picked from commit 253efaac2d5e97b09bc841d6f85ff908de5760df)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "f47b54aaef92d589ee69211eb853c0da4212f733", "committedDate": "2023-05-18T10:33:53Z", "message": "arm: improve tests and fix vsubq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vsubq_n_f<mode>): Fix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vsubq_f16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vsubq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_u8.c: Likewise.\n\n(cherry picked from commit 9b8dc6379d600706d3ed790d3ef4c6b25678d289)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "58a9a52375634888d68b9078dfb21e628bfc5337", "committedDate": "2023-05-18T10:33:53Z", "message": "arm: improve tests for vmulq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vmulq_f16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vmulq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_u8.c: Likewise.\n\n(cherry picked from commit 49681b1d90920bd98b0cc51b2bb9f3fcaabc22c1)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "59e6d480c2c7324bedc3413328496a8bea09b611", "committedDate": "2023-05-18T10:33:52Z", "message": "arm: improve tests and fix vadd*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vaddlvq_p_<supf>v4si)\n\t(mve_vaddq_n_<supf><mode>, mve_vaddvaq_<supf><mode>)\n\t(mve_vaddlvaq_<supf>v4si, mve_vaddq_n_f<mode>)\n\t(mve_vaddlvaq_p_<supf>v4si, mve_vaddq<mode>, mve_vaddq_f<mode>):\n\tFix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_p_s32.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_u8.c: Likewise.\n\n(cherry picked from commit 78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "37d0faa2aa9925a04a81c54c026309ccb95fe8c5", "committedDate": "2023-05-18T10:33:52Z", "message": "arm: Add integer vector overloading of vsubq_x instrinsic\n\nIn the past we had only defined the vsubq_x generic overload of the\nvsubq_x_* intrinsics for float vector types.  This would cause them\nto fall back to the `__ARM_undef` failure state if they was called\nthrough the generic version.\nThis patch simply adds these overloads.\n\ngcc/ChangeLog:\n\n\t* config/arm/arm_mve.h (__arm_vsubq_x FP): New overloads.\n\t(__arm_vsubq_x Integer): New.\n\n(cherry picked from commit bf6b04c6baa12fccc0dad53d45ae808def34fb6c)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "79431d45e2c25dc8608c8ddc6d2798dbcb79650a", "committedDate": "2023-05-18T10:33:52Z", "message": "arm: Explicitly specify other float types for _Generic overloading [PR107515]\n\nThis patch adds explicit references to other float types\nto __ARM_mve_typeid in arm_mve.h.  Resolves PR 107515:\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=107515\n\ngcc/ChangeLog:\n\tPR target/107515\n\t* config/arm/arm_mve.h (__ARM_mve_typeid): Add float types.\n\n(cherry picked from commit 2fefb8931d566cc8a4cbba81601972b0d2002f95)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "bbdf67595a57b1b029cfe17a581efe42c242b6e4", "committedDate": "2023-05-18T10:33:52Z", "message": "arm: propagate fixed overloading of MVE intrinsic scalar parameters\n\nThis is a mechanical patch that propagates the change proposed in\nmy previous patch for vaddq[_m]_n\nacross all other polymorphic MVE intrinsic overloads of scalar types.\n\nThe find and Replace patterns used were:\n\ns/__ARM_mve_coerce\\(__p(\\d+), [u]?int(8|16|32|64)_t\\)\n/__ARM_mve_coerce3(p$1, int)/g\n\ns/__ARM_mve_coerce2\\(__p(\\d+), double\\)\n/__ARM_mve_coerce2(p$1, double)/g\n\ngcc/ChangeLog:\n\tPR target/96795\n\t* config/arm/arm_mve.h (__arm_vaddq): Fix Overloading.\n\t(__arm_vmulq): Likewise.\n\t(__arm_vcmpeqq): Likewise.\n\t(__arm_vcmpneq): Likewise.\n\t(__arm_vmaxnmavq): Likewise.\n\t(__arm_vmaxnmvq): Likewise.\n\t(__arm_vminnmavq): Likewise.\n\t(__arm_vsubq): Likewise.\n\t(__arm_vminnmvq): Likewise.\n\t(__arm_vrshlq): Likewise.\n\t(__arm_vqsubq): Likewise.\n\t(__arm_vqdmulltq): Likewise.\n\t(__arm_vqdmullbq): Likewise.\n\t(__arm_vqdmulhq): Likewise.\n\t(__arm_vqaddq): Likewise.\n\t(__arm_vhaddq): Likewise.\n\t(__arm_vhsubq): Likewise.\n\t(__arm_vqdmlashq): Likewise.\n\t(__arm_vqrdmlahq): Likewise.\n\t(__arm_vmlasq): Likewise.\n\t(__arm_vqdmlahq): Likewise.\n\t(__arm_vmaxnmavq_p): Likewise.\n\t(__arm_vmaxnmvq_p): Likewise.\n\t(__arm_vminnmavq_p): Likewise.\n\t(__arm_vminnmvq_p): Likewise.\n\t(__arm_vfmasq_m): Likewise.\n\t(__arm_vsetq_lane): Likewise.\n\t(__arm_vcmpneq_m): Likewise.\n\t(__arm_vhaddq_x): Likewise.\n\t(__arm_vhsubq_x): Likewise.\n\t(__arm_vqrdmlashq_m): Likewise.\n\t(__arm_vqdmlashq_m): Likewise.\n\t(__arm_vmlaldavaxq_p): Likewise.\n\t(__arm_vmlasq_m): Likewise.\n\t(__arm_vqdmulhq_m): Likewise.\n\t(__arm_vqdmulltq_m): Likewise.\n\t(__arm_viwdupq_m): Likewise.\n\t(__arm_viwdupq_u16): Likewise.\n\t(__arm_viwdupq_u32): Likewise.\n\t(__arm_viwdupq_u8): Likewise.\n\t(__arm_vdwdupq_m): Likewise.\n\t(__arm_vdwdupq_u16): Likewise.\n\t(__arm_vdwdupq_u32): Likewise.\n\t(__arm_vdwdupq_u8): Likewise.\n\t(__arm_vaddlvaq): Likewise.\n\t(__arm_vaddlvaq_p): Likewise.\n\t(__arm_vaddvaq): Likewise.\n\t(__arm_vaddvaq_p): Likewise.\n\t(__arm_vcmphiq_m): Likewise.\n\t(__arm_vmladavaq_p): Likewise.\n\t(__arm_vmladavaxq): Likewise.\n\t(__arm_vmlaldavaxq): Likewise.\n\t(__arm_vrmlaldavhaq_p): Likewise.\n\n(cherry picked from commit 31df339a50c30712c1e071d2b18f304b148a3165)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "7d3043505c770e96d5471edee2b97c8169f26316", "committedDate": "2023-05-18T10:33:52Z", "message": "arm: further fix overloading of MVE vaddq[_m]_n intrinsic\n\nIt was observed that in tests `vaddq_m_n_[s/u][8/16/32].c`, the _Generic\nresolution would fall back to the `__ARM_undef` failure state.\n\nThis is a regression since `dc39db873670bea8d8e655444387ceaa53a01a79` and\n`6bd4ce64eb48a72eca300cb52773e6101d646004`, but it previously wasn't\nidentified, because the tests were not checking for this kind of failure.\n\nThe above commits changed the definitions of the intrinsics from using\n`[u]int[8/16/32]_t` types for the scalar argument to using `int`. This\nallowed `int` to be supported in user code through the overloaded\n`#defines`, but seems to have broken the `[u]int[8/16/32]_t` types\n\nThe solution implemented by this patch is to explicitly use a new\n_Generic mapping from all the `[u]int[8/16/32]_t` types for int. With this\nchange, both `int` and `[u]int[8/16/32]_t` parameters are supported from\nuser code and are handled by the overloading mechanism correctly.\n\nNote that in these scalar cases it is safe to pass the raw p<n>, rather\nthan the typeof-ed __p<n>, because we are not at risk of the _Generics\nbeing exponentially expanded on the `n` scalar argument to an `_n`\nintrinsic. Using p<n> instead will give a more accurate error message\nto the user, should something be wrong with that argument.\n\ngcc/ChangeLog:\n\tPR target/96795\n\t* config/arm/arm_mve.h (__arm_vaddq_m_n_s8): Change types.\n\t(__arm_vaddq_m_n_s32): Likewise.\n\t(__arm_vaddq_m_n_s16): Likewise.\n\t(__arm_vaddq_m_n_u8): Likewise.\n\t(__arm_vaddq_m_n_u32): Likewise.\n\t(__arm_vaddq_m_n_u16): Likewise.\n\t(__arm_vaddq_m): Fix Overloading.\n\t(__ARM_mve_coerce3): New.\n\n(cherry picked from commit e0dd75fe90ef4cda94f431747d239d6cfcf5656f)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "8aa5cd69d89d18d056f1cc75a7400a6fdb1edef7", "committedDate": "2023-05-18T10:33:52Z", "message": "arm: improve tests and fix vabsq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vabsq_f<mode>): Fix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vabsq_f16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vabsq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_s8.c: Likewise.\n\n(cherry picked from commit ff2bf3dc61f453c2fe206cd8e9489300a1ca2763)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "328de4f103e919026129fd9232f6b159fc2a1936", "committedDate": "2023-05-18T10:33:51Z", "message": "arm: improve tests for vabdq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vabdq_f16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vabdq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_u8.c: Likewise.\n\n(cherry picked from commit c548e1b22363960b05b2c36257e677da920ea228)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "c67e3f7b05d6f8275af8c829d32c96932a7deba2", "committedDate": "2023-05-18T10:33:51Z", "message": "arm: improve tests for vabavq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_u8.c: Likewise.\n\n(cherry picked from commit 8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "0aad406016e84bd34f878be4d91230c0597dbf7a", "committedDate": "2023-05-18T10:33:51Z", "message": "arm: improve tests for vmax*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u8.c: Likewise.\n\n(cherry picked from commit 2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "65f3196a223dbd731ddb887a79681f57228375da", "committedDate": "2023-05-18T10:33:51Z", "message": "arm: improve tests for vmin*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vminaq_m_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vminaq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u8.c: Likewise.\n\n(cherry picked from commit d117647edc8fcae63abbdecbf38e9f22d0b1e3de)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "351cc920d8a75748f082340eb4291914a1f56afc", "committedDate": "2023-05-18T10:33:51Z", "message": "arm: improve tests and fix vcmp*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (@mve_vcmp<mve_cmp_op>q_<mode>): Fix\n\tspacing.\n\t* config/arm/arm_mve.h (__arm_vcmpgtq_m, __arm_vcmpleq_m)\n\t(__arm_vcmpltq_m, __arm_vcmpneq_m): Add missing defines.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_u8.c: Likewise.\n\n(cherry picked from commit 1fa5a44736062eeccd241ebeb1771bd77b7fd168)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "18c231714fd66ddafba0b4780f13d0c48104d3a1", "committedDate": "2023-05-18T10:33:51Z", "message": "arm: improve tests and fix vdupq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vdupq_n_f<mode>)\n\t(mve_vdupq_n_<supf><mode>, mve_vdupq_m_n_<supf><mode>)\n\t(mve_vdupq_m_n_f<mode>): Fix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_f16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_u8.c: Likewise.\n\n(cherry picked from commit 7827909fb2ffa3517ada8fae6e41873fb1cbe47a)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "f2477c0eabbb0b304dd5492805db7996579e00e3", "committedDate": "2023-05-18T10:33:50Z", "message": "arm: improve vidupq* tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u16.c: Improve tests.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u8.c: Likewise.\n\n(cherry picked from commit e9fe7b23b82942faffcdf4803eda4ade7b708a8a)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "a6cab55acb5f3ee201a294326c153dfdfbdccda1", "committedDate": "2023-05-18T10:33:50Z", "message": "arm: improve tests and fix vdwdupq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vdwdupq_m_wb_u<mode>_insn): Fix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u16.c : Improve test.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u16.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u16.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u16.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u16.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u8.c : Likewise.\n\n(cherry picked from commit d5cc5a6d2e3726d2075bb2a9379c4da850947b6d)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "96fcd2c47ab738adcca92dc868bc49ca76f957c7", "committedDate": "2023-05-18T10:33:50Z", "message": "arm: improve tests and fix vddupq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vddupq_u<mode>_insn): Fix 'vddup.u'\n\tspacing.\n\t(mve_vddupq_m_wb_u<mode>_insn): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_n_u16.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u16.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u16.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u8.c : Likewise.\n\n(cherry picked from commit f3f4295ad19f205862fe21ab49db090e7d295557)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "4aa7b4930279690ca482f4886ee6a2244ccba98d", "committedDate": "2023-05-18T10:33:50Z", "message": "arm: fix 'vmsr' spacing and register capitalization\n\ngcc/ChangeLog:\n\n\t* config/arm/vfp.md (*thumb2_movhi_vfp, *thumb2_movhi_fp16): Fix\n\t'vmsr' spacing and reg capitalization.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_f32.c:\n\tUpdate test.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_s32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_u32.c:\n\tLikewise.\n\n(cherry picked from commit b9496f8411d1058539d00f716c21397efa43022d)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "015848f7014e797ae8f3b044dcbec6186000cf90", "committedDate": "2023-05-18T10:33:50Z", "message": "arm: improve vcreateq* tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vcreateq_f16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u8.c: Likewise.\n\n(cherry picked from commit 9a79b522e0663a202a288db56ebcbdcdb48bdaca)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "4a9618035a4648d901b53c67f8f8bb5e5b624bc8", "committedDate": "2023-05-18T00:19:59Z", "message": "Daily bump.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "8618aed89650bbeec450191aecab3037124851b1", "committedDate": "2023-05-17T19:30:09Z", "message": "c++: Don't try to initialize zero width bitfields in zero initialization [PR109868]\n\nMy GCC 12 change to avoid removing zero-sized bitfields as they are\nimportant for ABI and are needed for layout compatibility traits\napparently causes zero sized bitfields to be initialized in the IL,\nwhich at least in 13+ results in ICEs in the ranger which is upset\nabout zero precision types.\n\nI think we could even avoid initializing other unnamed bitfields, but\nunfortunately !CONSTRUCTOR_NO_CLEARING doesn't mean in the middle-end\nclearing of padding bits and until we have some new flag that represents\nthe request to clear padding bits, I think it is better to keep zeroing\nnon-zero sized unnamed bitfields.\n\nIn addition to skipping those fields, I have changed the logic how\nUNION_TYPEs are handled, the current code was a little bit weird in that\ne.g. if first non-static data member had error_mark_node type, we'd happily\nzero initialize the second non-static data member, etc.\n\n2023-05-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/109868\n\t* init.cc (build_zero_init_1): Don't initialize zero-width bitfields.\n\tFor unions only initialize the first FIELD_DECL.\n\n\t* g++.dg/init/pr109868.C: New test.\n\n(cherry picked from commit 78327cf06e6b65fc9c614622c98f6a3f3bfb7784)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "6187750aa83aef378fe214ed7d804e7d0df25ab1", "committedDate": "2023-05-17T00:20:26Z", "message": "Daily bump.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "e6baa800897728fac40fc7153facaf3c7541ff3f", "committedDate": "2023-05-16T15:10:03Z", "message": "libstdc++: Fix src/c++17/memory_resource for H8 targets [PR107801]\n\nThis fixes compilation failures for H8 multilibs. For the normal\nmultilib (ILP16L32?), the chunk struct does not have the expected size,\nbecause uint32_t is type long and has alignment 4 (by default). This\nforces sizeof(chunk) to be 12 instead of the expected 10. We can fix\nthat by using bitset::size_type instead of uint32_t, so that we only use\na 16-bit size when size_t and pointers are 16-bit types.\n\nFor the IL32P16 multilibs that use -mint32, int is wider than size_t\nand so arithmetic expressions involving size_t promote to int. This\nmeans we need some explicit casts back to size_t.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/107801\n\t* src/c++17/memory_resource.cc (chunk::_M_bytes): Change type\n\tfrom uint32_t to bitset::size_type. Adjust static assertion.\n\t(__pool_resource::_Pool::replenish): Cast to size_t after\n\tmultiplication instead of before.\n\t(__pool_resource::_M_alloc_pools): Ensure both arguments to\n\tstd::max have type size_t.\n\n(cherry picked from commit 75e562d2c4303d3918be9d1563284b0c580c5e45)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "b8789d2b222c50c5331b530a3359563d16208a5e", "committedDate": "2023-05-16T00:21:27Z", "message": "Daily bump.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "396a4e76afec30d2461638f569cae18955eb4ad2", "committedDate": "2023-05-15T15:12:18Z", "message": "c++: local class in nested generic lambda [PR109241]\n\nIn this testcase, the tree walk to look for bare parameter packs was\nconfused by finding a type with no TREE_BINFO.  But it should be fine that\nit's unset; we already checked for unexpanded packs at parse time.\n\nI also tried doing the partial instantiation of the local class, which is\nprobably the long-term direction we want to go, but for stage 4 let's go\nwith this safer change.\n\n\tPR c++/109241\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (find_parameter_packs_r): Handle null TREE_BINFO.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/lambda-generic-local-class2.C: New test.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "9410a52061ffe4a9e6ef8fd82f9c21d1874ff589", "committedDate": "2023-05-15T08:23:38Z", "message": "testsuite/108776 - avoid c-c++-common/rotate-11.c FAIL\n\nOn the branch ranger isn't powerful enough to handle some cases\nappearing with logical-op-non-short-circuit evaluating to false\ncausing FAILs of the testcase for ppc64le and s390x.  The following\nfoces logical-op-non-short-circuit to true for this testcase\non the branch.\n\n\tPR testsuite/108776\n\t* c-c++-common/rotate-11.c: Add --param logical-op-non-short-circuit=1.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "6abe9843bffb9262438ef9009f323c19f9d4c766", "committedDate": "2023-05-15T08:22:50Z", "message": "Fix gcc.dg/vect/pr108950.c\n\nThe following puts the dg-require-effective-target properly after\nthe dg-do.\n\n\t* gcc.dg/vect/pr108950.c: Re-order dg-require-effective-target\n\tand dg-do.\n\n(cherry picked from commit 66e268eb063de32b232f6f006048e6f7bae6268f)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "efcca6481eab1853b646095af642076faa62d3a5", "committedDate": "2023-05-15T01:14:37Z", "message": "x86: Add a new option -mdaz-ftz to enable FTZ and DAZ flags in MXCSR.\n\n    if (mdaz-ftz)\n      link crtfastmath.o\n    else if ((Ofast || ffast-math || funsafe-math-optimizations)\n             && !mno-daz-ftz)\n      link crtfastmath.o\n    else\n      Don't link crtfastmath.o\n\ngcc/ChangeLog:\n\n\t* config/i386/cygwin.h (ENDFILE_SPEC): Link crtfastmath.o\n\twhenever -mdaz-ftz is specified. Don't link crtfastmath.o\n\twhen -mno-daz-ftz is specified.\n\t* config/i386/darwin.h (ENDFILE_SPEC): Ditto.\n\t* config/i386/gnu-user-common.h\n\t(GNU_USER_TARGET_MATHFILE_SPEC): Ditto.\n\t* config/i386/mingw32.h (ENDFILE_SPEC): Ditto.\n\t* config/i386/i386.opt (mdaz-ftz): New option.\n\t* doc/invoke.texi (x86 options): Document mftz-daz.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "ecf9ea59d8fcec48da6043c07db3f25b3151ab84", "committedDate": "2023-05-15T00:21:20Z", "message": "Daily bump.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "b069462ecc7a7671d7c2807dd17185612def3b05", "committedDate": "2023-05-14T00:20:45Z", "message": "Daily bump.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "0bfba6442264af83382c26f60286bd33c901178a", "committedDate": "2023-05-13T00:20:39Z", "message": "Daily bump.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "866beb0a04d7e5ad21f2d7b5c7acca2307f38817", "committedDate": "2023-05-12T00:22:32Z", "message": "Daily bump.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "52b222ac0a48f5061f1f3cfa0c1f4c418f42267d", "committedDate": "2023-05-11T16:19:42Z", "message": "syscall: add prlimit\n\nAs of https://go.dev/cl/476695 golang.org/x/sys/unix can call\nsyscall.prlimit, so we need such a function in libgo.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "16a76499f916b5b6d11bccc03cc0d16b2b1ee31b", "committedDate": "2023-05-11T08:48:27Z", "message": "libstdc++: Fix std::any pretty printer\n\nThe recent changes to FilteringTypePrinter affect the result of\ngdb.lookup_type('std::string') in StdExpAnyPrinter, causing it to always\nreturn the std::__cxx11::basic_string specialization. This then causes a\ngdb.error exception when trying to lookup the std::any manager type for\na specialization using that string, but that manager was never\ninstantiated in the program. This causes FAILs when running the tests\nwith -D_GLIBCXX_USE_CXX11_ABI=0:\n\nFAIL: libstdc++-prettyprinters/libfundts.cc print as\nFAIL: libstdc++-prettyprinters/libfundts.cc print as\n\nThe ugly solution used in this patch is to repeat the lookup for every\ntype that std::string could be a typedef for, and hope it only works for\none of them.\n\nlibstdc++-v3/ChangeLog:\n\n\t* python/libstdcxx/v6/printers.py (StdExpAnyPrinter): Make\n\texpansion of std::string in manager name more robust.\n\n(cherry picked from commit 3c54805d03ac1bcc3d8547ffb5e6c4e1f301a7a2)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "896f43215ec8822cbcaee372009ee6768880b3cd", "committedDate": "2023-05-11T00:20:19Z", "message": "Daily bump.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "5f803e68beee9f71c12c112ccda872997919f9cc", "committedDate": "2023-05-10T13:50:34Z", "message": "Avoid g++.dg/torture/pr106922.C FAIL with the pre-C++11 ABI\n\nThe following forces the g++.dg/torture/pr106922.C testcase to use\nthe C++11 libstdc++ ABI and checks whether that worked.\n\ngcc/testsuite/\n\t* g++.dg/torture/pr106922.C: Force _GLIBCXX_USE_CXX11_ABI to 1.\n\n(cherry picked from commit a056a9868e6ecab24b0b7e4e12e846097b8c8fb0)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "dee018e3ad66fa304dcce013b0a30067171f43d9", "committedDate": "2023-05-10T00:22:01Z", "message": "Daily bump.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "0069ce6631880776a44fb8408c6428c0812285cf", "committedDate": "2023-05-09T19:57:50Z", "message": "libffi: fix handling of homogeneous float128 structs (#689)\n\nIf there is a homogeneous struct with float128 members, they should be\ncopied to vector register save area. The current code incorrectly copies\nonly the value of the first member, not increasing the pointer with each\niteration. Fix this.\n\nMerged from upstream libffi commit: 464b4b66e3cf3b5489e730c1466ee1bf825560e0\n\n2023-05-03  Dan Hor\u00e1k <dan@danny.cz>\n\nlibffi/\n\tPR libffi/109447\n\t* src/powerpc/ffi_linux64.c (ffi_prep_args64): Update arg.f128 pointer.\n\n(cherry picked from commit 043550bceea7881163bba5d8a0486bb100a05809)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "56da68414b5b5f0124cac29756c88710e5752762", "committedDate": "2023-05-09T12:30:29Z", "message": "c++: NTTP constraint depending on outer parms [PR109160]\n\nHere we're crashing during satisfaction for the NTTP 'C<B> auto V'\nultimately because convert_template_argument / unify don't pass all\nouter template arguments to do_auto_deduction, and during satisfaction\nwe need to know all arguments.  While these callers do pass some outer\narguments, they are only sufficient to properly substitute the\n(level-lowered) 'auto' and are not necessarily the entire set.\n\nFortunately it seems these callers have access to the full set of outer\narguments via convert_template_argument's 'in_decl' parameter and\nunify's 'tparms' parameter.  So this patch adds a new parameter to\ndo_auto_deduction, used only during adc_unify deduction, through which\nthese callers can pass the enclosing (partially instantiated) template\nand from which do_auto_deduction can obtain _all_ outer template\narguments for sake of satisfaction.\n\nThis patch also ensures that the 'in_decl' argument passed to\ncoerce_template_parms is always a TEMPLATE_DECL, which in turn allows us\nto pass it as-is to do_auto_deduction; the only coerce_template_parms\ncaller that needed adjustment was tsubst_decl it seems.\n\n\tPR c++/109160\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (do_auto_deduction): Add defaulted tmpl parameter.\n\t* pt.cc (convert_template_argument): Pass 'in_decl' as 'tmpl' to\n\tdo_auto_deduction.\n\t(tsubst_decl) <case VAR_/TYPE_DECL>: Pass 'tmpl' instead of 't' as\n\t'in_decl' to coerce_template_parms.\n\t(unify) <case TEMPLATE_PARM_INDEX>: Pass TPARMS_PRIMARY_TEMPLATE\n\tas 'tmpl' to do_auto_deduction.\n\t(do_auto_deduction): Document default arguments.  Rename local\n\tvariable 'tmpl' to 'ctmpl'.  Use 'tmpl' to obtain a full set of\n\ttemplate arguments for satisfaction in the adc_unify case.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-placeholder12.C: New test.\n\n(cherry picked from commit a5de246535db1b4fdc61287f27de0fdd074fc4b3)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "7408a0b93e6f6b3ce9b6be17bb9b5d2307f5ecf1", "committedDate": "2023-05-09T10:52:20Z", "message": "testsuite: Add further testcase for already fixed PR [PR109778]\n\nI came up with a testcase which reproduces all the way to r10-7469.\nLTO to avoid early inlining it, so that ccp handles rotates and not\nshifts before they are turned into rotates.\n\n2023-05-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/109778\n\t* gcc.dg/lto/pr109778_0.c: New test.\n\t* gcc.dg/lto/pr109778_1.c: New file.\n\n(cherry picked from commit c2cf2dc988eb93551fa1c01d3f8d73ef21f39dc5)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "2835feb9c29de9167c7af19209065357899b808d", "committedDate": "2023-05-09T10:52:01Z", "message": "tree-ssa-ccp, wide-int: Fix up handling of [LR]ROTATE_EXPR in bitwise ccp [PR109778]\n\nThe following testcase is miscompiled, because bitwise ccp2 handles\na rotate with a signed type incorrectly.\nSeems tree-ssa-ccp.cc has the only callers of wi::[lr]rotate with 3\narguments, all other callers just rotate in the right precision and\nI think work correctly.  ccp works with widest_ints and so rotations\nby the excessive precision certainly don't match what it wants\nwhen it sees a rotate in some specific bitsize.  Still, if it is\nunsigned rotate and the widest_int is zero extended from width,\nthe functions perform left shift and logical right shift on the value\nand then at the end zero extend the result of left shift and uselessly\nalso the result of logical right shift and return | of that.\nOn the testcase we the signed char rrotate by 4 argument is\nCONSTANT -75 i.e. 0xffffffff....fffffb5 with mask 2.\nThe mask is correctly rotated to 0x20, but because the 8-bit constant\nis sign extended to 192-bit one, the logical right shift by 4 doesn't\nyield expected 0xb, but gives 0xfffffffffff....ffffb, and then\nreturn wi::zext (left, width) | wi::zext (right, width); where left is\n0xfffffff....fb50, so we return 0xfb instead of the expected\n0x5b.\n\nThe following patch fixes that by doing the zero extension in case of\nthe right variable before doing wi::lrshift rather than after it.\n\nAlso, wi::[lr]rotate widht width < precision always zero extends\nthe result.  I'm afraid it can't do better because it doesn't know\nif it is done for an unsigned or signed type, but the caller in this\ncase knows that very well, so I've done the extension based on sgn\nin the caller.  E.g. 0x5b rotated right (or left) by 4 with width 8\npreviously gave 0xb5, but sgn == SIGNED in widest_int it should be\n0xffffffff....fffb5 instead.\n\n2023-05-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/109778\n\t* wide-int.h (wi::lrotate, wi::rrotate): Call wi::lrshift on\n\twi::zext (x, width) rather than x if width != precision, rather\n\tthan using wi::zext (right, width) after the shift.\n\t* tree-ssa-ccp.cc (bit_value_binop): Call wi::ext on the results\n\tof wi::lrotate or wi::rrotate.\n\n\t* gcc.c-torture/execute/pr109778.c: New test.\n\n(cherry picked from commit a8302d2a4669984c7c287d12ef5b37cde6699c80)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "a4308f9d432a108026d6ae8ad99d40a52eea341f", "committedDate": "2023-05-09T06:42:10Z", "message": "Fix ICE related to implicit access attributes for VLA arguments [PR105660]\n\nWhen constructing the specifier string when merging an access attribute\nthat encodes information about VLA arguments, the string was constructed\nin random order by iterating through a hash table. Fix this by iterating\nthough the list of arguments.\n\ngcc/c-family/Changelog:\n\tPR c/105660\n\t* c-attribs.cc (append_access_attr): Use order of arguments when\n\tconstruction string.\n\t(append_access_attr_idxs): Rename and make static.\n\t* c-warn.cc (warn_parm_array_mismatch): Add assertion.\n\ngcc/testsuite/ChangeLog:\n\tPR c/105660\n\t* gcc.dg/pr105660-1.c: New test.\n\t* gcc.dg/pr105660-2.c: New test.\n\n(cherry picked from commit 3057d7928c0dbc78dbf748c9621ccd102e06beee)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "4ea5fe9722324dc5788e84e42e47d8bdbdd21410", "committedDate": "2023-05-09T05:17:06Z", "message": "rs6000: Guard power9-vector for vsx_scalar_cmp_exp_qp_* [PR108758]\n\n__builtin_vsx_scalar_cmp_exp_qp_{eq,gt,lt,unordered} used\nto be guarded with condition TARGET_P9_VECTOR before new\nbif framework was introduced (r12-5752-gd08236359eb229),\nsince r12-5752 they are placed under stanza ieee128-hw,\nthat is to check condition TARGET_FLOAT128_HW, it caused\ntest case float128-cmp2-runnable.c to fail at -m32 as the\ncondition TARGET_FLOAT128_HW isn't satisified with -m32.\n\nBy checking the commit history, I didn't see any notes on\nwhy this condition change on them was made, so this patch\nis to move these bifs from stanza ieee128-hw to stanza\npower9-vector as before.\n\n\tPR target/108758\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000-builtins.def\n\t(__builtin_vsx_scalar_cmp_exp_qp_eq, __builtin_vsx_scalar_cmp_exp_qp_gt\n\t__builtin_vsx_scalar_cmp_exp_qp_lt,\n\t__builtin_vsx_scalar_cmp_exp_qp_unordered): Move from stanza ieee128-hw\n\tto power9-vector.\n\n(cherry picked from commit 33a44e3aa81f9fdf8f6b87018abd4c664e545b53)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "ce5c5fe9953bc0acdd563b78db8689dd4d9b7b07", "committedDate": "2023-05-09T05:17:06Z", "message": "rs6000: Fix predicate for const vector in sldoi_to_mov [PR109069]\n\nAs PR109069 shows, commit r12-6537-g080a06fcb076b3 which\nintroduces define_insn_and_split sldoi_to_mov adopts\neasy_vector_constant for const vector of interest, but it's\nwrong since predicate easy_vector_constant doesn't guarantee\neach byte in the const vector is the same.  One counter\nexample is the const vector in pr109069-1.c.  This patch is\nto introduce new predicate const_vector_each_byte_same to\nensure all bytes in the given const vector are the same by\nconsidering both int and float, meanwhile for the constants\nwhich don't meet easy_vector_constant we need to gen a move\ninstead of just a set, and uses VECTOR_MEM_ALTIVEC_OR_VSX_P\nrather than VECTOR_UNIT_ALTIVEC_OR_VSX_P for V2DImode support\nunder VSX since vector long long type of vec_sld is guarded\nunder stanza vsx.\n\n\tPR target/109069\n\ngcc/ChangeLog:\n\n\t* config/rs6000/altivec.md (sldoi_to_mov<mode>): Replace predicate\n\teasy_vector_constant with const_vector_each_byte_same, add\n\thandlings in preparation for !easy_vector_constant, and update\n\tVECTOR_UNIT_ALTIVEC_OR_VSX_P with VECTOR_MEM_ALTIVEC_OR_VSX_P.\n\t* config/rs6000/predicates.md (const_vector_each_byte_same): New\n\tpredicate.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr109069-1.c: New test.\n\t* gcc.target/powerpc/pr109069-2-run.c: New test.\n\t* gcc.target/powerpc/pr109069-2.c: New test.\n\t* gcc.target/powerpc/pr109069-2.h: New test.\n\n(cherry picked from commit fd75f6ae5625f087980ff4a7e76cc6284cfe5a3e)", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "8b43834d069183e14c15909e144d870c39b74028", "committedDate": "2023-05-09T03:51:18Z", "message": "c++: non-templated friends [PR105852]\n\nThe previous patch for 105852 avoids copying DECL_TEMPLATE_INFO from a\nnon-templated friend, but it really shouldn't have it in the first place.\n\n\tPR c++/106740\n\tPR c++/105852\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (duplicate_decls): Change non-templated friend\n\tcheck to an assert.\n\t* pt.cc\t(tsubst_function_decl): Don't set DECL_TEMPLATE_INFO\n\ton non-templated friends.\n\t(tsubst_friend_function): Adjust.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/friend78.C: New test.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "72a7710d886fd5b5a2697af4010e6dbbe874fdaf", "committedDate": "2023-05-09T00:20:09Z", "message": "Daily bump.", "chatglm2-6b": "\"Internal Server Error\""}}, {"node": {"oid": "b2e2daf406a5a05103fea359a74ed491f28fc8fa", "committedDate": "2023-05-08T12:30:38Z", "message": "Bump BASE-VER\n\n\t* BASE-VER: Bump to 12.3.1.", "chatglm2-6b": "\"Internal Server Error\""}}]}