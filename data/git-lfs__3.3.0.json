{"main": [{"commit_oid": "7bf4ebbf4b080d82d5091dc12583283da58b31d5", "commit_date": "2023-10-17T20:14:59Z", "commit_message": "Merge pull request #5550 from chrisd8088/simplify-standalone-lookup\n\nRetrieve endpoint URL only once when checking standalone transfer adapter configurations", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2ecc5533e1af87579cc71422279dcf206376bfa4", "commit_date": "2023-10-17T17:55:16Z", "commit_message": "tq/manifest.go: lookup standalone endpoint once\n\nThe findStandaloneTransfer() function of the \"tq\" package was updated\nin commit 28f9b73d2f2bc529ce4385d372ab900e3763b854 of PR #3905 to\ndetermine whether to use the built-in file standalone transfer adapter\nbased on the actual endpoint URL, taking into account settings like\n\"lfs.url\" which override the endpoint URL we would otherwise construct\nfrom the current remote's URL.  However, the code still checked the\n\"lfs.<url>.standaloneTransferAgent\" setting using the URL constructed\nfrom the remote's URL, and so called both the Endpoint() and\nRemoteEndpoint() methods of the EndpointFinder interface.\n\nThen in commit 594f8e386cce3441e06c9094ab5e251f0e07ca1f of PR #4446,\nwhen the pure SSH transfer protocol was introduced, the call to\nthe RemoteEndpoint() method was replaced with Endpoint(), which was\ndone with the intent that it would honour \"lfs.url\" settings as well.\n\nHowever, this resulted in duplicate calls to Endpoint(), so we can\nremove one of them now.\n\nNote that the change in commit 594f8e386cce3441e06c9094ab5e251f0e07ca1f\nof PR #4446 implies that the URL used when looking for\n\"lfs.<url>.standaloneTransferAgent\" settings is the URL as fully\ndetermined by settings such as \"lfs.url\" that override what\nwould be otherwise constructed based on the remote's URL.  We\nexpect to add documentation to this effect in a subsequent PR.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1d581ebdd9b4d0c410909d1a4e50313bf78aec01", "commit_date": "2023-10-13T18:33:12Z", "commit_message": "Merge pull request #5541 from git-lfs/dependabot/go_modules/golang.org/x/net-0.17.0\n\nbuild(deps): bump golang.org/x/net from 0.7.0 to 0.17.0", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "03ec1a70f3287a7fe41305a65247a8213befb425", "commit_date": "2023-10-11T23:22:57Z", "commit_message": "build(deps): bump golang.org/x/net from 0.7.0 to 0.17.0\n\nBumps [golang.org/x/net](https://github.com/golang/net) from 0.7.0 to 0.17.0.\n- [Commits](https://github.com/golang/net/compare/v0.7.0...v0.17.0)\n\n---\nupdated-dependencies:\n- dependency-name: golang.org/x/net\n  dependency-type: direct:production\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "63d04e26c745708c954b139a40f3cca9942c150f", "commit_date": "2023-10-11T13:14:56Z", "commit_message": "Merge pull request #5537 from KyleFromKitware/fix-ssh-multiplex-deadlock\n\nssh: Specifically designate a master multiplex connection", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "448b0c4e8814eca1ea2720c665038568d8d2828d", "commit_date": "2023-10-09T18:24:41Z", "commit_message": "ssh: Specifically designate a master multiplex connection\n\nSSHTransfer.Shutdown() was attempting to first shut down the first\nconnection it created (which happened to be the master connection),\nbut this deadlocked because the master connection was waiting for\nthe extra connections to shut down. Designate the first connection\nas the master connection, make sure that it truly is the master\nconnection, and shut it down after shutting down all extra\nconnections.\n\nIssue: #5535", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "196691687bb4c56293db731a5bb11a863e8050f4", "commit_date": "2023-10-04T21:20:15Z", "commit_message": "Merge pull request #5538 from chrisd8088/lock-id-path-refspec\n\nInclude reference specifier in unlock requests", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d003b9dd95d1a36cc0f80494b8890844f973547e", "commit_date": "2023-10-04T17:26:45Z", "commit_message": "t/t-unlock.sh: test unlock by path without refspec\n\nAs described in a previous commit in this PR, since PR #2773 the\nlfstest-gitserver.go test server can mimic a Git LFS locking API\nservice which either does or does not read a \"refspec\" query parameter\nand use it to filter results when searching for a lock matching a specific\nfile path.\n\nFour tests of the \"git lfs unlock\" command were added or modified in\nthat PR which all require the test server to check for a \"refspec\" query\nparameter when responding to a request to list matching locks.  These\ntests signal the test server to perform the \"refspec\" argument check\nby using test repository names that contain the special keyword suffix\n\"branch-required\".  (However, these tests did not exercise that test\nserver behaviour because they all passed the --id option to the \"git lfs\nunlock\" command, thus causing it to make no lock listing requests to\nthe test server.)\n\nIn the previous commit in this PR where we described these tests and\ntheir history, we corrected them and added two more of the same kind\nwhich also require the test server to filter search results using\nthe \"refspec\" query parameter.\n\nHowever, no tests were added in PR #2773 which explicitly test the\n\"git lfs unlock\" command against an API service that did not require\nthe \"refspec\" query parameter when searching for matching locks.  Some\ntests, such as the \"unlocking a lock (--json)\" test, do so implicitly,\nbut none check all aspects of the expected behaviour in this case.\n\nWe therefore add a pair of tests, the first of which simply performs a\n\"git lfs unlock\" command using a file path argument and confirming\nit succeeds when the test server emulates an older API service that\ndoes not check the \"refspec\" query argument in lock listing requests.\nThis test is akin to others, like the \"unlocking a lock (--json)\" test,\nbut explicitly named to make its intent clear.\n\nThe second new test we add checks that a \"git lfs unlock\" command which\nuses a file path argument succeeds and removes a lock even if it passes\na \"refspec\" query parameter to the server that does not match the ref\nname sent in the original lock request, so long as the test server\nis emulating an older API service and does not recognize or check the\n\"refspec\" argument in lock listing requests.  Note that this new\n\"unlocking a lock by path with bad ref without a ref required\" test\nis similar to the \"unlocking a lock by path with bad ref\" test, but\nbecause it configures the test server to behave like an older API\nservice, it succeeds in removing the lock, whereas the \"unlocking a\nlock by path with bad ref\" test expects to not remove the lock due to\nthe mismatched refs in its lock and unlock requests.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ff1733ef41dbf3614c3c623678801372ad027f0", "commit_date": "2023-10-04T16:03:35Z", "commit_message": "t/t-unlock.sh: test unlock by path with refspec\n\nIn PR #2773 the option to include a Git reference specification in\nGit LFS locking API requests was introduced, and several tests were\nadded to the t/t-unlock.sh test suite and others modified so as to\nhelp validate this behaviour.  As well, the lfstest-gitserver.go\ntest server was altered to check for an expected \"refspec\" query parameter\nin lock listing requests, but only if the test repository name had the\ntrailing suffix \"branch-required\".  This permitted the test server to\nmimic existing production services whose APIs did not expect or check\nthe \"refspec\" query parameter, but also emulate those services which\nchose to fully implement the new API feature and only list locks\nmatching the given \"refspec\".\n\nFour tests of the \"git lfs unlock\" command were added or changed in\norder to check the command's behaviour when support for the \"refspec\"\nargument was added in PR #2773.  When the --id option is not used\nwith this command, it makes an initial GET request to the Git LFS\nlocking API to retrieve the lock's ID, if any, based on the file\npath provided to the command.  With the changes in the PR, the current\n\"refspec\" was also sent to the API to be used in the lookup operation.\n\nIn commit 257df970f07900bd1a6b79619ee553afce674b33, the \"unlocking a\nlock by path\" test was revised into the \"unlocking a lock by path with\ngood ref\" test, and the \"unlocking a lock by path with tracked ref\",\n\"unlocking a lock by path with bad ref\", and \"unlocking a lock by id\nwith bad ref\" tests were added.  All of these tests used test repository\nnames with the \"branch-required\" suffix so as to cause the test API\nservice to require a \"refspec\" query parameter in client GET requests,\nand check that its value matched the branch name extracted from the\ntest repository name as the word which preceded the suffix (e.g., \"main\"\nin the test repository name \"unlock-by-path-main-branch-required\").\n\nBut then in commit 9027b941e8ec9e053324a73a14d1bc362009f9b8 of the\nsame PR, the three \"unlocking a lock by path*\" tests were all changed\nto actually provide a lock ID with the --id argument to the \"git lfs\nunlock\" command.  The test names and test repository names were not\nupdated, though.  This change meant that the \"unlocking a lock by path\nwith bad ref\" test was identical to the \"unlocking a lock by id with\nbad ref\" test, except for its names; it also meant that no tests\nvalidated the command's behaviour when only a file path was provided\non the command line, not a lock ID, and the API service was configured\nto require a \"refspec\".\n\nThe consequence of this omission was that no tests detected the fact\nthat the \"git lfs unlock\" command did not send a \"refspec\" argument\nto the API service even when attempting to look up a lock by file path.\n\nAs this oversight in the command's implementation has now been corrected\nin a prior commit in this PR, we want to ensure that our test suite\nvalidates that the command operates successfully with both older API\nservices, which do not filter on \"refspec\" query parameters when searching\nfor locks, and those which do.\n\nAs a first step, we change the \"unlocking a lock by path with good ref\"\nand \"unlocking a lock by path with tracked ref\" tests to actually use a\nfile path rather than an ID in their \"git lfs unlock\" commands, while\nreplicating them as \"unlocking a lock by id*\" tests which continue to\nuse the --id option.  We also alter the \"unlocking a lock by path\nwith bad ref\" test to actually use a file path as well.  With these\nchanges we now have a set of tests which confirm that the \"git lfs\nunlock\" command, when supplied with a file path and not a lock ID,\nsends a \"refspec\" query parameter in its lock listing request, and\neither succeeds or fails depending on whether the \"refspec\" matches\nthat of the lock recorded by the API service.\n\nNote that without the fix to the lockIdFromPath() method of the Client\nstructure in the \"locking\" package from the prior commit in this PR,\nour new \"unlocking a lock by path with good ref\", \"unlocking a lock by\npath with tracked ref\", and \"unlocking a lock by path with bad ref\"\ntests all fail.  Previously the tests with these names all succeeded\ndespite the problem in the \"git lfs unlock\" command because the tests\nall used the command with the --id option and so did not exercise the\nincorrect implementation of the file path option.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ed16927451b626e4c8c91e4015a2507aaab2e971", "commit_date": "2023-10-04T16:03:11Z", "commit_message": "Add Refspec value to lockIdFromPath request\n\nCurrently all locking calls send refspec value to server except lockIdFromPath. This is inconsistent behaviour for server side hooks and services that prevents server side logic from operating on \"per branch basis\", specifically on unlocking batch requests.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6fc7893e4205b5bfcdbfd7065b269df15fc0f6d0", "commit_date": "2023-10-04T06:12:58Z", "commit_message": "Merge pull request #5530 from git-lfs/dependabot/github_actions/actions/checkout-4\n\nbuild(deps): bump actions/checkout from 3 to 4", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "100ff6bbabd7057ddd9dcb76477bdb866810ddf7", "commit_date": "2023-10-04T04:52:21Z", "commit_message": "Merge branch 'main' into dependabot/github_actions/actions/checkout-4", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8cdea89e927c6282ad9896e8b47693465cce22c7", "commit_date": "2023-10-04T04:52:03Z", "commit_message": "Merge pull request #5529 from git-lfs/dependabot/github_actions/docker/setup-qemu-action-3\n\nbuild(deps): bump docker/setup-qemu-action from 2 to 3", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3713f3e14893953b6d52310ad7e4d3e50d9eea8a", "commit_date": "2023-10-03T23:54:12Z", "commit_message": "Merge branch 'main' into dependabot/github_actions/docker/setup-qemu-action-3", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8395df38180211d8921f9d43d9650a1992b2cb4", "commit_date": "2023-10-03T18:50:57Z", "commit_message": "Merge pull request #5534 from KyleFromKitware/transfer-copy-id-token\n\ntq/transfer: copy Id and Token", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "37d365034b1512661782325df4cab8405c61a980", "commit_date": "2023-10-02T20:22:02Z", "commit_message": "tq/transfer: copy Id and Token\n\nSSH connections that return id and/or token from batch require these\nfields for get-object and put-object. Properly copy them when making\na copy of a transfer in newTransfer().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c8ed4c34160f755824d2f8c5c2c7ea3baa6d13b3", "commit_date": "2023-10-01T04:20:49Z", "commit_message": "build(deps): bump actions/checkout from 3 to 4\n\nBumps [actions/checkout](https://github.com/actions/checkout) from 3 to 4.\n- [Release notes](https://github.com/actions/checkout/releases)\n- [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)\n- [Commits](https://github.com/actions/checkout/compare/v3...v4)\n\n---\nupdated-dependencies:\n- dependency-name: actions/checkout\n  dependency-type: direct:production\n  update-type: version-update:semver-major\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9bc0e5dcc0960a3e097b00ba651983280047175c", "commit_date": "2023-10-01T04:20:46Z", "commit_message": "build(deps): bump docker/setup-qemu-action from 2 to 3\n\nBumps [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) from 2 to 3.\n- [Release notes](https://github.com/docker/setup-qemu-action/releases)\n- [Commits](https://github.com/docker/setup-qemu-action/compare/v2...v3)\n\n---\nupdated-dependencies:\n- dependency-name: docker/setup-qemu-action\n  dependency-type: direct:production\n  update-type: version-update:semver-major\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "06d4b528fb119944fe07b3efa519b8094287df28", "commit_date": "2023-09-28T15:49:54Z", "commit_message": "Merge pull request #5524 from chrisd8088/copy-callback-file-mock-time\n\nMock time in copy callback log file test", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6db0c47acfc3ce7a043ab10bc5272e870d76852b", "commit_date": "2023-09-28T07:04:40Z", "commit_message": "go.*,lfs: mock time in copy callback log file test\n\nIn commit 00f1e9521ab5d39aab393796745189d39c27b9a0 of PR #5504 we added\nthe TestCopyCallbackFileThrottle() test function to confirm that the\nCopyCallbackFile() method of GitFilter structure in the \"lfs\" package\nnow throttled its output of progress messages into a log file so that,\nin general, no more than one message was written during the interval\ndefined by the tasklog.DefaultLoggingThrottle value.  This new throttling\nbehaviour was added in commit 5bfa9009dafce59789b88b1a0854691b596f6e76\nin the same PR.\n\nThe TestCopyCallbackFileThrottle() function attempts to validate\nthe throttling action by reading a test buffer in segments and waiting\nor not waiting between each read, expecting the log messages to be\nwritten or not written, as appropriate.  However, because our CI test\nsuite may experience slow execution times as a result of running in\nvirtualized environments, reads may occur at times more than the\ntasklog.DefaultLoggingThrottle interval apart even without the artifical\nwaits injected by the test function, causing the test to fail when it\nsees more log messages than it expects.\n\nWe can avoid this problem by making the wait intervals in the test\ndeterministic using a mocked value for the current time.  We use\nthe github.com/jmhodges/clock package for this purpose, adding an\nobject of its Clock interface type to the GitFilter structure.  In\nall non-test code this object is simply a wrapper for the \"time\"\npackage's functions, but in our test we can use a variant which allows\nus to control the time values returned to the CopyCallbackFile() method,\neither stepping forward or not, as we desire.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cb27449f5c44aeda48af90962ee80832c5c42064", "commit_date": "2023-09-27T21:15:42Z", "commit_message": "Merge pull request #5504 from cmaves/main\n\nLimit CopyCallbackFile to print every 200 ms", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89ad99d4f0b9986fa954668a3f0d20bf33cd434b", "commit_date": "2023-09-27T19:41:04Z", "commit_message": "Merge branch 'main' into main", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6347d9659a6d5e57309cfd4f4da7bddd879466e5", "commit_date": "2023-09-27T13:51:52Z", "commit_message": "Merge pull request #5515 from bk2204/track-reject-gitattributes\n\ntrack: reject attempts to modify `.gitattributes`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "00f1e9521ab5d39aab393796745189d39c27b9a0", "commit_date": "2023-09-27T03:09:54Z", "commit_message": "Add test for CopyCallbackFile throttle", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5bfa9009dafce59789b88b1a0854691b596f6e76", "commit_date": "2023-09-27T03:09:54Z", "commit_message": "Limit CopyCallbackFile to print every 250 ms\n\nPrior to this commit, the callback would print every single iteration of io.Copy.\nThis results in a print every 32kb and\ncan slow clean operations by several orders of magnitude\nwhen GIT_LFS_PROGRESS is set.\nBy limiting the print to every quarter second in this PR,\nmost of negative impact is mitigated.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "69f81c42112110438ab873e5b85cfa45a9d1c91f", "commit_date": "2023-09-26T20:17:25Z", "commit_message": "track: return an error on error or no action\n\nIf the user requests a pattern that matches `.gitattributes` and that's\nthe only pattern, we currently return a zero exit status, even though\nwe've failed.  Similarly, if an error occurs, we fail to exit nonzero.\nIn both of these cases, switch to exiting nonzero to indicate that the\noperation was unsuccessful.\n\nHowever, continue to return successfully if the reason we didn't process\nany patterns was because they're already matched, since what the user\nwanted is already done.\n\nCo-authored-by: Chris Darroch <chrisd8088@github.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c55d2bb57d26cf739d7f2ed318c16b0b81fae588", "commit_date": "2023-09-19T13:43:47Z", "commit_message": "track: don't allow tracking `.gitattributes`\n\nRight now, we have code to check if a pattern would modify\n`.gitattributes`, but this check occurs after we've written the file\nalready (oops!).  Let's avoid this problem by moving the code to write\nbelow the check and adding tests for not modifying the file.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab3f2288bdb3cface5a4a0af2daa9c302214ab6f", "commit_date": "2023-09-15T15:28:41Z", "commit_message": "Merge pull request #5487 from chrisd8088/upgrade-go-1-21\n\nUpdate to Go 1.21", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0038be2b6e7341c2589f0edbc13ca7cbfc7762cf", "commit_date": "2023-09-15T02:35:55Z", "commit_message": "Merge branch 'main' into upgrade-go-1-21", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0cdbbfa807cf0cbef7493ad50c62d05fc406de58", "commit_date": "2023-09-15T02:35:04Z", "commit_message": "t/Makefile: use variable to run Go commands\n\nThe Makefile in our \"t\" test directory was introduced in commit\n4a380ce0090deb0714832e66bdc38af92b25e2a9 of PR #3125, partly\nso as to provide a convenient way to build the test utilities\nin the t/cmd directory, which are written in Go.\n\nWhile the test Makefile sets a GO variable like the one used throughout\nour primary Makefile, it does not make use of it and instead runs\n\"go build\" directly.  We revise the \"go build\" commands now to use\nthe GO variable in order to bring them into alignment with our primary\nMakefile.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f778c94d42c36fe170894ffdaf3afd3bb3e61f1", "commit_date": "2023-09-15T01:15:26Z", "commit_message": "{t/}Makefile: force use of local Go toolchain\n\nAs of Go version 1.21, the \"go\" command may, under certain circumstances,\nfetch a different version of the Go toolchain than is provided locally, as\ndescribed in #5477, PR git-lfs/build-dockers#58, and the Go documentation:\n\nhttps://go.dev/doc/toolchain\n\nIn general, we do not expect this to occur, as we specify an older\nGo version in our go.mod file and so the locally-installed Go toolchain\nshould be newer than that version and therefore sufficient.  We also do\nnot run any of the commands, such as \"go get\", \"go install\", and \"go run\",\nwhich might cause Go to attempt to fetch a newer version of itself.\n\nNevertheless, to be cautious and ensure we only try to run with the\nGo version we have locally installed, we add the GOTOOLCHAIN=local\nenvironment variable to our Makefile.  Defining this variable will\nguarantee that Go will stop with an error rather than proceed to\ndownload and run another version of itself.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "749556f8da3b0137a00cb6a40fbc8469bbd3a708", "commit_date": "2023-09-14T21:45:13Z", "commit_message": ".github/workflows: force use of local Go toolchain\n\nAs of Go version 1.21, the \"go\" command may, under certain circumstances,\nfetch a different version of the Go toolchain than is provided locally, as\ndescribed in #5477, PR git-lfs/build-dockers#58, and the Go documentation:\n\nhttps://go.dev/doc/toolchain\n\nIn general, we do not expect this to occur, as we specify an older\nGo version in our go.mod file and so the locally-installed Go toolchain\nshould be newer than that version and therefore sufficient.  However,\nwe do use the \"go install\" command in our CI script to fetch the\nlatest goimports module, and that in particular will attempt to use\na newer Go toolchain if the module requires a version of Go later than\nthe one which is installed.\n\nTo be cautious and ensure we only try to run with the Go version we\nhave specified, we add the GOTOOLCHAIN=local environment variable\nto all our GitHub Actions workflow jobs.  Defining this variable\nwill guarantee that Go will stop with an error rather than proceed to\ndownload and run another version of itself.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c0da35034445ae6ff99da2729fc4719251bee334", "commit_date": "2023-09-14T15:00:09Z", "commit_message": "Merge pull request #5507 from chrisd8088/add-install-path-note\n\nAdd installation note about restarting shells on Windows for PATH changes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b08f3dd81a80a64007e12680b7fdab139debafb9", "commit_date": "2023-09-13T21:00:49Z", "commit_message": "README.md: note PATH update may need shell restart\n\nAs discussed in #5498, Windows users in particular may need to restart\ntheir command shell after installing a Git LFS binary in order for\nchanges to $PATH to take effect, so we add a note to our installation\ninstructions on this point.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2d8549c0348b97d04fa0ac96092a5f7167886e1a", "commit_date": "2023-09-13T19:11:30Z", "commit_message": "Merge pull request #5506 from chrisd8088/drop-unused-docker-scripts\n\nRemove unused Docker scripts and update README", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7f6f0093b63f61a87e6114f41b3f8343d234bbd1", "commit_date": "2023-09-13T17:20:14Z", "commit_message": "docs/linux-build.md: remove outdated documentation\n\nThe last substantive update to the docs/linux-build.md file was made\nin PR #480 in 2015, and the information in the file is no longer\naccurate or relevant.\n\nWhile the `rpm/build_rpms.bsh` script mentioned in the text still exists,\nwe typically run that script only within Docker containers, and we have\nupdated our Docker build documentation both in prior commits in this PR\nand in PR git-lfs/build-dockers#57.  Therefore we simply remove the old\ndocs/linux-build.md file in favour of our revised documentation, which\ndescribes how to build and use Docker images to generate both Debian and\nRPM packages of Git LFS.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "087016dc6bd0a6e0009fecf4d2521fcc4dac20c4", "commit_date": "2023-09-13T17:20:14Z", "commit_message": "docker/README.md: update and simplify text\n\nMuch of the initial text of the README file for Docker image use no\nlonger applies, as we do not publish Docker images to the Docker Hub\nor any other registry, and various new options have been added over time\nto the docker/run_dockers.bsh script.  Therefore we can simplify the\nREADME considerably, and update the remaining portions to reflect our\ncurrent practices and utilities, project locations, and terminology.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f9e22f18b360539dff27c814e8eaee4376586a03", "commit_date": "2023-09-12T18:17:02Z", "commit_message": "docker/run_dockers.bsh: update available options\n\nThe --prune command-line option was added to the docker/run_dockers.bsh\nscript in commit 4a2e96b74337b91012b95314633db1d5f4181a52 of PR #4104,\nand the --arch command-line options was added in commit\n569b5ce4e56dcfda2fb26d6277047182d8ec4d11 of PR #4728.  Earlier, the\nREPO_HOSTNAME environment variable was removed from all the corresponding\nDockerfiles in the git-lfs/build-dockers repository in commit\ngit-lfs/build-dockers@d4c2fe6f797decb6862072f0dc266d92b300e51a.\n\nWe therefore update the docker/run_dockers.bsh script now to remove\nthe unused REPO_HOSTNAME environment variable and document the new\n--prune and --arch command-line options.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6e5c4cc656e9aa31820634c5a32076a589c33f60", "commit_date": "2023-09-12T17:11:34Z", "commit_message": "docker: remove unused scripts\n\nWhen the scripts to build Docker images of Git LFS were first introduced\nin PRs #511 and #555, an optional capabililty was included to sign the RPM\nor Debian packages after building them in the containers.  This option\nwas triggered by the presence of a git-lfs_*.key file alongside the\nDockerfile for a given OS and version.\n\nHowever, we have not published Docker containers to the Docker Hub or\nany other registry for at least five years, and we do not use or maintain\nthis signing capability, so we can remove the associated script code.\nIf we ever decide to begin publishing containers again, we can restore\nthis functionality from our Git history.\n\nThe docker/test_dockers.bsh script is also out of date and unused, so we\nremove it as well.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "41f63deb7f633a5fcf9b3afc4369c47f086e489f", "commit_date": "2023-09-11T17:00:40Z", "commit_message": "Merge pull request #5500 from chrisd8088/drop-release-script\n\nRemove old and unused release script", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88100fe312a02fea7166c26820a1735fc8f46be7", "commit_date": "2023-09-11T15:39:41Z", "commit_message": "Merge branch 'main' into drop-release-script", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "24dee3e25224ed5eb04e86b0a73994c6685141f6", "commit_date": "2023-09-11T15:15:40Z", "commit_message": "Merge pull request #5357 from b-camacho/bmc/add-fetchhead-fallback\n\nAdd `FETCH_HEAD` as fallback remote source", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8b648e350845d7e188d85e364517b449dd7b3ba7", "commit_date": "2023-09-08T18:56:20Z", "commit_message": "script: drop old release script\n\nIn commit 4c422b4baaff4e63adc09814cb7eef574fb164dc of PR #113 the\nscript/release script was added, which builds and runs a Go program\nfrom the script/script.go and script/release.go files.  The mainRelease()\nfunction in that program uploads release binaries to GitHub via a POST\nrequest based on the values in a bin/releases/build_matrix.json file.\n\nHowever, that JSON file is no longer created because the script/build.go\nfile and accompanying script/bootstrap script were removed in commit\n2235198650d8dfadded525cc308ae8dfa786da52 of PR #3144.\n\nAs we do not use the script/release or remaining script/*.go files anymore\nas part of our release process, we can delete them now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ee59360b7e775a81b8de68706ac4d6c14c80b4ff", "commit_date": "2023-09-08T02:08:20Z", "commit_message": "Merge branch 'main' into bmc/add-fetchhead-fallback", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e0dbced9ea4e13033c19366700bf742d409f942c", "commit_date": "2023-09-08T02:05:39Z", "commit_message": "fmt", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42bf682677b3f79724601750617e435e37db7b23", "commit_date": "2023-09-06T12:16:52Z", "commit_message": "Merge pull request #5490 from bk2204/creds-multi-panic\n\nFix a panic in the credential code", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d8c2fa7dea3211ebd93db5183376cbd5521cb65e", "commit_date": "2023-09-05T20:20:02Z", "commit_message": "Merge pull request #5491 from bk2204/empty-file-stat\n\nAvoid modifying the mtime of empty files", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4c782ba772ed0137a69bd3a61b74c2cfb3805fd2", "commit_date": "2023-08-31T17:14:03Z", "commit_message": "lfs: don't update mtime on empty files on pull\n\nWhen a user performs a `git lfs pull`, we update all of the files in the\nworking tree that are pointers (and aren't excluded) to have their\ncorrect content.  However, if the files are empty, they don't need a\nchange, and some users find the fact that we update the mtime of the\nfile to be undesirable.\n\nLet's avoid this by explicitly checking to see if the file is empty and\nif it's supposed to be and not updating it.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e9fd9ceeb5e60864cbc457cd8214da21f85dab1", "commit_date": "2023-08-31T16:26:21Z", "commit_message": "t: add a test helper to print the mtime of a file\n\nIn a future commit, we'll want to verify that the mtime of a file isn't\nchanged.  However, because `ls` doesn't provide a great deal of\ngranularity, we'll need a test helper to print the number of nanoseconds\ninvolved.\n\nOn Linux, we could use `find` with `-printf` or `stat`, but this won't\nwork on macOS, since this option isn't available in the BSD version of\n`find` and `stat` won't exist.  Thus, a test helper is the simplest\napproach, so implement one.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "20ea5ad0d0f1fc3ac8065521043614f5f38d82f7", "commit_date": "2023-08-30T20:48:06Z", "commit_message": "lfsapi: avoid indexing a nonexistent value\n\nIn some cases, we might end up with an entry that's missing either a\nusername or password, and in such a case, we wouldn't want to panic,\nlike we do now.  Solve this by using the function `FirstEntryForKey` to\nlook up the value and return an empty string if none is present.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bd812d1db89c08d2d29ddff2c507106d917fc2cd", "commit_date": "2023-08-30T20:47:22Z", "commit_message": "creds: add a documentation comment for FirstKeyForEntry\n\nNow that this function is public, let's add a documentation comment for\nit to help inform users.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2810c3c96b3f21e04c98230ff2d7d24fcb06707", "commit_date": "2023-08-30T20:40:04Z", "commit_message": "creds: expose FirstEntryForKey\n\nWe'd like to use this function in a different package, so let's rename\nit to be public.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c1d4bd7c59cec97f79d61667ad9d7e1869eb813", "commit_date": "2023-08-26T17:52:09Z", "commit_message": "update to Go 1.21\n\nAs our official policy is to support the latest version of Go, we\nupgrade our CI and release workflows to version 1.21, which was\nrecently released.\n\nWe also drop support for versions older than 1.20 as they are\nnot supported by upstream Go.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3d059e8894556786685ed6b6104daf6aec4754ee", "commit_date": "2023-08-25T17:46:24Z", "commit_message": "Merge branch 'main' into bmc/add-fetchhead-fallback", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb21d3d92ed6ecf027a2f91ac41c5a262635237c", "commit_date": "2023-08-25T17:45:16Z", "commit_message": "strip trailing whitespace", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a3829f486597702297737bb6677534cb5cd0bbc6", "commit_date": "2023-08-25T14:24:43Z", "commit_message": "Merge pull request #5412 from bk2204/system-gitattributes-var\n\nUse `git var` to find system gitattributes file", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dd3379d2a55f3ae48cecae6329915c676e55d432", "commit_date": "2023-08-25T00:11:39Z", "commit_message": "only use fallback for default remote", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e31b07135c7194c56c02b1423d248c4fca4811e8", "commit_date": "2023-08-24T13:17:27Z", "commit_message": "git: use `git var` to find system gitattributes file\n\nAt the moment, Git doesn't provide us a way to know where the system\ngitattributes file is.  To help find it, we use the `PREFIX` environment\nvariable and tack on `etc/gitattributes`.  However, as a practical\nmatter, nobody sets `PREFIX`, so typically we always use\n`/etc/gitattributes`.\n\nThat being said, Git has just learned a way to provide this information\nusing `git var GIT_ATTR_SYSTEM` to print this information, and this will\nbe included in Git 2.42.  If we have such a version of Git, use it to\nfind this information.  If it fails, return an error, but if it simply\nprints no values (such as with `GIT_ATTR_NOSYSTEM`), then that means Git\ndoes not consider us to have a system gitattributes file, and in that\ncase, ignore trying to load that data.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "316ee9acd6d2ede30a6c9eac3f65a4250293ef9b", "commit_date": "2023-08-24T13:00:36Z", "commit_message": "Merge pull request #5482 from bk2204/track-backslash-unix\n\nMake track handle backslashes correctly on Unix", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5976613bdf537d76cfb4de2d923b3dec34b7b2bb", "commit_date": "2023-08-22T18:54:33Z", "commit_message": "Make track handle backslashes correctly on Unix\n\nOn Windows, backslashes are path separators and we need to rewrite them\ninto forward slashes if we want Git to honour the path provided.\nHowever, on Unix, backslashes are ordinary characters and can be used\nanywhere in a path.\n\nTo make `git lfs track --filename` work correctly for paths with\nbackslashes on Unix, we must avoid converting them to forward slashes,\nand we need to unescape them when unescaping the paths.  Note that we\nmust escape _before_ all other escapes and unescape _after_ all other\nunescaping so that we don't accidentally try to re-escape a pattern that\nwe've just escaped (or vice-versa).\n\nIn addition, this highlights an additional subtle bug we've failed to\nnotice so far: the `core.quotepaths` variable we've used in our\ninvocation to `git ls-files` doesn't prevent all escaping; instead, it\nonly prevents escaping of high bytes, which doesn't help us with\nsequences that contain backslashes or newlines.  To handle those\ngracefully, we need the `-z` option, which uses NUL-terminated\nfilenames.\n\nUpdate the tests for our new backslash behaviour on Unix and add new\ntests that we gracefully handle backslashes on Unix.  Check specifically\nfor the error we would get if `git ls-files` produced unexpected output\nand fail if so.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e09b7b07fee4d85856919a581ed928f4a2ee9aa8", "commit_date": "2023-08-22T08:47:53Z", "commit_message": "add test for normal clone", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2e924e04a2a928567f83f1a69d2a42722b02ff49", "commit_date": "2023-08-22T07:59:37Z", "commit_message": "add test for missing remote fallback", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1820b646e05c24497652b3f9eaf91500dc1ee988", "commit_date": "2023-08-08T16:34:11Z", "commit_message": "Merge pull request #5452 from chrisd8088/update-release-howto-docs\n\nUpdate and expand documentation of the Git LFS release process", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4fc27b3426e617b87f40efb7c81f62757208abb0", "commit_date": "2023-08-08T06:38:35Z", "commit_message": "docs/howto: add new Homebrew update release step\n\nThe final step in our instructions for releasing a new Git LFS version\nadvise the maintainer to update our fork of the Homebrew/homebrew-core\nGitHub repository.  However, we recently archived this repository as\nit is no longer applicable to the release process, and is not needed\nto provide an updated Homebrew formula for Git LFS.\n\nInstead, we add a new step to our release instructions which explains\nhow to run the \"brew bump-formula-pr\" command on a macOS system to\nautomatically create a GitHub PR for the Homebrew project that will\nadvance the version number in the git-lfs Homebrew formula to that of\nthe latest Git LFS release.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38bba0ba19f2bf303250c2e79ece8e83b7272a35", "commit_date": "2023-08-08T06:38:35Z", "commit_message": "docs/howto: add release upload script dependencies\n\nThe third step in our description of the process of releasing a new\nGit LFS version advises the use of our script/upload script, which\nuploads release artifacts and checksum files to GitHub, after generating\nGPG signatures for the checksum files using the user's PGP key.\n\nThis script actually runs the script/hash-files as well as other\nscripts and tools, and collectively these have a range of requirements,\nsuch as a modern Ruby installation with the OpenSSL gem, GnuPG, etc.,\nso we add a paragraph to our documentation of this third step which\nmentions these dependencies.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "186106b2913827f048761bf17e11cc0082e99d27", "commit_date": "2023-08-08T06:38:35Z", "commit_message": "docs/howto: update release PR instructions\n\nIn our documentation of the process by which we release new versions\nof Git LFS, the first step describes how a new \"release-next\" branch\nshould be prepared, and the second step describes how to create a\nGitHub pull request from that branch, check the status of its CI jobs,\nand announce the forthcoming release to interested parties using the\nnew PR.\n\nOne detail missing from the current set of instructions in this second\nstep is the fact that our GitHub Actions release workflow is not\ntriggered by a new PR, and so while the PR will cause the regular CI\nworkflow to run, it will not do so for the release workflow, which is\na crucial part of the later steps.  Because the release workflow can\naccumulate regressions and bugs between releases, we have sometimes\nencountered problems during release where it fails and we need to\nimmediately issue a patch release after fixing the problems.  Hence,\nit is advisable to try to run the release workflow (as much as possible)\nin a dry-run operation beforehand.\n\nWe therefore add some bullet points to our second release step on how\nto do this safely, without actually uploading release assets to\nPackagecloud.\n\nWe also add bullet points which mention adding a \"release\" label to\nthe PR, and uploading a set of pre-built binaries for testing purposes\nby interested parties.  As well, we update several other points and\nreformat the instruction for greater clarity.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3bc35c6debcd34a5526d76761a09581bcdc64ab4", "commit_date": "2023-08-08T06:38:35Z", "commit_message": "docs/howto: edit release changelog creation steps\n\nIn our documentation of the steps to release a new version of Git LFS,\nthe first step pertains to the creation of release notes and an updated\nchangelog on a new \"release-next\" branch.  This step begins with some\ndescription of our semantic versioning scheme, specifically relating\nto minor versions, and then the following bullet points include an\nexplanation of the use of our script/changelog script to help populate\nthe CHANGELOG.md file, with specific example commands for a new minor\nversion only.\n\nIn order to provide more comprehensive guidance, we update this first\nstep to describe all three types of versions (major, minor, and patch),\nand provide examples of how to run the script/changelog script for\neach type.\n\nWe also expand our documentation of the need to carry forward the changelog\nfrom a patch release series into the changelog for the next major or\nminor release, as we currently only discuss minor releases in this regard.\n\nFinally, we note that one can use the GITHUB_TOKEN environment variable\ninstead of entering GitHub credentials into a ~/.netrc file, and\nthat the debian/changelog file needs to be manually updated after\nrunning the script/update-version script.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eea7c93269b99688673be1a7f30ef7fa122f9ec5", "commit_date": "2023-08-08T06:37:39Z", "commit_message": "docs/howto: use generic examples in release steps\n\nOur documentation of the steps to release a new version of Git LFS\nhave several examples of specific command-line actions or file changes\nwhich use actual legacy commits for their sample data.  As these are\nnot particularly current anymore (for instance, they refer to the\nprevious major version), we revise them to be more generic, with\nplaceholders for any specific version numbers, GitHub PR numbers, etc.\n\nAs well, we update the \"git tag\" command in one example to include\na message with the -m option, as that is expected by our current\nrelease process, and we add a \"git show\" command to illustrate what\nthe signed tag should look like after it has been created.  We also\nuse a simpified format for the Git commands in the examples so that\ntheir output is more compact, making the examples more generic.\n\nFinally, we update the hostname of the Git LFS project home page to\ngit-lfs.com from git-lfs.github.com, as that change has been made\nsince these instructions were first written.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b4b270f3ae1b426103d52af26f87c093ae446b17", "commit_date": "2023-08-08T06:37:39Z", "commit_message": "docs/howto: update patch release instructions\n\nIn a previous commit in this PR, we removed our legacy instructions\npertaining to the creation of a \"release-M.N\" branch immediately\nfollowing the release of a new minor version of Git LFS, as we no\nlonger create such a branch in all cases, but only when we need\nto create a subsequent patch release.\n\nWe now update our instructions for building a patch release to\ninclude a description of when and how to create a \"release-M.N\" branch\nonto which we then cherry-pick commits from the mainline.\n\nWe also edit our instructions for performing the cherry-pick operations\nto explain more clearly how we identify the mainline parent of each\nmerge commit, and make some other minor improvements to our instructions\nas well.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1848b548b6cb26ab7d42828fa0df31b9505a59a4", "commit_date": "2023-08-07T01:07:43Z", "commit_message": "docs/howto: drop minor release branch instructions\n\nIn our documentation of the steps to release a new version of Git LFS,\nwe have a section detailing the process for a minor version release\nwhich states that we create a new \"release-M.N\" branch for every\nminor release.\n\nHowever, this does not accord with our current practice, where we only\ncreate such a branch when we need to issue a patch release.  Before\nupdating the instructions for creating such a patch release to explain\nthis step, we first just remove the section pertaining to minor releases,\nsince there are no extra steps for a minor release compared to a major one.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae6390809d01b49370076045efa06249e32a0c24", "commit_date": "2023-08-06T21:58:03Z", "commit_message": "docs/howto: update expected release timescales\n\nIn our documentation of the steps to release a new version of Git LFS,\nwe provide descriptions of the different types of versions, according\nto the semantic versioning scheme.  In these descriptions we offer\nsuggested time scales for the different version types, such as that\nmajor releases will be done every one to two years.  These suggestions\ndate from the era when the documentation was first written, in 2018.\n\nAs Git LFS is now a more mature project and the release schedule is\nless frequent than it was in the past, we adjust the suggested time\nscales for different version types to more accurately reflect our\ncurrent development and release process.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "522fa9190728a51a27413e17ee023fe42cb1c055", "commit_date": "2023-08-06T21:06:05Z", "commit_message": "docs/howto: update artifact list in release steps\n\nIn our documentation of the steps to release a new version of Git LFS\nwe list the artifacts we create for each tagged release.  This list is\nno longer current, so we update it now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8568cb2526fd7c84352063cac8c8931973cafbc6", "commit_date": "2023-08-06T20:52:42Z", "commit_message": "docs/howto: format main branch name consistently\n\nIn our documentation of the steps to release a new version of Git LFS,\nwe refer to the \"main\" branch in a number of places, but do not always\nformat the branch name consistently, so we adjust that now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c5fac234a6115268491a1ba6565cd2384f3b3984", "commit_date": "2023-08-06T20:40:28Z", "commit_message": "docs/howto: use generic numbering in release steps\n\nOur current documentation of our steps to release a new Git LFS version\nuses example version numbers which start with major version 2.  As we\nhave since released v3.0 and anticipate a potential v4.0 in the future,\nwe can make our documentation more generic by using a \"vM.N.P\" format\nin all the notes and examples.\n\nWe also add parentheses when referring to a prior release to help visually\ndistinguish the segments of the semantic versioning format in these\nexamples; for instance, \"vM.(N-1).0\" instead of \"vM.N-1.0\".", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cbd62023ca389f3ddc4b08293dd8cd2785d8e02d", "commit_date": "2023-08-04T08:44:27Z", "commit_message": "Merge pull request #5444 from QuLogic/cobra-update\n\nUpdate cobra to 1.7.0", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f12163f733010078fdc29cde9666978308846df", "commit_date": "2023-08-04T07:36:39Z", "commit_message": "Merge branch 'main' into cobra-update", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2a96859a0d3b9d993ba5a88e7b091ca412721736", "commit_date": "2023-08-03T13:17:10Z", "commit_message": "Merge pull request #5446 from bk2204/faq-tls\n\nAdd FAQ entries for TLS data", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6106eb18c7e0a6d54a64ae32e05e9dbf064d8dd", "commit_date": "2023-08-03T00:57:42Z", "commit_message": "Merge pull request #5443 from QuLogic/no-vendor\n\nRemove vendoring instructions from contributing docs", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2fdcdfdd61c77fa830351fe93bbb66f2f2dedbb8", "commit_date": "2023-08-02T08:54:45Z", "commit_message": "Remove vendoring instructions from contributing docs\n\nThe `vendor` directory is `.gitignore`d, and vendoring as a process was\nfully removed in #4903.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5cfafcb8c53e373a43d67c48edcad13163b7cf68", "commit_date": "2023-08-02T08:47:58Z", "commit_message": "Update cobra to 1.7.0", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "87dae3c7e70303308ebaf8e62ab70a0e5b952988", "commit_date": "2023-08-01T18:01:18Z", "commit_message": "faq: document TLS configuration options\n\nUsers often have questions about how to configure TLS certificates,\nwhether as certificate authorities or client certs.  Help them out by\nadding some FAQ entries with examples so that it is clear what to do.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e44269e00fb7aa061cd10da0db8ad40549f98f6", "commit_date": "2023-08-01T17:31:26Z", "commit_message": "faq: add anchors for easy linking\n\nRight now, we often want to link to a particular entry in the FAQ, but\ndon't have stable anchors to do so.  Let's help users find this\ninformation and link to it easily by providing named anchors in the\nmanual page.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6fa3e0ac6577082bf5cb423974deeb5d485ae73a", "commit_date": "2023-08-01T17:30:18Z", "commit_message": "mangen: ignore anchors in help output\n\nNamed anchors can be helpful for linking to HTML documentation, but\nthey'll just clutter the help output.  Simply ignore them when\nprocessing our manual pages for the help output.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cc08c39833af799c7fcba1b9baa9dec88bd85562", "commit_date": "2023-08-01T17:27:20Z", "commit_message": "faq: place entries into different categories\n\nRight now, we have quite a few FAQ entries.  Let's place them into\ncategories so that users can find them easily.\n\nNote that this doesn't change the contents of any of the individual\nentries, only their order.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fec993bddb17f15ac6f71790f87f4e5234b7cc73", "commit_date": "2023-08-01T17:27:20Z", "commit_message": "mangen: accept hyphen-minus in header names\n\nIt's common to write a hyphen-minus in titles, so let's accept that in\nheader names so we don't truncate headers.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ca5d112217d6e5d0f093b9b9539f5bb783953368", "commit_date": "2023-08-01T17:27:20Z", "commit_message": "mangen: allow a second level of header in help output\n\nIn manual pages, it can be helpful to add a second level of sections.\nLet's teach our help output how to add handle that by underscoring the\nname of the section with tildes.  This is the approach that AsciiDoc\nitself uses for underlined headers.\n\nNote that traditionally, on Linux (and probably BSD) systems, this level\nof headers is written in mixed case, not all-uppercase, as can be seen\nin groff(1), so don't try to mangle the case of those headers.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9874d4c1cd181a552629362b105cb22b10942d56", "commit_date": "2023-08-01T17:27:20Z", "commit_message": "Makefile: build manual content based on AsciiDoc files\n\nWhen we ported our documentation from Ronn to AsciiDoc, we failed to\nupdate the Makefile target, so changes to our documentation didn't cause\nthe help to be updated.  Let's fix that so rebuilding the binary with\nupdated docs causes them to be included.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "866030e3131263e61547b848a37ec54f17129eb4", "commit_date": "2023-08-01T16:59:08Z", "commit_message": "Merge pull request #5445 from bk2204/faq-proxies\n\nFAQ: add an entry about proxies", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c694e5c6fc2108325d503abefb19d8c1b50cee43", "commit_date": "2023-08-01T13:43:23Z", "commit_message": "Merge pull request #5438 from AaronDewes/main\n\nAdd RISC-V support", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cb39845275d07f28ae598a4b42c96a2a95a9373f", "commit_date": "2023-07-31T18:35:34Z", "commit_message": "FAQ: add an entry about proxies\n\nLots of people have questions about how to use proxies with Git LFS.\nDocument that they can be used in the same way as with Git, except that\nwe only support Basic authentication.  Tell people how to format the\nvalue.\n\nFinally, indicate to users that their proxy must not modify the data in\nany way and that we don't encourage the use of TLS MITM proxies.  As has\nbeen documented in multiple scientific papers, including those below,\nthese have been shown to be the cause of substantial security issues:\n\n* https://arxiv.org/abs/1809.08729\n* https://jhalderm.com/pub/papers/interception-ndss17.pdf", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2137b4976f4c6e4af3c17bcedb87a1f23270caf2", "commit_date": "2023-07-27T15:01:42Z", "commit_message": "Merge pull request #5442 from chrisd8088/fix-transfer-queue-go-tests\n\ntq/transfer_test.go: enable and fix all tests", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "76c843c0e33f1ea9f08cbe02455c32282ccded71", "commit_date": "2023-07-27T07:35:20Z", "commit_message": "add unit tests", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e2a0e1cd1e9c5529e900c94006866ab6141c9639", "commit_date": "2023-07-27T00:58:12Z", "commit_message": "tq/transfer_test.go: enable and fix all tests\n\nThe three test functions in the tq/transfer_test.go source file are\nall named with the prefix \"test\" rather than \"Test\", and as a result,\ndo not actually execute.  This oversight dates from the original\nintroduction of these tests in the \"transfer\" package in commit\n10623f5d7a7d785fb3863c2b190b0f2f99686b7c of PR #1265.  (The package\nwas later renamed to the current \"tq\" package in commit\n891db97a429405f80d54c7e09219bda9799e8e6e of PR #1780.)\n\nWe therefore change the test function names to begin with \"Test\",\nand resolve several test regressions which have accumulated since the\ntests were first added.\n\nFirst, the TestBasicAdapterExists() function calls the\nGetDownloadAdapterNames() and GetUploadAdapterNames() methods of the\nManifest structure, and these now return the names of three transfer\nadapter implementations rather than just the original \"basic\" one,\nso we allow for all three names to appear in any order.  (The\n\"lfs-standalone-file\" adapter was added in commit\nbb05cf5053d9abd6d7ca68354ca9663e57bb6737 of PR #3748, and the \"ssh\"\nadapter was added in commit 594f8e386cce3441e06c9094ab5e251f0e07ca1f\nof PR #4446.)\n\nSecond, the TestAdapterRegAndOverride() function expects the\nNewDownloadAdapter() and NewUploadAdapter() methods of the Manifest\nstructure to return nil if the provided name argument does not match\nthat of any registered transfer adapter.  However, this has not been\nthe behaviour of those methods since commit\nc5c2a756c70b2a961cea284fc7b00d2753bfaa3b of PR #1279, shortly after\nthe tests were first introduced in PR #1265.  In that commit, the\nNewAdapterOrDefault() method was added, and the NewDownloadAdapter()\nand NewUploadAdapter() methods revised to call it, so they return the\ndefault \"basic\" adapter if the requested name does not match a\nregistered adapter.  We therefore revise and expand the test to\naccount for this behaviour, and also make sure to directly test the\nunderlying NewAdapter() method, which retains the originally intended\nbehaviour and returns nil if it does not find a matching adapter\nfor the provided name argument.\n\nThird, although the TestAdapterRegButBasicOnly() function passes without\nchanges, it no longer fully performs the checks it was intended to make,\nsince the NewDownloadAdapter() and NewUploadAdapter() methods now always\nreturn a non-nil value, so using a non-nil response from them to prove\nthat the \"test\" adapter was found is insufficient.  We therefore update\nthe test to confirm that the returned value from these functions is\na \"test\" adapter, as expected, and not just a \"basic\" one.\n\nWe also replace the use of the BasicAdapterName variable with the\n\"basic\" string to align with the other tests.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b115c4cf0e0c845b6f652a01207bd65ec90bb388", "commit_date": "2023-07-26T12:32:33Z", "commit_message": "Merge pull request #5437 from bk2204/push-no-refs\n\nPrint an error when pushing with no refs", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eaf3f2298be9775c68a465674e75555059ebcb72", "commit_date": "2023-07-26T12:32:15Z", "commit_message": "Merge pull request #5439 from bk2204/dedup-distros\n\nAdd a single source of truth for distro info", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d06d6e9efd78ff4f958b072146ce167d87f60285", "commit_date": "2023-07-26T04:25:07Z", "commit_message": "Merge pull request #5432 from git-lfs/release-next\n\nrelease: v3.4.0", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e0e37509b4c3f28ac62e549472654b84c64dd5b5", "commit_date": "2023-07-25T13:39:32Z", "commit_message": "script/upload: use distro-tool to generate list of PackageCloud links\n\nNow that we have a single location for all of our distro information,\nuse the distro tool, which can extract this information, to emit the\nlinks to the packages.  Remove the now useless comment.\n\nNote that the removed text and the text output by the command\nsubstitution are identical according to diff, so this should result in\nno functional change.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "21aa2f95bb08aff507b9bd2499ce36cfe0315448", "commit_date": "2023-07-25T08:36:31Z", "commit_message": "Cetegorize RISC-V", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a060b6bed94636d786ae7bfd2ca1671d96be8830", "commit_date": "2023-07-24T21:03:14Z", "commit_message": "run_dockers: use distro-tool for finding distros\n\nNow that we've centralized our distro information in one place, call our\ndistro tool to acquire the list of images to build.  To make it easier\nto handle this case by reading the output of a command and splitting on\nwhitespace, let's switch from a bash array to a standard shell string.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "80fa3a87dd2e0388c73e6d3a8647541bd6e03f2b", "commit_date": "2023-07-24T20:33:51Z", "commit_message": "script/packagecloud: use distro library for distro info\n\nNow that we have our distro library in Ruby, let's use it for obtaining\nthe distro map information.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a962e52d956b068f51b3e3bb1f20be43804029b9", "commit_date": "2023-07-24T20:30:09Z", "commit_message": "script/packagecloud: stop printing Markdown links\n\nWe used to print these Markdown links because we were expecting to copy\nand paste them into the release data.  Since the release process is now\nheavily automated, we no longer need to do that, so printing this data\nis now no longer useful.  Remove it so that we don't have to maintain it\nanymore.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e4101f89dc2115e2b5599e47431215cdb510cd7a", "commit_date": "2023-07-24T20:28:17Z", "commit_message": "Add a single source of truth for our distro info\n\nRight now, we have multiple different locations for our distro\ninformation.  This is suboptimal in many ways because it requires\ndevelopers to keep multiple sources of information in sync.\n\nTo solve this, let's write a Ruby script that contains our single source\nof truth.  It contains all of the existing data we have now in an easily\nprocessable format.  It uses a style which is called a _modulino_ in the\nPerl community, which is essentially a script which can also be required\nas a library for testing purposes.\n\nSince we can require any file which ends in `.rb`, create the script as\na library with this trailing suffix and require it in the RSpec tests\nwe're adding so that we can test it produces the expected results.\nThese tests can be run with a simple `rspec script/spec` using a\nstandard distro Ruby and RSpec.\n\nFor our script itself, symlink it into the `script` directory without a\ntrailing suffix.  Various authorities, including Debian, recommend not\nusing a trailing suffix on programs so that the implementation language\ncan change easily if need be.  We follow this advice here.\n\nThe symlink itself should not pose a problem because this is only run on\nUnix by CI or core team members, and our CI system should have developer\nmode enabled on Windows, allowing symlinks without elevated permissions.\nHapless end users cloning this repository on Windows without developer\nmode enabled will receive a plain text file in place of the symlink,\nwhich should not pose a practical problem since they won't be using this\nscript.\n\nNote that this commit doesn't wire anything up; that will be done in\nfuture commits.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "05c1f179f3da296e5facddd03ce85bfa79a5ac74", "commit_date": "2023-07-20T17:24:11Z", "commit_message": "Merge pull request #5431 from nfgferreira/main\n\nResolve git-lfs track slowness on Windows due to unneeded user lookup", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d0b6e5bec7324e8032adeb769d081ad810f6713f", "commit_date": "2023-07-20T16:05:30Z", "commit_message": "Merge branch 'main' into main", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "87fa2d47efcff5fad8336b8f06162c66400867d0", "commit_date": "2023-07-20T15:47:33Z", "commit_message": "removing launch.json", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bca62dabcfca5d1d35e8550f656004dfec3cee74", "commit_date": "2023-07-20T15:01:22Z", "commit_message": "Merge pull request #5429 from chrisd8088/update-shell-completions\n\nUpdate shell tab-completion script support and add manual page", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "64ca17679e4b1276ee16ee316a899d802d968c47", "commit_date": "2023-07-19T16:25:04Z", "commit_message": "Leaving the files as much as possible as the official branch\n\nLeaving the files as much as possible as the official branch", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "62537cabd633b1cfd28d1dd93a4bd0b2c198eb69", "commit_date": "2023-07-18T19:26:43Z", "commit_message": "removing debug message", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6e66e64447f094b28a95fac43281c720f2c6c447", "commit_date": "2023-07-18T19:00:35Z", "commit_message": "git lfs track in Windows is faster now", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e9f1df230e6d4bfa09d6031b0a3b38c983fdf99", "commit_date": "2023-07-18T18:55:43Z", "commit_message": "docs: add manual page for completion command\n\nIn commit 15723008062b941b53743295784554b2f3ba875e of PR #5311 the\n\"git lfs completion\" command was introduced, utilizing the support\nprovided by the spf13/cobra package to generate tab-completion scripts\nfor a number of shells, including the Bash, fish, and Zsh shells.\n\nHowever, no manual page was added at the same time, although help text\nwas included using the spf13/cobra package's format for long command\ndescriptions.  Unfortunately, as described in an earlier commit in this\nPR, the Git LFS client overrides the default help functions defined by\nthe spf13/cobra package and so there was no way for a user to access\nthis long-format help text for the \"git lfs completion\" command.\n\nWe therefore removed the original help text for the command, and now\nreintroduce a revised and expanded version of the text in the form of\na manual page for the git-lfs-completion(1) command.\n\nThe full text of this new manual page attempts to explain the features\nand limitations of the current tab-completion scripts, especially the fact\nthat the Git LFS client does not yet offer suggested lists of terms\nspecific to Git, such as ref or remote names, but that the tab-completion\nscripts for Git LFS should integrate well with the tab-completion\nscripts for Git itself, provided the correct one is used for a given\nshell.\n\nWe also try to include examples of the configuration of tab-completion\nfor each type of shell and for both a user's current session as well\nas for future sessions.  Complete documentation of all such per-shell\nconfiguration options is beyond the scope of the Git LFS project,\nof course, but we aim to provide a sufficient overview so as to guide\nusers to a working solution and forestall support requests as much\nas possible.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "32273fbf28e3c692f04ad4426410c5fb7ea0e458", "commit_date": "2023-07-17T20:55:50Z", "commit_message": "t: add basic completion script tests\n\nIn commit 15723008062b941b53743295784554b2f3ba875e of PR #5311 the\n\"git lfs completion\" command was introduced, utilizing the support\nprovided by the spf13/cobra package to generate tab-completion scripts\nfor a number of shells, including the Bash, fish, and Zsh shells.\nNo tests were added at the same time, however, so we do so now.\n\nThe new tests are simple and just confirm that the \"git lfs completion\"\ncommand generates the expected error messages if it is not given an\nexpected shell name as an argument, and that when one of the supported\nshell names is provided, the command generates the expected script.\n\nWe do not attempt to test the functionality of the generated scripts.\n\nAlthough these tests are quite basic, they should help alert us to\nany potential regressions caused by an upgrade of the spf13/cobra\npackage.\n\nIn particular, if the scripts generated by that package for the Bash\nor Zsh shells change such that the search-and-replace operations\nwe perform on the scripts cease to function, the \"git lfs completion\"\ncommand will still succeed but may produce a script which no longer\nintegrates well with the tab-completion scripts for Git itself.\n\nSince we have now have archived copies of the current scripts as test\nfixtures, the tests will fail when the generated scripts are different.\nThis should alert us to the fact that we need to check the new\nscript output and confirm that it still works with Git tab-completion\non the affected shells, and if not, revise our search-and-replace\noperations accordingly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1bb3a04a0c30365a1b7e31bf465f491b656ec16c", "commit_date": "2023-07-17T20:41:48Z", "commit_message": "commands/run.go: hide descriptions in completions\n\nIn commit 15723008062b941b53743295784554b2f3ba875e of PR #5311 the\n\"git lfs completion\" command was introduced, utilizing the support\nprovided by the spf13/cobra package to generate tab-completion scripts\nfor a number of shells, including the Bash, fish, and Zsh shells.\nThese scripts make use of \"hidden\"  __complete and __completeNoDesc\ncommands, also implemented by the spf13/cobra package, which the\nshell completion functions may query to retrieve dynamic lists of\ncommand names and flags from the Git LFS client.\n\nAt present, the __complete command is used, which also returns any\nshort help text defined each command.  This additional descriptive\ntext is then presented to the user if they are running a shell like\nZsh whose completion system supports the display of such hints.\n\nHowever, as we only define short help text for a single Git LFS\ncommand, namely the \"git lfs help\" command, the display of this\none text string causes the columnar display of available command\nnames to be prefaced with a single \"help\" line when the user\ntypes \"git lfs [Tab]\":\n\n  help             -- Help about any command\n  checkout         fsck             post-checkout    status\n  clean            install          post-commit      track\n  ...              ...              ...              ...\n\nThis irregularity makes the display output less helpful and more\ndifficult to parse than if we simply suppress the inclusion of the\nper-command descriptions entirely, so we do so by setting the\nappropriate flags or using a different script generation method\nof the spf13/cobra package.\n\nNote that we then also need to update the name of the __complete\ncommand to __completeNoDesc in the search-and-replace operation we\nperform on the script generated for the Zsh shell.\n\nWe can always revisit this choice in the future should we choose\nto add short help text to all our command definitions.  This would\nrequire refactoring our NewCommand() and RegisterCommand() functions\nto accept the per-command text strings as extra parameters.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f32a828ae8e49917a540ed9216b09d012749a248", "commit_date": "2023-07-17T20:36:56Z", "commit_message": "commands/run.go: tidy zsh completion script search\n\nIn a prior commit in this PR we revised the \"git lfs completion\" command\nso it would generate a tab-completion script for the Bash shell using\nthe newer implementation offered by the spf13/cobra package's\n(*Command).GenBashCompletionV2() method, and in doing so also added\na search-and-replace operation to revise the generated script such that\nit would integrate with Git's own tab-completion script for Bash.\n\nWe already perform a similar search-and-replace operation to revise\nthe script generated for the Zsh shell by the spf13/cobra package's\n(*Command).GenZshCompletion() method.  These script revisions were\nintroduced in commit 4c9987de9be07bd760e01b39eb9cd72d155c1b25 of PR #5311\nso that the tab-completion script for Git LFS would integrate with the\nZsh shell's native tab-completion for Git.\n\nWe now refactor the script generation and modification for Zsh to more\nclosely align with that used for the Bash shell, which should also\nslightly improve the clarity of the code and make its purpose more\nobvious.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c23433b8a9f9a65ac77cbab1fef62aa2d65bccbe", "commit_date": "2023-07-17T19:57:22Z", "commit_message": "commands/run.go: use v2 bash completion script\n\nIn commit 15723008062b941b53743295784554b2f3ba875e of PR #5311 the\n\"git lfs completion\" command was introduced, utilizing the support\nprovided by the spf13/cobra package to generate tab-completion scripts\nfor a number of shells, including the Bash shell.  The completion\nscript for the Bash shell is currently generated using the spf13/cobra\npackage's legacy implementation, which is returned by the\n(*Command).GenBashCompletion() method.\n\nHowever, the spf13/cobra package's maintainers advise using their\nnewer implementation of tab-completion for the Bash shell, which is\nreturned by the (*Command).GenBashCompletionV2() method, as this\nversion of the script is shorter and aligned with the tab-completion\nscripts now generated for other shells.\n\nIn particular, the new version of the Bash tab-completion script has\nsupport for the program to return custom, dynamic completion lists using\nper-command functions.  While the current Git LFS client does not\nimplement any of these ValidArgsFunction() or RegisterFlagCompletionFunc()\nfunctions, we anticipate doing so in the future so as to be able to\nprovide lists of Git-specific values such as ref and remote names,\nwhen appropriate for a particular Git LFS command.\n\nNote that in order for the new Bash completion script for Git LFS to\nintegrate properly with the Bash completion script from the Git project,\nwe have to revise the script generated by the spf13/cobra package so it\nrewrites the set of command words when the user types \"git lfs ...[Tab]\"\nsuch that the initial two words are replaced with the single word\n\"git-lfs\".  This requires a more substantial replacement of a portion\nof the generated script than was the case with the legacy implementation.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d615cffa80998e5f811fbdd5ce72911d7767596", "commit_date": "2023-07-17T19:41:41Z", "commit_message": "commands/run.go: alphabetize completion shell opts\n\nIn commit 15723008062b941b53743295784554b2f3ba875e of PR #5311 the\n\"git lfs completion\" command was introduced, utilizing the support\nprovided by the spf13/cobra package to generate tab-completion scripts\nfor a number of shells, including the Bash, fish, and Zsh shells.\n\nWe now reorder the list of these shells and their relevant case switches\nso they are in alphabetical order.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac05466bfb1bcaae04ff36c4628ae85f821a05e4", "commit_date": "2023-07-17T19:25:50Z", "commit_message": "commands/run.go: remove completion help text\n\nIn commit 15723008062b941b53743295784554b2f3ba875e of PR #5311 the\n\"git lfs completion\" command was introduced, utilizing the support\nprovided by the spf13/cobra package to generate tab-completion scripts\nfor a number of shells.  Short and long help text was provided at\nthe same time, in the formats offered by the spf13/cobra package.\n\nHowever, the Git LFS client explicitly overrides the default help\nfunctions of the spf13/cobra package, and replacing them with functions\nwhich output versions of the Git LFS manual pages that are pre-rendered\nby our build process.  Thus the long-format help text included in\nPR #5311 can not be viewed by end users.\n\nAs this text is also somewhat terse, having been copied from the\nexample text provided by the spf13/cobra package, we remove it now\nwith the expectation that in a subsequent commit in this PR we will\nprovide a more comprehensive set of instructions in a new manual page\nfor the \"git lfs completion\" command.\n\nWe also remove the short help text for the \"git lfs completion\" command,\nas the majority of other Git LFS commands (with the exception of the\n\"git lfs help\" command) do not define these text strings, and in a\nsubsequent commit in this PR we will suppress their inclusion in the\ncommand lists output by the completion scripts, so as not to make\nthe formatting of those lists irregular and uneven.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "714bda40af1530178b099e79195ca0f2e1e2f8b3", "commit_date": "2023-07-17T18:58:04Z", "commit_message": "commands/run.go: remove powershell completion\n\nIn commit 15723008062b941b53743295784554b2f3ba875e of PR #5311 the\n\"git lfs completion\" command was introduced, utilizing the support\nprovided by the spf13/cobra package to generate tab-completion scripts\nfor a number of shells, including Bash, fish, Zsh, and PowerShell.\n\nFor the shells other than PowerShell, the generated completion scripts\nare intended to work with the tab-completion scripts for Git commands\nthat are available from either the Git project (for Bash) or as an\nimplementation native to the shell.  This coordination permits users\nto receive Git LFS command suggestions when they type \"git lfs [Tab]\",\nfor instance, instead of only when they type \"git-lfs [Tab]\".\n\nIn the case of PowerShell, Git command tab-completion is provided by a\nthird-party project (https://github.com/dahlbyk/posh-git), and while\nit may eventually be possible to integrate that project's scripts with\nthe ones generated by the spf13/cobra package, at the present time\nthe Git LFS core team lacks the time and expertise to develop such\na solution.  Thus the script currently generated for Git LFS command\ncompletion in PowerShell would only provide suggestions when users\nenter the \"git-lfs\" program name, rather than \"git lfs\".\n\nAs we do not want to offer a subpar user experience and one which the\nGit LFS core team is unable to properly support, for the present time we\nremove the PowerShell option from the \"git lfs completion\" command.\n\nNote that PowerShell is primarily (but not exclusively) used on Windows,\nwhere most Git LFS users will have installed Git LFS as part of the\nGit for Windows project.  Git for Windows also provides an emulation\nof the Bash shell, where the Bash tab-completion script generated by\nthe \"git lfs completion\" command should function as expected.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ed38002ac5aaf810daab150f2d9aa1359629b28b", "commit_date": "2023-07-14T13:08:56Z", "commit_message": "Merge pull request #5423 from bk2204/track-brackets-windows\n\ngit: match patterns, not file names, for tracked files", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d701a01bb98cf33ffe36d25fc877fed4d122aabc", "commit_date": "2023-07-14T04:22:54Z", "commit_message": "Merge pull request #5425 from dyrone/main\n\nproposals: fix filename typo", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3fa66a63f3f62671a15e6cecbcfb306520ee7318", "commit_date": "2023-07-14T02:22:40Z", "commit_message": "proposals: fix filename typo\n\nSigned-off-by: tenglong.tl <tenglong.tl@alibaba-inc.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7abd24ec6f6516969085985ff695988db2bceba5", "commit_date": "2023-07-13T12:25:16Z", "commit_message": "git: match patterns, not file names, for tracked files\n\nRight now, when we run `git lfs track`, we warn the user if the pattern\nthey've provided matches an existing file name.  However, when we invoke\nthat command with `--filename` and a pattern with brackets on Windows,\nwe get an error because the escaped pattern contains backslashes, which\nresults in broken behaviour on Windows.\n\nThe real cause of this problem, however, is that we're ultimately asking\nfor a file name and not a pattern.  Our invocation happens to work on\nUnix, but we need it to also work on Windows.  To solve this, let's\ninstead ask for ignored cached files and specify a single pattern.\nSince we've asked for a pattern, this results in a different behaviour\nfrom before and avoids the error.\n\nWe would have caught this on Windows if our weird file name code had\nworked there, but since we included asterisks and question marks, which\nare not valid on Windows, the test couldn't run there.  Instead, let's\nleave the brackets and run the test on all platforms.  We still have the\ntest below which does the same thing with spaces on Unix, so we're not\nreally regressing our tests there.\n\nIn addition, since we don't have any tests for this verbose logging that\nprints the messages that trigger the problem, let's add some, both with\nmore common patterns and some unusual ones as well.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aff711e14beb4be13de9fa2b97bd45f3a9197c25", "commit_date": "2023-07-08T23:43:21Z", "commit_message": "Including debug messages to see the delays in real time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "109c26482e7b51508c0cbf09f788435b551fcd62", "commit_date": "2023-07-04T15:01:48Z", "commit_message": "Merge pull request #5414 from chrisd8088/fix-logs-man-typo\n\nFix missing parameter in `git lfs logs` manual page", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "219518ec1fe136c89930d5e25ea0291e749be875", "commit_date": "2023-06-30T19:53:32Z", "commit_message": "docs/man/git-lfs-logs.adoc: fix missing file opt\n\nIn PR #5054 we converted our manual pages to the AsciiDoc format,\nand in doing so, one entry in the manual page for the \"git lfs logs\"\ncommand lost the relevant \"<file>\" option parameter, so we restore\nit now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "300f4ed3e5f9f4f0d42d326d95e7ca418ce61891", "commit_date": "2023-06-21T19:27:55Z", "commit_message": "Merge pull request #5402 from bk2204/local-path-trailing-slash\n\nHandle local paths with trailing slashes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "600132c4f2a3b1fb85ab2b09107349e3166d2ee9", "commit_date": "2023-06-21T17:43:11Z", "commit_message": "lfsapi: gracefully handle local paths with trailing slash\n\nWhen we want to handle a local path, we must rewrite it internally into\na `file:///` URL, because we dispatch our standalone transfer agent\nbased on the URL scheme.  However, once we've looked up an appropriate\nURL and formatted it as the scheme prefers, if it contains a trailing\nslash, we ignore the entire lookup and replace the URL with the raw one\ngiven, but without the trailing slash.\n\nThis behaviour seems a bit bizarre, and it causes us to take a local\npath with a trailing slash and treat it not as the `file:///` URL it\nneeds to be, but as a raw local path, which gets refused.  Let's avoid\nthis problem by looking at the rewritten URL, and modifying that instead\nif we find its trailing slash to be offensive.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ceb5aba67c75194477136befd8dbd733e953f9a3", "commit_date": "2023-06-21T17:42:10Z", "commit_message": "t: move test code out into a function\n\nWe'd like to use some of this test code in another test, so let's move\nit out into a function we can call.  Right now, this results in no\nchanges to the code, but we'll make some in a future commit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6f011bebfae05def301380e5caa962b02664ed0", "commit_date": "2023-06-15T15:51:17Z", "commit_message": "Merge pull request #5392 from bk2204/dockerfile-update\n\nUpdate distributions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dd57ac08a76a4cb04bf02e569dbd48175eef6220", "commit_date": "2023-06-14T19:15:21Z", "commit_message": "packagecloud: update distros\n\nAdd Ubuntu lunar, which has come out since the last release, as well as\nFedora 38, and remove Fedora 36, which is now EOL.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c9fcc4d720534387543f1e4ec1fce0622a146d0b", "commit_date": "2023-06-14T19:15:21Z", "commit_message": "workflows: build arm64 images for Debian bookworm\n\nSince cross-compiling packages is very slow, we only build packages for\nthe latest Debian version.  Now that we support Debian 12, bookworm,\nthat's the latest version, so let's change our workflow to make sure\nthat we continue to ship the latest version.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "693cdfa4e6ab132e3eacb828e9a8ec389ee66d36", "commit_date": "2023-06-14T19:15:20Z", "commit_message": "Support building images for Debian 12\n\nDebian 12, bookworm, has been released.  Let's support building and\nuploading images for it.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e7123fd71c675b26ce6d7a9391a583d982b9e620", "commit_date": "2023-06-14T19:15:20Z", "commit_message": "Note all locations of base distros for packages\n\nWe indicate that there are two different places we keep a list of\ndistros, but in fact, there are four.  Let's make a note at each place\nindicating these and refer to the others to make sure they're updated.\n\nA good future direction would be to store this data in some sort of data\nfile and read it in each case, but we don't currently do that.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "914e4cb054fb057a50fefb78af8ea265438e106e", "commit_date": "2023-06-14T19:13:52Z", "commit_message": "Merge pull request #5393 from bk2204/remove-refreshenv\n\nworkflows: remove refreshenv", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "991cca58d62d34fc31fd9a6983a5869f3ad33d79", "commit_date": "2023-06-13T20:39:52Z", "commit_message": "workflows: remove refreshenv\n\nRunning `refreshenv` in CI produces this message:\n\n  RefreshEnv.cmd does not work when run from this process. If you're in PowerShell, please 'Import-Module $env:ChocolateyInstall\\helpers\\chocolateyProfile.psm1' and try again.\n\nSince it's not really working in this case, let's just remove it.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a41dd925438dd4fc9a5d2cded3141cdee9813137", "commit_date": "2023-06-09T15:38:38Z", "commit_message": "Merge pull request #5389 from chrisd8088/refactor-gitscanner\n\nRefactor `GitScanner` and simplify implementation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac73c0a587c8955e0eabc2833dbbebdcd69e11a5", "commit_date": "2023-06-07T22:57:35Z", "commit_message": "lfs/gitscanner_catfilebatchcheck.go: close channel\n\nIn commit 08c5ae6c6482b6dd161bb30ea4312caa77de2326 of PR #1953 the\nrunCatFileBatchCheck() and runCatFileBatch() functions of the \"lfs\"\npackage were updated to write the pathspecs of locked files which are\nnot Git LFS pointers to a dedicated channel created by the\ncatFileBatchCheck() and catFileBatch() wrapper functions, respectively.\n\nThe scanRefsToChan() function, which calls both of these with a\npotentially non-nil *lockableNameSet paramter (and is the only caller\nto do so), starts a goroutine with an anonymous function to read any\nevents on the channel returned by catFileBatchCheck(), and then reads\nall events on the channel returned by catFileBatch() directly.  In the\nlatter case, this would cause scanRefsToChan() to stall indefinitely\nunless the channel is closed, so the anonymous function started by the\nrunCatFileBatch() function that writes to the channel always closes\nthe channel upon exit.\n\nHowever, the anonymous function started by the runCatFileBatchCheck()\nfunction that writes to its lock path channel does not do the same.\nWhile this does not cause a stalled program because scanRefsToChan()\ncreates its own anonymous function to read from the channel, that\nfunction will not exit until the progam stops.\n\nBy adding an explicit close() of the channel at the end of the\nanonymous function started by runCatFileBatchCheck(), we can ensure\nthe anonymous function which reads that channel will also exit\nas soon as possible.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1cb39dc5d411fde734de8396b5a1d9fafab23601", "commit_date": "2023-06-07T22:57:35Z", "commit_message": "commands,lfs: simplify GitScanner upload setup\n\nThe \"git lfs push\" and \"git lfs pre-push\" commands utilize the\nuploadForRefUpdates() function of the \"commands\" package, which\ncalls the (*uploadContext).buildGitScanner() method to initialize\na GitScanner structure with the additional elements necessary to\nexclude from the results any objects which are reachable from\nrefs known to exist on the given remote.\n\nTwo of these elements, the FoundLockable callback and the\nPotentialLockables set of pathspecs locked by other users (as used\nto report errors or warnings when attempting to push them, specifically\nwhen they are not Git LFS objects, for which lock verification is handled\nseparately), were added in commit 9b8bed74e2072a19228570185e1bda2911f69750\nof PR #1953, and are initialized following a call to the RemoteForPush()\nmethod of the GitScanner structure, which sets two other internal\nelements of the structure named \"remote\" and \"skippedRefs\".\n\nWe can therefore replace the RemoteForPush() method with a\nNewGitScannerForPush() function, which allows us to accept all\nthe necessary arguments for push operations in a single function,\nand to avoid exporting the GitScannerFoundLockable and\nGitScannerSet elements used to identify locked pathspecs.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9cc8fae9c9bdd35da11edf97fb4a7fda8b823bc", "commit_date": "2023-06-07T22:57:35Z", "commit_message": "lfs/gitscanner.go: un-export FoundPointer callback\n\nIn commit 781c7f55ad91c5a6111c4fbb328a768c18daa30b of PR #1953 the\nGitScannerFoundPointer \"callback\" element of the GitScanner structure\nwas exported from the \"lfs\" package by renaming it to \"FoundPointer\".\n\nHowever, this element has never since been utilized outside of the\npackage, so we can simplify the structure's set of exported elements\nby renaming it to \"foundPointer\".", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "577b308b038bf3b76656efb414fa9ca173dd67b4", "commit_date": "2023-06-07T22:57:35Z", "commit_message": "lfs/gitscanner{_refs}.go: remove ScanRefsOptions\n\nThe RevListScanner structure of the \"git\" package is constructed by\nthe NewRevListScanner() function, which takes a ScanRefsOptions\nstructure as an argument.  The git.ScanRefsOptions structure encapsulates\nthe large number of flags and other fields which a caller may potentially\nset for the \"git rev-list\" scanning operation.\n\nThe \"lfs\" package also has a similar ScanRefsOptions structure, which\nis used by the various Scan*() methods of the GitScanner structure to\npass optional flags and fields to the internal functions which implement\nthe scanning operations.  However, unlike the \"git\" package, this\nScanRefsOptions structure is not used when constructing a GitScanner,\nand is moreover never used outside of the \"lfs\" package.\n\nWe can therefore remove this structure in favour of a more conventional\nset of internal elements encapsulated directly in the GitScanner structure.\nThis simplifies the signatures of many of the internal scan*() functions\nand helps clarify what parts of the GitScanner structure actually\nneed to be exported.\n\nAs part of this change, we also create a new, dedicated and un-exported\nnameMap structure, which holds the map of Git object SHAs to their\npathspecs, as populated during scan operations.  It is then utilized\nin the existing lockableNameSet structure, whose Check() method is\ncalled by the runCatFileBatch() and runCatFileBatchCheck() functions\nto collect the pathspecs of files locked by other users.\n\nNote that the intent to remove the ScanRefsOptions structure from\nthe \"lfs\" package was discussed in several PRs in 2016, and in\nparticular, this commit's changes achieve some of the goals of the\nnever-merged PR #1595, but without introducing an entirely generic\n\"scanner\" package.  See also:\n\nhttps://github.com/git-lfs/git-lfs/pull/1670#discussion_r88731811", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a0986c786c98672ecf50e02b377e2e063ad7d0a5", "commit_date": "2023-06-07T22:57:35Z", "commit_message": "commands,lfs: drop GitScanner Close() method\n\nThe GitScanner structure and its methods were introduced in PR #1670,\nand in commit bdbca399c46f0447f08066ce53185009b3db90ec of that PR\nthe structure's Close() method was introduced.  Unlike other similar\nstructures whose Close() methods should be called to release underlying\nresources such as channels or I/O streams, the (*GitScanner).Close()\nmethod serves only to output an optional performance timing trace metric.\n\nThis Close() method is not called consistently; for instance, it is never\ncalled by the migrateExportCommand() function of the \"git lfs migrate\"\ncommand, and will be skipped by the checkoutCommand() function of the\n\"git lfs checkout\" command if an error is returned by the\n(*GitScanner).ScanTree() method.\n\nThe utility of the performance timing metric is also undercut by the\nfact that some commands perform other tasks before and after calling\nthe specific (*GitScanner).Scan*() method they invoke.  And in the\nparticular case of the \"git lfs prune\" command, multiple goroutines\nare started, each of which runs a different Scan*() method simultaneously\nwith the others, so the final timing metric does not account for\ntheir different execution times, just the overall final timing.\n\nWe can improve the value of the timing metric while also simplifying\nthe calling convention for the GitScanner structure's methods by\nremoving the Close() method, and tracing the performance of each\nScan*() method individually.\n\nRemoving the Close() method clarifies that no underlying resources\nmust be released for the GitScanner structure, and so callers need\nnot try to register a deferred call to the method.  This parallels\nsome other conventional Go structures, such as the Scanner structure\nof the \"bufio\" package.\n\nAs well, running a \"git lfs prune\" command with the GIT_TRACE_PERFORMANCE=1\nenvironment variable set now results in more detailed and useful output,\nfor example:\n\n  12:36:51.221526 performance ScanStashed: 0.013632533 s\n  12:36:51.224494 performance ScanUnpushed: 0.016570280 s\n  12:36:51.240670 performance ScanTree: 0.017171717 s", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2dd8934ff061e1d2b4dbda824bf666c6e7deeb43", "commit_date": "2023-06-07T22:57:34Z", "commit_message": "commands,lfs: remove GitScanner internal mutex\n\nThe GitScanner structure and its methods were introduced in PR #1670,\nand in commit bdbca399c46f0447f08066ce53185009b3db90ec of that PR\nthe structure's internal sync.Mutex element was added to protect access to\nthe \"remote\" and \"skippedRefs\" elements, as well as the \"closed\" element.\nThe structure's methods always acquire the mutex before reading or writing\nthese elements, particularly the \"remote\" one.\n\nThis type of design is typical of other structures where we expect\nconcurrent access to the structure's data, such as when multiple\ngoroutines attempt to read and write the same data.\n\nHowever, in practice the GitScanner structure's \"remote\" and \"skippedRefs\"\nelements are only ever initialized once, and indeed only initialized in\none specific use case by the (*uploadContext).buildGitScanner() method\nfor the \"git lfs push\" and \"git lfs pre-push\" commands.  Meanwhile,\nthe \"closed\" element is only used in the Close() method, and this\nmethod is only ever called once per structure by our existing code.\n\nMoreover, other elements of the GitScanner structure which have been\nadded since its original introduction are set and retrieved without\nlocking the mutex, such as the FoundLockable and PotentialLockables\nelements, which are checked and read directly in the scanRefsToChan()\nfunction of the \"lfs\" package.\n\nAs it never the case that multiple goroutines need to read and write\nto the \"remote\", \"skippedRefs\", and \"closed\" internal elements of the\nGitScanner structure, we can remove the mutex and the associated code,\nwhich simplifies the setup of the structure.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c40840c7c1a68cf1bbbf9d7ad8791f8b924572d9", "commit_date": "2023-06-07T22:57:34Z", "commit_message": "commands/command_fetch.go: drop unused GitScanner\n\nIn commit d5fd15225d0d31508c12042de174d2fdc5201b84 of PR #1745 the\n\"git lfs fetch\" command, among others, was revised to set the Filter\nelement of the GitScanner structure, and no longer pass a common\nGitScanner created in the main fetchCommand() function to various\nother functions such as scanAll() and fetchAll().\n\nAs a result, the GitScanner structure created in the fetchCommand()\nfunction was no longer used, but it was not fully removed at the time,\nas was done in the \"git lfs checkout\" command's checkoutCommand()\nfunction, for instance.  Therefore we can simply remove this unused\nstructure's initialization now in the fetchCommand() function.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "20412d99a5067e29ee1009e0964de7c27883459f", "commit_date": "2023-06-07T22:57:34Z", "commit_message": "lfs/gitscanner{_log}.go: drop unused scan arg\n\nIn commit 404992801e194f50d5f3ea8dda56d5fc14671795 of PR #4209 the\nscanStashed() function of the \"lfs\" package was revised to no longer\nmake use of the *GitScanner argument that was part of its original\nimplementation from commit 2dc718b38c41f7525c5b7b12e6b23ed558a81cc5\nin the same PR.\n\nHowever, the argument was never dropped from the function's signature,\nso we can remove it now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1d64521df7b21621ea5604818317b5ecb13a6a1d", "commit_date": "2023-06-07T22:57:34Z", "commit_message": "lfs/gitscanner.go: remove unused scan method\n\nIn commit d0e950d650d19e04fbe031d01b5fa51b95195116 of PR #3978 the\nScanMultiRangeToRemote() method of the GitScanner structure was added,\nand the sole caller of the existing ScanRangeToRemote() method was\nrevised to call the new scan method instead.\n\nAs no additional callers of the existing method have been introduced\nsince then, we can simplify our code by removing the unused method now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4f18bc46786e80ddb0d0763a1ca603690e7a4a1e", "commit_date": "2023-06-07T19:08:15Z", "commit_message": "Merge pull request #5385 from salvorizza/json-unlock-id-fix\n\nUnlock by ID with JSON Flag returns empty array", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0a269d1a08d54db07519c2de3bc7ee6e50f81a32", "commit_date": "2023-06-07T07:01:07Z", "commit_message": "Added test", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "82d2dd68c59d88a7655f45edab1059acbf16b5c5", "commit_date": "2023-06-06T10:41:30Z", "commit_message": "Unlock by ID with JSON FLag returns empty array", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "29dc7cc12772e9f89ff29ec3645cbc5274d95860", "commit_date": "2023-06-05T14:18:32Z", "commit_message": "Merge pull request #5381 from bk2204/credential-helper-v2\n\nAdd support for `wwwauth[]` to credential helpers", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "badde878a38fa2e37898ada0cbb007e7d6bb118b", "commit_date": "2023-06-02T13:25:59Z", "commit_message": "Pass authentication types to Git credential helpers\n\nGit recently added a new field to the credential helper, `wwwauth[]`,\nwhich may be repeated and includes all of the `WWW-Authenticate` headers\nso that the credential helper may choose an appropriate set of\ncredentials and extract any sort of necessary data from the field (such\nas challenge).\n\nIn Git LFS, we also want to do this with the `LFS-Authenticate` headers\nas well, since those are often used for the same purpose, so include\nboth these headers in that field when passing them to `git credential\nfill`.\n\nNote that `git credential fill` only honours this value and passes it to\nthe credential helper in Git 2.41 and newer (including the latest\n`HEAD`).  However, just to be safe, let's add an undocumented and\nexperimental option (`credential.*.skipwwwauth`) that users can use to\ncontrol this, which we can remove in a few releases if it turns out it's\nnot needed.  Similarly, skip our new tests if we have an older version\nof Git where this doesn't work, since they'll otherwise fail.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5d5f90e286b1fbae6b6894463a1017d055d840ec", "commit_date": "2023-06-02T13:25:59Z", "commit_message": "creds: allow multiple values for a key\n\nIn the upcoming changes to the credential helper protocol, we'll be able\nto specify multiple values for the same key.  In order to make this\nwork, let's make the credential structure able to handle multiple\nvalues.\n\nNote that if there are multiple values, we'll only use the first one for\nmost keys.  That simplifies the logic and allows us to gracefully handle\nfuture extensions to the protocol.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bdd529dbb2c0f38fbf327abd963fc673137a74f", "commit_date": "2023-06-01T14:56:04Z", "commit_message": "Merge pull request #5382 from chrisd8088/fix-migrate-info-panic\n\nRefactor macro attribute handling to prevent crashes with `--fixup` migration option", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "07b1adf4d059dc522c6413ff8af5133e2050f225", "commit_date": "2023-06-01T09:34:10Z", "commit_message": "t: add future tests of migrate \"lfs\" macro support\n\nIn a previous commit in this PR we have refactored our handling of\nparsed lines from .gitattributes files, and in doing so we have\nupdated the Applied() method of the Tree structure in the \"git/gitattr\"\npackage so that it has to perform a type check on each Line to\nconfirm that it implements the PatternLine interface, before applying\nthat Git attribute's match pattern to the method's file path argument.\n\nThis resolves the problem reported in #5332 where the\n\"git lfs migrate info --fixup\" and \"git lfs migrate import --fixup\"\ncommands would panic when they encountered a .gitattributes file\nwith a non-pattern macro definition line.\n\nHowever, these commands do not yet fully support macro attributes,\nas they never create a MacroProcessor structure and thus never call\nits ProcessLines() method on the \"raw\" lines parsed from each\n.gitattributes file they encounter while traversing a repository's\nGit commits and trees.\n\nAs a result, if a valid .gitattributes file exists in a repository\nand defines a macro attribute for the \"lfs\" filter, and assigns\nthis macro attribute to a pattern which matches a file that is not\na proper Git LFS object, the two commands ignore this and do not\neither report or convert the object into a Git LFS object as they\nshould.\n\nWhile we expect to resolve this problem in a subsequent commit,\nfor the present time we simply add two tests which illustrate the\nissue, but which we comment out as they would otherwise cause their\ntest suites to fail.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1330ffab0509d2e07f74a03fb0eb83675f93e89a", "commit_date": "2023-06-01T09:17:36Z", "commit_message": "git,t: refactor macro attribute handling\n\nSupport for Git macro attributes was added in a series of commits\nin PR #3391, including commit 9d3e52d6871ff4e793c4825622e3b2dc53a47eb5,\nwhere the Line structure of the \"git/gitattr\" package was updated\nto include a Macro element which would be set non-nil for macro\ndefinition lines in a .gitattributes file file, while the existing\nPattern element would be set non-nil for all other lines.\n\nThe \"git lfs track\" command, among others, was then adjusted to\ncreate a MacroProcessor structure (from the same \"git/gitattr\" package)\nand call its ProcessLines() method to resolve any macro references\nand thus convert the \"raw\" parsed Line structures into a set for\nwhich the Pattern element was always non-nil, and no Macro elements\nappeared.\n\nLater, the \"git lfs fsck\" command gained the ability to process\nmacro definitions in .gitattributes files, in PR #4525.\n\nHowever, the \"git lfs migrate import\" command was not adjusted,\nspecifically in the implementation of its \"--fixup\" option, which\ninitializes a Tree structure (also of the \"git/gitattr\" package) for\nthe root tree of each commit in a repository's history using the\npackage's New() function.  This function traverses all the trees\nin the hierarchy and finds and parses all the .gitattributes files\nin them.  Then, when the command visits each file within the\ncommit's tree using the Rewrite() method of the Rewriter structure\nin the \"git/githistory\" package, it calls the (*Tree).Applied()\nmethod to match the file's path against any applicable Git attributes,\nto see if the file should be treated as a Git LFS object.\n\nThis lack of support for macro attributes in the \"git lfs migrate\nimport --fixup\" command was then propagated to the \"git lfs migrate\ninfo --fixup\" command in commit 4800c5e9882f9cf1e271a855baeb32dbe1f767ec\nof PR #4501, when the \"git lfs migrate info\" command was updated to\nrespect the --fixup option.\n\nAs a result, both of these commands (when used with the --fixup option)\npanic if they encounter a .gitattributes file with any macro\ndefinitions, as they call the (*Tree).Applied() method and it\nattempts to access the nil Pattern element of the lines with\nnon-nil Macro elements.  (Prior to the changes in commit\nc374d1f5df22fb164a8c4608cd8ad9a895ac4ec2 of PR #5375 the \"git lfs migrate\nimport --fixup\" command would then stall indefinitely, but it now\nalso exits after the panic condition.)  These problems were reported\nin issue #5332.\n\nTo resolve this problem and avoid similar ones in the future, we\nrefactor the Line structure into a Line interface, which only provides\nan Attrs() method to retrieve a slice of Attr attributes, and no other\nmethods.  We then also define two additional interfaces, each of which\nembeds the Line interface, PatternLine and MacroLine, with corresponding\ngetter methods for their respective elements.\n\nThe ParseLine() function of the \"git/gitattr\" package now returns a\nslice of generic Line types, each of which is either a PatternLine\nor a MacroLine, but never both.  Callers like the Applied() method of\nthe Tree structure therefore need to perform type assertions or\nswitches to determine which type of Line they are handling, which\nensures they always access the line's data through safe methods.\n\nWe then update the Go tests for the \"git/gitattr\" package as\nappropriate, and also add two tests each to the t/t-migrate-fixup.sh\nand t/t-migrate-import.sh test suites.  All four of these new\nshell tests fail without the changes in this commit.  In particular,\nseveral of these tests make sure to run the \"git lfs migrate\" commands\noutside of any shell pipeline so the test will fail if the command\npanics and produces no output, even if no output is the expected\ncondition for a successful execution of the command.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6b4288695270bef4cc3f905d137dca4cbc1af371", "commit_date": "2023-06-01T07:42:40Z", "commit_message": "t: refine migrate fixup test with no gitattributes\n\nThe \"migrate info (--fixup, no .gitattributes)\" test was added\nto the t/t-migrate-info.sh test suite in commit\n4800c5e9882f9cf1e271a855baeb32dbe1f767ec of PR #4501, when we\nadded --fixup option support to the \"git lfs migrate info\" command.\n\nAs we expect to introduce additional, similar tests in subsequent\ncommits in this PR, we rename the test to clarify that no fixup\naction is expected in this case, and refactor the test's invocation\nof the \"git lfs migrate info --fixup\" command so that it does not\nrun inside a pipeline.  This latter change ensures that if the\ncommand fails, the test also fails due to the \"set -e\" shell option.\n\nWhile this change to avoid the use of a pipeline is not critical for\nthis test, it will be important for the similar tests we add in\nsubsequent commits, because they will need to validate that the\n\"git lfs migrate info --fixup\" command does not simply crash and\nproduce no output on stdout, which, if it occured in a pipeline,\nwould not be detected.  This is particularly true in these tests\nbecause we expect the command to produce no output on stdout, which\nit would not do both on success and if it panics, so we can not\ndistinguish these cases by examining the number of lines of output.\n\nWe then make a copy of this test in the t/t-migrate-fixup.sh test\nsuite as well, except using the \"git lfs migrate import --fixup\"\ncommand, as we also expect to add similar tests to this suite in\nsubsequent commits.  Note that for this test it is critical that\nwe supply the --yes option to the command, to avoid it waiting\nforever for input because it has detected the log file as a new\nfile in the Git working tree and therefore has prompted for\nconfirmation to proceed.\n\nFinally, we remove one unneeded \"git add\" command from the\nsetup_single_local_branch_tracked_corrupt() test helper function,\nwhich we refactor further in subsequent commits.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "05926b133219a29f6cd77b95cfd3aa235703ae90", "commit_date": "2023-05-30T16:09:24Z", "commit_message": "Merge pull request #5375 from chrisd8088/update-tasklog-complete-all-tasks\n\nEnsure all logging tasks are closed and simplify log task dispatching", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f142101c1b3861f2d01401e7f2c8cb27e831f653", "commit_date": "2023-05-26T23:15:21Z", "commit_message": "commands: use defer to always close tasks\n\nIn the implementation of several commands we create structures with\nthe Task interface from the \"tasklog\" package, and enqueue them to be\nreported by an anonymous goroutine created by the Logger structure's\nconsume() method for each task.  These goroutines only exit when the\nchannel returned by the the Task's Updates() method is closed.\n\nIn order to ensure that we always close the channel associated with\neach task, we refactor the creation and use of these tasks into small\nutility functions.  We can then establish a deferred call to the\ntasks' Complete() methods immediately after creating the tasks.\nAs these deferred calls will always be executed when returning from\nthe new utility functions, even under exceptional conditions, the\nwaiting goroutines will never fail to exit and thus cause the entire\nprogram to hang.\n\nThis usage corresponds to the resource management approach used\nelsewhere, such as in the scanAll() and pointersToFetchForRefs()\nfunctions of the \"git lfs fetch\" command, where SimpleTask objects\nare created and a deferred call to their Complete() method is\nimmediately established.  This technique is also used in the\nUpdateRefs() method of the refUpdater structure in the \"git/githistory\"\npackage, where a ListTask is created and a matching deferred call\nto its Complete() method is then defined, and in previous commits\nin this PR we updated the locations in our code where we create\nPercentageTask structures to follow the same pattern too.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6bf3aa058532b58029f61c644b4146b5f275fe9", "commit_date": "2023-05-26T16:59:22Z", "commit_message": "commands/command_prune.go: always complete task\n\nIn a prior commit in this PR, we added a Complete() method for\nthe PercentageTask structure which sets the number of completed\nelements of the task to the task's expected total in an atomic swap,\nand then closes the task's updates channel if the number of completed\nelements was less than the expected total.\n\nAs noted in that same commit, this allows us to establish a deferred\ncall to the Complete() method after creating a PercentageTask structure,\nakin to how we handle other \"tasklog\" package task structures such as\nListTask and WaiterTask.  Use of this idiom ensures that even if the\ncalling function returns due to an unexpected error or panic condition,\nthe anonymous goroutine started by the consume() method of the Logger\nstructure that is waiting on the task's updates channel will exit\ncleanly, preventing a hung process.\n\nWe therefore now update the other use of the PercentageTask structure,\nin the \"git lfs prune\" command's pruneDeleteFiles() function, to\nfollow the same approach as we have already implemented for the\nRewrite() method of the Rewriter structure in the \"git/githistory\"\npackage.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c374d1f5df22fb164a8c4608cd8ad9a895ac4ec2", "commit_date": "2023-05-26T16:59:22Z", "commit_message": "git/githistory/rewriter.go: always complete task\n\nIn a prior commit in this PR, we added a Complete() method for\nthe PercentageTask structure which sets the number of completed\nelements of the task to the task's expected total in an atomic swap,\nand then closes the task's updates channel if the number of completed\nelements was less than the expected total.\n\nAs noted in that same commit, the PercentageTask structure is used\nin the methods of the Rewriter structure from the \"git/githistory\"\npackage.  It is initialized with the number of commits to be rewritten\nduring a \"git lfs migrate\" command's traversal of a Git repository's\nhistory.  As each commit is rewritten, the Count() method is called to\nincrement the percentage completed value.  When every commit has been\nrewritten, the count reaches the expected total, and the Count() method\ncloses the channel, thus allowing the task receiving updates to finish\nand exit its goroutine.\n\nUnder exceptional circumstances, though, the Rewrite() method of\nthe Rewriter structure may never finish iterating through all\nthe expected commits, and return in error or via a panic call.\nWhen this happens, the anonymous goroutine started by the consume()\nmethod of the Logger structure in \"tasklog\" package that is waiting\non the PercentageTask's updates channel can never exit, leading to\na hung process which never fully exits.\n\nWe can resolve this problem now by defining a deferred call to the\nPercentageTask's new Complete() method after we create the task\nstructure in the Rewrite() method of the Rewriter structure.\nAs a result, even if the Rewrite() method suffers a panic() or\nother error condition causing an early return, the PercentageTask's\nupdates channel is closed and the waiting goroutine will complete\nand exit normally.\n\nThis usage corresponds to the resource management approach used\nelsewhere, such as in the scanAll() and pointersToFetchForRefs()\nfunctions of the \"git lfs fetch\" command, where SimpleTask objects\nare created and a deferred call to their Complete() method is\nimmediately established.  This technique is also used in the\nUpdateRefs() method of the refUpdater structure in the \"git/githistory\"\npackage, where a ListTask is created and a matching deferred call\nto its Complete() method is then defined.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "40dc75649bd6ce6064b64abac9ddb4d66ef95987", "commit_date": "2023-05-26T16:59:22Z", "commit_message": "tasklog/percentage_task.go: add Complete() method\n\nIn commit e90d54dabb45fd61c0c98803e009961800422010 of PR #2329 the\n\"git/githistory/log\" package was added, including the PercentageTask\nstructure and associated methods, but unlike the WaitingTask which\nwas added at the same time, no Complete() method was defined for\nthe PercentageTask structure.\n\n(Note that the \"git/githistory/log\" package was later renamed to the\n\"tasklog\" package in commits b9ab79ef899c4ee7cb656cdcbed666eed04c3022\nand 45c580e60abfa36d0f9affba8b236f0e6516ce1d of PR #2747.)\n\nOther task types such as the ListTask and SimpleTask structures\n(introduced in commit 31ffeb94f9e3180939af3019787a5c02b6035851 of\nPR #2335 and commit 7a760b6b43d1131bbac89a552cf656b7fa6ce17a of PR #2756,\nrespectively) provide a Complete() method, and the Meter task type\nof the \"tq\" package, which implemented the Task interface in commit\n7c0f9e23f7f806811a7262d3f8ff17ad3b6cbe5b of PR #2732, provides an\nequivalent Finish() method.  These methods allow the caller to\nexplicitly close the channel returned by the Updates() method,\non which the anonymous goroutine started by the Logger.consume() method\nfor the task is waiting, in a \"range\" loop on the channel in the\nLogger.logTask() method.\n\nOne key use of the PercentageTask structure is in the methods of\nthe Rewriter structure from the \"git/githistory\" package.  It is\ninitialized with the number of commits to be rewritten during\na \"git lfs migrate\" command's traversal of a Git repository's history.\nAs each commit is rewritten, the Count() method is called to\nincrement the percentage completed value.  When every commit has\nbeen rewritten, the count reaches the expected total, and the\nCount() method closes the channel, thus allowing the task receiving\nupdates to finish and exit its goroutine.\n\nUnder exceptional circumstances, though, the Rewrite() method of\nthe Rewriter structure may never finish iterating through all\nthe expected commits, and return in error or via a panic call.\nWhen this happens, the goroutine waiting on the PercentageTask's\nupdates channel can never exit, leading to a hung process which\nnever fully exits.\n\nIn order to allow the Rewriter's Rewrite() method to define a\ndeferred function which will always be called when it returns,\nunder any circumstances, we add a Complete() method for the\nPercentageTask structure which sets the number of completed elements\nto the expected total in an atomic swap, and then closes the\nupdates channel if the number of completed elements was previously\nless than the expected total.\n\nWe also add a test to validate this new method's behaviour, and\nupdate the existing TestPercentageTaskCallsDoneWhenComplete()\nfunction to also confirm that calling the new Complete() method\nafter the number of completed elements has reached the expected\ntotal does not cause a second attempt to close the updates channel.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3d872ab80eb9941a72fd56a030ae0a87d9cb98c0", "commit_date": "2023-05-26T16:59:22Z", "commit_message": "tasklog/log.go: simplify consume() method\n\nThe *Logger.consume() method in the \"tasklog\" package was first\nintroduced in commit e90d54dabb45fd61c0c98803e009961800422010 of\nPR #2329, and since that time has included logic to manage an\ninternal \"pending\" list of tasks; however, that logic is never\nexercised because tasks are only appended to the \"pending\" array\nwhen the \"next\" variable is non-nil, but that variable is\ninitialized as nil and can only be set to another value if the\n\"pending\" array is non-empty.\n\nAs a result, we can remove both variables and the related logic\nand simplify the consume() method as a result.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1cb3dc3e2cddb452039f4d21765f7168c58c9779", "commit_date": "2023-05-26T16:59:22Z", "commit_message": "tasklog/log.go: use common tools max int function\n\nIn commit f10029319c3dd3b8e0dbad4a616912b23d182bd3 of PR #2732 a local\nmaxInt() function was added to the \"git/githistory/log\" package in order\nto avoid a circular dependancy on the \"tools\" package, which provides\na common MaxInt() implementation.  See, for reference, the discussion\nin this PR comment:\n\nhttps://github.com/git-lfs/git-lfs/pull/2732/commits/f10029319c3dd3b8e0dbad4a616912b23d182bd3#r151551639\n\nThe \"git/githistory/log\" package was subsequently renamed to\nthe \"tasklog\" package in commits b9ab79ef899c4ee7cb656cdcbed666eed04c3022\nand 45c580e60abfa36d0f9affba8b236f0e6516ce1d of PR #2747.\n\nAt present, though, there is no cyclic dependency which prevents\nthe use of the standard tools.MaxInt() function in the \"tasklog\"\npackage, so we revert to its use now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7bd5791f32a4aeac26b9a61688d85eedf751825e", "commit_date": "2023-05-26T08:58:00Z", "commit_message": "commands/command_{fetch,prune}.go: tidy task setup\n\nThe SimpleTask structure of the \"tasklog\" package, which was introduced\nin commit 7a760b6b43d1131bbac89a552cf656b7fa6ce17a of PR #2756, is used\nat several points in the implementation of the \"git lfs fetch\" and\n\"git lfs prune\" commands, and in each case is constructed with a\ncall to the NewSimpleTask() function, and then passed to a Logger\nstructure's Enqueue() method.\n\nHowever, in commit 0cad488c23350ff35f969980753bf9798071942e of PR #2767,\na Logger.Simple() method was added to both create a new SimpleTask\nstructure and pass it to a Logger structure's Enqueue() method.  This\nLogger.Simple() method was added to be consistent with other existing\nsimilar methods such as Logger.List() and Logger.Percentage().\n\nThese other methods are used consistently throughout our code\nto create and enqueue tasks, so we now update the locations where\nwe call NewSimpleTask() to use the Logger.Simple() method instead.\n\nThis also provides an opportunity to tidy some of the surrounding\ncode and whitespace.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a5e26b2705e6d04e1dd08b29706ea7018acf31be", "commit_date": "2023-05-26T08:36:19Z", "commit_message": "git/githistory/rewriter.go: drop unused log option\n\nIn commit 3129b9a7a6134509132dbb9b6cf53de53ca3d4e8 of PR #2537 the\n\"githistory\" package was updated so the WithLogger global option\nvariable now required a *log.Logger argument instead of calling\nlog.NewLogger().  This was done so the \"git lfs migrate\" commands\ncould pass in a previously initialized logger to which the commands\nhad already written log messages; that change was introduced in\nPR #2538.\n\nIn the same commit of PR #2537, a WithLoggerTo global option function\nwas added to preserve the existing behaviour.  However, this option\nhas never been utilized, and so to reduce unnecessary complexity\nwe just remove it now.\n\nNote that the use of functional options in the Git LFS project\nstems from PR #2295 and is inspired by the design proposed in several\narticles from 2014; see, for reference:\n\nhttps://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis\nhttps://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b8d5c3c5a8d81df8d2f18fdbc42bb5462e322f0c", "commit_date": "2023-05-26T08:36:19Z", "commit_message": "tasklog/percentage_task.go: align receiver name\n\nIn commit e90d54dabb45fd61c0c98803e009961800422010 of PR #2329 the\n\"git/githistory/log\" package was added, including the PercentageTask\nstructure and associated methods.  Then in commit\n122b76543a494d634ffd8c0a9225e0459691ebaa of PR #2610 the Entry()\nmethod was added to provide support for verbose logging in the\n\"git lfs migrate impot\" command.  However, the name of the\nreceiver argument for the Entry() method differs from that of\nthe other methods for the PercentageTask structure, so we update\nit to match now, as well as fixing a typo which remains from the\noriginal commit in PR #2329.\n\nNote that the \"git/githistory/log\" package was later renamed to the\n\"tasklog\" package in commits b9ab79ef899c4ee7cb656cdcbed666eed04c3022\nand 45c580e60abfa36d0f9affba8b236f0e6516ce1d of PR #2747.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46d1a93b2246e7d9acfb3c7b7a62353442781af7", "commit_date": "2023-05-26T08:36:19Z", "commit_message": "tasklog/{log,waiting_task}.go: fix code comments\n\nWe can update several code comments in the \"tasklog\" package to\nreflect their corresponding functions and fix typos.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1efc16b424ea1f88bfbcfe81a667bcfb2cdba3d5", "commit_date": "2023-05-15T17:07:31Z", "commit_message": "Merge pull request #5349 from bk2204/faq-tree-archive\n\nFAQ: add entry on archiving subdirectories", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "633926c01bf1eb16b1b455ac9db218d179b9624a", "commit_date": "2023-05-11T16:09:44Z", "commit_message": "Merge pull request #5364 from slonopotamus/cleanup-legacy\n\nDrop pre-1.13 Go compatibility code", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "30b7451f84e248b0e236d2d02968b06758caac4d", "commit_date": "2023-05-11T12:38:53Z", "commit_message": "Drop pre-1.13 Go compatibility code", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e96b5d5d84095d1c0dd0c550d8fdf2c8c5c6456", "commit_date": "2023-05-03T12:39:47Z", "commit_message": "Merge pull request #5355 from bk2204/install-file\n\nAdd a `--file` option to install and uninstall", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84ca7e7875d1a32c07dc56c8ad0e33f38f59a824", "commit_date": "2023-05-02T14:11:27Z", "commit_message": "Add a `--file` option to install and uninstall\n\nThere are actually two possible global configuration files,\n`$HOME/.gitconfig` and `$XDG_CONFIG_HOME/git/config`.  However, the\n`--global` file by default modifies only the former if it's present.\nAdd a `--file` option to `git lfs install` and `git lfs uninstall` so\nthat users can choose which of those files they'd like to use.\n\nUpdate several tests to deal with our new, simpler error message so we\ncan avoid having to produce a huge number of different error messages.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "698e6a8f9047981124d0f33efcf704ff4cf755ce", "commit_date": "2023-04-27T15:41:57Z", "commit_message": "Merge pull request #5350 from bk2204/locking-api-stderr\n\nlocks: print warning about locking API to standard error", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "109e4f97ddb97bd87e2b67cb90cbc8d8b517a1e5", "commit_date": "2023-04-26T20:55:37Z", "commit_message": "locks: print warning about locking API to standard error\n\nThis is a diagnostic and as such should go to standard error.  Doing so\nit consistent with what Git does, so do so here as well.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "75c6938c6f6e765d00487f3b9acebeec94a3d8fd", "commit_date": "2023-04-26T20:55:17Z", "commit_message": "FAQ: add entry on archiving subdirectories\n\nWe've gotten a couple of inquiries about archiving subdirectories such\nthat the LFS files are included.  Let's add a FAQ entry on why this\ndoesn't work by default and how people can make it work.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8171245a5afa020805232020b0198f334400d16", "commit_date": "2023-04-26T20:53:40Z", "commit_message": "Merge pull request #5353 from bk2204/ci-fix-latest-git\n\nFix CI by enabling Git protocol v2", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "460701af843a6d6ef314ce376a46f664960e574d", "commit_date": "2023-04-26T19:25:34Z", "commit_message": "lfstest-gitserver: pass the protocol version to Git\n\nSome time back, Git added support for protocol version 2 over HTTP.\nThis is announced by the `Git-Protocol` header, the value of which Git\nexpects to see as the `GIT_PROTOCOL` environment variable.  If it\nreceives that value, then it switches into protocol v2 mode.\n\nWhile this is a nice to have in general, it's presently important to fix\nour testsuite in CI when testing in SHA-256 mode.  In that mode, we set\n`GIT_DEFAULT_HASH=sha256` to specify the default hash algorithm.  In\nprotocols v0 and v1, Git does not send a capabilities line by default\n(although one is accepted) in an empty repository, and if no such line\nis present, it's not possible to discern the hash algorithm in use.\n\nGit recently (after 2.40) added a patch that resulted in empty\nrepositories that are cloned not honouring `GIT_DEFAULT_HASH` in such a\ncase, so if no refs are set, we end up with a SHA-1 repository, which\nmakes our tests fail since they don't interoperate.  This will likely be\nfixed upstream by both announcing a dummy capabilities line like for\npushes and by restoring the use of `GIT_DEFAULT_HASH` when no hash\nalgorithm can be explicitly determined.\n\nIn any event, none of this matters with protocol v2, since in that case\ncapabilities are sent as part of the initial refs request and we always\nknow the hash algorithm.  Since this will always work for affected Git\nversions, let's make sure we enable protocol v2 in the test server if\nthe client supports it.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bea0287cdd3acbc0aa9cdf67ae09b6843d3ffcf0", "commit_date": "2023-04-01T19:09:52Z", "commit_message": "Merge pull request #5328 from git-lfs/dependabot/github_actions/actions/setup-go-4\n\nbuild(deps): bump actions/setup-go from 3 to 4", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "10cbbe9becbeebdf49b0163597b4adbf89381012", "commit_date": "2023-04-01T04:58:33Z", "commit_message": "build(deps): bump actions/setup-go from 3 to 4\n\nBumps [actions/setup-go](https://github.com/actions/setup-go) from 3 to 4.\n- [Release notes](https://github.com/actions/setup-go/releases)\n- [Commits](https://github.com/actions/setup-go/compare/v3...v4)\n\n---\nupdated-dependencies:\n- dependency-name: actions/setup-go\n  dependency-type: direct:production\n  update-type: version-update:semver-major\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1c16945d926de791e9104460caab3b4abfa722cb", "commit_date": "2023-03-31T21:45:14Z", "commit_message": "Merge pull request #5327 from chrisd8088/revise-migrate-docs\n\nClarify `git lfs migrate` handling of local and remote references", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "159376f79d55aaa64cda7e3d262cd953d1e4aadd", "commit_date": "2023-03-31T08:16:15Z", "commit_message": "docs/man/git-lfs-migrate: clarify re remote refs\n\nWhen using the \"git lfs migrate\" command with its --everything option,\nall commits reachable from any refs, local or remote, are considered\nfor migration; however, per PR #2559, only local refs are updated\nafter the migration to avoid desynchronizing remote refs with the\norigin.\n\nWe therefore clarify this distinction in the command's manual page,\nas well as clarifying that the \"git push\" command's --all option\nrefers only to local branches.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "78ecb1fd75e84891cd23a1e266142f8ac8d3641e", "commit_date": "2023-03-29T20:56:41Z", "commit_message": "Merge pull request #5326 from chrisd8088/update-go-1-20\n\nUpdate to Go version 1.20", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f421a33f3fbcbc66a0c85812c5c598a582b60c6e", "commit_date": "2023-03-29T16:36:39Z", "commit_message": "update to Go 1.20\n\nAs our official policy is to support the latest version of Go, we\nupgrade our CI and release workflows to version 1.20, which was\nrecently released.\n\nWe also drop support for versions older than 1.19 as they are\nnot supported by upstream Go.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac083f70e7b1b8aef9639f2b2a1c8b080e7c2a02", "commit_date": "2023-03-29T16:35:35Z", "commit_message": "Merge pull request #5325 from chrisd8088/remove-video-link\n\nRemove stale video link", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "387727951cb3e3a8d9bed7c9cbe3f1a0dff221c4", "commit_date": "2023-03-29T14:31:31Z", "commit_message": "Merge branch 'main' into remove-video-link", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5dbee4f7c12841222be26d3223e0063fc9348135", "commit_date": "2023-03-29T12:35:04Z", "commit_message": "Merge pull request #5311 from anihm136/feat/shell-completions\n\n[WIP] Add shell completion generation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "150e52bde4032059362586fde5234d3f88373922", "commit_date": "2023-03-29T04:49:12Z", "commit_message": "docs/README.md: remove stale video link\n\nIn commit 2f5b120dba77dfb2e2d03422864d7462717f1347 of PR #682 a link\nto a YouTube video on the \"GitHub Training & Guides\" channel was added\nto the docs/README.md file.  The video was named \"Git Large File\nStorage - How to Work with Big Files\".\n\nHowever, this YouTube channel has now been decommissioned by GitHub\nand the video is no longer available, so until a replacement is\navailable, we remove the link to the old video.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b41ba0f415ffd20946a9bffb83d9fae2f3a0df15", "commit_date": "2023-03-28T16:57:31Z", "commit_message": "Merge branch 'main' into feat/shell-completions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8434ced48e3594ae275d78d71f52746ddc48a069", "commit_date": "2023-03-28T16:57:11Z", "commit_message": "Merge pull request #5309 from bk2204/ssh-transfer-manifest\n\nAvoid needlessly spawning SSH connections with `git archive`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a0065c0a484cd69fc2c20fc16512488f6a7e6e3e", "commit_date": "2023-03-28T15:21:58Z", "commit_message": "tq: avoid spawning SSH process needlessly\n\nWhen a user invokes `git archive` with LFS files, `git lfs\nfilter-process` is invoked to smudge the LFS files.  However, currently\nwhen we instantiate the manifest object as part of that, an attempt is\nmade to connect to the remote using SSH, which we don't want to do\nunless necessary.  For example, if the user already has all the files\nlocally, the network connection is needless and serves only to waste\nresources.\n\nIn the previous commit, we made our manifest an abstract interface with\na single implementing type: a concrete manifest.  Now, introduce a lazy\nmanifest, which can upgrade to a concrete manifest but doesn't\ninstantiate one until that happens.  This allows us to instantiate a\nmanifest without making the SSH connection, and we can delay the SSH\nconnection until it's really needed, if at all.\n\nAdd a test for this case as well.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "00623425a2822b041fd1bf97803ff834a8ebb0a2", "commit_date": "2023-03-23T16:55:57Z", "commit_message": "tq: make Manifest an interface\n\nRight now, any time we instantiate a Manifest object, we create an API\nclient, and when we create the API client, if we're using SSH, we try to\nmake a connection to the server.  However, we often instantiate a\nManifest object when performing various functionality such as smudging\ndata, which means that when a user creates an archive locally, they can\nbe prompted for an SSH password, which is undesirable.\n\nLet's take a first step to fixing this by making Manifest an interface.\nRight now, it has one concrete version, a concreteManifest, which can be\nused to access the internals, and we provide methods to upgrade it from\nthe interface to the concrete type and determine whether it's upgraded\nor not.  We attempt to upgrade it any time we need to access its\ninternals.  In the future, we'll also offer a lazyManifest, which is\nlazy and will only instantiate the concreteManifest inside when we\nattempt to upgrade it to the latter.  But for now, only implement the\nconcreteManifest to make it clearer what's changing.\n\nSimilarly, we make our TransferQueue upgradable so that we don't\nupgrade its Manifest right away.\n\nIn both cases, we'll want to use the lazyManifest to delay the\ninstantiation of the API client (and hence the starting of the SSH\nconnection) in a future commit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0c8567aca78b84d7204a794202d5d2453b927d4", "commit_date": "2023-03-23T16:51:20Z", "commit_message": "Merge branch 'main' into feat/shell-completions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7a4005c60df54a33daf184c44a7502ebad4dba82", "commit_date": "2023-03-23T16:51:03Z", "commit_message": "Merge pull request #5317 from bk2204/windows-ci-relative-path\n\nFix Windows CI with Go 1.20", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "34c680b6a74048b99bc8a8fe048a12578e015b0f", "commit_date": "2023-03-22T19:53:28Z", "commit_message": "commands: compare patterns using slashes\n\nWhen we compare a pattern path with the version in the `.gitattributes`\nfile, use slashes, since that's what the pattern in the file will be\nusing.  To do so, use the `path` module, not `filepath`, the latter of\nwhich uses the OS's path separators, which on Windows is backslashes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9b4f8505c8c7c21c71f96f43370be1f79fb81d80", "commit_date": "2023-03-22T17:28:50Z", "commit_message": "Format with goimports", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "83e997436fc8fc7e06f982bf33f25881d7919d3c", "commit_date": "2023-03-22T13:11:52Z", "commit_message": "Fix for localization", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7808af7294fc244c388e6016d65ed29803ef124b", "commit_date": "2023-03-20T20:06:55Z", "commit_message": "Avoid prefixing paths without directory separators\n\nIn Go 1.20, `filepath.Rel` always produces a path starting with `.` on\nWindows if the path is relative to the current directory.  While this is\nvalid, it's not helpful, because we want to trim off the leading\ndirectory portion leaving us with a bare relative path.  If we accepted\nthis behaviour, we'd break our checking for already-present patterns in\n`git lfs track`, and more importantly, we wouldn't recognize raw\npatterns wherever they are in the tree, since we'd falsely believe that\nthose patterns were specified with a leading dot.\n\nTo fix this, always trim the current directory prefix from our relative\ndirectory and explicitly check for `.` and turn it into an empty string.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4049292152618f1bb126a36b3cabd2d03f2a9bc7", "commit_date": "2023-03-20T19:37:24Z", "commit_message": "Move trimCurrentPrefix to tools\n\nRight now, we have a function which can trim the relative path prefix,\nbut that is only available in the `commands` package.  In the future,\nwe'll want to use it elsewhere as well, so let's move it somewhere more\naccessible.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4c9987de9be07bd760e01b39eb9cd72d155c1b25", "commit_date": "2023-03-18T04:54:43Z", "commit_message": "Modify requestComps for git zsh completion", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8330d123ffa1fcaf97b33051b9cf1a09334ecd7", "commit_date": "2023-03-18T04:15:04Z", "commit_message": "Add _git_lfs function for git bash completion", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "15723008062b941b53743295784554b2f3ba875e", "commit_date": "2023-03-14T16:45:03Z", "commit_message": "Initial addition of shell completion script generator", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1bbf8baeedd20cd2fe7ef7d27c66322d35f23aa8", "commit_date": "2023-03-02T15:33:50Z", "commit_message": "Merge pull request #5300 from chrisd8088/update-windows-cert-sha1\n\nUpdate Windows signing certificate hash", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1f3bb872c60c59a26dd1e153a12704e5a7281858", "commit_date": "2023-03-01T22:25:50Z", "commit_message": "Makefile: update Windows signing certificate hash\n\nThe Git LFS signing certificate for Windows binaries has changed, so\nwe update the default signing certificate SHA-1 hash in the Makefile.\n\n(The last update was in commit 16eec1724ef916ef1e9eb4be585c2dc27b7a7270\nof PR #4946 in 2022.)\n\nThe commands used to generate this hash were:\n\nopenssl pkcs12 -info -in codesign.pfx -out codesign.pem\nopenssl x509 -text -in codesign.pem -fingerprint | \\\n  grep Fingerprint | sed 's/^SHA1 Fingerprint=//' | \\\n  sed 's/://g' | tr [:upper:] [:lower:]", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "91bac118ed88bc858612f4df69c35c342332b427", "commit_date": "2023-02-23T17:00:52Z", "commit_message": "Merge pull request #5282 from bk2204/negated-grep\n\nt: avoid incorrect negated commands", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a6edaf89cfcbf517a104c18c79b579cac20b06c", "commit_date": "2023-02-23T16:50:12Z", "commit_message": "Merge pull request #5290 from bk2204/update-x-text\n\nUpdate golang.org/x/text", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a5d20de4a8de9660720c79858ae57e40cffa1def", "commit_date": "2023-02-22T14:57:29Z", "commit_message": "t: avoid incorrect negated commands\n\nWhen `set -e` is enabled, not all commands trigger an error exit if they\nreturn false.  For example, it's clear that commands in an `if` or\n`while` statement don't cause an error if they are false.\n\nWhat is less obvious, however, is that negated commands and negated\npipelines also have no effect on `set -e`.  From POSIX 1003.1-2017 (on\n`sh -e`):\n\n    When this option is on, if a simple command fails for any of the\n    reasons listed in Consequences of Shell Errors or returns an exit\n    status value >0, and is not part of the compound list following a\n    while, until, or if keyword, and is not a part of an AND or OR list,\n    and is not a pipeline preceded by the ! reserved word, then the\n    shell shall immediately exit.\n\nAs such, writing something like `! grep` will never fail.  Fortunately,\nwe can append `&& exit 1` instead of the `!` and that will work\ncorrectly.\n\nTo make this work, run the following command to make the code properly\ncheck the exit status of our commands:\n\n  git grep -l '! [a-z]' t | \\\n    xargs ruby -pi -e '$_.gsub!(/^(\\s+)! ([a-z].*)$/, \"\\\\1\\\\2 && exit 1\")'\n\nBecause such a command will still have a non-zero exit status, even if\nit doesn't trigger `set -e`, add a `true` if this is the last statement\nin a block, so that the test exits successfully and therefore passes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2dec633140874899658762999885342440a286f", "commit_date": "2023-02-21T21:53:32Z", "commit_message": "go.mod: bump version to 1.17\n\nOne of our dependencies now requires Go 1.17.  Bump the version in\ngo.mod accordingly.  To please Go, now also run `go mod tidy`, which\nseparates the indirect dependencies into separate stanzas.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "53941026d75135696ca0474c4f70f2df513270b8", "commit_date": "2023-02-21T20:22:49Z", "commit_message": "Update golang.org/x/text\n\nThe version we're using is vulnerable to CVE-2022-32149.  We don't use\nthe vulnerable code, but upgrade the remaining golang.org/x packages we\ndepend on, since the text package is merely a dependency of them.  In\ndoing so, we'll update the text package, and avoid triggering any\nwarning from vulnerability scanners.\n\nIn addition, now that we're using released versions, it will be easier\nto keep things up to date.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f60fcdd653203f867de416a46d97d8428ee5d3cc", "commit_date": "2023-02-16T17:18:18Z", "commit_message": "Merge pull request #5063 from bk2204/pure-ssh-failure\n\nImprove error handling for pure SSH protocol", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "326b1ee78d140f6b01874b0bf031c5dfc696586c", "commit_date": "2023-02-15T21:49:40Z", "commit_message": "ssh: improve logging for pure SSH protocol\n\nLet's improve the logging for the pure SSH protocol so that when we have\na problem, it's easier for users to use the trace output to figure out\nwhat's wrong.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "91947ab05e1f7b1b8378b46a051ea6fdb69a3d14", "commit_date": "2023-02-15T21:46:51Z", "commit_message": "tq: verify connection and return error on nil\n\nIn some cases, we can end up with a panic due to a pure SSH transfer\nlacking any connections, but it's not clear what those cases are.  Let's\nadd some explicit checks that our connection is functional and return an\nerror if not.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "70b3fede8eeb2666ce027c883b73bbf9b80f5caa", "commit_date": "2023-02-15T21:46:51Z", "commit_message": "tq: clear sshTransfer on deletion\n\nIn some cases, we can end up with a panic due to a pure SSH transfer\nlacking any connections, but it's not clear what those cases are.  Let's\nhelp improve a possible failure case by explicitly setting sshTransfer\nto nil, since shutting down is the only case in which we explicitly set\nthe number of connections to 0.\n\nThis means that we'll get a better error message in such a case, since\nwe'll attempt a legacy SSH connection, which won't work, and that will\nbe reported to the user.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46b7b0e9c5ae287f8c1bd9c19cd8507f8d6db41e", "commit_date": "2023-02-14T17:25:41Z", "commit_message": "Merge pull request #5283 from bk2204/local-transfer-ownership\n\nstandalone: print an error if the destination isn't a Git repository", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b972e77c84a7a3bb0d7fe62ccbde443a9fa381d1", "commit_date": "2023-02-14T17:25:22Z", "commit_message": "Merge pull request #5284 from bk2204/local-locks-failure\n\nlocks: ensure local locks are synced on error", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "563ad31119ef2954af730b93d922d1f4591f42d9", "commit_date": "2023-02-13T21:02:48Z", "commit_message": "locks: ensure local locks are synced on error\n\nOn an error, we call `os.Exit(2)`.  However, the defer for the locking\nclient that saves the local locks is not called in such a case, which\ncan leave the locks out of sync even if some of the operation fails.\nIf we're going to exit early, be sure we close the lock client to avoid\nthis problem.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a1e86326c4c07cf13d24c624122974ac8240e021", "commit_date": "2023-02-13T20:42:40Z", "commit_message": "standalone: include stderr if `git rev-parse` fails\n\nIf `git rev-parse --git-dir` fails, Git doesn't think that the\ndestination is a valid repository for whatever reason.  One of the most\ncommon reasons for that is that the repository is owned by another user.\n\nIn such a case, we want to show the error message from Git, since we\nreally have no other indication that this is the case.  It could be just\nthat the destination isn't a repository at all.  Regardless, the error\nmessage would be useful to the user to determine the problem, so let's\nreturn it if standard error isn't empty.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d9a5d7427d590dc6b284a2828b77e4740e666639", "commit_date": "2023-02-13T20:23:40Z", "commit_message": "standalone: report errors when handler setup fails\n\nWhen the handler setup fails, we just exit right now, instead of sending\nan error message.  That leads to less than helpful behaviour if the\ndestination repository isn't a valid Git repository for whatever reason.\n\nTo improve this, let's make sure that we return an error message at\nsetup if something fails so that the user in turn gets an error message.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d7489199174d576070fc63cdaf04ad9094b8d5ab", "commit_date": "2023-02-10T18:37:55Z", "commit_message": "Merge pull request #5281 from bk2204/choco-install\n\nworkflow: use `choco install`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e1f9eb915ba04afa7e49dca31ac2fa356c9c0a9f", "commit_date": "2023-02-10T16:16:32Z", "commit_message": "workflow: use `choco install`\n\n`cinst` is deprecated in favour of `choco install`.  Convert our CI\nsystem and release process to the new form and move the `-y` to its\nproper place before the package name for better compatibility.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3bf8ad72b3738deca0d66d47e895710990aafd92", "commit_date": "2023-02-06T16:36:38Z", "commit_message": "Merge pull request #5276 from chrisd8088/update-pkgcloud-script\n\nUpdate Linux releases in Packagecloud publication script", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "284b453ad9c051230b2612e4555c43b98933eef9", "commit_date": "2023-02-04T08:56:38Z", "commit_message": "script/packagecloud.rb: update distro releases\n\nUbuntu Impish Indri reached its EOL in July 2022, so we remove it\nfrom the list of Debian 11 distributions for which we publish\npackages to Packagecloud, and we add Ubuntu Kinetic Kudu to the\nDebian 11 list as it was released in October 2022.\n\nFedora 34 reached its EOL in July 2022 and Fedora 35 reached its\nEOL in December 2022, so we remove them from the list of CentOS 8\ndistributions, and we add Fedora 37 to the Rocky 9 list as it was\nreleased in November 2022.\n\nWe add Linux Mint Vera to the list of Debian 11 distributions\nas it was released in December 2022.\n\nWe remove OpenSUSE 15.3 from the list of CentOS 7 distributions\nas it reached its EOL in December 2022.\n\nSUSE Linux Enterprise Server 12 SP4 reached its general EOL\nin June 2020, so we remove it now, and SLES 15 SP3 reached its\ngeneral EOL in December 2022, so we also remove it now.\n\nNote that we have been somewhat inconsistent in our handling of\nSLES 12 and 15 Service Packs, as we have only removed SLES 12\nService Packs once they reached their LTSS (Long Term Service Pack\nSupport) EOL, while we have removed SLES 15 SPs when they reached\ntheir general EOLs.  Thus we removed SLES 12 SP3 in commit\n9ef46f8d606a05d5a51ce024c38445f1a42ecb11 of PR #5169 when that\nService Pack reached its LTSS EOL, but we removed SLES 15 SP2\nin commit e2465f84b50452ff746f4f389afe5f8052a5a658 PR #5010 when\nthat Service Pack reached its general EOL but not its LTSS EOL,\nwhich is still in the future (December 2024), as is the LTSS EOL\nfor SLES 15 SP1 (January 2024).\n\nTo be more consistent, we assume SLES users have upgraded to\nthe latest Service Pack within the default six-month period\nafter its release, and we can drop support for older SPs at\nthat point.  This is effectively how we have already treated\nthe earlier SPs for SLES 15, so applying that guideline to\nSLES 12 SP4 as well should be reasonable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dfe5c374bafa264118042104413eec3943cce04b", "commit_date": "2023-02-04T08:28:07Z", "commit_message": "script/packagecloud.rb: add EOLs and fix duplicate\n\nWe add comments noting the EOL dates for a number of distributions\nto our Packagecloud upload script, and also remove a duplicate entry\nfor SUSE Linux Enterprise Server 12.5 which was added in commit\n9ef46f8d606a05d5a51ce024c38445f1a42ecb11 of PR #5169.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7828b1198afd1bd4cf71f0af6a0e7b14ba9d8895", "commit_date": "2023-02-04T07:08:39Z", "commit_message": "script/packagecloud.rb: remove stale distro names\n\nWe removed support for CentOS 5 in commit\n369c712bb0831f473ee2b26246d5e7a4787e6cad of PR #4080 and for\nCentOS 6 in commit d69e28de4a5d401a4255a12152f2332af79eee83 in\nPR #4328; we also removed support for Debian 8 in commit\nff361823d5cd66f6d0cf82e3d52e2548afbd99e2 of that same PR #4328,\nand for Debian 9 in commit e642e535f35c2b54a40df808f1fd24584cf0c719\nof PR #5169.\n\nWe can therefore also remove these distribution names from the\nset of patterns we match our package filenames against in our\nupload script for Packagecloud when it prints Markdown output\n(although this feature of the script may no longer be useful).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c66fd28d6c346ffe3be9f5d6bbab550a12b1fbc7", "commit_date": "2023-02-04T04:22:28Z", "commit_message": "Merge pull request #5260 from steffen/main\n\nSimplify and deduplicate installation instructions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ea941c0d6098ee1f7fded5a6da13be99a11a9047", "commit_date": "2023-02-03T10:26:12Z", "commit_message": "Tweak \"Linux installation instructions\" link", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "495f68f4dc3c26e8a58dfd770405b4d853b107e4", "commit_date": "2023-02-03T10:26:12Z", "commit_message": "Restore original \"From source\" section.\n\nAlso make `git lfs install` code example inline.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38fc6888b2a94712bdaf3580b73da887e323d6ae", "commit_date": "2023-02-03T10:26:12Z", "commit_message": "Apply suggestions from code review\n\nCo-authored-by: Chris Darroch <chrisd@apache.org>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "816a94cf158cc3a36cde5dae34e3f8ffe907b05c", "commit_date": "2023-02-03T10:26:12Z", "commit_message": "Simplify and deduplicate installation instructions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b4cf181fbaa47e8ad19e4cfc6864c8ffa7b1b825", "commit_date": "2023-01-27T14:54:42Z", "commit_message": "Merge pull request #5266 from dscho/handle-32-bit-windows-gracefully\n\ninstaller: let it work on 32-bit Windows again", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0a0311d7714ad2a072ca199322d91ba27db448b7", "commit_date": "2023-01-27T13:16:26Z", "commit_message": "installer: let it work on 32-bit Windows again\n\nAs reported in https://github.com/git-lfs/git-lfs/issues/5231, there was\na regression in running the Git LFS installer on 32-bit Windows.\nConcretely, it throws a Runtime error:\n\n\tInternal error: Cannot expand `commonp64` constant on this\n\tversion of Windows.\n\nThe reason is that we introduced code in 865d6eee (installer: handle\n`BashOnly` Git for Windows gracefully, 2022-06-16) that unconditionally\nexpands `commonpf64`. However, the documentation at\nhttps://jrsoftware.org/ishelp/topic_consts.htm is very clear:\n\n\t{commonpf64}\n\n\t    64-bit Windows only: 64-bit Program Files. The path of the\n\t    system's 64-bit Program Files directory, typically\n\t    \"C:\\Program Files\". An exception will be raised if an\n\t    attempt is made to expand this constant on 32-bit Windows.\n\nThe idea is to figure out whether a given path starts with either the\n32-bit or the 64-bit version of `Program Files`. But if the latter is\nnot even available, we cannot search for it.\n\nLet's just re-use the value of the `commonpf32` constant. (Using an\nempty value for `PFiles64` would not work, as that variable is used to\nmatch a certain prefix, and the empty string would match, but we don't\nwant that.)\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "02ac3de0e19fbfeea7f8ddb079cfe074367a48d3", "commit_date": "2023-01-06T14:23:16Z", "commit_message": "Merge pull request #5245 from bk2204/core-hookspath-update\n\nMake hooks refer to `core.hookspath`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "86a8d7369c9820caa378f51468de919ef3d4e5e2", "commit_date": "2023-01-05T17:08:25Z", "commit_message": "hooks: mention core.hookspath instead of just .git/hooks\n\nIn some cases, users may use `core.hooksPath` to locate their hooks in a\ndifferent location.  However, right now, our hook and installation\ninstructions mention only `.git/hooks`.\n\nWe can update the instructions without a problem, but we don't want to\nhard-code the hook path into the hooks themselves because of things like\nsymlinks and moved repository, plus the fact that we can't update a hook\nautomatically unless it's identical minus some whitespace changes.  To\navoid spuriously failing to update a hook, let's print the right\nlocation with the instructions, and just mention `core.hookspath` and\n`.git/hooks` in the message, leaving it to the user to discover.\n\nNote that technically, core.hookspath was not implemented until Git\n2.9.0.  However, while we still support older versions of Git, no\npresently supported version of Ubuntu or Debian offers a version older\nthan 2.11, so the risk of practical confusion by mentioning this is low.\nNevertheless, make our tests pass by checking for an old Git explicitly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9fb6e4b2ceaee0a4d834d100222b4abf18eb4b90", "commit_date": "2023-01-05T17:08:25Z", "commit_message": "t-update: fix pre-push hook test\n\nIn some cases, we're echoing the old hook contents, but we're not\nechoing it into a file, which means we aren't testing what we think we\nare: the old hook contents.  Let's actually test that by echoing the\ncontents of the script to the hook file name so our test works\ncorrectly.\n\nWhile we're at it, we need to properly escape the dollar sign in `$@`,\nsince otherwise it gets substituted before we write the script.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1136293e2b5d870dc6811e0cc1fc2601746fa41e", "commit_date": "2023-01-04T20:00:43Z", "commit_message": "Merge pull request #5014 from ry167/patch-1\n\nUpdate INSTALLING.md to fix ubuntu derivative command and allow easy install for some distros", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1dd87d527cba03deb79c526353b30d8cfd6abac8", "commit_date": "2023-01-04T18:45:13Z", "commit_message": "Merge branch 'main' into patch-1", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e589788893227c8946b2bf8cf1275274bb8a9d5b", "commit_date": "2023-01-04T18:44:55Z", "commit_message": "Merge pull request #5228 from jlosito/dbot\n\nCheck for github action updates monthly", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "55fb37e918b1ab2f618d2e1f22bf1d28fa726105", "commit_date": "2023-01-04T17:35:36Z", "commit_message": "Merge branch 'main' into dbot", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d7b7eb1699df41ef502f0aef9f85614207915e1", "commit_date": "2023-01-04T17:33:06Z", "commit_message": "Merge pull request #5243 from chrisd8088/actions-update-steps-ubuntu\n\nUpgrade workflows to latest Ubuntu and Actions versions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "df6e49cd95b16b3f64b7e78ec876d5adc7b45358", "commit_date": "2023-01-04T06:58:53Z", "commit_message": ".github/workflows: upgrade all Actions versions\n\nIn commit b7fa3a54e4d65e5f000b30e9df41cddf1daeed41 of PR #5236 we\nreplaced the deprecated actions/setup-ruby@v1 GitHub Action in our\nCI and release workflows with the current ruby/setup-ruby@v1 Action.\n\nWe now update our other Actions to their respective latest versions\nas well:\n\n  actions/checkout:           v1 -> v3\n  actions/download-artifact:  v1 -> v3\n  actions/setup-go:           v2 -> v3\n  actions/upload-artifact:    v1 -> v3\n  docker/setup-qemu-action:   v1 -> v2\n\nAs of v2 of the actions/download-artifact Action, downloaded assets are\nnot placed in a new subdirectory created with the name from the step's\n\"name\" argument, but in the current working directory instead.  We want\nto retain the previous behaviour so we add a \"path\" argument with the\nsame name as each of the macos-assets and windows-assets download steps.\n\nBy default, the actions/checkout Action (as of v2) performs a Git fetch\nwith a --depth=1 option, so a shallow clone is made.  As a result, when\nour Makefile calls \"git describe HEAD\" to set its VERSION variable, no\ntags are available and Git responds with an error message.\n\nMany of our workflow jobs succeed despite logging that error, including\nthe build-docker and build-docker-cross jobs in both our CI and Release\nworkflows.  (The Docker builds create upload artifacts with the correct\nfilenames despite the lack of any tags because they rely on the Git LFS\nversion strings in our debian/changelog file and in our binary; the\nrpm/build_rpms.bsh script builds a binary just to run \"git-lfs version\"\nand determine the version string from its output.)\n\nHowever, our workflow jobs which run the \"make release\" command fail\noutright in the absence of any Git tags, as they search for build\nartifacts using filenames constructed with the empty VERSION variable,\nsuch as \"git-lfs-windows-amd64-.zip\".  When no files are found, the\ntar command fails, halting the job.  This affects both the build-default\njob in our CI workflow (for Linux and macOS), and all of build-main,\nbuild-macos, and build-windows jobs in our Release workflow.\n\nTo resolve this in the case of a PR or other push to a branch, we set\na fetch-depth value of 0 for our actions/checkout@v3 steps, which\ndownloads the full Git history and all tags.  This is somewhat more\nexpensive than a shallow clone, but our project's history is not\nexcessively large.\n\nDue to the GitHub Actions bug documented in actions/checkout#882,\nthough, this resolution is insufficient in the case of a push to a\ntag.  At present, the actions/checkout@v3 incorrectly determines the\nSHA of an annotated tag to be the SHA of its associated commit, and\nthen proceeds as if the tag had been updated on the server since the\nAction was started, and so rewrites the tag locally to refer to the\ncommit SHA.  This has the effect of making the local tag into a\nlightweight tag, which \"git describe\" then ignores (since we don't\npass the --tags option to it).\n\nAs a temporary fix for this problem, we add a step after the\nactions/checkout@v3 step which updates the local tag again to match\nthe remote one.  We only run this step when the pushed reference\nwas a tag, because on a branch push it would fail as Git would refuse\nto update the currently checked-out branch.  In our Release workflow,\nsince it only runs on pushes to tags, we can run this step\nunconditionally.  (We could also continue to use the default fetch-depth\nof 1 for the actions/checkout@v3 step, since we always subsequently\nfetch the relevant tag, but to be consistent and to avoid future\nissues once actions/checkout#882 is fixed upstream, we do not do so.)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba2fae48635681eee98dd0d0c3433b4bf4c48dc2", "commit_date": "2023-01-04T06:50:41Z", "commit_message": ".github/workflows/release.yml: simplify xargs opts\n\nWe can simplify our calls to the \"xargs\" command by removing the\nredundant -L1 option, as this is implied by the -I option when\nrunning on Linux with the GNU version of xargs(1).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a484eeff3d5f3a6f8f00952a67159fa7a308664", "commit_date": "2023-01-04T06:50:41Z", "commit_message": ".github/workflows: use latest Ubuntu LTS 22.04\n\nIn commit d6b34fa4355bd4891294eeb69ff05bb43977f385 of PR #4437 we\nswitched our CI and release GitHub Actions workflows to explicitly\nuse the then-latest Ubuntu LTS version 20.04 in order to support ARM64\nbuilds, as these required a version of Go (specifically 1.16) which was\nnot available on the ubuntu-latest Actions runners at the time because\nthey still ran Ubuntu LTS version 18.04.\n\nHowever, ubuntu-latest Actions runners now use an even newer LTS version\nof Ubuntu, 22.04, than the one we have explicitly identified, so we can\nreturn to specifying ubuntu-latest for our CI and release builds.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cbab54d0dff62718af9e0bf1e4f66fcb3258da1c", "commit_date": "2023-01-04T05:47:22Z", "commit_message": "Merge pull request #5236 from chrisd8088/actions-ruby-setup\n\nUpgrade GitHub Actions workflows to use `ruby/setup-ruby@v1`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b53463785ff04fa5da0434937842e311e8d1f058", "commit_date": "2023-01-04T04:23:02Z", "commit_message": ".github/workflows: add comments re Ruby on Windows\n\nIn commit b7fa3a54e4d65e5f000b30e9df41cddf1daeed41 in this PR we\nupdated our GitHub Actions workflows to use the ruby/setup-ruby@v1\nAction, and in doing so had to resolve several issues for our Windows\nrunners regarding that Action, specifically to clear the TMPDIR\nenvironment variable it sets so mktemp(1) and Go use the same volume\nfor temporary files, and to move the MSYS2 installation under\nC:\\msys64 aside so the Git in that path is not used by default.\nOtherwise, that Git prefers its own PATH lookup to the one our\nbuild scripts set, and continues to find its own git-lfs binary instead\nof the one we have built and want to test.\n\nTo document these additional workflow steps better we now also add\ncomments into our workflow definitions, as suggested by larsxschneider\non PR review.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "64c0d68c63e0bd8b7778710f8a290bc2246d4bc6", "commit_date": "2023-01-04T03:52:10Z", "commit_message": "Merge branch 'main' into actions-ruby-setup", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e17e7c46a369c8a60dbfe574be00d782cebeca2b", "commit_date": "2023-01-04T03:31:33Z", "commit_message": "Merge pull request #5239 from chrisd8088/add-export-doc-example\n\nAdd `git lfs migrate export` command examples to manual page", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bc2e89a7256a282606f28323eca24a868d169a4f", "commit_date": "2023-01-03T23:27:43Z", "commit_message": "Merge branch 'main' into add-export-doc-example", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bad1d46d540cc97f53afb72d0d018e2a85962918", "commit_date": "2023-01-03T23:27:24Z", "commit_message": "Merge pull request #5240 from chrisd8088/unset-git-trace-make\n\nUnset `GIT_TRACE` environment variable for Git commands in `Makefile`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "04d86a1d11d4577f52ebe85478f992ce7131187b", "commit_date": "2023-01-03T19:09:10Z", "commit_message": "Merge branch 'main' into unset-git-trace-make", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2feca8134175ee78af6ad39de5ea823d4019b8d8", "commit_date": "2023-01-03T19:08:39Z", "commit_message": "Merge pull request #5223 from aymanbagabas/darwin-control-path-too-long\n\nfix(ssh): use /tmp to place control dir on darwin", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce7bef126cc7a623f80af8121c038b60677cf310", "commit_date": "2023-01-03T18:09:40Z", "commit_message": "Merge branch 'main' into unset-git-trace-make", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f62ded1a2ac074059db09b7697ac67043719f11c", "commit_date": "2023-01-03T17:26:34Z", "commit_message": "Merge pull request #5226 from bk2204/offline-checkout\n\ncommands: avoid remote connections in checkout", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "93efd5349bc152d73a9d90c9f44e3ed5a110cfac", "commit_date": "2023-01-03T16:45:46Z", "commit_message": "Merge branch 'main' into unset-git-trace-make", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9f3f2390be5a5848ef51d7d8cb90c71b3c56e989", "commit_date": "2023-01-03T16:38:51Z", "commit_message": "Merge pull request #5241 from chrisd8088/cleanup-rpm-build\n\nClean up RPM builds and fix i686 RPM file names", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7830f046e7e930ed57a6c8912ef47abdca346046", "commit_date": "2022-12-28T09:11:23Z", "commit_message": "rpm/build_rpms.bsh: also build i686 RPMs\n\nIn commit c2d25ee6b6d89425cf39dbc3be7a215d3d0fc050 of PR #511 we added\nsupport for building RPM packages for 32-bit platforms by updating the\ndocker/centos_script.bsh script which was present at that time to\ncall rpmbuild with a --target=i686 argument.\n\nSince commit 56ffe420b787ba2f738287e07d6af9f177e51b4f of PR #555 both\nthat script and the rpm/build_rpms.bsh script contained the same logic\nto parse the OS name and version in order to set a short suffix for\nthe RPM filenames.\n\nHowever, the docker/centos_script.bsh script was subsequently moved into\nthe git-lfs/build-dockers repository, where it has not been updated to\nmatch the rpm/build_rpms.bsh script, such as when parsing of the OS major\nversion was added in commit e93940960ee0e1749a2de6616150cd10061b18e2 of\nPR #5054, which allows us to properly parse the version number on\nCentOS/Rocky Linux 8 and above, or when parsing of the Rocky Linux OS\nname was added in commit 723be34bd0e9802c0dc5fa728edf86cc16bc62b0 of\nPR #5144.\n\nThe result is that at present we build 32-bit RPMs for CentOS 8 and\nRocky Linux 9 (el8 and el9, respectively) without the platform short\nname suffix in their filenames, e.g., git-lfs-3.3.0-1.i686.rpm and\ngit-lfs-3.3.0-1.i686.rpm, and then upload them to Packagecloud with\nthose names.\n\nTo resolve this problem and avoid later regressions between the two\nsets of parsing logic, we move the rpmbuild command for 32-bit packages\ninto our rpm/build_rpms.bsh script, which ensures they will be built\nwith the same context as our 64-bit packages.\n\nTo do this we introduce an rpmbuild command with the --target=i686\nargument into rpm/build_rpms.bsh, which allows us to also remove\nthe rpmbuild command from the centos_script.bsh script in the\ngit-lfs/build-dockers repository in PR git-lfs/build-dockers#54.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba6f2789dc2b5bc90301c0490972383d9aad3495", "commit_date": "2022-12-28T09:09:47Z", "commit_message": "rpm/clean.bsh: drop CentOS 6 repo clean script\n\nSince the original introduction of support for building CentOS RPMs\nin commit 4a7162777913489e7c70a3da3235dcd3eeec553b of PR #332, an\nrpm/clean.bsh script has been provided to perform the equivalent of\na \"git clean -xdf\" command on the Git repository from which we build\nGit LFS.\n\nHowever, this script is no longer needed as all of the CentOS and\nRocky Linux container image builds have a native Git package installed,\nand so we remove the only use of it, in the centos_script.bsh script\nof the git-lfs/build-dockers project, in commit\ngit-lfs/build-dockers@7be51a4ddd0899dd11babc0102414a0442043b3d of\nPR git-lfs/build-dockers#54, and can therefore also drop the\nscript from this repository as well.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "47644a6d1e8bb2d9b27c125d0a58e233b805943d", "commit_date": "2022-12-28T08:09:59Z", "commit_message": "rpm/build_rpms.bsh: drop unused NODEPS variable\n\nIn commit e2f770c8f5f2251976a83a5983c9ce170a764884 of PR #428\nthe rpm/build_rpms.bsh script was updated to run the rpmbuild command\nwith the --nodeps option when the NODEPS environment variable was defined\nand set non-zero.\n\nHowever, in commit 88430de792d96ec74846779aeb0530a4fb1ff49a of PR #654\nthe script was revised to always pass the --nodeps option to the\nrpmbuild command, so the NODEPS environment variable no longer had\nany effect, and so We can therefore remove our handling of this variable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "672f9cc94a809225e51a2fa7a51b262c22bcc15c", "commit_date": "2022-12-28T08:09:59Z", "commit_message": "rpm/build_rpms.bsh: use SPEC variable throughout\n\nThe SPEC variable is currently set with the relative path to our\ngit-lfs.spec file, but is then not used in places where it could be,\nso we replace those with references to the variable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5e0ffc9e5982f1fbb8c045c7afdb7edb6e80db8", "commit_date": "2022-12-28T08:09:59Z", "commit_message": "docker/README.md,rpm/INSTALL.md: update rpm docs\n\nWe no longer support either CentOS 5 or 6, per commit\nb560b853a6e557195c0c68875218f45c89dce56b of PR #1298 and commit\ngit-lfs/build-dockers@64a3a9fc4df3ca28920a4051435d55487832c5b7\nof PR git-lfs/build-dockers#3, and commit\ngit-lfs/build-dockers@898d9b045e24a078fc2ae243cc870a465dfd7364\nof PR git-lfs/build-dockers#33.\n\nWe also now build the Asciidoctor Ruby gem in order to generate\nour man pages, rather than using ronn and several other gems,\nper commit db9a82132a2bb066876d8ddf06c5255da2f199a4 of PR #5054.\n\nWe therefore update the documentation for our RPM package build\nutilities and for our Docker container image build utilities to\nreflect these changes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "362371477a87881f918cd3363e0c0ed0e7f02be4", "commit_date": "2022-12-28T08:09:59Z", "commit_message": "rpm/build_rpms.bsh: tidy Asciidoctor gem install\n\nIn commit db9a82132a2bb066876d8ddf06c5255da2f199a4 of PR #5054 we\nreplaced our use of ronn with Asciidoctor, and as part of that change\nwe updated our rpm/build_rpms.bsh script to only install the\nAsciidoctor Ruby gem instead of a set of four gems including one\nfor ronn.\n\nAs a consequence we no longer have any x86_64 Ruby gem RPMs but only\n\"noarch\" ones, so we can simplify our installation slightly, and\nalso update our status messages to reflect that we are installing\njust one gem.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "124f2fe6f8703914b2051d932168d53b611e0592", "commit_date": "2022-12-28T08:09:59Z", "commit_message": "rpm/build_rpms.bsh: drop unused package installs\n\nSince the original introduction of the rpm/build_rpms.bsh script in\ncommit 4a7162777913489e7c70a3da3235dcd3eeec553b of PR #332 it has\ninstalled a number of packages, including make, curl, tar, and bison.\n\nThen in commit a4c9db890e19a6b70451db99b8db622e5af8997a of PR #480 the\nperl-Digest-SHA package was added as an install target as well.\n\nHowever, we no longer need to install any of these, either because the\nare already installed by our CentOS and Rocky Linux Dockerfiles in\nour git-lfs/build-dockers project, or because they are simply unused\nat present, so we remove these packages now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3d23279bb302c55d31f8cc993d9e7102fcf9cb17", "commit_date": "2022-12-28T08:09:43Z", "commit_message": "rpm: drop Ruby 2.x install and spec file\n\nIn commit git-lfs/build-dockers@544e07ee1a2d70eb85d1682202aac2906661735e\nof PR git-lfs/build-dockers#47 we updated our CentOS 7 Dockerfile to\ninstall Ruby 3.0 using the rh-ruby30-{ruby,build} packages and then run\nour CentOS build script with that version of Ruby as the default.  We made\nthis change to support our use of Asciidoctor in preference to ronn,\nwhich was completed in PR #5054, and as part of that PR, in commit\ndb9a82132a2bb066876d8ddf06c5255da2f199a4 we replaced our installation of\nronn with one of asciidoctor in our rpm/build_rpms.bsh script.\n\nAs a result, none of our CentOS or Rocky Linux container image builds\nnow rely on Ruby 2.x, so we can remove the code which installed that\nversion.\n\nWe can also remove the related code which used to install Ruby 2.x when\nan even older version was the default, along with our local ruby.spec\nfile for Ruby 2.2.2.\n\nFinally, we can remove the code which installed the rubygems-devel\npackage on CentOS 8 because that is taken care of by the corresponding\nDockerfile in our git-lfs/build-dockers project, which, like the\none for Rocky Linux 9, installs ruby, ruby-devel, and rubygems-devel.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "60dafc2ab6e0b65111cbb40fb3cad8716d9cef14", "commit_date": "2022-12-28T03:44:30Z", "commit_message": "rpm/build_rpms.bsh: drop CentOS 5/6 Go install\n\nSince the original introduction of the rpm/build_rpms.bsh script in\ncommit 4a7162777913489e7c70a3da3235dcd3eeec553b of PR #332 it has\nchecked for the absence of the \"go\" binary and, if it is not found,\ninstalls the golang package, except on CentOS 5 where fetches and\npatches a golang.spec file and then builds a local RPM using that\nin order to install Go.\n\nHowever, in commit b560b853a6e557195c0c68875218f45c89dce56b of PR #1298 and\nin commit git-lfs/build-dockers@64a3a9fc4df3ca28920a4051435d55487832c5b7 of\nPR git-lfs/build-dockers#3 we dropped support for CentOS 5.\n\nAnd in commit 88430de792d96ec74846779aeb0530a4fb1ff49a of PR #654 we\nupdated our CentOS Dockerfiles (before they were moved to the\ngit-lfs/build-dockers repository) to download and install Go from the\ngoogleapis.com service, and we still continue to do this but as of\ncommit git-lfs/build-dockers@c63850354edd262922a9f6196cdc8290533107d5\nin PR git-lfs/build-dockers#35 we now use the golang.org service.\n\nThis direct download obviates the logic in our rpm/build_rpms.bsh\nscript to install the golang package, and the special handling for\nCentOS 5 is also obsolete, so we remove this logic from our script.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84bc27e7b3ebdb5c7afd4cad29f402178d691218", "commit_date": "2022-12-28T03:44:30Z", "commit_message": "rpm/build_rpms.bsh: drop CentOS 5/6 Git install\n\nIn commit cd3e92e947fcc9c43ddc932226c155731cd00978 of PR #480 we\nintroduced support for CentOS 6 into our rpm/build_rpms.bsh script by\nbuilding an early version of Git from a local git.spec file.  Then in\ncommit d2d90a801a98cc9789e691e8c43251c51ce0b333 of PR #891 this was\nreplaced with installation from the setup.ius.io service.\n\nIn commit git-lfs/build-dockers@7af55520c651c8f82db18099e18761ee2f74df4f\nof PR git-lfs/build-dockers#19, however, the download and installation\nof Git 2.16 from github.com was added to the CentOS 6 Dockerfile; later\nthis was adjusted to download from kernel.org.\n\nIn commit git-lfs/build-dockers@f1f573fd5b90bbeab49a6ec043134bebc8bb22c8\nof PR git-lfs/build-dockers#29 we added support for CentOS 8, which\nsupports a direct installation of Git using yum.\n\nAnd in commit git-lfs/build-dockers@898d9b045e24a078fc2ae243cc870a465dfd7364\nof PR git-lfs/build-dockers#33 we dropped support for CentOS 6 entirely.\n\nTherefore we no longer have any need for our rpm/build_rpms.bsh script\nto install Git at all, especially not very old versions, so we simply\nremove that logic from our script.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38a0f9f09f020232d17ee0e8e21d98e76a333b9e", "commit_date": "2022-12-28T03:44:30Z", "commit_message": "rpm/build_rpms.bsh: drop CentOS 5 EPEL install\n\nIn commit b560b853a6e557195c0c68875218f45c89dce56b of PR #1298 and in\ncommit git-lfs/build-dockers@64a3a9fc4df3ca28920a4051435d55487832c5b7 of\nPR git-lfs/build-dockers#3 we dropped support for CentOS 5, so we can\nremove the logic in our rpm/build_rpms.bsh which installed a RedHat\nEPEL package only on this platform.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7b3dcdd936d2544683c8ba3988d49fe4bb5ac839", "commit_date": "2022-12-28T03:44:30Z", "commit_message": "rpm/build_rpms.bsh: drop old OS release parsing\n\nOur rpm/build_rpms.bsh script currently attempts to parse the\n/etc/os-release file to retrieve the major OS version number, and\nif that file does not exist, reads /etc/redhat-release instead;\nthe latter logic has been in place since the introduction of the\nscript in commit 4a7162777913489e7c70a3da3235dcd3eeec553b of\nPR #332, and has been the fallback logic since commit\n56ffe420b787ba2f738287e07d6af9f177e51b4f of PR #555.\n\nHowever, /etc/os-release should exist on all the current versions\nof CentOS and Rocky Linux we support, so we do not need to retain\nthe fallback parsing of /etc/redhat-release at this point.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0a1ee7b7f2a4255227c2627e7b171a34e7c321cf", "commit_date": "2022-12-26T19:28:34Z", "commit_message": "Makefile: unset GIT_TRACE for git commands\n\nIn commit c4874df619276c807772bae6e62d9cb9718a7077 of PR #971 the\nscript/cibuild script was revised to run the Go test suite just for our\n\"git\" Go package in order to confirm that we do not leak the GIT_TRACE\nenvironment variable to Git itself when it is set.\n\nLater, in commit 2235198650d8dfadded525cc308ae8dfa786da52 of PR #3144,\nour Makefile was updated to start by running some Git commands\n(\"git describe\" and \"git rev-parse\") to determine the current tagged\nversion of the project.\n\nWhen GIT_TRACE=1 is set in second run of the Go test suite, these initial\nGit command output Git trace log lines, which does not affect the\nvalidity of the second Go test of our \"git\" package but does add some\nnoise to the output of the script/cibuild script.  We therefore just\nunset the GIT_TRACE environment variable for these two Git commands in\nour Makefile.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3299c58e10fa610d80df97ec107f66277dcbba77", "commit_date": "2022-12-23T23:51:51Z", "commit_message": "docs/man/git-lfs-migrate.adoc: add export examples\n\nWe add several examples of the use of the \"git lfs migrate export\"\nsubcommand to the git-lfs-migrate(1) manual page, showing use of both\nthe --include option and the --remote option.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b7fa3a54e4d65e5f000b30e9df41cddf1daeed41", "commit_date": "2022-12-22T03:30:13Z", "commit_message": ".github/workflows: upgrade to ruby/setup-ruby@v1\n\nAs the actions/setup-ruby GitHub Action is deprecated in favour of\nthe ruby/setup-ruby Action, we upgrade to use the latter in our CI and\nrelease workflows.\n\nIn the Windows builds, the ruby/setup-ruby@v1 Action installs the MSYS2\nbuild tools and sets some environment variables which persist for\nsubsequent steps in the workflow, such as the TMPDIR variable.\n\nThese differences from the actions/setup-ruby Action introduce failures\ninto our test suite, principally by causing Actions to run the Bash shell\nin C:\\msys64\\usr\\bin instead of the one in C:\\Program Files\\Git\\bin, which\nin turn results in the \"git\" command running the git.exe binary found in\nC:\\Program Files\\Git\\bin instead of C:\\Program Files\\Git\\mingw64\\bin.\n\nThe Git binary in C:\\Program Files\\Git\\bin, when asked to run a \"git lfs\"\ncommand, then finds the git-lfs.exe binary in C:\\Program Files\\Git\\cmd\ninstead of the one we have built, despite our changing the PATH\nenvironment variable so that our built git-lfs.exe binary should be\nfound first.\n\nWe resolve this problem by renaming the C:\\msys64 directory with a\ntemporary name after installing the asciidoctor Ruby gem.\n\nAlso note that we do not need to specify the Bash shell to run the\n\"gem install acsiidoctor\" step, and that we move this step below the\nruby/setup-ruby@v1 step in all cases so as to make the dependency\nmore clear.  (We also move the \"gem install packagecloud-ruby\" step\ninto the same relative location, for the same reason.)\n\nThe ruby/setup-ruby@v1 Action also sets the TMPDIR environment variable\nfor all subsequent steps, and this results in other test suite failures\non Windows because we create paths for our temporary test repositories\nin our GIT_LFS_TEST_DIR path, which we set using mktemp(1), and that\nderives its defaut path from TMPDIR.  However, some of our test helper\nprograms such as lfstest-customadapter use the Go language ioutil.TempFile()\nfunction to construct paths, which calls os.TempDir(), and on Windows\nthat does not refer to the TMPDIR environment variable but the TMP and\nTEMP ones instead.\n\nThe consequence is that tests using those helper programs try to\nmove files between directories creating using both techniques of\ntemporary path creation, and these return paths on different volumes,\nso the test fails when trying to move files between D:\\a\\_temp\nand C:\\Users\\RUNNER~1\\AppData\\Local\\Temp.\n\nTherefore we take care to unset the TMPDIR variable before running\ncommands which might make use of mktemp(1).\n\nh/t MSP-Greg for the suggestion to rename C:\\msys64", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4140f638e9e305605f2e8cd941355340bb71fbf0", "commit_date": "2022-12-21T02:59:32Z", "commit_message": "Merge pull request #5230 from aymanbagabas/fix-abort\n\nfix(tq): stop adding transfers to queue after abort", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7566715298e5eba28235ef3a7ed1eed93675f891", "commit_date": "2022-12-19T13:21:24Z", "commit_message": "fix(tq): stop adding transfers to queue after abort\n\nWhen the transfer gets aborted, dangling goroutines might add more\ntransfers to the queue resulting in a wait deadlock.\nConditionally add transfers to queue if abort flag is not set.\n\nSigned-off-by: Ayman Bagabas <ayman.bagabas@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e00c9c3e1531e93462dd02ad6680febd254d0488", "commit_date": "2022-12-19T01:56:28Z", "commit_message": "Check for github action updates monthly", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "83fdf8efd536d0879f74cc201ad5b5b155bb92cf", "commit_date": "2022-12-18T09:16:32Z", "commit_message": "fix(ssh): use /tmp to place control dir on darwin\n\nOpenSSH complains if the control path is too long (>=104)\nOn Darwin, os.MkdirTemp is too long, use /tmp instead.\n\nControlPath too long ('/var/folders/v3/5pnzpycs0pzdpytmgfzc7tj80000gn/T/sock-96855798/sock-b677e145501e220cfb5583ba1638a77ffe779df9' >= 104 bytes)\n\nSigned-off-by: Ayman Bagabas <ayman.bagabas@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc463f7061fe3502039bb0eb24b3c6b1c3ba885e", "commit_date": "2022-12-16T16:28:09Z", "commit_message": "commands: avoid remote connections in checkout\n\nRight now, creating a checkout object as used by the checkout and pull\ncommands creates a manifest.  This manifest in turn creates an\nSSHTransfer object to potentially connect via the new pure SSH protocol.\nHowever, connecting to the Internet during `git lfs checkout` is\nunexpected and may cause this operation to fail when one is not online.\n\nIn order to set the manifest's configuration parameters correctly, we\nneed to know whether it's possible to make a pure SSH protocol\nconnection, so it's non-trivial to avoid this connection by delaying the\ninitialization of SSHTransfer object.  Instead, let's lazily create our\nmanifest in the checkout code to avoid creating the connection.  If\nwe're performing a `git lfs pull`, then it will be used and we'll\ninitialize it very quickly, making the connection, and if we're using\n`git lfs checkout`, it won't be initialized at all, and we'll remain\noffline.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "18959fcb226c00c6b9623d338bd6c3c473e8f1ca", "commit_date": "2022-12-13T18:52:05Z", "commit_message": "Merge pull request #5219 from aymanbagabas/ssh-fix-lock-cmd\n\nfix: pure SSH list lock command name", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e018e163f7c6561ccd8a7327a2b5821916853779", "commit_date": "2022-12-09T21:33:17Z", "commit_message": "fix: pure SSH list lock command name\n\nFix typo in the command name.\n\nFixes: c07c98a755c9 (\"locking: provide a pure SSH transport\")\nSigned-off-by: Ayman Bagabas <ayman.bagabas@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "13e6543151273578558449e3c60cde3fe40bc95b", "commit_date": "2022-11-30T21:51:29Z", "commit_message": "Merge pull request #5177 from bk2204/jenkins-faq\n\nAdd a FAQ entry on Jenkins problems", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "907554ad8ce866c04b9d55be3c33e2c2bb1e39bd", "commit_date": "2022-11-30T20:10:31Z", "commit_message": "docs: add an entry about Jenkins hook\n\nWe've had several different reports about a Jenkins configuration change\nthat intentionally provides an invalid hook path..  Document this in the\nFAQ to help people find a solution to this problem.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc4576026a8cb4003507c604a6f80d30f661f809", "commit_date": "2022-11-30T20:09:53Z", "commit_message": "docs: accurately describe the install --skip-repo option\n\nThe name of the `--skip-repo` option leads people to believe that it's\nincompatible with `--local`.  Let's describe the option more accurately\nso that people know exactly what it does.  Don't specifically mention\nthe global LFS filters because one can indeed use local LFS filters with\nit as well.  Capitalize \"LFS\", and specifically mention that any of the\ndestination options may be used in conjunction with this option.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}]}