{"main": [{"commit_oid": "16e5e3e248c6b4e5c3c19f92efdbda9c86643876", "commit_date": "2023-10-13T11:13:12Z", "commit_message": "modules: ucmd: blkid: sync known types with recent libblkid", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d040b08f3156c8186b00c2ec65bf2cfb439d4d65", "commit_date": "2023-10-11T13:51:34Z", "commit_message": "resource: ucmd-module: do not allow NULL module when calling sid_ucmd_dev_{get,set}_ready\n\nNULL module means core module. Callers of sid_ucmd_dev_{get,set}_ready\nmust provide a module (their own module) so the permissions to read and\nwrite the value are correctly handled. This is in line with all the rest\nucmd-module API calls.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "460a646ccd3637dbece76cda8a03bbfa76ff7a52", "commit_date": "2023-10-11T13:35:53Z", "commit_message": "resource: ubridge: allow core to read and write any KV record", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8cea4d406d938b557c989a8cfbf24110de15772d", "commit_date": "2023-10-11T13:35:47Z", "commit_message": "resource: ubridge: add MOD_CORE_MATCH if core request KV access", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "677767387fa377ec87ccb355d82b7026d0404a6d", "commit_date": "2023-10-11T10:45:00Z", "commit_message": "debug: remove obsolete dlopen.supp false positive spec", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44ab43361e9c506bb3a7ba9ec23d74e7e53952ae", "commit_date": "2023-10-10T13:37:08Z", "commit_message": "resource: ubridge: remove unused var in _kv_delta_set; rerun clang-format", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59e818b632150ad7c30d6914465fa23b3e3b6a8c", "commit_date": "2023-10-10T13:34:47Z", "commit_message": "resource: ubridge: separate remove events from regular scans\n\nInstead of using the regular scan phases for removes, use a separate\nset, with just the same initialization and cleanup as a regular scan.\nThe main remove is done in two phases. The first calls the new module\nfunction, scan_remove for the appropriate type and block modules.\nThese are currently all stubs. The second phase removes the core SID\nkvstore values. Currently this just removes the device from the\ndevice hierarchy in the kvstore.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a36f8b9882be80c1a41bc946b50ee63da99d7d9c", "commit_date": "2023-10-10T13:34:47Z", "commit_message": "resource: ubridge: run block modules first in ident phase\n\nIf SID fails to get the module name at all, it will not run the ident\nfunctions of the block modules. However, it will run all the other scan\nphase functions. In all these other scan phase functions, the block\nmodules will be run, regardless of whether the device has a type module,\neven if the module name couldn't be determined.  Make the ident phase\nalso run the block modules, even if the module name can't be determined,\nto be consistent.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1053be2d15d4ebde67eef1524c9da882cc3c6251", "commit_date": "2023-10-10T13:34:47Z", "commit_message": "resource: ubridge: Handle partition removes when updating hierarchy\n\n_refresh_device_partition_hierarchy_from_sysfs() always assumed that\nthe partition was being added.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "250d05748e0de4b18c732a4441739df9b38c2421", "commit_date": "2023-10-10T13:34:47Z", "commit_message": "resource: ubridge: fix freed memory access in _kv_delta_set\n\nWhen _delta_step_calc() is building the delta buffers, it can add\nentries to the delta->final and delta->minus buffers that point to data\nstored in the old vvalue (delta->plus will only ever point to new data,\nwhich isn't stored in the old vvalue). When _kv_delta_set finally writes\nthe new vvalue from delta->final, the old vvalue is freed. This means\nthat there can be entries in delta->final and delta->minus that point to\nfreed memory. The same thing can happen to abs_delta->plus and\nabs_delta->minus after those are written out.\n\nWhere this is actually visible is when a device is removed and the\ndevice hierarchy is updated. In this case, delta->minus ends up with\nentries pointing to freed memory. If that memory is overwritten, it\nwill effect both the DELTA_WITH_DIFF and DELTA_WITH_REL output.\n\nThe easiest way to avoid this is to run _kv_delta_set() inside a\ntransaction, so the old values don't get freed until the end, when\nthe transaction is ended.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1878e9e66c6de5b5274663b3e81cc923e112b712", "commit_date": "2023-09-29T12:45:20Z", "commit_message": "resource: ubridge: use VVALUE_SINGLE_ALIGNED_CNT for arrays where aligned value may be used", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e63bc930470ce86839589f4d09082f7f90512879", "commit_date": "2023-09-27T13:47:01Z", "commit_message": "rpm: spec: fix failing 'install' phase\n\nCommit 405fc04c452b84a5f354322b6ab096c2e576bfe9 incorrectly added extra\n'%' character by mistake before 'multilib_fix_c_header' call.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "86f0ebc21eedd67fa058e6621342472e8e60f601", "commit_date": "2023-09-27T13:04:36Z", "commit_message": "ci: add .csmock-kfp.js for known csmock false positives\n\nThe gcc warns about the array subscript to be out of bounds when using\n_vvalue_data_prep even though there's an assertion checking for the array\nsize right before using the array itself (clang handles this correctly).\nMark this as false positive for now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "39d25ca4648bba4f00406fa4e4532b7b3c54ccaf", "commit_date": "2023-09-27T13:03:19Z", "commit_message": "resource: ubridge: use VVALUE_SINGLE_ALIGNED_CNT for temporary vector size in _build_cmd_kv_buffers\n\nWhen building KV buffers in _build_cmd_kv_buffers, we need to be able to\nhandle both unaligned and aligned values with the temporary vector.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a09ca4ed2050b8198ddfe42aa0527bec6490e411", "commit_date": "2023-09-27T13:03:05Z", "commit_message": "resource: ubridge: use VVALUE_SINGLE_CNT in _set_up_boot_id", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2109214929b173cb25dcec264fb1ca4075ad2de1", "commit_date": "2023-09-27T13:02:55Z", "commit_message": "tests: db_sync/kv_store: pass vvalue size to _vvalue_{header,data}_prep", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c58e25d05a1724c42d9f32f89d9129c10be0f4b5", "commit_date": "2023-09-27T13:02:34Z", "commit_message": "resource: ubridge: pass vvalue size to _vvalue_{header,data}_prep and _get_vvalue", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c71b028d0ff293965e09a8394fc85f2bb7af71a", "commit_date": "2023-09-27T12:58:36Z", "commit_message": "resource: ubridge: check vvalue size is sufficient for _vvalue_{header,data}_prep and _get_vvalue\n\nCheck vvalue size is sufficient for _vvalue_{header,data}_prep and\n_get_vvalue using an assertion to avoid accidental array overrun.\nAlso, this make it easier for static checkers to avoid false positives\neven though the array size is correct.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e1a6ab1e00348a7e60b40905b9c6a0dee89203b0", "commit_date": "2023-09-27T12:58:34Z", "commit_message": "resource: ubridge: also print SP_RD (KV_SUP_RD) and SP_WR (KV_SUP_WR) flags for KV dump", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d3a6661942e004e74fb7b99f611ca6f85ee6740", "commit_date": "2023-09-27T12:58:24Z", "commit_message": "resource: ubridge: shorten KV flags names for KV dump", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12554bfa687f154f6fd7d546763413b85270dc3f", "commit_date": "2023-09-27T12:58:20Z", "commit_message": "resource: ubridge: remove now ununsed VVALUE_HEADER_PREP, VVALUE_DATA_PREP and SVALUE_TO_VVALUE macros", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2840ac2f1baba81931e66280090e2f574be0f7fb", "commit_date": "2023-09-27T12:58:01Z", "commit_message": "resource: ubridge: use SVALUE_TO_VVALUE code directly in _get_vvalue", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "41494d7f2fe12fe9a023a20666b1aaaadf264d36", "commit_date": "2023-09-27T12:58:00Z", "commit_message": "tests: kv-store: replace VVALUE_{HEADER,DATA}_PREP with _vvalue_{header,data}_prep", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c91baef65b36b8fd506f2cc50546de206e326e5e", "commit_date": "2023-09-27T12:57:58Z", "commit_message": "tests: db_sync: replace VVALUE_{HEADER,DATA}_PREP with _vvalue_{header,data}_prep", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5215332bae18658cb4305446cac8a7f2a8173dda", "commit_date": "2023-09-27T12:57:52Z", "commit_message": "resource: ubridge: replace VVALUE_{HEADER,DATA}_PREP with _vvalue_{header,data}_prep", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "374c49683d51952d8c277ef2aea1f58be22dc8c9", "commit_date": "2023-09-27T12:55:36Z", "commit_message": "resource: ubridge: add _vvalue_header_prep and _vvalue_data_prep\n\nThe _vvalue_header_prep and _vvalue_data_prep are the same as the\nexisting VVALUE_HEADER_PREP and VVALUE_DATA_PREP macros. We will use\nthese functions to replace the macros since the logic inside got a bit\nmore complex now so it's not that feasible defining these as macros.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c6cca034d09b3e3c5cc3e20098d5ffb9afe0b3c1", "commit_date": "2023-09-27T12:55:32Z", "commit_message": "resource: ubridge: only check for KV_PERSIST if cmd has CMD_KV_EXPORT_PERSISTENT while processing _build_cmd_kv_buffers", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9bdd2e3f08e08aac6feceddc3330dd2870d50984", "commit_date": "2023-09-27T12:55:28Z", "commit_message": "resource: ubridge: print KV_ALIGN, KV_SYNC and KV_PERSIST flags on dbdump", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7c955e97ceabdfd9b6ca055aa281c8068210ae5b", "commit_date": "2023-09-27T12:55:18Z", "commit_message": "resource: ucmd-module: also define KV_PERSIST and make sure shortcuts are visibly commented", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5de4891ec9b9ba0286fb837739fa4aea39449dcc", "commit_date": "2023-09-27T12:53:05Z", "commit_message": "resource: ucmd-module: add KV_ALIGN sid_ucmd_kv_flags_t flag to align value on demand\n\nIf KV_ALIGN is specified when creating a KV value, then we make sure\nthat the external data is aligned to SVALUE_DATA_ALIGNMENT (which is\nsizeof(void *)).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7d9402f66fa5a97dfdd350281ecd368e98304b9b", "commit_date": "2023-09-27T12:52:22Z", "commit_message": "resource: ubridge: extend comment about kv_scalar_t's data field\n\nDocument what \"internal\" and \"external\" data really means within\nkv_scalar_t's data field.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "684af090c1a36de8d237c4a04526abaf2731e1bf", "commit_date": "2023-09-27T12:52:09Z", "commit_message": "tests: kv-store: use VVALUE_SINGLE_CNT for array size specification instead of removed _VVALUE_IDX_COUNT", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0d02d3bc6e3f150778069020293634d25b1a6e70", "commit_date": "2023-09-27T12:51:58Z", "commit_message": "tests: db_sync: fix argument order when calling VVALUE_HEADER_PREP", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f50bbda2e1d1f3c2472d1f73b01ea9e2753ace79", "commit_date": "2023-09-27T12:51:42Z", "commit_message": "resource: ubridge: fix _get_vvalue to accomodate data alignment", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "943a0a241743ae27efeb7f3387fb72c602def947", "commit_date": "2023-09-27T12:48:26Z", "commit_message": "resource: ubridge: add padding to owner size in kv_vector_t/kv_scalar_t so subsequent data are aligned\n\nFor vector values, the padding is an extra field in between OWNER and DATA\nfield. For scalar values, the padding (together with the owner) is part\nof the data as \"internal data\" and we calculate the offset to the actual\ndata (\"external data\") with _svalue_ext_data_offset.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "53ab5b69817a08e8ac471b8d524b480e87b3df98", "commit_date": "2023-09-27T12:46:36Z", "commit_message": "resource: kv-store: use uintptr_t instead of intptr_t\n\nThere's no functional change here, just be consistent throughout the\ncode. It also makes more sense to think of pointers as unsigned (while\nsigned alternatives are for special purposes).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9bab177c4d01732e8b4afe06e127037d6f65153", "commit_date": "2023-09-27T12:45:35Z", "commit_message": "internal: mem: add MEM_NEXT_ALIGNED and MEM_NEXT_ALIGNED_PAD", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "126b21f7fab8b07e8564799beadac4198139c63d", "commit_date": "2023-09-27T12:43:35Z", "commit_message": "resource: ubridge: remove VVALUE_HEADER_PREP_BUF\n\nUse VVALUE_HEADER_PREP instead of VVALUE_HEADER_PREP_BUF by\npreallocating needed buffer space before.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6d1fed03082fab5f6ca90ad377328904fbdaad87", "commit_date": "2023-09-27T12:41:53Z", "commit_message": "base: buffer: vector: preallocate buffer space if no data given for sid_buffer_add\n\nUse the same logic for sid_buffer_add with vector buffer as we already do for\nlinear buffers.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "405fc04c452b84a5f354322b6ab096c2e576bfe9", "commit_date": "2023-09-27T12:41:42Z", "commit_message": "global: add comp-attrs.h with short names for compiler attributes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "49e277417d5a720b3d2c2eedecec2ece4097ab76", "commit_date": "2023-09-27T12:41:05Z", "commit_message": "resource: ubridge: remove packed attribute from kv_scalar_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b7ad3199880f43bd246f162cb5fa29959db679b2", "commit_date": "2023-09-27T12:40:59Z", "commit_message": "resource: kv-store: make sure kv store value flags are 32 bit", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c556300df556a44f9b7a94261c2de2e19defde24", "commit_date": "2023-09-27T08:35:05Z", "commit_message": "global: rerun clang-format", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "36583ba62ed66649e3348751514b8054a8fe5d65", "commit_date": "2023-09-27T08:28:30Z", "commit_message": "resource: ubridge: quiet compiler warning about possible uninitialized variable (false positive)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d902348d5e460407a7409931771fcd67fcb9e72", "commit_date": "2023-09-27T08:25:03Z", "commit_message": "ucmd: module: dm: don't write garbage keys\n\nIf SID fails to get the sysfs dm sysfs values, likely because the\ndevice has been removed from sysfs, fail instead of using uninitialized\nmemory for the key.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bcb56634654adacab7b4c740790a25826dd964da", "commit_date": "2023-09-27T08:25:03Z", "commit_message": "resource: ubridge: free key on partition refresh failure", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "96fab6798b66db6c741030c8e23f7dc912ae1b2c", "commit_date": "2023-09-27T08:25:03Z", "commit_message": "resource: ubridge: free unused key when refreshing disks\n\nCalling _destroy_key() with a NULL key is fine, so we can always call it\non failure here.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "400fd987e2ff3b84957aceb42b7722fd54db9202", "commit_date": "2023-09-27T08:25:03Z", "commit_message": "resource: ubridge: free dirents on failure when refreshing disks", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3205e9d85859df7d9caa505421d5ae406a5a2048", "commit_date": "2023-09-27T08:25:03Z", "commit_message": "resource: ubridge: Always allocate enough space for the vvalue header.\n\nIf we are doing a remove, count will be zero here.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46fd0742bbda5a4cdb6b44f96b54b7155314e396", "commit_date": "2023-09-27T08:25:03Z", "commit_message": "resource: ubridge: verify that message size before checking header\n\nMake sure that the message size is larger than the header before\nmemcpying the header, so we don't access possibly unallocated memory.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f71d566bcf3f06ecac9deb6d9c028f487dcaf7e0", "commit_date": "2023-09-27T08:25:03Z", "commit_message": "resource: ubridge: close fd_pass on _init_connection failure", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "75d5e3e12e9bd69e854a9dcbe3f06a1683e656a2", "commit_date": "2023-09-27T08:25:03Z", "commit_message": "iface: service-link: remove unnecessary return codes\n\nservice_link_add_notification(), service_link_remove_notification(), and\nservice_link_group_add_member() cannot fail, but they still return an\ninteger. _create_service_link_group() even checks this integer, although\nits failure path doesn't correctly cleanup the allocated service link.\nInstead of adding code to cleanup the service link on an error that\ncannot happen, just change the functions to not return anything.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "49adf1784093fb6c086e335f80bf1c4168b3cc3f", "commit_date": "2023-09-27T08:25:03Z", "commit_message": "resource: ubridge: initialize lists early in sid_resource_create\n\nIn sid_resource_create() we can fail after the resource is allocated,\nbut before we initialize the lists. In this case we were calling\nlist_iterate_items_safe_back() on res->children and res->event_sources\nbefore they were initialized.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ee5398a0707e1671393512a1c5a54fd66951c052", "commit_date": "2023-09-01T13:45:13Z", "commit_message": "resource: ubridge: adapt sid_ucmd_dev_get_ready calls for recent changes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cfc8aeed9e8f466e363055f951e70f2a82157f50", "commit_date": "2023-09-01T13:45:13Z", "commit_message": "resource: ucmd-module: archive old value when changing ready state with sid_ucmd_dev_set_ready", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ec9a979e9fe3b733be1927f9f095130a009eb2eb", "commit_date": "2023-09-01T13:45:09Z", "commit_message": "resource: ucmd-module: support archived ready state retrieval with sid_ucmd_dev_get_ready", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3128e7bdeb9e75f9d2906fcb174145ad299fe7d5", "commit_date": "2023-09-01T13:18:29Z", "commit_message": "resource: ucmd-module: further refinement of sid_ucmd_dev_{set,get}_ready\n\nChanges:\n\n  - Do not return error if there is no actual change in ready state\n    when calling sid_ucmd_dev_set_ready.\n\n  - If the cached value in ucmd_ctx->scan.dev_ready is still\n    DEV_RDY_UNDEFINED when calling sid_ucmd_dev_get_ready,\n    load the value from KV store, cache and return that one.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "35806bf1c81e9c1b14c407b8ddaa02885a406523", "commit_date": "2023-09-01T11:24:44Z", "commit_message": "tools: sidctl: devices: translate binary RDY state to human-readable string", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c9b66bb590707687be72831263143567d6f051f0", "commit_date": "2023-08-31T13:52:56Z", "commit_message": "resource: ucmd-module: add comment about sid_ucmd_part_get_disk_kv", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba59541c346c96198d6403dfbc61a1597defc96f", "commit_date": "2023-08-31T11:01:21Z", "commit_message": "coverity: resource: ubridge: fix derefence before NULL check in sid_ucmd_dev_set_ready", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a7330f23df7efb7fc25ac52124f200e4ae01e32c", "commit_date": "2023-08-31T10:38:11Z", "commit_message": "resource: ucmd-module: refine handling of sid_ucmd_dev_{set,get}_ready\n\nChanges:\n\n  - Consolidate dev_ready_t state names.\n\n  - Also store the ready state as 'scan.dev_ready' member of the\n    'struct sid_ucmd_ctx' for quick access.\n\n  - Do not set/get the KV record about the ready state directly,\n    but always use sid_ucmd_dev_{set,get}_ready fn.\n\n  - When changing the state, check current state and also check\n    if the transition to new state is allowed with respect to\n    current state.\n\n  - At the end of scan cmd processing (in _cmd_exec_scan_exit),\n    mark the device as DEV_RDY_PUBLIC if not already set by any\n    of the module so far (that is, if we're still in\n    DEV_RDY_UNPROCESSED state at this stage).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cd12b6e60663dfa5fde7c7ed70e48bd16a853662", "commit_date": "2023-08-31T10:38:11Z", "commit_message": "ucmd: module: dm/lvm: reference proper module name to retrieve dm's 'uuid' record", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ffef4d90465c64637a7817215091d1127510daf8", "commit_date": "2023-08-31T10:38:10Z", "commit_message": "resource: ubridge: use MODULE_NAME_DELIM (\"/\") for the virtual core module\n\nUse MODULE_NAME_DELIM (\"/\") instead of the former \"#core\" name for the\nvirtual core module. This makes each module a submodule of the core module\nand hence KV_{SUB,SUP}_{RD,WR} flags can be used to share and delegate\npermissions to read and write KV records.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9b6f289d178b90a85844ed48b5e91d685dafde9f", "commit_date": "2023-08-31T10:38:10Z", "commit_message": "resource: module-registry: use MODULE_NAME_DELIM as starting prefix for registry name\n\nThis way, we always start with MODULE_NAME_DELIM (\"/\") so the full\nmodule names are now like full pathnames.\n\nFor example:\n\n  module registry name: \"regA\"\n  module name:          \"mod1\"\n  full module name:     \"/regA/mod1\"\n\n(Before, the full module name was just \"regA/mod1\")", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2a47d5eef788d7d5f86ad6d551cd496c35b6ce88", "commit_date": "2023-08-31T10:36:33Z", "commit_message": "ci: allow manual dispatch of csmock workflow", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8b024dcae1a2bc48fa5b29e14b86b83c502ecf3b", "commit_date": "2023-08-29T11:35:46Z", "commit_message": "resource: ubridge: remove superfluous check for NULL in _kv_cb_write", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "462500ec3505f5bac0dcfac3186f8ffce85e2470", "commit_date": "2023-08-21T14:35:49Z", "commit_message": "resource: ucmd-module: only allow the same module that reserved before to pass sid_ucmd_mod_{reserve,unreserve}_kv\n\nGlobal reservation change (that is, calling sid_ucmd_mod_reserve,unreserve}_kv)\ncan pass only if exactly the same module that reserved the key before is\nrequesting it. Use new _kv_cb_reserve to check for this condition.\n\nThe original _kv_cb_write callback is not applicable to\nsid_ucmd_mod_{reserve_unreserve}_kv calls anymore after recent changes\nwhere we can pass 'sid_ucmd_kv_flags flags' with sid_ucmd_mod_reserve_kv calls.\n\nThis way, we can reserve a key template for a module and let only that module\nto change the reservation, but still allow other modules to write concrete\ninstances of the key (passing the _check_global_kv_rs_for_wr, depending on\nKV_{FRG,SUB,SUP}* flags set with sid_ucmd_mod_reserve_kv).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "304a02435f679959f44c648ed4de21342f1d15f2", "commit_date": "2023-08-21T14:35:49Z", "commit_message": "resource: ucmd-module: add KV_SUP_{RD,WR} to sid_ucmd_kv_flags_t\n\nJust like KV_SUB_{RD,WR}, but the other way round - make it\npossible to define permissions for superior modules.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "70d50c810fd31cd9ea49313d6eecde8ea7bdf6f5", "commit_date": "2023-08-21T14:35:49Z", "commit_message": "resource: ucmd-module: add comments to sid_ucmd_kv_flags_t enum members", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a0bb114d98cda9e7b79d0721ea25ecaca10307cf", "commit_date": "2023-08-21T14:35:49Z", "commit_message": "modules: ucmd: dm_mpath: adapt sid_ucmd_mod_reserve_kv_call for recent change", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0ecb6773839523753bcc705b66e767040cc2c217", "commit_date": "2023-08-21T14:35:49Z", "commit_message": "modules: ucmd: blkid: adapt sid_ucmd_mod_reserve_kv call for recent change", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac2e99e3ad798eb070142fa8bf9905f60b247839", "commit_date": "2023-08-21T14:35:49Z", "commit_message": "resource: ucmd-module: add flags param to sid_ucmd_mod_reserve_kv\n\nMake it possible to pass 'sid_ucmd_kv_flags_t flags' arg when calling\nsid_ucmd_mod_reserve_kv so we can define whether the information about\nreservation can be read and/or written by foreign modules and/or submodules.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8d5ead3b123212f817aaa42c74b5b1a0a7db69e7", "commit_date": "2023-08-21T14:35:49Z", "commit_message": "resource: ubridge: rename _check_kv_perms -> _check_kv_wr_allowed\n\nMake it clear we are checking \"write\" permission.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2fe5becfae7fa50a45175f726a05ca94456b9f70", "commit_date": "2023-08-21T14:35:49Z", "commit_message": "resource: ubridge: use common static strings to describe reason in _check_kv_perms", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7b27de8c84cbb3bef0c691f208da1915dbf5fd34", "commit_date": "2023-08-21T14:35:49Z", "commit_message": "resource: ucmd-module: KV reservation flag (KV_RS) cleanup and fixes\n\nRemove KV_SUBMOD_RESERVED and keep only KV_MOD_RESERVED (KV_RS).\n\nRename KV_MOD_RESERVED to KV_RS so the naming is consistent with the\nrest (the *_RD and *_WR).\n\nRename _passes_global_reservation_check to _check_global_kv_rs_for_wr\nso the reason for check is more obvious from the name.\n\nIf _check_global_kv_rs_for_wr finds global reservation record, then:\n\n  - if modules match: check passes\n\n  - if modules do not match: global reservation record needs\n    KV_FRG_WR flag for the other module to pass\n\n  - if given module is a submodule: global reservation record\n    needs KV_SUB_WR flag for the submodule to pass", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9cfabb531f41e80cf270a58a434c2dc7f6006709", "commit_date": "2023-08-21T14:35:49Z", "commit_message": "modules: ucmd: dm: use just renamed KV_FRG_RD instead of old KV_MOD_RD", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7d37cdfc7ae10f35ec332e6a9724454b54decd58", "commit_date": "2023-08-21T14:35:49Z", "commit_message": "resource: ucmd-module: rename KV_MOD_{RD,WR} -> KV_FRGMOD_{RD,WR}, KV_ARCHIVE -> KV_AR\n\nShorten flag names and also make it clear we are checking permissions\nfor a foreign (\"FRG\") module.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cb32eba8a6167c4a5193bf390d38470872590f1b", "commit_date": "2023-08-02T13:15:49Z", "commit_message": "internal: bptree: fix array underflow when removing entry from root node", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5efabba30e1ad9d6ee8e5e93abef5d20fd56a58", "commit_date": "2023-08-02T10:26:39Z", "commit_message": "resource: kv-store: use flags in transaction args instead of KV_STORE_VALUE_INT_ARCHIVE value flag\n\nUse 'has_archive' and 'is_archive' flags inside transaction args (struct\nkv_unset_arg, kv_rollback_arg) instead of KV_STORE_VALUE_INT_ARCHIVE\nflag that required to directly change current value temporarily as the\nflag was part of the value itself. With flags in the transaction args,\nwe don't edit the current value at all - all directions are passed\nthrough the transaction and archive args.\n\nThese flags are important to direct processing of the value when\ntransactions are used together with archives so that we don't destroy\nthe values prematurely while they're still used for the archives.\n\nAlso, introduce separate 'struct kv_archive_arg' to direct archive\ncreation when using kv_store_set_value_with_archive and\nkv_store_unset_with_archive. Before, we reused struct kv_rollback_arg\nwhich had superset of the fields we needed for the archive handling.\nWith the separate 'struct kv_archive_arg', the code is clearer and\neasier to comprehend.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bfd3563baf8a54a8a4bc7e71ee5cf42dbe39c84b", "commit_date": "2023-07-27T12:36:14Z", "commit_message": "resource: ubridge: avoid potential issues with archive key while syncing main KV store\n\nFix warnings from clangd analyzer:\n\n\tsid-0.0.5/src/resource/ubridge.c:5074:3: warning[deadcode.DeadStores]: Value stored to 'archive_key' is never read\n\t# 5072|   \t\tsvalue      = mem_freen(svalue);\n\t# 5073|   \t\tvvalue      = mem_freen(vvalue);\n\t# 5074|-> \t\tarchive_key = mem_freen(archive_key);\n\t# 5075|   \t}\n\t# 5076|\n\n\tError: CLANG_WARNING: [#def2]\n\tsid-0.0.5/src/resource/ubridge.c:5079:6: warning[unix.Malloc]: Potential leak of memory pointed to by 'archive_key'\n\t# 5077|   \tr = 0;\n\t# 5078|   out:\n\t# 5079|-> \tif (kv_store_in_transaction(common_ctx->kv_store_res))\n\t# 5080|   \t\tkv_store_transaction_end(common_ctx->kv_store_res, (r < 0));\n\t# 5081|   \tfree(vvalue);", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b99b0957dba0e7352a0b7aac6439cb0cfb59a81b", "commit_date": "2023-07-27T11:28:17Z", "commit_message": "resource: kv-store: dup keys for use in rollback and unset buffer\n\nUsually, we temporarily allocate a memory (or we use a buffer) to\ncompose keys before we call kv_store_set_value, kv_store_set_value_with_archive,\nkv_store_unset, kv_store_unset_with_archive. The key is duplicated\ninside KV store backend to store the key inside the backend's structure.\n\nHowever, the backend doesn't expose its key copy. When we add the keys\nto rollback and unset buffer, we have the key allocated from the temporary\nmemory available only, not the key from KV store backend. For this reason,\nwe need to duplicate the key for the rollback and unset buffers too,\nothrewise we may access freed memory during kv_store_transaction_end\nwhich processes these buffers later.\n\nOnce the key in rollback/unset buffer is processed in the\nkv_store_transaction_end, we can release the memory used for the key\ncopy.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eb70b07c7433ee5f7247c1a615b29fa17fa10b64", "commit_date": "2023-07-27T11:15:26Z", "commit_message": "resource: ubridge: always unset archive if KV_ARCHIVE flag not present while syncing main KV store\n\nIf KV_ARCHIVE flag is not set while syncing main KV store, it is an\nindication we need to remove any existing archive record that is currently\nset for given key.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "05835f303c8b3cfce53e1700760d9b87bd9e8c69", "commit_date": "2023-07-26T10:03:19Z", "commit_message": "ucmd: module: dm: SID_UCMD_DM_MOD_FN_NAME_SUBSYS_MATCH -> SID_UCMD_MOD_DM_FN_NAME_SUBSYS_MATCH\n\nFor consistency with the rest of the naming.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b8ce6499e1b5c2407775f8e5d3297af8936df532", "commit_date": "2023-07-26T08:38:54Z", "commit_message": "resource: kv-store: manually rollback unset value if archive creation fails in kv_store_unset_with_archive", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7a114abd37178452b7029791baa6920ec303e7de", "commit_date": "2023-07-25T14:06:25Z", "commit_message": "resource: kv-store: fix dropping of KV_STORE_VALUE_INT_ARCHIVE flag", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "82455d500e8be8c6919a8e4e9e0abe0a29cd4f52", "commit_date": "2023-07-25T13:58:49Z", "commit_message": "resource: kv-store: add kv_store_unset_with_archive", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad4ac09e7058d44312a18bc123884f053f188a09", "commit_date": "2023-07-25T13:58:49Z", "commit_message": "resource: kv-store: use single shared code to implement {_hash,_bptree}_rollback_fn", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7d68b9bbee497b88c950a1bb9779a9d543f06328", "commit_date": "2023-07-25T13:58:49Z", "commit_message": "resource: kv-store: do not destroy archived value when handling rollbacks\n\nIf we have an archive key \"AK\" and a key \"K\" and if we are doing a\nrollback, do not destroy the current value for \"AK\" because that\nis/will be rolled back for \"K\".\n\n(STEP 1)\nFor example, if at the beginning, we have:\n\n  AK = \"A\"\n  K  = \"B\"\n\n(STEP 2)\nThen after setting the K to \"C\", we have:\n\n  AK = \"A\"  ---> AK = \"B\"\n  K  = \"B\"  ---> K  = \"C\"\n\n  rollback_buffer = [K = \"B\", AK = \"A\"]\n\n===\n\n(STEP 3 - ROLLBACK)\nWhen rolling back:\n\n  AK = \"B\"  --> AK = \"A\" (we CANNOT destroy \"B\" as it is the value rolled back for K)\n  K  = \"C\"  --> K  = \"B\" (here is that \"B\" value we need to preserve)\n\n===\n\n(STEP 3 - NO ROLLBACK)\nIf NOT doing a rollback, we normally destroy all the values in the rollback buffer\nas they are no longer needed. However, if the value is archived (like value \"B\"\nfrom STEP 2), we CANNOT destroy that as it is still used for the archive, so we\ndo:\n\n  skip_destroy(K = \"B\")\n  destroy(AK = \"A\")", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f715ed0335f00f81c99c6aff91a61b47700d998e", "commit_date": "2023-07-25T13:58:49Z", "commit_message": "resource: kv-store: fix and clean up archive handling in kv_store_set_value_with_archive\n\nSetting the value for the 'archive_key' uses exactly the same update\nprocedure as when setting the value for the 'key'. The only difference\nis that we are not calling given 'kv_update_fn' callback function for\nthe archive case. Therefore, factor out the common part to a new\n'_set_value' helper function and call this one instead.\n\nAlso, if setting the 'archive_key' fails and we need to rollback the\nvalue for 'key' we set right before, reuse existing '_kv_rollback_value'\nhelper function we already use when handling a transaction. Call the\nrollback only in case we're NOT under a transaction. If we are under\na transaction, the rollback will be automatically called with the\n'kv_store_transaction_end'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1107bf30b24b3b26fa32039dd3d60c11bdbacd71", "commit_date": "2023-07-25T13:58:49Z", "commit_message": "resource: kv-store: make condition for setting rollback and/or archive in _update_fn more readable", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0ced333086ee806000a4983edc42f423e9c51ea7", "commit_date": "2023-07-25T13:58:49Z", "commit_message": "resource: kv-store: remove superfluous check for NULL value in _update_fn\n\n_destroy_kv_stor_value check for NULL value itself so no need to check\nright before calling it.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "28c576108050e21867aa0235cc240462c2ea7031", "commit_date": "2023-07-13T12:26:54Z", "commit_message": "make: fix make uninstall for modules/type/dm\n\nProcess the submodule first (lvm), then the main module. When calling\nmake uninstall, this fixes a situation where the destination \"dm\"\ndirectory could not be removed because it still contained the submodule\nfiles.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "533e35a3ce146ebe668637efe0430a3e5c4893c3", "commit_date": "2023-07-11T13:32:06Z", "commit_message": "resource: ubridge: fix value member order when using VVALUE_HEADER_PREP_BUF\n\nCommit 28ef8c77f69acca36a95cae0ec50add0ed00ff12 shuffled value header\nmembers for the structure to be aligned and the VVALUE_HEADER_PREP\nmacro parameters were reordered accordingly, including the args for all\nthe the macro calls.\n\nHowever, the parameters for VVALUE_HEADER_PREP_BUG were not reordered\nwhile the arguments in its calls were. This caused the headers in the\nrecords which were prepared by VVALUE_HEADER_PREP_BUF to have incorrect\nseqnum and gennum assigned (the GIN/GMB records created by\n_refresh_device_disk_hierarchy_from_sysfs). Fix this.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb362a70a06ffd63dca57c7f54ccf0ad293ab948", "commit_date": "2023-06-22T13:45:46Z", "commit_message": "README: update", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "60f01660b07a9c011a35aa01dc634df604235430", "commit_date": "2023-06-22T13:24:25Z", "commit_message": "ci: fix up Coverity scan action", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6d39a34742554902c6985d7148f60f5411e8439f", "commit_date": "2023-06-22T12:34:08Z", "commit_message": "ci: add Coverity scan action", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "03c10a745398ee5cf14be9de390fdf741f46ae18", "commit_date": "2023-06-21T18:13:03Z", "commit_message": "resource: ubridge: fix check for empty string in KV_NS_UDEV export", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "49181e76244996cbaa284662dbf86926e9f768e6", "commit_date": "2023-06-21T13:45:25Z", "commit_message": "resource: ubridge: fix KV_NS_UDEV export to also exclude empty strings", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "751e31b23180af0f375f405529689347e32ac893", "commit_date": "2023-06-21T12:59:16Z", "commit_message": "resource: ubridge: fix KV_NS_UDEV export to exclude empty values", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "53ac9b2632a8467b4e20e229df9c2fa053593427", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "coverity: internal: util: fix misleading mem availability check", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "97f4ace5fe92f90278fd1683567a6ba39f48686a", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "coverity: resource: fix unitialized variable use on error path in sid_resource_create_signal_event_source", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1497efe872f5ff584e22c4a6328944a688fb1657", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "coverity: resource: ubridge: check errno for ENOENT after 'open' instead of 'access' before open", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3ba33d9cc90b5faa1a13b18533bba71e141b7ba5", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "coverity: daemon: sid: close /dev/null FD after duplicating stdin/stdout/stderr", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9eedae89c958f6259b975686f1637e172fde117", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "coverity: tools: usid: fix reported memleaks for sid_req callers", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "22516105cf6d4ad5097bb8337406a68a2afc9c0d", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "coverity: ucmd: module: blkid: remove dead code in _blkid_scan_next", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e95be6b14850095352ab8a6b90632bf2665f23f5", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "coverity: internal: formatter: fix possible NULL pointer dereference in _print_binary\n\nFix check in _print_binary that may have caused NULL pointer dereference\nif len=0 and value=NULL arguments were used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "37df632ac7ccf74865876489e9a80f92749db815", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "coverity: buffer: vector: fix misleading check for NULL buffer\n\nChecking for NULL buffer in _buffer_vector_create doesn't have any\npurpose as the caller is buffer_create which allocates the buffer\nright before calling the type-specific function. On failure, the\ntype-spsecific function would not be called at all.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d4854bf8217d062416adec290610b1b8fb5a42d8", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "coverity: resource: ubridge: fix possible NULL pointer dereference in _do_worker_control_get_new_worker", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a05accf5db1cdc38b5fc86b88ba8c276d7d62986", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "coverity: resource: ubridge: limit internal msg size before calling mmap on it\n\nPut a limit on the size of internal message that is passed using an FD\nthat we are going to mmap.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46cf77230f196ec69d291ea0e7e69ffc1870886d", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "resource: ubridge: fix msg size check in _worker_recv_system_cmd_resources\n\nThe message with results for SYSTEM_CMD_RESOURCES sent from worker proxy\nto worker using and FD representing a buffer always contains a prefix with\nsize that is of SID_BUFFER_SIZE_PREFIX_LEN. Therefore, when checking whether\nany further data is there, we need to check the message size is more\nthan SID_BUFFER_SIZE_PREFIX_LEN.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fe68ae2d24fed5914cc470d4bf4db1283c80692b", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "coverity: resource: ubridge: fix incorrect buffer size arg passed when calling _get_mod_name_from_blkext", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "08c807ce29f232cdb5acf5ea41bbc6b25e8a9ba7", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "coverity: resource: ubridge: remove superfluous sanity check in _check_msg\n\nThe command number in message ('header.cmd') that we check in '_check_msg' is\nunsigned integer and {_SELF,_SID}_CMD_START is 0 so it doesn't make sense to\ncheck whether the 'header.cmd' is less than {_SELF,_SID}_CMD_START.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f3b6cadb152acfd7e483f96b3b0c73ca9df43b8", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "resource: ubridge: use predefined INTERNAL_MSG_HEADER_SIZE instead of direct sizeof operator\n\nJust to be consistent with other parts of the code where we already use\nINTERNAL_MSG_HEADER_SIZE.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5a8c4298ea525f694de2514f309b909dbfe075e1", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "resource: ubridge: check cmd id is transferred to worker with SYSTEM_CMD_{SYNC,RESOURCES}", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5ecded52d9231e615795e979433867aa9d2b5da8", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "resource: ubridge: check internal msg header size is correct", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6580a4bd0889a8f6c773b74e5ee36778d333c79d", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "coverity: resource: kv-store: remove dead code in kv_store_transaction_begin\n\nThe 'fail' path has the 'unset_buf' never set so we never call the\nsid_buffer_destroy(unset_buf) on failure. Remove the 'fail' path\nand instead of jumping to the fail path, simply destroy the\n'rollback_buf' in case the 'unset_buf' creation fails and return\nimmediately.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc0ddfbddebc5ddc8b342d317f6adc304a0f7297", "commit_date": "2023-06-20T13:42:33Z", "commit_message": "coverity: resource: ubridge: fix double FD close in _worker_recv_system_cmd_resources", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c606ff06a80d5dcb32511cf08f510d3d7a1c2af1", "commit_date": "2023-06-19T08:47:03Z", "commit_message": "git: update gitignore\n\nIgnore coverity results directory.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2d2f3ba64b10bf6aaff27f5497412186af884ffd", "commit_date": "2023-06-12T13:40:44Z", "commit_message": "internal: bptree: suppress false positives reported by clang analyzer", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2eb06933c6649f93ac6a9be14ce9960b592212c9", "commit_date": "2023-06-12T13:40:44Z", "commit_message": "csmock: fix reported issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0a5ead110e6839b889fd7590a7b88378638b2007", "commit_date": "2023-06-12T12:33:59Z", "commit_message": "buffer: vector: fix buffer memory pointer to be NULL after a resize to zero", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "80ce41f6079901bc963515a9a1fa4a56d17420a2", "commit_date": "2023-06-12T12:32:44Z", "commit_message": "buffer: linear: fix buffer memory pointer to be NULL after a resize to zero", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "546c3ce67031a249e5a2a565b192c8889dfcdc12", "commit_date": "2023-06-07T14:28:46Z", "commit_message": "tests: db_sync: explicitly set extra_op field for struct kv_key_spec", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a0c66382924bbe697cf7d048201b36c0549346d", "commit_date": "2023-06-07T14:28:46Z", "commit_message": "resource: ubridge: explicitly set extra_op field for struct kv_key_spec", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89dd70b958bfe6fcd59ce0e2e8a1f62748ae4073", "commit_date": "2023-06-07T14:28:46Z", "commit_message": "ucmd: module: adapt modules for sid_ucmd_get_*_kv changes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "43c04dd5dbb3ce3898b2db19620552dc64e81d28", "commit_date": "2023-06-07T14:28:46Z", "commit_message": "resource: ucmd-module: add 'archive' param to sid_ucmd_get_*_kv\n\nAdd new 'archive' param to sid_ucmd_get_*_kv functions so it's possible\nto retrieve the archive value for given key.\n\nThe parameter is of integer type (not boolean) so we can add support\nfort deeper archives (more than 1 value back) in the future.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f901092298304d8b68db618efcfd111e2873d6e4", "commit_date": "2023-06-07T14:28:46Z", "commit_message": "resource: ucmd-module: support setting an archive for a key\n\nAdd 'KV_ARCHIVE' sid_ucmd_kv_flags_t for sid_ucmd_set_kv to also set an\narchive for given key. The archive key is derived automatically by\nadding KV_PREFIX_OP_ARCHIVE_C ('~') at the beginning of the original key.\n\nIf we're working with a snapshot copy of the main KV store (in worker\nprocess), then the actual value of the archive from snapshot is not synced\nwith the main KV store. Instead, the main KV store is signalled by the\n'KV_ARCHIVE' flag to do an archive of the actual value found at the time\nof sync in the main KV store.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac24ea04b65be85857fa8b09a05ea650c47b5d79", "commit_date": "2023-06-07T14:28:46Z", "commit_message": "resource: kv-store: add kv_store_set_value_with_archive\n\nThe new kv_store_set_value_with_archive automatically creates an archive\nof the value currently bound to a 'key' and bounds it to an 'archive_key'\nbefore an update is done for the record under the 'key'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2cf8c192c77c0d57082ae7d517e66e845a8c7e90", "commit_date": "2023-06-07T14:09:11Z", "commit_message": "ci: Add Packit configuration\n\nRPM builds on PRs and daily builds in @storage/sid-daily from the\nmain branch.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88a674a14e3c50c5c4dad16d2e195264fe860235", "commit_date": "2023-06-07T11:20:05Z", "commit_message": "ci: Add action to run csmock static analysis tools", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71043ac33c980019719b7f1c8d89a50e57d9561d", "commit_date": "2023-06-06T12:44:23Z", "commit_message": "spec: Add 'internal-libs-devel' subpackage", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "827db0153ab0bbeb7549c37fd3cf22b673a81b6a", "commit_date": "2023-06-06T12:44:23Z", "commit_message": "spec: Add 'mod-type-dm-lvm' subpackage", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "53dcc426ad86efd9d7bf9d36f1791fd09501212a", "commit_date": "2023-06-06T12:44:23Z", "commit_message": "Various fixes related to archive generation and RPM build\n\nThis makes sure `make dist` creates archive usable for RPM build.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4eb0865ecd7031157b7ec32cea67aca5de6dd176", "commit_date": "2023-06-06T12:44:23Z", "commit_message": "Use autoreconf instead of calling autogen.sh in spec", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6144a8d9e266645958ff737d3d6012649f0df5b2", "commit_date": "2023-06-06T12:44:23Z", "commit_message": "Let autoconf generate the sid.8 man page", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c38b1e93a5d10ff221a976252a3452872694323e", "commit_date": "2023-05-31T09:08:19Z", "commit_message": "ci: Add CodeQL static analysis configuration", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "836340c918e2b4c3f3e103d8101df1816524771b", "commit_date": "2023-05-30T12:19:24Z", "commit_message": "ci: Upload the test suite artifacts", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ec13641f51b7ff846ccb053c86fb388936039d03", "commit_date": "2023-05-30T12:19:14Z", "commit_message": "authors: update", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1bc1464e94732f3f6290535d27d347841f533caa", "commit_date": "2023-05-30T11:36:42Z", "commit_message": "ci: Add a simple GitHub action to run tests in Fedora container\n\nThis will build SID and run 'make check' on PRs and when a commit\nis pushed to the main branch in a latest stable Fedora container.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5345b861fe9116ba432d4f6b48fa1645488cb319", "commit_date": "2023-05-15T19:07:21Z", "commit_message": "resource: ubridge: align values in _reply_failure\n\nThe sid_msg_header passed in connection buffer is not aligned, so copy\nit to an aligned variable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6f9d4db4e3be00c2bdea5ab8c8aa7c6ed8a81ffe", "commit_date": "2023-05-15T19:07:21Z", "commit_message": "resource: ubridge: align variables when passing sid messages\n\n_chan_buf_recv() doesn't receive aligned data. Make sure that it gets\naligned before it's used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "49eaf461ce6411353abf65041ed713ebbc823b3f", "commit_date": "2023-05-15T19:07:21Z", "commit_message": "resource: ubridge: align values when syncing kv-store\n\nThe value structures are not aligned in the memory that's passed from\nthe worker to the main process, so they need to be copied to aligned\nmemory.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "28ef8c77f69acca36a95cae0ec50add0ed00ff12", "commit_date": "2023-05-15T19:07:21Z", "commit_message": "resource: ubridge: make sure value members are aligned.\n\nMoving the gennum structure to after the flags structure, and forcing\nthe flags structure to be a 64bit integer, ensures that all the members\nof the structure will be aligned, as long as the structure itself is\npointer aligned. Since kv_store_value->data is pointer aligned, and\nkv_vector_t is pointer aligned, all values from the kv store will be\ncorrectly aligned.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0b34b36a0e7a8f838241d9b8e69aafc7e062d11c", "commit_date": "2023-05-15T19:07:21Z", "commit_message": "resource: kv-store: align the kv-store's value data\n\nSince data is a char pointer, it is byte aligned. However iovecs, which\nneed pointer alignment, are often stored in it. Make sure that they are\naligned so the code doesn't use unaligned pointers.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b43f064c892001643099d41ba0c4ef8c276838e0", "commit_date": "2023-05-15T19:07:21Z", "commit_message": "iface: Fix unaligned access to sid_result header\n\nThe header stored in the sid_result buffer is always unaligned, instead\nof reading from it directly, memcpy it to an aligned variable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0fa2ca0f8d848b61d8f463b016dbd829c8156efe", "commit_date": "2023-05-15T19:07:21Z", "commit_message": "resource: kv-store: don't pack kv_rollback_arg\n\nThe rollback buffer is an array of kv_rollback_args. Packing them could\ncause them to no longer be correctly aligned. Since size_t should always\nbe the same size as a pointer, this is mostly a theoretical problem, but\ncompilers may generate slower code to access members of packed\nstructures.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "16a9f17c1fc04ba2ee72ff924757d63c0acdee37", "commit_date": "2023-05-11T12:26:36Z", "commit_message": "resource: ubridge: simplify flagging persistent records\n\nFormer KV_PERSISTENT flag had meaning only when used together with KV_SYNC\n(so for the record to be persistent, we also needed to sync it with the\nmain KV store first). Simplify the flag so we don't need to add \"KV_SYNC\"\nall the time. Rename the former KV_PERSISTENT to KV_SYNC_P so it's clear\nthat it's actually a \"sync\" operation, just with the extra \"also mark\nas persistent\" part.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b91ada05eca420ad6cf70e8f1a84c6798188218c", "commit_date": "2023-05-02T12:57:03Z", "commit_message": "resource: ubridge: use null domain for KV_NS_UDEV namespace when using sid_ucmd_get_foreign_{mod,dev,dev_mod}_kv", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ca1f409d8397e7cf84e0b22e2fce47819610554d", "commit_date": "2023-05-02T12:56:17Z", "commit_message": "resource: ubridge: use null domain for KV_NS_UDEV namespace when using sid_ucmd_mod_{reserve,unreserve}_kv", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a5e45662ea236e9fe721ec9ed63ebfd89d9187e", "commit_date": "2023-04-25T14:19:30Z", "commit_message": "resource: ubridge: fix KV permissions for properties imported from udev", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d0b9ea35c5b4f9ae2501e1456c0f4a0dd18258b2", "commit_date": "2023-04-25T14:11:09Z", "commit_message": "resource: ubridge: use dedicated SID_UCMD_KV_UNSET return value for successful KV unset\n\nAdd dedicated SID_UCMD_KV_UNSET return value for sid_ucmd_set_lv/_do_sid_ucmd_set_kv\nso that we can make a difference between an error state (returning NULL)\nand success while unsetting a KV record.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "645a164e925c073592b1cfecf78be891a01badb2", "commit_date": "2023-04-25T11:26:42Z", "commit_message": "resource: ubridge: fix KV index management while unsetting a record\n\nWhen a KV record is unset (using _do_sid_ucmd_set_kv), we are actually setting\na void value inside the kv_scalar_t wrapper. For this \"unset\" operation\nto get synced with the main KV store, we still need to mark the record with\ndedicated index. The index management was skipped for KV unset operation.\nFix this.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "116d81489fd405f8ed74bd79afbcdcc6b50511b7", "commit_date": "2023-04-25T08:44:23Z", "commit_message": "resource: ubridge: use null domain for KV_NS_UDEV namespace when using sid_ucmd_{set,get}_kv\n\nAll imported KVs from udev already have null domain set. For us to be\nable to retrieve these imported values, we need to use the same domain\nfor any sid_ucmd_get_kv call, that means, also using null for the\ndomain. The same applies for any new/edited values we set using\nthe sid_ucmd_set_kv.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "05585c6719903e5ad35f5bdffab09a0a720384fb", "commit_date": "2023-04-25T08:23:55Z", "commit_message": "ucmd: module: dm: add missing null sentinel for the array of submod symbol params", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c4e1dd34868889d9febf154cda00925160cccd5d", "commit_date": "2023-04-20T13:52:14Z", "commit_message": "resource: worker-control: add worker_control_get_worker_state\n\nThe worker_control_get_worker_state is used to check current state of\nthe worker that the worker_proxy represents.\n\nThis is mostly useful if we need to know whether we have received whole\noutput from the worker or if it could have been interrupted due to a\ntimeout (the check can be added to worker_proxy's channel worker_rx_cb\ncallback).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "61a3e705cbb8b97f8e30212aa06a9853e007560f", "commit_date": "2023-04-20T13:52:06Z", "commit_message": "resource: worker-control: add support for specifying a timeout and associated signal\n\nWe can specify a timeout for worker execution after which a signal\nis sent to the worker. The timeout can be specified either globally\nfor worker-control resource (using struct\nworker_control_resource_params.timeout_spec passed to\nsid_resource_create) so all workers created using this worker-control\nresource will use the same default timeout. Alternatively,\nit's also possible to specify/override timeout for each worker separately\n(using struct worker_params passed to worker_control_get_new_worker or\nworker_control_run_new_worker).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7c4efd5c8a9cc9ad3f86ed53e946e45ec75501b8", "commit_date": "2023-04-18T14:15:02Z", "commit_message": "tests: db_sync: remove unused variable", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b82a605fcdd1fb796a0b1a22894d18a36ab2b978", "commit_date": "2023-04-18T14:11:33Z", "commit_message": "resource: worker-control: set SIGTERM as parent-death signal for external workers\n\nFor internal workers, we understand the meaning of SIGUSR1. For external\nworkers, let's use the standard default SIGTERM that the external workers\nwill mostly understand.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ca98c37a93c07a455fefbb0f009d67ffae500177", "commit_date": "2023-04-14T11:35:21Z", "commit_message": "tests: db_sync: add tests for syncing to the main kv store", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "906a2b2367b70e32d7a11fb9ac8949b43c2f866e", "commit_date": "2023-04-14T11:35:21Z", "commit_message": "resource: ubridge: use transaction in _sync_main_kv_store\n\nThe main SID daemon will now rollback changes from a sync that fails\npart way through using the kv-store transactions code.\n_sync_main_kv_store needs to be careful to not fail if a value isn't\nupdated because of invalid permissions. But it must fail if\n_delta_step_calc() fails to setup the delta buffers correctly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9e2e3f09f7a3a9af1b6179019510f1ebb3581896", "commit_date": "2023-04-14T11:35:21Z", "commit_message": "resource: kv-store: add kv store transactions\n\nAdd transactions to the kv store. During a transaction,\nkv_store_set_value() and kv_store_unset() are handled differently.  when\nsetting a value, the _update_fn will save the old value in the rollback\nbuffer. When unsetting a value, the _unset_fn will not actually perform\nthe unset, but instead save the keys to be unset in the unset buffer.\nWhen the transaction is ended, if it was successful, the saved keys will\nbe unset. If the transaction was unsuccessful, the old values will be\nrestored.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1f99e9ab53291628dbec0876c9961ceff7adb498", "commit_date": "2023-04-14T11:35:21Z", "commit_message": "resource: kv-store: clean-up kv_store_unset returns\n\nremoving an entry from the database will never fail. However, the\nkv_update_fn could fail to unset a value. To check this, callers need to\ncheck update_args.ret_code if they used a kv_update_fn that could fail.\nRight now _unset_fn will never set relay.ret_code, but a future commit\nwill make it possible for that to happen, so kv_store_unset() should\ncheck for that.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f475b64f5b8bfa2f2e65689ee940a8007177478e", "commit_date": "2023-04-14T11:35:21Z", "commit_message": "resource: ubridge: prepare _sync_main_kv_store() for rollbacks\n\n_sync_main_kv_store() needs to check if setting a value fails, so that\nit knows if it needs to rollback. Also, it will need its own version of\n_kv_cb_delta_step() and doesn't need most of the the _kv_delta_set()\ncode. Copy the necessary code from _kv_delta_set to\n_sync_main_kv_store.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c02b68ddf3e4bd55fc9d398f6a20d6f9a54edf1", "commit_date": "2023-04-14T11:35:21Z", "commit_message": "resource: ubridge: fix failure return from _kv_cb_delta_step\n\nIf _delta_step_calc() fails, _kv_cb_delta_step() needs to set\nupdates_arg.ret_code. Otherwise the caller won't find out about the\nerror.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e688c788d729bb4eb526d8c3cdd2fe940c916c1a", "commit_date": "2023-04-14T11:35:21Z", "commit_message": "tests: buffer: Add tests for sid_buffer_get_data_from", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f709e9fd45607ea7035af27c858eb787cd2aac29", "commit_date": "2023-04-14T11:35:21Z", "commit_message": "resource: ubridge: use sid_buffer_get_data_from when necessary\n\n_buffer_get_vvalue_str(), _cmd_exec_resources() and\n_send_out_cmd_expbuf() all remember the position of the generic buffer,\nadd to it, use the data, and then rewind back to the remembered\nposition. However, by calling sid_buffer_get_data() they lock the entire\nbuffer. If they are not called with an empty generic buffer, data that\nthey didn't add will end up locked, even after they have dropped the\ndata that they did add. Instead they should only lock the data they\nadded, and then remove lock when they remove that data.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "66acbaf9fc1cc496de7c8b85b3794b7198d7de9f", "commit_date": "2023-04-14T11:35:21Z", "commit_message": "base: buffer: add sid_buffer_get_data_from() function\n\nsid_buffer_get_data() locks the whole buffer. If a function only needs\nto return part of the buffer, it can end up locking data that it didn't\nintend to. sid_buffer_get_data_from() only locks and returns the buffer\nstarting at the specified position.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e7b96f7b13e61fe3b98af2cdba1d0cccbe835159", "commit_date": "2023-04-14T11:35:21Z", "commit_message": "resource: ubridge: simplify debug message\n\nThe second ternary operater doesn't actually change anything, so remove\nit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa4833b70651c2527b40749e4d7bed1c3c064797", "commit_date": "2023-04-14T11:35:21Z", "commit_message": "resource: set priority before creating event source\n\nthe fail code path doesn't try to free the sid event source, so\nthat should be created last. Otherwise if setting the priority\nfails, the event source memory will leak", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "63e17e881d3dc2b58a98ec6da42cd90887ef25c0", "commit_date": "2023-04-12T14:29:15Z", "commit_message": "resource: worker-control: also match sid_resource_type_worker_proxy_with_ev_loop in worker_control_get_worker_id\n\nCommit 0641c5a99e606d427ee65e646ba17aa2eb098e4c added new internal\nsid_resource_type_worker_proxy_with_ev_loop which is the same as\nsid_resource_type_worker_proxy, just with its own event loop used.\nAs such, the worker_contorl_get_worker_id must also match the new type\nwhen retrieving the worker id.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "422842a810f8adf696771ccfffff3c9620286931", "commit_date": "2023-04-12T14:28:58Z", "commit_message": "resource: worker-control: put all members of struct worker_control used for worker init under its own struct\n\nIt's easier to see all the members related to worker initialization this way.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "825e874e6f01103cf87286714ae39d2028a18be2", "commit_date": "2023-04-12T14:18:33Z", "commit_message": "resource: worker-control: add worker_control_get_worker_arg\n\nAdd worker_control_get_worker_arg to get the arg that is assigned to the\nworker/proxy on their creation when we called worker_cotnrol_get_new_worker\nor worker_control_run_new_worker.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "70fa76655099f5680ac9494ef7378d6317f94ce2", "commit_date": "2023-04-12T13:37:29Z", "commit_message": "resource: worker-control: make it possible to set custom arg for worker and its proxy\n\nMake it possible to set custom arg for worker and its proxy. Then,\nwhenerver we're using the worker and/or proxy, we are able to retrieve\nthe custom information directly. This is practical mainly if we're\nprocessing worker/proxy related callbacks (e.g. channel rx/tx callbacks)\nwhere we can pass the extra arg.\n\nNote: the rx/tx worker/proxy channel callbacks already have their own\narg, but since the time when we define the channels (with their arg)\nand the time when we actually create the worker/proxy can differ, the\narg for the channel callback and the worker/proxy as a whole can differ\ntoo.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1456b2e9f4f3ac89c9aef7ea1c41d070ebdafb6", "commit_date": "2023-04-11T12:08:59Z", "commit_message": "ucmd: module: dm/lvm: rename ucmd_mod_ctx to ucmd_common_ctx\n\nWe're using \"common\" name now for common context, not \"mod\".", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f94f8c1c926863fdd93f6f7253aa2f852d247554", "commit_date": "2023-04-06T14:01:28Z", "commit_message": "resource: worker-control: check worker_control_run_new_worker does not interleave with worker_control_get_new_worker", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0641c5a99e606d427ee65e646ba17aa2eb098e4c", "commit_date": "2023-04-06T13:40:52Z", "commit_message": "resource: worker-control: add worker_control_run_new_worker\n\nThe new worker_control_run_new_worker is used to execute external worker\nwhile waiting for it to complete in situ. This way, we don't need to hook\ninto existing event loop which may reside several layers up the current\ncall stack. That means, we don't need to do current call stack unwinding\nup to the event loop point and then returning back which would be quite\ncomples. Also, it would be useless if we need the external worker to\nfinish anyway for us to continue processing based on its results.\n\nThe worker_control_run_new_worker is a combination of\nworker_control_get_new_worker and worker_control_run_worker (in the\nworker) and running a new and temporary event loop (in the worker proxy)\nto handle just this worker.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "de09ebdd05a7c81fb14181bd76fd221c456e0755", "commit_date": "2023-04-06T13:12:54Z", "commit_message": "resource: worker-control: remove now incorrect sid_resource_unref in _run_internal_worker\n\nThe top-level resource used to represent the worker is floating inside\n_run_internal_worker. The sid_resource_unref was used to destroy the\nworker resource tree here.\n\nWith the recent change (previous commit a3a0d7b1322c4ade4cf1b19e622f9fe038dbe5bf),\nthe sid_resource_run_event_loop takes a reference and then releases it by itself.\nSince the worker resource is floating, the sid_resource_unref inside the\nsid_resource_run_event_loop will also destroy the resource, hence making\nthe outer sid_resource_destroy in _run_internal_worker superfluous\n(and also incorrect, since the resource doesn't exist anymore when\nsid_resource_run_event_loop returns).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a3a0d7b1322c4ade4cf1b19e622f9fe038dbe5bf", "commit_date": "2023-04-06T13:08:24Z", "commit_message": "resource: hold a reference to a resource inside sid_resource_run_event_loop\n\nMake it safe and take a reference to the resource containing the event\nloop handle itself when sid_resource_run_event_loop is being executed\nso that the resource is not destroyed by mistake (and so the event loop\nhandle with it).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5575aaaf31563a86aa08d0d082f531e077868e8", "commit_date": "2023-04-03T12:35:54Z", "commit_message": "ucmd: module: dm: fix calling of submod callback functions\n\nOnly during IDENT phase, we correctly called a submodule's ident callback,\nall the other phases used incorrect type when retrieving the list of\nsubmodule callbacks and hence the callbacks got wrong. Fix this by\nusing correct \"struct dm_submod_fns *\" type for the array of registered\nsubmodule callbacks instead of incorrect \"struct sid_ucmd_mod_fns *\".", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9bfdc0860ec7c9a795a0fdeeb6f961558fe92bff", "commit_date": "2023-03-28T11:18:02Z", "commit_message": "ucmd: module: remove now obsolete sid_ucmd_mod_add_mod_subregistry", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8c14c5789d953a4a9911e2a0a4c95d45fa3602ad", "commit_date": "2023-03-28T11:18:02Z", "commit_message": "ucmd: module: dm: replace sid_ucmd_mod_add_mod_subregistry with sid_ucmd_mod_add_subresource", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6e741d75f116996906208d1824250bad68378182", "commit_date": "2023-03-28T11:17:59Z", "commit_message": "modules: ucmd: recognize module subregistry in sid_ucmd_mod_add_subresource and act accordingly\n\nThe sid_ucmd_mod_add_subresource can recognize if the subresource passed\nin as argument is of sid_resource_type_module_registry type. If that's\nthe case, add the module registry as current module's subregistry.\n\nThis is what sid_ucmd_mod_add_mod_subregistry does currently. We will\nremove this one and use the common sid_ucmd_mod_add_subresource instead\n(subsequent patches).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ebe2ce9a69f255221df757ffb2aec79e7b658b08", "commit_date": "2023-03-28T10:52:31Z", "commit_message": "resource: worker-control: use EXIT_FAILURE instead of '1' for the exit call\n\nJust for the completeness - we're using EXIT_FAILURE already in rest of\nthe code.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "61a88080baea72e0271252f2bcac443b88ee2dea", "commit_date": "2023-03-28T10:47:16Z", "commit_message": "resource: worker-control: close non-channel FDs before executing external worker\n\nMake sure we are not passing any unintended FDs to external workers.\nIf there's an FD we need to pass to the external worker, we need to\ndefine that as an official channel.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "029abc26ca9b8c4fcb2e541db9282d48339e631e", "commit_date": "2023-03-27T08:20:01Z", "commit_message": "resource: worker-control: make sure worker_control_run_worker executes only in the worker\n\nAdd a check in worker_control_run_worker that we're actually running in\na worker and error out if not. Otherwise, we can get a segfault - the\nworker_control.{worker_id, worker_channels, ext_argv, ext_envp} are not\nset if we're not in a worker.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "523cbc43c77b5d136d2941c708996bf299d87091", "commit_date": "2023-03-27T08:07:54Z", "commit_message": "modules: ucmd: add sid_ucmd_mod_add_subresource\n\nAdd sid_ucmd_mod_add_subresource to attach custom resource to current\nmodule (its resource). This way, it's possible to attach a resource\nsubtree in a module  and let SID manage its existence and make it possible\nto search through the whole tree from top to bottom. Though, searching from\nthe subresource upwards is restricted so the module doesn't access\nand change core resources - the module can do that only using the\nucmd-module API.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3bf214045fa41d6eef0071f515252b7b3ffe69f0", "commit_date": "2023-03-27T08:07:42Z", "commit_message": "resource: ubridge: factor out _get_mod_res_from_mod from sid_ucmd_mod_add_mod_subregistry", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6acc15775de7599a63752fcf10560d426f4bf9b4", "commit_date": "2023-03-27T08:07:30Z", "commit_message": "ucmd: module: dm: set DM_SUB=none record if no submodule claimed given device", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b88a2878614e7fd2dc0eb58bb97c8d130bebcfc3", "commit_date": "2023-03-27T08:03:27Z", "commit_message": "ucmd: module: dm: load submodules after corresponding subregistry is attached to DM module\n\nA subregistry/submodule may need to access parent module's properties during\ninitialization. For this, we need to attach the subregistry to parent\nmodule first and then load the subregistry/submodule for proper operation.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e3865032458caa04f7de4726e62236c360553f89", "commit_date": "2023-03-27T08:01:22Z", "commit_message": "resource: module-registry: add module_registry_load_modules\n\nWe already have module_registry_load_module to load a single module by\nname. If we wanted to load all known modules, we'd need to iterate\nthrough the module list first to get individual names. Add\nmodule_registry_load_modules as a shortcut to avoid the iteration.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "36da61d7ed1ff91a28e06f004fad97a8e9e25bf8", "commit_date": "2023-03-27T08:00:21Z", "commit_message": "resource: module-registry: only pass module registry resource to internal _preload_modules fn\n\nWe can still get the struct registry out of the module registry resource.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "868a19ad575044b8b416c00c31f594602107015a", "commit_date": "2023-03-27T08:00:12Z", "commit_message": "ucmd: module: dm: also pass sid_ucmd_common_ctx instance to submodules' init/reset/exit hooks", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "644e0efcd056090a491d1cc54a706bbf6f270f7e", "commit_date": "2023-03-07T11:03:43Z", "commit_message": "resource: ucmd-module: rename sid_ucmd_dev_get_* to sid_ucmd_event_get_dev_*\n\nRename sid_ucmd_dev_get_* to sid_ucmd_event_get_dev_* to make it clear\nthat we're not getting the records from the KV store, but from current\nevent context.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e755058f53014dfcb6402d9536dcf86a1e6ccef3", "commit_date": "2023-03-06T11:34:19Z", "commit_message": "ucmd: module: dm_mpath: use KV_NS_DEVMOD instead of KV_NS_DEVICE for VALID and WWID records", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0780282ff7944bd94a6a6a5290de7c739b42fa86", "commit_date": "2023-03-06T11:34:19Z", "commit_message": "ucmd: module: dm: add debug message about which submodule claimed device", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3526dfe42ed816a1a9d06b55086d69db2fd569e3", "commit_date": "2023-03-06T11:34:19Z", "commit_message": "ucmd: module: dm/lvm: claim LVM device based on DM UUID's \"LVM-\" prefix", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "781664269cd8358404ddf364fc4254c3ebd18b74", "commit_date": "2023-03-06T11:34:19Z", "commit_message": "ucmd: module: dm: store DM 'name' and DM 'uuid' records\n\nMake DM 'name' and DM 'uuid' records available for read in DM submodules.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "60f4e211bd11438eaae1529f0a95491cd8cf48e9", "commit_date": "2023-03-06T11:34:19Z", "commit_message": "resource: ucmd-module: add new line", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3dfe781c0e91254147b27722135010626aa850f7", "commit_date": "2023-03-06T11:32:36Z", "commit_message": "resource: ucmd-module: add sid_ucmd_get_foreign_{dev,mod,dev_mod}_kv\n\nWith sid_ucmd_get_foreign_dev_kv, sid_ucmd_get_foreign_mod_kv and\nsid_ucmd_get_foreign_dev_mod_kv, we are able to get foreign shared\nrecords where we specify foreign device, module or both.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "29b42dae482fbe63e38cf98af3b444720ab55292", "commit_date": "2023-03-06T11:28:34Z", "commit_message": "resource: ucmd-module: add KV_NS_DEVMOD namespace\n\nWe already had KV_NS_MODULE for unique records in the scope of current\nmodule and KV_NS_DEVICE for unique records in the scope of current\ndevice.\n\nThe new KV_NS_DEVMOD combines KV_NS_DEVICE and KV_NS_MODULE so that we\ncan create records which are device-specific and at the same time\nthey are specific to a module. This way we don't need to explicitly\nspecify a predefined key prefix for a record which corresponds to the\nmodule somehow and is bound to a device (for example, this can be\nused for records like DM_NAME, DM_UUID, DM_MULTIPATH_VALID,\nDM_MULTIPATH_WWID).\n\nTaking the key schema: op:dom:ns:ns_part:id_cat:id:core, the\nKV_NS_MODDEV is applied this way:\n\n   ns      = \"X\"\n   ns_part = <dev_id>\n   id_cat  = \"M\"\n   id      = <mod_name>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "029502948f555f22580d906869014906d2991a11", "commit_date": "2023-03-03T12:09:16Z", "commit_message": "ucmd: module: dm/lvm: add lvm module as dm submodule\n\nAdd skeleton for LVM subsystem which is recognized as a DM submodule.\nAs such, it resides as subtree in DM module's code and also compiled\nDSO path.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8c6c85c0d34cf08aafdf145c5950e5c12e56f285", "commit_date": "2023-03-03T12:09:16Z", "commit_message": "ucmd: module: dm: add sid_ucmd_dm_subsys_match to match DM subsystem\n\nAdd sid_ucmd_dm_subsys_match which is DM-specific hook for DM submodules\nto scan for, detect and claim a DM subsystem. The DM module iterates over\nall its submodules and the first submodule that matches a device with\nthe subsystem that the submodule handles, claims the device. Once the\nsubsystem is resolved, the claim is store in the KV store so we don't\nneed to detect again on subsequent events.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d3e168e31e8edd9b12abbb195fcc4351196b53d9", "commit_date": "2023-03-03T12:09:16Z", "commit_message": "ucmd: module: dm: add DM 'uuid' and DM 'name' device aliases", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "32a9c32bd278226207be1a78a357a4021f30a90d", "commit_date": "2023-03-03T12:09:16Z", "commit_message": "ucmd: module: dm: also handle dm submodules during scan phases\n\nPrepare code for calling submodule hooks while processing scan cmd\nphases. Subsequent patches will add supporting code to match and load\nexact DM submodule to handle detected DM subsystem.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "344e1b69eb9063c3b0f954a2feb303f3f7d3b3c3", "commit_date": "2023-03-03T12:09:16Z", "commit_message": "ucmd: module: dm: just return -1 on _dm_init failure", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "713e82f3489f1439c56a876b824401367f6ee7ea", "commit_date": "2023-03-03T12:09:16Z", "commit_message": "ucmd: module: expose struct sid_ucmd_mod_fns in ucmd-module.h\n\nExpose struct sid_ucmd_mod_fns in public ucmd-module.h so it's possible\nto reuse the interface to define possible submodules of a module.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7baa0a8542343be64c8dd7018ec3d51e026c6a75", "commit_date": "2023-03-03T12:09:15Z", "commit_message": "modules: ucmd: adapt flags used throughout modules for sid_ucmd_kv_flags_t changes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2e6bf49c95dd5a0a445397e4094e5ea698bef26", "commit_date": "2023-03-03T12:09:15Z", "commit_message": "resource: ubdrige: adapt code for sid_ucmd_kv_flags_t changes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "80ae25d7df38d9b908121a4c90e11973e622258c", "commit_date": "2023-03-03T12:09:15Z", "commit_message": "modules: ucmd: extend and make sid_ucmd_kv_flags_t more granular\n\nExtend sid_ucmd_kv_flags_t so we can differentiate module and submodule\npermissions.\n\nAlso, change the way permissions are defined. Instead of specifying a\nbit to make the record \"private\" or \"protected\", use more common \"read\"\n(RD) and \"write\" (WR) permissions bits. This way, if we don't specify\nany bit, we end up with a \"private\" record and adding bits then adds\nmore read/write access.\n\n  OLD:                         NEW:\n  ============================================================\n\n  KV_FLAGS_UNSET               KV_FLAGS_UNSET (stays the same)\n\n  KV_SYNC                      KV_SYNC (stays the same)\n  KV_PERSISTENT                KV_PERSISTENT (stays the same)\n\n  KV_MOD_RESERVED              KV_MOD_RESERVED (reserve, applies only to top-level modules, not submodules)\n  ---                          KV_SUBMOD_RESERVED (reserve, applies only to submodules, not top-level modules)\n  ---                          KV_RESERVED (shortcut for KV_MOD_RESERVED | KV_SUBMOD_RESERVED)\n\n  KV_MOD_PROTECTED             KV_MOD_RD (allow read, applies only to top-level modules, not submodules)\n  ---                          KV_SUBMOD_RD (allow read, applies only to submodules, not to-level modules)\n  ---                          KV_RD (shortcut for KV_MOD_RD | KV_SUBMOD_RD)\n\n  ---                          KV_MOD_WR (allow write, applies only to top-level modules, not submodules)\n  ---                          KV_SUBMOD_WR (allow write, applies only to submodules, not top-level modules)\n  ---                          KV_WR (shortcut for KV_MOD_WR | KV_SUBMOD_WR)\n\n  KV_MOD_PRIVATE               --- (removed KV_MOD_PRIVATE - no permission bits specified means \"private\" now)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aae20e4e320e56ae9bfbac56c8e51fc310e6921e", "commit_date": "2023-03-03T12:07:24Z", "commit_message": "resource: ubridge: fix gcc warning\n\nFix gcc's warning about \"control reaches end of non-void function\" in\n_get_mod_name_from_blkext fn which contains only a 'switch' statement.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "87d4f1ac8c2552aa9a634c3025b72e28e82b77bd", "commit_date": "2023-03-02T13:46:26Z", "commit_message": "tests: bptree: format with clang-format", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a1f9f2b711d553bc9b181991342db4be8082286c", "commit_date": "2023-02-28T15:51:01Z", "commit_message": "tests: bptree: add bptree unit tests.\n\nTest the various insert and remove code paths, along with the iterator.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c5921f85ed38037a26166f63c509eeeaba5a4390", "commit_date": "2023-02-28T15:51:01Z", "commit_message": "internal: bptree: Fix leaf_node redistribution\n\nWhen the entries are removed from the tree, _redistribute_nodes() was\nsetting bk_prime to the leftmost key of the right leaf, instead of the\nrightmost key of the left leaf, which is what the rest of the code\nassumes. This means the _find() code could no longer find the record\nthat matches bk_prime. Fix this.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b59913d23c837d62ae2e3d859f13a7079e5cdf9a", "commit_date": "2023-02-28T15:51:01Z", "commit_message": "internal: bptree: remove keys from internal nodes and leaves\n\nAfter insertion operations, rightmost key from every leaf in the bptree\nexcept the rightmost leaf will have a copy in an internal node pointing\nto the subtree for which it is the rightmost key. However, if the\nrightmost key from a leaf is deleted, the code doesn't switch the key in\nthe internal node to point to the new rightmost key. This means that\nextra memory is used to store keys with no records in the tree. It also\ncauses a bug in _find() with LOOKUP_PREFIX, since _find_leaf() might\nreturn a leaf block where all the matching keys have been deleted,\ncausing the lookup to fail when matching keys do exist in the next leaf.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d7c7004d4482aa31aaf0b70ecc0ecfbab3afcaa5", "commit_date": "2023-02-28T15:51:01Z", "commit_message": "internal: bptree: preallocate all memory needed in _insert\n\nInstead of allocating memory as you go, which could leave the bptree\nin an invalid state if you fail, preallocate all the memory before\nyou start modifying the bptree. This way either _insert() will fail\nwithout having done anything, or it will succeed. This fixes multiple\nfailure path issues.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a0c97cc0a97a79f033fc63b6d68280b0dd8ffecf", "commit_date": "2023-02-28T15:51:01Z", "commit_message": "internal: bptree: remove _make_leaf()\n\nRemoving this function makes a future patch simpler.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "57ca37e8f5e4337c957c134fd3684c61516f5a9f", "commit_date": "2023-02-28T15:51:01Z", "commit_message": "internal: bptree: Make sure to clean up when freeing record\n\nIf bptree_insert() just calls free() on the record, it won't clean up\nthe stats. Instead, create a new function _destroy_record() to clean\nup properly. This code is still has issues, since the record may have\nbeen inserted, depending on where the insert failed. That will be fixed\nby a future patch.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9b0d867eb4706cc141ee8ff75204c374f248e527", "commit_date": "2023-02-28T15:51:01Z", "commit_message": "internal: bptree: Make sure to clean up when freeing bkey\n\nInstead of just calling free(), we need to call _destroy_bkey() to\nhandle all the necessary cleanup.  This code is still buggy, since there\ncould be other references to the bkey, depending on where the insert\nfailed. A future patch will handle this.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a07877ed8827b7116ca92a43239ff7140319dd13", "commit_date": "2023-02-28T15:51:01Z", "commit_message": "internal: bptree: avoid temporary memory when splitting node\n\nInstead of creating temporary arrays, we first populate the new node\nwith the keys and pointers from the old node, as well as the inserted\npointer if necssary. Then we move the keys and pointers in the old\nnode to make space to insert the new pointer if necessary.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b92c0b9fb6ec24b05a3a56e2d88ef64163f68bac", "commit_date": "2023-02-28T15:51:01Z", "commit_message": "internal: bptree: fix _create_root() failure check\n\n_create_root() returns a pointer to the new root or NULL, not a return\ncode.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "60e617c72f5c9d94e4c20aa22e1194f6964cd82b", "commit_date": "2023-02-28T15:51:01Z", "commit_message": "internal: bptree: avoid temporary memory when splitting leaf\n\nInstead of creating temporary arrays, we first populate the new leaf\nwith the keys and records from the old leaf, as well as the inserted\nrecord, if necessary. Then we move the keys and records in the old leaf\nto make space to insert the new record if necessary.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e684962130d3d18835b24fc9c18335237477f717", "commit_date": "2023-02-28T15:51:01Z", "commit_message": "internal: bptree: Simplify _cut", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71b0016d39e0daa111c004aa89395118065cbc24", "commit_date": "2023-02-28T15:51:01Z", "commit_message": "internal: bptree: mark local functions as static", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bec8c097f84ff2ed90a3b0b0ab3fa5dac215b882", "commit_date": "2023-02-28T15:51:01Z", "commit_message": "internal: bptree: Handle empty bptree in bptree_get_height\n\nbptree->root starts as NULL. We need to check for that before\ndereferencing it, or we could segfault.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a81cc6f7712c7d6d60533807cb6548022a5fcfe1", "commit_date": "2023-02-28T15:51:01Z", "commit_message": "internal: util: simplify util_str_copy_substr\n\nstrndup() can handle all of the cases where mem is not used, so you can\nsimplify this function.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d0695d2d34390853e3f834200a0cbedbe3bff67b", "commit_date": "2023-02-20T12:13:39Z", "commit_message": "resource: ubridge: use single function to handle grouping and aliases\n\nAliases are implemented as groups, just using KV_KEY_DOM_ALIAS domain,\nhardcoded KV_NS_MODULE namespace and current device as input. So use\na single function tohandle both groups and aliases.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3155973170bacb174bca2f7a3fed4964a56e703b", "commit_date": "2023-02-16T09:59:31Z", "commit_message": "resource: ubridge: _cmd_exec_devices optimization\n\nOnly call _get_vvalue for keys we know we're interested in.\nDo not store whether the KV value is a a vector in a variable - it's\nused only once.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "519cf17fe951a3329d1fd12857d2a888098e71ff", "commit_date": "2023-02-16T09:05:36Z", "commit_message": "resource: ubridge: use print buffer for commands printing results\n\nUse the new print buffer (sid_ucmd_ctx.prn_buf) for printing results in\nversion, dbstats, resources and devices cmd handler (_cmd_exec_<cmd_name>).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d9d244f1be41106e7d5df8092d4b590259fb1334", "commit_date": "2023-02-16T08:41:31Z", "commit_message": "resource: ubridge: add separate print buffer in sid_ucmd_ctx\n\nBefore, we used generic buffer (sid_ucmd_ctx.common->gen_buf) for\nprinting results in various command handlers (_cmd_exec_version,\n_cmd_exec_dbstats, _cmd_exec_resources, _cmd_exec_devices).\n\nHowever, the generic buffer is supposed to be used only for\nshort-term temporary allocations, ideally not reaching out of\nthe scope of current function. Otherwise, we may get into an issue\nwhere a pointer from the buffer is used and mark inside a buffer\nthen prevents taking another pointer from the buffer unless the\nprevious pointer is unbound (sid_buffer_unbind) or buffer memory\nis rewound (sid_buffer_rewind).\n\nThis exact case caused an issue with\n_cmd_exec_{version, dbstats, resources, devices} which used the\ngeneric buffer for printing results, then taking the pointer to the\ngeneric buffer memory with these results and adding that pointer to\nthe overall result buffer.\n\nLater on, another part of the code tried to allocate memory from the\ngeneric buffer and take the pointer (the sid_ucmd_mod_unreserve_kv\nwhich needed this for composing and using the KV key temporarily).\nIt failed to do so because we were already using the pointer for the\nbuffer (the buffer inside was already marked by taking the previous\npointer for print results).\n\nTo avoid these issues, add a separate print buffer\n(sid_ucmd_ctx.prn_buf) which is used for printing command results.\nThis also makes it cleaner so that the gen_buf stays there only for\nthe short-term temporary allocations as it was originally supposed to\nand the separate prn_buf clearly holds the command printouts.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d3d3b4e12f8ef1ab31f42d51bac976f84424434c", "commit_date": "2023-02-15T12:42:35Z", "commit_message": "tools: sidctl: recognize 'devices' command", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "875c49fdeb9ff04811eaab5728a2cb4e75717aff", "commit_date": "2023-02-15T12:39:01Z", "commit_message": "resource: ubridge: add SID_CMD_DEVICES handler\n\nThe new SID_CMD_DEVICES lists devices with DEVID and associated\nGMB (\"group members\"), GIN (\"group in\"), RDY (\"ready\") and RSY (\"reserved\")\nrecords.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "099fac9aec35f5836b8555bbe9250e4a0af9d8c7", "commit_date": "2023-02-15T12:37:50Z", "commit_message": "iface: register new SID_CMD_DEVICES", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c68283a755980ff6f0bf16474e8f90ac9026c175", "commit_date": "2023-02-14T14:27:52Z", "commit_message": "resource: ubridge: parametrize field name for _print_vvalue", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c3d52ce2ab3cf51e06a19d4b032aad57cf76e180", "commit_date": "2023-02-14T11:44:33Z", "commit_message": "global: adapt code for changes in formatter interface", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6b676f4e458f15eb6fe7244faa776fa0be94953", "commit_date": "2023-02-14T11:36:39Z", "commit_message": "formatter: interface cleanup\n\nCleanup formatter functions so that they have the same common parameter\nbase used first (output_format_t format, struct sid_buffer *buf, int level\n...).\n\nAlso, make all functions which may be adding a comma to do that right\nbefore printing the actual item (previously, it was mixed - some\nfunctions were adding comma before and some of them after printing the\nitem).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4f33d4ba2fb7639c8bf8d8bf8583ab8627d4d9ea", "commit_date": "2023-02-13T12:29:50Z", "commit_message": "tests: fix param order for do_test_zero_add helper function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b18b03e6ec9c85398305fa1e03bfa8f8d0b11aee", "commit_date": "2023-02-13T12:27:27Z", "commit_message": "buffer: Disallow releasing past used memory in release_mem\n\nWe need to check that the position we want to rewind to in actually\nwithin the used memory. Otherwise, we can expose allowed but not used\ngarbage memory, or we can push usage.used past usage.allocated, which\ncan cause buffer errors when doing things like reading from a fd.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9e5d0ae98769dfc66679c3bdddfa3eddef58870a", "commit_date": "2023-02-13T12:27:27Z", "commit_message": "tests: add buffer tests to check all buffer varieties", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c447494de1bc9607eef73bf1ccdd313674f3d42c", "commit_date": "2023-02-13T12:27:27Z", "commit_message": "base: buffer: fix _buffer_vector_add checks\n\nChecking if buf is NULL does nothing, since we would have already\ndereferenced it both in sid_buffer_add and earlier in this function.\nAlso buf->mem == NULL is valid for buffers with nothing allocated.  In\nfact, with this check in place, you can't add anything to\nSID_BUFFER_MODE_PLAIN vector buffers with SID_BUFFER_BACKEND_MEMFD/FILE\nsince they start with buf->mem == NULL.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "909f6006bbd8ae714168d014e690fd4f3ae5c05e", "commit_date": "2023-02-13T12:27:27Z", "commit_message": "base: buffer: make prefix vector buffer reset size consistent\n\nWhen SID_BUFFER_MODE_SIZE_PREFIX buffers of both types are created,\ntheir initial size is incremented to hold the prefix. When linear type\nbuffers are reset, their initial size calculation works the same way.\nHowever, when vector type buffers are reset, the initial size is only\nincremented if it was 0. Make this consistent with their creation and\nthe linear reset calculations.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a9798ca4406f7dbd8cee55346117c5df36a2241f", "commit_date": "2023-02-13T12:27:27Z", "commit_message": "base: buffer: free prefix buffer on all vector buffer backends\n\nSince all backends store the prefix buffer in malloced memory, they all\nmust free it when destroying the buffer.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38e351b3e16e61159779b58763e34aba32ca7ab7", "commit_date": "2023-02-13T12:27:27Z", "commit_message": "base: buffer: close fd on failed vector buffer create\n\nVector buffers only store the iovecs in their memory. The buffers that\nthe iovecs point to still need to be malloced. If _buffer_vector_create\nfails to malloc the memory to store the SID_BUFFER_MODE_SIZE_PREFIX\nprefix buffer, it should close the fd. Otherwise it will leak when the\ncreate fails.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "acd900296fd98ecf23de493d392efb493fadbc80", "commit_date": "2023-02-13T12:27:27Z", "commit_message": "base: util: mark local function _get_proc_cmdline() static", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4f17aff83548e8b6ab541aea51167bcb492859f6", "commit_date": "2023-02-09T10:11:56Z", "commit_message": "clang: add .clang-check configuration", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cfa73900d8aba7107950b06c7fef964c8b2d0f36", "commit_date": "2023-02-09T10:08:48Z", "commit_message": "travis: remove", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9e8dea4f4ff4563a377302017cf26c104fa3517a", "commit_date": "2023-02-09T09:33:55Z", "commit_message": "resource: ubridge: use kv_scalar_t for single/scalar kv store value", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "660d5a8f21bccb162a74e5e6983240dc150eb4dc", "commit_date": "2023-02-08T15:10:18Z", "commit_message": "resource: ubridge: use kv_vector_t for vector kv store value", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f5f1a439397617f39d09a78da0d1d11c5cbc56e7", "commit_date": "2023-02-08T14:41:22Z", "commit_message": "resource: ubridge: add VVALUE_DATA_PREP macro and use it", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25b2d17584061edde71e72d51c63d355ed9fe30d", "commit_date": "2023-02-08T14:18:30Z", "commit_message": "resource: ubridge: replace _flip_key_specs with UTIL_SWAP", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "612525ef00ff06a6145355abd815184bcf8f6aa8", "commit_date": "2023-02-08T14:15:34Z", "commit_message": "internal: util: add UTIL_SWAP macro", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "05bf197ee647746de238f3ace9cc54fdf3393b82", "commit_date": "2023-02-08T13:55:22Z", "commit_message": "resource: ubridge: load existing KV store on init", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e847fc9c7f3f542ff3881c6d5cc63da29b4cfe20", "commit_date": "2023-02-07T12:53:53Z", "commit_message": "internal: bptree: make bptree_iter_next a bit more readable", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a6cff32fe6fb3c5246139930224d7e17b8f2b20", "commit_date": "2023-02-07T12:10:25Z", "commit_message": "internal: bptree: fix bptree_iter_next if no record matches specified range\n\nFix bptree_iter_next that errorneously returned a record in case there was\nno match within the specified range at all. The case where there was at\nleast one match already worked correctly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5b22e6fae69db2d3acb9b2137c73cce03bdbe4b", "commit_date": "2023-01-27T12:48:48Z", "commit_message": "resource: ubridge: fix return code from _check_kv_perms", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7465a7fb98a30b43872454c8821707ebb9266c1a", "commit_date": "2023-01-27T12:48:47Z", "commit_message": "resource: ubridge: properly propagate given flags inside sid_ucmd_group_create", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "09342be2d2040bb11beae15fdd5540d4a2b49878", "commit_date": "2023-01-27T12:10:15Z", "commit_message": "resource: ubridge: error out from _kv_delta_set if _kv_cb_delta_step fails", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "456986d5b76b5cba125739a7fe24f4be2f572bfb", "commit_date": "2023-01-26T15:04:50Z", "commit_message": "resource: ubridge: also check KV permissions in _kv_cb_delta_step\n\nThe _kv_cb_delta_step is a part of _kv_delta_set which is used to create\ndelta updates together with absolute diff calculations which are then\nstored inside KV store. If we're managing records from outside the SID\ncore code (e.g. as part of sid_ucmd_group_* API calls), then we're\nobliged to check the permissions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "099f3f5c116c8bec39c2d33225cfd1cd2aabb02e", "commit_date": "2023-01-26T15:04:01Z", "commit_message": "resource: ubridge: make _kv_cb_write_new_only to call _kv_cb_write internally\n\nThis way, we have a single central _kv_cb_write so if any change is\nneeded in the future, we can do it in one place.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eb05e2589d903ea8b3276a8a6dda02f002b1553d", "commit_date": "2023-01-26T15:03:50Z", "commit_message": "resource: ubridge: replace _kv_cb_reserve/unreserve with _kv_cb_write\n\nThe _kv_cb_reserve and _kv_cb_unreserve was actually doing exactly the\nsame check as _kv_cb_write, so reuse it. Though the debug message is now\nmore generic (\"can't write value...\") than before (\"can't reserve...\"/\n\"can't unreserve...\"), but that is still sufficient for us to know\nwhat is happening.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "648a896c672d6c9eadc347a2e1360ff5482bf84f", "commit_date": "2023-01-26T15:03:45Z", "commit_message": "resource: ubridge: remove superfluous _flags_indicate_mod_owned internal function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "08720b52b403d2983b46e3b373651beba8869fc0", "commit_date": "2023-01-26T15:03:38Z", "commit_message": "resource: ubridge: rename _kv_cb_overwrite to _kv_cb_write", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7824a70f6ea49ff349adc4f1bb1f9247bb62e6c9", "commit_date": "2023-01-26T15:02:51Z", "commit_message": "resource: ubridge: factor our KV permission checking to a separate function\n\nFactor out KV permission checking to a separate _check_kv_perms function\nso we can reuse it in other KV handling callbacks.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3bd89d578ca418667b339eee6b5c4eb68ee7f977", "commit_date": "2023-01-25T09:51:30Z", "commit_message": "resource: ubridge: assign new device ID as soon as the device is referenced\n\nWhile we are checking sysfs for related devices (\"slaves\") and storing\nthis info inside SID db, use device ID for referencing all those related\ndevices. If any of them don't have a device ID assigned yet, then generate\nand assign a new one right away. If we receive an event for such a device\nlater on, retrieve the already generated and assigned device ID for it\ninstead of creating a new one.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8ec4c6642fa83dc2bad499dec88a0e93c62b050f", "commit_date": "2023-01-25T09:49:57Z", "commit_message": "resource: ubridge: make it possible to reuse _handle_dev_for_alias for devices other than current one", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "828c89bd6291401da6630fbd2fb8bd6763ab03cc", "commit_date": "2023-01-25T09:48:51Z", "commit_message": "resource: ubridge: add _devno_to_devid helper function\n\nThe _devno_to_devid helper function retrieves assigned device ID\nfor given device number (major:minor pair).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bfa9b75baaffadd7c0406d3d7982637d59dbd990", "commit_date": "2023-01-25T09:48:06Z", "commit_message": "resource: ubridge: use direct char buffer instead of sid_buffer in _copy_ns_part_from_key\n\nWe were not using the sid_buffer here in any calls, but we'll need to\nuse the direct sid_buffer in subsequent patches.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b659076c2fda0e82c06bb194392b7e1c6f77b8b", "commit_date": "2023-01-25T09:48:03Z", "commit_message": "resource: ubridge: add log debug note about which device is about to be processed for 'scan' cmd", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e86217235abd298d742ae6aaa77693e3420144f0", "commit_date": "2023-01-25T09:47:56Z", "commit_message": "resource: ubridge: automatically add 'devno', 'name' and 'dseq' device aliases\n\nThe devno (major:minor pair), name (kernel name) and dseq (device\nsequence number) are all aliases that point to the same device.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a9c2f8f63779ba0fc9856bb9f4d3047ece410a0", "commit_date": "2023-01-25T09:47:50Z", "commit_message": "resource: ubridge: use exact owner when creating a group", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "37c5e6ccefcb2f4f2a949b865fe7a41a4b8a4f26", "commit_date": "2023-01-25T09:47:41Z", "commit_message": "resource: ubridge: use 'id_cat' instead of 'id_part' for key composition\n\nMake the naming consistent with \"group category\".", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9637211f8fa6ea3b909823208a69b1d49478e204", "commit_date": "2023-01-25T09:47:22Z", "commit_message": "module: ucmd: add 'group_cat' param to sid_ucmd_group_*\n\nThe new \"group category\" (group_cat parameter) for sid_ucmd_group_*\nfunctions is used to handle group categories. These categories wil\nhelp with group management so certain group IDs belonging to the\nsame group category can be retrieved with fewer calls to the underlying\nKV store.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c59c726610d45bd08f9f928e58e780ea6feba8bb", "commit_date": "2023-01-25T09:45:32Z", "commit_message": "resource: ubridge: use separate 'GRP' domain for KV records related to explicit groups", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2083c87df6d31ad0644787d4494d8ab47a426826", "commit_date": "2023-01-25T09:44:37Z", "commit_message": "module: ucmd: add sid_ucmd_dev_{add,remove}_alias\n\nAll device aliases point to the same device ID as assigned by SID (or\nrematched from older SID db records).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "466a84bb3e345a0d39b0abd8e05d403868f8b128", "commit_date": "2023-01-25T09:44:20Z", "commit_message": "udev: import SID_DEV_ID from previous udev db records for reuse", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c674c626b8e898351482c7dddfdab52063108762", "commit_date": "2023-01-25T09:41:57Z", "commit_message": "resource: ubridge: generate and assign SID_DEV_ID for a device if not assigned yet\n\nTry to get SID_DEV_ID variable from udev (which SID exported there before)\nwhere the value is current device's ID. If it's not in udev yet,\ngenerate a new device ID and export that to udev.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "83892b92ba92210ba56d1832cfee7747857833ee", "commit_date": "2023-01-25T09:41:17Z", "commit_message": "resource: ubridge: add separate dev_num besides dev_id in struct sid_ucmd_ctx\n\nThis is a starting point for SID's persistent device IDs. We are aiming for a persistent\ndevice ID which could be rematched if we persist the SID KV store with device records.\nThen, even though major:minor could have changed, as well as other names/aliases for a\ndevice while SID was not listening for events, the device ID should remain same.\n\nThe actual ID rematching logic will be a part of future patches.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a624eb32dd25cf5b12271d210899d5e984192061", "commit_date": "2023-01-25T09:39:36Z", "commit_message": "resource: ubridge: remove 'LYR' domain\n\nBefore, we recorded layering information based on sysfs (following the\n\"slaves\" references for each device) in a separate LYR domain in KV\nstore. The LYR domain is now removed and the layering is recorded together\nwith each device's general \"GMB\" (group members) and \"GIN\" (group in)\nrecords where all the other device references are stored.\n\nThis is for convenience so we can get all references for a single\ndevice in one go (single access to the KV store).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a1c798e18fc3e52d3a999abb985c8eb4cf7d2c76", "commit_date": "2023-01-16T14:35:06Z", "commit_message": "resource: ubridge: also allow null domain in _handle_current_dev_for_group", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bde88f7bab1d92ce4426016492dfb7727d6f280", "commit_date": "2023-01-16T14:01:47Z", "commit_message": "resource: ubridge: use KV_KEY_DOM_USER domain for key reservations managed via sid_ucmd_mod_{reserve,unreserve}_kv", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0c04fa5d975cdf32f505e0a5687d60fc29696b0a", "commit_date": "2023-01-16T14:01:39Z", "commit_message": "resource: ubridge: use KV_KEY_DOM_USER domain for groups managed via sid_ucmd_group_*", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f9a6a50f26593d0b2d7904fd5cb7393a50edd1cf", "commit_date": "2023-01-16T14:01:29Z", "commit_message": "git: update gitignore", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1df7ac6c49a0455a87b16d2da963378b4b5b496", "commit_date": "2023-01-03T12:26:52Z", "commit_message": "rpm: spec: use SPDX values for license fields", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc8996c9633d893fc5f26c240c02ca7f7c511328", "commit_date": "2022-11-25T08:42:21Z", "commit_message": "resource: ubridge: fix size when storing KV_KEY_DEV_MOD\n\nA regression introduced with 86b2624cf3816a3a83264b0b9f3cf083830fa7f9.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a989dcabf89eb79d1d777d5bb8a30f32172ab478", "commit_date": "2022-11-23T15:33:17Z", "commit_message": "resource: module-registry: fix alias iteration when looking for matching module", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4b6debf4c45481f17b738bfe984be1df691de7bf", "commit_date": "2022-11-23T13:03:21Z", "commit_message": "modules: ucmd: dm: add 'device_mapper' module alias", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "790787bc0f1a29d5d6e9edf3b75461bf2997ae0c", "commit_date": "2022-11-23T13:03:20Z", "commit_message": "resource: module-registry: make it possible to define module aliases\n\nModule aliases makes it possible to look for modules by different name.\nFor example, we may use a short name as official module name while\nwe may still use more descriptive aliases. Short names are good for\nstoring owners inside KV records while longer names are good searching.\nAlso, some long names may appear in /proc/devices which we use to\nselect the module to handle current device's event (e.g. \"dm\" module\nwhich handles \"device-mapper\" devices as known from /proc/devices).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "02c49217fc84d5eab7e939da5d1712f7e491d425", "commit_date": "2022-11-22T13:50:42Z", "commit_message": "resource: ubridge: move blkext resolution inside _lookup_mod_name", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0ce9f20e1af79a5e0f36c3b31f7646332f79e82d", "commit_date": "2022-11-21T14:35:19Z", "commit_message": "resource: ucmd-module: add sid_ucmd_dev_get_path", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71bc6ebda5b2d93fd718b843264c3ae739e10f90", "commit_date": "2022-11-21T14:21:50Z", "commit_message": "resource: ubridge: replace _get_sysfs_value with sid_util_sysfs_get_value", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "97a6847d688cfbd4079933445e58d25e88b97e33", "commit_date": "2022-11-21T13:29:04Z", "commit_message": "util: add sid_util_sysfs_get_value", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "80185c5d2dbf444fa6b0d80e45de0b1ce821add9", "commit_date": "2022-11-21T08:57:54Z", "commit_message": "resource: ubridge: fix next mod name lookup when processing SCAN_NEXT phase\n\nSID_UCMD_KEY_DEVICE_NEXT_MOD key which holds the module name for next\nlayer is set by blkid module and as such is marked to be within user\ndomain (KV_KEY_DOM_USER). When retrieving the value, we need to specify\nthe same domain.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "86b2624cf3816a3a83264b0b9f3cf083830fa7f9", "commit_date": "2022-11-15T12:37:52Z", "commit_message": "resource: ubridge: get proper module name for blkext devices", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "33f92d263a05d2c3365ab42571f6942decd511bd", "commit_date": "2022-11-14T14:40:52Z", "commit_message": "resource: ubridge: cleanup arg checks in sid_ucmd_get_disk_kv and _part_get_whole_disk", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8de03949ba46823ee30d43b7ab237020627b6271", "commit_date": "2022-11-14T14:32:47Z", "commit_message": "resource: ubridge: do not canonicalize devno inside _part_get_whole_disk", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4f8785f44836fc37fd2849bf6ba5c6856e1780e3", "commit_date": "2022-11-08T14:32:43Z", "commit_message": "scan-build: fix reported issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7bd7f4e0d3545ae6c487a26336e80bb132db3ca4", "commit_date": "2022-11-07T15:03:09Z", "commit_message": "global: reformat code with updated clang-format configuration", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b26a798b2c93123be4c51d461f590703f090ceeb", "commit_date": "2022-11-07T15:02:57Z", "commit_message": "codestyle: update clang-format configuration", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e3e205f9ba952f12b6df828954f6b7d4bf5a891", "commit_date": "2022-11-07T14:52:22Z", "commit_message": "global: reformat code with recent clang-format\n\nRunning with recent clang-format version 15 which already has\nthe correct implementation of \"PointerAlignment: Right\".", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "57e3a683cedb745535635c3edf1c755d82ae1a68", "commit_date": "2022-10-13T14:21:56Z", "commit_message": "resource: ubridge: check return codes in _init_common", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c72f06b2059594657eb04330dba44e9adf058d20", "commit_date": "2022-10-13T11:25:12Z", "commit_message": "resource: ubridge: add debug log about current kv store generation number", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5c99b2aded5dc546c933506e31287fa8d7122125", "commit_date": "2022-10-13T11:25:11Z", "commit_message": "resource: ubridge: store current boot id on common subresource init", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bf40bcfe4c44c5196a0a385d7abaac32769ba33f", "commit_date": "2022-10-11T12:13:51Z", "commit_message": "internal: util: add util_uuid_get_boot_id", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "79b50950ea7d0b6444058aa1b3978a03ecb5ba70", "commit_date": "2022-10-11T12:10:55Z", "commit_message": "resource: ubridge: remove superfluous kv store generation setup in _init_command\n\nThere's \"common\" resource inherited from main process now since\ncommit 09e879e7ed82e6590486a55a865b4e8677cda135. The inherited \"common\"\nresource contains already set up kv store generation so there's no need\nto set it up again.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9eb40577f2120512248133b8abeae7bca97d5b70", "commit_date": "2022-10-11T11:23:47Z", "commit_message": "util: move util_cmdline_get_arg to public sid_util_kernel_cmdline_get_arg", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2eac743050d7f400a193c260a16b40048ed0d9d7", "commit_date": "2022-10-11T10:11:54Z", "commit_message": "resource: ubridge: move SYSTEM_PROC_DEVICES_PATH out of common.h to ubridge.c", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2c9b591cd2d0972d32960abeb8f9ceded3b554a6", "commit_date": "2022-10-11T10:11:19Z", "commit_message": "internal: util: rename util_strv_copy to util_str_vec_copy", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "365cf83dc0b27d0a3d7009a1260d8fdfb6e1f771", "commit_date": "2022-10-06T12:47:33Z", "commit_message": "resource: ubridge: remove unused variable in _worker_proxy_recv_system_cmd_sync", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1fd02bb9ea213668dbfc9e37eae882927422e69", "commit_date": "2022-10-06T12:47:28Z", "commit_message": "configure: add missing checks reported by autoscan", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e37ecee4c23070df711e9f5fdcc2bd7fad0cfb94", "commit_date": "2022-10-05T14:00:37Z", "commit_message": "internal: bptree: fix reference counting when removing entries from the tree\n\nFix reference counting when removing an item from the tree in situation\nwhere _redistribute_nodes is called for a node inside the tree during\nnode's key count underflow.\n\nThe _redistribute_nodes takes a key from neighbor node (also removing\nit from the neighbor node), attaches it to the the current node and sets\nthe common parent key to the neighbor's key. In this case,\nthe _redistribute_nodes mistakenly called extra _ref_bkey which caused\nthe key reference counter to be off by one (+1).\n\nSchematically and a bit simplified, this action can be drawn as:\n\n          B                 A\n        /  \\    ----->       \\\n       A    C               B   C\n     /  \\  / \\             /  \\ / \\\n   .............         ............\n\nHere, the \"A\" key had incorrect ref_count with extra +1 ref. The reason\nfor this bug is that _redistribute_nodes makes a simplification here and\nit doesn't call unref for the \"A\" key in the neighbor node, but it just\ncuts the number of keys by calling \"neighbor->num_keys--\" at the end of\n_redistribute_nodes.\n\nThis is OK as far as we're inside _redistribute_nodes fn, so we just move\nkeys around there, keeping the overall ref_count same - we already do\nthis in other functions as well. Alternatively, we could be super\nconsistent and we could always call _ref_bkey, but then we'd also need\nto call _unref_bkey in the neighbor node (...but then, for the consistency,\nalso changing all the other code that does similar key movements inside\nthe tree in a single function). But let's keep it simpler.\n\nThis patch also removes superfluous temporary variables that were\nused in _redistribute_nodes and _coalesce_nodes just to type cast\ngeneric pointer to a node pointer - we can do that directly and inline,\nso writing:\n\n  ((bptree_node_t *) neighbor->pointers[i])->parent = neighbor;\n\ninstead of:\n\n  tmp = (bptree_node_t *) neighbor->pointers[i];\n  tmp->parent = neighbor;", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7a2a197925951faff4f139158805dc938f22baec", "commit_date": "2022-10-05T14:00:01Z", "commit_message": "resource: ubridge: set higher priority to KV store resource inside common resource\n\nSet higher priority to KV store resource inside common resource so that\nmodules (the aggregate resource with modules which is under the common\nresource) can still use the KV store even while in the process of destroying\nthe whole common subtree itself.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9bd550ae185c9d908e4b004cb4921c8960fff32c", "commit_date": "2022-10-05T13:58:26Z", "commit_message": "modules: ucmd: blkid: unreserve keys on module exit\n\nNote:\nThere used to be a comment:\n\n  \"TODO: Do not unreserve KVs in worker if we have modules preloaded in main process\"\n\nThis is not that necessary, because module is destroyed after the sync point\nwith main KV store. That means, whatever we do to the db after the sync point,\nthis is kept in the snapshot only, including \"unreservation\" of reserved values\nif we destroy modules in worker. We shouldn't ever be destroying modules\nbefore sync point!\n\nMaybe this is an extra useless job - to unreserve keys if we're going to\ndiscard the whole KV store snapshot anyway right after, but I haven't found\nan easy and quick way of determining whether this step can be surely skipped\nor not. We can revisit this and add a patch for this later as optimization.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7d7ba33c36e0b88cf5dbef9f2a09dd3b9cc6b43b", "commit_date": "2022-10-05T13:47:19Z", "commit_message": "modules: ucmd: blkid: consolidate enum names for keys", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0ab7af053603346e46bfb9304e33b391015d94f6", "commit_date": "2022-10-05T13:47:00Z", "commit_message": "modules: ucmd: dm_mpath: unreserve keys on module exit", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b5668063037159d66cde0ab167c33794ea1d8cfc", "commit_date": "2022-10-05T10:57:28Z", "commit_message": "modules: ucmd: dm_mpath: use enum and array of names for keys", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8e8a4e6ac5aee1e113bd889426062b8ce1d7656", "commit_date": "2022-10-04T10:34:59Z", "commit_message": "resource: ubridge: fix sid_ucmd_mod_{reserve,unreserve}_kv to return 0 on success", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c24e5815069a9429dec2b4e600e7ac6232ccf103", "commit_date": "2022-10-04T10:25:37Z", "commit_message": "resource: kv-store: fix kv_store_unset to canonicalize key before use\n\nRelated patches: c1eaa511d4ccc29e16248d8ff5afd0cec80b25dc d20de8f645b2ce73842fa40e8e8fd553f2868321\nWe forgot to call _canonicalize_key inside kv_store_unset in d20de8f645b2ce73842fa40e8e8fd553f2868321.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "09e879e7ed82e6590486a55a865b4e8677cda135", "commit_date": "2022-09-30T14:59:53Z", "commit_message": "resource: ubridge: add sid_resource_type_ubridge_common subresource type\n\nAn instance of sid_resource_type_ubridge_common represents common\nubridge subtree that is used in both main and worker processes.\n\nThe common resource encapsulates:\n\n  - KV store (sid_resource_type_kv_store)\n\n  - aggregate with modules (sid_resource_type_aggregate), containing:\n    - block modules (sid_resource_type_module_registry)\n    - type modules (sid_resource_type_module_registry)\n\nThe instance of sid_resource_type_ubridge_common then contains a\nstruct sid_ucmd_common_ctx instance as the common resource's data\nso it can be retrieved with sid_resource_get_data as usual.\n\nThis change makes it easier to share common ubridge subtree in both main\nand worker processes - when a new worker is created, we just separate the\ncommon resource (with children) and assign make it a child of the worker\nprocess.\n\nAlso, this fixes an issue where the struct sid_ucmd_common_ctx was\nactually a part of ubridge as ubridge->common_ctx. The problem was\nthat the ubridge->common_ctx was destroyed together with destroying\nthe ubridge instance in _worker_init_fn. Then we always had to\nrecreate a new common_ctx inside _init_command as sid_ucmd_ctx->common.\n\nThe flaw in design here was that we already preloaded modules in\nthe main process with the original struct sid_ucmd_common_ctx, because\nstruct sid_ucmd_common_ctx is registered as callback arg for for\n'init', 'reset' and 'destroy' module callbacks. However, in worker\nprocesses, this common_ctx was already destroyed and trying to use\nit would result in use-after-free issue.\n\nCreating a separate 'common' resource with struct sid_ucmd_common_ctx\ninside resolves this issue because the 'common' resource is properly\ninherited in worker processes from the main process and so the common\nstructure is still accessible even in the workers.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7847125a6a4071ecf795d610b777577be182dfd3", "commit_date": "2022-09-27T11:46:09Z", "commit_message": "modules: ucmd: move SID_UCMD_MOD_FN under \\#ifdef; leave out superfluous 'mod' in mod fn variable name", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a24be1957f10dd2504a8f68861f8ff971fc74412", "commit_date": "2022-09-27T10:40:14Z", "commit_message": "resource: sid_resource_unref cleanup and fixes\n\nAdd more comments for individual conditions checked inside\nsid_resource_unref. Also detect nesting while traversing the resource\ntree to not leave any dangling parent-child connections behind so the\ntree structure always remains correct even if a subtree is referenced\nexternally and the rest of the tree is destroyed.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ba4d0cd728decbb52f7116085b15fce763ae0f9", "commit_date": "2022-09-26T12:14:09Z", "commit_message": "resource: add comment about possible problem with sid_resource_ref", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "860764ef443d05ed5855d0f34439f9d51cb95ce1", "commit_date": "2022-09-26T10:23:22Z", "commit_message": "resource: take a ref from iter to res only if res fully initialized\n\nThe sid_resource_iter_create normally takes a reference to the resource.\nHowever, we cannot take the ref if we are creating the iterator inside\nresource's 'create' callback in which case we're actually creating an\niterator that is internal to the resource,. Such iterator would need\nto be destroyed in resource's 'destroy' callback (causing the resource\nto be unreffed). We would never get to that because the 'destroy' callback\nis called only after the ref_count hits 0.\n\nCurrently, the only resource API function that takes a ref is the\nsid_resource_iter_create, but the same would apply for any other API\nfunction that could be called inside resource's create callback.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9da9709b1f3d9b777d7ae92a1e4d4e4d14907df3", "commit_date": "2022-09-26T10:20:11Z", "commit_message": "resource: add 'initialized' flag to struct sid_resource\n\nThe 'initialized' flag will be used to detect a situation where we're\ncalling other sid_resource_* functions while we're still initializing\nthe resource itself in which case we may want to act differently.\nThis situation can happen while executing resource's 'create' callback.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d4dfa9f815c113fbd2efb6f2263b30ddc9a5235b", "commit_date": "2022-09-26T10:20:01Z", "commit_message": "modules: ucmd: dm: use SID_RESOURCE_NO_PARENT when creating module subregistry", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aed866519facfef22454fcf4167c369e1228df03", "commit_date": "2022-09-26T10:19:55Z", "commit_message": "resource: tidy up struct sid_resource", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b4cd6a398b92c077f65c34438bbe8f145ff72bb6", "commit_date": "2022-09-26T10:16:44Z", "commit_message": "resource: always respect resource reference counting, remove sid_resource_destroy\n\nThe sid_resource_destroy is removed and from now on we are using sid_resource_unref\nonly so that reference counts are always respected. Before, the sid_resource_destroy\nforced removal even if there were references left (in which case there\nwas an internal error issued without any error code propagated up to\ncallers).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "943e7bed35229e54280a866ff5b0543bb416c642", "commit_date": "2022-09-23T12:47:52Z", "commit_message": "resource: add 'ref-count' to output of sid_resource_write_tree_recursively\n\nAdd 'ref-count' field to output of sid_resource_write_tree_recursively.\nThis also causes 'sidctl resources' to include the ref-count.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "04be50431e5b7fd30d69412a07846de5aed51a54", "commit_date": "2022-09-23T12:47:48Z", "commit_message": "global: make it clear which function types are callbacks by using 'cb' infix\n\nRename:\n   kv_store_update_fn_t -> kv_store_update_cb_fn_t\n   hash_update_fn_t -> hash_update_cb_fn_t\n   bptree_update_fn_t -> bptree_update_cb_fn_t\n   module_fn_t -> module_cb_fn_t\n\nThis makes it easier to look for callback types.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "beba2c6975cf30e55993e28227e62cfcf2def78c", "commit_date": "2022-09-13T08:55:13Z", "commit_message": "resource: ubridge: add DISKSEQ to sid_ucmd_ctx.req_env.dev.udev with sid_ucmd_dev_get_diskseq fn\n\nDISKSEQ is part of essential set of uevent variables, generated for each\ndisk and kept for the whole existence of the disk.\n\nAvailable in kernels >= 5.14.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e211e2d3732ffcd2fbdf81d97ff604789833dbbf", "commit_date": "2022-08-22T13:04:07Z", "commit_message": "resource: fix setting of events_max on time event source rearm", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f7374198e0053dc58fa96f7726da3ccae3d5cb4d", "commit_date": "2022-07-15T07:33:22Z", "commit_message": "resource; ubridge: remove leading KV_PREFIX_OP_SYNC_C from key only if present while building cmd KV buffers", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1fb65093b55e2fd76d6063c71db91de5bad888dc", "commit_date": "2022-07-14T13:20:00Z", "commit_message": "resource: ubridge: clarify comment about format used for writing expbuf", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4430e62ce77a80f4ec371202852585c0ab8e09c9", "commit_date": "2022-07-14T12:38:29Z", "commit_message": "resource: ubridge: add comment possible optimization in _do_set_ucmd_set_kv", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "56c0a73424d55928452aaed609a239fc819394c2", "commit_date": "2022-07-14T12:30:05Z", "commit_message": "resource: ubridge: export only records with KV_PERSISTENT if we have cmd with CMD_KV_EXPORT_PERSISTENT\n\nPreviously, we created KV iterator with a range defined by\n\"KV_PREFIX_OP_SYNC_C - KV_PREFIX_OP_SYNC_END_C\", but this only worked\nfor records which were created or changed during cmd processing,\nit did not actually work for dumping all records which had\nKV_PERSISTENT flag set.\n\nWe either need to create an extra index for KV_PERSISTENT records\n(just like we already do for KV_SYNC records), or we simply iterate\nthrough all records and check the flag directly. Since dumping\nKV_PERSISTENT records is supposed to be done only at certain points in\ntime, not very frequently, we use the second option right now (iterating\nall records and matching the ones with KV_PERSISTENT flag set).\n\nLater in the future, we can consider creating extra index even for\nKV_PERSISTENT records if we find out that iterating all records is\nlimiting (...the extra pay for this would be increased memory usage\nto create the index keys).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5da8f0fd93bf7436d4cf7f635c72844602acf952", "commit_date": "2022-07-14T09:45:41Z", "commit_message": "resource: ubridge: remove superfluous CMD_KV_EXPORT_ALL internal flag", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "485822e1670a5e0f0d48adef26d7b5b72e13c4bc", "commit_date": "2022-07-14T09:35:29Z", "commit_message": "resource: ubridge: add/remove KV index based only on KV_SYNC flag", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f5e12e2e27a3cb873c4151bf95c835372469b47c", "commit_date": "2022-07-14T09:33:05Z", "commit_message": "resource: ubridge: remove kv flags check while building cmd kv buffers\n\nWe don't need to check flags while building cmd kv buffers anymore, it's\nsuperfluous. The KV store iterator is initialized to contain either everything\n(for dump) or just the records which are scheduled for syncing and so we\nare already processing only relevant records.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5d808721ea67f18f81503716686cadd8eba03b52", "commit_date": "2022-07-14T09:00:00Z", "commit_message": "resource: ubridge: fix regression in delta update for relatives\n\nFix regression caused by commit be36f9f2f194aefa8949e8bcf0768581be662481\nwhich incorrectly moved key specification's 'ns_part' after composing\nthe key - the 'ns_part' must be assigned before key composition.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d67e33562a2514de20180d6b1b8593d69396ab2", "commit_date": "2022-07-08T13:03:31Z", "commit_message": "resource: kv-store: fix kv_store_get_value to canonicalize key before use\n\nRelated patches: c1eaa511d4ccc29e16248d8ff5afd0cec80b25dc d20de8f645b2ce73842fa40e8e8fd553f2868321\nWe forgot to call _canonicalize_key inside kv_store_get_value in d20de8f645b2ce73842fa40e8e8fd553f2868321.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9025c04a5cc4771acc5cb0e5257fc31803f6f604", "commit_date": "2022-07-01T14:08:45Z", "commit_message": "resource: ubridge: wait for scan cmd expbuf sync ack before sending resbuf\n\nAt the end of the execution of 'scan' command in worker process, we need to\nsync content placed in cmd expbuf with main process' KV store. The worker\nprocess must wait for main process to actually process the sync request\nand wait for sync ack. When sync ack is received in worker process, it\ncan send cmd resbuf (that means exporting KV pairs to udev as result\nof the scan command).\n\nThis avoids a race where executing two (or more) scan commands in\nsequence could cause the scan command to see old main KV store state\nwhere KV data from previous scan are not synchronized yet.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb05a2de19fc16a69de0d93737af6e50e4e7d727", "commit_date": "2022-07-01T13:35:47Z", "commit_message": "resource: ubridge: simplify return paths in _on_connection_event", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d0e93d7ee95f43df79d98bb4392f28e2d60ee83c", "commit_date": "2022-07-01T13:34:57Z", "commit_message": "resource: ubridge: move protocol version check from _cmd_handler to _init_command\n\nThe _cmd_handler can be scheduled more than once if there are more data\nexpected to be processed. Move the protocol version check from _cmd_handler\nto _init_command so the check is done only once for a command. Also, do the\nversion check as early as possible in _init_command.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "20d7ff02df2aae8528a8a05ea5fc98c0fbef4b94", "commit_date": "2022-06-21T11:34:44Z", "commit_message": "resource: ubridge: add and use dedicated cmd_state_t in sid_ucmd_ctx to cover ucmd execution steps in more detail\n\nThis replaces and enhances the original sid_ucmd_ctx.flags where we\nstored \"expect_more\" flag, now replaced by this sequence of states:\n\n  CMD_INITIALIZING\n  CMD_EXEC_SCHEDULED  <---\n  CMD_EXECUTING           |\n  [CMD_EXPECTING_DATA] ---\n  CMD_EXEC_FINISHED\n  CMD_OK (or CMD_ERROR)\n\nThe CMD_EXEC_SCHEDULED -> CMD_EXECUTING -> CMD_EXPECTING_DATA sequence\ncan berepeated, but only if CMD_EXPECTING_DATA is used.\n\nEach cmd state change is also logged which helps to track the\nprogression of cmd processing.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4ba0e21fbb474c3e614f607e3e8e348966e9707f", "commit_date": "2022-06-20T13:18:44Z", "commit_message": "resource: ubridge: fix KV_PREFIX_OP_SYNC_C name\n\nThe KV_PREFIX_OP_SYNC_C got incorrectly renamed with 19edc5fb6d26a049a096918599499d1d80e54c0e.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ed8e7a3ecf1ab485f4419702b2540c7f79d39ce4", "commit_date": "2022-06-15T12:45:01Z", "commit_message": "resource: fix printing of properties for 'event-sources'\n\nAdd missing commas between 'name' and 'events_max' as well as\n'events_max' and 'events_fired' properties. Mainly important for JSON\noutput.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "220f0c460c1db65b7e5b24b4c78cd63bd6420ad5", "commit_date": "2022-06-15T08:24:21Z", "commit_message": "authors: update AUTHORS file", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a5c20b21873d5fbaea21339d7cc50fb71c26b4c3", "commit_date": "2022-06-15T07:43:07Z", "commit_message": "resource: remove unused sid_resource_reset_event_source_counter\n\nJust keep the counter counting until event source is destroyed.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25c81a5e1244ee31c46b754597b519198b472770", "commit_date": "2022-06-14T12:53:51Z", "commit_message": "resource: add disposition parameter to sid_resource_set_event_source_counter\n\nSet event source's events_max either as absolute value or relative value\nto current events_max value.\n\nIf events_max == events_fired, then the event source is disabled. Event\nsource is disabled if custom event handler returns error.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d888e17394b1a73f30d21593fc505c659c81101b", "commit_date": "2022-06-14T12:51:30Z", "commit_message": "resource: rename sd_event_time_type_t to more generic sid_resource_pos_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "63b267924a65f7816cc721e76b2138d764582310", "commit_date": "2022-06-14T12:16:00Z", "commit_message": "resource: also print event source's events_{max,fired} properties on sid_resource_write_tree_recursively", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8bfc6c17e0b1448cd59e27b9b6cfd723be17747a", "commit_date": "2022-06-14T08:01:34Z", "commit_message": "resource: set event source's events_max to default value on creation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4daac83b46a2e85054c54172305d514142e2f720", "commit_date": "2022-06-13T12:59:10Z", "commit_message": "resource: ubridge: add todo comment about trigger-action function names", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "19edc5fb6d26a049a096918599499d1d80e54c0e", "commit_date": "2022-06-13T12:57:08Z", "commit_message": "resource: ubridge: KV-related macro/constants/helper functions name cleanup", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "098262e2b36fd7d9722b96f3cfbaf05e233e94ea", "commit_date": "2022-06-13T12:09:56Z", "commit_message": "resource: ubridge: send full internal msg even for MSG_CATEGORY_CLIENT category\n\nAvoid a special case for MSG_CATEGORY_CLIENT messages. Even though we are\nsending a dummy internal message here with only the category field set\n(the actualy message - the client request - is read out of the client connetion),\nit's better to keep the messaging clean and do it the way we do for all the other\nmsg categories.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aa053d7575ad33750bcb0decedbbb8d608678c35", "commit_date": "2022-06-10T20:20:54Z", "commit_message": "resource: ubridge: add _worker_proxy_recv_system_cmd_sync wrapper to handle SYSTEM_CMD_SYNC\n\nKeep _worker_proxy_recv_fn clean and use separate function to handle\nSYSTEM_CMD_SYNC, just like we already do for SYSTEM_CMD_RESOURCES.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9b913d2311d3faca16a9f9f4f42bf6adc54dde23", "commit_date": "2022-06-10T14:14:08Z", "commit_message": "resource: ubridge: add SYSTEM_CMD_RESOURCES to collect resources from main process\n\nAdd SYSTEM_CMD_RESOURCES to collect resources from main process and add\nthat to result for SID_CMD_RESOURCES (sidctl resources) which now\nincludes resource dump from both the main process and current worker\nprocess.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f3fff182377a677f042357763bf938bfa3c0ef69", "commit_date": "2022-06-10T13:11:18Z", "commit_message": "resource: ubridge: rename struct 'internal_msg' to 'internal_msg_header'; add and use INTERNAL_MSG_HEADER_SIZE\n\nJust like sid_msg_header, the internal_msg_header is just a header and\nfurther data can be placed right after the header - this is clearer with\nstruct internal_msg_header name.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0399a138c4caff34fec886b6ff89a8282b388fbf", "commit_date": "2022-06-10T13:09:58Z", "commit_message": "resource: ubridge: make it possible for cmd handler to span across more iterations of event loop\n\nMake it possible for cmd handler to span across more iterations of event\nloop to cover situations where we need to chunk the processing into\nseveral steps, e.g. because of further information we need to collect\nand hence we need to send out a message and wait for an answer using\nexisting event loop.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1dc47f6120b5be58d098f5397644e3fadcd21608", "commit_date": "2022-06-10T13:08:15Z", "commit_message": "resource: add support for event source's event counting and limiting\n\nBesides event counting and limiting, the new\nsid_resource_set_event_source_counter also provides a way to disarm and\nrearm an event source if needed.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0c3ba8e99d07890b2fbf0cda207f468da3994148", "commit_date": "2022-06-06T13:36:14Z", "commit_message": "resource: ubridge: complete comments for sid_ucmd_ctx fields", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cccef77d99e5cd0f6abb478d3c81f686978ecae4", "commit_date": "2022-06-06T13:18:43Z", "commit_message": "resource: ubridge: use union for cmd-specific properties inside sid_ucmd_ctx", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0394b9d3760f06cd8287b3e0f5d399fc6b8c2b54", "commit_date": "2022-06-06T13:13:29Z", "commit_message": "global: rename ucmd_mod_ctx to ucmd_common_ctx", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8cb8f41896ea0c1a1592811115a7460234ba5c4a", "commit_date": "2022-06-03T13:38:59Z", "commit_message": "resource: ubridge: make error message clearer when missing KV store sync data in _worker_proxy_recv_fn", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "478e0841787cfb77f7e410a86169da5742e9e2f0", "commit_date": "2022-06-03T13:31:16Z", "commit_message": "resource: ubridge: use separate system_cmd_t for internal system messages\n\nUse separate system_cmd_t to allow for differentiating various internal\nsystem messages, mainly when sending them from worker processes to main\nprocess and receiving them in _on_worker_proxy_recv_fn.\n\nCurrently, one such message is SYSTEM_CMD_SYNC to synchronize the KV store\ndiffs from snapshot (worker) with main KV store.\n\nThis scheme allows for adding more system messages and it simply reuses\nexisting struct sid_msg_header we already use for other messages with\ncommands (the sid_cmd_t and self_cmd_t) so the message structure and logic\nstays the same even for system messages.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c0e1df71abc1340ca4694b99ca50050c7fa90f96", "commit_date": "2022-06-03T13:29:45Z", "commit_message": "resource: ubridge: make it clear we're reading msg category first and then we decide next steps", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ffd0d05658a0c3931dc0ae91c45055db826c6b6", "commit_date": "2022-06-01T13:57:06Z", "commit_message": "resource: ubridge: move fsync from _build_cmd_kv_buffers to _send_out_kv_buffers", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6f8ed721a73a1e2adeee325b47f63ec3cf7c3d18", "commit_date": "2022-06-01T12:44:34Z", "commit_message": "resource: worker-control: add fixme note in _chan_buf_send", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "564de134a7f68b920fa99f1de045eabb5c9e4a40", "commit_date": "2022-05-30T12:08:24Z", "commit_message": "internal: bptree: directly compare bkey pointers instead of string values in _remove_entry_from_node\n\nWe already have bkey so no need to compare the whole key string values\nagain - just compare the bkey pointers which is a bit quicker.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a11e207a3d07d4f43a2f7b6f328a8e8ea9961b29", "commit_date": "2022-05-27T10:53:55Z", "commit_message": "internal: bptree: make a difference between exact and prefix lookup internally\n\nWith bptree_{lookup,insert,inset_alias,update,remove}, we're looking for exact\nkey match while when creating an iterator, we're looking for key prefix match.\nWe need to differentiate these two lookup methods inside common _find function,\nso this patch adds the 'bptree_lookup_method_t method' arg to the _find.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a2853ce0de518310d1228f1e384c67d52f38dd16", "commit_date": "2022-05-27T10:53:55Z", "commit_message": "resource: ubridge: add 'index' arg to _kv_delta_set\n\nWith KV store snapshot, we need to create an index for all records to be synced\nwith main KV store for quick lookup when syncing. With main KV store, we don't\ncreate such an index. The _kv_delta_set is used in both the worker (with KV\nstore snapshot) and main process (with main KV store) - add 'index' bool arg\nto _kv_delta_set to make a difference.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4501e9d18a02f9765cd43305b1a862499f69975e", "commit_date": "2022-05-27T10:53:55Z", "commit_message": "internal: bptree: add keys less than or equal to the 'left', keys greater to the 'right'\n\nThis changes current key distribution in a tree so that all keys which are less\nthan or equal to current node's key go to the 'left' (lower index in\nnodes's key array) and keys greater than current node's key go to the 'right'\n(higher index in node's key array).\n\n(Before, keys which are less got to the 'left' and keys which are\ngreater or equal go to the 'right'.)\n\nThis actually fixes bptree iterator to really start at defined key start\nwhich can be just a key prefix - it doesn't need to match fully with the\nkey stored (e.g. all keys starting with KEY_OP_SYNC_C prefix that we use\nas index to KV records which we need to sync with main kv store).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "451c7b09141b2155ac9dbb1d5a49c79461a44e89", "commit_date": "2022-05-27T09:59:07Z", "commit_message": "resource: ubridge: select only keys to sync in _build_cmd_kv_buffers\n\nFor commands that need to sync their KV store snapshot state with main\nKV store (e.g. c-scan), iterate only through keys having the extra op key\nprefix denoting index key (KEY_OP_SYNC_C). That means, creating an iterator\nstarting with KEY_OP_SYNC_C and ending with KEY_OP_SYNC_END_C character.\n\nFor commands that still need to iterate the whole KV store (e.g. c-dbdump),\nthe iterator is not restricted.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e42167ffda9aaa694239176c4673a0e4af09980", "commit_date": "2022-05-26T10:17:25Z", "commit_message": "resource: ubridge: add formatted alias key to index keys to be synced\n\nKeys to be synced are formatted to include KEY_OP_SYNC_C prefix.\nThis is a preparation for selecting only keys that matter and ignore\nothers while syncing KV store from worker (that has KV store snapshot)\nwith main process (that has the main KV store).\n\nWe know which keys should have an alias (index) by checking the\nupdate_arg->ret_code from previous kv-store operation which\nadded/removed/modified KV record.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bd5abba08bd7b1ef9ca5478bd846e81c1bc231c7", "commit_date": "2022-05-26T10:17:19Z", "commit_message": "resource: ubridge: remove 'const' from string returned from _compose_key and _compose_key_prefix\n\nWe need this to be able to get the index key (with extra op prefix) as well\nas usual non-index key (without extra op prefix) by simply adding/removing\nthe extra op prefix in place.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c1eaa511d4ccc29e16248d8ff5afd0cec80b25dc", "commit_date": "2022-05-26T10:00:58Z", "commit_message": "resource: ubridge: reserve space for extra op prefix when composing key\n\nReserve space in a key for extra operation character which we currently\nplan to use for indexing keys by creating key aliases with defined key\nprefix.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d20de8f645b2ce73842fa40e8e8fd553f2868321", "commit_date": "2022-05-26T10:00:58Z", "commit_message": "resource: kv-store: canonicalize key before use in kv_store_{set_value,get_value,add_alias,unset}\n\nCurrently, this removes any space before the key string.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b454e03fc8bce9979ec461df984dfe123fb3a431", "commit_date": "2022-05-26T10:00:58Z", "commit_message": "resource: ubridge: check if index is needed inside KV store callbacks\n\nThe KV store callbacks have access to both old and new records and so\nthey can easily check whether we also need to create or remove an index\nfor given key based on record content.\n\nThe result is then returned in struct kv_update_arg.ret_code that we can\ncheck after the kv-store function with the callback is finished.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ce7341124c882911e15b0ea0baa1db3bc798dec", "commit_date": "2022-05-26T10:00:58Z", "commit_message": "resource: kv-store: rename kv_store_unset_value -> kv_store_unset\n\nkv_store_unset is used for removing any existing keys, including alias\nkeys. The value itself is unset on removal of last key that references\nthe value. Rename the original \"kv_store_unset_value\" function name\nas it would be confusing otherwise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71771639f2e51e743480fbc9ab68b30487c51d6e", "commit_date": "2022-05-26T10:00:58Z", "commit_message": "internal: bptree: fix failure return code from bptree_{update,remove} if removing last item", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "21a40bb6cd22c3bd4e4c7e59ddf6efbcc7b71c37", "commit_date": "2022-05-26T10:00:58Z", "commit_message": "resource: kv-store: do not cast callbacks used for hash and bptree backends\n\nAllow for proper compiler checks by not explicitly casting the backend's\ncallback types.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "caaf19e3aeda4d4678f38cab8c4501117d405d9f", "commit_date": "2022-05-26T10:00:58Z", "commit_message": "resource: kv-store: use bptree_destroy_with_fn in _destroy_kv_store\n\nWe are storing dynamically allocated struct kv_store_value inside a backend record.\nFor bptree backend which supports record reference counting, we need to\ndestroy the struct kv_store_value only when last record reference is\ndropped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "35214105ce0e7942722565a09db621e6ea4542b9", "commit_date": "2022-05-26T10:00:58Z", "commit_message": "resource: kv-store: add kv_store_add_alias\n\nkv_store_add_alias is a kv-store wrapper around backend's key alias\naddition functionality. Currently, only supported by bptree backend.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "47bba04a3474f7c12f07fa50c7dd51f65119e47a", "commit_date": "2022-05-26T10:00:58Z", "commit_message": "internal: bptree: add bptree_destroy_with_fn\n\nJust like bptree_destroy, but allows for calling a callback function\nbefore each record is actually destroyed. This is mostly useful when the\ntree contains key aliases and we want to do a cleanup for embedded\nstructures inside a record and we need to do that only when very last\nrecord reference is dropped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "068c77781dfe6458d2d56e6840da88fca217f0c1", "commit_date": "2022-05-26T10:00:58Z", "commit_message": "internal: bptree: add bptree_iterate_fn_arg to bptree_iterate_fn_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2ea8354cc6de777e3450f7d801880435498a7be3", "commit_date": "2022-05-26T10:00:33Z", "commit_message": "internal: bptree: add data_ref_count arg to bptree iterator functions\n\nbptree supports record reference counting when the same record is\nreferenced by more than one key (key aliases). When iterating through\nrecords, we may need to know how many times this record is referenced inside\nthe tree. This patch adds 'data_ref_count' arg to bptree_iter_{current,next}\nand bptree_lookup. It also adds 'data_ref_count' to bptree_iterate_fn_t.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89e802e76b7b95eca53511c52b449c98e8bd6413", "commit_date": "2022-05-26T09:58:25Z", "commit_message": "resource: kv-store: use backend's update function for kv_store_unset_value\n\nReplace kv-store backend record lookup and removal with direct update with\n_bptree_unset_fn and _hash_unset_fn callbacks, calling common _unset_fn\nto confirm the removal.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e2311a4e7c76b624c4c31125db24e0391bfbddb5", "commit_date": "2022-05-26T09:58:25Z", "commit_message": "resource: kv-store: translate return codes in _hash_update_fn", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "830df43aa4bae47ac8a28b908c79acd458cbb2e7", "commit_date": "2022-05-26T09:58:25Z", "commit_message": "internal: hash: generalize hash_update to also handle removals\n\nSimilar change as we did for bptree to keep the interfaces and usage\nsame - before the actual removal, a callback is called to do any\nadditional actions and/or removal confirmation.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2a60e2936dc01a1b97a36315212e90f23393422d", "commit_date": "2022-05-26T09:58:25Z", "commit_message": "resource: kv-store: wrap _update_fn with _bptree_update_fn to translate return codes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2b456030538dd835605f1485138d32418516a90b", "commit_date": "2022-05-26T09:58:05Z", "commit_message": "internal: bptree: generalize bptree_update to also handle removals\n\nbptree_update now accepts removals. This way, it's possible to call\nbptree_update_fn_t type callback before the actual removal so we can\ndo further cleanup of embedded structures inside a record, if needed,\nor confirm the removal.\n\nThe bptree_update_fn_t type callback now also provides reference counter\nfor the existing record which is mostly important if we want to do a\ncleanup of embedded structures inside a record only when last record\nreference is just about to be dropped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b413779f2fc1bf70aa0d0aedeeb46e4cee49de67", "commit_date": "2022-05-06T12:38:50Z", "commit_message": "internal: bptree: add 'force' option to bptree_insert_alias\n\nIf there's already a different record referenced by the alias, the\n'force=true' causes the old record reference to be dropped and the new\nrecord referenced instead. If 'force=false', bptree_insert_alias fails\nin this situation (returns -1) - this is the original behaviour before\nthis patch.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b96233d4f3f03bc6af73625ac571ee8a86dc4f86", "commit_date": "2022-05-03T12:06:12Z", "commit_message": "resource: ubridge: remove unneeded gen_buf rewinding", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ce966c4881617dafd18e5923ec82528e267e8ec", "commit_date": "2022-05-03T08:26:44Z", "commit_message": "resource: ubridge: make sure there's clear distinction for single/vector values and kv_store_value_flags_t\n\nWhen reading code, this will make it easier to see directly which type\nof value and flags we're working with right now:\n\n  svalue               - single value\n  vvalue               - vector value\n  value                - either single or vector value\n  kv_store_value_flags - value flags for underlying record inside kv_store instance\n\nAlso rename related macros accordingly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ff9e05dd3275d25063ead231dc713f0da165c35", "commit_date": "2022-04-25T12:13:50Z", "commit_message": "resource: ubridge: switch to bptree for kv-store backend", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "72ee5faa773533fc3d457d296ebbb17008e49a31", "commit_date": "2022-04-25T09:48:51Z", "commit_message": "internal: bptree: move comment", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e2776639c6070f1bfa450c784ab56f838398aba7", "commit_date": "2022-04-25T09:06:59Z", "commit_message": "internal: bptree: add bptree_insert_alias\n\nSupport key aliases so several keys can share a single record - add bptree_insert_alias.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "35bfe987a307d24b0f7cc04ce10bc6a5d4378ce2", "commit_date": "2022-04-25T09:05:35Z", "commit_message": "internal: bptree: add record reference counter\n\nAdd record reference counting so we can reference single record within\nthe bptree even if with different keys (next patch).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6d5b2ac7df0135b753f0e103343b0d4822490b0c", "commit_date": "2022-04-22T08:42:22Z", "commit_message": "global: fix gcc's warnings\n\nFix gcc's warnings about \"control reaches end of non-void function\".", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "62cead96fb51029f3a2434c41b8488b6edbab9af", "commit_date": "2022-04-22T08:38:46Z", "commit_message": "resource: kv-store: remove stray return", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d41cd90cf0d9c67f68e2a274fefe9cf35f03cd6f", "commit_date": "2022-04-21T11:47:49Z", "commit_message": "resource: ubridge: cleanup error path on channel failure in _on_ubridge_interface_event\n\nFall through to the end of _on_ubridge_interface_event function if channel\ntransmission inside fails, using common channel FD close.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "045cf82465b5a773e57d503bd154cc5b77045456", "commit_date": "2022-04-21T08:22:40Z", "commit_message": "base: buffer: fix sid_buffer_rewind_mem for buffers with size prefix\n\nPatch caa6ef2fbe38ef9c0457505d41809aa94f7ba80c changed the size prefix\ninternal for buffers and patch 314d13a2574d58facbb46f93e040e630bbfa6e0e\nmade all the sid_buffer_{add,fmt_add,vfmt_add} to return the position\nwithout the size prefix.\n\nHowever, when using sid_buffer_rewind_mem and when we're calculating\nthe position in the buffer out of the mem supplied, we need to subtract\nthe size of the 'size prefix' to get the actual position for 'release'\nfunction which expects the position to not include the size prefix.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ef1351da08b8ba452ff5710f7078f9da53c0a08", "commit_date": "2022-04-21T08:18:45Z", "commit_message": "internal: formatter: unbind buffer memory pointer in _print_binary after use\n\nThe _print_binary calss sid_buffer_add just to reserve a memory segment in\nbuffer and get the pointer to the memory. Then, it prints the encoded\nbinary value to the buffer memory as pointed by the pointer and then\nthe pointer is not used anymore, hence it can be marked as unbound.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f14841b3fa969d5ed4b635b662299888fd5dd7e6", "commit_date": "2022-04-21T08:11:08Z", "commit_message": "base: buffer: add sid_buffer_unbind and sid_buffer_unbind_mem\n\nBuffer memory is considered as bound when the caller requests the\npointer to memory to be returned when calling\nsid_buffer_{add,fmt_add,vfmt_add,get_data}.\n\nThe caller can use new sid_buffer_unbind and sid_buffer_unbind_mem\nto explicitly mark the buffer's memory is not bound/used outside\nanymore (without rewinding the buffer memory).\n\nThe original underlying buffer-type's \"rewind/rewind_mem\" hook is\nrenamed to \"release/release_mem\" so it can cover both cases - with and\nwithout rewinding. The external buffer interface has separate functions\nfor rewinding and unbounding either using a position or a memory pointer.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "236a2f61d30421720773ceef8c59b636bffdfad2", "commit_date": "2022-04-20T13:49:46Z", "commit_message": "base: buffer: remove stray buffer mark check and related reset", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "100821efe9338ee58f9722a4476c31aa7dde77b8", "commit_date": "2022-04-19T11:43:08Z", "commit_message": "tests: fix buffer tests to expect -EBUSY on unsafe sid_buffer_add use", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba2fda59892ec4b870dd2a39ea3a7efce3632df2", "commit_date": "2022-04-19T11:25:35Z", "commit_message": "base: buffer: remove comments for code that cauases sid_buffer_{add,fmt_add,vfmt_add} to error out on improper use\n\nThis reverts commit a9cb2c360e14a4828a4f42bff297b60ed5f32297 which was\nsupposed to be temporary until we fix all existing issues with improper\nbuffer use.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bd7a1e1c42d630b69d4d23d76360f7d4bbb77046", "commit_date": "2022-04-19T11:21:11Z", "commit_message": "resource: ubridge: fix _handle_current_dev_for_group to not allocate from buffer if unsafe\n\nFix _handle_current_dev_for_group to not allocate from buffer if it's not safe\nto do so and there's a potential risk that underlying realloc/mremap could\ncause any already used pointers to become invalid.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "22168337c6a1228c9acdd2416c0d6cbb2ee932a0", "commit_date": "2022-04-19T11:21:11Z", "commit_message": "resource: ubridge: fix _refresh_device_partition_hierarchy_from_sysfs to not allocate from buffer if unsafe\n\nFix _refresh_device_partition_hierarchy_from_sysfs to not allocate from\nbuffer if it's not safe to do so and there's a potential risk that underlying\nrealloc/mremap could cause any already used pointers to become invalid.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "69fcb984b9f819c849c4155b6287a60479525d33", "commit_date": "2022-04-19T11:21:11Z", "commit_message": "resource: ubridge: fix _refresh_device_disk_hierarchy_from_sysfs to not allocate from buffer if unsafe\n\nFix _refresh_device_disk_hierarchy_from_sysfs to not allocate from buffer\nif it's not safe to do so and there's a potential risk that underlying\nrealloc/mremap could cause any already used pointers to become invalid.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ccf9ff3dd41787ed86924a392aa36d9eca3f5742", "commit_date": "2022-04-19T11:20:59Z", "commit_message": "resource: ubridge: fix _device_add_field to not allocate from buffer if unsafe\n\nFix _device_add_field to not allocate from buffer if it's not safe to do so\nand there's a potential risk that underlying realloc/mremap could cause\nany already used pointers to become invalid.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "be36f9f2f194aefa8949e8bcf0768581be662481", "commit_date": "2022-04-19T11:14:38Z", "commit_message": "resource; ubridge: fix _delta_update to not allocate from buffer if unsafe\n\nFix _delta_update to not allocate from buffer if it's not safe to do so\nand there's a potential risk that underlying realloc/mremap could cause\nany already used pointers to become invalid.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6e198951c394c30a2213a053e4b84da376043001", "commit_date": "2022-04-19T11:14:12Z", "commit_message": "resource: ubridge: use _destroy_key instead of sid_buffer_rewind_mem where applicable", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2d16fbecec8964b57261b2f24a5a373c346d7c37", "commit_date": "2022-04-19T11:09:12Z", "commit_message": "resource: ubridge: make _compose_{key,key_prefix} to accept NULL buffer\n\nRename former _buffer_compose_{key,key_prefix} helper functions to\n_compose_{key,key_prefix} and accept NULL for buffer in which case the\nmemory is malloc'd. Also, add _destroy_key helper function for cleanup.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "18968f7202a0a809a43fc92fbeddf3ba2474e666", "commit_date": "2022-04-15T02:42:49Z", "commit_message": "resource: ubridge: fix param name in _value_vector_mark_sync\n\nWe have split original 'persistent' KV record flag meaning into\n'persistent' and 'sync' in 449e21d912e689d5087c657332493947a63c16ec.\nThe param name for _value_vector_mark_sync is supposed to be 'sync'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f291dd228c5dfd06de0ea40e371562ae3007df03", "commit_date": "2022-04-12T13:11:33Z", "commit_message": "base: buffer: fix checking and setting buffer memory usage mark in sid_buffer_{add,fmt_add,vfmt_add}\n\nIf we called sid_buffer_{add,fmt_add,vfmt_add} with possible internal\nrealloc/mremap, we'd invalidate any PREVIOUS memory pointers returned\nand hence we can't conditionalize the check in these functions based on\nwhether we're NOW interested in returning the mem pointer or not. We\njust check for the mark existence.\n\nOn the other hand, if we're not interested in returning the mem pointer,\nwe shouldn't be setting the mark.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a9cb2c360e14a4828a4f42bff297b60ed5f32297", "commit_date": "2022-04-12T12:25:55Z", "commit_message": "base: buffer: temporarily comment out code that causes sid_buffer_{add,fmt_add,vfmt_add} to error out on improper use\n\nWe need to audit and fix buffer usage throughout the code further\notherwise the buffer checks here would make the whole SID to error out.\n\nOnce fixed, revert this patch.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "caeddc6c424fe22f9979432827fec7c0860156bd", "commit_date": "2022-04-12T12:23:01Z", "commit_message": "base: buffer: track if buffer memory is use outside and error out sid_buffer_{add,fmt_add,vfmt_add} if unsafe\n\nTrack buffer memory usage outside so that the caller gets error if trying\nto call further sid_buffer_{add,fmt_add,vfmt_add} and there's a risk\nthat the underlying realloc/mremap could make any previous buffer memory\npointers invalid.\n\nBuffer caller must either rewind the buffer or reset it. This way,\nthe caller declares that the buffer memory pointer it requested and\nused from previous sid_buffer_{add,fmt_add,vfmt_add} or sid_buffer_get_data\ncalls is not used outside anymore.\n\nIf pointer to buffer's memory is not returned (the \"void **mem\" arg is\nNULL for the sid_buffer_{add,fmt_add,vfmt_add} functions), the caller\ndeclares no interest in use of this memory. In this case, the memory\nusage is simply not tracked because there's no risk even if the memory\nis moved after internal realloc/mremap.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "41390e68b1386854405ab50ef52d284a9ebf2b08", "commit_date": "2022-04-12T12:21:48Z", "commit_message": "global: change sid_buffer_{add,fmt_add,vfmt_add} calls for latest changes\n\nThe signature of sid_buffer_add, sid_buffer_fmt_add and\nsid_buffer_vfmt_add has changed so change the calls throughout\nthe code appropriately.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "314d13a2574d58facbb46f93e040e630bbfa6e0e", "commit_date": "2022-04-12T12:19:36Z", "commit_message": "base: buffer: return mem pointer and pos within buffer on demand for sid_buffer_{add,fmt_add,vfmt_add}\n\nChange sid_buffer_add, sid_buffer_fmt_add and sid_buffer_vfmt_add so\nthat they return pointer to the start of the buffer memory which is\nused for current addition only on demand - add 'mem' output arg for\nthis.\n\nAlso, make it possible to return absolute position within buffer memory\n(not including any metadata like size prefix) - add 'pos' output arg\nfor this. This way, it's easy to remember the position in the caller\nso it can use it for either:\n\n  - sid_buffer_rewind\n  - sid_buffer_get_data + pos for the offset within data to get an\n    individual item\n\nThe 'ret_code' which was output arg before is now function's return code\ndirectly.\n\nThis change will also make it easier to track whether we're only\naccumulating to buffer memory or whether we're also using the value\noutside (in which case, we request the memory pointer to be returned).\n\nThe memory usage tracking will then make it possible to detect situations\nwhere we're using the buffer memory while there's a risk of the\nrealloc/mremap to get called later when there are more subsequent\nsid_buffer_{add,fmt_add,vfmt_add} calls. The realloc/mremap could cause\nany existing pointers to buffer memory to be invalidaded if the memory\nsegment needs to be moved due to the extension (...if the extension\ncauses the memory segment to not fit anymore so that it still remains\nas one linear uninterrupted memory segment).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4e4977159182978c9fa1fef5114ad6147724771f", "commit_date": "2022-04-06T14:45:51Z", "commit_message": "resource: ubridge: fix buffer usage to count with possible memory allocation movement (part 1)\n\nBuffer's underlying 'realloc' as well as 'mremap' (with MREMAP_MAYMOVE)\nwill end up moving existing memory content if there's no contiguous space\nfor the extension of the existing memory block.\n\nThis patch uses sid_buffer_count to get current head offset in buffer's\nmemory so we can use sid_buffer_rewind instead of sid_buffer_rewind_mem\nat the end of functions which use a buffer for temporary allocations.\n\nAlso, if we're returning a pointer to memory with the beginning of data\nthat was collected with sid_buffer_add throughout a function execution,\ndo remember initial offset instead of memory start pointer. Then at the\nend of the function, get buffer's data and add the initial offset to it\nto get the actual pointer to return (currently this was the case of\n_buffer_get_vvalue_str).\n\nThis way, the pointers we're working with are correct even after\nrealloc/mremap moving memory.\n\nOther (more complex) cases will be patched in subsequent patches.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f727381f72d578d2b8194cf82df2362bd3009cab", "commit_date": "2022-04-06T11:30:55Z", "commit_message": "resource: ubridge: add 'buffer' to fn names to make it clear that buffer is used", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c0e4f4d6b846289390c9f5bdd0cf5d9ac002fe40", "commit_date": "2022-04-06T09:16:15Z", "commit_message": "resource: ubridge: fix buffer destroy on error path in _init_delta_buffer\n\nBuffer is destroyed with 'sid_buffer_destroy', not with 'free'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "11f96a048983dd5905fa532c6ae65129b272a915", "commit_date": "2022-04-04T07:30:25Z", "commit_message": "resource: ubridge: adapt sid_buffer_rewind call args with SID_BUFFER_POS_ABS for latest changes\n\nThe position we provide for sid_buffer_rewind with SID_BUFFER_POS_ABS is now\ncounting only data, not metadata (like size prefix).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "caa6ef2fbe38ef9c0457505d41809aa94f7ba80c", "commit_date": "2022-04-04T07:28:46Z", "commit_message": "base: buffer: make size prefix internal for sid_buffer_rewind with SID_BUFFER_POS_ABS\n\nBefore, when using sid_buffer_rewind with SID_BUFFER_POS_ABS, we had to\ncount with size prefix if SID)BUFFER_MODE_SIZE_PREFIX was used.\nMake the size prefix completely internal and when accepting absolute\nposition for sid_buffer_rewind, count only with actual data,\nnot metadata (like that size prefix).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3432c2c81b9e50a1348be6e6eb6820bc864ad91d", "commit_date": "2022-03-31T14:08:00Z", "commit_message": "global: use sid_buffer_count instead of sid_buffer_stat where appropriate", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1186090dc901055c398ab92dfdce412d3192871", "commit_date": "2022-03-31T14:07:59Z", "commit_message": "base: buffer: add sid_buffer_count\n\nThe sid_buffer_count returns number of bytes/items (depending on buffer\nmode) used only for data, excluding any metadata (like size prefix).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "52359594738c14e77c0d4e63aeb80ce84db9fbbc", "commit_date": "2022-03-31T12:42:53Z", "commit_message": "base: buffer: remove superfluous min value check in _buffer_linear_rewind_mem\n\nThe check for minimum value of provided \"mem\" arg is already done in\ntop-level sid_buffer_rewind_mem.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e2dc6381bde023224a257de24b37b489507504a5", "commit_date": "2022-03-25T14:08:52Z", "commit_message": "resource: ubridge: fix dbdump command to really dump all records; add CMD_KV_EXPORT_ALL flag\n\nWe used KV_EXPORT_SYNC (matching with KV_SYNC KV record flag) and\nCMD_KV_EXPORT_PERSISTENT (matching with KV_PERSISTENT KV record flag) to check\nfor KV records which are meant to be included in export buffers.\n\nHowever, for commands like \"dump\", we want all KV records to be exported,\nnot just the ones marked with SYNC and/or PERSISTENT flag - there are records\nwhich do not have any of the two set and still we want them to be included in\nthe dump.\n\nFor this purpose, we have now a new flag \"CMD_KV_EXPORT_ALL\" to cover\nall records.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "497048fd6392b0c228958922f674cb2cabef6b14", "commit_date": "2022-03-25T11:55:18Z", "commit_message": "resource: ubridge: fix flag value for CMD_SESSION_ID\n\nThe CMD_SESSION_ID cmd flag had incorrect value assigned which was same\nas the flag for CMD_KV_EXPBUF_TO_MAIN.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2030ecec9357adb36d2594ce77f76ad8c3c38290", "commit_date": "2022-03-25T09:07:45Z", "commit_message": "resource: worker-control: clarify comments about fd_redir in worker-control.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4362f952e538f555c1587b91436a13198f4f2368", "commit_date": "2022-03-24T14:12:08Z", "commit_message": "resource: worker-control: fix segfault on dropped channel and NULL input buffer\n\nThe _on_worker_proxy_channel_event and _on_worker_channel_event event\nloop callbacks are also called if there's an error detected on the\nchannel, not only when data is available for reception.\n\nAlso, these callbacks are used for channels where we do not expect\nincoming data (which we collect in chan->in_buf) and so the input\nbuffer for such channels is not set at all (chan->in_buf == NULL).\n\nFor example, this is the case with the proxy side (write end) of the\nWORKER_CHANNEL_PIPE_TO_WORKER. The worker could be brought down/crashed,\nbreaking the pipe which would emit the EPOLLERR on the proxy side and\nthen it's caught in _chan_buf_recv.\n\nIf that's the case, we have to avoid trying to reset the NULL\nchan->in_buf.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "75a98a94b2eec8991ab00f89ee7ebf23c13dc86d", "commit_date": "2022-03-24T09:13:21Z", "commit_message": "resource: worker-control: make all fd redirects effect the worker\n\nWORKER_WIRE_PIPE_TO_WORKER channels were redirecting file descriptors on\nthe proxy process, instead of the worker process. It seems more useful\nto have an external worker process able to read from the proxy on\nSTDIN_FILENO, than for the proxy process to pick which fd is uses to\nwrite to a random file descriptor of the external worker process.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ed4af2c7fe2ac615fc0fb7edf673bc2e23516c67", "commit_date": "2022-03-24T09:13:21Z", "commit_message": "resource: worker-control: fix cleanup in _setup_channels()\n\n_setup_channels() could clean up some resources, but not mark them as\nunused, so when _destory_channels() was later called, it would attempt\nto clean them up again.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5b45da7991a039f4996d8fd2bd3b51af522d3ed3", "commit_date": "2022-03-24T09:13:21Z", "commit_message": "resource: worker-control: channel setup fixes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "22421b9fbe1b7e878765edf4ba1269db12a2fb48", "commit_date": "2022-03-24T09:13:21Z", "commit_message": "resource: worker-control: clean up first channels on failure\n\nThe failure path for _create_channels() was only cleaning up channels at\nindex 1 and above. It should clean up the channels at index 0 as well.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eca59ff32681ec824aef15a1b8cab9ede9e183ae", "commit_date": "2022-03-23T14:45:07Z", "commit_message": "resource: kv-store: return proper number of record entries from kv_store_num_entries with bptree backend", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "20f27648fd534726752296f5ac5c4ab50a44feb1", "commit_date": "2022-03-23T14:44:57Z", "commit_message": "internal: bptree: track number of record entries", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12053ccc3f96aaee75607c732d3e5bebc73e313f", "commit_date": "2022-03-23T14:01:17Z", "commit_message": "internal: bptree: update overall data size according to record update\n\nFix overal data size counter in bptree structure that was not counting\nwith record updates where the record sizes may change.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4aaf727bc845507fb6e8e0c04e40c674490f8c67", "commit_date": "2022-03-22T13:52:20Z", "commit_message": "resource: kv-store: use bptree_get_size in kv_store_get_size for bptree backend", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e1e2abb6d151d96562cfa2378f20251e4e924dd8", "commit_date": "2022-03-22T13:49:20Z", "commit_message": "internal: bptree: update comments about changes from original version", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "60533599f5d2cabfe66350467a7018f3a29d47e8", "commit_date": "2022-03-22T13:49:20Z", "commit_message": "internal: bptree: rename bptree_height -> bptree_get_height", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3ac588212e3a97d00ec50c07c71001287b63cdc3", "commit_date": "2022-03-22T13:49:19Z", "commit_message": "internal: bptree: track overall metadata and data size usage", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e1d0c780fc24655e1a33cba9a92b0595e6e077e1", "commit_date": "2022-03-21T14:13:55Z", "commit_message": "internal: bptree: add bptree_get_size placeholder", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d53ac4ee4fddb3aba0e25dfd5c9f69ba1513ae9a", "commit_date": "2022-03-21T14:13:46Z", "commit_message": "resource: kv-store: add support for B+ tree (bptree) backend", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "099988c6a4f6f3ab09a0401aed1ec53b94584624", "commit_date": "2022-03-21T12:52:52Z", "commit_message": "resource: kv-store: prepare iterator for backends with range lookup", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0882417ae039db76e85bfb63ba498fb782366215", "commit_date": "2022-03-21T12:52:52Z", "commit_message": "resource: kv-store: put ht fields in struct kv_store and kv_store_iter under a union\n\nPut hash table fields in struct kv_store and struct kv_store_iter under\na union as preparation for expansion with other backend types.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae3331504f59594dd1508dc7731c752dc9af5d32", "commit_date": "2022-03-21T12:52:51Z", "commit_message": "internal: bptree: add bptree_iter function for simple static iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c94a47e5e6ee3736cbdb4c681d9c98d8e51aa07", "commit_date": "2022-03-21T12:19:45Z", "commit_message": "internal: hash: also add key, key_len and data_len params for hash_iterate_fn_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "212e81d00f3c5727b5eca53ae78996f2c71ef6b7", "commit_date": "2022-03-21T12:18:52Z", "commit_message": "resource: worker-control: cleanup before starting external worker\n\nExternal workers now exit the main process event loop and clean up all\nresources before exec'ing the worker program.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dfaf093ed1a36fb6b3c0ba680c65d81f8e9865fb", "commit_date": "2022-03-21T12:18:52Z", "commit_message": "resource: worker-control: remove unnecessary else blocks\n\nBoth the external worker and worker proxy sections of\nworker_control_get_new_worker were in unnecessary else sections.  The\ninternal worker section always returned, and the external worker section\nalways exited, so the following sections didn't need to be in a else\nblock. Remove them to avoid pointless indentation.  No functional\nchanges.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "11fce9d4ea94c6b25af861aeaec0bc21b5416156", "commit_date": "2022-03-21T12:18:52Z", "commit_message": "resource: worker-control: cleanup before starting worker\n\nThe worker process was running its event loop while in an event handler\nfor the main process event loop. This made it impossible to free the\nmain process resources that it inherited when it forked.\n\nTo avoid this defer actually creating the worker resource and cleaning\nup the inherited resources until after exitting the old event loop.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6ed6a419403406663bb842ac9ed7b995e6cc5ff0", "commit_date": "2022-03-21T12:18:52Z", "commit_message": "resource: prepare for changing how workers startup\n\nIn preparation for future patches, change the _get_worker() and\nworker_control_get_new_worker() functions to return both a return code\nand a resource. Right now, when the functions return success, the\nreturned resource will always be set to the worker_proxy resource, but\nfuture patches will change this.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "193cbe5ce39e9b048b0d54716a2cddf3b7101afe", "commit_date": "2022-03-21T12:18:52Z", "commit_message": "resource: don't error when the event loop exits with -ECHILD", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ae28c5425129ba0e332c5878e7d870112316216", "commit_date": "2022-03-21T12:18:52Z", "commit_message": "resource: ubridge: return NULL on _get_worker() failure\n\nInstead of having a NULL expression, actually return NULL", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7d130c60f9f57f9d6a9b143773756f77f09ac2c7", "commit_date": "2022-03-16T13:28:04Z", "commit_message": "internal: bptree: add iterator and associated functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac98dd9e676068d0d7538b4c35621fe0272c1658", "commit_date": "2022-03-16T10:36:30Z", "commit_message": "internal: bptree: return index of found key from _find", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1ddb086213558c7d8da878707d1555ded17a23f3", "commit_date": "2022-03-16T10:15:28Z", "commit_message": "internal: bptree: remove superfluous pointer comparisions with NULL", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7d44d1766ff9401520d979d7fcb5e2e926df4f95", "commit_date": "2022-03-14T15:26:47Z", "commit_message": "internal: bptree: properly unref keys in _redistribute_nodes and _destroy_tree_nodes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "40cc944a48d3997482224fbdc103e2ce4a1d8b3c", "commit_date": "2022-03-14T11:59:16Z", "commit_message": "internal: bptree: copy keys on insert; add key reference counter\n\nAlways copy a key on insert so caller doesn't need to care about\nallocation/deallocation. Also, add reference counter for each key\nand use only a single copy if the same key is used for both leaf and\ninternal nodes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "97e4287723477bff203070460fb6e9c0cdab8106", "commit_date": "2022-03-14T11:56:03Z", "commit_message": "internal: add in-memory B+ tree (bptree)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "01f079df8c5a06b593498bac89e2694534772d9d", "commit_date": "2022-03-11T01:22:51Z", "commit_message": "tests: add unit tests for util_str_comb_to_strv()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ed0a52c94baf3d25d6c03e37aeb192b8a843256", "commit_date": "2022-03-11T01:22:51Z", "commit_message": "resource: ubridge: fix uninitalized use of cmd_reg in _init_command()\n\nif _init_command() failed, it could check cmd_reg->flags before cmd_reg\nwas initialized. Initialize it to NULL, and check that it's non-NULL\nbefore dereferencing it.  Also check if _get_cmd_reg() returned NULL.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8b564e048502f2e25f2bac682cfdf315b291d5c5", "commit_date": "2022-03-11T01:22:51Z", "commit_message": "internal: util: fix tokenizing strings\n\nutil_str_iterate_tokens() didn't treat quotes as delimiters, which meant\nthat if there weren't delimiters before and after quoted substrings,\ncharacters would end up in multiple tokens. Also, the way escapes were\nhandled was broken. The code checked for and honored escapes immediately\nbefore a quote, but it didn't remove the escape characters from the\ntokens.\n\nTo solve these while keeping the code simple, no longer check for escape\ncharacters. Instead quotes must be escaped by placing them inside a\nquoted token delimited by a different quote character.  Also treat\nquotes as delimiters for non-quoted tokens. If there are not regular\ndelimiters before and after a quoted token, append the token to the\nadjacent tokens.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "316234796eabdeda284453b62849f189bbabacc5", "commit_date": "2022-03-11T01:22:51Z", "commit_message": "resource: remove duplicate sd_event_source_unref() in error path\n\n_create_event_source() doesn't grab a reference to the systemd\nevent source, and it already gets dereferenced in the calling\nfunction's error path.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e864baf6534b75a9d30b4d0ed0f981d93a0c999", "commit_date": "2022-03-11T01:22:51Z", "commit_message": "iface: service-link: make helper function static", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "734cb0ff5835473cf39a13cb6d1587a33576e8bb", "commit_date": "2022-03-11T01:22:51Z", "commit_message": "internal: util: fix freeing memory on util_strv_copy() failure\n\nIf util_strv_copy() failed while copying the tokens, it freed mem, the\npassed in util_mem_t structure.  It should be leaving mem alone, and\nfreeing any memory it allocated internally instead.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "485fd9f989b604cf25adb1bbf57a4a0c98b75819", "commit_date": "2022-03-11T01:22:51Z", "commit_message": "base: comms: fix setting unix socket pathname\n\nmemccpy() copies a buffer either through a given character or till the\ngiven length, whatever comes first.  So this code was treating path_len\nas a character to check for, to end the memcpy. Instead, verify that\npath_len is smaller than sun_path, and then copy than many bytes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5253dd7f6c1aaae4493ec9ca9adf27917ae9153f", "commit_date": "2022-03-02T13:35:46Z", "commit_message": "resource: ubridge: update comments on _kv_delta_set", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cc031fe7ebaee69d541ebe70eb7e3c3373e07bea", "commit_date": "2022-03-02T09:06:14Z", "commit_message": "debug: gdbinit: add fork-related helper aliases", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7d8692a701c376e02e7debc2218faccba750d824", "commit_date": "2022-03-02T08:44:10Z", "commit_message": "resource: ubridge: consolidate kv_value naming in _sync_main_kv_store", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "782d832df055d6ad2ca5cc55da143cc42f3ea4d8", "commit_date": "2022-02-28T19:59:06Z", "commit_message": "resource: ubridge: add missing CMD_KV_EXPORT_PERSISTENT flag for c-dbdump registration", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae98a3bb0bd753a42efc90e6e3dd2b274917ad06", "commit_date": "2022-02-28T19:50:34Z", "commit_message": "resource: ubridge: fix check for KV_SYNC and KV_PERSISTENT in _build_cmd_kv_buffers", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2f295ceea89d25326d5e726552e2275633be4d31", "commit_date": "2022-02-28T14:07:25Z", "commit_message": "resource: ubridge: consolidate iov --> vvalue and full_key --> key naming\n\nWe're using \"vvalue\" for \"vector value\" and \"value\" for scalar value.\nWe're using \"key\" for complete full key and \"core\" for key core.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cc762117702b67eda58465a8c09b7f3e6281c6cc", "commit_date": "2022-02-28T13:34:45Z", "commit_message": "tests: kv_store: use proper kv_store_set/unset_value callback names", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa8f4f03e995204fdf05a91553cad5c394ead934", "commit_date": "2022-02-28T12:54:56Z", "commit_message": "resource: ubridge: remove recursion from kv_store_set_value's delta callback\n\nRemove recursion from inside the kv_store_set_value's\nkv_store_update_fn_t type callback that calculates and sets delta values.\nInstead, add new _kv_delta_set wrapper with a sequence of related\nkv_store_set_value calls that set current value, its absolute deltas\nand all the related reciprocal values.\n\nThis makes it easier to use possible external KV store backends that\nmight take a lock on each kv_store_set_value underneath. If that is the\ncase, with recursive kv_store_set_value calls, we may deadlock because\nof a lock already taken for the duration of concrete backend's\nkv_store_set_value handling that includes kv_store_fn_t callback.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ade939f76e2dcd6fc61656aba086611c32eef27", "commit_date": "2022-02-23T08:48:59Z", "commit_message": "resource: ubridge: use _kv_cb_ prefix for all kv_store_set/unset callbacks\n\nHaving _kv_cb_ prefix for all kv_store/set/unset callbacks makes it\neasier to navigate through the code.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84c91b346b42d42c8df804100ff4c9913228c1c7", "commit_date": "2022-01-14T13:32:09Z", "commit_message": "resource: ubridge: set up kv store generation before preloading modules\n\nWhen modules are preloaded, they can access the KV store and so we need\ncorrectly initialized KV store generation number.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "91f19e82c6f193e0823866e718dea89885bb7feb", "commit_date": "2022-01-14T13:32:09Z", "commit_message": "resource: sid: catch SIGUSR to dump db content", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a7a161d0c5e0d1c0d4d99d73050e10eb9b4c4a5e", "commit_date": "2022-01-14T13:32:08Z", "commit_message": "resource: ubridge: add header file with interface; provide ubridge_cmd_dbdump", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e1e1ccfac93ab7e281661574d80ed51427a44d46", "commit_date": "2022-01-14T10:35:58Z", "commit_message": "resource: ubridge: wrap cmd-specific environment in new sid_ucmd_ctx.req_env field", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a6eda9ffe24fa9be6ce0ec92289ef93cddf595c1", "commit_date": "2022-01-13T14:37:52Z", "commit_message": "resource: ubridge: directly use subresources recorded in ubridge structure", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b3e199f97bbf7bf70c6e17d813cbbdf9cf7d2e01", "commit_date": "2022-01-12T12:25:15Z", "commit_message": "resource: ubridge: add reference to internal resource in ubridge structure", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5d9a48ae508db3e4de85dd645d3dfd3096316844", "commit_date": "2022-01-11T14:15:14Z", "commit_message": "rpm: spec: fix files section name for sid-internal-libs", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "449e21d912e689d5087c657332493947a63c16ec", "commit_date": "2022-01-04T09:13:39Z", "commit_message": "resource: ubridge: add KV_SYNC flag for KV_SYNC and KV_PERISTENT difference\n\nAdd new KV_SYNC kv store value flag so we can make a difference between\na \"request for syncing the snapshot value with main kv store\" and\n\"making the record persistent\". When marking the record as persistent,\nit will be counted in for dumping to a persistent store and hence able\nto be imported as part of next database generation.\n\nThis patch also reflags current KV_PERSISTENT flag throughout code to\nKV_SYNC which is what it is meant to be now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7c21de27a9ad1614d363d0ad123b0a283f79603b", "commit_date": "2022-01-04T09:13:32Z", "commit_message": "resource: ubridge: add initial support for generation numbers in KV records\n\nWhen older database is read/reused, then current generation number is the old\none increased by one. Otherwise, we start at generation number 1. When records\nare being created or updated, they are always marked with current generation\nnumber. This scheme helps with identification of records which come from\nprevious generations. Such older records can be used either as hints only\nor we are able to compare the older/imported records with new ones,\nmaking further decisions - more patches will follow to add the decision\nlogic.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ea8d4c0d63a0e4b38c3fa4cffd1c93ec9e20e82a", "commit_date": "2021-12-15T09:33:31Z", "commit_message": "resource: replace internal calls to sd_event_{add,set}_time_relative with alternative sequence\n\nThe sd_event_{add,set}_time_relative appears only in recent versions of sd-event\nlibrary and not all distros have it (e.g. Travis CI). These functions are only\nfor convenience and they can be easily replaced with 'sd_event_now',\n'sd_event_source_get_time_clock' and 'sd_event_{add,set}_time' combination.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0e7a77a3448f7d9756e11b9aa6e5c8c2ffdc941", "commit_date": "2021-12-13T13:58:05Z", "commit_message": "resource: sid: remove SIGCHLD case from _on_sid_signal_event\n\nWe're not handling SIGCHLD in _on_sid_signal_event - this is done in\nworker_control resource.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b782e5d408244f2fb6a529359b2f7cbb4770e019", "commit_date": "2021-12-08T22:28:51Z", "commit_message": "resource: ubridge: drop unused _dump_kv_store{_dev_stack_in_dot} code", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fe6c7717a92ca918a23bfbdc50701ad4488ef06c", "commit_date": "2021-12-08T22:28:50Z", "commit_message": "resource: ubridge: add KV_VALUE_VEC_BUF_HEADER_PREP macro to prepare header using vector buffer", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cba2515645be0683fcb5a47ef6d112e0a07028f8", "commit_date": "2021-12-08T15:52:10Z", "commit_message": "resource: ubridge: add 'VEC' to all KV_VALUE_* macros which process vectors", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cb97bddab6e5163c197e18035e986dcc31ba0d43", "commit_date": "2021-12-08T15:21:47Z", "commit_message": "resource: ubridge: remove superfluous header_size arg for _init_delta_{struct, buffer}\n\nHeader size (vector item count for a header) is always\nKV_VALUE_VEC_HEADER_CNT so use this constat directly instead of passing\nit through _init_delta_struct --> _init_delta_buffer call path.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7a1064afc1e314131f05321755ec6b2868c458b0", "commit_date": "2021-12-08T14:09:18Z", "commit_message": "resource: ubridge: add and use KV_VALUE_VEC_HEADER_CNT and KV_VALUE_VEC_SINGLE_CNT constants\n\nKV_VALUE_VEC_HEADER_CNT and KV_VALUE_VEC_SINGLE_CNT named constants just\nmake it a bit easier to read the code where we mean \"vector item count\"\nrather than using KV_VALUE_IDX_DATA and KV_VALUE_IDX_DATA + 1 which is\nsupposed to be used for indexing and looks cryptic when used for counting.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff76b5ae27dbf97c3084d865716a859b9662220b", "commit_date": "2021-11-29T09:29:12Z", "commit_message": "resource: add sid_event_time_type_t arg to sid_resource_{create,rearm}_time_event_source instead of extra fns for relative times", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "72db78d542846f47f8d1445997fa0a1ff9a4f45d", "commit_date": "2021-11-29T08:39:58Z", "commit_message": "resource: ubridge: comment out _self_cmd_dbdump and associated timer for now\n\n_self_cmd_dbdump and associated loading is currently used only for testing.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38f47e11955c7f1a31fee37cec6b4dc69bfce818", "commit_date": "2021-11-29T08:27:47Z", "commit_message": "resource: ubridge: load existing database on initialization", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c111a2609562c1c856dcc77ca8170eb90ec9ada7", "commit_date": "2021-11-29T08:27:47Z", "commit_message": "resource: ubridge: use BUFFER_MODE_SIZE_PREFIX for export buffer with file backend", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3f5b7dbce09f6700241c237097286c49b81da98f", "commit_date": "2021-11-29T08:27:47Z", "commit_message": "resource: ubridge: rename 'worker_proxy_res' arg to generic 'res' in _sync_main_kv_store\n\nThe _sync_main_kv_store may be used in different context than being\ncalled from worker_proxy so rename the arg to a more generic 'res' name.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0e25113d95e10cdc3dd8dbc74662bfba7dd7efc", "commit_date": "2021-11-29T08:27:47Z", "commit_message": "resource: ubridge: use NO_FORMAT for self-command output", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8c6c65fb236a031747bc3a1461858a7fef49eedb", "commit_date": "2021-11-29T08:27:46Z", "commit_message": "resource: ubridge: add timer with intervals to dump database to a file", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d3aff587b6d5240cf7ce1243699280f9d3553369", "commit_date": "2021-11-22T14:06:13Z", "commit_message": "resource: ubridge: worker yields itself after processing MSG_CATEGORY_SELF type request", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fbb822f57f84ab392939d2628080e1595ddc7f50", "commit_date": "2021-11-22T08:52:04Z", "commit_message": "resource: ubridge: fix gcc compilation warnings\n\nubridge.c:883:28: warning: missing braces around initializer [-Wmissing-braces]\nubridge.c:3554:1: warning: control reaches end of non-void function [-Wreturn-type]", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d577c7dd476c2c2fc44fd0d6ecd210348d0f8a9d", "commit_date": "2021-11-22T08:41:12Z", "commit_message": "resource: also disable underlying sd event source while destroying event source\n\nIf there was a reference for the underlying sd event source, then the\nevent source would still fire. Make sure this does not happen.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "883f82a37aa00d00056705d4f48147beb670ccca", "commit_date": "2021-11-22T08:39:52Z", "commit_message": "resource: add sid_resource_rearm_{relative}_time_event_source\n\nWe need to rearm the time event source after we have processed current\ntime event for repeated actions to work.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e2603f504ba3b8294a6b212310c17644a4ed23bd", "commit_date": "2021-11-22T08:36:20Z", "commit_message": "resource: add sid_resource_create_relative_time_event_source\n\nThis is a function for convenience to avoid repetitive code to get current time\njust to calculate absolute time for setting the timer. Usually, we'll be defining\ntime realtively to current time for repeated actions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cf17c4fadcf8c76ac56e6cd4487411713993c576", "commit_date": "2021-11-19T09:52:47Z", "commit_message": "resource: ubridge: pass whole ucmd_ctx reference instead of its fields to _get_cmd_reg\n\nThis is now directed by new CMD_KV_EXPORT_* flags which makes it clear\nenough where the KV records are exported for each command.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ef4125b64cfadef0cb677128522c5de29fc59efe", "commit_date": "2021-11-19T09:52:47Z", "commit_message": "resource: ubridge: store response header in ucmd context\n\nBefore, the response header was declared and defined in _cmd_handler.\nIf added to response buffer that is of vector type (so keeping only\nreferences), we were restricted to use the buffer with response header\nonly in the _cmd_handler. Remove this restriction.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c8181ff05514b9c9daffabe6a1218dc1433fc664", "commit_date": "2021-11-19T09:52:46Z", "commit_message": "resource: ubridge: fix up comments about res_buf being response buffer", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a4883aaf9d918765578a92ce406f2d4fcbf88fcd", "commit_date": "2021-11-19T09:52:19Z", "commit_message": "iface: internal: remove 'data' field from struct sid_msg_header to avoid variable-sized array\n\nWith variable-sized array at the end of the struct sid_msg_header (the\n\"data\" field), we're obliged to keep such struct at the very end of\nother structs it is included in. So avoid this restriction.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8c975aa581ef50682b7855df2c4e70363c928905", "commit_date": "2021-11-16T22:26:18Z", "commit_message": "resource: ubridge: clean up _cmd_handler and revise CMD_KV_* flags for better export control", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c7982075124f8ff202fca5588e6bdc1a4796ee3f", "commit_date": "2021-11-10T21:56:23Z", "commit_message": "resource: categorize event sources based on types and make it clear in the logs", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5dea6c4a019aef0cafcbebb9b80a3f1beec99fdc", "commit_date": "2021-11-10T21:56:22Z", "commit_message": "resource: ubridge: use separate command registration for self commands\n\nUsing separate command registration (struct cmd_reg) allows us to\ndifferentiate and use separate flags and handlers for client and self\ncommands.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac8d64851824ffc204baa91be1669c2f3ff702dc", "commit_date": "2021-11-10T10:07:39Z", "commit_message": "resource: ubridge: add comment/FIXME about a risk of msg->header->data access after being freed", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85558c84e0d8dfcfbd978313906f12b9f352c353", "commit_date": "2021-11-09T13:58:47Z", "commit_message": "resource: ubridge: rename MSG_CATEGORY_{INTERNAL,EXTERNAL} -> MSG_CATEGORY_{SELF,CLIENT}; also propagate category in struct sid_msg", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "986fe09ceedff24516e477ae15a1e63d4d7494be", "commit_date": "2021-11-09T08:56:47Z", "commit_message": "resource: ubridge: rename cmd_category_t to msg_category_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8993c55d669cbfe76f1c86a189390c2fb54f95a3", "commit_date": "2021-11-09T08:33:06Z", "commit_message": "resource: ubridge: require exact protocol version when handling commands\n\nFor now, require exact protocl version when handling commands. We can\nadd possible backward/forward compatibility in stable future versions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "df4c5d6b59d1caf424760d1620f735a58b4c6445", "commit_date": "2021-11-08T22:17:21Z", "commit_message": "tools: sidctl: also mention env|table values for -f|--format option", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3bb44e1777a5f4c72d73f49c5046929b2815f984", "commit_date": "2021-11-08T21:51:01Z", "commit_message": "resource: ubridge: add comment about not sending whole struct internal_msg for CMD_CATEGORY_EXTERNAL", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0a1cf639aad9a7d759cd44f1427b53a56008da07", "commit_date": "2021-11-08T21:49:30Z", "commit_message": "resource: ubridge: move msg size check to common _create_command_resource", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a7649490d10e7ff60d751ca2aa897ffbb17a5406", "commit_date": "2021-11-04T15:32:22Z", "commit_message": "resource: ubridge: link up internal message/command support; add code for internal dbdump cmd\n\nInternal dbdump not used right now, it'll be in a later patch.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dbcfc10eeba7c0316ee6849be1276932db07f94c", "commit_date": "2021-11-04T14:38:27Z", "commit_message": "resource: ubridge: remove unused struct kv_key_res_def", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "561c209f5b5c85ee16ba9570932774686c381f1d", "commit_date": "2021-11-04T13:08:08Z", "commit_message": "resource: ubridge: define channel_specs directly in worker_control_res_params", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0a9607a7962b0713a171280a5c864663e0c185b1", "commit_date": "2021-11-04T12:15:59Z", "commit_message": "resource: add 'short_name' and 'description' fields to sid_resource_type_t; shorten resource-related log messages", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3493368c3f387c18fa6026d76811a762d7a5ca8c", "commit_date": "2021-10-26T13:42:26Z", "commit_message": "resource: ubridge: add cmd_category_t to differentiate internal and external cmd request\n\nExternal requests are requested by clients connected to ubridge\n(sid_resource_type_ubridge_connection). Internal requests may be induced\ndirectly by the code itself without any connection.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2a3ec6c0316a4c209d67bbc9a6e20a745228c753", "commit_date": "2021-10-26T13:32:58Z", "commit_message": "resource: ubridge: move cmd flag checking inside _build_cmd_kv_buffers", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "77fde3c8699734356690a5390f89c57235121b30", "commit_date": "2021-10-25T20:27:55Z", "commit_message": "resource: ubridge: factor out idle worker lookup or new worker creation from _on_ubridge_interface_event", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f392de5bc1130daa28d682cfb2ae5e17b54016c0", "commit_date": "2021-10-25T19:52:02Z", "commit_message": "resource: ubridge: check client permission for running a command before creating the command resource\n\nWe already know the command type before creating the command resource so\ncheck client's permission for running a command before creating the\ncommand resource itself.\n\nThis also avoids referencing connection FD in _init_command and relaxes\ndependency of command resource on connection resource (though there is\nstill one more such dependency in _cmd_handler when writing response\nback to the connected client - we'll try to cover that in a patch later).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb3008a612013eadc09604041ad1e8e5453ff57a", "commit_date": "2021-10-25T18:50:19Z", "commit_message": "resource: ubridge: remove unreachable return call in _cmd_handler", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8dc2281d415c9a65f4200c56981646d639190c3b", "commit_date": "2021-10-25T11:33:15Z", "commit_message": "worker-control: rename 'cmd' to 'chan_cmd' to avoid confusion with ubridge cmd", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "219c66e98ffe8d6391fc4ed729ab28f816cf8b57", "commit_date": "2021-10-25T10:10:29Z", "commit_message": "worker-control: use SOCK_STREAM for comms between main and worker process\n\nFor SOCK_DGRAM, we'd need to know the exact message boundary for us to read\nit in one go. This can't work with the loop where we first read the message\nsize and then the data itself in another iteration - the data is already\ndiscarded. Therefore, use SOCK_STREAM here.\n\nMaybe SOCK_SEQPACKET would be more suitable here, but that would require\nsome enhancements in buffers too so we could use sendmsg/recvmsg instead\nof pure write/read.\n\nAlso, use AF_UNIX instead of AF_LOCAL (which is a synonym anyway) just\nfor consistency with the rest of the code.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "192320b79ae791c8bee1a5385be9b2659558a268", "commit_date": "2021-10-22T06:49:22Z", "commit_message": "buffer: format code", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c472ded4e85dfb0b9d23d4c50b4a77100c7e6f38", "commit_date": "2021-10-21T14:50:59Z", "commit_message": "ubridge: cut off unused _dump_kv_store and _dump_kv_store_dev_stack_in_dot from compilation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a1cc54433511eec8a974b911c8e6ff8c92177ca0", "commit_date": "2021-10-21T14:42:32Z", "commit_message": "debug: add clang-check options; vimrc to use syntastic; update sh aliases", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73ad629c0683bc461c589b27ae3b5c03d62ae1cd", "commit_date": "2021-10-21T11:41:04Z", "commit_message": "buffer: add SID_BUFFER_BACKEND_FILE as backend\n\nSID_BUFFER_BACKEND_FILE shares all the code with existing\nSID_BUFFER_BACKEND_MEMFD, the only difference is that with a file, we open\nthe file instead of an anonymous memory. All the other operations make use\nof mmap just like they do with BUFFER_BACKEND_MEMFD.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d2dc8d1286d60c6625604b9a8b153de8f4d83a51", "commit_date": "2021-10-19T12:33:17Z", "commit_message": "formatter: fix copyright notice", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a7d9c9ed67b4a51cc9c39f49f7f181ed0b8ffeb6", "commit_date": "2021-10-19T08:01:53Z", "commit_message": "resource: ubridge: use stored pointer to print buffer instead of referencing whole buffer path in _cmd_exec_dbstats", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "83e55cd673fb8cc3b84af58edb2284e9c88b1621", "commit_date": "2021-10-19T07:53:52Z", "commit_message": "iface: rename commands dump -> dbdump, stats -> dbstats, tree -> resources\n\nMake it clear that 'dump' and 'stats' commands are related only to database\nmatters only by prefixing them with 'db' so we have 'dbdump' and 'dbstats' now.\n\nRename 'tree' command to 'resources' as its purpose is to show current\nresources. The 'tree' might be confused by something like \"device tree\"\nthat we may potentially use later.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88511500c05f937da562414baea30f346016043f", "commit_date": "2021-10-19T07:45:12Z", "commit_message": "resource: ubridge: use single place to call _connection_cleanup as part of a failure path", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d9abff47c76e633ec2c6ec4836061d85e8775038", "commit_date": "2021-10-19T07:13:08Z", "commit_message": "iface: add sid_cmd_type_to_name and hide internal _cmd_names array", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "17b24e73e7d6ae7192924d02d0430f844d8e55cc", "commit_date": "2021-10-18T15:30:04Z", "commit_message": "resource: ubridge: clarify comments in _build_kv_buffers", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c97d26d289e9f2c6716d0cf1aead02c54b6a7492", "commit_date": "2021-10-06T14:34:18Z", "commit_message": "kv-store: optionally return the key with calls to kv_store_iter_next()\n\nMost of the calls to kv_store_iter_next() subsequently call\nkv_store_iter_current_key().  Update to return the key in the same call.\n\nSigned-off-by: Todd Gill <tgill@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f3edc304c4e71524bc3a0edd970e7579f6136d9f", "commit_date": "2021-10-05T09:30:58Z", "commit_message": "tests: add test for KV_STORE_VALUE_OP_MERGE with validation of data\n\ntest adding many (MAX_TEST_ENTRIES) iovecs with the same key to the\nkv-store.  validate that the value returned kv_store_get_value() is\na concatenation of the iovecs.\n\nSigned-off-by: Todd Gill <tgill@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a30f58771c7041f244244c42b9c9f4c1ec2bfe3b", "commit_date": "2021-10-05T09:30:58Z", "commit_message": "tests: tests for types F, E and iteration over values\n\nSigned-off-by: Todd Gill <tgill@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e951294dc84e5a59b8eef6ce7a52c1b4d377d57", "commit_date": "2021-10-05T09:30:58Z", "commit_message": "kv-store: add kv_store_num_entries() to return count of hash entries\n\nSigned-off-by: Todd Gill <tgill@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2e1416ca66f5831ad1e4be90a0b6fe16e408c7aa", "commit_date": "2021-10-05T09:30:58Z", "commit_message": "tests: include the ubridge.c file in test_kv_store\n\nincluding the source file directly allows for more detailed unit testing.\n\nSigned-off-by: Todd Gill <tgill@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2f04566b2d40143e102d82bc48b753e42c0eb1c", "commit_date": "2021-07-27T08:07:35Z", "commit_message": "resource: kv-store: make custom 'arg' filed a part of struct kv_store_update_spec\n\nAlso make the custom 'arg' part of the struct kv_store_update_spec that\nwe already pass to various update functions so it's all under one\nstructure.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "22c1c457e4af36e46b5d7027250d6d9662c12e90", "commit_date": "2021-07-27T08:07:35Z", "commit_message": "resource: kv-store: make 'key' field a part of struct kv_store_update_spec\n\nWe've been passing the 'key' as a separate arg for various update functions.\nMake it a part of the struct kv_store_update_spec that we also pass to\nthese functions so it's all under one structure.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae055024ee2cabbe27c4c3c7a062f548166bfc79", "commit_date": "2021-07-15T20:30:06Z", "commit_message": "base: buffer: add sid_ prefix to defines, enums and structs\n\nNow all the base header files prefix everything, so users don't need\nto worry about name clashes. No functional changes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "22523ea2dbb2a987b128353e1bb059c5ce6a967b", "commit_date": "2021-07-15T20:30:06Z", "commit_message": "resource: ucmd-module: remove uneeded fomatter include line\n\nThere is no need to the general module header to pull in the formatter\nfunctions, so remove it.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8d036085d3dcf04600f322ec7c0938472a58a9c", "commit_date": "2021-07-15T20:30:06Z", "commit_message": "base: remove common.h\n\nIn order to keep all of the base headers safe for users, none of them\ncan include config.h. Since that's pretty much all base/common.h did, it\nmakes sense to remove it, and simply include config.h directly in the c\nfiles that need it.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "defe8ff5899cd8e9810960068ade28752c3fbd23", "commit_date": "2021-07-15T20:30:06Z", "commit_message": "base: util: add sid_ prefix to util functions\n\nNo functional changes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7c6198d6ef89bc01c8815d3648ff415454ae5f7e", "commit_date": "2021-07-15T20:30:06Z", "commit_message": "base: binary: reprefix base64_ functions with sid_binary_", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6f2fe84e72da0dfe0033be4cc86b66bccc554c40", "commit_date": "2021-07-15T20:30:06Z", "commit_message": "base: move internal code from libsidbase to libsidinternal\n\nThere are now two versions of util.[ch] and common.h. Also rename\nbase64.[ch] to binary.[ch]. Removed some unneeded header file includes,\nand linked libraries.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "329e0db451d5db7ebde1f3282c3661c2a1ef7dc1", "commit_date": "2021-07-15T20:30:06Z", "commit_message": "iface: remove unused log.h include line", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f68c56388360a464b222b18e92a4f07144320595", "commit_date": "2021-07-15T20:30:06Z", "commit_message": "base: comms: add sid_ prefix to comms functions\n\nNo functional changes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "afe704d3eb6d67772801c8f6172bdc2136d45d35", "commit_date": "2021-07-15T20:30:06Z", "commit_message": "base: buffer: add sid_ prefix to buffer functions\n\nThis only changes the names of the exported symbols, not the names of\nconstants and structures defined in the buffer header files. No\nfunctional changes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "94726d99f02f38f8f50d983a62a4ab4acea7623e", "commit_date": "2021-07-15T20:30:06Z", "commit_message": "base: buffer: make buffer-type-vector functions static", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c77d14e88c99faea4e7921fc32c0a0dd556b73d9", "commit_date": "2021-07-15T20:30:06Z", "commit_message": "base: base64: check for invalid arguments", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0407e1e84f59ad0d65da83c12976dbeecdece23c", "commit_date": "2021-07-15T20:30:06Z", "commit_message": "base: formatter: allow formatter functions to return errors\n\nIf the formatter functions fail to add the expected text to the buffer,\nthey should return failure.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6b19dff2bb47d7127acf38e3ee873b98b6fb5959", "commit_date": "2021-07-15T20:30:06Z", "commit_message": "tools: usid: format code", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "74104365dfe3443632dca1eae9233efec434f965", "commit_date": "2021-07-09T13:00:17Z", "commit_message": "tests: fix data initialization in iface test", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4a4e1a9df2b93d6dbc7216362af458d57a6b7740", "commit_date": "2021-07-09T12:45:47Z", "commit_message": "resource: ubridge: add debug log about importing and exporting udev properties", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "de22eaf35bc0071ab3327b5210772f94ca69ae94", "commit_date": "2021-07-09T12:21:22Z", "commit_message": "resource: ubridge: do not get worker_id in _init_command if not necessary", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "52f9b66fa29c4f3f6458bfeca4c61b39886aedeb", "commit_date": "2021-07-09T12:20:52Z", "commit_message": "resource: ubridge: fix hardcoded KV_KEY_DOM_USER domain for a KV record key when retrieving values from db\n\nWe're using common _do_sid_ucmd_get_kv helper function to get a value\nfrom KV database. This function always hardcoded KV_KEY_DOM_USER domain,\nhowever this helper function is also used to retrieve records for keys\nthat do not have KV_KEY_DOM_USER domain used so they were not retrieved\nat all.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cf867f83c90a46aab3f9434896ff818325d9fbac", "commit_date": "2021-06-29T12:33:50Z", "commit_message": "resource: ubridge: remove stray ';' in _device_add_field", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "37d412eb219774f039ac778bbd68bea41d6822b2", "commit_date": "2021-06-29T12:27:03Z", "commit_message": "cleanup: fix various compiler warnings\n\niface.c:238:11: warning: 8 enumeration values not handled in switch:\n'_SID_CMD_START', 'SID_CMD_UNKNOWN', 'SID_CMD_ACTIVE'... [-Wswitch]\n                switch (req->cmd) {\n                        ^\nworker-control.c:913:23: warning: unused variable 'worker'\n[-Wunused-variable]\n        struct worker *      worker;\n                             ^\nworker-control.c:1048:4: warning: add explicit braces to avoid dangling\nelse [-Wdangling-else]\n                        else\n                        ^\n\nusid.c:129:1: warning: unused label 'out' [-Wunused-label]\nout:\n^~~~\n\nusid.c:163:21: warning: unused variable 'size' [-Wunused-variable]\n        size_t             size;\n                           ^\nusid.c:269:12: warning: unused variable 'cmd' [-Wunused-variable]\n        sid_cmd_t cmd;\n                  ^", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "db226dc3a1bbcadcb81c6332908a4f617cef7f90", "commit_date": "2021-06-29T11:36:27Z", "commit_message": "tests: add unit tests for libsidiface library\n\nRemove the old, broken usid.c test, and add tests to verify the\nfunctionality of libsidiface.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d907fe5bda340159c9c91374c36befc513836c8f", "commit_date": "2021-06-29T11:36:27Z", "commit_message": "iface: make libsidiface depend on libsidbase", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4ffa61a53fd1ac591f70971e78b3d94b9c100945", "commit_date": "2021-06-29T11:36:27Z", "commit_message": "iface: change usid_* names to sid_*\n\nAlso change USID_* defines and enums to SID_*. No functional changes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4ffffc4b685c33c4a741d7d503281bfe033dd908", "commit_date": "2021-06-29T11:36:27Z", "commit_message": "iface: rename libsidiface_usid to libsidiface\n\nAlso change usid.[ch] to iface.[ch]. No functional changes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e355863ec010d69ba28d734b16ad6fb761bf6388", "commit_date": "2021-06-29T11:36:27Z", "commit_message": "tools: sidctl: usid: add missing error logging\n\nsince the libsidiface_usid library functions no longer log error\nmessages, the tools that call them should log an error if they fail.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "20139b526eca30ee20416409466fbfc25747b29c", "commit_date": "2021-06-29T11:36:27Z", "commit_message": "iface: usid: retry failed memfd read\n\nIf usid_req() fails reading the memfd with a retryable error, it should\nkeep retrying.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f3c438a6ac21fc5f54c8803269a919a4ee3b7b57", "commit_date": "2021-06-29T11:36:27Z", "commit_message": "iface: pull internal data from usid.h\n\nUsers of libsidiface_usid don't need to care about the details of how\nthe library communicates with the daemon, so pull that code out of\nusid.h and into a new file, iface_internal.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c0fb27e95d5ee7c6af6cda4de098697518ff9597", "commit_date": "2021-06-29T11:36:27Z", "commit_message": "iface: usid: usid_req() interface changes\n\nusid_req() will now build up the extra data for commands itself, unless\nit is called with USID_CMD_FLAGS_UNMODIFIED_DATA, in which case it will\nsimply append the passed in data without modification. The arguments for\nusid_req() have also changed. All the input arguments have been combined\ninto the usid_request structure, which has a union the holds the extra\ndata structures for different commands.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f6849897e76cc52adcdfa342ae5db58c4f83e9c5", "commit_date": "2021-06-29T11:36:27Z", "commit_message": "tools: sidctl: remove unneeded buffer copying\n\ninstead of writing all the SID daemon output to a buffer, and then\nwriting the buffer to stdout, sidctl can simply print the daemon\nresponse directly.  However, the daemon wasn't previously NULL\nterminating its response. This was correct when sidctl was writing the\noutput directly to stdout, but now sidctl is treating the output as\na string, which needs NULL termination.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "397f63c635bd824f81e41ebea8a6061bba350d6e", "commit_date": "2021-06-29T11:36:27Z", "commit_message": "iface: usid: remove buffer.h include from usid.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f51e52a887d40c679edb0126c35418a16da65db0", "commit_date": "2021-06-29T11:36:27Z", "commit_message": "iface: usid: simplify usid_req interface\n\nusid_req() has some issues as a public library interface. It prints\noutput messages which the caller may not want. I requires callers to use\nthe buffer interface to pass in additional data and read the results,\nwhich means that callers need to pull in a bunch of functions unrelated\nto SID. Finally, callers are expected to deal with the fact that\nsometimes the data is returned in the resp_buf, and sometimes it is in\nreturned in the resp_fd, and free these resources correctly when they're\ndone.\n\nWith these changes, usid_req() no longer prints any output, or requires\ncallers to care about where the data is stored. They can simply access\nit and free it with the usid_result_* functions. The code still uses\nbuffers under the surface, so callers still need to link against the\nother SID libraries. However this requirement can be removed by later\nchanges.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b904d9d0a872cf979f0b788037153864b1b21dac", "commit_date": "2021-06-28T13:59:57Z", "commit_message": "sid: check to make sure parent hasn't died immediately after fork()\n\nIn the worker process add a check to make sure the parent process\nhasn't died immediately after the fork().  If the parent has died,\nadd a log message and exit the worker.\n\nSigned-off-by: Todd Gill <tgill@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e442b4dd751f8e7c3c77d15c3bdb16ff1d391df3", "commit_date": "2021-06-28T13:59:57Z", "commit_message": "sid: add prctl(PR_SET_PDEATHSIG, SIGUSR1) to worker startup\n\nIf the parent SID process is terminated, request a SIGUSR1 to any active\nworker processes so know the main process has terminated.\n\nIf the parent has terminated, don't call _chan_buf_send. Also, don't\nre-enter a systemd main loop - there is no parent to send the SIGTERM\nto cause an exit.\n\nSigned-off-by: Todd Gill <tgill@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "20627700b01a59bd0039b9a1bf21fcb29bbacb6d", "commit_date": "2021-06-28T13:59:57Z", "commit_message": "resource: fix passing of custom 'data' arg to signal handler\n\nWe should pass the 'data' arg down to _create_event_source which is\ncalled inside sid_resource_create_signal_event_source.\n\nWe're wrapping underlying event loop so it can be changed freely without\nmodifying the rest of the code above. When a signal occurs, with systemd\nevent loop underneath, our '_sd_signal_event_handler' wrapper is called\nwith 'sid_resource_event_source_t *es' as data. Then, in turn, within the\n'_sd_signal_event_handler', we call the actual handler 'es->handler' with\n'es->data' arg then.\n\nAlso, both calls of sid_resource_create_event_source need to specify the\ndata arg:\n\n  - in _init_sid in sid resource, we need to pass the 'res' that represents\n    the sid resource\n\n  - in _init_worker in worker-control resource/_init_worker, we need to\n    pass the 'res' that represents the worker\n\n(In general, the 'data' arg doesn't necessarily need to be the same\nresource as the one we attach the event source to, which is specified by\nthe first arg for the sid_resource_create_signal_event_source fn.\nThe 'data' arg doesn't even need to be a resource, but any custom data arg.)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "93563cd39dfd686028da274e3f972f1660b5dba0", "commit_date": "2021-06-14T08:54:26Z", "commit_message": "log: journal: remove unused buffer functionality and dependency on base/buffer.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4c46c37a301872a28ac19e905f260b8116ce66de", "commit_date": "2021-06-04T16:57:16Z", "commit_message": "resource: ubridge: remember cmd_reg based on the request for better code readability", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "65037c268bd63ee9f0b52e642211ac5482e720da", "commit_date": "2021-06-04T16:57:12Z", "commit_message": "resource: ubridge: do not call cmd handler function if there's no extra processing\n\nSome commands just needs to import/export the db and return results.\nThis avoids superfluous call of _cmd_exec_<command> function if it doesn't\nactually have any code inside.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d04c7e170bf5b39cf260611f1f6cb97af74d202e", "commit_date": "2021-06-04T16:57:07Z", "commit_message": "resource: ubridge: use single place to write result and export buffer\n\nAdd 'exp_buf' (export buffer) to struct sid_ucmd_ctx and use single\nplace to write the result buffer as well as export buffer - the\n_cmd_handler fn.\n\nThe 'res_buf' (result buffer) is the usual result which is directly\nsent over to client and 'exp_buf' (export buffer) is meant to be sent\nby means of sending the backing FD over a unix socket.\n\nAdd 'CMD_KV_EXPORT_CLIENT' cmd_reg flag to make a difference between\ncommands that need to send records to an external client (like 'sidctl dump')\nand the ones that need to send them internally to the main SID process\n(like 'usid scan').", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "36f63e79fc9786e4ecbb04cdd38b34b08572af6a", "commit_date": "2021-06-04T16:53:49Z", "commit_message": "resource: fix json formatting for sidctl tree\n\nindent the event-sources array.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31b0662b870e1d0e79e04eebb6792d0c3e25d2f0", "commit_date": "2021-06-04T16:53:49Z", "commit_message": "resource: ubridge: mode dump command formatting to SID daemon", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cfe2e8cb23fbf064226b07fc84b30590cf9611ac", "commit_date": "2021-06-04T16:53:49Z", "commit_message": "base: formatter: constify formatter code", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6f154730cb0bd3f41bf9290358499eb8f990a371", "commit_date": "2021-06-04T16:53:49Z", "commit_message": "resource: ubridge: fix building udev value only dumps\n\nIn _build_kv_buffer(), if is_dump is true, export_udev is true, and\nexport_sid is false, the udev namespace values were not being dumped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aeaa6af933e3a27ef3412d1bd96ae1d80728d4ac", "commit_date": "2021-06-04T16:53:49Z", "commit_message": "base: formatter: and ENV format type\n\nSince ENV format lines need a name and value, it will not work with\nnon-boolean array elements.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "78bbb9bcb4774f9d7835e2d0460bce7deba1f14b", "commit_date": "2021-06-04T16:53:49Z", "commit_message": "iface: use usid specific names in interface", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "92f46bab2863301dc8b1854654bccf8c68d2cc22", "commit_date": "2021-06-04T16:53:49Z", "commit_message": "base: formatter: Fix minor formatting issues\n\nprint_int64_field() was printing unsigned values, instead of signed\nones, and print_uint_array_elem wasn't printing a newline with the TABLE\nformat.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "615dac3e4c2b1d39ce48ec9ed651b602475e92f0", "commit_date": "2021-06-04T16:53:49Z", "commit_message": "base: formatter: reduce the number of function calls\n\nNo changes to formatting.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cdd8763c0dc242b708bc98fb75cae09f2d8b0c27", "commit_date": "2021-06-04T16:53:49Z", "commit_message": "resource: ubridge: move stats command formatting to SID daemon", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "90e38eba6d5612824b85a1b10f389f86faeae8c3", "commit_date": "2021-06-04T16:53:49Z", "commit_message": "base: formatter: tweak non-json formatting\n\nMake the TABLE formatting for \"sidctl tree\" more understandable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "16387fef052f16588e48e167cfd984c4bf9027d3", "commit_date": "2021-06-04T16:53:49Z", "commit_message": "resource: ubridge: move version command formatting to SID daemon\n\nTo make the output work as vaild JSON with only one root element, the\nsidctl output needed to change. Also to make the client and server\nformats match, the usid output needed to change slightly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "76c2c0902e75853805c5ac6f170d01468e010eb9", "commit_date": "2021-06-04T16:53:49Z", "commit_message": "resource: make helper functions static\n\nwrite_event_source_elem_fields() and write_resource_elem_fields() are\nonly used by sid_resource_write_tree_recursively(), so make them static.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3be5dc782a8aa17821c65b48b1d3767cd1a30106", "commit_date": "2021-06-04T16:53:49Z", "commit_message": "resource: allow output format choice for \"sidctl tree\" command", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ec38fad8a1f67b756a5dfd4f2773bd62c4a86d0c", "commit_date": "2021-06-04T16:53:49Z", "commit_message": "iface: usid: Add flags to usid message header\n\nIn order to allow sid to process commands differently, pass flags along\nwith the command. Currently the only flag is for setting the output\nformat to json, but it doesn't do anything yet.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "17b9717a333c5da740df422cad3da8e38831991f", "commit_date": "2021-05-12T08:05:31Z", "commit_message": "ubridge: check size of data from client connection", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "22b730efc9170f362b74da12b0d552f9af5c0bde", "commit_date": "2021-05-12T08:05:31Z", "commit_message": "ubridge: fixed check for mmaped memfd\n\nWhen mmap() fails, it returns MAP_FAILED, not NULL, so check for that\nto see if we need to munmap().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4255508c2a0550109dcce96d45c1a16f9f9e05b", "commit_date": "2021-05-12T08:05:31Z", "commit_message": "buffer: Fix empty size-prefixed buffer issues\n\nRewinding an empty size-prefixed buffer failed, even if the rewind\ntarget was valid (just after the size prefix). Calling buffer_get_data()\non an empty size-prefixed buffer would return a value around SIZE_MAX,\ndue to a size_t rollover. Also, the functions that read from a passed fd\nassumed that the size_prefix would always be non-zero, since mmap\nrequires a non-zero length. This wasn't true for empty size-prefixed\nbuffers.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "58fe0c5ee26c1bc3d365ee6a26561881fa4546cb", "commit_date": "2021-05-12T08:05:31Z", "commit_message": "resource: ubridge: dump binary values with base64 encoding\n\nIf the value doesn't only include printing characters or doesn't end\nwith a NULL byte, print it as base64 encoded binary data.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6d611b1774e21b095da4b0c470325260fc4cc78d", "commit_date": "2021-05-12T08:05:31Z", "commit_message": "formatter: base64 encoded binary print functions\n\nAdd print_binary_* functions, to print base64 binary data. In order to\nkeep from mallocing twice, add base64_len_encode() to get the encoded\nstring size, and modify base64_encode() to encode the data to a\npreallocated buffer.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6f7f5d9b9cfb4187b2765ab67c1f84ff0e41e955", "commit_date": "2021-05-12T08:05:31Z", "commit_message": "base: add base64 encoding code.\n\nCopy BSD Licensed base64 code from:\nhttps://web.mit.edu/freebsd/head/contrib/wpa/src/utils/base64.c\nhttps://web.mit.edu/freebsd/head/contrib/wpa/src/utils/base64.h\n\nThe source code has had its includes updated to compile correctly in the\nsid code base, and its LICENSE reference comments updated to point to\nthe LICENSE file in the sid code. It has also been reformatted with to\nmatch the sid formatting style.\n\nand BSD License from:\nhttps://web.mit.edu/freebsd/head/contrib/wpa/", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eb1f2a300ad571fb35a915476cbfcbd64a92dada", "commit_date": "2021-05-12T08:05:31Z", "commit_message": "buffer: allow adding NULL data to linear buffers\n\nWith vector buffers, it is possible to first allocate space and add it\nto the buffer, and then fill it. This wasn't possible with linear\nbuffers, which required already existing space to copy the data from.\nbuffer_add() should allow a NULL data pointer, and simply memset the\nallocated space to zero in this case. This allows linear buffers to be\nused with functions that are designed to fill preallocated memory.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3190abccd6320b866de688204dbd2914bc280f7b", "commit_date": "2021-05-12T08:05:31Z", "commit_message": "resource: ubridge: dump udev namespace keys\n\nThe arguments to _build_kv_buffer() have been changed to make it\npossible to control whether or not udev keys are dumped.\n_cmd_exec_dump() now also dumps the reserved udev keys that are saved to\nthe main kv_store.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "352df2a7043c1349a88e6407626c71442df1fd3b", "commit_date": "2021-05-05T11:42:05Z", "commit_message": "resource: ubridge: use buffer_stat instead of buffer_get_data for usage check\n\nIf we don't need data, only check buffer status. We can use buffer_stat\ninstead and check the properties directly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "efdc338011e30ff80ba3333043f11b988e2b87f4", "commit_date": "2021-05-05T10:15:24Z", "commit_message": "base: remove buffer-type.h includes in buffer.h and formatter.h as it's internal to buffer code", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "747a6ec40316a7591627c1eb261f29e5eae1f262", "commit_date": "2021-05-04T20:52:04Z", "commit_message": "buffer: rename MSG_SIZE_PREFIX_{LEN, TYPE} to BUFFER_SIZE_PREFIX{LEN, TYPE}\n\nIt's actually a property of buffer, the \"MSG\" prefix was misleading.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "03706618e6b067f6e10320d2c4c5301daf23a1f0", "commit_date": "2021-04-30T10:20:24Z", "commit_message": "ubridge: sidctl: use BUFFER_MODE_SIZE_PREFIX for kv buffer\n\nBUFFER_MODE_SIZE_PREFIX will count the size of buffer for us\nautomatically so we don't need to insert the size manually in\n_build_kv_buffer.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2ec2b30b89efac8a8d8d10d68bb17371104b2c38", "commit_date": "2021-04-30T10:15:52Z", "commit_message": "buffer: add 'get_fd' buffer_type fn and update size prefix for BUFFER_MODE_SIZE_PREFIX\n\nWhen calling buffer_get_fd, it is expected the FD is going to be send\nover to a consumer. The consumer surely needs to see up-to-date value in\nsize prefix if we have a buffer with BUFFER_MODE_SIZE_PREFIX mode. The\nsize prefix is handled by each buffer type in its own way, so we need a\ntype-specific hook for the type to do any updates needed before the FD\nis provided to the caller - that's the purpose of the new 'get_fd'\nbuffer type hook.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a1901265a646c633279f19e9dc8d01089561a019", "commit_date": "2021-04-30T10:15:51Z", "commit_message": "cleanup: code format", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4aa2bdd01fbc4c5144ad5aec3578430b82707600", "commit_date": "2021-04-29T08:52:40Z", "commit_message": "ubridge: properly initialize usid cmd response header", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6bdeb3a0e03090fa140a1ef7539d46fdbf0fa6f1", "commit_date": "2021-04-29T08:30:21Z", "commit_message": "ubridge: fix typos/incorrect info in log messages", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6b7d85427478ff50d1e9717b9038d47110fcf28c", "commit_date": "2021-04-28T09:56:45Z", "commit_message": "resource: ubridge: _export_kv_store/_build_kv_buffer - cleanup comments and fix some compilation warnings", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "859d44db4866c8d007bd82f246c443e7f4884fdc", "commit_date": "2021-04-27T19:36:58Z", "commit_message": "sidctl: make dump use exported memfd, like _export_kv_store\n\nThe sidctl dump code now uses the same _build_kv_buffer() code that\n_export_kv_store() uses. The SID daemon now allows commands to override\nthe regular output code, so that _cmd_exec_dump() can control how it\ncommunicates with sidctl. To avoid making the internal kv_store value\nformat part of the interface, _usid_cmd_dump() calls\nsid_ucmd_print_exported_kv_store() from libsidresource to print the data", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e40c7aa38597b2307ae9b163eedbe07eb89f2152", "commit_date": "2021-04-27T19:36:58Z", "commit_message": "iface: usid: usid_req can now receive a file descriptor", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f9b8ec3c92f789ff8b93926fea576aa29c59870", "commit_date": "2021-04-27T19:36:58Z", "commit_message": "resource: ubridge: move functions\n\nmove _build_kv_buffer() and _connection_cleanup(), in preparation for\nfuture patches. No functional changes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "60a596add2ad18c18dfda77f12a8652cfd5cf198", "commit_date": "2021-04-27T19:36:58Z", "commit_message": "resource: ubridge: fail _cmd_handler on bad buffer write", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bd8bc05ea289404627d205d8bed025fd947f344b", "commit_date": "2021-04-27T19:36:58Z", "commit_message": "resource: ubridge: make _export_kv_store() a wrapper function\n\n_build_kv_buffer() now builds the memfd buffer with the kv_store data.\n_export_kv_store() just calls _build_kv_buffer() and send the fd to\nthe worker proxy.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fcaac214b82e6d6e919f6fab8f59f209a54558ac", "commit_date": "2021-04-27T19:36:58Z", "commit_message": "formatter: don't output internal NULL bytes\n\nThe formatter code uses buffer_fmt_add(), which prints NULL terminated\nstrings, and advances the buffer past the NULL byte. This results in\nconsecutive NULL terminated strings, instead of one continuous string.\nInstead, the formatter functions should write a NULL terminated string,\nbut only advance the buffer to the NULL bytes, so future writes to the\nbuffer will overwrite the NULL byte, growing the existing string,\ninstead of creating a new one. The new function, print_null_byte(), will\nprint a NULL byte and move the buffer past it.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "090a5b2a3b5442fe854e4c8f54d823e47eef2891", "commit_date": "2021-04-27T19:36:58Z", "commit_message": "resource: ubridge: always set return value in _export_kv_store", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cea1d744ef306439b7433e25951fdeb053d47ba5", "commit_date": "2021-04-27T19:36:58Z", "commit_message": "resource: ubridge: use memfd backed buffer in _export_kv_store\n\nInstead of using a regular memfd to write the exported kv data, use a\nBUFFER_BACKEND_MALLOC BUFFER_MODE_PLAIN linear buffer. Then pass the\nbacking memfd as previously.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "66a4ce973095d1d8c28e02e25c9d6bcf47895a94", "commit_date": "2021-04-27T19:36:58Z", "commit_message": "resource: ubridge: mmap correct size to sync kv_store\n\nWhen mmaping the memfd that holds the exported kv_store information, SID\nwas only mmaping the size of the kv_store data, without including the\nthis size_t which stored the overall size.  However the mmap started at\nthe beginning of the file (as it needs to, since the mmap offset must be\nin increments of the page size). This means that SID was requesting too\nlittle memory in the mmap. Fortunately, mmap returns memory in page\nsized chunks, so unless the the kv_store data took up exactly a page,\nmmap would return enough extra to allow all the exported kv_store data\nto be accessed. But there's no reason why the kv_store data size can't\nend up being a multiple of the page size, so SID needs to request the\ncorrect size.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9b6733eb2a07acdd3011bcac35ca5228efaa58f6", "commit_date": "2021-04-27T19:36:58Z", "commit_message": "iface: make more sidctl commands root only", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "65e3baf8721bcd14188ca54a2203aeed084e74ad", "commit_date": "2021-04-07T13:27:14Z", "commit_message": "rpm: spec: fix multilib by using multilib_fix_c_header helper macro to deal with config.h\n\nconfig.h has architecture specific parts and so it ends up with a bit\ndifferent content on different architectures. When installing the file\nfor multilib, this leads to a file conflict.\n\nUse multilib_fix_c_header helper macro from multilib-rpm-config package\nto fix this.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "199c26d5c791e0e1269d6012fc61eb290e740a01", "commit_date": "2021-04-06T13:48:59Z", "commit_message": "resource: ubridge: put domain before namespace specifier for KV keys\n\nThe \"domain\" in a key is more coarse and generic specifier than\n\"namespace:namespace_part\", hence use that before the namespace.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}]}