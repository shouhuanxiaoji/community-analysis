{"amdgpu-codegen": [{"commit_oid": "fd0dc49bf1c00608c96dd9e68796f639d546d8d1", "commit_date": "2023-03-15T20:25:35Z", "commit_message": "Fix issue with amdgpu s_nop codegen\n\nPrevious SOPP use a wrong encoding.\nRemove unecessary parameter to gen_s_nop.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f2531a172e5c0c4362000aab959dd1c92ba8e6a", "commit_date": "2023-03-15T20:25:35Z", "commit_message": "add support for sopp smem instructions", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cf0bcd7f3e96bfb7bd7605b4fb6c97cafec89d82", "commit_date": "2023-03-15T20:25:35Z", "commit_message": "add support for v_add instruction codegen", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ebddd8582faaf9e24cc11a452b4f89dbd46bf601", "commit_date": "2023-03-15T20:25:35Z", "commit_message": "initial support for assembly-level codegen for amdgpu", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "01e6c1f3dc093c531cf2aab58f537654c2e5e703", "commit_date": "2023-03-15T20:25:35Z", "commit_message": "files updated based on new xml isa-drop", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "665772342c4a6b25245d3c419d3eab7201c3b561", "commit_date": "2023-03-15T20:25:35Z", "commit_message": "fix logic for decoding src_literal, so it correctly consume the next 32 bit as data instead of decoding them as instruction", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f62c3e99a5001779261da5f93f70996e6e3c0096", "commit_date": "2023-03-15T20:25:35Z", "commit_message": "fix the logic for operands addr and saddr for flat instruction encoding family based on the manual", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f386645434488c487b2fac9ea6ed4f920d7f5bb1", "commit_date": "2023-03-15T20:25:35Z", "commit_message": "remove duplicate branch target operand", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dea6a58fdebc4d17666efa39c595c10fff8f7dfd", "commit_date": "2023-03-15T20:25:35Z", "commit_message": "fix formatting regarding implicit operands", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8c1cd08a45ffaedf795e0d522ab089680ffbbc94", "commit_date": "2023-03-15T20:25:10Z", "commit_message": "Add formatting for consecutive registers", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "139eec81f0f88b2eae88630d8f14c0b8d9a22960", "commit_date": "2023-03-15T20:23:22Z", "commit_message": "Add definition for waitcnt counters", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5a01da4f049f2860faf976b07f7349dbc4ede602", "commit_date": "2023-03-15T20:21:57Z", "commit_message": "Add support for decoding smem_offset operand type\n\nAdd support for decoding smem_offset type,\nwhich is still lacking from the ISA spec", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ca6ae0a1d0659618245e900b35c5f8e9a9c6fd4b", "commit_date": "2023-03-15T20:21:24Z", "commit_message": "compress finalizeOperands.C by combining cases with same decoding logic", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1dc3c11036472ec5e9b91d4f7f8d39c40d5a6f2c", "commit_date": "2023-03-15T20:21:24Z", "commit_message": "revert changes related to adding debug interface", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1c09be1b4448fd84a853b5eee69c5b58150d563b", "commit_date": "2023-03-15T20:21:24Z", "commit_message": "fix decoding of operand for v_div_scale based on 220804 isa drop", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0ea4c9daed8802161ab6c766a20a0c7a5c535478", "commit_date": "2023-03-15T20:21:24Z", "commit_message": "updated based on new xml-isa drop", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "62f11fa283707b6840acb08fdc52b0c34f696253", "commit_date": "2023-03-15T20:21:24Z", "commit_message": "fix compiler warnings for unused parameter and unused variable for gfx908", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bbfdeabe7fd42272a0016c2b4993c74381dfc633", "commit_date": "2023-03-15T20:21:02Z", "commit_message": "Added support for gfx908 based on the XML-ISA-DROP for MI100\n\nFixed a bug in the instruction decoder that returns incorrect\nvalue on the last instruction.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ebf545849ef979aaa21bf82e8caff104cbeb6f6", "commit_date": "2023-03-15T13:47:22Z", "commit_message": "Github CI: update dev container deployment (#1400)\n\n* Log in to GHCR before building\r\n* Pull base image for cache", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab965c214b030a302aa0307b121cb9d06ab0a989", "commit_date": "2023-03-15T12:39:13Z", "commit_message": "Github CI: add line continuation in dev-containers.yaml (#1399)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f5558a15b16272eef982b5e8ddfdf172eb59036", "commit_date": "2023-03-15T12:23:31Z", "commit_message": "Add PR testing Github CI (#1393)\n\nRun on pull request to master:\r\n\r\n    Enforce formatting of CMake files, if modified\r\n    Check for changes in minimum required versions of dependencies\r\n    Ensure Dyninst, test suite, examples, and external tests all build with gcc on Ubuntu-20.04\r\n\r\nRun on push to master:\r\n\r\n    Build and deploy new dev container, ghcr.io/dyninst/amd64/<OS>:latest", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e7aa66ddef6768957faae3c62c9909590663901", "commit_date": "2023-03-09T20:15:45Z", "commit_message": "Replace 'cerr' with 'dwarf_print' in DwarfWalker::decodeLocationList (#1395)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1157c87c0b184d83e851bdd5b63582dd2a7647cf", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy with user dtor (#1394)\n\n- Make classes move-only by removing public copy constructor and\n  operator= as they contained pointer members that were just copied\n  (with no semantics of copying the data). This is a double delete\n  waiting to happen.  Luckily the pointer were always nullptr when the\n  copy constructor was called.\n\n- add move constructor (using std::move where appropriate)\n\n- clean up the classes to use default constructors and default member\n  initialization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1aeb249ff90fea49dc50efea1e6c11577bf9d90", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unneeded internal declaration (#1394)\n\n- clang warns of an unneeded internal declaration for yyinput. Since\n  yyinput is generated by flex, just suppress it for the whole file.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7cd7cdb0ba98de24b0d916b8e440db8adb0af6f9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (derived) (#1394)\n\n- Derived type classes have an operator==(const Type&) const, and they\n  call this operator with with both the lhs and rhs being the derived\n  class type.  This is ambiguous when using C++ 20's rule that considers\n  the parameters reversed.  Fix by adding an inlined non-virtual\n  operator== that takes the derived types a parameter and then\n  unambiguously calls the existing ==", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12a4fd86738c048dd82c20c31359cf7a48c082eb", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  stack frame larger than (#1394)\n\n- increase stack frame size warning limit when using the clang compiler\n  for a couple of files that needed a similar increase for gcc", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b78e883c77aefc27d1a30722b414266aa33897d1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  logical op (#1394)\n\n- add suppressions for identical clauses of a logical operator\n  even if they are only identical after evaluating constant\n  expressions that are not identical as gcc 8 and prior warn\n  about this\n\n- Suppression for these are already in place for warnings in adjacent\n  if statements, so extend the suppression to cover these also", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9dbc1e30e30ef263b174d1d2b5ca648e8ef6bf0d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  C function decls without prototype (#1394)\n\n- C functions declared as func() are a declaration without a prototype\n  (from the original K&R C), not a function that takes no parameters\n  (until C23), change all of these to func(void) which is how to\n  declare such a function in C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a2e3fd795f8ec6cb730038ec277431b0832c03c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  set but unused variables (#1394)\n\n- delete variables whose only use is to increment themselves", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6e380f7158326fc686f1b3f7ec7a01b3ac4bfe2", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (#1394)\n\nC++ 20 considers the reversed parameter of a comparison operators in\naddition to the given parameter order.  This implies that if the\nargument is const then the member function must also be const.\n\n- change    bool operator==(const T&)\n      to    bool operator==(const T&) const", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57fe4c395dff4fd11f18d2f00eb58ad25212501", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::random_shuffle is deprecated (#1394)\n\n- replace std::random_shuffle with std::shuffle", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "706fd0e3c532a3d7cfc1d752620ebed2fac65c5d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing noexcept (#1394)\n\n- declare functions noexcept", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "55d8a338e362d3aa4448aa9bae776eb90ca1292a", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1394)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b977e8d7132b312c853652a1e7e6f28eb39dbab0", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unused private field (#1394)\n\n- removed myid member from dyn_thread as it is never used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0eb0b29def9cc2d18e0fe724e536c73e7e9ef964", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy/op= with user provided dtor (#1394)\n\n- Explicitly define the implicit operator or remove the explicit\n  destructor; in C++ 20, if a destructor is explicitly defined then\n  the other constructor, assignment and move operators will not be\n  automatically generated", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9be477535debee15c2403bdc2ddedb31fdf0eb8e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  remove unused variables/members (#1394)\n\n- remove variables that were never used\n\n- remove code that only updated unused variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "344783a7954de9af7f98a5d3f0ec7c505b7536a1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (variables) (#1394)\n\n- rename variables that shadow names in containing scopes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73064a866ee1d19d8e12e2562f60b9b7f8e05406", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (enumerator names) (#1394)\n\nenumerator names shadow names in other scopes\n\n- made 3 internal enum types scoped enums:  StackAccessType,\n  operandType and patch_type_t\n\n- delete one internal and unused enum type:  frameType_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4bf4a24c514d0c395fdd27d6fe68ddf0fef89040", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "replace C-style and functional casts (#1394)\n\n- replace C-style casts ((T)e) and functional casts (T(e)) with modern\n  casts that have a clearer intent and are safer:  static_cast<T>(e),\n  and T{e}.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8d0e2760b307c7d465b56cac639c2e4a2cc93ca8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "write_memory_as to append_memory_as as appropriate (#1394)\n\n- where write_memory also updates the pointer, change then to\n  append_memory_as(...)\n\n- change '*insn++ = <value>' to append_memory_as_byte(...) to\n  be consistent with append_memory_as(...)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c21bd122187e87b74d45a5ba3ec3e3824750f9c3", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (C casts) (#1394)\n\n- fixed increased alignment warnings in C code.  The macro\n  CAST_WITHOUT_ALIGNMENT_WARNING eliminates the warning and allows for\n  future auditing.  For the code as currently written, these are all\n  aligned properly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0eeb1ee0407780ee07f603910d398f836dc2f7", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (pointers) (#1394)\n\n- fix alignment warnings of pointers by using alignas_cast<> defined in\n  common/h/raw_memory_access.h to eliminate the increase alignment\n  warning.  For the code as currently written, these are all aligned\n  properly, but these are inherently unsafe and require manual\n  inspection of the pointers involved.  An assert in alignas_cast can be\n  uncommented to validate proper alignment at runtime.\n\n- explicitly force larger alignment of one variable to eliminate warning", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "285ac938848739e02e38c044cf354dcb9d99f0b9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (#1394)\n\n- Casts of pointers to a type that has a larger alignment requirement\n  will cause an exceptions on some architectures on dereference if the\n  pointer does not meet its alignment requirements.\n\n- Add new template functions read_memory_as and write_memory_as that\n  read and write the bytes of (possibly) unaligned memory of the desired\n  data at the supplied address using the length of the template type in\n  a way that is safe even if the supplied pointer is not properly\n  aligned.\n\n- Add functions append_memory_as; like write_memory_as but updates the\n  pointer value to memory location after the bytes written.\n\n- Add template function alignas_cast to cast a pointer to another\n  pointer without producing an increased alignment warning; requires\n  manual auditing to pointer is properly aligned", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4aff07d1eba822b880558c030c7f5aec94b2ae9c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  pessimizing move (#1394)\n\n- remove unnecessary std::move's", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b88b16dba9477f18fe598fad5552758204a1558e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing override (#1394)\n\n- add override to all overridden virtual methods of a class if present\n  on any method", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84fe176ef5ab61376911570de6b506473a3c8d35", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  tautological always true comparison (#1394)\n\n- value of type unsigned char compared to 256 produces a warning as 256\n  is outside the range of the uint8_t.  256 is the number of array\n  elements (computed using sizeof's).  Changed from (n < numElems) to (n\n  <= numElems - 1) which is also always true, but the error is\n  eliminated due to 255 being within range of a uint8_t.  Ugly but makes\n  the warning disappear.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6b41075d61009b539107836591cb47b8cb3e3c8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  mismatched class/struct (#1394)\n\n- use consistent 'struct' and 'class' keyword between forward\n  declaration and definition; a mismatch is legal be breaks on\n  some versions of MS C++", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9e83871f0380068dba79648c6acee503cac5d76", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  [[fallthrough]] requires C++ 17 (#1394)\n\n- clang's __has_cpp_attribute(fallthrough) feature test macro returns\n  true, but produces warnings if used.  [[clang::fallthough]] works, so\n  force it if the language version is pre-17 with clang compiler.\n\n- fix typo in __cplusplus macro name\n\n- improve robustness: try all alternative fallthrough attributes names", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "067be96bb64a3d4191f12db1694b0fcfec51d457", "commit_date": "2023-03-02T18:41:27Z", "commit_message": "Restore PPC special-purpose registers in opposite order of saving them (#1392)\n\n* Restore PPC special-purpose registers in opposite order of saving them\r\n\r\nThis is the same fix as https://github.com/dyninst/dyninst/pull/1000,\r\nbut for PowerPC.\r\n\r\n* Reverse order of FPSCR restore", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae43ebc6f905345499ed9c55eccb007e9a69efa9", "commit_date": "2023-03-01T23:57:55Z", "commit_message": "Aarch64: Fix restoring special purpose registers order (#1000)\n\nThe special purpose registers are pushed onto the stack by\r\nEmitterAARCH64SaveRegs::saveSPRegisters. This patch reverses the order\r\nused for popping the stored registers from the stack. Without\r\nthis patch, some of the state registers get swapped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46ea3009e1e0e27bd035ac3152dc772bf861f3fd", "commit_date": "2023-03-01T19:33:16Z", "commit_message": "Avoid possible copy in BPatch::createEnum (#1390)\n\nThe Type class doesn't have a user-defined copy constructor and its\r\nimplicit declaration is deprecated in C++20. Rearranging the construction\r\nhere removes the possibility of copying.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f89cc72416fdc1d467b130f48609b8fc93126d37", "commit_date": "2023-02-28T23:54:58Z", "commit_message": "Merge pull request #1389 from dyninst/wuxx1279/gfx908/clang-error\n\nFix ambiguous override of InstructionDecoder_amdgpu_*::makeRegisterExpression", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "557a01949a4c11e8e8975fe113e4ab07b64bf25d", "commit_date": "2023-02-27T21:25:44Z", "commit_message": "add InstructionDecoderImpl::makeRegisterExpression to derived classes\n\nEliminate virtual-overloaded warning as there are 3 overloaded methods of\nInstructionDecoderImpl::makeRegisterExpression, but only 2 are defined in\nthese classes for add a using so the 3rd is not hidden.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42c3a4b497071e421686ded49ad0da406c8053ac", "commit_date": "2023-02-27T20:06:40Z", "commit_message": "Fix virtual derived signature to match base class\n\nmakeRegisterExpression in the derived class had\nan incorrect function signature, which made\ncompilation fails on gcc-6 and clang.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d15c0f714397a1316c74fc8d2c24a62a772ecc3", "commit_date": "2023-02-27T18:39:18Z", "commit_message": "Update DwarfWalker subrange handling (#1369)\n\n* Remove redundant include of libdw.h\r\n\r\n* Add subrange parsing to dynDwarf\r\n\r\n* Remove decipherBound\r\n\r\nThis implementation was neither correct nor complete. Moreover, we\r\nshouldn't be parsing FORM types. Looking for DW_TAG* is sufficient.\r\n\r\n* Remove legacy comments and commented-out code from parseArray\r\n\r\n* Improve error message in parseArray\r\n\r\n* Rename parseSubrangeAUX to parseSubrange and change interface\r\n\r\n* Replace bound calculations in parseSubrange\r\n\r\n* Update some comments and whitespace\r\n\r\n* Update construction of the result type\r\n\r\nThe LONG_MIN/MAX aren't great, but they are propagated to preserve\r\nbehavior.\r\n\r\n* Update debugging messages in parseSubrange\r\n\r\n* Have parseSubrange() call parseSubrange(Dwarf_Die*)\r\n\r\n* Use updated parseSubrange in parseMultidimensionalArray\r\n\r\n* Use std::tostring instead of snprintf\r\n\r\n* Update comments and remove dead code\r\n\r\n* Whitespace\r\n\r\n* parseMDA returns a typeArray instead of just a Type\r\n\r\n* Fix bug in dwarf_result::operator bool\r\n\r\n* Fix hi/low bound mixup in parseMDA\r\n\r\n* Try using Dyninst's parsed CU language, if needed\r\n\r\n* Display subrange DIE ID in pareSubrange\r\n\r\n* Don't create subrange type in parseSubrange\r\n\r\nThis will happen in the callee\r\n\r\n* Update parseSubrange() to use new parseSubrange(Dwarf_DIE*)\r\n\r\n* More carefully parse the child DIE\r\n\r\n* Iteratively parse the subranges in parseArray\r\n\r\n* Whitespace\r\n\r\n* Remove parseMultiDimensionalArray\r\n\r\n* Improve debug messages\r\n\r\n* Register each subrange type in parseArray\r\n\r\n* Remove common/h/dyninstversion.h\r\n\r\nThis was accidentally included.\r\n\r\n* Add copyright notices to new files\r\n\r\n* Make dwarf_result also hold a Dwarf_Word\r\n\r\nC++ doesn't guarantee it is convertible to `long`.\r\n\r\n* Only offer an interface to parse both bounds simultaneously\r\n\r\nThe calculation for a range's upper bound when DW_AT_count is used\r\nrequires knowing the lower bound (if given), so these needed to be\r\nmerged.\r\n\r\n* Use new dwarf_subrange interface in DwarfWalker::parseSubrange", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bfa6e82c2a9ef98801432324ffb3cec2a6254c5", "commit_date": "2023-02-27T14:13:39Z", "commit_message": "use default allocator for tbb::concurrent_hash_map (#1332)\n\n- gcc 12 warns about mismatched new and delete when an allocator is specified\r\n  This is likely a false positive.  Change to use the default, which uses ends\r\n  up using the same std C++ new allocator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "198b54f56cbcdb82f058d007545bdf9f36c5dce5", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "fix infinite recursion in LineInformation::addLine (#1331)\n\n- gcc 12 reported an infinite recursion for LineInformation::addLine\n  that takes the lineSource file\n- fixed by computing the string table index of lineSource and then\n  calling the addLine method that takes the index value\n- also update the lineSource type from string to const string&\n- updated documenation that had the method signature taking a const char*", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6436c734eef50d55ed6c562aa3fabf0c7039c50c", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "eliminate deprecated C++ function objects (#1331)\n\nfix function objects that were deprecate in C++ 11 and removed in C++ 17\n\n- replace mem_fun with mem_fn\n- eliminate binary_function and unary_function base classes\n- use const iterator when constructing boost::transform_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f049fe855640832950f5a6cd87db23ecb4b7533b", "commit_date": "2023-02-24T22:27:17Z", "commit_message": "Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04 (#1362)\n\n* Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04\r\n\r\n- the main issue was `/sbin/ldconfig -p` on Ubuntu 22.04 has an extra line at the end: \"Cache generated by: ldconfig (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35\"\r\n  - this would result in an occasionaly segfault\r\n- refactored the rest to avoid strtok which is known to have a fair amount of problems\r\n\r\n* fix header includes and message about delimit issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31b4d7f19f4e6585518eee179a63812f88911e6f", "commit_date": "2023-02-24T19:36:42Z", "commit_message": "Make SymtabCodeSource constructor const correct (#1293)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc38257de4d5143d097229aef7284b8e1ce6fbf5", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "SymtabAPI::Type: add support for C++ r-value references (#1159)\n\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c677008d0fa8f4ccb6d191d37493060e15d05f22", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "Improve DWARF enum parsing in Symtab::Type (#1164)\n\n* Inherit from derivedType\r\n* Add parsing of underlying type\r\n* Improve enum parsing debug information\r\n* Add support for C++ scoped enums (i.e., 'enum class')\r\n* Remove typeEnum::setName\r\n    This has no definition.\r\n* Inline default constructor\r\n* Clean up BPatch::createEnum\r\n\r\nThis removes the unnecessary construction of a separate (thread-safe!)\r\ncontainer of pairs and the associated memory leaks. It also explicitly\r\nmakes the enum's underlying type a four-byte signed int. Redundant code\r\nfrom the overload which computes the enum values was replaced by using\r\nstd::iota and calling the three-argument createEnum.\r\n\r\n* Remove factory functions\r\n\r\nAdding overloads for these would add more clutter than utility. We\r\nshould remove these from all of the types as the constructors should\r\nalways be used to ensure class invariants.\r\n\r\n* Remove non-portable constructors\r\n\r\nSince we're breaking ABI here, these constructors need to go. Manually\r\nsetting the size to `sizeof(int)` is non-portable as the\r\nBPatch::createEnum may be used to modify a binary that doesn't have the\r\nsame `int` representation as the host on which Dyninst was compiled.\r\n\r\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3046332ba3d32eccb63f8dd6ecc65afca3b2c63f", "commit_date": "2023-02-23T22:24:02Z", "commit_message": "Update global ELF ctor/dtor instrumentation for static executables (#1355)\n\nIf __libc_csu_init doesn't exist, try to insert the constructor call into the beginning of 'main'. If __libc_csu_fini doesn't exist, try to insert the constructor call into the beginning of 'exit'.\r\n\r\n* Use C-style strings for symbol names\r\n\r\nThere's no need to have a std::string object that incurs the overhead of a constructor/destructor call to just hold a literal that's only visible in the current translation unit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "barrier_counting": [{"commit_oid": "22ac5f42d8246d7aea2d8641f0dbe87006bb8952", "commit_date": "2023-03-01T15:30:12Z", "commit_message": "Merge branch 'master' onto barrier_counting\n\nFix conflicts with master", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f89cc72416fdc1d467b130f48609b8fc93126d37", "commit_date": "2023-02-28T23:54:58Z", "commit_message": "Merge pull request #1389 from dyninst/wuxx1279/gfx908/clang-error\n\nFix ambiguous override of InstructionDecoder_amdgpu_*::makeRegisterExpression", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "557a01949a4c11e8e8975fe113e4ab07b64bf25d", "commit_date": "2023-02-27T21:25:44Z", "commit_message": "add InstructionDecoderImpl::makeRegisterExpression to derived classes\n\nEliminate virtual-overloaded warning as there are 3 overloaded methods of\nInstructionDecoderImpl::makeRegisterExpression, but only 2 are defined in\nthese classes for add a using so the 3rd is not hidden.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42c3a4b497071e421686ded49ad0da406c8053ac", "commit_date": "2023-02-27T20:06:40Z", "commit_message": "Fix virtual derived signature to match base class\n\nmakeRegisterExpression in the derived class had\nan incorrect function signature, which made\ncompilation fails on gcc-6 and clang.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d15c0f714397a1316c74fc8d2c24a62a772ecc3", "commit_date": "2023-02-27T18:39:18Z", "commit_message": "Update DwarfWalker subrange handling (#1369)\n\n* Remove redundant include of libdw.h\r\n\r\n* Add subrange parsing to dynDwarf\r\n\r\n* Remove decipherBound\r\n\r\nThis implementation was neither correct nor complete. Moreover, we\r\nshouldn't be parsing FORM types. Looking for DW_TAG* is sufficient.\r\n\r\n* Remove legacy comments and commented-out code from parseArray\r\n\r\n* Improve error message in parseArray\r\n\r\n* Rename parseSubrangeAUX to parseSubrange and change interface\r\n\r\n* Replace bound calculations in parseSubrange\r\n\r\n* Update some comments and whitespace\r\n\r\n* Update construction of the result type\r\n\r\nThe LONG_MIN/MAX aren't great, but they are propagated to preserve\r\nbehavior.\r\n\r\n* Update debugging messages in parseSubrange\r\n\r\n* Have parseSubrange() call parseSubrange(Dwarf_Die*)\r\n\r\n* Use updated parseSubrange in parseMultidimensionalArray\r\n\r\n* Use std::tostring instead of snprintf\r\n\r\n* Update comments and remove dead code\r\n\r\n* Whitespace\r\n\r\n* parseMDA returns a typeArray instead of just a Type\r\n\r\n* Fix bug in dwarf_result::operator bool\r\n\r\n* Fix hi/low bound mixup in parseMDA\r\n\r\n* Try using Dyninst's parsed CU language, if needed\r\n\r\n* Display subrange DIE ID in pareSubrange\r\n\r\n* Don't create subrange type in parseSubrange\r\n\r\nThis will happen in the callee\r\n\r\n* Update parseSubrange() to use new parseSubrange(Dwarf_DIE*)\r\n\r\n* More carefully parse the child DIE\r\n\r\n* Iteratively parse the subranges in parseArray\r\n\r\n* Whitespace\r\n\r\n* Remove parseMultiDimensionalArray\r\n\r\n* Improve debug messages\r\n\r\n* Register each subrange type in parseArray\r\n\r\n* Remove common/h/dyninstversion.h\r\n\r\nThis was accidentally included.\r\n\r\n* Add copyright notices to new files\r\n\r\n* Make dwarf_result also hold a Dwarf_Word\r\n\r\nC++ doesn't guarantee it is convertible to `long`.\r\n\r\n* Only offer an interface to parse both bounds simultaneously\r\n\r\nThe calculation for a range's upper bound when DW_AT_count is used\r\nrequires knowing the lower bound (if given), so these needed to be\r\nmerged.\r\n\r\n* Use new dwarf_subrange interface in DwarfWalker::parseSubrange", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bfa6e82c2a9ef98801432324ffb3cec2a6254c5", "commit_date": "2023-02-27T14:13:39Z", "commit_message": "use default allocator for tbb::concurrent_hash_map (#1332)\n\n- gcc 12 warns about mismatched new and delete when an allocator is specified\r\n  This is likely a false positive.  Change to use the default, which uses ends\r\n  up using the same std C++ new allocator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "198b54f56cbcdb82f058d007545bdf9f36c5dce5", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "fix infinite recursion in LineInformation::addLine (#1331)\n\n- gcc 12 reported an infinite recursion for LineInformation::addLine\n  that takes the lineSource file\n- fixed by computing the string table index of lineSource and then\n  calling the addLine method that takes the index value\n- also update the lineSource type from string to const string&\n- updated documenation that had the method signature taking a const char*", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6436c734eef50d55ed6c562aa3fabf0c7039c50c", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "eliminate deprecated C++ function objects (#1331)\n\nfix function objects that were deprecate in C++ 11 and removed in C++ 17\n\n- replace mem_fun with mem_fn\n- eliminate binary_function and unary_function base classes\n- use const iterator when constructing boost::transform_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f049fe855640832950f5a6cd87db23ecb4b7533b", "commit_date": "2023-02-24T22:27:17Z", "commit_message": "Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04 (#1362)\n\n* Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04\r\n\r\n- the main issue was `/sbin/ldconfig -p` on Ubuntu 22.04 has an extra line at the end: \"Cache generated by: ldconfig (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35\"\r\n  - this would result in an occasionaly segfault\r\n- refactored the rest to avoid strtok which is known to have a fair amount of problems\r\n\r\n* fix header includes and message about delimit issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31b4d7f19f4e6585518eee179a63812f88911e6f", "commit_date": "2023-02-24T19:36:42Z", "commit_message": "Make SymtabCodeSource constructor const correct (#1293)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc38257de4d5143d097229aef7284b8e1ce6fbf5", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "SymtabAPI::Type: add support for C++ r-value references (#1159)\n\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c677008d0fa8f4ccb6d191d37493060e15d05f22", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "Improve DWARF enum parsing in Symtab::Type (#1164)\n\n* Inherit from derivedType\r\n* Add parsing of underlying type\r\n* Improve enum parsing debug information\r\n* Add support for C++ scoped enums (i.e., 'enum class')\r\n* Remove typeEnum::setName\r\n    This has no definition.\r\n* Inline default constructor\r\n* Clean up BPatch::createEnum\r\n\r\nThis removes the unnecessary construction of a separate (thread-safe!)\r\ncontainer of pairs and the associated memory leaks. It also explicitly\r\nmakes the enum's underlying type a four-byte signed int. Redundant code\r\nfrom the overload which computes the enum values was replaced by using\r\nstd::iota and calling the three-argument createEnum.\r\n\r\n* Remove factory functions\r\n\r\nAdding overloads for these would add more clutter than utility. We\r\nshould remove these from all of the types as the constructors should\r\nalways be used to ensure class invariants.\r\n\r\n* Remove non-portable constructors\r\n\r\nSince we're breaking ABI here, these constructors need to go. Manually\r\nsetting the size to `sizeof(int)` is non-portable as the\r\nBPatch::createEnum may be used to modify a binary that doesn't have the\r\nsame `int` representation as the host on which Dyninst was compiled.\r\n\r\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3046332ba3d32eccb63f8dd6ecc65afca3b2c63f", "commit_date": "2023-02-23T22:24:02Z", "commit_message": "Update global ELF ctor/dtor instrumentation for static executables (#1355)\n\nIf __libc_csu_init doesn't exist, try to insert the constructor call into the beginning of 'main'. If __libc_csu_fini doesn't exist, try to insert the constructor call into the beginning of 'exit'.\r\n\r\n* Use C-style strings for symbol names\r\n\r\nThere's no need to have a std::string object that incurs the overhead of a constructor/destructor call to just hold a literal that's only visible in the current translation unit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "bbiiggppiigg/add_logical_not": [{"commit_oid": "2d3f2145393308e532bdfbe66fdcf1598c26278f", "commit_date": "2023-09-11T13:41:32Z", "commit_message": "Add logicalNot operation to Rose for correctness\n\nPreviously rose use invertOp for logical Not.\nAs the Dyninst interpretation of Rose didn't limit\nthe size of the input to single bit, inverting a non-zero\nvalue can still result in an non-zero value, causing\nincorrect result to be populated.\n\nThis PR adds a separate logicalNotOp that\nreturns 0 given non-zero value\nreturns 1 given 0", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "822c1c0366531fe722c2403aaf2fef29601d99d7", "commit_date": "2023-09-11T13:40:40Z", "commit_message": "Fix Implementation for RoseOperation::extractOp (#1511)\n\nFix implementation in dataflowAPI to have end_bit exclusive.\r\nFix implementation in parseAPI to be based on begin_bit and end_bit instead of based on size only.\r\nFix #1510.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "782ec44877e8cb5a231e0a8f1e9801df89c27802", "commit_date": "2023-09-08T20:45:57Z", "commit_message": "Don't create a name for artificial DIEs with a DW_AT_name (#1520)\n\nFor C++ member functions, compilers will sometimes add a DW_AT_name\r\ncalled 'this', and we don't want to mangle that.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57886efea6d6f16adc01d41198d011cd95aed86", "commit_date": "2023-09-08T20:45:06Z", "commit_message": "Github CI: use correct directory when running external-tests on PR (#1521)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2d2f4c23298586211a58bff90423231d524fb22", "commit_date": "2023-09-08T15:46:49Z", "commit_message": "Remove DwarfWalker::version member variable (#1516)\n\nIt was added by 49df4377c in 2012, but never used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a0a0a2b245aa115b6bf8e8712e40f512afb5bae", "commit_date": "2023-09-08T15:46:32Z", "commit_message": "Parse all DWARF source files in DwarfWalker::buildSrcFiles (#1515)\n\nFrom 2.6.4.16 of the DWARF5 standard\r\n\r\n\tPrior to DWARF Version 5, the current compilation file name was not\r\n\trepresented in the file_names field. In DWARF Version 5, the current\r\n\tcompilation file name is explicitly present and has index 0. This is\r\n\tneeded to support the common practice of stripping all but the line\r\n\tnumber sections (.debug_line and .debug_line_str) from an executable.\r\n\r\nHowever, libdw takes care of this in dwarf_getsrcfiles.\r\n\r\nFixes a major bug where we produce no function parameter information\r\nwhen there is only one CU in a binary because\r\nDwarfWalker::parseFormalParam requires line information.\r\n\r\nFixes #1156", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e4e6fbc7fdfe7faaa9f0a6ceb42b5d9adc996bf5", "commit_date": "2023-09-08T15:45:27Z", "commit_message": "Refactor dwarf/dwarf_names.h (#1514)\n\n* Rename is_fullcu -> is_full_unit\r\n\r\n* Rename is_partialcu -> is_partial_unit\r\n\r\n* Rename is_typecu -> is_type_unit\r\n\r\n* Refactor is_cudie to make unit concepts clearer\r\n\r\n* Add is_imported_unit for completeness\r\n\r\nNot currently used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bec7e21a5008adc1c0445775602ce740943e9b55", "commit_date": "2023-09-07T19:57:09Z", "commit_message": "Github CI: execute external tests on PR (#1512)\n\n* Github CI: execute external tests on PR", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "52acf2734d3da3106edb3f3866778a26eda32819", "commit_date": "2023-09-07T19:55:06Z", "commit_message": "Github CI: terminate PR pipeline at first failure (#1513)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9fddc4282879da75ffc456d91d8e70c9d06b091e", "commit_date": "2023-09-07T18:04:19Z", "commit_message": "Unify naming of Modules (#1500)\n\n* Unify naming of Modules\r\n\r\nThere are currently several different techniques being used\r\ninconsistently to name Modules. This unifies all of these techniques\r\nand applies them consistently.\r\n\r\nNaming type units:\r\n\r\nIt's not clear from the DWARF std at this time if dwarf_formstring\r\nwill actually return the signature/MD5 hash for a type unit. Whatever\r\nthe old code has done is likely broken, so we don't want to propagate\r\nthat here. Likely, the DW_FORM_ref_sig8 parsing isn't being done\r\ncorrectly overall, and will need to be fixed in the future.\r\n\r\nAnonymous DIEs:\r\n\r\nMany DIEs don't have names (e.g., type decorator definitions like\r\nDW_TAG_pointer_type), but DwarfWalker has explicit checks for these\r\ncases (DwarfWalker::nameDefined).\r\n\r\n* Remove DEFAULT_MODULE\r\n\r\nBecause every Module now has a unique name, it's no longer possible to\r\nexecute this code path. The 'pmodule' class uses the name from the Module\r\nclass (see the pmodule constructor).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "80f84e4f2e27d91929f48290740899c3edb3b77b", "commit_date": "2023-09-06T21:07:14Z", "commit_message": "Remove ret_lock from SymtabAPI::FunctionBase (#1504)\n\nThis was used to guard calling setReturnType. That function is only\r\never called from DwarfWalker::setFuncReturnType which is itself\r\nguarded by `ParsedFuncs::accessor` in DwarfWalker::parseSubprogram,\r\nrendering this mutex unnecessary.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "212ccd3b4e12f52cb6a743f1fbeff9fccfe7d0bc", "commit_date": "2023-09-06T20:06:15Z", "commit_message": "Remove hasSpecification param from DwarfWalker::getReturnType (#1507)\n\nSince 5ed068167 in 2017, only literal 'false' has ever been used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6eec4844b82ed2176c455359efb29c5ca04a3e87", "commit_date": "2023-09-06T03:57:50Z", "commit_message": "Use full filenames when handling Modules (#1501)\n\nA module's name is either a unique string or the pathname of the file\r\nused to create the corresponding DWARF compilation unit. In the latter\r\ncase, the 'name' is only the basename of the path which is never\r\nguaranteed to be unique (e.g., /path1/foo.c /path2/foo.c would have the\r\nsame 'name').\r\n\r\n* Remove useless file creations\r\n\r\nThese don't correspond to any Module.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d7047e2d22ab5f7bb2a0b8b37434ed955ab97f29", "commit_date": "2023-09-06T03:19:28Z", "commit_message": "Fix inverted logic  in DwarfDyninst::is_cudie (#1505)\n\nIf a DIE is a CU, then it contains a reference to its Dwarf_CU.\r\n\r\nIntroduced by 71f2e14d3 (PR1499).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7acb76787c647a434301579e4e9baa3a59884eb4", "commit_date": "2023-09-06T03:15:54Z", "commit_message": "Don't check for existing return type when parsing DWARF subprogram (#1509)\n\nSince 8b400af5, functions are guaranteed to only be parsed once, so the\r\nreturn type can never be set before the call here. Checking the return\r\ntype circularly invokes Symtab::parseTypesNow which deadlocks since\r\n7f1e24d.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "481ee344d36721c44aa456e31937836c90ee235d", "commit_date": "2023-09-06T02:50:47Z", "commit_message": "Remove FunctionBase::setReturnType(Type*) (#1503)\n\nThis is never called from within Dyninst and should never be called by\r\na user.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "463801216b933cdfdc4115b3d170eb4f64b513f1", "commit_date": "2023-09-05T23:18:45Z", "commit_message": "Workarounds to align decoder output with llvm-objdump (#1508)\n\n* Add info registers and fix some duplicate values\r\n\r\n* Add named immediate as an operand type\r\n\r\n* Add a method for updating mnemonic(required for adding extensions)\r\n\r\n* Implement Workarounds for Gfx908 and GFX90A\r\n\r\nThis commit is intended to fix the following problems\r\n\r\n1. Instructions that use SDWA have wrong length\r\n2. Instructions that use SDWA does not have the _SDWA suffixh\r\n3. MUBUF instructions decodes the VADDR field incorrectly\r\n4. MUBUF instructions missing information about offset\r\n5. DS instructions missing information about offset\r\n\r\n* redo whitespace and indentation changes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d04e892c8f3c9451ff4e77187416a391b5e4ecfa", "commit_date": "2023-09-05T20:45:20Z", "commit_message": "Add newline in log message in DwarfWalker::parseModule (#1506)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "63600787a5ff07d1fdc03835c3fcb99731e65a9a", "commit_date": "2023-09-05T18:08:33Z", "commit_message": "Fix responsibility inversion in Module::finalizeRanges (#1498)\n\nA Module shouldn't modify the Symtab object to which it belongs. It\r\nknows what ranges belong to it (see\r\nObject::fix_global_symbol_modules_static_dwarf), so it can munge them\r\ninto a collection of `ModRange`s.\r\n\r\nThe `ranges_finalized` member was never needed as the only place\r\nit was set was in `finalizeRanges` which is the only place where\r\n`ranges` was emptied.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "50c33bef8c039f696e4b9a60eee3578b9e140cd2", "commit_date": "2023-08-31T17:13:03Z", "commit_message": "Use uniform CU checks in DwarfWalker (#1499)\n\nThese should have been part of 71f2e14d3.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8779898ce685a69d97ce305096eaeb8a3557bd4", "commit_date": "2023-08-28T20:36:59Z", "commit_message": "Remove pd_dwarf_handler (#1496)\n\nIts usage was removed by 340799a in 2017.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71f2e14d3d3ad45c5e5bfdeae3c36222c4200e4f", "commit_date": "2023-08-28T19:18:54Z", "commit_message": "Refactor extracting CU tags from DWARF (#1495)\n\nThis centralizes the process and gives readable names to what's\r\nhappening.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7f1e24d526be740d9c200c5a2b26b0033709806d", "commit_date": "2023-08-28T18:50:01Z", "commit_message": "Make Symtab::parseTypesNow thread-safe (#1497)\n\nThere are many places where this is called without a user realizing it.\r\nIf they were to call any of those functions in parallel, type parsing\r\nwould break.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bf6e869f966112344d627d3044f5e76fcbbc9676", "commit_date": "2023-08-21T15:31:02Z", "commit_message": "Move inst2ast example to examples repo (#1492)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c2e31c0886b30f7b7b07b1e7ab840d3bb5521d1", "commit_date": "2023-08-21T15:30:15Z", "commit_message": "Remove parseAPI examples (#1494)\n\n* Remove parseAPI/doc/code_sample.cc\r\n\r\nThis exists in the dyninst/examples repository as 'disassemble'.\r\n\r\n* Remove parseAPI/doc/example.cc\r\n\r\nThis exists in the dynint/examples repository as 'CFGraph'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "692ff9f4b7e52f5689f880e01bfdd708a0dcdc14", "commit_date": "2023-08-18T21:47:43Z", "commit_message": "Remove patchAPI/test/findPoint (#1490)\n\nIt uses code that is no longer available and the functionality it\r\ncovers is already in the testsuite.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "82268024ac1a4c180b9da876010e5b3abfa5a2ac", "commit_date": "2023-08-18T21:47:25Z", "commit_message": "Remove patchAPI/example (#1491)\n\nIt is already in the examples repository under 'insertSnippet'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "369ec2d033d4554229d5e9228acdeb68791b1f85", "commit_date": "2023-08-18T17:30:14Z", "commit_message": "Remove AObject::symsToModules_ (#1488)\n\n* Remove AObject::findModuleForSym\r\n\r\nIts usage was removed by 4e4a375a4 in 2016.\r\n\r\n* Remove AObject::setModuleForOffset\r\n\r\nIts usage was removed by 0e5d83405 in 2016.\r\n\r\n* Remove use of AObject::symsToModules_ in Object-nt\r\n\r\nIt is only ever written to, and its usage was removed by 4e4a375a4\r\nin 2016.\r\n\r\n* Remove use of AObject::symsToModules_ in Object-elf\r\n\r\nIt is only ever written to, and its usage was removed by 4e4a375a4\r\nin 2016.\r\n\r\n* Remove unused parameters and variables\r\n\r\nThese are no longer needed.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7132622b1fc93f763437c7f6f1170916bfc983e9", "commit_date": "2023-08-18T15:27:49Z", "commit_message": "Remove Module::setName (#1485)\n\nThis is never called internally. The filename corresponding to the\r\nmodule is a class invariant. It makes no sense to make it mutable. This\r\nmember function is not documented.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a49e5e5a882f5035cc01ca9e2962f341748b34be", "commit_date": "2023-08-18T15:27:20Z", "commit_message": "Remove declaration of image::getModuleLanguageInfo (#1486)\n\nIt's definition was removed by 6c65e3c9a in 2007.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "366f9201032c51d2f15b1c4f5f96d541a21feb7f", "commit_date": "2023-08-18T15:26:59Z", "commit_message": "Remove declaration of Object::load_shared_object (#1487)\n\nIts definition was removed by 758aa226 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d40984a42345144c842bc7be469f9f9c9d314be5", "commit_date": "2023-08-18T15:26:15Z", "commit_message": "Remove unused Object::getFileName (#1489)\n\nIts usage was removed by 760bfda6e in 2019. It's also confusing because\r\nit could return either the object's SONAME or the Module's filename.\r\nThese two things are not the same.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "789b9468d8a9160972e64d1aae0239e06cbf980d", "commit_date": "2023-08-17T23:59:11Z", "commit_message": "Clean up unused global variables in Object-elf.C (#1483)\n\n* Clean up stab globals\r\n\r\nThese were removed by 5e142effc in 2021.\r\n\r\n* Remove unused globals from old symbol fixer\r\n\r\nThese were removed by 9de709ec5 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "47605aa681ca733a7d3ab6e7fbc7dee3fc83913b", "commit_date": "2023-08-17T15:21:47Z", "commit_message": "Remove unused Object::find_symbol in Object-elf (#1480)\n\nIts usage was removed by 9de709ec5 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc408511ee37c72bd4444de69fd4c34bd07de786", "commit_date": "2023-08-17T15:21:21Z", "commit_message": "Remove Symtab::updateIndices (#1481)\n\nIts usage was removed by cabbe58ff in 2015. It's a private function, so\r\nthere are no API/ABI issues in removing it.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5a12cccf2395d6a6fc0a5156c420016a04cf8d27", "commit_date": "2023-08-11T20:41:26Z", "commit_message": "Clean up SymtabAPI::LineInformation class (#1479)\n\n* Remove unused member variables\r\n\r\nThese were added by 0dee1c8f8 in 2016, but never used.\r\n\r\n* Remove redundant visibility specifiers\r\n\r\n* Remove useless comments\r\n\r\nThese are either incorrect or just noise.\r\n\r\n* Make the class uninheritable\r\n\r\nThis appears to be some remnants of someone's scratch/dev work.\r\n\r\n* Use a default dtor\r\n\r\nNo reason to have it.\r\n\r\n* Reduce string copies\r\n\r\nThese parameters are only ever read from.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cc88eac20fdbd2b7ce3450ec1cca3e7eb417ee24", "commit_date": "2023-08-09T23:23:24Z", "commit_message": "Remove Symtab::forceFullLineInfoParse (#1478)\n\nIt was added by 1867619517b3 in 2015, but was never implemented.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9cba0b348ce2006ce8a41e8ab549f05abbac377f", "commit_date": "2023-08-09T19:56:52Z", "commit_message": "Don't include compiler-specific headers (#1477)\n\nIncluding anything in <bits/*> is not portable. Also, the contents of\r\nthis header were never used.\r\n\r\nStan Cox (scox@redhat.com) reported:\r\n\r\nIt's not included as the first thing in the file, which means it can't\r\nuse the precompiled version of that header\r\n(https://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html) and\r\ntherefore it's just including the entire C++ standard library, which is\r\ngoing to be much slower than just including the right headers.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5055bcf55802fa9a57d7dd4e5397a978ee8d4d0", "commit_date": "2023-08-09T07:09:13Z", "commit_message": "Fix AMDGPU register formatting (#1473)\n\n* Separate out AMDGPU register formatting\r\n\r\nHere we extract the logic of displaying multiple registers as\r\na single operand when doing instruction formatting into a separate helper\r\nfunction that is only called when the architecture is passed to\r\nInstruction.format or Operand.format;\r\n\r\nThis change enables the ability get register operand name in two ways:\r\nConsider s[0:3]\r\n1. Without passing in architecture, each register will be printed separately.\r\nThat is s0,s1,s2,s3\r\n2. By passing in architecture, the first register will return a string\r\nfor the entire group, and the rest will return empty string.\r\nThat is s[0:3],\"\",\"\",\"\"\r\nThese empty strings will later be discarded by the\r\nArchitectureSpecificFormatter functions.\r\n\r\n* Fix missing parameter for makeRegisterExpression\r\n\r\nDuring one of the PRs that targets compiler warning,\r\nthe num_elements parameter to makeRegisterExpression is omitted,\r\nresulting in all register operands are displayed separately,\r\nwhether they should be displayed as a group or not.\r\n\r\nIn addition to adding the parameter, certern unused helper functions\r\nand fields of InstructionDecoder-amdgpu-gfx*** has been removed\r\nto avoid shadowing of variable names.\r\n\r\nNote that this change isn't applied to vega as we don't have ISA-XML for\r\nit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b6fcbb0c4f647fe4fbd39db1e0fb8cbc5cd1206f", "commit_date": "2023-08-08T19:45:36Z", "commit_message": "Clean up SymtabAPI::Function classes (#1475)\n\n* Remove undefined FunctionBase constructors\r\n\r\nThey were added by 5ed068167 in 2013, but never defined.\r\n\r\n* Make ~FunctionBase public\r\n\r\nFunctionBase is intended to be derived from and thus derived types can\r\nbe deleted through pointers to base. This would cause UB in the current\r\nstate.\r\n\r\nhttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual\r\n\r\n  A base class destructor should be either public and virtual, or\r\nprotected and non-virtual\r\n\r\n* Make Function(Symbol *) public\r\n\r\nIt's awkward having it be protected and then friended so it can be used.\r\nJust make it part of the API.\r\n\r\n* Function should not export its interface.\r\n\r\nThese functions should override those in FunctionBase, but should not\r\ndefine a new interface.\r\n\r\n* Explicitly mark overridden members in Function\r\n\r\n* Make InlinedFunction(FunctionBase *) public\r\n\r\nIt's awkward having it be protected and then friended so it can be used.\r\nJust make it part of the API.\r\n\r\n* Make ~InlinedFunction public\r\n\r\nInlinedFunction is intended to be derived from and thus derived types\r\ncan be deleted through pointers to base. This would cause UB in the\r\ncurrent state.\r\n\r\nhttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual\r\n\r\n  A base class destructor should be either public and virtual, or\r\nprotected and non-virtual\r\n\r\n* Make InlinedFunction::getModule public\r\n\r\nIt's a pure virtual member in FunctionBase, so making it protected here\r\nmeans that calls through a pointer to InlinedFunction could generate a\r\nruntime error. gcc and clang seem to \"do what I mean\" even though it's\r\nill-formed. It also removes the astonishment that `getModule` isn't\r\naccessible through the public interface even though it is required to be\r\nthere.\r\n\r\nFrom C++11 standard (n3242):\r\n\r\n11 Member access control [class.access]\r\n\r\n5. It should be noted that it is access to members and base classes that\r\nis controlled, not their visibility. Names of members are still visible,\r\nand implicit conversions to base classes are still considered, when\r\nthose members and base classes are inaccessible. The interpretation of a\r\ngiven construct is established without regard to access control. If the\r\ninterpretation established makes use of inaccessible member names or\r\nbase classes, the construct is ill-formed.\r\n\r\n* InlinedFunction should not export its interface.\r\n\r\nThese functions should override those in FunctionBase, but should not\r\ndefine a new interface.\r\n\r\n* Explicitly mark overridden members in InlinedFunction", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "67dfbb4ac8f5a6c1f98395983ff3a6ba57527101", "commit_date": "2023-08-03T17:55:51Z", "commit_message": "Fix hang when creating ELF dynamic sections (#1474)\n\nThis is triggered when a binary with no .rel.dyn and .rela.dyn\r\nsections, but its target platform uses rel type relocation records.\r\n\r\nThis happened on an AMDGPU binary that was previously incorrectly\r\nspecified as using a rel relocation record.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8fa753d955d43747aa46b0a528a81a0d9adf677d", "commit_date": "2023-07-27T14:25:14Z", "commit_message": "Do not decode operands for invalid opcode (#1467)\n\nCo-authored-by: Xiaozhu Meng <xmeng@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "43026f99ba03d71ec6105c4b52ad70759645a733", "commit_date": "2023-07-27T14:24:18Z", "commit_message": "Add support for EM_INTELGT (#1468)\n\nIt's unclear at this time how we should treat Intel's XE Gen12/Tiger Lake binaries, so we just treat them as Gen9 (Ponte Vecchio) for now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d94f856514d7e312d5d4bd704ddac8b166c48c4e", "commit_date": "2023-07-26T21:22:18Z", "commit_message": "do not export Instruction::appendOperand (#1466)\n\n- do not export since it is now private, and should not have been used\r\n  externally (comment said it was to work around old compiler issue).\r\n\r\n- cleanup method order and remove comment", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7456c05b979130eba42c4ee39a9ed00c92de2ba4", "commit_date": "2023-07-26T15:34:22Z", "commit_message": "add getDisplayOrderedOperands interface (#1465)\n\nAdd method Instruction::getDisplayOrderedOperands to return the\r\noperands that are displayed (non implicit operands) when formatting an\r\ninstruction for disassembly.  Returns a vector of Operands in display\r\norder.\r\n\r\nThese operands can be inspected and formatted to produce a disassembly\r\nstring with annotations.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6394752592546df5adff6bc7edb2d8bde330842d", "commit_date": "2023-07-26T03:27:07Z", "commit_message": "modernize ArchSpecificFormatter classes (#1464)\n\n- pass string and vector parameters by const reference instead of by\r\n  value for performance\r\n\r\n- add ArchSpecificFormatter::getInstructionString and remove the overridden\r\n  versions in the non-x86_64 as they were functionally the same, but not\r\n  identically written\r\n\r\n- remove virtual and add override to overridden methods\r\n\r\n- make methods const, use map::at instead of map::operator[]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25ad35c6762df4c40c68bd2fc3f6428efbd45a28", "commit_date": "2023-07-25T18:12:00Z", "commit_message": "improve intel instruction & operand formatting (#1463)\n\nThis fixes three issues when formatting an x86_64 instruction or its\r\noperands:\r\n\r\n1) Fix the order of operands when formatting the instruction to be the\r\n   AT&T syntax order.  If the instruction had three or more operands.\r\n   Conversion from the internal (Intel) order rotated right by 1 instead\r\n   of reversing the operands.\r\n\r\n2) Eliminate special treatment of register %kN as the first operand as\r\n   mask registers in Instruction::format as Operand::format already\r\n   formats these as masks (enclosed in braces) and not all uses of mask\r\n   registers are as a mask.\r\n\r\n3) Fix Operand::format to produce the correct disassembly operand\r\n   string.  The formatting of the internal Expression needs to be done\r\n   for some indirect values.  This was done in the Instruction::format\r\n   instead of directly in Operand::format\r\n\r\n* x86Formatter::getInstructionString - fixes 1, 2, 3\r\n\r\n* Operand::format - fixes 3\r\n\r\n* x86Formatter::formatRegister - cleanup, remove malloc that could leak", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e38d57c9904ab623350e90e0e3adcab2afcf2100", "commit_date": "2023-07-25T18:08:54Z", "commit_message": "fix x86_64 ret instruction formatting (#1457)\n\nThe ret instruction formats incorrectly with an operand of '(%rsp)'.  The\r\noperand should have been flagged as implicit so it is not included in\r\nthe output.\r\n\r\n- eliminate all but one overloaded Instruction::appendOperand` using\r\n  default parameters\r\n\r\n- add isImplicit parameter defaulting to false to\r\n  Instruction::addSuccessor\r\n\r\n- add isImplicit to the ret instruction's addSuccessor call to set the\r\n  ret_addr (which adds the operand to the Instruction object)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88a774dfa36208bc297b65dc18fdfe4e2e66140c", "commit_date": "2023-07-25T18:07:02Z", "commit_message": "modernize InstructionAPI::Operand class (#1456)\n\n* modernize InstructionAPI::Operand class\r\n\r\n- eliminate all but one of the constructors by using default parameters\r\n\r\n- remove destructor (unnecessarily virtual, and reset a member\r\n  shared_ptr), copy ctor, and copy assignment declarations to allow the\r\n  compiler to generate default versions that are equivalent or better\r\n  than the hand written versions\r\n\r\n- add default member initializers for all members\r\n\r\n- make Operand constructor explicit", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e17bc861ac69ddf6f55629b9912dca37e87d05d", "commit_date": "2023-07-25T17:41:03Z", "commit_message": "Fix x86 misspelled, incorrect, and invalid opcodes (#1421)\n\n* Fix spelling of 'vpperm' stringification\r\n\r\n* Fix spelling of 'vpcomd' stringification\r\n\r\n* Fix spelling of 'vprolvd' stringification\r\n\r\n* Fix spelling of 'vprolvq' stringification\r\n\r\n* Remove duplicate entry for 'e_vpsrlvq'\r\n\r\n* Rename 'vpclmullqlqdq' to 'vpclmulqdq'\r\n\r\n* Rename 'punpcklqd' to 'punpckldq'\r\n\r\n* Replace 'punpckhqd' with 'punpckhqdq'\r\n\r\n* Replace 'pcmpgdt' with 'pcmpgtd'\r\n\r\n* Remove instruction 'vpcmpequd'\r\n\r\nThis mnemonic does not exist in any of Intel Architecture Instruction\r\nSet Extensions, AMD Architecture Programmers Manual, or Intel\r\nArchitecutre Software Developer's Manual.\r\n\r\nThe encoding listed under 'SSET1E_66' is a reserved space.\r\n\r\n* Rename mnemonic for 'prefect_w' to 'prefetchw'\r\n\r\n* Rename 'pclmullqlqdq' to 'pclmulqdq'\r\n\r\nThis is a pseudo-opcode for pclmulqdq when imm8 is 0x0.\r\nThe encoding is 660F3A44, so the lookup table location is correct.\r\n\r\n* Remove 'mmxud'\r\n\r\nIt is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'movslq'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'pcommit'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Rename 'cmpsd_sse' to 'cmpsd'\r\n\r\n* Fix spelling of 'vphaddsw' mnemonic\r\n\r\n* Fix spelling of 'vblendpd' mnemonic\r\n\r\n* Remove redundant copy of 'prefetchwt1'\r\n\r\n* Remove redundant 'phsubsw'\r\n\r\n* Remove redundant 'sarx'\r\n\r\n* Remove redundant 'shlx'\r\n\r\n* Remove redundant 'vblendvpd'\r\n\r\n* Remove redundant 'vcmppd'\r\n\r\n* Remove redundant 'vcmpps'\r\n\r\n* Remove redundant 'vcmpsd'\r\n\r\n* Remove redundant 'vcmpss'\r\n\r\n* Remove redundant 'vpmaddubsw'\r\n\r\n* Remove redundant 'vpmaddwd'\r\n\r\n* Remove redundant 'vpmovsdb'\r\n\r\n* Remove redundant 'vpmovsdw'\r\n\r\n* Remove redundant 'vpmovsqb'\r\n\r\n* Remove redundant 'vpmovsqd'\r\n\r\n* Remove redundant 'vpmovsqw'\r\n\r\n* Remove redundant 'vpmovswb'", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d14dff71691f51fb6b96179a87b4cee6d3a34e6b", "commit_date": "2023-07-25T16:19:35Z", "commit_message": "Remove Object::dwarf_parse_aranges (#1462)\n\nIt's usage was removed by 4be991a7 in 2021.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d82356b795db373fd66b098a8ba6073a07ba6089", "commit_date": "2023-07-24T19:02:44Z", "commit_message": "Fix EM_AMDGPU to use RELA as Region Type (#1444)\n\nAccording to the llvm page\r\nhttps://llvm.org/docs/AMDGPUUsage.html#relocation-records\r\nAMDGPU backend generates Elf64_Rela records.\r\n\r\nThis fix added the case for EM_AMDGPU to\r\nstatic Region::RegionType getRelTypeByElfMachine\r\nsuch that it uses RELA instead of the default REL type.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "96f6344d195bb74f30e209c48ee64c8397421dcd", "commit_date": "2023-07-24T17:56:55Z", "commit_message": "Remove lazy initialization of IBSTrees in Symtab (#1454)\n\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes Symtab::mod_lookup threadsafe.\r\n\r\n* Fix includes in Function.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Fix includes in Variable.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Use Function.h instead of forward declarations\r\n\r\nThis removes duplicate typedefs, as well.\r\n\r\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes its use in\r\nSymtab::parseFunctionRanges threadsafe.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "649e43fa2d26aa3c5245b05bac1038f407c869a9", "commit_date": "2023-07-21T17:49:14Z", "commit_message": "Make Symtab::getContainingInlinedFunction lazy parsing threadsafe (#1452)\n\nThis fix does not address the thread safety issues in\r\nSymtab::parseFunctionRanges. That function is still thread unsafe and\r\nwill require separate modifications.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab915557f2ee64c538515fcdfed250e23dc40e19", "commit_date": "2023-07-14T23:39:33Z", "commit_message": "Clean up Symtab constructors (#1451)\n\n* Use default member initializers instead of initializer lists\r\n\r\nThere are members missing from the lists. This also simplifies the\r\nconstructors considerably.\r\n\r\n* Remove unhelpful message in default ctor\r\n\r\n* Delegate to default ctor in Symtab(MappedFile*)\r\n\r\nThis fixes the bug of inconsistent base initialization and ensures the\r\nconstructors are consistent.\r\n\r\n* Use delegating ctor for Symtab::Symtab(unsigned char*...)\r\n\r\nThis fixes the following bugs\r\n\r\n1. Invoke init_debug_symtabAPI before calling create_printf.\r\n\r\n2. Because this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.\r\n\r\n* Use delegating ctor for Symtab::Symtab(std::string...)\r\n\r\nBecause this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683b050d6132ce6a9e0cc5cad35d497b2d2d9cc2", "commit_date": "2023-07-14T21:08:09Z", "commit_message": "Explicitly delete unusable special member functions in Symtab (#1450)\n\nBecause there is a user-defined destructor, the compiler will not generate the special member functions (e.g., copy assignment operator). However, we explicitly delete them here to signal that this class is not copyable or movable.  The destructor is also moved to the top of the class to be next to the other special member functions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84786bd694d2c2163d6e8fbd2190271db1868ff3", "commit_date": "2023-07-14T20:20:25Z", "commit_message": "Remove Symtab::mfForDebugInfo (#1449)\n\nIt is never used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88bf2091da5aa9a018afb1f1db67fe6ffeb4773b", "commit_date": "2023-07-14T19:30:50Z", "commit_message": "Remove Symtab::checkPPC64DescriptorSymbols (#1448)\n\nThe definition was commented out in 3709ead48 in 2009.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7014ee1b08ffa17381b6f0bcda9b94368cb83937", "commit_date": "2023-07-14T19:30:30Z", "commit_message": "Remove Symtab copy constructor (#1447)\n\nThere are several reasons for this.\r\n\r\n1. It doesn't copy every member of the class\r\n2. IBSTree doesn't have a copy constructor\r\n3. mod_lookup_ and func_lookup_ are not copied, but are recreated in other member functions (e.g., mod_lookup()). This completely breaks the semantics of a copy ctor.\r\n4. Resets _ref_cnt to 1", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "beae2a07b5e0a40de54ee1aa972ac765e4d825b2", "commit_date": "2023-07-11T16:11:00Z", "commit_message": "add header files to directly define std:: syms (#1443)\n\n- update dyninst header files to directly include the standard header\r\n  file defining symbols from the standard C++ library that are used by\r\n  the dyninst header file; in some instances, the code relied on symbols\r\n  being defined via an unrelated include file indirectly including the\r\n  necessary header file leading to fragile code\r\n\r\n- minor other cleanups:  remove unnecessary header files, remove\r\n  definitions of names that are defined in a standard header file", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9696c64a3a1d6f41241d27c3c51820616490efa6", "commit_date": "2023-06-15T15:41:23Z", "commit_message": "Fix vector instruction lengths (#1439)\n\nThe following instruction decoded with the wrong length if the modrm\r\noperand specified a memory access as all the operand was incorrectly\r\nspecified to be a register only operand:\r\n\r\n- vcvtpd2udq\r\n- vcvtss2usi\r\n- vcvttpd2qq\r\n- vcvtudq2pd\r\n- vcvtudq2ps\r\n- vpblendd\r\n- vpermpd", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44d86e56068f62b9ac03f7d7537098fd3728fcdb", "commit_date": "2023-05-11T19:26:58Z", "commit_message": "Fix several resource leaks (#1435)\n\n* Local var leak in Symtab::addSymbol\r\n\r\nThis was found using cppcheck's memleak.\r\n\r\n* memCache::doOperation\r\n\r\nNot technically a leak, but cppcheck can't see through the 'push_back'.\r\n\r\n* PCProcess::hasPassedMain\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* parse_func::calcParentFunc\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* int_iRPC::setBinarySize\r\n\r\nFound using cppcheck's publicAllocationError.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8676f10714fb0bb7d0a3e7c65ec729d7db195d94", "commit_date": "2023-05-11T17:47:08Z", "commit_message": "Fix undefined behavior in integer operations (#1434)\n\n* Shifting signed 32-bit value by 31 bits is undefined behavior\r\n\r\nThis was found using cppcheck's shiftTooManyBitsSigned.\r\n\r\n* Signed to unsigned conversion in calculation\r\n\r\nThese were found using cppcheck's signConversion.\r\n\r\n* Fix signed overflow\r\n\r\nThis was found using cppcheck's integerOverflowCond.\r\n\r\n* Shifting negative value\r\n\r\nThis was found using cppcheck's shiftNegativeLHS.\r\n\r\n* BPatch_addressSpace::deleteSnippet: fix enumeral conversion in conditional", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c4a422834fbc3e6159ba00f10820f13c1958901e", "commit_date": "2023-05-10T19:01:00Z", "commit_message": "Prevent use of possibly-uninitialized local variable (#1433)\n\nThese were found using cppcheck's uninitvar and eraseDereference.\r\n\r\nFor the usages of iterator-like classes in process.C, they aren't strictly\r\nuninitialized variable usages since the classes in question are standard\r\nlayout types. It would be better to replace the usages there with list\r\nconstruction to avoid the static check altogether.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0c88bea297cb64cf147192242aaa3a4047cdb84", "commit_date": "2023-05-10T17:51:52Z", "commit_message": "Fix uninitialized member variables (#1431)\n\nThese were detected by cppcheck's uninitMemberVar*.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a73abaa9c7298a3e4ce0acf4eb14db8b1cb42fc", "commit_date": "2023-05-10T15:45:14Z", "commit_message": "Fix use of null pointer after check (#1432)\n\nThese were found using cppcheck's nullPointerRedundantCheck.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "68fc3d8a5f1527dcaa66c9455369c62e2b4fa54c", "commit_date": "2023-05-10T05:14:42Z", "commit_message": "Protect against self-assignment in copy constructors (#1430)\n\n* Protect against self-assignment in copy constructors\r\n\r\nThese were found by cppcheck:\r\n\r\ncommon/src/Node.C:198:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nNodeIterator &NodeIterator::operator=(const NodeIterator &rhs) {\r\n                            ^\r\ncommon/src/Edge.C:108:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nEdgeIterator &EdgeIterator::operator=(const EdgeIterator &rhs) {", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce097b5399fb654f68fbfe48e25e7a7bd567bf82", "commit_date": "2023-05-10T04:07:40Z", "commit_message": "Fix windows warnings (#1429)\n\n* Mismatched printf format arguments\r\n\r\nThese were found using cppcheck's invalidPrintfArgType_*.\r\n\r\n* Fix uninitialized member variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85fb0f95050c903bf1e1a1dbcacf1913dad1d73b", "commit_date": "2023-05-09T20:05:56Z", "commit_message": "Remove virtual calls in constructor/destructor (#1428)\n\n* AddressTranslateWin\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-win.C:49:17: style: Virtual function 'init' is called from constructor 'AddressTranslateWin(PID pid,PROC_HANDLE phandle)' at line 168. Dynamic binding is not used. [virtualCallInConstructor]\r\n   virtual bool init();\r\n\r\n* NodeIteratorPredicateObj\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:293:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateObj(Graph::NodePredicate::Ptr\r\np,NodeIterator&b,NodeIterator&e)' at line 331. Dynamic binding is not\r\nused. [virtualCallInConstructor]\r\n\r\n* NodeIteratorPredicateFunc\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:352:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateFunc(Graph::NodePredicateFunc\r\np,void*u,NodeIterator&b,NodeIterator&e)' at line 394. Dynamic binding is\r\nnot used. [virtualCallInConstructor]\r\n\r\n* InstructionDecoder_x86\r\n\r\nFound using cppcheck:\r\n\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: style: Virtual function 'setMode' is called from constructor 'InstructionDecoder_x86(Architecture a)' at line 144. Dynamic binding is not used. [virtualCallInConstructor]\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n                                                ^\r\ninstructionAPI/src/InstructionDecoder-x86.C:144:28: note: Calling setMode\r\n      if(a == Arch_x86_64) setMode(true);\r\n                           ^\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: note: setMode is a virtual function\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n\r\n* CFGFactor::destroy_block\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:117:18: style: Virtual function 'free_block' is called from destructor '~CFGFactory()' at line 92. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_block(Block * b);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:92:5: note: Calling destroy_block\r\n    destroy_block(b);\r\n    ^\r\nparseAPI/src/CFGFactory.C:182:5: note: Calling free_block\r\n    free_block(b);\r\n    ^\r\nparseAPI/h/CFGFactory.h:117:18: note: free_block is a virtual function\r\n    virtual void free_block(Block * b);\r\n\r\n* CFGFactor::free_func\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:116:18: style: Virtual function 'free_func' is called from destructor '~CFGFactory()' at line 95. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_func(Function * f);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:95:5: note: Calling destroy_func\r\n    destroy_func(f);\r\n    ^\r\nparseAPI/src/CFGFactory.C:172:4: note: Calling free_func\r\n   free_func(f);\r\n   ^\r\nparseAPI/h/CFGFactory.h:116:18: note: free_func is a virtual function\r\n    virtual void free_func(Function * f);\r\n\r\n* CFGFactor::free_edge\r\n\r\n* ~freebsd_process\r\n\r\nFound using cppcheck:\r\n\r\nproccontrol/src/freebsd.C:1046:17: warning: Member variable 'freebsd_thread::is_exited' is not initialized in the constructor. [uninitMemberVar]\r\nfreebsd_thread::freebsd_thread(int_process *p, Dyninst::THR_ID t, Dyninst::LWP l)\r\n                ^\r\nproccontrol/src/freebsd.h:122:17: style: Virtual function 'getEventQueue' is called from destructor '~freebsd_process()' at line 795. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual int getEventQueue();\r\n                ^\r\nproccontrol/src/freebsd.C:795:22: note: Calling getEventQueue\r\n    int eventQueue = getEventQueue();\r\n                     ^\r\nproccontrol/src/freebsd.h:122:17: note: getEventQueue is a virtual function\r\n    virtual int getEventQueue();", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6ab42a4da20f7d9a5a58c00a4835d337a95fef5", "commit_date": "2023-05-09T17:30:44Z", "commit_message": "AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak (#1427)\n\n* AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-sysv.C:1046:58: error: Resource leak: fd [resourceLeak]\r\n   if (read(fd, &e_hdr, sizeof(e_hdr)) != sizeof(e_hdr)) return base;\r\n                                                         ^\r\ncommon/src/addrtranslate-sysv.C:1048:28: error: Resource leak: fd [resourceLeak]\r\n   if (e_hdr.e_phoff == 0) return base;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5409c471292cb8b1c87e9b5ae1e94fa9b6eb573", "commit_date": "2023-05-09T17:09:20Z", "commit_message": "Make CondVar non-copyable, non-moveable (#1426)\n\nThis makes it consistent with std::condition_variable.\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]\r\n   mutex = new mutex_t;\r\n   ^\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]\r\n   mutex = new mutex_t;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "45614d7908e36d32d26126d2844d388c6936ba61", "commit_date": "2023-05-02T18:17:06Z", "commit_message": "Github CI: increase number of build jobs (#1424)\n\nGithub only allows one CPU core per job, but any number of threads. Testing shows that N=2 threads reduces build time by 2-2.5x, N=3 by 2.2x, and N=4 increases build time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e37524ab88b645328c1f02b5c4ab7ac0f7e8d3f", "commit_date": "2023-05-02T02:13:22Z", "commit_message": "Github CI: make compiler multi-build a cron job (#1425)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8952d3207763a26938e097e58ebe97b490c73cf", "commit_date": "2023-05-01T17:32:12Z", "commit_message": "CI compiler multibuilds (#1415)\n\n* Weekly build across all compiler versions and build types\r\n\r\n* Use DYNINST_WARNINGS_AS_ERRORS=ON instead of -Werror", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2e26598a5301ff900d2ca235db729d1dd4c4d350", "commit_date": "2023-05-01T16:45:24Z", "commit_message": "Use default TBB when doing CI spack build (#1423)\n\nDyninst now requires TBB >= 2019.9.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7621bc85ac0cda3bd1b2a17d78aac6d48c68280a", "commit_date": "2023-04-28T00:34:11Z", "commit_message": "Add ubuntu-22.04 to dev container build (#1419)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "719036aeb55c459a355afb91188cfa4d7d465bc9", "commit_date": "2023-04-27T23:51:51Z", "commit_message": "Refactor Dockerfile.ubuntu (#1420)\n\n* Move elfutils logic into build_elfutils.sh\r\n\r\n* Whitespace\r\n\r\n* Copy in dependencies.versions\r\n\r\nThis is no longer done in the base container because it didn't make\r\nsense there as that image should never change.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8d1a313be087154aad95d660b9fe2b34f4da492", "commit_date": "2023-04-27T22:33:27Z", "commit_message": "warning fix:  stack frame size (#1418)\n\n- when compiling with clang 15 and 16 in addition to clang 14,\r\n  allow a 40000 stack frame size", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a9c9e061ea6b41b93151f0ed3b34208346b4881", "commit_date": "2023-04-27T21:28:12Z", "commit_message": "Make InstructionAPI::isArrayIndexValid const. (#1416)\n\nclang complains:\r\n\r\n  'constexpr' non-static member function will not be implicitly 'const'  in C++14; add 'const' to avoid a change in behavior [-Werror,-Wconstexpr-not-const]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "739ad57883f032fb18a6c741f0c2f98e9a766bc7", "commit_date": "2023-04-25T17:03:44Z", "commit_message": "CMake modernization (#1391)\n\n# Changes to building Dyninst\r\n- Minimum CMake version is 3.14.0\r\n- STERILE_BUILD is now deprecated\r\n- ENABLE_LTO was renamed to DYNINST_ENABLE_LTO\r\n- CMAKE_EXPORT_COMPILE_COMMANDS is no longer set\r\n- Platform detection is done natively in CMake\r\n  - full support for Linux on x86, AMD64, ppc64le, and aarch64/ARMv8\r\n  - experimental support for 32-bit FreeBSD and Windows on x86\r\n- Custom install targets <target>-install have been removed\r\n- Installation subpaths (bin, lib, include, etc.)  are no longer user-configurable\r\n- Static versions of Dyninst libraries now depend on other static Dyninst libraries\r\n  - For example, libDynElf.a now depends on libcommon.a, not libcommon.so\r\n- Libraries that cannot build with symlight now warn when LIGHTWEIGHT_SYMTAB=ON\r\n- User build options passed via CMAKE_<LANG>_FLAGS are correctly preserved and override the builtin options\r\n- <PackageName>_ROOT_DIR now implies <PackageName>_NO_SYSTEM_PATHS and sets <PackageName>_ROOT\r\n  - This forces CMake to find the package at the given location or in CMAKE_PREFIX_PATH\r\n  - When using CMake >= 3.16, searching CMAKE_PREFIX_PATH can be disabled with CMAKE_FIND_USE_CMAKE_PATH=OFF\r\n  - For example, -DElfUtils_ROOT_DIR=/some/path sets ElfUtils_NO_SYSTEM_PATHS=ON and ElfUtils_ROOT=/some/path\r\n\r\n## RPATH handling\r\n- CMP0060 is active and so libraries are linked by their full paths even in implicit directories (e.g., /usr/lib/foo.so instead of -lfoo)\r\n- Populate RPATHs for binaries in the build tree: set(CMAKE_SKIP_BUILD_RPATH FALSE)\r\n- Do not use the install path as the RPATH: set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)\r\n  - $ORIGIN is used instead\r\n- Add paths to any directories outside the project that are in the linker search path or contain linked library files: set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\r\n\r\n## Third-party libraries (tpl)\r\n- The ability to build tpls from source has been removed\r\n- All libraries must have a CMakeConfig.cmake\r\n- Minimum versions\r\n  - Boost: 1.71.0\r\n  - TBB/oneapi-tbb: 2019.9\r\n  - elfutils: 0.186\r\n- An imported interface named Dyninst::<library> is created for each library\r\n  - includes are marked SYSTEM so they don't produce warnings\r\n  - exported in DyninstConfig.cmake as per https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n- pkgconfig is used to find elfutils and valgrind\r\n  - if pkgconfig fails, a manual search is done\r\n  - This can be disabled with  ElfUtils_NO_SYSTEM_PATHS=ON\r\n\r\n# Changes to consuming Dyninst as a CMake project\r\n- All targets are in the Dyninst namespace; e.g., symtabAPI is now Dyninst::symtabAPI\r\n- Each third-party library has an associated imported interface named Dyninst::<library>, e.g., Dyninst::Boost\r\n  - Users are encouraged to use these, if the same library is need in their applications\r\n- DYNINST_LIBRARIES has been removed\r\n- DYNINST_INCLUDE_DIR is now deprecated and will be removed in a future version\r\n  - Use the provided targets, instead\r\n- DYNINST_INTERNAL_DEFINES is now deprecated and will be removed in a future version\r\n- DYNINST_PLATFORM is now deprecated and will be removed in a future version\r\n- find_package(Dyninst ... COMPONENTS ...) now works correctly\r\n- Version constraints for find_package(Dyninst X.Y.Z) now work correctly\r\n  - Dyninst only guarantees ABI compatibility between major releases, so only the same major versions are compatible\r\n\r\nUsers who are not ready to fully migrate to the new Dyninst CMake package may use the following to preserve backward compatibility:\r\n\r\ncmake\r\nif(TARGET Dyninst::common)\r\n  foreach(t common symtabapi ...)\r\n    add_library(${t} INTERFACE IMPORTED)\r\n    target_link_libraries(${t} INTERFACE Dyninst::${t})\r\n  endforeach()\r\nendif()\r\n\r\n* Update minimum CMake version to 3.13.0\r\n\r\n* Rename CMake files to prevent name collisions\r\n\r\nWhen consumed as a subproject, the CMake files could be imported into the parent project where the filenames could collide.\r\n\r\n* Prepend to CMAKE_MODULE_PATH instead of overwriting\r\n\r\n* Fix capitalization error in FindThread_DB\r\n\r\nThis should silence the warning about Thread_Db versus Thread_DB\r\n\r\n* Require CMake package for TBB (#1322)\r\n\r\n* Make libdl/dbghelp private linkage\r\n\r\n* Remove TBB flags from toolkits that don't use TBB\r\n\r\n* Remove FindTBB.cmake\r\n\r\nAll supported TBB versions ship as CMake packages, so this is no longer\r\nneeded.\r\n\r\n* Remove from-source build option\r\n\r\n* Create an imported target for TBB used by Dyninst\r\n\r\nThis is needed to force the include directories to be considered 'system' directories so that compiler warnings from TBB sources are ignored\r\n\r\n* Rename cmake/ThreadingBuildingBlocks.cmake -> cmake/tpls/DyninstTBB.cmake\r\n\r\nThis is needed to keep the namespace clean for DyninstConfig.cmake\r\n\r\n* Export TBB as part of the Dyninst CMake package\r\n\r\nThis is required by the CMake guidelines:\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nIn particular,\r\n  \"All required dependencies of a package must also be found in the package configuration file\"\r\n\r\n* Format DyninstTBB.cmake\r\n\r\n* Boost CMake modernization (#1330)\r\n\r\n* Remove FindBoost.cmake\r\n\r\nUse the one provided by CMake so we don't have to maintain this one.\r\n\r\n* Remove from-source build\r\n\r\n* Remove user-configurable version\r\n\r\n* Force use of multithreaded libraries\r\n\r\nWe don't need to include Threads here. Boost will do that.\r\n\r\n* Disable use of statically-linked runtime\r\n\r\n* Remove Boost_DEBUG\r\n\r\n* Always enable searching system paths\r\n\r\n* Unify path calculations, pass to find_package as hints\r\n\r\n* Clean up comments\r\n\r\n* Use include_guard\r\n\r\n* Allow using Boost's CMake package\r\n\r\nIt is now provided by default since 1.70.0 which is the current minimum\r\nacceptable version.\r\n\r\n* Remove rest of cache variables\r\n\r\n* Remove MSVC-specific template define\r\n\r\nWe can add this back, if we find there are newer VCs still affected.\r\n\r\n* Make Dyninst::Boost imported interface target\r\n\r\nThis is needed to make the include directories be \"system\" directories\r\nso that warnings in their headers do not propagate into Dyninst.\r\n\r\n* Do not add Boost as a dependency for all libs\r\n\r\n* Make find_package QUIET\r\n\r\n* Use Boost_* variables instead of calculating includes, libs, etc.\r\n\r\n* Make a header-only wrapper target\r\n\r\n* Add to Dyninst package\r\n\r\n* Update CMakeLists\r\n\r\n* Set Boost_NO_WARN_NEW_VERSIONS\r\n\r\n* Bump minimum version to 1.71.0\r\n\r\n* Elfutils cmake modernization (#1333)\r\n\r\n* Rename FindLibDwarf -> FindLibDW\r\n\r\n* Update FindLibDW\r\n\r\n* Rename FindLibElf -> FindLibELF\r\n\r\n* Update FindLibELF\r\n\r\n* Create FindElfutils\r\n\r\n* Update FindLibDebuginfod\r\n\r\n* Update DyninstElfUtils\r\n\r\n* Update the CMakeLists to use new targets\r\n\r\n* Use CMP0074 in updated Find modules\r\n\r\nThis enables use of <Package>_ROOT variables when find_package is\r\ninvoked.\r\n\r\n* Provide default dummy interface target for ElfUtils::ElfUtils\r\n\r\nNeeded for non-Unix platforms.\r\n\r\n* Fix rebase bug in CMakeLists.txt\r\n\r\n* Export DyninstElfUtils\r\n\r\n* Forward QUIET flag to pkg_check_modules\r\n\r\n* Forward version to pkg_check_modules\r\n\r\n* Use lib from pkg-config, if found\r\n\r\n* Clean up internal variables\r\n\r\n* Simplify cache variable handling\r\n\r\n* Use full linkage name for libs returned by pkg-config\r\n\r\n* Separate out dependent libraries in FindLibDW\r\n\r\nSome platforms include libelf as a dependency, but IMPORTED_LOCATION accepts only a single entry. Store the rest in IMPORTED_LINK_DEPENDENT_LIBRARIES.\r\n\r\n* Fix quoting bug in FindLibDW\r\n\r\n* Fix lib check in FindLibDW\r\n\r\n* Manually set PC_<XXX>_INCLUDE_DIRS when FindPkgConfig misses it\r\n\r\nFindPkgConfig uses the output from pkg-config --cflags-only-I <lib> to set PC_<XXX>_INCLUDE_DIRS. Because libelf is usually in a system directory, pkg-config will return nothing for this. FindPkgConfig stores the actual includedir variable from the PC file, so we can fetch it from there.\r\n\r\n* Libiberty cmake modernization (#1334)\r\n\r\n* LibIberty cmake modernization\r\n\r\n* Use INCLUDE_DIRS directly\r\n\r\n* Threaddb cmake modernization (#1338)\r\n\r\n* Update FindThread_DB\r\n\r\n* Update thread_db\r\n\r\n* Update docs URL\r\n\r\n* Use OpenMP target (#1339)\r\n\r\nThis also provides a dummy target so we don't have to do any additional checking when USE_OpenMP=OFF. We only use OpenMP_CXX, so I didn't create a target for the other languages (C,Fortran).\r\n\r\n* Valgrind cmake modernization (#1340)\r\n\r\n* Update valgrind\r\n\r\n* Add version check in Find module\r\n\r\n* Remove Valgrind_LIBRARIES\r\n\r\nThey are versioned by architecture, so are hard to nail down with\r\nfind_library. We also don't need them (at least not yet).\r\n\r\n* Make dummy when ADD_VALGRIND_ANNOTATIONS=OFF\r\n\r\n* Add compile defs\r\n\r\n* Update CMakeLists.txt\r\n\r\n* Make the dummy IMPORTED\r\n\r\n* Fix bug with version handling in DyninstBoost\r\n\r\n* Use _min_version in DyninstBoost\r\n\r\nThis is so the CI version check will work uniformly\r\n\r\n* Add existence check for Dyninst::Boost before creating target\r\n\r\n* Clean up find_package flag handling in Find modules\r\n\r\n* Make variable exports uniform across Find modules\r\n\r\n* Coalesce calls to set_target_properties in Find modules\r\n\r\n* Fix bug in DyninstElfutils when calling find_package LibDebuginfod\r\n\r\n* Make just one exported target in FindElfutils\r\n\r\n* Add target existence check in DyninstTBB\r\n\r\n* Add SYSTEM property to Elfutils includes\r\n\r\n* Remove export of DYNINST_LIBRARIES\r\n\r\n* Preserve user's module path when looking for Dyninst modules\r\n\r\n* Manually set legacy DYNINST_INCLUDE_DIR\r\n\r\nThis is now deprecated.\r\n\r\n* Use CMAKE_CURRENT_LIST_DIR intead of DYNINST_CMAKE_DIR\r\n\r\n* Install Find modules for third-party libraries\r\n\r\n* Remove unused DyninstConfigVersion.cmake\r\n\r\n* Remove unneeded comments in DyninstOptions\r\n\r\n* Move all options to DyninstOptions\r\n\r\n* Remove modification of CMAKE_CONFIGURATION_TYPES\r\n\r\nWe just support the usual configs.\r\n\r\n* Move Dyninst version strings to base CMakeLists.txt\r\n\r\n* Move internal includes into base CMakeListst.txt\r\n\r\nThis ensures that all user options and internal settings are in place\r\nbefore third-party dependencies are configured.\r\n\r\n* Clean up 3rd party includes in base CMakeLists.txt\r\n\r\n* Remove unused version strings\r\n\r\n* Remove unneeded 'add_dependencies(common boost)' in base CMakeListst.txt\r\n\r\nThis is now handled directly in CMake recipe for common.\r\n\r\n* Remove unused testsuite include in base CMakeLists.txt\r\n\r\n* Update the project declaration\r\n\r\n* Move setting of CMAKE_BUILD_TYPE to base CMakeLists.txt\r\n\r\nThis keeps all CMake-level variables in one place.\r\n\r\n* Don't set CMAKE_EXPORT_COMPILE_COMMANDS\r\n\r\nThe user should set this.\r\n\r\n* Move BUILD_SHARED_LIBS into base CMakeLists.txt\r\n\r\n* Remove unused INSTALL_DOC_DIR\r\n\r\n* Make cmake_minimum_required a FATAL_ERROR\r\n\r\n* Move rpath and shared lib settings into DyninstLibrary\r\n\r\n* Move installation items into DyninstInstall.cmake\r\n\r\n* Automatically generate DyninstConfigVersion.cmake\r\n\r\n* Use configure_package_config_file to generate DyninstConfig.cmake\r\n\r\nThis will provide more utilities to make a more robust Config.cmake\r\n\r\n* Use INSTALL_INCLUDE_DIR to set DYNINST_INCLUDE_DIR\r\n\r\n* Use PACKAGE_INIT in Config.cmake.in\r\n\r\nAlso use it for DYNINST_INCLUDE_DIR\r\n\r\n* Don't explicitly set Dyninst_FOUND\r\n\r\nThe caller's find_package will do this.\r\n\r\n* Remove unused DyninstSystemPaths.cmake\r\n\r\n* Simplify visibility settings and move to DyninstLibrary\r\n\r\n* Move SYMREADER calculation to base CMakeLists.txt\r\n\r\nIt is needed in several places before DyninstLibrary is included.\r\n\r\n* Merge platform calculations into a DyninstPlatform.cmake\r\n\r\n* Remove DyninstVisibility include\r\n\r\n* Moved configure_file back to base CMakeListst\r\n\r\nThe ordering matters until common gets an explicit list of header files (currently uses a glob).\r\n\r\n* Remove DyninstConfigVersion.cmake.in\r\n\r\nThis isn't needed anymore since the version file is generated automatically.\r\n\r\n* Remove custom target install\r\n\r\ncmake_install.cmake isn't intended to be used that way.\r\n\r\n* Remove install logic from dyninst_library\r\n\r\nThat is now handled in DyninstInstall.\r\n\r\n* cmake-format: set tab size to 2\r\n\r\n* cmake-format: don't format comments\r\n\r\n* Calculate platform from CMake-provided mechanisms\r\n\r\nThese are equivalent to the existing bash, but more adaptable.\r\n\r\n* Map stringy names into CMake variables\r\n\r\n* Replace Windows platform check with DYNINST_OS_Windows\r\n\r\n* Replace Linux platform check with DYNINST_OS_Linux\r\n\r\n* Replace FreeBSD platform check with DYNINST_OS_FreeBSD\r\n\r\n* Replace x86 platform check with DYNINST_OS_x86_64\r\n\r\n* Replace ppc platform check with DYNINST_ARCH_ppc64le\r\n\r\n* Replace aarch64 platform check with DYNINST_ARCH_aarch64\r\n\r\n* Replace mangled platform checks with explicit DYNINST_{OS,ARCH}\r\n\r\n* Rename PLATFORM to DYNINST_PLATFORM and export it as legacy\r\n\r\nThis is only used in the test suite.\r\n\r\n* Don't pass -m64 explicitly on ppc64le\r\n\r\nWe only support 64-bit ppc, so this is redundant and non-portable.\r\n\r\n* Remove commented-out define for aarch64\r\n\r\n* Simplify CapArchDef\r\n\r\nWith the new variables, only one pass over the OS names is needed.\r\n\r\n* Allow FreeBSD to build on i386\r\n\r\nI previously thought it was only allowed on x86_64, but there is an old platform called i386-unknown-freebsd7.2.\r\n\r\n* Add Windows to DYNINST_PLATFORM\r\n\r\n* Replace usage of WIN32 with DYNINST_OS_Windows\r\n\r\n* Replace usage of UNIX with DYNINST_OS_UNIX\r\n\r\n* Merge Linux+FreeBSD checks into UNIX check\r\n\r\n* symtabAPI - replace i386 check\r\n\r\n* Use 'option' instead of 'set(... CACHE ...)'\r\n\r\n* Deprecate STERILE_BUILD\r\n\r\n* DyninstOptions - use 'OFF' instead of 'NO'\r\n\r\n* Get rid of dyninst_link_private_library\r\n\r\nWe require CMake >= 3.13.0 so this is no longer needed.\r\n\r\n* Rename SOVERSION to DYNINST_SOVERSION\r\n\r\nSOVERSION is a keyword.\r\n\r\n* Replace LIBVERSION with DYNINST_LIBVERSION\r\n\r\nFor clarity and consistency.\r\n\r\n* Replace DYNINST_ROOT with PROJECT_SOURCE_DIR\r\n\r\n* Move library settings into DyninstLibrarySettings.cmake\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR absolute\r\n\r\nIn 'install', they are relative to CMAKE_INSTALL_PREFIX by default.\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR cache variables\r\n\r\nThere's no need to let the user modify these locations.\r\n\r\n* DyninstLibrarySettings - reuse INSTALL vars\r\n\r\nThis just makes sure changes are propagated.\r\n\r\n* DyninstLibrarySettings - remove INSTALL_BIN_DIR\r\n\r\nIt's not used.\r\n\r\n* DyninstLibrary - rename INSTALL_*_DIR -> DYNINST_INSTALL_*DIR\r\n\r\nThis is more in line with the naming convention of GNUInstallDirs. We\r\ncould use GNUInstallDirs directly, but there's no need to let the user\r\nconfigure the install directory layout.\r\n\r\n* DyninstLibrarySettings - Use 'Dyninst' instead of PROJECT_NAME\r\n\r\nThis is the only placed PROJECT_NAME is used, so make it consistent.\r\n\r\n* DyninstLibrarySettings - update RPATH handling\r\n\r\n* DyninstLibrary - don't manually create cmake_install.cmake\r\n\r\nThese are automatically created and installed by 'install'.\r\n\r\n* DyninstLibrary - Merge calls to set_target_properties\r\n\r\n* DyninstLibrary - Cleanup superfluous variable usage\r\n\r\n* DyninstLibrary - add Windows defines to targets instead of directories\r\n\r\n* DyninstLibrary - add LIGHTWEIGHT_SYMTAB, SW_ANALYSIS_STEPPER to targets\r\n\r\n* DyninstLibrary - add DYNINST_DIAGNOSTIC_NO_SUPPRESSIONS to targets\r\n\r\n* DyninstLibrary - export all targets to DyninstTargets.cmake\r\n\r\n* DyninstLibrary - don't treat each library as a separate component\r\n\r\n'COMPONENT' in 'install' is used to group targets into \"bags\" of useful\r\nfeatures that can be independently installed using cmake --install .\r\n--component .... That doesn't work for Dyninst. Note: This is\r\northogonal to the concept of a COMPONENT in find_package.\r\n\r\n* DyninstLibrary - remove CLEAN_DIRECT_OUTPUT\r\n\r\nWe no longer offer per-library build targets.\r\n\r\n* DyninstLibrary - remove WITHOUT_SYMTAB_API and WITHOUT_SYMLITE\r\n\r\nThese are never used.\r\n\r\n* DyninstLibrary - refactor global defines in 'dyninst_library'\r\n\r\n* DyninstLibrary - Move calculation of SYMREADER\r\n\r\n* DyninstLibrary - rename 'target' to '_target'\r\n\r\n'target' is a keyword\r\n\r\n* DyninstLibrary - add named arguments\r\n\r\n* DyninstLibrary - rename SRC_LIST with _target_SOURCE_FILES\r\n\r\nThe latter is created from the named argument 'SOURCE_FILES'.\r\n\r\n* DyninstLibrary - Replace ACTUAL_TARGETS with _all_targets\r\n\r\n* DyninstLibrary - make headers part of library declaration\r\n\r\nThis tracks file changes to signal rebuilds.\r\n\r\n* DyninstLibrary - add links, properties, includes to all targets\r\n\r\nThis synchronizes the SHARED and STATIC libraries.\r\n\r\n* DyninstLibrary - link private and public deps separately\r\n\r\n* DyninstLibrary - Set include directories on interfaces\r\n\r\nThis replaces using PUBLIC_HEADERS which is really intended for use with\r\nMacOS Framework targets.\r\n\r\n* DyninstLibrary - remove LIBRARY_OUTPUT_DIRECTORY\r\n\r\nThe default is CMAKE_CURRENT_BINARY_DIR, so no need to specify it.\r\n\r\n* DyninstLibrary - Apply DEFINES passed to dyninst_library\r\n\r\n* DyninstLibrary - make SHARED library explicit\r\n\r\n* DyninstLibrary - don't deref Boolean variable\r\n\r\n* DyninstLibrary - update message\r\n\r\n* DyninstLibrary - Install headers, preserving the directory structure\r\n\r\n* DyninstLibrary - \"return\" the list of generated target names\r\n\r\n* DyninstLibrary - add directory-level include guard\r\n\r\n* common - remove spurious files\r\n\r\nAdded in 2015.\r\n\r\n* common - move generation of dyninstversion.h into CMakeLists.txt\r\n\r\n* common - add global include guard in CMakeLists\r\n\r\n* common - explicitly list header files in CMakeLists\r\n\r\nThis makes it easier to see what the actual public files are.\r\n\r\n* common - refactor source list calculation\r\n\r\n* common - move include of DyninstLibrary into subdirectory\r\n\r\n* common - use new dyninst_library\r\n\r\n* common - set includes and Windows stuff on all targets\r\n\r\n* common - write 'dyninstverison.h' into source dir\r\n\r\n* elf - make a dummy target for non-Unix OSes\r\n\r\n* elf - use new dyninst_library\r\n\r\n* dwarf - use new dyninst_library\r\n\r\nThe changes here are the same as for elf/CMakeLists\r\n\r\n* symlite - make symlite/h/SymLite-elf.h publicly consumable\r\n\r\nIt refers to files in the build tree that aren't available in the\r\ninstall tree. Although this file is in the install tree, it was never\r\nconsumable by users. Updating this is of questionable utility, but it at\r\nleast gives us the opportunity to write tests against the public\r\ninterface.\r\n\r\n* symlite - use new dyninst_library\r\n\r\n* instructionAPI - use new dyninst_library\r\n\r\n* symtabAPI - use new dyninst_library\r\n\r\n* proccontrol - use new dyninst_library\r\n\r\n* parseAPI - use full path to common/h/util.h.\r\n\r\nThis prevents confusion with parseAPI/h/util.h.\r\n\r\n* parseAPI - use new dyninst_library\r\n\r\nThis one is different from the rest because parseAPI and dataflowAPI\r\nhave circular dependencies on each other, so it's not currently possible\r\nto split them up.\r\n\r\n* stackwalk - use new dyninst_library\r\n\r\nPreviously, FORCE_FRAME_POINTER was applied to _all_ of Dyninst. The\r\ncommit comments said it was supposed to be just for the stackwalk\r\nsources, so that is the new behavior.\r\n\r\n* stackwalk - incorporate check of SW_ANALYSIS_STEPPER\r\n\r\nIt only affects stackwalk, so no need to put it on all of the targets.\r\n\r\n* stackwalk - put SW_ANALYSIS_STEPPER check in post-processing\r\n\r\nThis tidies up the code a bit.\r\n\r\n* patchAPI - use new dyninst_library\r\n\r\n* dyninstAPI - use absolute include path for 'debug.h'\r\n\r\n* dyninstAPI - add missing include for Dyninst::Address\r\n\r\nThis was transitively included, but breaks when reording includes.\r\n\r\n* dyninstAPI - add missing include for std::set\r\n\r\n* dyninstAPI - use new dyninst_library\r\n\r\n* dynC_API - use new dyninst_library\r\n\r\n* parseThat - use new dyninst_library\r\n\r\n* dyninstAPI_RT - use new dyninst_library\r\n\r\n1. SRC_ASSEMBLY was never used. The assembly files have always been\r\nexplicitly listed.\r\n\r\n2. We are still linking libdl.so on the static versions of the runtime.\r\nThis hasn't been an issue in the past, so we'll leave it.\r\n\r\n3. The creation of the lists of source files has redundant checks in it,\r\nbut this version is much clearer on what is actually happening.\r\n\r\n4. CHECK_C_COMPILER_FLAG_EXTENDED was removed since CMake now supports a\r\nmuch larger set of compilers and Dyninst has dropped support for HP,\r\nSun, and XL.\r\n\r\n5. The config is much less noisy. There was no reason to determine if\r\n32-bit support would work when the user didn't ask for it. Now, the\r\nconfig will fail if the user asks for 32-bit libraries and the compiler\r\ncan't create them.\r\n\r\n* Remove top-level project includes\r\n\r\nAll of the necessary includes are now handled by each toolkit via\r\nexplicit import/export of targets and include directories.\r\n\r\n* Remove top-level check for SYMREADER\r\n\r\nThe respective CMakeLists now handle this.\r\n\r\n* Add better handling of Threads/pthread\r\n\r\n1. Move Threads include into a tpls module\r\n\r\n2. Link against Threads::Threads instead of 'pthread'\r\n\r\n3. Add explicit dependencies in dyninstAPI and dyninstAPI_RT (they were\r\nimplicit before).\r\n\r\n* DyninstConfig - Correctly detect presence of COMPONENTS on import\r\n\r\nThis previously didn't work at all because DYNINST_${COMP}_FOUND should\r\nhave been spelled Dyninst_${COMP}_FOUND. This is simpler and allows the\r\nuse of check_required_components directly.\r\n\r\n* DyninstConfig - Remove unneeded and (now) incorrect comments\r\n\r\n* Make an OpenMP tpl module\r\n\r\nThis will make it easier to export OpenMP in DyninstConfig. It also makes CMakeLists.txt have just straight-line code.\r\n\r\n* Include all third-party libraries in DyninstConfig\r\n\r\nThis is explicitly required by the CMake documentation:\r\n\r\n  \"All required dependencies of a package must also be found in the\r\npackage configuration file.\"\r\n\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nThis also ensures that the custom Dyninst:: targets are always available\r\nto consumers.\r\n\r\n* Ensure static libraries depend on static Dyninst libraries\r\n\r\nWhen creating a static Dyninst library, ensure that it depends on the\r\ncorresponding static Dyninst library. For example, libDynElf.a should\r\ndepend on libcommon.a, not libcommon.so.\r\n\r\n* DyninstWarnings - Ignore no-pragma warnings for non-Werror builds\r\n\r\n* DyninstCapArchDef - rename UNIFIED_DEFINES\r\n\r\nDYNINST_PLATFORM_CAPABILITIES is more descriptive.\r\n\r\n* DyninstCapArchDef - add include guard\r\n\r\n* DyninstLibrary - add DYNINST_PLATFORM_CAPABILITIES to all targets\r\n\r\n* DyninstLibrary - add documentation\r\n\r\n* DyninstLibrary - update comment about install dir structure\r\n\r\n* DyninstLibrary - install runtime in 'bin'\r\n\r\n* Include 'src' and 'h' subdirectories in BUILD_INTERFACE\r\n\r\nEvery toolkit has a similar directory structure, so we can do this\r\nin just one location instead of in each CMakeLists.\r\n\r\n* Unswitch loops for platform-specific target updates in CMakeLists\r\n\r\nThis is really a code beautification.\r\n\r\n* Remove DYNINST_LIBVERSION\r\n\r\nIt's never different from DYNINST_VERSION and has no special purpose.\r\n\r\n* Remove system path detection in RPATH calculations\r\n\r\nWe use CMAKE_BUILD_WITH_INSTALL_RPATH to ensure the install path is not\r\nin RPATH/RUNPATH, but then this code would add it back if the install\r\ndirectory isn't a system path.\r\n\r\n* DyninstLibrary - simplify regex for header install\r\n\r\n* Rename cmake/version.h.in to cmake/dyninstversion.h.in\r\n\r\nThis makes the generated file match the generator file name.\r\n\r\n* DyninstLibrary - install from _target_PUBLIC_HEADER_FILES\r\n\r\n_public_headers was only incidentally present from the file including\r\nthis one.\r\n\r\n* parseAPI - make headers PRIVATE in dyninst_library\r\n\r\nWe manually install them because of how dataflowAPI is consumed.\r\n\r\n* Issues warning when toolkit cannot be built with LIGHTWEIGHT_SYMTAB\r\n\r\n* CMake modernization - update compiler flags (#1374)\r\n\r\n* Fix spelling of LibDW_INCLUDE_DIRS when marking it as advanced\r\n\r\n* Mark STERILE_BUILD as advanced\r\n\r\n* Mark Boost_DIR as advanced\r\n\r\n* Mark TBB_DIR as advanced\r\n\r\n* Mark Thread_DB_{INCLUDE_DIRS,LIBRARIES} and as advanced\r\n\r\n* Update README\r\n\r\n* Add gfx908 public headers\r\n\r\nThese somehow didn't make it through the rebase\r\n\r\n* Make flags for RelWithDebInfo and Release match\r\n\r\n* Disable cmake-format for extra flags in DyninstWarnings\r\n\r\n* Propagate ElfUtils_ROOT_DIR to FindLib{ELF,DW,Debuginfod}\r\n\r\n* Use 'set' instead of 'option' for stringy options\r\n\r\n* Add more cmake-format exceptions in DyninstWarnings\r\n\r\n* Add <Package>_NO_SYSTEM_PATHS to elf, dw, debuginfod\r\n\r\nThis is used to exclude system directories from the search process.\r\n\r\n* Have ElfUtils_ROOT_DIR override search paths\r\n\r\nIf the user provides a value, then no system paths (aside from the ones\r\nin CMAKE_PREFIX_PATH) are searched. This lets the user 'force' a\r\nlocation for elfutils.\r\n\r\n* Remove explicit version fail check in elfutils find-modules\r\n\r\n* Move ElfUtils_ROOT_DIR check into DyninstElfutils\r\n\r\n* Add LibIberty_NO_SYSTEM_PATHS\r\n\r\n* Add Valgrind_NO_SYSTEM_PATHS\r\n\r\n* Remove explicit version check from FindValgrind\r\n\r\n* Boost - use new meaning of Boost_ROOT_DIR\r\n\r\n* Fix typo in DyninstElfUtils\r\n\r\n* Fix bug when setting path flags\r\n\r\n* TBB - use new meaning of TBB_ROOT_DIR\r\n\r\n* Add support for common/h/unaligned_memory_access.h\r\n\r\n* Set default DYNINST_LINKER to empty\r\n\r\nThis will use the default linker. lld is the LLVM linker.\r\n\r\n* Make requesting an unknown component an error\r\n\r\n* Always build libdyninstAPI_RT.a\r\n\r\nThis is always needed by the test suite and keeps the old behavior of having it built by default.\r\n\r\n* Add DYNINST_FORCE_RUNPATH option\r\n\r\nSetting this flag forces the linker to use RUNPATH instead of RPATH.\r\nThis is most useful for working with older RedHat distros.\r\n\r\n* Reduce number of public link dependencies\r\n\r\nThis reduces the number of transitive links that have to be done by\r\nbinaries linking against Dyninst.\r\n\r\n* Make elfutils dependency public for symtab\r\n\r\nIt's needed in the Module.h public header.\r\n\r\n* Require TBB >=2019.9\r\n\r\nWhen building from source, versions before 2019.9 incorrectly set the\r\nversion in TBBConfigVersion.cmake. For example, 2018.6 sets the version\r\nto 2018.0 because it uses the TBB_{MAJOR,MINOR}_VERSION from tbb_stddef.h\r\ninstead of doing the calculation based on the engineering version.\r\n\r\nThis also unifies the versions required when compiling with gcc and clang.\r\n\r\nTBB 2018.6 was released in Oct 2018 and 2019.9 was released in Oct 2019,\r\nso this just bumps the requirement by just a year even though there are\r\nat least 9 releases in between.\r\n\r\n* Update Boost version in docker/dependencies.versions\r\n\r\n* Update filenames in dependency-version CI check\r\n\r\n* Update variable names in dependency-version CI check\r\n\r\n* Make elfutils dependency public for dynElf\r\n\r\n* bump CMake minimum version to 3.14.0\r\n\r\nThe 3.13.* family requires every 'install' to specify a \"LIBRARY\r\nDESTINATION\". We don't need or want that in the custome parseAPI install\r\n(line ~130) for exporting the public headers.\r\n\r\n* Add cmake to dependency-version CI check\r\n\r\n* Rename cdna2 -> gfx90a in new layout\r\n\r\n* Always create list of static-only sources in dyninstAPI_RT\r\n\r\n* Add common/h to BUILD_INTERFACE in 32-bit libdyninstAPI_RT\r\n\r\n* Fix building with symLite\r\n\r\nThe headers from symtabAPI are still required, even when building with symLite.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e93225713b1633a7bf6ff0d9a89c409db802173", "commit_date": "2023-04-21T19:58:43Z", "commit_message": "Add callback for parsing unknown instructions (#1276)\n\n* Add callback declarations for unknown instructions in InstructionDecoder\r\n\r\n* Update definition of callback interface\r\n\r\nThis also makes 'unknown_instruction' inconstructible.\r\n\r\n* make isValid the same as isLegalInsn\r\n\r\nThis makes it impossible to make an Instruction object from a failed\r\ndecoding process. This only affects x86.\r\n\r\n* Detect illegal instructions sooner in doIA32Decode\r\n\r\n* Don't advance the buffer when an x86 decode fails\r\n\r\n* Use a ternary to avoid linker error on some gcc's\r\n\r\nSome versions of gcc don't inline std::min _and_ need to resolve maxInstructionLength.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "308bddcb75de5df8e18d7b5af62602d9f5f818a0", "commit_date": "2023-04-20T21:01:50Z", "commit_message": "Update GFX90A Decoder  ISA-SPEC(02/22/23) (#1407)\n\nUpdate implementation for AMDGPU GFX90A based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. case label in amdgpu_gfx90a_decoder_impl.C made sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44e3bb530ccb4228588bd17635eaf77cdf5365e1", "commit_date": "2023-04-20T21:01:37Z", "commit_message": "Update GFX908 Decoder ISA-SPEC(02/22/23) (#1408)\n\nUpdate implementation for AMDGPU GFX908 based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions (dsmem)\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. Make case label in amdgpu_gfx90a_decoder_impl.C sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c401cd675058af5e873f4763a6f133fd11938ce", "commit_date": "2023-04-20T21:00:54Z", "commit_message": "Add CI workflow to build consumers of Dyninst (#1412)\n\n* Add CI workflow to build consumers of Dyninst\r\n\r\n* Build with cron", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25b37343f2f115298bd82eecf579bc3baf06b5ba", "commit_date": "2023-04-20T20:55:59Z", "commit_message": "CI workflow to build from spack (#1411)\n\n* CI workflow to build from spack\r\n\r\n* Update cron to every Sunday at 3AM\r\n\r\n* Force use of intel-tbb\r\n\r\nDue to explicit conflicts in the recipe, spack uses intel-parallel-studio which can't be used in automated builds because it prompts the user to accept a license agreement\r\n\r\n* Switch to weekly cron schedule", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0885301c49db8cfc286f41003a558005c9c7ace6", "commit_date": "2023-04-05T13:30:47Z", "commit_message": "Rename Architecture AMDGPU_CDNA2 to AMDGPU_GFX90A (#1404)\n\nRename the Architecture Arch_amdgpu_cdan2 to Arch_amdgpu_gf90a,\r\nas recommended by the vendor.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2f7af10477b0f7daf0efca2c992224711e5deb27", "commit_date": "2023-04-04T02:12:02Z", "commit_message": "Fix link bug in insnCodeGen::loadImmIntoReg on aarch64 (#1405)\n\n* Fix link bug in insnCodeGen::loadImmIntoReg on aarch64\r\n\r\nThe function template has a separate declaration and \"definition\" AND is\r\ncalled from translation units where neither is located. This only happens\r\nto work correctly when the TUs are linked in a specific order.\r\n\r\n* Remove assert\r\n\r\nThe value is now always positive.\r\n\r\n* Remove missed template usage in emit-aarch64.C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a86894f3d9120883ed4c0cf4278287c8bb43ed73", "commit_date": "2023-03-30T20:00:03Z", "commit_message": "remove unneeded zero length files (#1403)\n\n- two old commits (accidentally?) committed zero length files that\r\n  seem to serve no purpose", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1ddebd3125437d3385e65a7cce5bea715588028", "commit_date": "2023-03-23T14:25:12Z", "commit_message": "Fix UB in dwarf/dwarf_subrange.cpp::get_type (#1402)\n\nThe dwarf_* functions return a pointer to their last argument. This causes 'get_type' to return a pointer to a local variable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e952a0dfc13dbb7d665219a672733a505ee2a00", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  stack frame larger than (#1397)\n\n- increase stack frame size warning limit another 1000 bytes for\n  power_opcode_tables.C for RELEASE builds using the clang compiler", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683c85c7ef35d0afe6188271c8f697f6f839e12d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameter (conditionally) (#1397)\n\n- Add macro DYNINST_SUPPRESS_UNUSED_VARIABLE to suppress\n  warnings about unused variables\n\n- use macro to suppress function parameter that is only unused\n  when building on aarch64 and hence cannot be commented out", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "309d167d291f69d0ba9d4671ca581d6d24bf95e0", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "fix broken call to base class function (#1397)\n\n- SgAsmBinaryMultiply::get_type() rose results in infinite recursion\n  as casting the pointer to the base class and calling a function\n  still calls the derived version.  Just call the base class's function\n\n- rewrite SgAsmBinaryAdd::get_type the same way; it was not broken\n  but was convoluted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f57a5cbdfa98333527466423cbc32224874fa81", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "enable warnings in dataflowAPI/src (#1397)\n\n- separate dataflowAPI/src and dataflowAPI/rose source files\n\n- undo disabling warnings for dataflowAPI/src files\n\n- only include ABI.C as a source file once", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "766c7fad0f9f25bc5505f55a88c4f370b0f2cc69", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variable (clang compiler bug) (#1397)\n\n- add suppressions around code that contains a lock using RAII;\n  clang prior to version 10 contains a bug where it does not\n  recognized that the ctor and dtor make the variable used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e86fb6e232b370a66f407f9a0af440134bff147", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  suppress VLA warning (#1397)\n\n- Rose uses a VLA in C++ which is non-standard; for now suppress the\n  diagnostic\n\n- clang requires disabling both -Wvla and -Wvla-extension\n\n- gcc <9, 11.0 and 11.1 has a bug that requires the suppression to\n  to not be in the same macro as VLA itself", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89b22e23d4abcf48a2b1d3dd0f1ce294b4bb6260", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1397)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f7ed33ed9fac49623fea5ed2743462d8c31a062", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  missing noexcept (#1397)\n\n- declare function noexcept to allow potential optimization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "61faa14906eb2a7543867f4cb66643783ba41323", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  deprecated implicit ctor and op= (#1397)\n\n- add explicit copy ctors and operator=,\n  or delete dtor where it could be defaulted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa4713e0f2f063362a496ed03d0d0d65ff43d037", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (delete variable) (#1397)\n\n- remove variables and their initializatins that shadow a variable in\n  the enclosing scope as they were initialized with the same value", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1caea03054dbd73178ea2f40e2ca3474ff9c82e6", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (rename) (#1397)\n\n- rename names that shadow a name in an enclosing scope or class with\n  a unique name", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a309c63953a845f2d0c6e24f3bc3c4d117ef9006", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  potentially evaluated expression (#1397)\n\n- replace use of typeid(expr) where expr executes code at run-time\n  with a dynamic_cast that is obvious that it executes code at\n  run-time", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "412071df5285ecb872abaa966ae4ebb81c733573", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  overloaded virtual overrides (#1397)\n\n- import the name of the base class's virtual function(s) that were\n  overridden in the derived class to prevent hiding of the base class's\n  functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a720e99d94bfb01de40488d5dae8b45645fb284e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  copy ctor missing base class (#1397)\n\n- call the base class's copy constructor in the derived class's\n  copy constructor", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "336409431b648c18c7b51ec1c3135489f82ab7ce", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  case fallthough (#1397)\n\n- add break statement or DYNINST_FALLTHOUGH macro where a switch\n  case falls through to the next case", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "476ba11cf828964579d40a26b21e4b0eb808d560", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  printf format related (#1397)\n\n- add printf-format annotation on dataflow printf function parameter\n\n- fix format string to match parameter types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a15d069e2ce6340396e71bc283f0ac2377b4da6e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  reorder ctor initialization list (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f13b79c36af349203bddba40757b82a1206de42d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  const correctness (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b880173dc64d2d1f07e4d41b4796eac3d14873fe", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variables (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "951ebb64db730f7497ce886e8634aaa3da3cc5e7", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameters (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e9a4b86d2adbe3763fad3df38f85ac92959e26c", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  variadic macro (#1397)\n\n- replace non-standard variadic macro syntax with standard syntax\n\n- remove preprcessor check to use variadic macros if the compiler is\n  gcc;  all compilers support them", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42223b1f9118e32fe145a85a13ced32c13cd5871", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  extraneous semicolons (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ebf545849ef979aaa21bf82e8caff104cbeb6f6", "commit_date": "2023-03-15T13:47:22Z", "commit_message": "Github CI: update dev container deployment (#1400)\n\n* Log in to GHCR before building\r\n* Pull base image for cache", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab965c214b030a302aa0307b121cb9d06ab0a989", "commit_date": "2023-03-15T12:39:13Z", "commit_message": "Github CI: add line continuation in dev-containers.yaml (#1399)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f5558a15b16272eef982b5e8ddfdf172eb59036", "commit_date": "2023-03-15T12:23:31Z", "commit_message": "Add PR testing Github CI (#1393)\n\nRun on pull request to master:\r\n\r\n    Enforce formatting of CMake files, if modified\r\n    Check for changes in minimum required versions of dependencies\r\n    Ensure Dyninst, test suite, examples, and external tests all build with gcc on Ubuntu-20.04\r\n\r\nRun on push to master:\r\n\r\n    Build and deploy new dev container, ghcr.io/dyninst/amd64/<OS>:latest", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e7aa66ddef6768957faae3c62c9909590663901", "commit_date": "2023-03-09T20:15:45Z", "commit_message": "Replace 'cerr' with 'dwarf_print' in DwarfWalker::decodeLocationList (#1395)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1157c87c0b184d83e851bdd5b63582dd2a7647cf", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy with user dtor (#1394)\n\n- Make classes move-only by removing public copy constructor and\n  operator= as they contained pointer members that were just copied\n  (with no semantics of copying the data). This is a double delete\n  waiting to happen.  Luckily the pointer were always nullptr when the\n  copy constructor was called.\n\n- add move constructor (using std::move where appropriate)\n\n- clean up the classes to use default constructors and default member\n  initialization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1aeb249ff90fea49dc50efea1e6c11577bf9d90", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unneeded internal declaration (#1394)\n\n- clang warns of an unneeded internal declaration for yyinput. Since\n  yyinput is generated by flex, just suppress it for the whole file.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7cd7cdb0ba98de24b0d916b8e440db8adb0af6f9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (derived) (#1394)\n\n- Derived type classes have an operator==(const Type&) const, and they\n  call this operator with with both the lhs and rhs being the derived\n  class type.  This is ambiguous when using C++ 20's rule that considers\n  the parameters reversed.  Fix by adding an inlined non-virtual\n  operator== that takes the derived types a parameter and then\n  unambiguously calls the existing ==", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12a4fd86738c048dd82c20c31359cf7a48c082eb", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  stack frame larger than (#1394)\n\n- increase stack frame size warning limit when using the clang compiler\n  for a couple of files that needed a similar increase for gcc", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b78e883c77aefc27d1a30722b414266aa33897d1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  logical op (#1394)\n\n- add suppressions for identical clauses of a logical operator\n  even if they are only identical after evaluating constant\n  expressions that are not identical as gcc 8 and prior warn\n  about this\n\n- Suppression for these are already in place for warnings in adjacent\n  if statements, so extend the suppression to cover these also", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9dbc1e30e30ef263b174d1d2b5ca648e8ef6bf0d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  C function decls without prototype (#1394)\n\n- C functions declared as func() are a declaration without a prototype\n  (from the original K&R C), not a function that takes no parameters\n  (until C23), change all of these to func(void) which is how to\n  declare such a function in C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a2e3fd795f8ec6cb730038ec277431b0832c03c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  set but unused variables (#1394)\n\n- delete variables whose only use is to increment themselves", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6e380f7158326fc686f1b3f7ec7a01b3ac4bfe2", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (#1394)\n\nC++ 20 considers the reversed parameter of a comparison operators in\naddition to the given parameter order.  This implies that if the\nargument is const then the member function must also be const.\n\n- change    bool operator==(const T&)\n      to    bool operator==(const T&) const", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57fe4c395dff4fd11f18d2f00eb58ad25212501", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::random_shuffle is deprecated (#1394)\n\n- replace std::random_shuffle with std::shuffle", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "706fd0e3c532a3d7cfc1d752620ebed2fac65c5d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing noexcept (#1394)\n\n- declare functions noexcept", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "55d8a338e362d3aa4448aa9bae776eb90ca1292a", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1394)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b977e8d7132b312c853652a1e7e6f28eb39dbab0", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unused private field (#1394)\n\n- removed myid member from dyn_thread as it is never used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0eb0b29def9cc2d18e0fe724e536c73e7e9ef964", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy/op= with user provided dtor (#1394)\n\n- Explicitly define the implicit operator or remove the explicit\n  destructor; in C++ 20, if a destructor is explicitly defined then\n  the other constructor, assignment and move operators will not be\n  automatically generated", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9be477535debee15c2403bdc2ddedb31fdf0eb8e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  remove unused variables/members (#1394)\n\n- remove variables that were never used\n\n- remove code that only updated unused variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "344783a7954de9af7f98a5d3f0ec7c505b7536a1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (variables) (#1394)\n\n- rename variables that shadow names in containing scopes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73064a866ee1d19d8e12e2562f60b9b7f8e05406", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (enumerator names) (#1394)\n\nenumerator names shadow names in other scopes\n\n- made 3 internal enum types scoped enums:  StackAccessType,\n  operandType and patch_type_t\n\n- delete one internal and unused enum type:  frameType_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4bf4a24c514d0c395fdd27d6fe68ddf0fef89040", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "replace C-style and functional casts (#1394)\n\n- replace C-style casts ((T)e) and functional casts (T(e)) with modern\n  casts that have a clearer intent and are safer:  static_cast<T>(e),\n  and T{e}.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8d0e2760b307c7d465b56cac639c2e4a2cc93ca8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "write_memory_as to append_memory_as as appropriate (#1394)\n\n- where write_memory also updates the pointer, change then to\n  append_memory_as(...)\n\n- change '*insn++ = <value>' to append_memory_as_byte(...) to\n  be consistent with append_memory_as(...)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c21bd122187e87b74d45a5ba3ec3e3824750f9c3", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (C casts) (#1394)\n\n- fixed increased alignment warnings in C code.  The macro\n  CAST_WITHOUT_ALIGNMENT_WARNING eliminates the warning and allows for\n  future auditing.  For the code as currently written, these are all\n  aligned properly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0eeb1ee0407780ee07f603910d398f836dc2f7", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (pointers) (#1394)\n\n- fix alignment warnings of pointers by using alignas_cast<> defined in\n  common/h/raw_memory_access.h to eliminate the increase alignment\n  warning.  For the code as currently written, these are all aligned\n  properly, but these are inherently unsafe and require manual\n  inspection of the pointers involved.  An assert in alignas_cast can be\n  uncommented to validate proper alignment at runtime.\n\n- explicitly force larger alignment of one variable to eliminate warning", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "285ac938848739e02e38c044cf354dcb9d99f0b9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (#1394)\n\n- Casts of pointers to a type that has a larger alignment requirement\n  will cause an exceptions on some architectures on dereference if the\n  pointer does not meet its alignment requirements.\n\n- Add new template functions read_memory_as and write_memory_as that\n  read and write the bytes of (possibly) unaligned memory of the desired\n  data at the supplied address using the length of the template type in\n  a way that is safe even if the supplied pointer is not properly\n  aligned.\n\n- Add functions append_memory_as; like write_memory_as but updates the\n  pointer value to memory location after the bytes written.\n\n- Add template function alignas_cast to cast a pointer to another\n  pointer without producing an increased alignment warning; requires\n  manual auditing to pointer is properly aligned", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4aff07d1eba822b880558c030c7f5aec94b2ae9c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  pessimizing move (#1394)\n\n- remove unnecessary std::move's", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b88b16dba9477f18fe598fad5552758204a1558e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing override (#1394)\n\n- add override to all overridden virtual methods of a class if present\n  on any method", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84fe176ef5ab61376911570de6b506473a3c8d35", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  tautological always true comparison (#1394)\n\n- value of type unsigned char compared to 256 produces a warning as 256\n  is outside the range of the uint8_t.  256 is the number of array\n  elements (computed using sizeof's).  Changed from (n < numElems) to (n\n  <= numElems - 1) which is also always true, but the error is\n  eliminated due to 255 being within range of a uint8_t.  Ugly but makes\n  the warning disappear.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6b41075d61009b539107836591cb47b8cb3e3c8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  mismatched class/struct (#1394)\n\n- use consistent 'struct' and 'class' keyword between forward\n  declaration and definition; a mismatch is legal be breaks on\n  some versions of MS C++", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9e83871f0380068dba79648c6acee503cac5d76", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  [[fallthrough]] requires C++ 17 (#1394)\n\n- clang's __has_cpp_attribute(fallthrough) feature test macro returns\n  true, but produces warnings if used.  [[clang::fallthough]] works, so\n  force it if the language version is pre-17 with clang compiler.\n\n- fix typo in __cplusplus macro name\n\n- improve robustness: try all alternative fallthrough attributes names", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "067be96bb64a3d4191f12db1694b0fcfec51d457", "commit_date": "2023-03-02T18:41:27Z", "commit_message": "Restore PPC special-purpose registers in opposite order of saving them (#1392)\n\n* Restore PPC special-purpose registers in opposite order of saving them\r\n\r\nThis is the same fix as https://github.com/dyninst/dyninst/pull/1000,\r\nbut for PowerPC.\r\n\r\n* Reverse order of FPSCR restore", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae43ebc6f905345499ed9c55eccb007e9a69efa9", "commit_date": "2023-03-01T23:57:55Z", "commit_message": "Aarch64: Fix restoring special purpose registers order (#1000)\n\nThe special purpose registers are pushed onto the stack by\r\nEmitterAARCH64SaveRegs::saveSPRegisters. This patch reverses the order\r\nused for popping the stored registers from the stack. Without\r\nthis patch, some of the state registers get swapped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46ea3009e1e0e27bd035ac3152dc772bf861f3fd", "commit_date": "2023-03-01T19:33:16Z", "commit_message": "Avoid possible copy in BPatch::createEnum (#1390)\n\nThe Type class doesn't have a user-defined copy constructor and its\r\nimplicit declaration is deprecated in C++20. Rearranging the construction\r\nhere removes the possibility of copying.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f89cc72416fdc1d467b130f48609b8fc93126d37", "commit_date": "2023-02-28T23:54:58Z", "commit_message": "Merge pull request #1389 from dyninst/wuxx1279/gfx908/clang-error\n\nFix ambiguous override of InstructionDecoder_amdgpu_*::makeRegisterExpression", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "557a01949a4c11e8e8975fe113e4ab07b64bf25d", "commit_date": "2023-02-27T21:25:44Z", "commit_message": "add InstructionDecoderImpl::makeRegisterExpression to derived classes\n\nEliminate virtual-overloaded warning as there are 3 overloaded methods of\nInstructionDecoderImpl::makeRegisterExpression, but only 2 are defined in\nthese classes for add a using so the 3rd is not hidden.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42c3a4b497071e421686ded49ad0da406c8053ac", "commit_date": "2023-02-27T20:06:40Z", "commit_message": "Fix virtual derived signature to match base class\n\nmakeRegisterExpression in the derived class had\nan incorrect function signature, which made\ncompilation fails on gcc-6 and clang.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d15c0f714397a1316c74fc8d2c24a62a772ecc3", "commit_date": "2023-02-27T18:39:18Z", "commit_message": "Update DwarfWalker subrange handling (#1369)\n\n* Remove redundant include of libdw.h\r\n\r\n* Add subrange parsing to dynDwarf\r\n\r\n* Remove decipherBound\r\n\r\nThis implementation was neither correct nor complete. Moreover, we\r\nshouldn't be parsing FORM types. Looking for DW_TAG* is sufficient.\r\n\r\n* Remove legacy comments and commented-out code from parseArray\r\n\r\n* Improve error message in parseArray\r\n\r\n* Rename parseSubrangeAUX to parseSubrange and change interface\r\n\r\n* Replace bound calculations in parseSubrange\r\n\r\n* Update some comments and whitespace\r\n\r\n* Update construction of the result type\r\n\r\nThe LONG_MIN/MAX aren't great, but they are propagated to preserve\r\nbehavior.\r\n\r\n* Update debugging messages in parseSubrange\r\n\r\n* Have parseSubrange() call parseSubrange(Dwarf_Die*)\r\n\r\n* Use updated parseSubrange in parseMultidimensionalArray\r\n\r\n* Use std::tostring instead of snprintf\r\n\r\n* Update comments and remove dead code\r\n\r\n* Whitespace\r\n\r\n* parseMDA returns a typeArray instead of just a Type\r\n\r\n* Fix bug in dwarf_result::operator bool\r\n\r\n* Fix hi/low bound mixup in parseMDA\r\n\r\n* Try using Dyninst's parsed CU language, if needed\r\n\r\n* Display subrange DIE ID in pareSubrange\r\n\r\n* Don't create subrange type in parseSubrange\r\n\r\nThis will happen in the callee\r\n\r\n* Update parseSubrange() to use new parseSubrange(Dwarf_DIE*)\r\n\r\n* More carefully parse the child DIE\r\n\r\n* Iteratively parse the subranges in parseArray\r\n\r\n* Whitespace\r\n\r\n* Remove parseMultiDimensionalArray\r\n\r\n* Improve debug messages\r\n\r\n* Register each subrange type in parseArray\r\n\r\n* Remove common/h/dyninstversion.h\r\n\r\nThis was accidentally included.\r\n\r\n* Add copyright notices to new files\r\n\r\n* Make dwarf_result also hold a Dwarf_Word\r\n\r\nC++ doesn't guarantee it is convertible to `long`.\r\n\r\n* Only offer an interface to parse both bounds simultaneously\r\n\r\nThe calculation for a range's upper bound when DW_AT_count is used\r\nrequires knowing the lower bound (if given), so these needed to be\r\nmerged.\r\n\r\n* Use new dwarf_subrange interface in DwarfWalker::parseSubrange", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bfa6e82c2a9ef98801432324ffb3cec2a6254c5", "commit_date": "2023-02-27T14:13:39Z", "commit_message": "use default allocator for tbb::concurrent_hash_map (#1332)\n\n- gcc 12 warns about mismatched new and delete when an allocator is specified\r\n  This is likely a false positive.  Change to use the default, which uses ends\r\n  up using the same std C++ new allocator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "198b54f56cbcdb82f058d007545bdf9f36c5dce5", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "fix infinite recursion in LineInformation::addLine (#1331)\n\n- gcc 12 reported an infinite recursion for LineInformation::addLine\n  that takes the lineSource file\n- fixed by computing the string table index of lineSource and then\n  calling the addLine method that takes the index value\n- also update the lineSource type from string to const string&\n- updated documenation that had the method signature taking a const char*", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6436c734eef50d55ed6c562aa3fabf0c7039c50c", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "eliminate deprecated C++ function objects (#1331)\n\nfix function objects that were deprecate in C++ 11 and removed in C++ 17\n\n- replace mem_fun with mem_fn\n- eliminate binary_function and unary_function base classes\n- use const iterator when constructing boost::transform_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f049fe855640832950f5a6cd87db23ecb4b7533b", "commit_date": "2023-02-24T22:27:17Z", "commit_message": "Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04 (#1362)\n\n* Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04\r\n\r\n- the main issue was `/sbin/ldconfig -p` on Ubuntu 22.04 has an extra line at the end: \"Cache generated by: ldconfig (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35\"\r\n  - this would result in an occasionaly segfault\r\n- refactored the rest to avoid strtok which is known to have a fair amount of problems\r\n\r\n* fix header includes and message about delimit issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31b4d7f19f4e6585518eee179a63812f88911e6f", "commit_date": "2023-02-24T19:36:42Z", "commit_message": "Make SymtabCodeSource constructor const correct (#1293)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc38257de4d5143d097229aef7284b8e1ce6fbf5", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "SymtabAPI::Type: add support for C++ r-value references (#1159)\n\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c677008d0fa8f4ccb6d191d37493060e15d05f22", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "Improve DWARF enum parsing in Symtab::Type (#1164)\n\n* Inherit from derivedType\r\n* Add parsing of underlying type\r\n* Improve enum parsing debug information\r\n* Add support for C++ scoped enums (i.e., 'enum class')\r\n* Remove typeEnum::setName\r\n    This has no definition.\r\n* Inline default constructor\r\n* Clean up BPatch::createEnum\r\n\r\nThis removes the unnecessary construction of a separate (thread-safe!)\r\ncontainer of pairs and the associated memory leaks. It also explicitly\r\nmakes the enum's underlying type a four-byte signed int. Redundant code\r\nfrom the overload which computes the enum values was replaced by using\r\nstd::iota and calling the three-argument createEnum.\r\n\r\n* Remove factory functions\r\n\r\nAdding overloads for these would add more clutter than utility. We\r\nshould remove these from all of the types as the constructors should\r\nalways be used to ensure class invariants.\r\n\r\n* Remove non-portable constructors\r\n\r\nSince we're breaking ABI here, these constructors need to go. Manually\r\nsetting the size to `sizeof(int)` is non-portable as the\r\nBPatch::createEnum may be used to modify a binary that doesn't have the\r\nsame `int` representation as the host on which Dyninst was compiled.\r\n\r\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3046332ba3d32eccb63f8dd6ecc65afca3b2c63f", "commit_date": "2023-02-23T22:24:02Z", "commit_message": "Update global ELF ctor/dtor instrumentation for static executables (#1355)\n\nIf __libc_csu_init doesn't exist, try to insert the constructor call into the beginning of 'main'. If __libc_csu_fini doesn't exist, try to insert the constructor call into the beginning of 'exit'.\r\n\r\n* Use C-style strings for symbol names\r\n\r\nThere's no need to have a std::string object that incurs the overhead of a constructor/destructor call to just hold a literal that's only visible in the current translation unit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "bolo/amdgpu_call": [{"commit_oid": "bef2a707838fe4d630b37445f519746a8467d808", "commit_date": "2023-08-28T15:58:05Z", "commit_message": "Merge branch 'master' into bolo/amdgpu_call", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bf6e869f966112344d627d3044f5e76fcbbc9676", "commit_date": "2023-08-21T15:31:02Z", "commit_message": "Move inst2ast example to examples repo (#1492)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c2e31c0886b30f7b7b07b1e7ab840d3bb5521d1", "commit_date": "2023-08-21T15:30:15Z", "commit_message": "Remove parseAPI examples (#1494)\n\n* Remove parseAPI/doc/code_sample.cc\r\n\r\nThis exists in the dyninst/examples repository as 'disassemble'.\r\n\r\n* Remove parseAPI/doc/example.cc\r\n\r\nThis exists in the dynint/examples repository as 'CFGraph'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "692ff9f4b7e52f5689f880e01bfdd708a0dcdc14", "commit_date": "2023-08-18T21:47:43Z", "commit_message": "Remove patchAPI/test/findPoint (#1490)\n\nIt uses code that is no longer available and the functionality it\r\ncovers is already in the testsuite.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "82268024ac1a4c180b9da876010e5b3abfa5a2ac", "commit_date": "2023-08-18T21:47:25Z", "commit_message": "Remove patchAPI/example (#1491)\n\nIt is already in the examples repository under 'insertSnippet'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "369ec2d033d4554229d5e9228acdeb68791b1f85", "commit_date": "2023-08-18T17:30:14Z", "commit_message": "Remove AObject::symsToModules_ (#1488)\n\n* Remove AObject::findModuleForSym\r\n\r\nIts usage was removed by 4e4a375a4 in 2016.\r\n\r\n* Remove AObject::setModuleForOffset\r\n\r\nIts usage was removed by 0e5d83405 in 2016.\r\n\r\n* Remove use of AObject::symsToModules_ in Object-nt\r\n\r\nIt is only ever written to, and its usage was removed by 4e4a375a4\r\nin 2016.\r\n\r\n* Remove use of AObject::symsToModules_ in Object-elf\r\n\r\nIt is only ever written to, and its usage was removed by 4e4a375a4\r\nin 2016.\r\n\r\n* Remove unused parameters and variables\r\n\r\nThese are no longer needed.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7132622b1fc93f763437c7f6f1170916bfc983e9", "commit_date": "2023-08-18T15:27:49Z", "commit_message": "Remove Module::setName (#1485)\n\nThis is never called internally. The filename corresponding to the\r\nmodule is a class invariant. It makes no sense to make it mutable. This\r\nmember function is not documented.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a49e5e5a882f5035cc01ca9e2962f341748b34be", "commit_date": "2023-08-18T15:27:20Z", "commit_message": "Remove declaration of image::getModuleLanguageInfo (#1486)\n\nIt's definition was removed by 6c65e3c9a in 2007.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "366f9201032c51d2f15b1c4f5f96d541a21feb7f", "commit_date": "2023-08-18T15:26:59Z", "commit_message": "Remove declaration of Object::load_shared_object (#1487)\n\nIts definition was removed by 758aa226 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d40984a42345144c842bc7be469f9f9c9d314be5", "commit_date": "2023-08-18T15:26:15Z", "commit_message": "Remove unused Object::getFileName (#1489)\n\nIts usage was removed by 760bfda6e in 2019. It's also confusing because\r\nit could return either the object's SONAME or the Module's filename.\r\nThese two things are not the same.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "789b9468d8a9160972e64d1aae0239e06cbf980d", "commit_date": "2023-08-17T23:59:11Z", "commit_message": "Clean up unused global variables in Object-elf.C (#1483)\n\n* Clean up stab globals\r\n\r\nThese were removed by 5e142effc in 2021.\r\n\r\n* Remove unused globals from old symbol fixer\r\n\r\nThese were removed by 9de709ec5 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d73b4e956ca820cb145a56c74a1637164f2283bd", "commit_date": "2023-08-17T17:14:32Z", "commit_message": "Update Instruction::allowsFallThrough() to not\nfall through AMD procedure call return instructions.\n\nPlace more instruction classes for decode  in include\nfiles so they can be mechanically generated without\nhand-editing dyninst source files.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "47605aa681ca733a7d3ab6e7fbc7dee3fc83913b", "commit_date": "2023-08-17T15:21:47Z", "commit_message": "Remove unused Object::find_symbol in Object-elf (#1480)\n\nIts usage was removed by 9de709ec5 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc408511ee37c72bd4444de69fd4c34bd07de786", "commit_date": "2023-08-17T15:21:21Z", "commit_message": "Remove Symtab::updateIndices (#1481)\n\nIts usage was removed by cabbe58ff in 2015. It's a private function, so\r\nthere are no API/ABI issues in removing it.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5a12cccf2395d6a6fc0a5156c420016a04cf8d27", "commit_date": "2023-08-11T20:41:26Z", "commit_message": "Clean up SymtabAPI::LineInformation class (#1479)\n\n* Remove unused member variables\r\n\r\nThese were added by 0dee1c8f8 in 2016, but never used.\r\n\r\n* Remove redundant visibility specifiers\r\n\r\n* Remove useless comments\r\n\r\nThese are either incorrect or just noise.\r\n\r\n* Make the class uninheritable\r\n\r\nThis appears to be some remnants of someone's scratch/dev work.\r\n\r\n* Use a default dtor\r\n\r\nNo reason to have it.\r\n\r\n* Reduce string copies\r\n\r\nThese parameters are only ever read from.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cc88eac20fdbd2b7ce3450ec1cca3e7eb417ee24", "commit_date": "2023-08-09T23:23:24Z", "commit_message": "Remove Symtab::forceFullLineInfoParse (#1478)\n\nIt was added by 1867619517b3 in 2015, but was never implemented.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9cba0b348ce2006ce8a41e8ab549f05abbac377f", "commit_date": "2023-08-09T19:56:52Z", "commit_message": "Don't include compiler-specific headers (#1477)\n\nIncluding anything in <bits/*> is not portable. Also, the contents of\r\nthis header were never used.\r\n\r\nStan Cox (scox@redhat.com) reported:\r\n\r\nIt's not included as the first thing in the file, which means it can't\r\nuse the precompiled version of that header\r\n(https://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html) and\r\ntherefore it's just including the entire C++ standard library, which is\r\ngoing to be much slower than just including the right headers.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5055bcf55802fa9a57d7dd4e5397a978ee8d4d0", "commit_date": "2023-08-09T07:09:13Z", "commit_message": "Fix AMDGPU register formatting (#1473)\n\n* Separate out AMDGPU register formatting\r\n\r\nHere we extract the logic of displaying multiple registers as\r\na single operand when doing instruction formatting into a separate helper\r\nfunction that is only called when the architecture is passed to\r\nInstruction.format or Operand.format;\r\n\r\nThis change enables the ability get register operand name in two ways:\r\nConsider s[0:3]\r\n1. Without passing in architecture, each register will be printed separately.\r\nThat is s0,s1,s2,s3\r\n2. By passing in architecture, the first register will return a string\r\nfor the entire group, and the rest will return empty string.\r\nThat is s[0:3],\"\",\"\",\"\"\r\nThese empty strings will later be discarded by the\r\nArchitectureSpecificFormatter functions.\r\n\r\n* Fix missing parameter for makeRegisterExpression\r\n\r\nDuring one of the PRs that targets compiler warning,\r\nthe num_elements parameter to makeRegisterExpression is omitted,\r\nresulting in all register operands are displayed separately,\r\nwhether they should be displayed as a group or not.\r\n\r\nIn addition to adding the parameter, certern unused helper functions\r\nand fields of InstructionDecoder-amdgpu-gfx*** has been removed\r\nto avoid shadowing of variable names.\r\n\r\nNote that this change isn't applied to vega as we don't have ISA-XML for\r\nit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b6fcbb0c4f647fe4fbd39db1e0fb8cbc5cd1206f", "commit_date": "2023-08-08T19:45:36Z", "commit_message": "Clean up SymtabAPI::Function classes (#1475)\n\n* Remove undefined FunctionBase constructors\r\n\r\nThey were added by 5ed068167 in 2013, but never defined.\r\n\r\n* Make ~FunctionBase public\r\n\r\nFunctionBase is intended to be derived from and thus derived types can\r\nbe deleted through pointers to base. This would cause UB in the current\r\nstate.\r\n\r\nhttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual\r\n\r\n  A base class destructor should be either public and virtual, or\r\nprotected and non-virtual\r\n\r\n* Make Function(Symbol *) public\r\n\r\nIt's awkward having it be protected and then friended so it can be used.\r\nJust make it part of the API.\r\n\r\n* Function should not export its interface.\r\n\r\nThese functions should override those in FunctionBase, but should not\r\ndefine a new interface.\r\n\r\n* Explicitly mark overridden members in Function\r\n\r\n* Make InlinedFunction(FunctionBase *) public\r\n\r\nIt's awkward having it be protected and then friended so it can be used.\r\nJust make it part of the API.\r\n\r\n* Make ~InlinedFunction public\r\n\r\nInlinedFunction is intended to be derived from and thus derived types\r\ncan be deleted through pointers to base. This would cause UB in the\r\ncurrent state.\r\n\r\nhttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual\r\n\r\n  A base class destructor should be either public and virtual, or\r\nprotected and non-virtual\r\n\r\n* Make InlinedFunction::getModule public\r\n\r\nIt's a pure virtual member in FunctionBase, so making it protected here\r\nmeans that calls through a pointer to InlinedFunction could generate a\r\nruntime error. gcc and clang seem to \"do what I mean\" even though it's\r\nill-formed. It also removes the astonishment that `getModule` isn't\r\naccessible through the public interface even though it is required to be\r\nthere.\r\n\r\nFrom C++11 standard (n3242):\r\n\r\n11 Member access control [class.access]\r\n\r\n5. It should be noted that it is access to members and base classes that\r\nis controlled, not their visibility. Names of members are still visible,\r\nand implicit conversions to base classes are still considered, when\r\nthose members and base classes are inaccessible. The interpretation of a\r\ngiven construct is established without regard to access control. If the\r\ninterpretation established makes use of inaccessible member names or\r\nbase classes, the construct is ill-formed.\r\n\r\n* InlinedFunction should not export its interface.\r\n\r\nThese functions should override those in FunctionBase, but should not\r\ndefine a new interface.\r\n\r\n* Explicitly mark overridden members in InlinedFunction", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "67dfbb4ac8f5a6c1f98395983ff3a6ba57527101", "commit_date": "2023-08-03T17:55:51Z", "commit_message": "Fix hang when creating ELF dynamic sections (#1474)\n\nThis is triggered when a binary with no .rel.dyn and .rela.dyn\r\nsections, but its target platform uses rel type relocation records.\r\n\r\nThis happened on an AMDGPU binary that was previously incorrectly\r\nspecified as using a rel relocation record.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2733adbfa588a896fe5ba85e8deedd2873e7778c", "commit_date": "2023-08-01T14:57:27Z", "commit_message": "Merge branch 'bolo/amdgpu_call' of github.com:dyninst/dyninst into bolo/amdgpu_call", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "005ddd02eb1d4af7baf12e2246573e079497ad47", "commit_date": "2023-08-01T14:55:35Z", "commit_message": "Dyninst continues parsing amdgpu binaries after a procedure call.\n\nPreviously, dyninst would not \"fall through\" instruction parsing\nat a procedure call instruction.    This has been changed to allow\na continuation edge for further parsing of a binary.\n\nAMD GPU Call instructions are broken out into a seperate include\nfile that can be updated from the automation, to avoid further\nhand-edits as more AMDGPU architectures are supported.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b12b128af291b20d9b90ce2a32c8b4a01fbac21f", "commit_date": "2023-08-01T14:35:05Z", "commit_message": "Dyninst continues parsing amdgpu binaries after a procedure call.\n\nPreviously, dyninst would not \"fall through\" instruction parsing\nat a procedure call instruction.    This has been changed to allow\na continuation edge for further parsing of a binary.\n\nAMD GPU Call instructions are broken out into a seperate include\nfile that can be updated from the automation, to avoid further\nhand-edits as more AMDGPU architectures are supported.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8fa753d955d43747aa46b0a528a81a0d9adf677d", "commit_date": "2023-07-27T14:25:14Z", "commit_message": "Do not decode operands for invalid opcode (#1467)\n\nCo-authored-by: Xiaozhu Meng <xmeng@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "43026f99ba03d71ec6105c4b52ad70759645a733", "commit_date": "2023-07-27T14:24:18Z", "commit_message": "Add support for EM_INTELGT (#1468)\n\nIt's unclear at this time how we should treat Intel's XE Gen12/Tiger Lake binaries, so we just treat them as Gen9 (Ponte Vecchio) for now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d94f856514d7e312d5d4bd704ddac8b166c48c4e", "commit_date": "2023-07-26T21:22:18Z", "commit_message": "do not export Instruction::appendOperand (#1466)\n\n- do not export since it is now private, and should not have been used\r\n  externally (comment said it was to work around old compiler issue).\r\n\r\n- cleanup method order and remove comment", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7456c05b979130eba42c4ee39a9ed00c92de2ba4", "commit_date": "2023-07-26T15:34:22Z", "commit_message": "add getDisplayOrderedOperands interface (#1465)\n\nAdd method Instruction::getDisplayOrderedOperands to return the\r\noperands that are displayed (non implicit operands) when formatting an\r\ninstruction for disassembly.  Returns a vector of Operands in display\r\norder.\r\n\r\nThese operands can be inspected and formatted to produce a disassembly\r\nstring with annotations.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6394752592546df5adff6bc7edb2d8bde330842d", "commit_date": "2023-07-26T03:27:07Z", "commit_message": "modernize ArchSpecificFormatter classes (#1464)\n\n- pass string and vector parameters by const reference instead of by\r\n  value for performance\r\n\r\n- add ArchSpecificFormatter::getInstructionString and remove the overridden\r\n  versions in the non-x86_64 as they were functionally the same, but not\r\n  identically written\r\n\r\n- remove virtual and add override to overridden methods\r\n\r\n- make methods const, use map::at instead of map::operator[]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25ad35c6762df4c40c68bd2fc3f6428efbd45a28", "commit_date": "2023-07-25T18:12:00Z", "commit_message": "improve intel instruction & operand formatting (#1463)\n\nThis fixes three issues when formatting an x86_64 instruction or its\r\noperands:\r\n\r\n1) Fix the order of operands when formatting the instruction to be the\r\n   AT&T syntax order.  If the instruction had three or more operands.\r\n   Conversion from the internal (Intel) order rotated right by 1 instead\r\n   of reversing the operands.\r\n\r\n2) Eliminate special treatment of register %kN as the first operand as\r\n   mask registers in Instruction::format as Operand::format already\r\n   formats these as masks (enclosed in braces) and not all uses of mask\r\n   registers are as a mask.\r\n\r\n3) Fix Operand::format to produce the correct disassembly operand\r\n   string.  The formatting of the internal Expression needs to be done\r\n   for some indirect values.  This was done in the Instruction::format\r\n   instead of directly in Operand::format\r\n\r\n* x86Formatter::getInstructionString - fixes 1, 2, 3\r\n\r\n* Operand::format - fixes 3\r\n\r\n* x86Formatter::formatRegister - cleanup, remove malloc that could leak", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e38d57c9904ab623350e90e0e3adcab2afcf2100", "commit_date": "2023-07-25T18:08:54Z", "commit_message": "fix x86_64 ret instruction formatting (#1457)\n\nThe ret instruction formats incorrectly with an operand of '(%rsp)'.  The\r\noperand should have been flagged as implicit so it is not included in\r\nthe output.\r\n\r\n- eliminate all but one overloaded Instruction::appendOperand` using\r\n  default parameters\r\n\r\n- add isImplicit parameter defaulting to false to\r\n  Instruction::addSuccessor\r\n\r\n- add isImplicit to the ret instruction's addSuccessor call to set the\r\n  ret_addr (which adds the operand to the Instruction object)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88a774dfa36208bc297b65dc18fdfe4e2e66140c", "commit_date": "2023-07-25T18:07:02Z", "commit_message": "modernize InstructionAPI::Operand class (#1456)\n\n* modernize InstructionAPI::Operand class\r\n\r\n- eliminate all but one of the constructors by using default parameters\r\n\r\n- remove destructor (unnecessarily virtual, and reset a member\r\n  shared_ptr), copy ctor, and copy assignment declarations to allow the\r\n  compiler to generate default versions that are equivalent or better\r\n  than the hand written versions\r\n\r\n- add default member initializers for all members\r\n\r\n- make Operand constructor explicit", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e17bc861ac69ddf6f55629b9912dca37e87d05d", "commit_date": "2023-07-25T17:41:03Z", "commit_message": "Fix x86 misspelled, incorrect, and invalid opcodes (#1421)\n\n* Fix spelling of 'vpperm' stringification\r\n\r\n* Fix spelling of 'vpcomd' stringification\r\n\r\n* Fix spelling of 'vprolvd' stringification\r\n\r\n* Fix spelling of 'vprolvq' stringification\r\n\r\n* Remove duplicate entry for 'e_vpsrlvq'\r\n\r\n* Rename 'vpclmullqlqdq' to 'vpclmulqdq'\r\n\r\n* Rename 'punpcklqd' to 'punpckldq'\r\n\r\n* Replace 'punpckhqd' with 'punpckhqdq'\r\n\r\n* Replace 'pcmpgdt' with 'pcmpgtd'\r\n\r\n* Remove instruction 'vpcmpequd'\r\n\r\nThis mnemonic does not exist in any of Intel Architecture Instruction\r\nSet Extensions, AMD Architecture Programmers Manual, or Intel\r\nArchitecutre Software Developer's Manual.\r\n\r\nThe encoding listed under 'SSET1E_66' is a reserved space.\r\n\r\n* Rename mnemonic for 'prefect_w' to 'prefetchw'\r\n\r\n* Rename 'pclmullqlqdq' to 'pclmulqdq'\r\n\r\nThis is a pseudo-opcode for pclmulqdq when imm8 is 0x0.\r\nThe encoding is 660F3A44, so the lookup table location is correct.\r\n\r\n* Remove 'mmxud'\r\n\r\nIt is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'movslq'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'pcommit'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Rename 'cmpsd_sse' to 'cmpsd'\r\n\r\n* Fix spelling of 'vphaddsw' mnemonic\r\n\r\n* Fix spelling of 'vblendpd' mnemonic\r\n\r\n* Remove redundant copy of 'prefetchwt1'\r\n\r\n* Remove redundant 'phsubsw'\r\n\r\n* Remove redundant 'sarx'\r\n\r\n* Remove redundant 'shlx'\r\n\r\n* Remove redundant 'vblendvpd'\r\n\r\n* Remove redundant 'vcmppd'\r\n\r\n* Remove redundant 'vcmpps'\r\n\r\n* Remove redundant 'vcmpsd'\r\n\r\n* Remove redundant 'vcmpss'\r\n\r\n* Remove redundant 'vpmaddubsw'\r\n\r\n* Remove redundant 'vpmaddwd'\r\n\r\n* Remove redundant 'vpmovsdb'\r\n\r\n* Remove redundant 'vpmovsdw'\r\n\r\n* Remove redundant 'vpmovsqb'\r\n\r\n* Remove redundant 'vpmovsqd'\r\n\r\n* Remove redundant 'vpmovsqw'\r\n\r\n* Remove redundant 'vpmovswb'", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d14dff71691f51fb6b96179a87b4cee6d3a34e6b", "commit_date": "2023-07-25T16:19:35Z", "commit_message": "Remove Object::dwarf_parse_aranges (#1462)\n\nIt's usage was removed by 4be991a7 in 2021.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d82356b795db373fd66b098a8ba6073a07ba6089", "commit_date": "2023-07-24T19:02:44Z", "commit_message": "Fix EM_AMDGPU to use RELA as Region Type (#1444)\n\nAccording to the llvm page\r\nhttps://llvm.org/docs/AMDGPUUsage.html#relocation-records\r\nAMDGPU backend generates Elf64_Rela records.\r\n\r\nThis fix added the case for EM_AMDGPU to\r\nstatic Region::RegionType getRelTypeByElfMachine\r\nsuch that it uses RELA instead of the default REL type.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "96f6344d195bb74f30e209c48ee64c8397421dcd", "commit_date": "2023-07-24T17:56:55Z", "commit_message": "Remove lazy initialization of IBSTrees in Symtab (#1454)\n\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes Symtab::mod_lookup threadsafe.\r\n\r\n* Fix includes in Function.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Fix includes in Variable.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Use Function.h instead of forward declarations\r\n\r\nThis removes duplicate typedefs, as well.\r\n\r\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes its use in\r\nSymtab::parseFunctionRanges threadsafe.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "649e43fa2d26aa3c5245b05bac1038f407c869a9", "commit_date": "2023-07-21T17:49:14Z", "commit_message": "Make Symtab::getContainingInlinedFunction lazy parsing threadsafe (#1452)\n\nThis fix does not address the thread safety issues in\r\nSymtab::parseFunctionRanges. That function is still thread unsafe and\r\nwill require separate modifications.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab915557f2ee64c538515fcdfed250e23dc40e19", "commit_date": "2023-07-14T23:39:33Z", "commit_message": "Clean up Symtab constructors (#1451)\n\n* Use default member initializers instead of initializer lists\r\n\r\nThere are members missing from the lists. This also simplifies the\r\nconstructors considerably.\r\n\r\n* Remove unhelpful message in default ctor\r\n\r\n* Delegate to default ctor in Symtab(MappedFile*)\r\n\r\nThis fixes the bug of inconsistent base initialization and ensures the\r\nconstructors are consistent.\r\n\r\n* Use delegating ctor for Symtab::Symtab(unsigned char*...)\r\n\r\nThis fixes the following bugs\r\n\r\n1. Invoke init_debug_symtabAPI before calling create_printf.\r\n\r\n2. Because this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.\r\n\r\n* Use delegating ctor for Symtab::Symtab(std::string...)\r\n\r\nBecause this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683b050d6132ce6a9e0cc5cad35d497b2d2d9cc2", "commit_date": "2023-07-14T21:08:09Z", "commit_message": "Explicitly delete unusable special member functions in Symtab (#1450)\n\nBecause there is a user-defined destructor, the compiler will not generate the special member functions (e.g., copy assignment operator). However, we explicitly delete them here to signal that this class is not copyable or movable.  The destructor is also moved to the top of the class to be next to the other special member functions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84786bd694d2c2163d6e8fbd2190271db1868ff3", "commit_date": "2023-07-14T20:20:25Z", "commit_message": "Remove Symtab::mfForDebugInfo (#1449)\n\nIt is never used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88bf2091da5aa9a018afb1f1db67fe6ffeb4773b", "commit_date": "2023-07-14T19:30:50Z", "commit_message": "Remove Symtab::checkPPC64DescriptorSymbols (#1448)\n\nThe definition was commented out in 3709ead48 in 2009.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7014ee1b08ffa17381b6f0bcda9b94368cb83937", "commit_date": "2023-07-14T19:30:30Z", "commit_message": "Remove Symtab copy constructor (#1447)\n\nThere are several reasons for this.\r\n\r\n1. It doesn't copy every member of the class\r\n2. IBSTree doesn't have a copy constructor\r\n3. mod_lookup_ and func_lookup_ are not copied, but are recreated in other member functions (e.g., mod_lookup()). This completely breaks the semantics of a copy ctor.\r\n4. Resets _ref_cnt to 1", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "beae2a07b5e0a40de54ee1aa972ac765e4d825b2", "commit_date": "2023-07-11T16:11:00Z", "commit_message": "add header files to directly define std:: syms (#1443)\n\n- update dyninst header files to directly include the standard header\r\n  file defining symbols from the standard C++ library that are used by\r\n  the dyninst header file; in some instances, the code relied on symbols\r\n  being defined via an unrelated include file indirectly including the\r\n  necessary header file leading to fragile code\r\n\r\n- minor other cleanups:  remove unnecessary header files, remove\r\n  definitions of names that are defined in a standard header file", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9696c64a3a1d6f41241d27c3c51820616490efa6", "commit_date": "2023-06-15T15:41:23Z", "commit_message": "Fix vector instruction lengths (#1439)\n\nThe following instruction decoded with the wrong length if the modrm\r\noperand specified a memory access as all the operand was incorrectly\r\nspecified to be a register only operand:\r\n\r\n- vcvtpd2udq\r\n- vcvtss2usi\r\n- vcvttpd2qq\r\n- vcvtudq2pd\r\n- vcvtudq2ps\r\n- vpblendd\r\n- vpermpd", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44d86e56068f62b9ac03f7d7537098fd3728fcdb", "commit_date": "2023-05-11T19:26:58Z", "commit_message": "Fix several resource leaks (#1435)\n\n* Local var leak in Symtab::addSymbol\r\n\r\nThis was found using cppcheck's memleak.\r\n\r\n* memCache::doOperation\r\n\r\nNot technically a leak, but cppcheck can't see through the 'push_back'.\r\n\r\n* PCProcess::hasPassedMain\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* parse_func::calcParentFunc\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* int_iRPC::setBinarySize\r\n\r\nFound using cppcheck's publicAllocationError.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8676f10714fb0bb7d0a3e7c65ec729d7db195d94", "commit_date": "2023-05-11T17:47:08Z", "commit_message": "Fix undefined behavior in integer operations (#1434)\n\n* Shifting signed 32-bit value by 31 bits is undefined behavior\r\n\r\nThis was found using cppcheck's shiftTooManyBitsSigned.\r\n\r\n* Signed to unsigned conversion in calculation\r\n\r\nThese were found using cppcheck's signConversion.\r\n\r\n* Fix signed overflow\r\n\r\nThis was found using cppcheck's integerOverflowCond.\r\n\r\n* Shifting negative value\r\n\r\nThis was found using cppcheck's shiftNegativeLHS.\r\n\r\n* BPatch_addressSpace::deleteSnippet: fix enumeral conversion in conditional", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c4a422834fbc3e6159ba00f10820f13c1958901e", "commit_date": "2023-05-10T19:01:00Z", "commit_message": "Prevent use of possibly-uninitialized local variable (#1433)\n\nThese were found using cppcheck's uninitvar and eraseDereference.\r\n\r\nFor the usages of iterator-like classes in process.C, they aren't strictly\r\nuninitialized variable usages since the classes in question are standard\r\nlayout types. It would be better to replace the usages there with list\r\nconstruction to avoid the static check altogether.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0c88bea297cb64cf147192242aaa3a4047cdb84", "commit_date": "2023-05-10T17:51:52Z", "commit_message": "Fix uninitialized member variables (#1431)\n\nThese were detected by cppcheck's uninitMemberVar*.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a73abaa9c7298a3e4ce0acf4eb14db8b1cb42fc", "commit_date": "2023-05-10T15:45:14Z", "commit_message": "Fix use of null pointer after check (#1432)\n\nThese were found using cppcheck's nullPointerRedundantCheck.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "68fc3d8a5f1527dcaa66c9455369c62e2b4fa54c", "commit_date": "2023-05-10T05:14:42Z", "commit_message": "Protect against self-assignment in copy constructors (#1430)\n\n* Protect against self-assignment in copy constructors\r\n\r\nThese were found by cppcheck:\r\n\r\ncommon/src/Node.C:198:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nNodeIterator &NodeIterator::operator=(const NodeIterator &rhs) {\r\n                            ^\r\ncommon/src/Edge.C:108:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nEdgeIterator &EdgeIterator::operator=(const EdgeIterator &rhs) {", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce097b5399fb654f68fbfe48e25e7a7bd567bf82", "commit_date": "2023-05-10T04:07:40Z", "commit_message": "Fix windows warnings (#1429)\n\n* Mismatched printf format arguments\r\n\r\nThese were found using cppcheck's invalidPrintfArgType_*.\r\n\r\n* Fix uninitialized member variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85fb0f95050c903bf1e1a1dbcacf1913dad1d73b", "commit_date": "2023-05-09T20:05:56Z", "commit_message": "Remove virtual calls in constructor/destructor (#1428)\n\n* AddressTranslateWin\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-win.C:49:17: style: Virtual function 'init' is called from constructor 'AddressTranslateWin(PID pid,PROC_HANDLE phandle)' at line 168. Dynamic binding is not used. [virtualCallInConstructor]\r\n   virtual bool init();\r\n\r\n* NodeIteratorPredicateObj\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:293:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateObj(Graph::NodePredicate::Ptr\r\np,NodeIterator&b,NodeIterator&e)' at line 331. Dynamic binding is not\r\nused. [virtualCallInConstructor]\r\n\r\n* NodeIteratorPredicateFunc\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:352:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateFunc(Graph::NodePredicateFunc\r\np,void*u,NodeIterator&b,NodeIterator&e)' at line 394. Dynamic binding is\r\nnot used. [virtualCallInConstructor]\r\n\r\n* InstructionDecoder_x86\r\n\r\nFound using cppcheck:\r\n\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: style: Virtual function 'setMode' is called from constructor 'InstructionDecoder_x86(Architecture a)' at line 144. Dynamic binding is not used. [virtualCallInConstructor]\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n                                                ^\r\ninstructionAPI/src/InstructionDecoder-x86.C:144:28: note: Calling setMode\r\n      if(a == Arch_x86_64) setMode(true);\r\n                           ^\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: note: setMode is a virtual function\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n\r\n* CFGFactor::destroy_block\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:117:18: style: Virtual function 'free_block' is called from destructor '~CFGFactory()' at line 92. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_block(Block * b);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:92:5: note: Calling destroy_block\r\n    destroy_block(b);\r\n    ^\r\nparseAPI/src/CFGFactory.C:182:5: note: Calling free_block\r\n    free_block(b);\r\n    ^\r\nparseAPI/h/CFGFactory.h:117:18: note: free_block is a virtual function\r\n    virtual void free_block(Block * b);\r\n\r\n* CFGFactor::free_func\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:116:18: style: Virtual function 'free_func' is called from destructor '~CFGFactory()' at line 95. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_func(Function * f);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:95:5: note: Calling destroy_func\r\n    destroy_func(f);\r\n    ^\r\nparseAPI/src/CFGFactory.C:172:4: note: Calling free_func\r\n   free_func(f);\r\n   ^\r\nparseAPI/h/CFGFactory.h:116:18: note: free_func is a virtual function\r\n    virtual void free_func(Function * f);\r\n\r\n* CFGFactor::free_edge\r\n\r\n* ~freebsd_process\r\n\r\nFound using cppcheck:\r\n\r\nproccontrol/src/freebsd.C:1046:17: warning: Member variable 'freebsd_thread::is_exited' is not initialized in the constructor. [uninitMemberVar]\r\nfreebsd_thread::freebsd_thread(int_process *p, Dyninst::THR_ID t, Dyninst::LWP l)\r\n                ^\r\nproccontrol/src/freebsd.h:122:17: style: Virtual function 'getEventQueue' is called from destructor '~freebsd_process()' at line 795. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual int getEventQueue();\r\n                ^\r\nproccontrol/src/freebsd.C:795:22: note: Calling getEventQueue\r\n    int eventQueue = getEventQueue();\r\n                     ^\r\nproccontrol/src/freebsd.h:122:17: note: getEventQueue is a virtual function\r\n    virtual int getEventQueue();", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6ab42a4da20f7d9a5a58c00a4835d337a95fef5", "commit_date": "2023-05-09T17:30:44Z", "commit_message": "AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak (#1427)\n\n* AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-sysv.C:1046:58: error: Resource leak: fd [resourceLeak]\r\n   if (read(fd, &e_hdr, sizeof(e_hdr)) != sizeof(e_hdr)) return base;\r\n                                                         ^\r\ncommon/src/addrtranslate-sysv.C:1048:28: error: Resource leak: fd [resourceLeak]\r\n   if (e_hdr.e_phoff == 0) return base;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5409c471292cb8b1c87e9b5ae1e94fa9b6eb573", "commit_date": "2023-05-09T17:09:20Z", "commit_message": "Make CondVar non-copyable, non-moveable (#1426)\n\nThis makes it consistent with std::condition_variable.\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]\r\n   mutex = new mutex_t;\r\n   ^\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]\r\n   mutex = new mutex_t;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "45614d7908e36d32d26126d2844d388c6936ba61", "commit_date": "2023-05-02T18:17:06Z", "commit_message": "Github CI: increase number of build jobs (#1424)\n\nGithub only allows one CPU core per job, but any number of threads. Testing shows that N=2 threads reduces build time by 2-2.5x, N=3 by 2.2x, and N=4 increases build time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e37524ab88b645328c1f02b5c4ab7ac0f7e8d3f", "commit_date": "2023-05-02T02:13:22Z", "commit_message": "Github CI: make compiler multi-build a cron job (#1425)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8952d3207763a26938e097e58ebe97b490c73cf", "commit_date": "2023-05-01T17:32:12Z", "commit_message": "CI compiler multibuilds (#1415)\n\n* Weekly build across all compiler versions and build types\r\n\r\n* Use DYNINST_WARNINGS_AS_ERRORS=ON instead of -Werror", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2e26598a5301ff900d2ca235db729d1dd4c4d350", "commit_date": "2023-05-01T16:45:24Z", "commit_message": "Use default TBB when doing CI spack build (#1423)\n\nDyninst now requires TBB >= 2019.9.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7621bc85ac0cda3bd1b2a17d78aac6d48c68280a", "commit_date": "2023-04-28T00:34:11Z", "commit_message": "Add ubuntu-22.04 to dev container build (#1419)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "719036aeb55c459a355afb91188cfa4d7d465bc9", "commit_date": "2023-04-27T23:51:51Z", "commit_message": "Refactor Dockerfile.ubuntu (#1420)\n\n* Move elfutils logic into build_elfutils.sh\r\n\r\n* Whitespace\r\n\r\n* Copy in dependencies.versions\r\n\r\nThis is no longer done in the base container because it didn't make\r\nsense there as that image should never change.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8d1a313be087154aad95d660b9fe2b34f4da492", "commit_date": "2023-04-27T22:33:27Z", "commit_message": "warning fix:  stack frame size (#1418)\n\n- when compiling with clang 15 and 16 in addition to clang 14,\r\n  allow a 40000 stack frame size", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a9c9e061ea6b41b93151f0ed3b34208346b4881", "commit_date": "2023-04-27T21:28:12Z", "commit_message": "Make InstructionAPI::isArrayIndexValid const. (#1416)\n\nclang complains:\r\n\r\n  'constexpr' non-static member function will not be implicitly 'const'  in C++14; add 'const' to avoid a change in behavior [-Werror,-Wconstexpr-not-const]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "739ad57883f032fb18a6c741f0c2f98e9a766bc7", "commit_date": "2023-04-25T17:03:44Z", "commit_message": "CMake modernization (#1391)\n\n# Changes to building Dyninst\r\n- Minimum CMake version is 3.14.0\r\n- STERILE_BUILD is now deprecated\r\n- ENABLE_LTO was renamed to DYNINST_ENABLE_LTO\r\n- CMAKE_EXPORT_COMPILE_COMMANDS is no longer set\r\n- Platform detection is done natively in CMake\r\n  - full support for Linux on x86, AMD64, ppc64le, and aarch64/ARMv8\r\n  - experimental support for 32-bit FreeBSD and Windows on x86\r\n- Custom install targets <target>-install have been removed\r\n- Installation subpaths (bin, lib, include, etc.)  are no longer user-configurable\r\n- Static versions of Dyninst libraries now depend on other static Dyninst libraries\r\n  - For example, libDynElf.a now depends on libcommon.a, not libcommon.so\r\n- Libraries that cannot build with symlight now warn when LIGHTWEIGHT_SYMTAB=ON\r\n- User build options passed via CMAKE_<LANG>_FLAGS are correctly preserved and override the builtin options\r\n- <PackageName>_ROOT_DIR now implies <PackageName>_NO_SYSTEM_PATHS and sets <PackageName>_ROOT\r\n  - This forces CMake to find the package at the given location or in CMAKE_PREFIX_PATH\r\n  - When using CMake >= 3.16, searching CMAKE_PREFIX_PATH can be disabled with CMAKE_FIND_USE_CMAKE_PATH=OFF\r\n  - For example, -DElfUtils_ROOT_DIR=/some/path sets ElfUtils_NO_SYSTEM_PATHS=ON and ElfUtils_ROOT=/some/path\r\n\r\n## RPATH handling\r\n- CMP0060 is active and so libraries are linked by their full paths even in implicit directories (e.g., /usr/lib/foo.so instead of -lfoo)\r\n- Populate RPATHs for binaries in the build tree: set(CMAKE_SKIP_BUILD_RPATH FALSE)\r\n- Do not use the install path as the RPATH: set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)\r\n  - $ORIGIN is used instead\r\n- Add paths to any directories outside the project that are in the linker search path or contain linked library files: set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\r\n\r\n## Third-party libraries (tpl)\r\n- The ability to build tpls from source has been removed\r\n- All libraries must have a CMakeConfig.cmake\r\n- Minimum versions\r\n  - Boost: 1.71.0\r\n  - TBB/oneapi-tbb: 2019.9\r\n  - elfutils: 0.186\r\n- An imported interface named Dyninst::<library> is created for each library\r\n  - includes are marked SYSTEM so they don't produce warnings\r\n  - exported in DyninstConfig.cmake as per https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n- pkgconfig is used to find elfutils and valgrind\r\n  - if pkgconfig fails, a manual search is done\r\n  - This can be disabled with  ElfUtils_NO_SYSTEM_PATHS=ON\r\n\r\n# Changes to consuming Dyninst as a CMake project\r\n- All targets are in the Dyninst namespace; e.g., symtabAPI is now Dyninst::symtabAPI\r\n- Each third-party library has an associated imported interface named Dyninst::<library>, e.g., Dyninst::Boost\r\n  - Users are encouraged to use these, if the same library is need in their applications\r\n- DYNINST_LIBRARIES has been removed\r\n- DYNINST_INCLUDE_DIR is now deprecated and will be removed in a future version\r\n  - Use the provided targets, instead\r\n- DYNINST_INTERNAL_DEFINES is now deprecated and will be removed in a future version\r\n- DYNINST_PLATFORM is now deprecated and will be removed in a future version\r\n- find_package(Dyninst ... COMPONENTS ...) now works correctly\r\n- Version constraints for find_package(Dyninst X.Y.Z) now work correctly\r\n  - Dyninst only guarantees ABI compatibility between major releases, so only the same major versions are compatible\r\n\r\nUsers who are not ready to fully migrate to the new Dyninst CMake package may use the following to preserve backward compatibility:\r\n\r\ncmake\r\nif(TARGET Dyninst::common)\r\n  foreach(t common symtabapi ...)\r\n    add_library(${t} INTERFACE IMPORTED)\r\n    target_link_libraries(${t} INTERFACE Dyninst::${t})\r\n  endforeach()\r\nendif()\r\n\r\n* Update minimum CMake version to 3.13.0\r\n\r\n* Rename CMake files to prevent name collisions\r\n\r\nWhen consumed as a subproject, the CMake files could be imported into the parent project where the filenames could collide.\r\n\r\n* Prepend to CMAKE_MODULE_PATH instead of overwriting\r\n\r\n* Fix capitalization error in FindThread_DB\r\n\r\nThis should silence the warning about Thread_Db versus Thread_DB\r\n\r\n* Require CMake package for TBB (#1322)\r\n\r\n* Make libdl/dbghelp private linkage\r\n\r\n* Remove TBB flags from toolkits that don't use TBB\r\n\r\n* Remove FindTBB.cmake\r\n\r\nAll supported TBB versions ship as CMake packages, so this is no longer\r\nneeded.\r\n\r\n* Remove from-source build option\r\n\r\n* Create an imported target for TBB used by Dyninst\r\n\r\nThis is needed to force the include directories to be considered 'system' directories so that compiler warnings from TBB sources are ignored\r\n\r\n* Rename cmake/ThreadingBuildingBlocks.cmake -> cmake/tpls/DyninstTBB.cmake\r\n\r\nThis is needed to keep the namespace clean for DyninstConfig.cmake\r\n\r\n* Export TBB as part of the Dyninst CMake package\r\n\r\nThis is required by the CMake guidelines:\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nIn particular,\r\n  \"All required dependencies of a package must also be found in the package configuration file\"\r\n\r\n* Format DyninstTBB.cmake\r\n\r\n* Boost CMake modernization (#1330)\r\n\r\n* Remove FindBoost.cmake\r\n\r\nUse the one provided by CMake so we don't have to maintain this one.\r\n\r\n* Remove from-source build\r\n\r\n* Remove user-configurable version\r\n\r\n* Force use of multithreaded libraries\r\n\r\nWe don't need to include Threads here. Boost will do that.\r\n\r\n* Disable use of statically-linked runtime\r\n\r\n* Remove Boost_DEBUG\r\n\r\n* Always enable searching system paths\r\n\r\n* Unify path calculations, pass to find_package as hints\r\n\r\n* Clean up comments\r\n\r\n* Use include_guard\r\n\r\n* Allow using Boost's CMake package\r\n\r\nIt is now provided by default since 1.70.0 which is the current minimum\r\nacceptable version.\r\n\r\n* Remove rest of cache variables\r\n\r\n* Remove MSVC-specific template define\r\n\r\nWe can add this back, if we find there are newer VCs still affected.\r\n\r\n* Make Dyninst::Boost imported interface target\r\n\r\nThis is needed to make the include directories be \"system\" directories\r\nso that warnings in their headers do not propagate into Dyninst.\r\n\r\n* Do not add Boost as a dependency for all libs\r\n\r\n* Make find_package QUIET\r\n\r\n* Use Boost_* variables instead of calculating includes, libs, etc.\r\n\r\n* Make a header-only wrapper target\r\n\r\n* Add to Dyninst package\r\n\r\n* Update CMakeLists\r\n\r\n* Set Boost_NO_WARN_NEW_VERSIONS\r\n\r\n* Bump minimum version to 1.71.0\r\n\r\n* Elfutils cmake modernization (#1333)\r\n\r\n* Rename FindLibDwarf -> FindLibDW\r\n\r\n* Update FindLibDW\r\n\r\n* Rename FindLibElf -> FindLibELF\r\n\r\n* Update FindLibELF\r\n\r\n* Create FindElfutils\r\n\r\n* Update FindLibDebuginfod\r\n\r\n* Update DyninstElfUtils\r\n\r\n* Update the CMakeLists to use new targets\r\n\r\n* Use CMP0074 in updated Find modules\r\n\r\nThis enables use of <Package>_ROOT variables when find_package is\r\ninvoked.\r\n\r\n* Provide default dummy interface target for ElfUtils::ElfUtils\r\n\r\nNeeded for non-Unix platforms.\r\n\r\n* Fix rebase bug in CMakeLists.txt\r\n\r\n* Export DyninstElfUtils\r\n\r\n* Forward QUIET flag to pkg_check_modules\r\n\r\n* Forward version to pkg_check_modules\r\n\r\n* Use lib from pkg-config, if found\r\n\r\n* Clean up internal variables\r\n\r\n* Simplify cache variable handling\r\n\r\n* Use full linkage name for libs returned by pkg-config\r\n\r\n* Separate out dependent libraries in FindLibDW\r\n\r\nSome platforms include libelf as a dependency, but IMPORTED_LOCATION accepts only a single entry. Store the rest in IMPORTED_LINK_DEPENDENT_LIBRARIES.\r\n\r\n* Fix quoting bug in FindLibDW\r\n\r\n* Fix lib check in FindLibDW\r\n\r\n* Manually set PC_<XXX>_INCLUDE_DIRS when FindPkgConfig misses it\r\n\r\nFindPkgConfig uses the output from pkg-config --cflags-only-I <lib> to set PC_<XXX>_INCLUDE_DIRS. Because libelf is usually in a system directory, pkg-config will return nothing for this. FindPkgConfig stores the actual includedir variable from the PC file, so we can fetch it from there.\r\n\r\n* Libiberty cmake modernization (#1334)\r\n\r\n* LibIberty cmake modernization\r\n\r\n* Use INCLUDE_DIRS directly\r\n\r\n* Threaddb cmake modernization (#1338)\r\n\r\n* Update FindThread_DB\r\n\r\n* Update thread_db\r\n\r\n* Update docs URL\r\n\r\n* Use OpenMP target (#1339)\r\n\r\nThis also provides a dummy target so we don't have to do any additional checking when USE_OpenMP=OFF. We only use OpenMP_CXX, so I didn't create a target for the other languages (C,Fortran).\r\n\r\n* Valgrind cmake modernization (#1340)\r\n\r\n* Update valgrind\r\n\r\n* Add version check in Find module\r\n\r\n* Remove Valgrind_LIBRARIES\r\n\r\nThey are versioned by architecture, so are hard to nail down with\r\nfind_library. We also don't need them (at least not yet).\r\n\r\n* Make dummy when ADD_VALGRIND_ANNOTATIONS=OFF\r\n\r\n* Add compile defs\r\n\r\n* Update CMakeLists.txt\r\n\r\n* Make the dummy IMPORTED\r\n\r\n* Fix bug with version handling in DyninstBoost\r\n\r\n* Use _min_version in DyninstBoost\r\n\r\nThis is so the CI version check will work uniformly\r\n\r\n* Add existence check for Dyninst::Boost before creating target\r\n\r\n* Clean up find_package flag handling in Find modules\r\n\r\n* Make variable exports uniform across Find modules\r\n\r\n* Coalesce calls to set_target_properties in Find modules\r\n\r\n* Fix bug in DyninstElfutils when calling find_package LibDebuginfod\r\n\r\n* Make just one exported target in FindElfutils\r\n\r\n* Add target existence check in DyninstTBB\r\n\r\n* Add SYSTEM property to Elfutils includes\r\n\r\n* Remove export of DYNINST_LIBRARIES\r\n\r\n* Preserve user's module path when looking for Dyninst modules\r\n\r\n* Manually set legacy DYNINST_INCLUDE_DIR\r\n\r\nThis is now deprecated.\r\n\r\n* Use CMAKE_CURRENT_LIST_DIR intead of DYNINST_CMAKE_DIR\r\n\r\n* Install Find modules for third-party libraries\r\n\r\n* Remove unused DyninstConfigVersion.cmake\r\n\r\n* Remove unneeded comments in DyninstOptions\r\n\r\n* Move all options to DyninstOptions\r\n\r\n* Remove modification of CMAKE_CONFIGURATION_TYPES\r\n\r\nWe just support the usual configs.\r\n\r\n* Move Dyninst version strings to base CMakeLists.txt\r\n\r\n* Move internal includes into base CMakeListst.txt\r\n\r\nThis ensures that all user options and internal settings are in place\r\nbefore third-party dependencies are configured.\r\n\r\n* Clean up 3rd party includes in base CMakeLists.txt\r\n\r\n* Remove unused version strings\r\n\r\n* Remove unneeded 'add_dependencies(common boost)' in base CMakeListst.txt\r\n\r\nThis is now handled directly in CMake recipe for common.\r\n\r\n* Remove unused testsuite include in base CMakeLists.txt\r\n\r\n* Update the project declaration\r\n\r\n* Move setting of CMAKE_BUILD_TYPE to base CMakeLists.txt\r\n\r\nThis keeps all CMake-level variables in one place.\r\n\r\n* Don't set CMAKE_EXPORT_COMPILE_COMMANDS\r\n\r\nThe user should set this.\r\n\r\n* Move BUILD_SHARED_LIBS into base CMakeLists.txt\r\n\r\n* Remove unused INSTALL_DOC_DIR\r\n\r\n* Make cmake_minimum_required a FATAL_ERROR\r\n\r\n* Move rpath and shared lib settings into DyninstLibrary\r\n\r\n* Move installation items into DyninstInstall.cmake\r\n\r\n* Automatically generate DyninstConfigVersion.cmake\r\n\r\n* Use configure_package_config_file to generate DyninstConfig.cmake\r\n\r\nThis will provide more utilities to make a more robust Config.cmake\r\n\r\n* Use INSTALL_INCLUDE_DIR to set DYNINST_INCLUDE_DIR\r\n\r\n* Use PACKAGE_INIT in Config.cmake.in\r\n\r\nAlso use it for DYNINST_INCLUDE_DIR\r\n\r\n* Don't explicitly set Dyninst_FOUND\r\n\r\nThe caller's find_package will do this.\r\n\r\n* Remove unused DyninstSystemPaths.cmake\r\n\r\n* Simplify visibility settings and move to DyninstLibrary\r\n\r\n* Move SYMREADER calculation to base CMakeLists.txt\r\n\r\nIt is needed in several places before DyninstLibrary is included.\r\n\r\n* Merge platform calculations into a DyninstPlatform.cmake\r\n\r\n* Remove DyninstVisibility include\r\n\r\n* Moved configure_file back to base CMakeListst\r\n\r\nThe ordering matters until common gets an explicit list of header files (currently uses a glob).\r\n\r\n* Remove DyninstConfigVersion.cmake.in\r\n\r\nThis isn't needed anymore since the version file is generated automatically.\r\n\r\n* Remove custom target install\r\n\r\ncmake_install.cmake isn't intended to be used that way.\r\n\r\n* Remove install logic from dyninst_library\r\n\r\nThat is now handled in DyninstInstall.\r\n\r\n* cmake-format: set tab size to 2\r\n\r\n* cmake-format: don't format comments\r\n\r\n* Calculate platform from CMake-provided mechanisms\r\n\r\nThese are equivalent to the existing bash, but more adaptable.\r\n\r\n* Map stringy names into CMake variables\r\n\r\n* Replace Windows platform check with DYNINST_OS_Windows\r\n\r\n* Replace Linux platform check with DYNINST_OS_Linux\r\n\r\n* Replace FreeBSD platform check with DYNINST_OS_FreeBSD\r\n\r\n* Replace x86 platform check with DYNINST_OS_x86_64\r\n\r\n* Replace ppc platform check with DYNINST_ARCH_ppc64le\r\n\r\n* Replace aarch64 platform check with DYNINST_ARCH_aarch64\r\n\r\n* Replace mangled platform checks with explicit DYNINST_{OS,ARCH}\r\n\r\n* Rename PLATFORM to DYNINST_PLATFORM and export it as legacy\r\n\r\nThis is only used in the test suite.\r\n\r\n* Don't pass -m64 explicitly on ppc64le\r\n\r\nWe only support 64-bit ppc, so this is redundant and non-portable.\r\n\r\n* Remove commented-out define for aarch64\r\n\r\n* Simplify CapArchDef\r\n\r\nWith the new variables, only one pass over the OS names is needed.\r\n\r\n* Allow FreeBSD to build on i386\r\n\r\nI previously thought it was only allowed on x86_64, but there is an old platform called i386-unknown-freebsd7.2.\r\n\r\n* Add Windows to DYNINST_PLATFORM\r\n\r\n* Replace usage of WIN32 with DYNINST_OS_Windows\r\n\r\n* Replace usage of UNIX with DYNINST_OS_UNIX\r\n\r\n* Merge Linux+FreeBSD checks into UNIX check\r\n\r\n* symtabAPI - replace i386 check\r\n\r\n* Use 'option' instead of 'set(... CACHE ...)'\r\n\r\n* Deprecate STERILE_BUILD\r\n\r\n* DyninstOptions - use 'OFF' instead of 'NO'\r\n\r\n* Get rid of dyninst_link_private_library\r\n\r\nWe require CMake >= 3.13.0 so this is no longer needed.\r\n\r\n* Rename SOVERSION to DYNINST_SOVERSION\r\n\r\nSOVERSION is a keyword.\r\n\r\n* Replace LIBVERSION with DYNINST_LIBVERSION\r\n\r\nFor clarity and consistency.\r\n\r\n* Replace DYNINST_ROOT with PROJECT_SOURCE_DIR\r\n\r\n* Move library settings into DyninstLibrarySettings.cmake\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR absolute\r\n\r\nIn 'install', they are relative to CMAKE_INSTALL_PREFIX by default.\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR cache variables\r\n\r\nThere's no need to let the user modify these locations.\r\n\r\n* DyninstLibrarySettings - reuse INSTALL vars\r\n\r\nThis just makes sure changes are propagated.\r\n\r\n* DyninstLibrarySettings - remove INSTALL_BIN_DIR\r\n\r\nIt's not used.\r\n\r\n* DyninstLibrary - rename INSTALL_*_DIR -> DYNINST_INSTALL_*DIR\r\n\r\nThis is more in line with the naming convention of GNUInstallDirs. We\r\ncould use GNUInstallDirs directly, but there's no need to let the user\r\nconfigure the install directory layout.\r\n\r\n* DyninstLibrarySettings - Use 'Dyninst' instead of PROJECT_NAME\r\n\r\nThis is the only placed PROJECT_NAME is used, so make it consistent.\r\n\r\n* DyninstLibrarySettings - update RPATH handling\r\n\r\n* DyninstLibrary - don't manually create cmake_install.cmake\r\n\r\nThese are automatically created and installed by 'install'.\r\n\r\n* DyninstLibrary - Merge calls to set_target_properties\r\n\r\n* DyninstLibrary - Cleanup superfluous variable usage\r\n\r\n* DyninstLibrary - add Windows defines to targets instead of directories\r\n\r\n* DyninstLibrary - add LIGHTWEIGHT_SYMTAB, SW_ANALYSIS_STEPPER to targets\r\n\r\n* DyninstLibrary - add DYNINST_DIAGNOSTIC_NO_SUPPRESSIONS to targets\r\n\r\n* DyninstLibrary - export all targets to DyninstTargets.cmake\r\n\r\n* DyninstLibrary - don't treat each library as a separate component\r\n\r\n'COMPONENT' in 'install' is used to group targets into \"bags\" of useful\r\nfeatures that can be independently installed using cmake --install .\r\n--component .... That doesn't work for Dyninst. Note: This is\r\northogonal to the concept of a COMPONENT in find_package.\r\n\r\n* DyninstLibrary - remove CLEAN_DIRECT_OUTPUT\r\n\r\nWe no longer offer per-library build targets.\r\n\r\n* DyninstLibrary - remove WITHOUT_SYMTAB_API and WITHOUT_SYMLITE\r\n\r\nThese are never used.\r\n\r\n* DyninstLibrary - refactor global defines in 'dyninst_library'\r\n\r\n* DyninstLibrary - Move calculation of SYMREADER\r\n\r\n* DyninstLibrary - rename 'target' to '_target'\r\n\r\n'target' is a keyword\r\n\r\n* DyninstLibrary - add named arguments\r\n\r\n* DyninstLibrary - rename SRC_LIST with _target_SOURCE_FILES\r\n\r\nThe latter is created from the named argument 'SOURCE_FILES'.\r\n\r\n* DyninstLibrary - Replace ACTUAL_TARGETS with _all_targets\r\n\r\n* DyninstLibrary - make headers part of library declaration\r\n\r\nThis tracks file changes to signal rebuilds.\r\n\r\n* DyninstLibrary - add links, properties, includes to all targets\r\n\r\nThis synchronizes the SHARED and STATIC libraries.\r\n\r\n* DyninstLibrary - link private and public deps separately\r\n\r\n* DyninstLibrary - Set include directories on interfaces\r\n\r\nThis replaces using PUBLIC_HEADERS which is really intended for use with\r\nMacOS Framework targets.\r\n\r\n* DyninstLibrary - remove LIBRARY_OUTPUT_DIRECTORY\r\n\r\nThe default is CMAKE_CURRENT_BINARY_DIR, so no need to specify it.\r\n\r\n* DyninstLibrary - Apply DEFINES passed to dyninst_library\r\n\r\n* DyninstLibrary - make SHARED library explicit\r\n\r\n* DyninstLibrary - don't deref Boolean variable\r\n\r\n* DyninstLibrary - update message\r\n\r\n* DyninstLibrary - Install headers, preserving the directory structure\r\n\r\n* DyninstLibrary - \"return\" the list of generated target names\r\n\r\n* DyninstLibrary - add directory-level include guard\r\n\r\n* common - remove spurious files\r\n\r\nAdded in 2015.\r\n\r\n* common - move generation of dyninstversion.h into CMakeLists.txt\r\n\r\n* common - add global include guard in CMakeLists\r\n\r\n* common - explicitly list header files in CMakeLists\r\n\r\nThis makes it easier to see what the actual public files are.\r\n\r\n* common - refactor source list calculation\r\n\r\n* common - move include of DyninstLibrary into subdirectory\r\n\r\n* common - use new dyninst_library\r\n\r\n* common - set includes and Windows stuff on all targets\r\n\r\n* common - write 'dyninstverison.h' into source dir\r\n\r\n* elf - make a dummy target for non-Unix OSes\r\n\r\n* elf - use new dyninst_library\r\n\r\n* dwarf - use new dyninst_library\r\n\r\nThe changes here are the same as for elf/CMakeLists\r\n\r\n* symlite - make symlite/h/SymLite-elf.h publicly consumable\r\n\r\nIt refers to files in the build tree that aren't available in the\r\ninstall tree. Although this file is in the install tree, it was never\r\nconsumable by users. Updating this is of questionable utility, but it at\r\nleast gives us the opportunity to write tests against the public\r\ninterface.\r\n\r\n* symlite - use new dyninst_library\r\n\r\n* instructionAPI - use new dyninst_library\r\n\r\n* symtabAPI - use new dyninst_library\r\n\r\n* proccontrol - use new dyninst_library\r\n\r\n* parseAPI - use full path to common/h/util.h.\r\n\r\nThis prevents confusion with parseAPI/h/util.h.\r\n\r\n* parseAPI - use new dyninst_library\r\n\r\nThis one is different from the rest because parseAPI and dataflowAPI\r\nhave circular dependencies on each other, so it's not currently possible\r\nto split them up.\r\n\r\n* stackwalk - use new dyninst_library\r\n\r\nPreviously, FORCE_FRAME_POINTER was applied to _all_ of Dyninst. The\r\ncommit comments said it was supposed to be just for the stackwalk\r\nsources, so that is the new behavior.\r\n\r\n* stackwalk - incorporate check of SW_ANALYSIS_STEPPER\r\n\r\nIt only affects stackwalk, so no need to put it on all of the targets.\r\n\r\n* stackwalk - put SW_ANALYSIS_STEPPER check in post-processing\r\n\r\nThis tidies up the code a bit.\r\n\r\n* patchAPI - use new dyninst_library\r\n\r\n* dyninstAPI - use absolute include path for 'debug.h'\r\n\r\n* dyninstAPI - add missing include for Dyninst::Address\r\n\r\nThis was transitively included, but breaks when reording includes.\r\n\r\n* dyninstAPI - add missing include for std::set\r\n\r\n* dyninstAPI - use new dyninst_library\r\n\r\n* dynC_API - use new dyninst_library\r\n\r\n* parseThat - use new dyninst_library\r\n\r\n* dyninstAPI_RT - use new dyninst_library\r\n\r\n1. SRC_ASSEMBLY was never used. The assembly files have always been\r\nexplicitly listed.\r\n\r\n2. We are still linking libdl.so on the static versions of the runtime.\r\nThis hasn't been an issue in the past, so we'll leave it.\r\n\r\n3. The creation of the lists of source files has redundant checks in it,\r\nbut this version is much clearer on what is actually happening.\r\n\r\n4. CHECK_C_COMPILER_FLAG_EXTENDED was removed since CMake now supports a\r\nmuch larger set of compilers and Dyninst has dropped support for HP,\r\nSun, and XL.\r\n\r\n5. The config is much less noisy. There was no reason to determine if\r\n32-bit support would work when the user didn't ask for it. Now, the\r\nconfig will fail if the user asks for 32-bit libraries and the compiler\r\ncan't create them.\r\n\r\n* Remove top-level project includes\r\n\r\nAll of the necessary includes are now handled by each toolkit via\r\nexplicit import/export of targets and include directories.\r\n\r\n* Remove top-level check for SYMREADER\r\n\r\nThe respective CMakeLists now handle this.\r\n\r\n* Add better handling of Threads/pthread\r\n\r\n1. Move Threads include into a tpls module\r\n\r\n2. Link against Threads::Threads instead of 'pthread'\r\n\r\n3. Add explicit dependencies in dyninstAPI and dyninstAPI_RT (they were\r\nimplicit before).\r\n\r\n* DyninstConfig - Correctly detect presence of COMPONENTS on import\r\n\r\nThis previously didn't work at all because DYNINST_${COMP}_FOUND should\r\nhave been spelled Dyninst_${COMP}_FOUND. This is simpler and allows the\r\nuse of check_required_components directly.\r\n\r\n* DyninstConfig - Remove unneeded and (now) incorrect comments\r\n\r\n* Make an OpenMP tpl module\r\n\r\nThis will make it easier to export OpenMP in DyninstConfig. It also makes CMakeLists.txt have just straight-line code.\r\n\r\n* Include all third-party libraries in DyninstConfig\r\n\r\nThis is explicitly required by the CMake documentation:\r\n\r\n  \"All required dependencies of a package must also be found in the\r\npackage configuration file.\"\r\n\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nThis also ensures that the custom Dyninst:: targets are always available\r\nto consumers.\r\n\r\n* Ensure static libraries depend on static Dyninst libraries\r\n\r\nWhen creating a static Dyninst library, ensure that it depends on the\r\ncorresponding static Dyninst library. For example, libDynElf.a should\r\ndepend on libcommon.a, not libcommon.so.\r\n\r\n* DyninstWarnings - Ignore no-pragma warnings for non-Werror builds\r\n\r\n* DyninstCapArchDef - rename UNIFIED_DEFINES\r\n\r\nDYNINST_PLATFORM_CAPABILITIES is more descriptive.\r\n\r\n* DyninstCapArchDef - add include guard\r\n\r\n* DyninstLibrary - add DYNINST_PLATFORM_CAPABILITIES to all targets\r\n\r\n* DyninstLibrary - add documentation\r\n\r\n* DyninstLibrary - update comment about install dir structure\r\n\r\n* DyninstLibrary - install runtime in 'bin'\r\n\r\n* Include 'src' and 'h' subdirectories in BUILD_INTERFACE\r\n\r\nEvery toolkit has a similar directory structure, so we can do this\r\nin just one location instead of in each CMakeLists.\r\n\r\n* Unswitch loops for platform-specific target updates in CMakeLists\r\n\r\nThis is really a code beautification.\r\n\r\n* Remove DYNINST_LIBVERSION\r\n\r\nIt's never different from DYNINST_VERSION and has no special purpose.\r\n\r\n* Remove system path detection in RPATH calculations\r\n\r\nWe use CMAKE_BUILD_WITH_INSTALL_RPATH to ensure the install path is not\r\nin RPATH/RUNPATH, but then this code would add it back if the install\r\ndirectory isn't a system path.\r\n\r\n* DyninstLibrary - simplify regex for header install\r\n\r\n* Rename cmake/version.h.in to cmake/dyninstversion.h.in\r\n\r\nThis makes the generated file match the generator file name.\r\n\r\n* DyninstLibrary - install from _target_PUBLIC_HEADER_FILES\r\n\r\n_public_headers was only incidentally present from the file including\r\nthis one.\r\n\r\n* parseAPI - make headers PRIVATE in dyninst_library\r\n\r\nWe manually install them because of how dataflowAPI is consumed.\r\n\r\n* Issues warning when toolkit cannot be built with LIGHTWEIGHT_SYMTAB\r\n\r\n* CMake modernization - update compiler flags (#1374)\r\n\r\n* Fix spelling of LibDW_INCLUDE_DIRS when marking it as advanced\r\n\r\n* Mark STERILE_BUILD as advanced\r\n\r\n* Mark Boost_DIR as advanced\r\n\r\n* Mark TBB_DIR as advanced\r\n\r\n* Mark Thread_DB_{INCLUDE_DIRS,LIBRARIES} and as advanced\r\n\r\n* Update README\r\n\r\n* Add gfx908 public headers\r\n\r\nThese somehow didn't make it through the rebase\r\n\r\n* Make flags for RelWithDebInfo and Release match\r\n\r\n* Disable cmake-format for extra flags in DyninstWarnings\r\n\r\n* Propagate ElfUtils_ROOT_DIR to FindLib{ELF,DW,Debuginfod}\r\n\r\n* Use 'set' instead of 'option' for stringy options\r\n\r\n* Add more cmake-format exceptions in DyninstWarnings\r\n\r\n* Add <Package>_NO_SYSTEM_PATHS to elf, dw, debuginfod\r\n\r\nThis is used to exclude system directories from the search process.\r\n\r\n* Have ElfUtils_ROOT_DIR override search paths\r\n\r\nIf the user provides a value, then no system paths (aside from the ones\r\nin CMAKE_PREFIX_PATH) are searched. This lets the user 'force' a\r\nlocation for elfutils.\r\n\r\n* Remove explicit version fail check in elfutils find-modules\r\n\r\n* Move ElfUtils_ROOT_DIR check into DyninstElfutils\r\n\r\n* Add LibIberty_NO_SYSTEM_PATHS\r\n\r\n* Add Valgrind_NO_SYSTEM_PATHS\r\n\r\n* Remove explicit version check from FindValgrind\r\n\r\n* Boost - use new meaning of Boost_ROOT_DIR\r\n\r\n* Fix typo in DyninstElfUtils\r\n\r\n* Fix bug when setting path flags\r\n\r\n* TBB - use new meaning of TBB_ROOT_DIR\r\n\r\n* Add support for common/h/unaligned_memory_access.h\r\n\r\n* Set default DYNINST_LINKER to empty\r\n\r\nThis will use the default linker. lld is the LLVM linker.\r\n\r\n* Make requesting an unknown component an error\r\n\r\n* Always build libdyninstAPI_RT.a\r\n\r\nThis is always needed by the test suite and keeps the old behavior of having it built by default.\r\n\r\n* Add DYNINST_FORCE_RUNPATH option\r\n\r\nSetting this flag forces the linker to use RUNPATH instead of RPATH.\r\nThis is most useful for working with older RedHat distros.\r\n\r\n* Reduce number of public link dependencies\r\n\r\nThis reduces the number of transitive links that have to be done by\r\nbinaries linking against Dyninst.\r\n\r\n* Make elfutils dependency public for symtab\r\n\r\nIt's needed in the Module.h public header.\r\n\r\n* Require TBB >=2019.9\r\n\r\nWhen building from source, versions before 2019.9 incorrectly set the\r\nversion in TBBConfigVersion.cmake. For example, 2018.6 sets the version\r\nto 2018.0 because it uses the TBB_{MAJOR,MINOR}_VERSION from tbb_stddef.h\r\ninstead of doing the calculation based on the engineering version.\r\n\r\nThis also unifies the versions required when compiling with gcc and clang.\r\n\r\nTBB 2018.6 was released in Oct 2018 and 2019.9 was released in Oct 2019,\r\nso this just bumps the requirement by just a year even though there are\r\nat least 9 releases in between.\r\n\r\n* Update Boost version in docker/dependencies.versions\r\n\r\n* Update filenames in dependency-version CI check\r\n\r\n* Update variable names in dependency-version CI check\r\n\r\n* Make elfutils dependency public for dynElf\r\n\r\n* bump CMake minimum version to 3.14.0\r\n\r\nThe 3.13.* family requires every 'install' to specify a \"LIBRARY\r\nDESTINATION\". We don't need or want that in the custome parseAPI install\r\n(line ~130) for exporting the public headers.\r\n\r\n* Add cmake to dependency-version CI check\r\n\r\n* Rename cdna2 -> gfx90a in new layout\r\n\r\n* Always create list of static-only sources in dyninstAPI_RT\r\n\r\n* Add common/h to BUILD_INTERFACE in 32-bit libdyninstAPI_RT\r\n\r\n* Fix building with symLite\r\n\r\nThe headers from symtabAPI are still required, even when building with symLite.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e93225713b1633a7bf6ff0d9a89c409db802173", "commit_date": "2023-04-21T19:58:43Z", "commit_message": "Add callback for parsing unknown instructions (#1276)\n\n* Add callback declarations for unknown instructions in InstructionDecoder\r\n\r\n* Update definition of callback interface\r\n\r\nThis also makes 'unknown_instruction' inconstructible.\r\n\r\n* make isValid the same as isLegalInsn\r\n\r\nThis makes it impossible to make an Instruction object from a failed\r\ndecoding process. This only affects x86.\r\n\r\n* Detect illegal instructions sooner in doIA32Decode\r\n\r\n* Don't advance the buffer when an x86 decode fails\r\n\r\n* Use a ternary to avoid linker error on some gcc's\r\n\r\nSome versions of gcc don't inline std::min _and_ need to resolve maxInstructionLength.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "308bddcb75de5df8e18d7b5af62602d9f5f818a0", "commit_date": "2023-04-20T21:01:50Z", "commit_message": "Update GFX90A Decoder  ISA-SPEC(02/22/23) (#1407)\n\nUpdate implementation for AMDGPU GFX90A based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. case label in amdgpu_gfx90a_decoder_impl.C made sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44e3bb530ccb4228588bd17635eaf77cdf5365e1", "commit_date": "2023-04-20T21:01:37Z", "commit_message": "Update GFX908 Decoder ISA-SPEC(02/22/23) (#1408)\n\nUpdate implementation for AMDGPU GFX908 based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions (dsmem)\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. Make case label in amdgpu_gfx90a_decoder_impl.C sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c401cd675058af5e873f4763a6f133fd11938ce", "commit_date": "2023-04-20T21:00:54Z", "commit_message": "Add CI workflow to build consumers of Dyninst (#1412)\n\n* Add CI workflow to build consumers of Dyninst\r\n\r\n* Build with cron", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25b37343f2f115298bd82eecf579bc3baf06b5ba", "commit_date": "2023-04-20T20:55:59Z", "commit_message": "CI workflow to build from spack (#1411)\n\n* CI workflow to build from spack\r\n\r\n* Update cron to every Sunday at 3AM\r\n\r\n* Force use of intel-tbb\r\n\r\nDue to explicit conflicts in the recipe, spack uses intel-parallel-studio which can't be used in automated builds because it prompts the user to accept a license agreement\r\n\r\n* Switch to weekly cron schedule", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0885301c49db8cfc286f41003a558005c9c7ace6", "commit_date": "2023-04-05T13:30:47Z", "commit_message": "Rename Architecture AMDGPU_CDNA2 to AMDGPU_GFX90A (#1404)\n\nRename the Architecture Arch_amdgpu_cdan2 to Arch_amdgpu_gf90a,\r\nas recommended by the vendor.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2f7af10477b0f7daf0efca2c992224711e5deb27", "commit_date": "2023-04-04T02:12:02Z", "commit_message": "Fix link bug in insnCodeGen::loadImmIntoReg on aarch64 (#1405)\n\n* Fix link bug in insnCodeGen::loadImmIntoReg on aarch64\r\n\r\nThe function template has a separate declaration and \"definition\" AND is\r\ncalled from translation units where neither is located. This only happens\r\nto work correctly when the TUs are linked in a specific order.\r\n\r\n* Remove assert\r\n\r\nThe value is now always positive.\r\n\r\n* Remove missed template usage in emit-aarch64.C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a86894f3d9120883ed4c0cf4278287c8bb43ed73", "commit_date": "2023-03-30T20:00:03Z", "commit_message": "remove unneeded zero length files (#1403)\n\n- two old commits (accidentally?) committed zero length files that\r\n  seem to serve no purpose", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1ddebd3125437d3385e65a7cce5bea715588028", "commit_date": "2023-03-23T14:25:12Z", "commit_message": "Fix UB in dwarf/dwarf_subrange.cpp::get_type (#1402)\n\nThe dwarf_* functions return a pointer to their last argument. This causes 'get_type' to return a pointer to a local variable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e952a0dfc13dbb7d665219a672733a505ee2a00", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  stack frame larger than (#1397)\n\n- increase stack frame size warning limit another 1000 bytes for\n  power_opcode_tables.C for RELEASE builds using the clang compiler", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683c85c7ef35d0afe6188271c8f697f6f839e12d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameter (conditionally) (#1397)\n\n- Add macro DYNINST_SUPPRESS_UNUSED_VARIABLE to suppress\n  warnings about unused variables\n\n- use macro to suppress function parameter that is only unused\n  when building on aarch64 and hence cannot be commented out", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "309d167d291f69d0ba9d4671ca581d6d24bf95e0", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "fix broken call to base class function (#1397)\n\n- SgAsmBinaryMultiply::get_type() rose results in infinite recursion\n  as casting the pointer to the base class and calling a function\n  still calls the derived version.  Just call the base class's function\n\n- rewrite SgAsmBinaryAdd::get_type the same way; it was not broken\n  but was convoluted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f57a5cbdfa98333527466423cbc32224874fa81", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "enable warnings in dataflowAPI/src (#1397)\n\n- separate dataflowAPI/src and dataflowAPI/rose source files\n\n- undo disabling warnings for dataflowAPI/src files\n\n- only include ABI.C as a source file once", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "766c7fad0f9f25bc5505f55a88c4f370b0f2cc69", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variable (clang compiler bug) (#1397)\n\n- add suppressions around code that contains a lock using RAII;\n  clang prior to version 10 contains a bug where it does not\n  recognized that the ctor and dtor make the variable used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e86fb6e232b370a66f407f9a0af440134bff147", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  suppress VLA warning (#1397)\n\n- Rose uses a VLA in C++ which is non-standard; for now suppress the\n  diagnostic\n\n- clang requires disabling both -Wvla and -Wvla-extension\n\n- gcc <9, 11.0 and 11.1 has a bug that requires the suppression to\n  to not be in the same macro as VLA itself", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89b22e23d4abcf48a2b1d3dd0f1ce294b4bb6260", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1397)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f7ed33ed9fac49623fea5ed2743462d8c31a062", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  missing noexcept (#1397)\n\n- declare function noexcept to allow potential optimization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "61faa14906eb2a7543867f4cb66643783ba41323", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  deprecated implicit ctor and op= (#1397)\n\n- add explicit copy ctors and operator=,\n  or delete dtor where it could be defaulted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa4713e0f2f063362a496ed03d0d0d65ff43d037", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (delete variable) (#1397)\n\n- remove variables and their initializatins that shadow a variable in\n  the enclosing scope as they were initialized with the same value", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1caea03054dbd73178ea2f40e2ca3474ff9c82e6", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (rename) (#1397)\n\n- rename names that shadow a name in an enclosing scope or class with\n  a unique name", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a309c63953a845f2d0c6e24f3bc3c4d117ef9006", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  potentially evaluated expression (#1397)\n\n- replace use of typeid(expr) where expr executes code at run-time\n  with a dynamic_cast that is obvious that it executes code at\n  run-time", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "412071df5285ecb872abaa966ae4ebb81c733573", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  overloaded virtual overrides (#1397)\n\n- import the name of the base class's virtual function(s) that were\n  overridden in the derived class to prevent hiding of the base class's\n  functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a720e99d94bfb01de40488d5dae8b45645fb284e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  copy ctor missing base class (#1397)\n\n- call the base class's copy constructor in the derived class's\n  copy constructor", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "336409431b648c18c7b51ec1c3135489f82ab7ce", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  case fallthough (#1397)\n\n- add break statement or DYNINST_FALLTHOUGH macro where a switch\n  case falls through to the next case", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "476ba11cf828964579d40a26b21e4b0eb808d560", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  printf format related (#1397)\n\n- add printf-format annotation on dataflow printf function parameter\n\n- fix format string to match parameter types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a15d069e2ce6340396e71bc283f0ac2377b4da6e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  reorder ctor initialization list (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f13b79c36af349203bddba40757b82a1206de42d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  const correctness (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b880173dc64d2d1f07e4d41b4796eac3d14873fe", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variables (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "951ebb64db730f7497ce886e8634aaa3da3cc5e7", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameters (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e9a4b86d2adbe3763fad3df38f85ac92959e26c", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  variadic macro (#1397)\n\n- replace non-standard variadic macro syntax with standard syntax\n\n- remove preprcessor check to use variadic macros if the compiler is\n  gcc;  all compilers support them", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42223b1f9118e32fe145a85a13ced32c13cd5871", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  extraneous semicolons (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ebf545849ef979aaa21bf82e8caff104cbeb6f6", "commit_date": "2023-03-15T13:47:22Z", "commit_message": "Github CI: update dev container deployment (#1400)\n\n* Log in to GHCR before building\r\n* Pull base image for cache", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab965c214b030a302aa0307b121cb9d06ab0a989", "commit_date": "2023-03-15T12:39:13Z", "commit_message": "Github CI: add line continuation in dev-containers.yaml (#1399)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f5558a15b16272eef982b5e8ddfdf172eb59036", "commit_date": "2023-03-15T12:23:31Z", "commit_message": "Add PR testing Github CI (#1393)\n\nRun on pull request to master:\r\n\r\n    Enforce formatting of CMake files, if modified\r\n    Check for changes in minimum required versions of dependencies\r\n    Ensure Dyninst, test suite, examples, and external tests all build with gcc on Ubuntu-20.04\r\n\r\nRun on push to master:\r\n\r\n    Build and deploy new dev container, ghcr.io/dyninst/amd64/<OS>:latest", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e7aa66ddef6768957faae3c62c9909590663901", "commit_date": "2023-03-09T20:15:45Z", "commit_message": "Replace 'cerr' with 'dwarf_print' in DwarfWalker::decodeLocationList (#1395)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1157c87c0b184d83e851bdd5b63582dd2a7647cf", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy with user dtor (#1394)\n\n- Make classes move-only by removing public copy constructor and\n  operator= as they contained pointer members that were just copied\n  (with no semantics of copying the data). This is a double delete\n  waiting to happen.  Luckily the pointer were always nullptr when the\n  copy constructor was called.\n\n- add move constructor (using std::move where appropriate)\n\n- clean up the classes to use default constructors and default member\n  initialization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1aeb249ff90fea49dc50efea1e6c11577bf9d90", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unneeded internal declaration (#1394)\n\n- clang warns of an unneeded internal declaration for yyinput. Since\n  yyinput is generated by flex, just suppress it for the whole file.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7cd7cdb0ba98de24b0d916b8e440db8adb0af6f9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (derived) (#1394)\n\n- Derived type classes have an operator==(const Type&) const, and they\n  call this operator with with both the lhs and rhs being the derived\n  class type.  This is ambiguous when using C++ 20's rule that considers\n  the parameters reversed.  Fix by adding an inlined non-virtual\n  operator== that takes the derived types a parameter and then\n  unambiguously calls the existing ==", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12a4fd86738c048dd82c20c31359cf7a48c082eb", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  stack frame larger than (#1394)\n\n- increase stack frame size warning limit when using the clang compiler\n  for a couple of files that needed a similar increase for gcc", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b78e883c77aefc27d1a30722b414266aa33897d1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  logical op (#1394)\n\n- add suppressions for identical clauses of a logical operator\n  even if they are only identical after evaluating constant\n  expressions that are not identical as gcc 8 and prior warn\n  about this\n\n- Suppression for these are already in place for warnings in adjacent\n  if statements, so extend the suppression to cover these also", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9dbc1e30e30ef263b174d1d2b5ca648e8ef6bf0d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  C function decls without prototype (#1394)\n\n- C functions declared as func() are a declaration without a prototype\n  (from the original K&R C), not a function that takes no parameters\n  (until C23), change all of these to func(void) which is how to\n  declare such a function in C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a2e3fd795f8ec6cb730038ec277431b0832c03c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  set but unused variables (#1394)\n\n- delete variables whose only use is to increment themselves", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6e380f7158326fc686f1b3f7ec7a01b3ac4bfe2", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (#1394)\n\nC++ 20 considers the reversed parameter of a comparison operators in\naddition to the given parameter order.  This implies that if the\nargument is const then the member function must also be const.\n\n- change    bool operator==(const T&)\n      to    bool operator==(const T&) const", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57fe4c395dff4fd11f18d2f00eb58ad25212501", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::random_shuffle is deprecated (#1394)\n\n- replace std::random_shuffle with std::shuffle", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "706fd0e3c532a3d7cfc1d752620ebed2fac65c5d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing noexcept (#1394)\n\n- declare functions noexcept", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "55d8a338e362d3aa4448aa9bae776eb90ca1292a", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1394)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b977e8d7132b312c853652a1e7e6f28eb39dbab0", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unused private field (#1394)\n\n- removed myid member from dyn_thread as it is never used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0eb0b29def9cc2d18e0fe724e536c73e7e9ef964", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy/op= with user provided dtor (#1394)\n\n- Explicitly define the implicit operator or remove the explicit\n  destructor; in C++ 20, if a destructor is explicitly defined then\n  the other constructor, assignment and move operators will not be\n  automatically generated", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9be477535debee15c2403bdc2ddedb31fdf0eb8e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  remove unused variables/members (#1394)\n\n- remove variables that were never used\n\n- remove code that only updated unused variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "344783a7954de9af7f98a5d3f0ec7c505b7536a1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (variables) (#1394)\n\n- rename variables that shadow names in containing scopes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73064a866ee1d19d8e12e2562f60b9b7f8e05406", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (enumerator names) (#1394)\n\nenumerator names shadow names in other scopes\n\n- made 3 internal enum types scoped enums:  StackAccessType,\n  operandType and patch_type_t\n\n- delete one internal and unused enum type:  frameType_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4bf4a24c514d0c395fdd27d6fe68ddf0fef89040", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "replace C-style and functional casts (#1394)\n\n- replace C-style casts ((T)e) and functional casts (T(e)) with modern\n  casts that have a clearer intent and are safer:  static_cast<T>(e),\n  and T{e}.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8d0e2760b307c7d465b56cac639c2e4a2cc93ca8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "write_memory_as to append_memory_as as appropriate (#1394)\n\n- where write_memory also updates the pointer, change then to\n  append_memory_as(...)\n\n- change '*insn++ = <value>' to append_memory_as_byte(...) to\n  be consistent with append_memory_as(...)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c21bd122187e87b74d45a5ba3ec3e3824750f9c3", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (C casts) (#1394)\n\n- fixed increased alignment warnings in C code.  The macro\n  CAST_WITHOUT_ALIGNMENT_WARNING eliminates the warning and allows for\n  future auditing.  For the code as currently written, these are all\n  aligned properly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0eeb1ee0407780ee07f603910d398f836dc2f7", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (pointers) (#1394)\n\n- fix alignment warnings of pointers by using alignas_cast<> defined in\n  common/h/raw_memory_access.h to eliminate the increase alignment\n  warning.  For the code as currently written, these are all aligned\n  properly, but these are inherently unsafe and require manual\n  inspection of the pointers involved.  An assert in alignas_cast can be\n  uncommented to validate proper alignment at runtime.\n\n- explicitly force larger alignment of one variable to eliminate warning", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "285ac938848739e02e38c044cf354dcb9d99f0b9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (#1394)\n\n- Casts of pointers to a type that has a larger alignment requirement\n  will cause an exceptions on some architectures on dereference if the\n  pointer does not meet its alignment requirements.\n\n- Add new template functions read_memory_as and write_memory_as that\n  read and write the bytes of (possibly) unaligned memory of the desired\n  data at the supplied address using the length of the template type in\n  a way that is safe even if the supplied pointer is not properly\n  aligned.\n\n- Add functions append_memory_as; like write_memory_as but updates the\n  pointer value to memory location after the bytes written.\n\n- Add template function alignas_cast to cast a pointer to another\n  pointer without producing an increased alignment warning; requires\n  manual auditing to pointer is properly aligned", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4aff07d1eba822b880558c030c7f5aec94b2ae9c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  pessimizing move (#1394)\n\n- remove unnecessary std::move's", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b88b16dba9477f18fe598fad5552758204a1558e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing override (#1394)\n\n- add override to all overridden virtual methods of a class if present\n  on any method", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84fe176ef5ab61376911570de6b506473a3c8d35", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  tautological always true comparison (#1394)\n\n- value of type unsigned char compared to 256 produces a warning as 256\n  is outside the range of the uint8_t.  256 is the number of array\n  elements (computed using sizeof's).  Changed from (n < numElems) to (n\n  <= numElems - 1) which is also always true, but the error is\n  eliminated due to 255 being within range of a uint8_t.  Ugly but makes\n  the warning disappear.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6b41075d61009b539107836591cb47b8cb3e3c8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  mismatched class/struct (#1394)\n\n- use consistent 'struct' and 'class' keyword between forward\n  declaration and definition; a mismatch is legal be breaks on\n  some versions of MS C++", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9e83871f0380068dba79648c6acee503cac5d76", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  [[fallthrough]] requires C++ 17 (#1394)\n\n- clang's __has_cpp_attribute(fallthrough) feature test macro returns\n  true, but produces warnings if used.  [[clang::fallthough]] works, so\n  force it if the language version is pre-17 with clang compiler.\n\n- fix typo in __cplusplus macro name\n\n- improve robustness: try all alternative fallthrough attributes names", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "067be96bb64a3d4191f12db1694b0fcfec51d457", "commit_date": "2023-03-02T18:41:27Z", "commit_message": "Restore PPC special-purpose registers in opposite order of saving them (#1392)\n\n* Restore PPC special-purpose registers in opposite order of saving them\r\n\r\nThis is the same fix as https://github.com/dyninst/dyninst/pull/1000,\r\nbut for PowerPC.\r\n\r\n* Reverse order of FPSCR restore", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae43ebc6f905345499ed9c55eccb007e9a69efa9", "commit_date": "2023-03-01T23:57:55Z", "commit_message": "Aarch64: Fix restoring special purpose registers order (#1000)\n\nThe special purpose registers are pushed onto the stack by\r\nEmitterAARCH64SaveRegs::saveSPRegisters. This patch reverses the order\r\nused for popping the stored registers from the stack. Without\r\nthis patch, some of the state registers get swapped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46ea3009e1e0e27bd035ac3152dc772bf861f3fd", "commit_date": "2023-03-01T19:33:16Z", "commit_message": "Avoid possible copy in BPatch::createEnum (#1390)\n\nThe Type class doesn't have a user-defined copy constructor and its\r\nimplicit declaration is deprecated in C++20. Rearranging the construction\r\nhere removes the possibility of copying.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f89cc72416fdc1d467b130f48609b8fc93126d37", "commit_date": "2023-02-28T23:54:58Z", "commit_message": "Merge pull request #1389 from dyninst/wuxx1279/gfx908/clang-error\n\nFix ambiguous override of InstructionDecoder_amdgpu_*::makeRegisterExpression", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "557a01949a4c11e8e8975fe113e4ab07b64bf25d", "commit_date": "2023-02-27T21:25:44Z", "commit_message": "add InstructionDecoderImpl::makeRegisterExpression to derived classes\n\nEliminate virtual-overloaded warning as there are 3 overloaded methods of\nInstructionDecoderImpl::makeRegisterExpression, but only 2 are defined in\nthese classes for add a using so the 3rd is not hidden.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42c3a4b497071e421686ded49ad0da406c8053ac", "commit_date": "2023-02-27T20:06:40Z", "commit_message": "Fix virtual derived signature to match base class\n\nmakeRegisterExpression in the derived class had\nan incorrect function signature, which made\ncompilation fails on gcc-6 and clang.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d15c0f714397a1316c74fc8d2c24a62a772ecc3", "commit_date": "2023-02-27T18:39:18Z", "commit_message": "Update DwarfWalker subrange handling (#1369)\n\n* Remove redundant include of libdw.h\r\n\r\n* Add subrange parsing to dynDwarf\r\n\r\n* Remove decipherBound\r\n\r\nThis implementation was neither correct nor complete. Moreover, we\r\nshouldn't be parsing FORM types. Looking for DW_TAG* is sufficient.\r\n\r\n* Remove legacy comments and commented-out code from parseArray\r\n\r\n* Improve error message in parseArray\r\n\r\n* Rename parseSubrangeAUX to parseSubrange and change interface\r\n\r\n* Replace bound calculations in parseSubrange\r\n\r\n* Update some comments and whitespace\r\n\r\n* Update construction of the result type\r\n\r\nThe LONG_MIN/MAX aren't great, but they are propagated to preserve\r\nbehavior.\r\n\r\n* Update debugging messages in parseSubrange\r\n\r\n* Have parseSubrange() call parseSubrange(Dwarf_Die*)\r\n\r\n* Use updated parseSubrange in parseMultidimensionalArray\r\n\r\n* Use std::tostring instead of snprintf\r\n\r\n* Update comments and remove dead code\r\n\r\n* Whitespace\r\n\r\n* parseMDA returns a typeArray instead of just a Type\r\n\r\n* Fix bug in dwarf_result::operator bool\r\n\r\n* Fix hi/low bound mixup in parseMDA\r\n\r\n* Try using Dyninst's parsed CU language, if needed\r\n\r\n* Display subrange DIE ID in pareSubrange\r\n\r\n* Don't create subrange type in parseSubrange\r\n\r\nThis will happen in the callee\r\n\r\n* Update parseSubrange() to use new parseSubrange(Dwarf_DIE*)\r\n\r\n* More carefully parse the child DIE\r\n\r\n* Iteratively parse the subranges in parseArray\r\n\r\n* Whitespace\r\n\r\n* Remove parseMultiDimensionalArray\r\n\r\n* Improve debug messages\r\n\r\n* Register each subrange type in parseArray\r\n\r\n* Remove common/h/dyninstversion.h\r\n\r\nThis was accidentally included.\r\n\r\n* Add copyright notices to new files\r\n\r\n* Make dwarf_result also hold a Dwarf_Word\r\n\r\nC++ doesn't guarantee it is convertible to `long`.\r\n\r\n* Only offer an interface to parse both bounds simultaneously\r\n\r\nThe calculation for a range's upper bound when DW_AT_count is used\r\nrequires knowing the lower bound (if given), so these needed to be\r\nmerged.\r\n\r\n* Use new dwarf_subrange interface in DwarfWalker::parseSubrange", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bfa6e82c2a9ef98801432324ffb3cec2a6254c5", "commit_date": "2023-02-27T14:13:39Z", "commit_message": "use default allocator for tbb::concurrent_hash_map (#1332)\n\n- gcc 12 warns about mismatched new and delete when an allocator is specified\r\n  This is likely a false positive.  Change to use the default, which uses ends\r\n  up using the same std C++ new allocator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "198b54f56cbcdb82f058d007545bdf9f36c5dce5", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "fix infinite recursion in LineInformation::addLine (#1331)\n\n- gcc 12 reported an infinite recursion for LineInformation::addLine\n  that takes the lineSource file\n- fixed by computing the string table index of lineSource and then\n  calling the addLine method that takes the index value\n- also update the lineSource type from string to const string&\n- updated documenation that had the method signature taking a const char*", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6436c734eef50d55ed6c562aa3fabf0c7039c50c", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "eliminate deprecated C++ function objects (#1331)\n\nfix function objects that were deprecate in C++ 11 and removed in C++ 17\n\n- replace mem_fun with mem_fn\n- eliminate binary_function and unary_function base classes\n- use const iterator when constructing boost::transform_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f049fe855640832950f5a6cd87db23ecb4b7533b", "commit_date": "2023-02-24T22:27:17Z", "commit_message": "Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04 (#1362)\n\n* Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04\r\n\r\n- the main issue was `/sbin/ldconfig -p` on Ubuntu 22.04 has an extra line at the end: \"Cache generated by: ldconfig (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35\"\r\n  - this would result in an occasionaly segfault\r\n- refactored the rest to avoid strtok which is known to have a fair amount of problems\r\n\r\n* fix header includes and message about delimit issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31b4d7f19f4e6585518eee179a63812f88911e6f", "commit_date": "2023-02-24T19:36:42Z", "commit_message": "Make SymtabCodeSource constructor const correct (#1293)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc38257de4d5143d097229aef7284b8e1ce6fbf5", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "SymtabAPI::Type: add support for C++ r-value references (#1159)\n\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c677008d0fa8f4ccb6d191d37493060e15d05f22", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "Improve DWARF enum parsing in Symtab::Type (#1164)\n\n* Inherit from derivedType\r\n* Add parsing of underlying type\r\n* Improve enum parsing debug information\r\n* Add support for C++ scoped enums (i.e., 'enum class')\r\n* Remove typeEnum::setName\r\n    This has no definition.\r\n* Inline default constructor\r\n* Clean up BPatch::createEnum\r\n\r\nThis removes the unnecessary construction of a separate (thread-safe!)\r\ncontainer of pairs and the associated memory leaks. It also explicitly\r\nmakes the enum's underlying type a four-byte signed int. Redundant code\r\nfrom the overload which computes the enum values was replaced by using\r\nstd::iota and calling the three-argument createEnum.\r\n\r\n* Remove factory functions\r\n\r\nAdding overloads for these would add more clutter than utility. We\r\nshould remove these from all of the types as the constructors should\r\nalways be used to ensure class invariants.\r\n\r\n* Remove non-portable constructors\r\n\r\nSince we're breaking ABI here, these constructors need to go. Manually\r\nsetting the size to `sizeof(int)` is non-portable as the\r\nBPatch::createEnum may be used to modify a binary that doesn't have the\r\nsame `int` representation as the host on which Dyninst was compiled.\r\n\r\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3046332ba3d32eccb63f8dd6ecc65afca3b2c63f", "commit_date": "2023-02-23T22:24:02Z", "commit_message": "Update global ELF ctor/dtor instrumentation for static executables (#1355)\n\nIf __libc_csu_init doesn't exist, try to insert the constructor call into the beginning of 'main'. If __libc_csu_fini doesn't exist, try to insert the constructor call into the beginning of 'exit'.\r\n\r\n* Use C-style strings for symbol names\r\n\r\nThere's no need to have a std::string object that incurs the overhead of a constructor/destructor call to just hold a literal that's only visible in the current translation unit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "bolo/race3": [{"commit_oid": "0fc0a6bc6c484eab7b86ba135af5d24e06ed3725", "commit_date": "2023-04-04T14:30:05Z", "commit_message": "Fix race condition in parsing w/ isSyscall().\n\nMove isSyscall() scoped static variable to the existing\nIA_IAPI thread safe initizlizer.\n\nThis eliminate a scoped static race condition in the parser.\nThis fix resolves a 1% rate of parsing failures.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1ddebd3125437d3385e65a7cce5bea715588028", "commit_date": "2023-03-23T14:25:12Z", "commit_message": "Fix UB in dwarf/dwarf_subrange.cpp::get_type (#1402)\n\nThe dwarf_* functions return a pointer to their last argument. This causes 'get_type' to return a pointer to a local variable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e952a0dfc13dbb7d665219a672733a505ee2a00", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  stack frame larger than (#1397)\n\n- increase stack frame size warning limit another 1000 bytes for\n  power_opcode_tables.C for RELEASE builds using the clang compiler", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683c85c7ef35d0afe6188271c8f697f6f839e12d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameter (conditionally) (#1397)\n\n- Add macro DYNINST_SUPPRESS_UNUSED_VARIABLE to suppress\n  warnings about unused variables\n\n- use macro to suppress function parameter that is only unused\n  when building on aarch64 and hence cannot be commented out", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "309d167d291f69d0ba9d4671ca581d6d24bf95e0", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "fix broken call to base class function (#1397)\n\n- SgAsmBinaryMultiply::get_type() rose results in infinite recursion\n  as casting the pointer to the base class and calling a function\n  still calls the derived version.  Just call the base class's function\n\n- rewrite SgAsmBinaryAdd::get_type the same way; it was not broken\n  but was convoluted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f57a5cbdfa98333527466423cbc32224874fa81", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "enable warnings in dataflowAPI/src (#1397)\n\n- separate dataflowAPI/src and dataflowAPI/rose source files\n\n- undo disabling warnings for dataflowAPI/src files\n\n- only include ABI.C as a source file once", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "766c7fad0f9f25bc5505f55a88c4f370b0f2cc69", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variable (clang compiler bug) (#1397)\n\n- add suppressions around code that contains a lock using RAII;\n  clang prior to version 10 contains a bug where it does not\n  recognized that the ctor and dtor make the variable used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e86fb6e232b370a66f407f9a0af440134bff147", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  suppress VLA warning (#1397)\n\n- Rose uses a VLA in C++ which is non-standard; for now suppress the\n  diagnostic\n\n- clang requires disabling both -Wvla and -Wvla-extension\n\n- gcc <9, 11.0 and 11.1 has a bug that requires the suppression to\n  to not be in the same macro as VLA itself", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89b22e23d4abcf48a2b1d3dd0f1ce294b4bb6260", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1397)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f7ed33ed9fac49623fea5ed2743462d8c31a062", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  missing noexcept (#1397)\n\n- declare function noexcept to allow potential optimization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "61faa14906eb2a7543867f4cb66643783ba41323", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  deprecated implicit ctor and op= (#1397)\n\n- add explicit copy ctors and operator=,\n  or delete dtor where it could be defaulted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa4713e0f2f063362a496ed03d0d0d65ff43d037", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (delete variable) (#1397)\n\n- remove variables and their initializatins that shadow a variable in\n  the enclosing scope as they were initialized with the same value", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1caea03054dbd73178ea2f40e2ca3474ff9c82e6", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (rename) (#1397)\n\n- rename names that shadow a name in an enclosing scope or class with\n  a unique name", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a309c63953a845f2d0c6e24f3bc3c4d117ef9006", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  potentially evaluated expression (#1397)\n\n- replace use of typeid(expr) where expr executes code at run-time\n  with a dynamic_cast that is obvious that it executes code at\n  run-time", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "412071df5285ecb872abaa966ae4ebb81c733573", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  overloaded virtual overrides (#1397)\n\n- import the name of the base class's virtual function(s) that were\n  overridden in the derived class to prevent hiding of the base class's\n  functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a720e99d94bfb01de40488d5dae8b45645fb284e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  copy ctor missing base class (#1397)\n\n- call the base class's copy constructor in the derived class's\n  copy constructor", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "336409431b648c18c7b51ec1c3135489f82ab7ce", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  case fallthough (#1397)\n\n- add break statement or DYNINST_FALLTHOUGH macro where a switch\n  case falls through to the next case", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "476ba11cf828964579d40a26b21e4b0eb808d560", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  printf format related (#1397)\n\n- add printf-format annotation on dataflow printf function parameter\n\n- fix format string to match parameter types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a15d069e2ce6340396e71bc283f0ac2377b4da6e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  reorder ctor initialization list (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f13b79c36af349203bddba40757b82a1206de42d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  const correctness (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b880173dc64d2d1f07e4d41b4796eac3d14873fe", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variables (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "951ebb64db730f7497ce886e8634aaa3da3cc5e7", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameters (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e9a4b86d2adbe3763fad3df38f85ac92959e26c", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  variadic macro (#1397)\n\n- replace non-standard variadic macro syntax with standard syntax\n\n- remove preprcessor check to use variadic macros if the compiler is\n  gcc;  all compilers support them", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42223b1f9118e32fe145a85a13ced32c13cd5871", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  extraneous semicolons (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ebf545849ef979aaa21bf82e8caff104cbeb6f6", "commit_date": "2023-03-15T13:47:22Z", "commit_message": "Github CI: update dev container deployment (#1400)\n\n* Log in to GHCR before building\r\n* Pull base image for cache", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab965c214b030a302aa0307b121cb9d06ab0a989", "commit_date": "2023-03-15T12:39:13Z", "commit_message": "Github CI: add line continuation in dev-containers.yaml (#1399)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f5558a15b16272eef982b5e8ddfdf172eb59036", "commit_date": "2023-03-15T12:23:31Z", "commit_message": "Add PR testing Github CI (#1393)\n\nRun on pull request to master:\r\n\r\n    Enforce formatting of CMake files, if modified\r\n    Check for changes in minimum required versions of dependencies\r\n    Ensure Dyninst, test suite, examples, and external tests all build with gcc on Ubuntu-20.04\r\n\r\nRun on push to master:\r\n\r\n    Build and deploy new dev container, ghcr.io/dyninst/amd64/<OS>:latest", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e7aa66ddef6768957faae3c62c9909590663901", "commit_date": "2023-03-09T20:15:45Z", "commit_message": "Replace 'cerr' with 'dwarf_print' in DwarfWalker::decodeLocationList (#1395)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1157c87c0b184d83e851bdd5b63582dd2a7647cf", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy with user dtor (#1394)\n\n- Make classes move-only by removing public copy constructor and\n  operator= as they contained pointer members that were just copied\n  (with no semantics of copying the data). This is a double delete\n  waiting to happen.  Luckily the pointer were always nullptr when the\n  copy constructor was called.\n\n- add move constructor (using std::move where appropriate)\n\n- clean up the classes to use default constructors and default member\n  initialization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1aeb249ff90fea49dc50efea1e6c11577bf9d90", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unneeded internal declaration (#1394)\n\n- clang warns of an unneeded internal declaration for yyinput. Since\n  yyinput is generated by flex, just suppress it for the whole file.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7cd7cdb0ba98de24b0d916b8e440db8adb0af6f9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (derived) (#1394)\n\n- Derived type classes have an operator==(const Type&) const, and they\n  call this operator with with both the lhs and rhs being the derived\n  class type.  This is ambiguous when using C++ 20's rule that considers\n  the parameters reversed.  Fix by adding an inlined non-virtual\n  operator== that takes the derived types a parameter and then\n  unambiguously calls the existing ==", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12a4fd86738c048dd82c20c31359cf7a48c082eb", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  stack frame larger than (#1394)\n\n- increase stack frame size warning limit when using the clang compiler\n  for a couple of files that needed a similar increase for gcc", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b78e883c77aefc27d1a30722b414266aa33897d1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  logical op (#1394)\n\n- add suppressions for identical clauses of a logical operator\n  even if they are only identical after evaluating constant\n  expressions that are not identical as gcc 8 and prior warn\n  about this\n\n- Suppression for these are already in place for warnings in adjacent\n  if statements, so extend the suppression to cover these also", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9dbc1e30e30ef263b174d1d2b5ca648e8ef6bf0d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  C function decls without prototype (#1394)\n\n- C functions declared as func() are a declaration without a prototype\n  (from the original K&R C), not a function that takes no parameters\n  (until C23), change all of these to func(void) which is how to\n  declare such a function in C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a2e3fd795f8ec6cb730038ec277431b0832c03c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  set but unused variables (#1394)\n\n- delete variables whose only use is to increment themselves", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6e380f7158326fc686f1b3f7ec7a01b3ac4bfe2", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (#1394)\n\nC++ 20 considers the reversed parameter of a comparison operators in\naddition to the given parameter order.  This implies that if the\nargument is const then the member function must also be const.\n\n- change    bool operator==(const T&)\n      to    bool operator==(const T&) const", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57fe4c395dff4fd11f18d2f00eb58ad25212501", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::random_shuffle is deprecated (#1394)\n\n- replace std::random_shuffle with std::shuffle", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "706fd0e3c532a3d7cfc1d752620ebed2fac65c5d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing noexcept (#1394)\n\n- declare functions noexcept", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "55d8a338e362d3aa4448aa9bae776eb90ca1292a", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1394)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b977e8d7132b312c853652a1e7e6f28eb39dbab0", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unused private field (#1394)\n\n- removed myid member from dyn_thread as it is never used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0eb0b29def9cc2d18e0fe724e536c73e7e9ef964", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy/op= with user provided dtor (#1394)\n\n- Explicitly define the implicit operator or remove the explicit\n  destructor; in C++ 20, if a destructor is explicitly defined then\n  the other constructor, assignment and move operators will not be\n  automatically generated", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9be477535debee15c2403bdc2ddedb31fdf0eb8e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  remove unused variables/members (#1394)\n\n- remove variables that were never used\n\n- remove code that only updated unused variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "344783a7954de9af7f98a5d3f0ec7c505b7536a1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (variables) (#1394)\n\n- rename variables that shadow names in containing scopes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73064a866ee1d19d8e12e2562f60b9b7f8e05406", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (enumerator names) (#1394)\n\nenumerator names shadow names in other scopes\n\n- made 3 internal enum types scoped enums:  StackAccessType,\n  operandType and patch_type_t\n\n- delete one internal and unused enum type:  frameType_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4bf4a24c514d0c395fdd27d6fe68ddf0fef89040", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "replace C-style and functional casts (#1394)\n\n- replace C-style casts ((T)e) and functional casts (T(e)) with modern\n  casts that have a clearer intent and are safer:  static_cast<T>(e),\n  and T{e}.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8d0e2760b307c7d465b56cac639c2e4a2cc93ca8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "write_memory_as to append_memory_as as appropriate (#1394)\n\n- where write_memory also updates the pointer, change then to\n  append_memory_as(...)\n\n- change '*insn++ = <value>' to append_memory_as_byte(...) to\n  be consistent with append_memory_as(...)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c21bd122187e87b74d45a5ba3ec3e3824750f9c3", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (C casts) (#1394)\n\n- fixed increased alignment warnings in C code.  The macro\n  CAST_WITHOUT_ALIGNMENT_WARNING eliminates the warning and allows for\n  future auditing.  For the code as currently written, these are all\n  aligned properly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0eeb1ee0407780ee07f603910d398f836dc2f7", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (pointers) (#1394)\n\n- fix alignment warnings of pointers by using alignas_cast<> defined in\n  common/h/raw_memory_access.h to eliminate the increase alignment\n  warning.  For the code as currently written, these are all aligned\n  properly, but these are inherently unsafe and require manual\n  inspection of the pointers involved.  An assert in alignas_cast can be\n  uncommented to validate proper alignment at runtime.\n\n- explicitly force larger alignment of one variable to eliminate warning", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "285ac938848739e02e38c044cf354dcb9d99f0b9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (#1394)\n\n- Casts of pointers to a type that has a larger alignment requirement\n  will cause an exceptions on some architectures on dereference if the\n  pointer does not meet its alignment requirements.\n\n- Add new template functions read_memory_as and write_memory_as that\n  read and write the bytes of (possibly) unaligned memory of the desired\n  data at the supplied address using the length of the template type in\n  a way that is safe even if the supplied pointer is not properly\n  aligned.\n\n- Add functions append_memory_as; like write_memory_as but updates the\n  pointer value to memory location after the bytes written.\n\n- Add template function alignas_cast to cast a pointer to another\n  pointer without producing an increased alignment warning; requires\n  manual auditing to pointer is properly aligned", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4aff07d1eba822b880558c030c7f5aec94b2ae9c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  pessimizing move (#1394)\n\n- remove unnecessary std::move's", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b88b16dba9477f18fe598fad5552758204a1558e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing override (#1394)\n\n- add override to all overridden virtual methods of a class if present\n  on any method", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84fe176ef5ab61376911570de6b506473a3c8d35", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  tautological always true comparison (#1394)\n\n- value of type unsigned char compared to 256 produces a warning as 256\n  is outside the range of the uint8_t.  256 is the number of array\n  elements (computed using sizeof's).  Changed from (n < numElems) to (n\n  <= numElems - 1) which is also always true, but the error is\n  eliminated due to 255 being within range of a uint8_t.  Ugly but makes\n  the warning disappear.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6b41075d61009b539107836591cb47b8cb3e3c8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  mismatched class/struct (#1394)\n\n- use consistent 'struct' and 'class' keyword between forward\n  declaration and definition; a mismatch is legal be breaks on\n  some versions of MS C++", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9e83871f0380068dba79648c6acee503cac5d76", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  [[fallthrough]] requires C++ 17 (#1394)\n\n- clang's __has_cpp_attribute(fallthrough) feature test macro returns\n  true, but produces warnings if used.  [[clang::fallthough]] works, so\n  force it if the language version is pre-17 with clang compiler.\n\n- fix typo in __cplusplus macro name\n\n- improve robustness: try all alternative fallthrough attributes names", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "067be96bb64a3d4191f12db1694b0fcfec51d457", "commit_date": "2023-03-02T18:41:27Z", "commit_message": "Restore PPC special-purpose registers in opposite order of saving them (#1392)\n\n* Restore PPC special-purpose registers in opposite order of saving them\r\n\r\nThis is the same fix as https://github.com/dyninst/dyninst/pull/1000,\r\nbut for PowerPC.\r\n\r\n* Reverse order of FPSCR restore", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae43ebc6f905345499ed9c55eccb007e9a69efa9", "commit_date": "2023-03-01T23:57:55Z", "commit_message": "Aarch64: Fix restoring special purpose registers order (#1000)\n\nThe special purpose registers are pushed onto the stack by\r\nEmitterAARCH64SaveRegs::saveSPRegisters. This patch reverses the order\r\nused for popping the stored registers from the stack. Without\r\nthis patch, some of the state registers get swapped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46ea3009e1e0e27bd035ac3152dc772bf861f3fd", "commit_date": "2023-03-01T19:33:16Z", "commit_message": "Avoid possible copy in BPatch::createEnum (#1390)\n\nThe Type class doesn't have a user-defined copy constructor and its\r\nimplicit declaration is deprecated in C++20. Rearranging the construction\r\nhere removes the possibility of copying.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f89cc72416fdc1d467b130f48609b8fc93126d37", "commit_date": "2023-02-28T23:54:58Z", "commit_message": "Merge pull request #1389 from dyninst/wuxx1279/gfx908/clang-error\n\nFix ambiguous override of InstructionDecoder_amdgpu_*::makeRegisterExpression", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "557a01949a4c11e8e8975fe113e4ab07b64bf25d", "commit_date": "2023-02-27T21:25:44Z", "commit_message": "add InstructionDecoderImpl::makeRegisterExpression to derived classes\n\nEliminate virtual-overloaded warning as there are 3 overloaded methods of\nInstructionDecoderImpl::makeRegisterExpression, but only 2 are defined in\nthese classes for add a using so the 3rd is not hidden.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42c3a4b497071e421686ded49ad0da406c8053ac", "commit_date": "2023-02-27T20:06:40Z", "commit_message": "Fix virtual derived signature to match base class\n\nmakeRegisterExpression in the derived class had\nan incorrect function signature, which made\ncompilation fails on gcc-6 and clang.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d15c0f714397a1316c74fc8d2c24a62a772ecc3", "commit_date": "2023-02-27T18:39:18Z", "commit_message": "Update DwarfWalker subrange handling (#1369)\n\n* Remove redundant include of libdw.h\r\n\r\n* Add subrange parsing to dynDwarf\r\n\r\n* Remove decipherBound\r\n\r\nThis implementation was neither correct nor complete. Moreover, we\r\nshouldn't be parsing FORM types. Looking for DW_TAG* is sufficient.\r\n\r\n* Remove legacy comments and commented-out code from parseArray\r\n\r\n* Improve error message in parseArray\r\n\r\n* Rename parseSubrangeAUX to parseSubrange and change interface\r\n\r\n* Replace bound calculations in parseSubrange\r\n\r\n* Update some comments and whitespace\r\n\r\n* Update construction of the result type\r\n\r\nThe LONG_MIN/MAX aren't great, but they are propagated to preserve\r\nbehavior.\r\n\r\n* Update debugging messages in parseSubrange\r\n\r\n* Have parseSubrange() call parseSubrange(Dwarf_Die*)\r\n\r\n* Use updated parseSubrange in parseMultidimensionalArray\r\n\r\n* Use std::tostring instead of snprintf\r\n\r\n* Update comments and remove dead code\r\n\r\n* Whitespace\r\n\r\n* parseMDA returns a typeArray instead of just a Type\r\n\r\n* Fix bug in dwarf_result::operator bool\r\n\r\n* Fix hi/low bound mixup in parseMDA\r\n\r\n* Try using Dyninst's parsed CU language, if needed\r\n\r\n* Display subrange DIE ID in pareSubrange\r\n\r\n* Don't create subrange type in parseSubrange\r\n\r\nThis will happen in the callee\r\n\r\n* Update parseSubrange() to use new parseSubrange(Dwarf_DIE*)\r\n\r\n* More carefully parse the child DIE\r\n\r\n* Iteratively parse the subranges in parseArray\r\n\r\n* Whitespace\r\n\r\n* Remove parseMultiDimensionalArray\r\n\r\n* Improve debug messages\r\n\r\n* Register each subrange type in parseArray\r\n\r\n* Remove common/h/dyninstversion.h\r\n\r\nThis was accidentally included.\r\n\r\n* Add copyright notices to new files\r\n\r\n* Make dwarf_result also hold a Dwarf_Word\r\n\r\nC++ doesn't guarantee it is convertible to `long`.\r\n\r\n* Only offer an interface to parse both bounds simultaneously\r\n\r\nThe calculation for a range's upper bound when DW_AT_count is used\r\nrequires knowing the lower bound (if given), so these needed to be\r\nmerged.\r\n\r\n* Use new dwarf_subrange interface in DwarfWalker::parseSubrange", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bfa6e82c2a9ef98801432324ffb3cec2a6254c5", "commit_date": "2023-02-27T14:13:39Z", "commit_message": "use default allocator for tbb::concurrent_hash_map (#1332)\n\n- gcc 12 warns about mismatched new and delete when an allocator is specified\r\n  This is likely a false positive.  Change to use the default, which uses ends\r\n  up using the same std C++ new allocator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "198b54f56cbcdb82f058d007545bdf9f36c5dce5", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "fix infinite recursion in LineInformation::addLine (#1331)\n\n- gcc 12 reported an infinite recursion for LineInformation::addLine\n  that takes the lineSource file\n- fixed by computing the string table index of lineSource and then\n  calling the addLine method that takes the index value\n- also update the lineSource type from string to const string&\n- updated documenation that had the method signature taking a const char*", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6436c734eef50d55ed6c562aa3fabf0c7039c50c", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "eliminate deprecated C++ function objects (#1331)\n\nfix function objects that were deprecate in C++ 11 and removed in C++ 17\n\n- replace mem_fun with mem_fn\n- eliminate binary_function and unary_function base classes\n- use const iterator when constructing boost::transform_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f049fe855640832950f5a6cd87db23ecb4b7533b", "commit_date": "2023-02-24T22:27:17Z", "commit_message": "Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04 (#1362)\n\n* Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04\r\n\r\n- the main issue was `/sbin/ldconfig -p` on Ubuntu 22.04 has an extra line at the end: \"Cache generated by: ldconfig (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35\"\r\n  - this would result in an occasionaly segfault\r\n- refactored the rest to avoid strtok which is known to have a fair amount of problems\r\n\r\n* fix header includes and message about delimit issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31b4d7f19f4e6585518eee179a63812f88911e6f", "commit_date": "2023-02-24T19:36:42Z", "commit_message": "Make SymtabCodeSource constructor const correct (#1293)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc38257de4d5143d097229aef7284b8e1ce6fbf5", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "SymtabAPI::Type: add support for C++ r-value references (#1159)\n\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c677008d0fa8f4ccb6d191d37493060e15d05f22", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "Improve DWARF enum parsing in Symtab::Type (#1164)\n\n* Inherit from derivedType\r\n* Add parsing of underlying type\r\n* Improve enum parsing debug information\r\n* Add support for C++ scoped enums (i.e., 'enum class')\r\n* Remove typeEnum::setName\r\n    This has no definition.\r\n* Inline default constructor\r\n* Clean up BPatch::createEnum\r\n\r\nThis removes the unnecessary construction of a separate (thread-safe!)\r\ncontainer of pairs and the associated memory leaks. It also explicitly\r\nmakes the enum's underlying type a four-byte signed int. Redundant code\r\nfrom the overload which computes the enum values was replaced by using\r\nstd::iota and calling the three-argument createEnum.\r\n\r\n* Remove factory functions\r\n\r\nAdding overloads for these would add more clutter than utility. We\r\nshould remove these from all of the types as the constructors should\r\nalways be used to ensure class invariants.\r\n\r\n* Remove non-portable constructors\r\n\r\nSince we're breaking ABI here, these constructors need to go. Manually\r\nsetting the size to `sizeof(int)` is non-portable as the\r\nBPatch::createEnum may be used to modify a binary that doesn't have the\r\nsame `int` representation as the host on which Dyninst was compiled.\r\n\r\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3046332ba3d32eccb63f8dd6ecc65afca3b2c63f", "commit_date": "2023-02-23T22:24:02Z", "commit_message": "Update global ELF ctor/dtor instrumentation for static executables (#1355)\n\nIf __libc_csu_init doesn't exist, try to insert the constructor call into the beginning of 'main'. If __libc_csu_fini doesn't exist, try to insert the constructor call into the beginning of 'exit'.\r\n\r\n* Use C-style strings for symbol names\r\n\r\nThere's no need to have a std::string object that incurs the overhead of a constructor/destructor call to just hold a literal that's only visible in the current translation unit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "fix_amdgpu_register_formattting": [{"commit_oid": "648010d849143619b58d00f29708c831474b79c2", "commit_date": "2023-08-02T08:03:57Z", "commit_message": "Fix missing parameter for makeRegisterExpression\n\nDuring one of the PRs that targets compiler warning,\nthe num_elements parameter to makeRegisterExpression is omitted,\nresulting in all register operands are displayed separately,\nwhether they should be displayed as a group or not.\n\nIn addition to adding the parameter, certern unused helper functions\nand fields of InstructionDecoder-amdgpu-gfx*** has been removed\nto avoid shadowing of variable names.\n\nNote that this change isn't applied to vega as we don't have ISA-XML for\nit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c2007acc8508af73d755c061276812eeecc32d6c", "commit_date": "2023-08-02T07:48:44Z", "commit_message": "Separate out AMDGPU register formatting\n\nHere we extract the logic of displaying multiple registers as\na single operand when doing instruction formatting into a separate helper\nfunction that is only called when the architecture is passed to\nInstruction.format or Operand.format;\n\nThis change enables the ability get register operand name in two ways:\nConsider s[0:3]\n1. Without passing in architecture, each register will be printed separately.\nThat is s0,s1,s2,s3\n2. By passing in architecture, the first register will return a string\nfor the entire group, and the rest will return empty string.\nThat is s[0:3],\"\",\"\",\"\"\nThese empty strings will later be discarded by the\nArchitectureSpecificFormatter functions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8fa753d955d43747aa46b0a528a81a0d9adf677d", "commit_date": "2023-07-27T14:25:14Z", "commit_message": "Do not decode operands for invalid opcode (#1467)\n\nCo-authored-by: Xiaozhu Meng <xmeng@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "43026f99ba03d71ec6105c4b52ad70759645a733", "commit_date": "2023-07-27T14:24:18Z", "commit_message": "Add support for EM_INTELGT (#1468)\n\nIt's unclear at this time how we should treat Intel's XE Gen12/Tiger Lake binaries, so we just treat them as Gen9 (Ponte Vecchio) for now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d94f856514d7e312d5d4bd704ddac8b166c48c4e", "commit_date": "2023-07-26T21:22:18Z", "commit_message": "do not export Instruction::appendOperand (#1466)\n\n- do not export since it is now private, and should not have been used\r\n  externally (comment said it was to work around old compiler issue).\r\n\r\n- cleanup method order and remove comment", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7456c05b979130eba42c4ee39a9ed00c92de2ba4", "commit_date": "2023-07-26T15:34:22Z", "commit_message": "add getDisplayOrderedOperands interface (#1465)\n\nAdd method Instruction::getDisplayOrderedOperands to return the\r\noperands that are displayed (non implicit operands) when formatting an\r\ninstruction for disassembly.  Returns a vector of Operands in display\r\norder.\r\n\r\nThese operands can be inspected and formatted to produce a disassembly\r\nstring with annotations.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6394752592546df5adff6bc7edb2d8bde330842d", "commit_date": "2023-07-26T03:27:07Z", "commit_message": "modernize ArchSpecificFormatter classes (#1464)\n\n- pass string and vector parameters by const reference instead of by\r\n  value for performance\r\n\r\n- add ArchSpecificFormatter::getInstructionString and remove the overridden\r\n  versions in the non-x86_64 as they were functionally the same, but not\r\n  identically written\r\n\r\n- remove virtual and add override to overridden methods\r\n\r\n- make methods const, use map::at instead of map::operator[]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25ad35c6762df4c40c68bd2fc3f6428efbd45a28", "commit_date": "2023-07-25T18:12:00Z", "commit_message": "improve intel instruction & operand formatting (#1463)\n\nThis fixes three issues when formatting an x86_64 instruction or its\r\noperands:\r\n\r\n1) Fix the order of operands when formatting the instruction to be the\r\n   AT&T syntax order.  If the instruction had three or more operands.\r\n   Conversion from the internal (Intel) order rotated right by 1 instead\r\n   of reversing the operands.\r\n\r\n2) Eliminate special treatment of register %kN as the first operand as\r\n   mask registers in Instruction::format as Operand::format already\r\n   formats these as masks (enclosed in braces) and not all uses of mask\r\n   registers are as a mask.\r\n\r\n3) Fix Operand::format to produce the correct disassembly operand\r\n   string.  The formatting of the internal Expression needs to be done\r\n   for some indirect values.  This was done in the Instruction::format\r\n   instead of directly in Operand::format\r\n\r\n* x86Formatter::getInstructionString - fixes 1, 2, 3\r\n\r\n* Operand::format - fixes 3\r\n\r\n* x86Formatter::formatRegister - cleanup, remove malloc that could leak", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e38d57c9904ab623350e90e0e3adcab2afcf2100", "commit_date": "2023-07-25T18:08:54Z", "commit_message": "fix x86_64 ret instruction formatting (#1457)\n\nThe ret instruction formats incorrectly with an operand of '(%rsp)'.  The\r\noperand should have been flagged as implicit so it is not included in\r\nthe output.\r\n\r\n- eliminate all but one overloaded Instruction::appendOperand` using\r\n  default parameters\r\n\r\n- add isImplicit parameter defaulting to false to\r\n  Instruction::addSuccessor\r\n\r\n- add isImplicit to the ret instruction's addSuccessor call to set the\r\n  ret_addr (which adds the operand to the Instruction object)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88a774dfa36208bc297b65dc18fdfe4e2e66140c", "commit_date": "2023-07-25T18:07:02Z", "commit_message": "modernize InstructionAPI::Operand class (#1456)\n\n* modernize InstructionAPI::Operand class\r\n\r\n- eliminate all but one of the constructors by using default parameters\r\n\r\n- remove destructor (unnecessarily virtual, and reset a member\r\n  shared_ptr), copy ctor, and copy assignment declarations to allow the\r\n  compiler to generate default versions that are equivalent or better\r\n  than the hand written versions\r\n\r\n- add default member initializers for all members\r\n\r\n- make Operand constructor explicit", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e17bc861ac69ddf6f55629b9912dca37e87d05d", "commit_date": "2023-07-25T17:41:03Z", "commit_message": "Fix x86 misspelled, incorrect, and invalid opcodes (#1421)\n\n* Fix spelling of 'vpperm' stringification\r\n\r\n* Fix spelling of 'vpcomd' stringification\r\n\r\n* Fix spelling of 'vprolvd' stringification\r\n\r\n* Fix spelling of 'vprolvq' stringification\r\n\r\n* Remove duplicate entry for 'e_vpsrlvq'\r\n\r\n* Rename 'vpclmullqlqdq' to 'vpclmulqdq'\r\n\r\n* Rename 'punpcklqd' to 'punpckldq'\r\n\r\n* Replace 'punpckhqd' with 'punpckhqdq'\r\n\r\n* Replace 'pcmpgdt' with 'pcmpgtd'\r\n\r\n* Remove instruction 'vpcmpequd'\r\n\r\nThis mnemonic does not exist in any of Intel Architecture Instruction\r\nSet Extensions, AMD Architecture Programmers Manual, or Intel\r\nArchitecutre Software Developer's Manual.\r\n\r\nThe encoding listed under 'SSET1E_66' is a reserved space.\r\n\r\n* Rename mnemonic for 'prefect_w' to 'prefetchw'\r\n\r\n* Rename 'pclmullqlqdq' to 'pclmulqdq'\r\n\r\nThis is a pseudo-opcode for pclmulqdq when imm8 is 0x0.\r\nThe encoding is 660F3A44, so the lookup table location is correct.\r\n\r\n* Remove 'mmxud'\r\n\r\nIt is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'movslq'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'pcommit'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Rename 'cmpsd_sse' to 'cmpsd'\r\n\r\n* Fix spelling of 'vphaddsw' mnemonic\r\n\r\n* Fix spelling of 'vblendpd' mnemonic\r\n\r\n* Remove redundant copy of 'prefetchwt1'\r\n\r\n* Remove redundant 'phsubsw'\r\n\r\n* Remove redundant 'sarx'\r\n\r\n* Remove redundant 'shlx'\r\n\r\n* Remove redundant 'vblendvpd'\r\n\r\n* Remove redundant 'vcmppd'\r\n\r\n* Remove redundant 'vcmpps'\r\n\r\n* Remove redundant 'vcmpsd'\r\n\r\n* Remove redundant 'vcmpss'\r\n\r\n* Remove redundant 'vpmaddubsw'\r\n\r\n* Remove redundant 'vpmaddwd'\r\n\r\n* Remove redundant 'vpmovsdb'\r\n\r\n* Remove redundant 'vpmovsdw'\r\n\r\n* Remove redundant 'vpmovsqb'\r\n\r\n* Remove redundant 'vpmovsqd'\r\n\r\n* Remove redundant 'vpmovsqw'\r\n\r\n* Remove redundant 'vpmovswb'", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d14dff71691f51fb6b96179a87b4cee6d3a34e6b", "commit_date": "2023-07-25T16:19:35Z", "commit_message": "Remove Object::dwarf_parse_aranges (#1462)\n\nIt's usage was removed by 4be991a7 in 2021.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d82356b795db373fd66b098a8ba6073a07ba6089", "commit_date": "2023-07-24T19:02:44Z", "commit_message": "Fix EM_AMDGPU to use RELA as Region Type (#1444)\n\nAccording to the llvm page\r\nhttps://llvm.org/docs/AMDGPUUsage.html#relocation-records\r\nAMDGPU backend generates Elf64_Rela records.\r\n\r\nThis fix added the case for EM_AMDGPU to\r\nstatic Region::RegionType getRelTypeByElfMachine\r\nsuch that it uses RELA instead of the default REL type.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "96f6344d195bb74f30e209c48ee64c8397421dcd", "commit_date": "2023-07-24T17:56:55Z", "commit_message": "Remove lazy initialization of IBSTrees in Symtab (#1454)\n\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes Symtab::mod_lookup threadsafe.\r\n\r\n* Fix includes in Function.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Fix includes in Variable.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Use Function.h instead of forward declarations\r\n\r\nThis removes duplicate typedefs, as well.\r\n\r\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes its use in\r\nSymtab::parseFunctionRanges threadsafe.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "649e43fa2d26aa3c5245b05bac1038f407c869a9", "commit_date": "2023-07-21T17:49:14Z", "commit_message": "Make Symtab::getContainingInlinedFunction lazy parsing threadsafe (#1452)\n\nThis fix does not address the thread safety issues in\r\nSymtab::parseFunctionRanges. That function is still thread unsafe and\r\nwill require separate modifications.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab915557f2ee64c538515fcdfed250e23dc40e19", "commit_date": "2023-07-14T23:39:33Z", "commit_message": "Clean up Symtab constructors (#1451)\n\n* Use default member initializers instead of initializer lists\r\n\r\nThere are members missing from the lists. This also simplifies the\r\nconstructors considerably.\r\n\r\n* Remove unhelpful message in default ctor\r\n\r\n* Delegate to default ctor in Symtab(MappedFile*)\r\n\r\nThis fixes the bug of inconsistent base initialization and ensures the\r\nconstructors are consistent.\r\n\r\n* Use delegating ctor for Symtab::Symtab(unsigned char*...)\r\n\r\nThis fixes the following bugs\r\n\r\n1. Invoke init_debug_symtabAPI before calling create_printf.\r\n\r\n2. Because this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.\r\n\r\n* Use delegating ctor for Symtab::Symtab(std::string...)\r\n\r\nBecause this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683b050d6132ce6a9e0cc5cad35d497b2d2d9cc2", "commit_date": "2023-07-14T21:08:09Z", "commit_message": "Explicitly delete unusable special member functions in Symtab (#1450)\n\nBecause there is a user-defined destructor, the compiler will not generate the special member functions (e.g., copy assignment operator). However, we explicitly delete them here to signal that this class is not copyable or movable.  The destructor is also moved to the top of the class to be next to the other special member functions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84786bd694d2c2163d6e8fbd2190271db1868ff3", "commit_date": "2023-07-14T20:20:25Z", "commit_message": "Remove Symtab::mfForDebugInfo (#1449)\n\nIt is never used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88bf2091da5aa9a018afb1f1db67fe6ffeb4773b", "commit_date": "2023-07-14T19:30:50Z", "commit_message": "Remove Symtab::checkPPC64DescriptorSymbols (#1448)\n\nThe definition was commented out in 3709ead48 in 2009.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7014ee1b08ffa17381b6f0bcda9b94368cb83937", "commit_date": "2023-07-14T19:30:30Z", "commit_message": "Remove Symtab copy constructor (#1447)\n\nThere are several reasons for this.\r\n\r\n1. It doesn't copy every member of the class\r\n2. IBSTree doesn't have a copy constructor\r\n3. mod_lookup_ and func_lookup_ are not copied, but are recreated in other member functions (e.g., mod_lookup()). This completely breaks the semantics of a copy ctor.\r\n4. Resets _ref_cnt to 1", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "beae2a07b5e0a40de54ee1aa972ac765e4d825b2", "commit_date": "2023-07-11T16:11:00Z", "commit_message": "add header files to directly define std:: syms (#1443)\n\n- update dyninst header files to directly include the standard header\r\n  file defining symbols from the standard C++ library that are used by\r\n  the dyninst header file; in some instances, the code relied on symbols\r\n  being defined via an unrelated include file indirectly including the\r\n  necessary header file leading to fragile code\r\n\r\n- minor other cleanups:  remove unnecessary header files, remove\r\n  definitions of names that are defined in a standard header file", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9696c64a3a1d6f41241d27c3c51820616490efa6", "commit_date": "2023-06-15T15:41:23Z", "commit_message": "Fix vector instruction lengths (#1439)\n\nThe following instruction decoded with the wrong length if the modrm\r\noperand specified a memory access as all the operand was incorrectly\r\nspecified to be a register only operand:\r\n\r\n- vcvtpd2udq\r\n- vcvtss2usi\r\n- vcvttpd2qq\r\n- vcvtudq2pd\r\n- vcvtudq2ps\r\n- vpblendd\r\n- vpermpd", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44d86e56068f62b9ac03f7d7537098fd3728fcdb", "commit_date": "2023-05-11T19:26:58Z", "commit_message": "Fix several resource leaks (#1435)\n\n* Local var leak in Symtab::addSymbol\r\n\r\nThis was found using cppcheck's memleak.\r\n\r\n* memCache::doOperation\r\n\r\nNot technically a leak, but cppcheck can't see through the 'push_back'.\r\n\r\n* PCProcess::hasPassedMain\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* parse_func::calcParentFunc\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* int_iRPC::setBinarySize\r\n\r\nFound using cppcheck's publicAllocationError.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8676f10714fb0bb7d0a3e7c65ec729d7db195d94", "commit_date": "2023-05-11T17:47:08Z", "commit_message": "Fix undefined behavior in integer operations (#1434)\n\n* Shifting signed 32-bit value by 31 bits is undefined behavior\r\n\r\nThis was found using cppcheck's shiftTooManyBitsSigned.\r\n\r\n* Signed to unsigned conversion in calculation\r\n\r\nThese were found using cppcheck's signConversion.\r\n\r\n* Fix signed overflow\r\n\r\nThis was found using cppcheck's integerOverflowCond.\r\n\r\n* Shifting negative value\r\n\r\nThis was found using cppcheck's shiftNegativeLHS.\r\n\r\n* BPatch_addressSpace::deleteSnippet: fix enumeral conversion in conditional", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c4a422834fbc3e6159ba00f10820f13c1958901e", "commit_date": "2023-05-10T19:01:00Z", "commit_message": "Prevent use of possibly-uninitialized local variable (#1433)\n\nThese were found using cppcheck's uninitvar and eraseDereference.\r\n\r\nFor the usages of iterator-like classes in process.C, they aren't strictly\r\nuninitialized variable usages since the classes in question are standard\r\nlayout types. It would be better to replace the usages there with list\r\nconstruction to avoid the static check altogether.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0c88bea297cb64cf147192242aaa3a4047cdb84", "commit_date": "2023-05-10T17:51:52Z", "commit_message": "Fix uninitialized member variables (#1431)\n\nThese were detected by cppcheck's uninitMemberVar*.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a73abaa9c7298a3e4ce0acf4eb14db8b1cb42fc", "commit_date": "2023-05-10T15:45:14Z", "commit_message": "Fix use of null pointer after check (#1432)\n\nThese were found using cppcheck's nullPointerRedundantCheck.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "68fc3d8a5f1527dcaa66c9455369c62e2b4fa54c", "commit_date": "2023-05-10T05:14:42Z", "commit_message": "Protect against self-assignment in copy constructors (#1430)\n\n* Protect against self-assignment in copy constructors\r\n\r\nThese were found by cppcheck:\r\n\r\ncommon/src/Node.C:198:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nNodeIterator &NodeIterator::operator=(const NodeIterator &rhs) {\r\n                            ^\r\ncommon/src/Edge.C:108:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nEdgeIterator &EdgeIterator::operator=(const EdgeIterator &rhs) {", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce097b5399fb654f68fbfe48e25e7a7bd567bf82", "commit_date": "2023-05-10T04:07:40Z", "commit_message": "Fix windows warnings (#1429)\n\n* Mismatched printf format arguments\r\n\r\nThese were found using cppcheck's invalidPrintfArgType_*.\r\n\r\n* Fix uninitialized member variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85fb0f95050c903bf1e1a1dbcacf1913dad1d73b", "commit_date": "2023-05-09T20:05:56Z", "commit_message": "Remove virtual calls in constructor/destructor (#1428)\n\n* AddressTranslateWin\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-win.C:49:17: style: Virtual function 'init' is called from constructor 'AddressTranslateWin(PID pid,PROC_HANDLE phandle)' at line 168. Dynamic binding is not used. [virtualCallInConstructor]\r\n   virtual bool init();\r\n\r\n* NodeIteratorPredicateObj\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:293:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateObj(Graph::NodePredicate::Ptr\r\np,NodeIterator&b,NodeIterator&e)' at line 331. Dynamic binding is not\r\nused. [virtualCallInConstructor]\r\n\r\n* NodeIteratorPredicateFunc\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:352:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateFunc(Graph::NodePredicateFunc\r\np,void*u,NodeIterator&b,NodeIterator&e)' at line 394. Dynamic binding is\r\nnot used. [virtualCallInConstructor]\r\n\r\n* InstructionDecoder_x86\r\n\r\nFound using cppcheck:\r\n\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: style: Virtual function 'setMode' is called from constructor 'InstructionDecoder_x86(Architecture a)' at line 144. Dynamic binding is not used. [virtualCallInConstructor]\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n                                                ^\r\ninstructionAPI/src/InstructionDecoder-x86.C:144:28: note: Calling setMode\r\n      if(a == Arch_x86_64) setMode(true);\r\n                           ^\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: note: setMode is a virtual function\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n\r\n* CFGFactor::destroy_block\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:117:18: style: Virtual function 'free_block' is called from destructor '~CFGFactory()' at line 92. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_block(Block * b);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:92:5: note: Calling destroy_block\r\n    destroy_block(b);\r\n    ^\r\nparseAPI/src/CFGFactory.C:182:5: note: Calling free_block\r\n    free_block(b);\r\n    ^\r\nparseAPI/h/CFGFactory.h:117:18: note: free_block is a virtual function\r\n    virtual void free_block(Block * b);\r\n\r\n* CFGFactor::free_func\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:116:18: style: Virtual function 'free_func' is called from destructor '~CFGFactory()' at line 95. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_func(Function * f);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:95:5: note: Calling destroy_func\r\n    destroy_func(f);\r\n    ^\r\nparseAPI/src/CFGFactory.C:172:4: note: Calling free_func\r\n   free_func(f);\r\n   ^\r\nparseAPI/h/CFGFactory.h:116:18: note: free_func is a virtual function\r\n    virtual void free_func(Function * f);\r\n\r\n* CFGFactor::free_edge\r\n\r\n* ~freebsd_process\r\n\r\nFound using cppcheck:\r\n\r\nproccontrol/src/freebsd.C:1046:17: warning: Member variable 'freebsd_thread::is_exited' is not initialized in the constructor. [uninitMemberVar]\r\nfreebsd_thread::freebsd_thread(int_process *p, Dyninst::THR_ID t, Dyninst::LWP l)\r\n                ^\r\nproccontrol/src/freebsd.h:122:17: style: Virtual function 'getEventQueue' is called from destructor '~freebsd_process()' at line 795. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual int getEventQueue();\r\n                ^\r\nproccontrol/src/freebsd.C:795:22: note: Calling getEventQueue\r\n    int eventQueue = getEventQueue();\r\n                     ^\r\nproccontrol/src/freebsd.h:122:17: note: getEventQueue is a virtual function\r\n    virtual int getEventQueue();", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6ab42a4da20f7d9a5a58c00a4835d337a95fef5", "commit_date": "2023-05-09T17:30:44Z", "commit_message": "AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak (#1427)\n\n* AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-sysv.C:1046:58: error: Resource leak: fd [resourceLeak]\r\n   if (read(fd, &e_hdr, sizeof(e_hdr)) != sizeof(e_hdr)) return base;\r\n                                                         ^\r\ncommon/src/addrtranslate-sysv.C:1048:28: error: Resource leak: fd [resourceLeak]\r\n   if (e_hdr.e_phoff == 0) return base;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5409c471292cb8b1c87e9b5ae1e94fa9b6eb573", "commit_date": "2023-05-09T17:09:20Z", "commit_message": "Make CondVar non-copyable, non-moveable (#1426)\n\nThis makes it consistent with std::condition_variable.\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]\r\n   mutex = new mutex_t;\r\n   ^\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]\r\n   mutex = new mutex_t;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "45614d7908e36d32d26126d2844d388c6936ba61", "commit_date": "2023-05-02T18:17:06Z", "commit_message": "Github CI: increase number of build jobs (#1424)\n\nGithub only allows one CPU core per job, but any number of threads. Testing shows that N=2 threads reduces build time by 2-2.5x, N=3 by 2.2x, and N=4 increases build time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e37524ab88b645328c1f02b5c4ab7ac0f7e8d3f", "commit_date": "2023-05-02T02:13:22Z", "commit_message": "Github CI: make compiler multi-build a cron job (#1425)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8952d3207763a26938e097e58ebe97b490c73cf", "commit_date": "2023-05-01T17:32:12Z", "commit_message": "CI compiler multibuilds (#1415)\n\n* Weekly build across all compiler versions and build types\r\n\r\n* Use DYNINST_WARNINGS_AS_ERRORS=ON instead of -Werror", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2e26598a5301ff900d2ca235db729d1dd4c4d350", "commit_date": "2023-05-01T16:45:24Z", "commit_message": "Use default TBB when doing CI spack build (#1423)\n\nDyninst now requires TBB >= 2019.9.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7621bc85ac0cda3bd1b2a17d78aac6d48c68280a", "commit_date": "2023-04-28T00:34:11Z", "commit_message": "Add ubuntu-22.04 to dev container build (#1419)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "719036aeb55c459a355afb91188cfa4d7d465bc9", "commit_date": "2023-04-27T23:51:51Z", "commit_message": "Refactor Dockerfile.ubuntu (#1420)\n\n* Move elfutils logic into build_elfutils.sh\r\n\r\n* Whitespace\r\n\r\n* Copy in dependencies.versions\r\n\r\nThis is no longer done in the base container because it didn't make\r\nsense there as that image should never change.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8d1a313be087154aad95d660b9fe2b34f4da492", "commit_date": "2023-04-27T22:33:27Z", "commit_message": "warning fix:  stack frame size (#1418)\n\n- when compiling with clang 15 and 16 in addition to clang 14,\r\n  allow a 40000 stack frame size", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a9c9e061ea6b41b93151f0ed3b34208346b4881", "commit_date": "2023-04-27T21:28:12Z", "commit_message": "Make InstructionAPI::isArrayIndexValid const. (#1416)\n\nclang complains:\r\n\r\n  'constexpr' non-static member function will not be implicitly 'const'  in C++14; add 'const' to avoid a change in behavior [-Werror,-Wconstexpr-not-const]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "739ad57883f032fb18a6c741f0c2f98e9a766bc7", "commit_date": "2023-04-25T17:03:44Z", "commit_message": "CMake modernization (#1391)\n\n# Changes to building Dyninst\r\n- Minimum CMake version is 3.14.0\r\n- STERILE_BUILD is now deprecated\r\n- ENABLE_LTO was renamed to DYNINST_ENABLE_LTO\r\n- CMAKE_EXPORT_COMPILE_COMMANDS is no longer set\r\n- Platform detection is done natively in CMake\r\n  - full support for Linux on x86, AMD64, ppc64le, and aarch64/ARMv8\r\n  - experimental support for 32-bit FreeBSD and Windows on x86\r\n- Custom install targets <target>-install have been removed\r\n- Installation subpaths (bin, lib, include, etc.)  are no longer user-configurable\r\n- Static versions of Dyninst libraries now depend on other static Dyninst libraries\r\n  - For example, libDynElf.a now depends on libcommon.a, not libcommon.so\r\n- Libraries that cannot build with symlight now warn when LIGHTWEIGHT_SYMTAB=ON\r\n- User build options passed via CMAKE_<LANG>_FLAGS are correctly preserved and override the builtin options\r\n- <PackageName>_ROOT_DIR now implies <PackageName>_NO_SYSTEM_PATHS and sets <PackageName>_ROOT\r\n  - This forces CMake to find the package at the given location or in CMAKE_PREFIX_PATH\r\n  - When using CMake >= 3.16, searching CMAKE_PREFIX_PATH can be disabled with CMAKE_FIND_USE_CMAKE_PATH=OFF\r\n  - For example, -DElfUtils_ROOT_DIR=/some/path sets ElfUtils_NO_SYSTEM_PATHS=ON and ElfUtils_ROOT=/some/path\r\n\r\n## RPATH handling\r\n- CMP0060 is active and so libraries are linked by their full paths even in implicit directories (e.g., /usr/lib/foo.so instead of -lfoo)\r\n- Populate RPATHs for binaries in the build tree: set(CMAKE_SKIP_BUILD_RPATH FALSE)\r\n- Do not use the install path as the RPATH: set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)\r\n  - $ORIGIN is used instead\r\n- Add paths to any directories outside the project that are in the linker search path or contain linked library files: set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\r\n\r\n## Third-party libraries (tpl)\r\n- The ability to build tpls from source has been removed\r\n- All libraries must have a CMakeConfig.cmake\r\n- Minimum versions\r\n  - Boost: 1.71.0\r\n  - TBB/oneapi-tbb: 2019.9\r\n  - elfutils: 0.186\r\n- An imported interface named Dyninst::<library> is created for each library\r\n  - includes are marked SYSTEM so they don't produce warnings\r\n  - exported in DyninstConfig.cmake as per https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n- pkgconfig is used to find elfutils and valgrind\r\n  - if pkgconfig fails, a manual search is done\r\n  - This can be disabled with  ElfUtils_NO_SYSTEM_PATHS=ON\r\n\r\n# Changes to consuming Dyninst as a CMake project\r\n- All targets are in the Dyninst namespace; e.g., symtabAPI is now Dyninst::symtabAPI\r\n- Each third-party library has an associated imported interface named Dyninst::<library>, e.g., Dyninst::Boost\r\n  - Users are encouraged to use these, if the same library is need in their applications\r\n- DYNINST_LIBRARIES has been removed\r\n- DYNINST_INCLUDE_DIR is now deprecated and will be removed in a future version\r\n  - Use the provided targets, instead\r\n- DYNINST_INTERNAL_DEFINES is now deprecated and will be removed in a future version\r\n- DYNINST_PLATFORM is now deprecated and will be removed in a future version\r\n- find_package(Dyninst ... COMPONENTS ...) now works correctly\r\n- Version constraints for find_package(Dyninst X.Y.Z) now work correctly\r\n  - Dyninst only guarantees ABI compatibility between major releases, so only the same major versions are compatible\r\n\r\nUsers who are not ready to fully migrate to the new Dyninst CMake package may use the following to preserve backward compatibility:\r\n\r\ncmake\r\nif(TARGET Dyninst::common)\r\n  foreach(t common symtabapi ...)\r\n    add_library(${t} INTERFACE IMPORTED)\r\n    target_link_libraries(${t} INTERFACE Dyninst::${t})\r\n  endforeach()\r\nendif()\r\n\r\n* Update minimum CMake version to 3.13.0\r\n\r\n* Rename CMake files to prevent name collisions\r\n\r\nWhen consumed as a subproject, the CMake files could be imported into the parent project where the filenames could collide.\r\n\r\n* Prepend to CMAKE_MODULE_PATH instead of overwriting\r\n\r\n* Fix capitalization error in FindThread_DB\r\n\r\nThis should silence the warning about Thread_Db versus Thread_DB\r\n\r\n* Require CMake package for TBB (#1322)\r\n\r\n* Make libdl/dbghelp private linkage\r\n\r\n* Remove TBB flags from toolkits that don't use TBB\r\n\r\n* Remove FindTBB.cmake\r\n\r\nAll supported TBB versions ship as CMake packages, so this is no longer\r\nneeded.\r\n\r\n* Remove from-source build option\r\n\r\n* Create an imported target for TBB used by Dyninst\r\n\r\nThis is needed to force the include directories to be considered 'system' directories so that compiler warnings from TBB sources are ignored\r\n\r\n* Rename cmake/ThreadingBuildingBlocks.cmake -> cmake/tpls/DyninstTBB.cmake\r\n\r\nThis is needed to keep the namespace clean for DyninstConfig.cmake\r\n\r\n* Export TBB as part of the Dyninst CMake package\r\n\r\nThis is required by the CMake guidelines:\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nIn particular,\r\n  \"All required dependencies of a package must also be found in the package configuration file\"\r\n\r\n* Format DyninstTBB.cmake\r\n\r\n* Boost CMake modernization (#1330)\r\n\r\n* Remove FindBoost.cmake\r\n\r\nUse the one provided by CMake so we don't have to maintain this one.\r\n\r\n* Remove from-source build\r\n\r\n* Remove user-configurable version\r\n\r\n* Force use of multithreaded libraries\r\n\r\nWe don't need to include Threads here. Boost will do that.\r\n\r\n* Disable use of statically-linked runtime\r\n\r\n* Remove Boost_DEBUG\r\n\r\n* Always enable searching system paths\r\n\r\n* Unify path calculations, pass to find_package as hints\r\n\r\n* Clean up comments\r\n\r\n* Use include_guard\r\n\r\n* Allow using Boost's CMake package\r\n\r\nIt is now provided by default since 1.70.0 which is the current minimum\r\nacceptable version.\r\n\r\n* Remove rest of cache variables\r\n\r\n* Remove MSVC-specific template define\r\n\r\nWe can add this back, if we find there are newer VCs still affected.\r\n\r\n* Make Dyninst::Boost imported interface target\r\n\r\nThis is needed to make the include directories be \"system\" directories\r\nso that warnings in their headers do not propagate into Dyninst.\r\n\r\n* Do not add Boost as a dependency for all libs\r\n\r\n* Make find_package QUIET\r\n\r\n* Use Boost_* variables instead of calculating includes, libs, etc.\r\n\r\n* Make a header-only wrapper target\r\n\r\n* Add to Dyninst package\r\n\r\n* Update CMakeLists\r\n\r\n* Set Boost_NO_WARN_NEW_VERSIONS\r\n\r\n* Bump minimum version to 1.71.0\r\n\r\n* Elfutils cmake modernization (#1333)\r\n\r\n* Rename FindLibDwarf -> FindLibDW\r\n\r\n* Update FindLibDW\r\n\r\n* Rename FindLibElf -> FindLibELF\r\n\r\n* Update FindLibELF\r\n\r\n* Create FindElfutils\r\n\r\n* Update FindLibDebuginfod\r\n\r\n* Update DyninstElfUtils\r\n\r\n* Update the CMakeLists to use new targets\r\n\r\n* Use CMP0074 in updated Find modules\r\n\r\nThis enables use of <Package>_ROOT variables when find_package is\r\ninvoked.\r\n\r\n* Provide default dummy interface target for ElfUtils::ElfUtils\r\n\r\nNeeded for non-Unix platforms.\r\n\r\n* Fix rebase bug in CMakeLists.txt\r\n\r\n* Export DyninstElfUtils\r\n\r\n* Forward QUIET flag to pkg_check_modules\r\n\r\n* Forward version to pkg_check_modules\r\n\r\n* Use lib from pkg-config, if found\r\n\r\n* Clean up internal variables\r\n\r\n* Simplify cache variable handling\r\n\r\n* Use full linkage name for libs returned by pkg-config\r\n\r\n* Separate out dependent libraries in FindLibDW\r\n\r\nSome platforms include libelf as a dependency, but IMPORTED_LOCATION accepts only a single entry. Store the rest in IMPORTED_LINK_DEPENDENT_LIBRARIES.\r\n\r\n* Fix quoting bug in FindLibDW\r\n\r\n* Fix lib check in FindLibDW\r\n\r\n* Manually set PC_<XXX>_INCLUDE_DIRS when FindPkgConfig misses it\r\n\r\nFindPkgConfig uses the output from pkg-config --cflags-only-I <lib> to set PC_<XXX>_INCLUDE_DIRS. Because libelf is usually in a system directory, pkg-config will return nothing for this. FindPkgConfig stores the actual includedir variable from the PC file, so we can fetch it from there.\r\n\r\n* Libiberty cmake modernization (#1334)\r\n\r\n* LibIberty cmake modernization\r\n\r\n* Use INCLUDE_DIRS directly\r\n\r\n* Threaddb cmake modernization (#1338)\r\n\r\n* Update FindThread_DB\r\n\r\n* Update thread_db\r\n\r\n* Update docs URL\r\n\r\n* Use OpenMP target (#1339)\r\n\r\nThis also provides a dummy target so we don't have to do any additional checking when USE_OpenMP=OFF. We only use OpenMP_CXX, so I didn't create a target for the other languages (C,Fortran).\r\n\r\n* Valgrind cmake modernization (#1340)\r\n\r\n* Update valgrind\r\n\r\n* Add version check in Find module\r\n\r\n* Remove Valgrind_LIBRARIES\r\n\r\nThey are versioned by architecture, so are hard to nail down with\r\nfind_library. We also don't need them (at least not yet).\r\n\r\n* Make dummy when ADD_VALGRIND_ANNOTATIONS=OFF\r\n\r\n* Add compile defs\r\n\r\n* Update CMakeLists.txt\r\n\r\n* Make the dummy IMPORTED\r\n\r\n* Fix bug with version handling in DyninstBoost\r\n\r\n* Use _min_version in DyninstBoost\r\n\r\nThis is so the CI version check will work uniformly\r\n\r\n* Add existence check for Dyninst::Boost before creating target\r\n\r\n* Clean up find_package flag handling in Find modules\r\n\r\n* Make variable exports uniform across Find modules\r\n\r\n* Coalesce calls to set_target_properties in Find modules\r\n\r\n* Fix bug in DyninstElfutils when calling find_package LibDebuginfod\r\n\r\n* Make just one exported target in FindElfutils\r\n\r\n* Add target existence check in DyninstTBB\r\n\r\n* Add SYSTEM property to Elfutils includes\r\n\r\n* Remove export of DYNINST_LIBRARIES\r\n\r\n* Preserve user's module path when looking for Dyninst modules\r\n\r\n* Manually set legacy DYNINST_INCLUDE_DIR\r\n\r\nThis is now deprecated.\r\n\r\n* Use CMAKE_CURRENT_LIST_DIR intead of DYNINST_CMAKE_DIR\r\n\r\n* Install Find modules for third-party libraries\r\n\r\n* Remove unused DyninstConfigVersion.cmake\r\n\r\n* Remove unneeded comments in DyninstOptions\r\n\r\n* Move all options to DyninstOptions\r\n\r\n* Remove modification of CMAKE_CONFIGURATION_TYPES\r\n\r\nWe just support the usual configs.\r\n\r\n* Move Dyninst version strings to base CMakeLists.txt\r\n\r\n* Move internal includes into base CMakeListst.txt\r\n\r\nThis ensures that all user options and internal settings are in place\r\nbefore third-party dependencies are configured.\r\n\r\n* Clean up 3rd party includes in base CMakeLists.txt\r\n\r\n* Remove unused version strings\r\n\r\n* Remove unneeded 'add_dependencies(common boost)' in base CMakeListst.txt\r\n\r\nThis is now handled directly in CMake recipe for common.\r\n\r\n* Remove unused testsuite include in base CMakeLists.txt\r\n\r\n* Update the project declaration\r\n\r\n* Move setting of CMAKE_BUILD_TYPE to base CMakeLists.txt\r\n\r\nThis keeps all CMake-level variables in one place.\r\n\r\n* Don't set CMAKE_EXPORT_COMPILE_COMMANDS\r\n\r\nThe user should set this.\r\n\r\n* Move BUILD_SHARED_LIBS into base CMakeLists.txt\r\n\r\n* Remove unused INSTALL_DOC_DIR\r\n\r\n* Make cmake_minimum_required a FATAL_ERROR\r\n\r\n* Move rpath and shared lib settings into DyninstLibrary\r\n\r\n* Move installation items into DyninstInstall.cmake\r\n\r\n* Automatically generate DyninstConfigVersion.cmake\r\n\r\n* Use configure_package_config_file to generate DyninstConfig.cmake\r\n\r\nThis will provide more utilities to make a more robust Config.cmake\r\n\r\n* Use INSTALL_INCLUDE_DIR to set DYNINST_INCLUDE_DIR\r\n\r\n* Use PACKAGE_INIT in Config.cmake.in\r\n\r\nAlso use it for DYNINST_INCLUDE_DIR\r\n\r\n* Don't explicitly set Dyninst_FOUND\r\n\r\nThe caller's find_package will do this.\r\n\r\n* Remove unused DyninstSystemPaths.cmake\r\n\r\n* Simplify visibility settings and move to DyninstLibrary\r\n\r\n* Move SYMREADER calculation to base CMakeLists.txt\r\n\r\nIt is needed in several places before DyninstLibrary is included.\r\n\r\n* Merge platform calculations into a DyninstPlatform.cmake\r\n\r\n* Remove DyninstVisibility include\r\n\r\n* Moved configure_file back to base CMakeListst\r\n\r\nThe ordering matters until common gets an explicit list of header files (currently uses a glob).\r\n\r\n* Remove DyninstConfigVersion.cmake.in\r\n\r\nThis isn't needed anymore since the version file is generated automatically.\r\n\r\n* Remove custom target install\r\n\r\ncmake_install.cmake isn't intended to be used that way.\r\n\r\n* Remove install logic from dyninst_library\r\n\r\nThat is now handled in DyninstInstall.\r\n\r\n* cmake-format: set tab size to 2\r\n\r\n* cmake-format: don't format comments\r\n\r\n* Calculate platform from CMake-provided mechanisms\r\n\r\nThese are equivalent to the existing bash, but more adaptable.\r\n\r\n* Map stringy names into CMake variables\r\n\r\n* Replace Windows platform check with DYNINST_OS_Windows\r\n\r\n* Replace Linux platform check with DYNINST_OS_Linux\r\n\r\n* Replace FreeBSD platform check with DYNINST_OS_FreeBSD\r\n\r\n* Replace x86 platform check with DYNINST_OS_x86_64\r\n\r\n* Replace ppc platform check with DYNINST_ARCH_ppc64le\r\n\r\n* Replace aarch64 platform check with DYNINST_ARCH_aarch64\r\n\r\n* Replace mangled platform checks with explicit DYNINST_{OS,ARCH}\r\n\r\n* Rename PLATFORM to DYNINST_PLATFORM and export it as legacy\r\n\r\nThis is only used in the test suite.\r\n\r\n* Don't pass -m64 explicitly on ppc64le\r\n\r\nWe only support 64-bit ppc, so this is redundant and non-portable.\r\n\r\n* Remove commented-out define for aarch64\r\n\r\n* Simplify CapArchDef\r\n\r\nWith the new variables, only one pass over the OS names is needed.\r\n\r\n* Allow FreeBSD to build on i386\r\n\r\nI previously thought it was only allowed on x86_64, but there is an old platform called i386-unknown-freebsd7.2.\r\n\r\n* Add Windows to DYNINST_PLATFORM\r\n\r\n* Replace usage of WIN32 with DYNINST_OS_Windows\r\n\r\n* Replace usage of UNIX with DYNINST_OS_UNIX\r\n\r\n* Merge Linux+FreeBSD checks into UNIX check\r\n\r\n* symtabAPI - replace i386 check\r\n\r\n* Use 'option' instead of 'set(... CACHE ...)'\r\n\r\n* Deprecate STERILE_BUILD\r\n\r\n* DyninstOptions - use 'OFF' instead of 'NO'\r\n\r\n* Get rid of dyninst_link_private_library\r\n\r\nWe require CMake >= 3.13.0 so this is no longer needed.\r\n\r\n* Rename SOVERSION to DYNINST_SOVERSION\r\n\r\nSOVERSION is a keyword.\r\n\r\n* Replace LIBVERSION with DYNINST_LIBVERSION\r\n\r\nFor clarity and consistency.\r\n\r\n* Replace DYNINST_ROOT with PROJECT_SOURCE_DIR\r\n\r\n* Move library settings into DyninstLibrarySettings.cmake\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR absolute\r\n\r\nIn 'install', they are relative to CMAKE_INSTALL_PREFIX by default.\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR cache variables\r\n\r\nThere's no need to let the user modify these locations.\r\n\r\n* DyninstLibrarySettings - reuse INSTALL vars\r\n\r\nThis just makes sure changes are propagated.\r\n\r\n* DyninstLibrarySettings - remove INSTALL_BIN_DIR\r\n\r\nIt's not used.\r\n\r\n* DyninstLibrary - rename INSTALL_*_DIR -> DYNINST_INSTALL_*DIR\r\n\r\nThis is more in line with the naming convention of GNUInstallDirs. We\r\ncould use GNUInstallDirs directly, but there's no need to let the user\r\nconfigure the install directory layout.\r\n\r\n* DyninstLibrarySettings - Use 'Dyninst' instead of PROJECT_NAME\r\n\r\nThis is the only placed PROJECT_NAME is used, so make it consistent.\r\n\r\n* DyninstLibrarySettings - update RPATH handling\r\n\r\n* DyninstLibrary - don't manually create cmake_install.cmake\r\n\r\nThese are automatically created and installed by 'install'.\r\n\r\n* DyninstLibrary - Merge calls to set_target_properties\r\n\r\n* DyninstLibrary - Cleanup superfluous variable usage\r\n\r\n* DyninstLibrary - add Windows defines to targets instead of directories\r\n\r\n* DyninstLibrary - add LIGHTWEIGHT_SYMTAB, SW_ANALYSIS_STEPPER to targets\r\n\r\n* DyninstLibrary - add DYNINST_DIAGNOSTIC_NO_SUPPRESSIONS to targets\r\n\r\n* DyninstLibrary - export all targets to DyninstTargets.cmake\r\n\r\n* DyninstLibrary - don't treat each library as a separate component\r\n\r\n'COMPONENT' in 'install' is used to group targets into \"bags\" of useful\r\nfeatures that can be independently installed using cmake --install .\r\n--component .... That doesn't work for Dyninst. Note: This is\r\northogonal to the concept of a COMPONENT in find_package.\r\n\r\n* DyninstLibrary - remove CLEAN_DIRECT_OUTPUT\r\n\r\nWe no longer offer per-library build targets.\r\n\r\n* DyninstLibrary - remove WITHOUT_SYMTAB_API and WITHOUT_SYMLITE\r\n\r\nThese are never used.\r\n\r\n* DyninstLibrary - refactor global defines in 'dyninst_library'\r\n\r\n* DyninstLibrary - Move calculation of SYMREADER\r\n\r\n* DyninstLibrary - rename 'target' to '_target'\r\n\r\n'target' is a keyword\r\n\r\n* DyninstLibrary - add named arguments\r\n\r\n* DyninstLibrary - rename SRC_LIST with _target_SOURCE_FILES\r\n\r\nThe latter is created from the named argument 'SOURCE_FILES'.\r\n\r\n* DyninstLibrary - Replace ACTUAL_TARGETS with _all_targets\r\n\r\n* DyninstLibrary - make headers part of library declaration\r\n\r\nThis tracks file changes to signal rebuilds.\r\n\r\n* DyninstLibrary - add links, properties, includes to all targets\r\n\r\nThis synchronizes the SHARED and STATIC libraries.\r\n\r\n* DyninstLibrary - link private and public deps separately\r\n\r\n* DyninstLibrary - Set include directories on interfaces\r\n\r\nThis replaces using PUBLIC_HEADERS which is really intended for use with\r\nMacOS Framework targets.\r\n\r\n* DyninstLibrary - remove LIBRARY_OUTPUT_DIRECTORY\r\n\r\nThe default is CMAKE_CURRENT_BINARY_DIR, so no need to specify it.\r\n\r\n* DyninstLibrary - Apply DEFINES passed to dyninst_library\r\n\r\n* DyninstLibrary - make SHARED library explicit\r\n\r\n* DyninstLibrary - don't deref Boolean variable\r\n\r\n* DyninstLibrary - update message\r\n\r\n* DyninstLibrary - Install headers, preserving the directory structure\r\n\r\n* DyninstLibrary - \"return\" the list of generated target names\r\n\r\n* DyninstLibrary - add directory-level include guard\r\n\r\n* common - remove spurious files\r\n\r\nAdded in 2015.\r\n\r\n* common - move generation of dyninstversion.h into CMakeLists.txt\r\n\r\n* common - add global include guard in CMakeLists\r\n\r\n* common - explicitly list header files in CMakeLists\r\n\r\nThis makes it easier to see what the actual public files are.\r\n\r\n* common - refactor source list calculation\r\n\r\n* common - move include of DyninstLibrary into subdirectory\r\n\r\n* common - use new dyninst_library\r\n\r\n* common - set includes and Windows stuff on all targets\r\n\r\n* common - write 'dyninstverison.h' into source dir\r\n\r\n* elf - make a dummy target for non-Unix OSes\r\n\r\n* elf - use new dyninst_library\r\n\r\n* dwarf - use new dyninst_library\r\n\r\nThe changes here are the same as for elf/CMakeLists\r\n\r\n* symlite - make symlite/h/SymLite-elf.h publicly consumable\r\n\r\nIt refers to files in the build tree that aren't available in the\r\ninstall tree. Although this file is in the install tree, it was never\r\nconsumable by users. Updating this is of questionable utility, but it at\r\nleast gives us the opportunity to write tests against the public\r\ninterface.\r\n\r\n* symlite - use new dyninst_library\r\n\r\n* instructionAPI - use new dyninst_library\r\n\r\n* symtabAPI - use new dyninst_library\r\n\r\n* proccontrol - use new dyninst_library\r\n\r\n* parseAPI - use full path to common/h/util.h.\r\n\r\nThis prevents confusion with parseAPI/h/util.h.\r\n\r\n* parseAPI - use new dyninst_library\r\n\r\nThis one is different from the rest because parseAPI and dataflowAPI\r\nhave circular dependencies on each other, so it's not currently possible\r\nto split them up.\r\n\r\n* stackwalk - use new dyninst_library\r\n\r\nPreviously, FORCE_FRAME_POINTER was applied to _all_ of Dyninst. The\r\ncommit comments said it was supposed to be just for the stackwalk\r\nsources, so that is the new behavior.\r\n\r\n* stackwalk - incorporate check of SW_ANALYSIS_STEPPER\r\n\r\nIt only affects stackwalk, so no need to put it on all of the targets.\r\n\r\n* stackwalk - put SW_ANALYSIS_STEPPER check in post-processing\r\n\r\nThis tidies up the code a bit.\r\n\r\n* patchAPI - use new dyninst_library\r\n\r\n* dyninstAPI - use absolute include path for 'debug.h'\r\n\r\n* dyninstAPI - add missing include for Dyninst::Address\r\n\r\nThis was transitively included, but breaks when reording includes.\r\n\r\n* dyninstAPI - add missing include for std::set\r\n\r\n* dyninstAPI - use new dyninst_library\r\n\r\n* dynC_API - use new dyninst_library\r\n\r\n* parseThat - use new dyninst_library\r\n\r\n* dyninstAPI_RT - use new dyninst_library\r\n\r\n1. SRC_ASSEMBLY was never used. The assembly files have always been\r\nexplicitly listed.\r\n\r\n2. We are still linking libdl.so on the static versions of the runtime.\r\nThis hasn't been an issue in the past, so we'll leave it.\r\n\r\n3. The creation of the lists of source files has redundant checks in it,\r\nbut this version is much clearer on what is actually happening.\r\n\r\n4. CHECK_C_COMPILER_FLAG_EXTENDED was removed since CMake now supports a\r\nmuch larger set of compilers and Dyninst has dropped support for HP,\r\nSun, and XL.\r\n\r\n5. The config is much less noisy. There was no reason to determine if\r\n32-bit support would work when the user didn't ask for it. Now, the\r\nconfig will fail if the user asks for 32-bit libraries and the compiler\r\ncan't create them.\r\n\r\n* Remove top-level project includes\r\n\r\nAll of the necessary includes are now handled by each toolkit via\r\nexplicit import/export of targets and include directories.\r\n\r\n* Remove top-level check for SYMREADER\r\n\r\nThe respective CMakeLists now handle this.\r\n\r\n* Add better handling of Threads/pthread\r\n\r\n1. Move Threads include into a tpls module\r\n\r\n2. Link against Threads::Threads instead of 'pthread'\r\n\r\n3. Add explicit dependencies in dyninstAPI and dyninstAPI_RT (they were\r\nimplicit before).\r\n\r\n* DyninstConfig - Correctly detect presence of COMPONENTS on import\r\n\r\nThis previously didn't work at all because DYNINST_${COMP}_FOUND should\r\nhave been spelled Dyninst_${COMP}_FOUND. This is simpler and allows the\r\nuse of check_required_components directly.\r\n\r\n* DyninstConfig - Remove unneeded and (now) incorrect comments\r\n\r\n* Make an OpenMP tpl module\r\n\r\nThis will make it easier to export OpenMP in DyninstConfig. It also makes CMakeLists.txt have just straight-line code.\r\n\r\n* Include all third-party libraries in DyninstConfig\r\n\r\nThis is explicitly required by the CMake documentation:\r\n\r\n  \"All required dependencies of a package must also be found in the\r\npackage configuration file.\"\r\n\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nThis also ensures that the custom Dyninst:: targets are always available\r\nto consumers.\r\n\r\n* Ensure static libraries depend on static Dyninst libraries\r\n\r\nWhen creating a static Dyninst library, ensure that it depends on the\r\ncorresponding static Dyninst library. For example, libDynElf.a should\r\ndepend on libcommon.a, not libcommon.so.\r\n\r\n* DyninstWarnings - Ignore no-pragma warnings for non-Werror builds\r\n\r\n* DyninstCapArchDef - rename UNIFIED_DEFINES\r\n\r\nDYNINST_PLATFORM_CAPABILITIES is more descriptive.\r\n\r\n* DyninstCapArchDef - add include guard\r\n\r\n* DyninstLibrary - add DYNINST_PLATFORM_CAPABILITIES to all targets\r\n\r\n* DyninstLibrary - add documentation\r\n\r\n* DyninstLibrary - update comment about install dir structure\r\n\r\n* DyninstLibrary - install runtime in 'bin'\r\n\r\n* Include 'src' and 'h' subdirectories in BUILD_INTERFACE\r\n\r\nEvery toolkit has a similar directory structure, so we can do this\r\nin just one location instead of in each CMakeLists.\r\n\r\n* Unswitch loops for platform-specific target updates in CMakeLists\r\n\r\nThis is really a code beautification.\r\n\r\n* Remove DYNINST_LIBVERSION\r\n\r\nIt's never different from DYNINST_VERSION and has no special purpose.\r\n\r\n* Remove system path detection in RPATH calculations\r\n\r\nWe use CMAKE_BUILD_WITH_INSTALL_RPATH to ensure the install path is not\r\nin RPATH/RUNPATH, but then this code would add it back if the install\r\ndirectory isn't a system path.\r\n\r\n* DyninstLibrary - simplify regex for header install\r\n\r\n* Rename cmake/version.h.in to cmake/dyninstversion.h.in\r\n\r\nThis makes the generated file match the generator file name.\r\n\r\n* DyninstLibrary - install from _target_PUBLIC_HEADER_FILES\r\n\r\n_public_headers was only incidentally present from the file including\r\nthis one.\r\n\r\n* parseAPI - make headers PRIVATE in dyninst_library\r\n\r\nWe manually install them because of how dataflowAPI is consumed.\r\n\r\n* Issues warning when toolkit cannot be built with LIGHTWEIGHT_SYMTAB\r\n\r\n* CMake modernization - update compiler flags (#1374)\r\n\r\n* Fix spelling of LibDW_INCLUDE_DIRS when marking it as advanced\r\n\r\n* Mark STERILE_BUILD as advanced\r\n\r\n* Mark Boost_DIR as advanced\r\n\r\n* Mark TBB_DIR as advanced\r\n\r\n* Mark Thread_DB_{INCLUDE_DIRS,LIBRARIES} and as advanced\r\n\r\n* Update README\r\n\r\n* Add gfx908 public headers\r\n\r\nThese somehow didn't make it through the rebase\r\n\r\n* Make flags for RelWithDebInfo and Release match\r\n\r\n* Disable cmake-format for extra flags in DyninstWarnings\r\n\r\n* Propagate ElfUtils_ROOT_DIR to FindLib{ELF,DW,Debuginfod}\r\n\r\n* Use 'set' instead of 'option' for stringy options\r\n\r\n* Add more cmake-format exceptions in DyninstWarnings\r\n\r\n* Add <Package>_NO_SYSTEM_PATHS to elf, dw, debuginfod\r\n\r\nThis is used to exclude system directories from the search process.\r\n\r\n* Have ElfUtils_ROOT_DIR override search paths\r\n\r\nIf the user provides a value, then no system paths (aside from the ones\r\nin CMAKE_PREFIX_PATH) are searched. This lets the user 'force' a\r\nlocation for elfutils.\r\n\r\n* Remove explicit version fail check in elfutils find-modules\r\n\r\n* Move ElfUtils_ROOT_DIR check into DyninstElfutils\r\n\r\n* Add LibIberty_NO_SYSTEM_PATHS\r\n\r\n* Add Valgrind_NO_SYSTEM_PATHS\r\n\r\n* Remove explicit version check from FindValgrind\r\n\r\n* Boost - use new meaning of Boost_ROOT_DIR\r\n\r\n* Fix typo in DyninstElfUtils\r\n\r\n* Fix bug when setting path flags\r\n\r\n* TBB - use new meaning of TBB_ROOT_DIR\r\n\r\n* Add support for common/h/unaligned_memory_access.h\r\n\r\n* Set default DYNINST_LINKER to empty\r\n\r\nThis will use the default linker. lld is the LLVM linker.\r\n\r\n* Make requesting an unknown component an error\r\n\r\n* Always build libdyninstAPI_RT.a\r\n\r\nThis is always needed by the test suite and keeps the old behavior of having it built by default.\r\n\r\n* Add DYNINST_FORCE_RUNPATH option\r\n\r\nSetting this flag forces the linker to use RUNPATH instead of RPATH.\r\nThis is most useful for working with older RedHat distros.\r\n\r\n* Reduce number of public link dependencies\r\n\r\nThis reduces the number of transitive links that have to be done by\r\nbinaries linking against Dyninst.\r\n\r\n* Make elfutils dependency public for symtab\r\n\r\nIt's needed in the Module.h public header.\r\n\r\n* Require TBB >=2019.9\r\n\r\nWhen building from source, versions before 2019.9 incorrectly set the\r\nversion in TBBConfigVersion.cmake. For example, 2018.6 sets the version\r\nto 2018.0 because it uses the TBB_{MAJOR,MINOR}_VERSION from tbb_stddef.h\r\ninstead of doing the calculation based on the engineering version.\r\n\r\nThis also unifies the versions required when compiling with gcc and clang.\r\n\r\nTBB 2018.6 was released in Oct 2018 and 2019.9 was released in Oct 2019,\r\nso this just bumps the requirement by just a year even though there are\r\nat least 9 releases in between.\r\n\r\n* Update Boost version in docker/dependencies.versions\r\n\r\n* Update filenames in dependency-version CI check\r\n\r\n* Update variable names in dependency-version CI check\r\n\r\n* Make elfutils dependency public for dynElf\r\n\r\n* bump CMake minimum version to 3.14.0\r\n\r\nThe 3.13.* family requires every 'install' to specify a \"LIBRARY\r\nDESTINATION\". We don't need or want that in the custome parseAPI install\r\n(line ~130) for exporting the public headers.\r\n\r\n* Add cmake to dependency-version CI check\r\n\r\n* Rename cdna2 -> gfx90a in new layout\r\n\r\n* Always create list of static-only sources in dyninstAPI_RT\r\n\r\n* Add common/h to BUILD_INTERFACE in 32-bit libdyninstAPI_RT\r\n\r\n* Fix building with symLite\r\n\r\nThe headers from symtabAPI are still required, even when building with symLite.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e93225713b1633a7bf6ff0d9a89c409db802173", "commit_date": "2023-04-21T19:58:43Z", "commit_message": "Add callback for parsing unknown instructions (#1276)\n\n* Add callback declarations for unknown instructions in InstructionDecoder\r\n\r\n* Update definition of callback interface\r\n\r\nThis also makes 'unknown_instruction' inconstructible.\r\n\r\n* make isValid the same as isLegalInsn\r\n\r\nThis makes it impossible to make an Instruction object from a failed\r\ndecoding process. This only affects x86.\r\n\r\n* Detect illegal instructions sooner in doIA32Decode\r\n\r\n* Don't advance the buffer when an x86 decode fails\r\n\r\n* Use a ternary to avoid linker error on some gcc's\r\n\r\nSome versions of gcc don't inline std::min _and_ need to resolve maxInstructionLength.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "308bddcb75de5df8e18d7b5af62602d9f5f818a0", "commit_date": "2023-04-20T21:01:50Z", "commit_message": "Update GFX90A Decoder  ISA-SPEC(02/22/23) (#1407)\n\nUpdate implementation for AMDGPU GFX90A based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. case label in amdgpu_gfx90a_decoder_impl.C made sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44e3bb530ccb4228588bd17635eaf77cdf5365e1", "commit_date": "2023-04-20T21:01:37Z", "commit_message": "Update GFX908 Decoder ISA-SPEC(02/22/23) (#1408)\n\nUpdate implementation for AMDGPU GFX908 based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions (dsmem)\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. Make case label in amdgpu_gfx90a_decoder_impl.C sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c401cd675058af5e873f4763a6f133fd11938ce", "commit_date": "2023-04-20T21:00:54Z", "commit_message": "Add CI workflow to build consumers of Dyninst (#1412)\n\n* Add CI workflow to build consumers of Dyninst\r\n\r\n* Build with cron", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25b37343f2f115298bd82eecf579bc3baf06b5ba", "commit_date": "2023-04-20T20:55:59Z", "commit_message": "CI workflow to build from spack (#1411)\n\n* CI workflow to build from spack\r\n\r\n* Update cron to every Sunday at 3AM\r\n\r\n* Force use of intel-tbb\r\n\r\nDue to explicit conflicts in the recipe, spack uses intel-parallel-studio which can't be used in automated builds because it prompts the user to accept a license agreement\r\n\r\n* Switch to weekly cron schedule", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0885301c49db8cfc286f41003a558005c9c7ace6", "commit_date": "2023-04-05T13:30:47Z", "commit_message": "Rename Architecture AMDGPU_CDNA2 to AMDGPU_GFX90A (#1404)\n\nRename the Architecture Arch_amdgpu_cdan2 to Arch_amdgpu_gf90a,\r\nas recommended by the vendor.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2f7af10477b0f7daf0efca2c992224711e5deb27", "commit_date": "2023-04-04T02:12:02Z", "commit_message": "Fix link bug in insnCodeGen::loadImmIntoReg on aarch64 (#1405)\n\n* Fix link bug in insnCodeGen::loadImmIntoReg on aarch64\r\n\r\nThe function template has a separate declaration and \"definition\" AND is\r\ncalled from translation units where neither is located. This only happens\r\nto work correctly when the TUs are linked in a specific order.\r\n\r\n* Remove assert\r\n\r\nThe value is now always positive.\r\n\r\n* Remove missed template usage in emit-aarch64.C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a86894f3d9120883ed4c0cf4278287c8bb43ed73", "commit_date": "2023-03-30T20:00:03Z", "commit_message": "remove unneeded zero length files (#1403)\n\n- two old commits (accidentally?) committed zero length files that\r\n  seem to serve no purpose", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1ddebd3125437d3385e65a7cce5bea715588028", "commit_date": "2023-03-23T14:25:12Z", "commit_message": "Fix UB in dwarf/dwarf_subrange.cpp::get_type (#1402)\n\nThe dwarf_* functions return a pointer to their last argument. This causes 'get_type' to return a pointer to a local variable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e952a0dfc13dbb7d665219a672733a505ee2a00", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  stack frame larger than (#1397)\n\n- increase stack frame size warning limit another 1000 bytes for\n  power_opcode_tables.C for RELEASE builds using the clang compiler", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683c85c7ef35d0afe6188271c8f697f6f839e12d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameter (conditionally) (#1397)\n\n- Add macro DYNINST_SUPPRESS_UNUSED_VARIABLE to suppress\n  warnings about unused variables\n\n- use macro to suppress function parameter that is only unused\n  when building on aarch64 and hence cannot be commented out", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "309d167d291f69d0ba9d4671ca581d6d24bf95e0", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "fix broken call to base class function (#1397)\n\n- SgAsmBinaryMultiply::get_type() rose results in infinite recursion\n  as casting the pointer to the base class and calling a function\n  still calls the derived version.  Just call the base class's function\n\n- rewrite SgAsmBinaryAdd::get_type the same way; it was not broken\n  but was convoluted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f57a5cbdfa98333527466423cbc32224874fa81", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "enable warnings in dataflowAPI/src (#1397)\n\n- separate dataflowAPI/src and dataflowAPI/rose source files\n\n- undo disabling warnings for dataflowAPI/src files\n\n- only include ABI.C as a source file once", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "766c7fad0f9f25bc5505f55a88c4f370b0f2cc69", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variable (clang compiler bug) (#1397)\n\n- add suppressions around code that contains a lock using RAII;\n  clang prior to version 10 contains a bug where it does not\n  recognized that the ctor and dtor make the variable used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e86fb6e232b370a66f407f9a0af440134bff147", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  suppress VLA warning (#1397)\n\n- Rose uses a VLA in C++ which is non-standard; for now suppress the\n  diagnostic\n\n- clang requires disabling both -Wvla and -Wvla-extension\n\n- gcc <9, 11.0 and 11.1 has a bug that requires the suppression to\n  to not be in the same macro as VLA itself", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89b22e23d4abcf48a2b1d3dd0f1ce294b4bb6260", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1397)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f7ed33ed9fac49623fea5ed2743462d8c31a062", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  missing noexcept (#1397)\n\n- declare function noexcept to allow potential optimization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "61faa14906eb2a7543867f4cb66643783ba41323", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  deprecated implicit ctor and op= (#1397)\n\n- add explicit copy ctors and operator=,\n  or delete dtor where it could be defaulted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa4713e0f2f063362a496ed03d0d0d65ff43d037", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (delete variable) (#1397)\n\n- remove variables and their initializatins that shadow a variable in\n  the enclosing scope as they were initialized with the same value", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1caea03054dbd73178ea2f40e2ca3474ff9c82e6", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (rename) (#1397)\n\n- rename names that shadow a name in an enclosing scope or class with\n  a unique name", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a309c63953a845f2d0c6e24f3bc3c4d117ef9006", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  potentially evaluated expression (#1397)\n\n- replace use of typeid(expr) where expr executes code at run-time\n  with a dynamic_cast that is obvious that it executes code at\n  run-time", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "412071df5285ecb872abaa966ae4ebb81c733573", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  overloaded virtual overrides (#1397)\n\n- import the name of the base class's virtual function(s) that were\n  overridden in the derived class to prevent hiding of the base class's\n  functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a720e99d94bfb01de40488d5dae8b45645fb284e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  copy ctor missing base class (#1397)\n\n- call the base class's copy constructor in the derived class's\n  copy constructor", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "336409431b648c18c7b51ec1c3135489f82ab7ce", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  case fallthough (#1397)\n\n- add break statement or DYNINST_FALLTHOUGH macro where a switch\n  case falls through to the next case", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "476ba11cf828964579d40a26b21e4b0eb808d560", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  printf format related (#1397)\n\n- add printf-format annotation on dataflow printf function parameter\n\n- fix format string to match parameter types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a15d069e2ce6340396e71bc283f0ac2377b4da6e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  reorder ctor initialization list (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f13b79c36af349203bddba40757b82a1206de42d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  const correctness (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b880173dc64d2d1f07e4d41b4796eac3d14873fe", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variables (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "951ebb64db730f7497ce886e8634aaa3da3cc5e7", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameters (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e9a4b86d2adbe3763fad3df38f85ac92959e26c", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  variadic macro (#1397)\n\n- replace non-standard variadic macro syntax with standard syntax\n\n- remove preprcessor check to use variadic macros if the compiler is\n  gcc;  all compilers support them", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42223b1f9118e32fe145a85a13ced32c13cd5871", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  extraneous semicolons (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ebf545849ef979aaa21bf82e8caff104cbeb6f6", "commit_date": "2023-03-15T13:47:22Z", "commit_message": "Github CI: update dev container deployment (#1400)\n\n* Log in to GHCR before building\r\n* Pull base image for cache", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab965c214b030a302aa0307b121cb9d06ab0a989", "commit_date": "2023-03-15T12:39:13Z", "commit_message": "Github CI: add line continuation in dev-containers.yaml (#1399)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f5558a15b16272eef982b5e8ddfdf172eb59036", "commit_date": "2023-03-15T12:23:31Z", "commit_message": "Add PR testing Github CI (#1393)\n\nRun on pull request to master:\r\n\r\n    Enforce formatting of CMake files, if modified\r\n    Check for changes in minimum required versions of dependencies\r\n    Ensure Dyninst, test suite, examples, and external tests all build with gcc on Ubuntu-20.04\r\n\r\nRun on push to master:\r\n\r\n    Build and deploy new dev container, ghcr.io/dyninst/amd64/<OS>:latest", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e7aa66ddef6768957faae3c62c9909590663901", "commit_date": "2023-03-09T20:15:45Z", "commit_message": "Replace 'cerr' with 'dwarf_print' in DwarfWalker::decodeLocationList (#1395)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1157c87c0b184d83e851bdd5b63582dd2a7647cf", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy with user dtor (#1394)\n\n- Make classes move-only by removing public copy constructor and\n  operator= as they contained pointer members that were just copied\n  (with no semantics of copying the data). This is a double delete\n  waiting to happen.  Luckily the pointer were always nullptr when the\n  copy constructor was called.\n\n- add move constructor (using std::move where appropriate)\n\n- clean up the classes to use default constructors and default member\n  initialization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1aeb249ff90fea49dc50efea1e6c11577bf9d90", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unneeded internal declaration (#1394)\n\n- clang warns of an unneeded internal declaration for yyinput. Since\n  yyinput is generated by flex, just suppress it for the whole file.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7cd7cdb0ba98de24b0d916b8e440db8adb0af6f9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (derived) (#1394)\n\n- Derived type classes have an operator==(const Type&) const, and they\n  call this operator with with both the lhs and rhs being the derived\n  class type.  This is ambiguous when using C++ 20's rule that considers\n  the parameters reversed.  Fix by adding an inlined non-virtual\n  operator== that takes the derived types a parameter and then\n  unambiguously calls the existing ==", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12a4fd86738c048dd82c20c31359cf7a48c082eb", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  stack frame larger than (#1394)\n\n- increase stack frame size warning limit when using the clang compiler\n  for a couple of files that needed a similar increase for gcc", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b78e883c77aefc27d1a30722b414266aa33897d1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  logical op (#1394)\n\n- add suppressions for identical clauses of a logical operator\n  even if they are only identical after evaluating constant\n  expressions that are not identical as gcc 8 and prior warn\n  about this\n\n- Suppression for these are already in place for warnings in adjacent\n  if statements, so extend the suppression to cover these also", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9dbc1e30e30ef263b174d1d2b5ca648e8ef6bf0d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  C function decls without prototype (#1394)\n\n- C functions declared as func() are a declaration without a prototype\n  (from the original K&R C), not a function that takes no parameters\n  (until C23), change all of these to func(void) which is how to\n  declare such a function in C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a2e3fd795f8ec6cb730038ec277431b0832c03c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  set but unused variables (#1394)\n\n- delete variables whose only use is to increment themselves", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6e380f7158326fc686f1b3f7ec7a01b3ac4bfe2", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (#1394)\n\nC++ 20 considers the reversed parameter of a comparison operators in\naddition to the given parameter order.  This implies that if the\nargument is const then the member function must also be const.\n\n- change    bool operator==(const T&)\n      to    bool operator==(const T&) const", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57fe4c395dff4fd11f18d2f00eb58ad25212501", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::random_shuffle is deprecated (#1394)\n\n- replace std::random_shuffle with std::shuffle", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "706fd0e3c532a3d7cfc1d752620ebed2fac65c5d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing noexcept (#1394)\n\n- declare functions noexcept", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "55d8a338e362d3aa4448aa9bae776eb90ca1292a", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1394)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b977e8d7132b312c853652a1e7e6f28eb39dbab0", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unused private field (#1394)\n\n- removed myid member from dyn_thread as it is never used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0eb0b29def9cc2d18e0fe724e536c73e7e9ef964", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy/op= with user provided dtor (#1394)\n\n- Explicitly define the implicit operator or remove the explicit\n  destructor; in C++ 20, if a destructor is explicitly defined then\n  the other constructor, assignment and move operators will not be\n  automatically generated", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9be477535debee15c2403bdc2ddedb31fdf0eb8e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  remove unused variables/members (#1394)\n\n- remove variables that were never used\n\n- remove code that only updated unused variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "344783a7954de9af7f98a5d3f0ec7c505b7536a1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (variables) (#1394)\n\n- rename variables that shadow names in containing scopes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73064a866ee1d19d8e12e2562f60b9b7f8e05406", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (enumerator names) (#1394)\n\nenumerator names shadow names in other scopes\n\n- made 3 internal enum types scoped enums:  StackAccessType,\n  operandType and patch_type_t\n\n- delete one internal and unused enum type:  frameType_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4bf4a24c514d0c395fdd27d6fe68ddf0fef89040", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "replace C-style and functional casts (#1394)\n\n- replace C-style casts ((T)e) and functional casts (T(e)) with modern\n  casts that have a clearer intent and are safer:  static_cast<T>(e),\n  and T{e}.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8d0e2760b307c7d465b56cac639c2e4a2cc93ca8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "write_memory_as to append_memory_as as appropriate (#1394)\n\n- where write_memory also updates the pointer, change then to\n  append_memory_as(...)\n\n- change '*insn++ = <value>' to append_memory_as_byte(...) to\n  be consistent with append_memory_as(...)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c21bd122187e87b74d45a5ba3ec3e3824750f9c3", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (C casts) (#1394)\n\n- fixed increased alignment warnings in C code.  The macro\n  CAST_WITHOUT_ALIGNMENT_WARNING eliminates the warning and allows for\n  future auditing.  For the code as currently written, these are all\n  aligned properly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0eeb1ee0407780ee07f603910d398f836dc2f7", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (pointers) (#1394)\n\n- fix alignment warnings of pointers by using alignas_cast<> defined in\n  common/h/raw_memory_access.h to eliminate the increase alignment\n  warning.  For the code as currently written, these are all aligned\n  properly, but these are inherently unsafe and require manual\n  inspection of the pointers involved.  An assert in alignas_cast can be\n  uncommented to validate proper alignment at runtime.\n\n- explicitly force larger alignment of one variable to eliminate warning", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "285ac938848739e02e38c044cf354dcb9d99f0b9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (#1394)\n\n- Casts of pointers to a type that has a larger alignment requirement\n  will cause an exceptions on some architectures on dereference if the\n  pointer does not meet its alignment requirements.\n\n- Add new template functions read_memory_as and write_memory_as that\n  read and write the bytes of (possibly) unaligned memory of the desired\n  data at the supplied address using the length of the template type in\n  a way that is safe even if the supplied pointer is not properly\n  aligned.\n\n- Add functions append_memory_as; like write_memory_as but updates the\n  pointer value to memory location after the bytes written.\n\n- Add template function alignas_cast to cast a pointer to another\n  pointer without producing an increased alignment warning; requires\n  manual auditing to pointer is properly aligned", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4aff07d1eba822b880558c030c7f5aec94b2ae9c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  pessimizing move (#1394)\n\n- remove unnecessary std::move's", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b88b16dba9477f18fe598fad5552758204a1558e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing override (#1394)\n\n- add override to all overridden virtual methods of a class if present\n  on any method", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84fe176ef5ab61376911570de6b506473a3c8d35", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  tautological always true comparison (#1394)\n\n- value of type unsigned char compared to 256 produces a warning as 256\n  is outside the range of the uint8_t.  256 is the number of array\n  elements (computed using sizeof's).  Changed from (n < numElems) to (n\n  <= numElems - 1) which is also always true, but the error is\n  eliminated due to 255 being within range of a uint8_t.  Ugly but makes\n  the warning disappear.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6b41075d61009b539107836591cb47b8cb3e3c8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  mismatched class/struct (#1394)\n\n- use consistent 'struct' and 'class' keyword between forward\n  declaration and definition; a mismatch is legal be breaks on\n  some versions of MS C++", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9e83871f0380068dba79648c6acee503cac5d76", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  [[fallthrough]] requires C++ 17 (#1394)\n\n- clang's __has_cpp_attribute(fallthrough) feature test macro returns\n  true, but produces warnings if used.  [[clang::fallthough]] works, so\n  force it if the language version is pre-17 with clang compiler.\n\n- fix typo in __cplusplus macro name\n\n- improve robustness: try all alternative fallthrough attributes names", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "067be96bb64a3d4191f12db1694b0fcfec51d457", "commit_date": "2023-03-02T18:41:27Z", "commit_message": "Restore PPC special-purpose registers in opposite order of saving them (#1392)\n\n* Restore PPC special-purpose registers in opposite order of saving them\r\n\r\nThis is the same fix as https://github.com/dyninst/dyninst/pull/1000,\r\nbut for PowerPC.\r\n\r\n* Reverse order of FPSCR restore", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae43ebc6f905345499ed9c55eccb007e9a69efa9", "commit_date": "2023-03-01T23:57:55Z", "commit_message": "Aarch64: Fix restoring special purpose registers order (#1000)\n\nThe special purpose registers are pushed onto the stack by\r\nEmitterAARCH64SaveRegs::saveSPRegisters. This patch reverses the order\r\nused for popping the stored registers from the stack. Without\r\nthis patch, some of the state registers get swapped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46ea3009e1e0e27bd035ac3152dc772bf861f3fd", "commit_date": "2023-03-01T19:33:16Z", "commit_message": "Avoid possible copy in BPatch::createEnum (#1390)\n\nThe Type class doesn't have a user-defined copy constructor and its\r\nimplicit declaration is deprecated in C++20. Rearranging the construction\r\nhere removes the possibility of copying.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f89cc72416fdc1d467b130f48609b8fc93126d37", "commit_date": "2023-02-28T23:54:58Z", "commit_message": "Merge pull request #1389 from dyninst/wuxx1279/gfx908/clang-error\n\nFix ambiguous override of InstructionDecoder_amdgpu_*::makeRegisterExpression", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "557a01949a4c11e8e8975fe113e4ab07b64bf25d", "commit_date": "2023-02-27T21:25:44Z", "commit_message": "add InstructionDecoderImpl::makeRegisterExpression to derived classes\n\nEliminate virtual-overloaded warning as there are 3 overloaded methods of\nInstructionDecoderImpl::makeRegisterExpression, but only 2 are defined in\nthese classes for add a using so the 3rd is not hidden.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42c3a4b497071e421686ded49ad0da406c8053ac", "commit_date": "2023-02-27T20:06:40Z", "commit_message": "Fix virtual derived signature to match base class\n\nmakeRegisterExpression in the derived class had\nan incorrect function signature, which made\ncompilation fails on gcc-6 and clang.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d15c0f714397a1316c74fc8d2c24a62a772ecc3", "commit_date": "2023-02-27T18:39:18Z", "commit_message": "Update DwarfWalker subrange handling (#1369)\n\n* Remove redundant include of libdw.h\r\n\r\n* Add subrange parsing to dynDwarf\r\n\r\n* Remove decipherBound\r\n\r\nThis implementation was neither correct nor complete. Moreover, we\r\nshouldn't be parsing FORM types. Looking for DW_TAG* is sufficient.\r\n\r\n* Remove legacy comments and commented-out code from parseArray\r\n\r\n* Improve error message in parseArray\r\n\r\n* Rename parseSubrangeAUX to parseSubrange and change interface\r\n\r\n* Replace bound calculations in parseSubrange\r\n\r\n* Update some comments and whitespace\r\n\r\n* Update construction of the result type\r\n\r\nThe LONG_MIN/MAX aren't great, but they are propagated to preserve\r\nbehavior.\r\n\r\n* Update debugging messages in parseSubrange\r\n\r\n* Have parseSubrange() call parseSubrange(Dwarf_Die*)\r\n\r\n* Use updated parseSubrange in parseMultidimensionalArray\r\n\r\n* Use std::tostring instead of snprintf\r\n\r\n* Update comments and remove dead code\r\n\r\n* Whitespace\r\n\r\n* parseMDA returns a typeArray instead of just a Type\r\n\r\n* Fix bug in dwarf_result::operator bool\r\n\r\n* Fix hi/low bound mixup in parseMDA\r\n\r\n* Try using Dyninst's parsed CU language, if needed\r\n\r\n* Display subrange DIE ID in pareSubrange\r\n\r\n* Don't create subrange type in parseSubrange\r\n\r\nThis will happen in the callee\r\n\r\n* Update parseSubrange() to use new parseSubrange(Dwarf_DIE*)\r\n\r\n* More carefully parse the child DIE\r\n\r\n* Iteratively parse the subranges in parseArray\r\n\r\n* Whitespace\r\n\r\n* Remove parseMultiDimensionalArray\r\n\r\n* Improve debug messages\r\n\r\n* Register each subrange type in parseArray\r\n\r\n* Remove common/h/dyninstversion.h\r\n\r\nThis was accidentally included.\r\n\r\n* Add copyright notices to new files\r\n\r\n* Make dwarf_result also hold a Dwarf_Word\r\n\r\nC++ doesn't guarantee it is convertible to `long`.\r\n\r\n* Only offer an interface to parse both bounds simultaneously\r\n\r\nThe calculation for a range's upper bound when DW_AT_count is used\r\nrequires knowing the lower bound (if given), so these needed to be\r\nmerged.\r\n\r\n* Use new dwarf_subrange interface in DwarfWalker::parseSubrange", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bfa6e82c2a9ef98801432324ffb3cec2a6254c5", "commit_date": "2023-02-27T14:13:39Z", "commit_message": "use default allocator for tbb::concurrent_hash_map (#1332)\n\n- gcc 12 warns about mismatched new and delete when an allocator is specified\r\n  This is likely a false positive.  Change to use the default, which uses ends\r\n  up using the same std C++ new allocator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "198b54f56cbcdb82f058d007545bdf9f36c5dce5", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "fix infinite recursion in LineInformation::addLine (#1331)\n\n- gcc 12 reported an infinite recursion for LineInformation::addLine\n  that takes the lineSource file\n- fixed by computing the string table index of lineSource and then\n  calling the addLine method that takes the index value\n- also update the lineSource type from string to const string&\n- updated documenation that had the method signature taking a const char*", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6436c734eef50d55ed6c562aa3fabf0c7039c50c", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "eliminate deprecated C++ function objects (#1331)\n\nfix function objects that were deprecate in C++ 11 and removed in C++ 17\n\n- replace mem_fun with mem_fn\n- eliminate binary_function and unary_function base classes\n- use const iterator when constructing boost::transform_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f049fe855640832950f5a6cd87db23ecb4b7533b", "commit_date": "2023-02-24T22:27:17Z", "commit_message": "Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04 (#1362)\n\n* Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04\r\n\r\n- the main issue was `/sbin/ldconfig -p` on Ubuntu 22.04 has an extra line at the end: \"Cache generated by: ldconfig (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35\"\r\n  - this would result in an occasionaly segfault\r\n- refactored the rest to avoid strtok which is known to have a fair amount of problems\r\n\r\n* fix header includes and message about delimit issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31b4d7f19f4e6585518eee179a63812f88911e6f", "commit_date": "2023-02-24T19:36:42Z", "commit_message": "Make SymtabCodeSource constructor const correct (#1293)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc38257de4d5143d097229aef7284b8e1ce6fbf5", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "SymtabAPI::Type: add support for C++ r-value references (#1159)\n\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c677008d0fa8f4ccb6d191d37493060e15d05f22", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "Improve DWARF enum parsing in Symtab::Type (#1164)\n\n* Inherit from derivedType\r\n* Add parsing of underlying type\r\n* Improve enum parsing debug information\r\n* Add support for C++ scoped enums (i.e., 'enum class')\r\n* Remove typeEnum::setName\r\n    This has no definition.\r\n* Inline default constructor\r\n* Clean up BPatch::createEnum\r\n\r\nThis removes the unnecessary construction of a separate (thread-safe!)\r\ncontainer of pairs and the associated memory leaks. It also explicitly\r\nmakes the enum's underlying type a four-byte signed int. Redundant code\r\nfrom the overload which computes the enum values was replaced by using\r\nstd::iota and calling the three-argument createEnum.\r\n\r\n* Remove factory functions\r\n\r\nAdding overloads for these would add more clutter than utility. We\r\nshould remove these from all of the types as the constructors should\r\nalways be used to ensure class invariants.\r\n\r\n* Remove non-portable constructors\r\n\r\nSince we're breaking ABI here, these constructors need to go. Manually\r\nsetting the size to `sizeof(int)` is non-portable as the\r\nBPatch::createEnum may be used to modify a binary that doesn't have the\r\nsame `int` representation as the host on which Dyninst was compiled.\r\n\r\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3046332ba3d32eccb63f8dd6ecc65afca3b2c63f", "commit_date": "2023-02-23T22:24:02Z", "commit_message": "Update global ELF ctor/dtor instrumentation for static executables (#1355)\n\nIf __libc_csu_init doesn't exist, try to insert the constructor call into the beginning of 'main'. If __libc_csu_fini doesn't exist, try to insert the constructor call into the beginning of 'exit'.\r\n\r\n* Use C-style strings for symbol names\r\n\r\nThere's no need to have a std::string object that incurs the overhead of a constructor/destructor call to just hold a literal that's only visible in the current translation unit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "fix_emitelf_infiniteloop": [{"commit_oid": "3229ab7d63a8a2389d3abffa8ba9471db5b75518", "commit_date": "2023-08-02T14:59:01Z", "commit_message": "Fix hang when creating ELF dynamic sections\n\nThis is triggered when a binary with no .rel.dyn and .rela.dyn\nsections, but its target platform uses rel type relocation records.\n\nThis happened on an AMDGPU binary that was previously incorrectly\nspecified as using a rel relocation record.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8fa753d955d43747aa46b0a528a81a0d9adf677d", "commit_date": "2023-07-27T14:25:14Z", "commit_message": "Do not decode operands for invalid opcode (#1467)\n\nCo-authored-by: Xiaozhu Meng <xmeng@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "43026f99ba03d71ec6105c4b52ad70759645a733", "commit_date": "2023-07-27T14:24:18Z", "commit_message": "Add support for EM_INTELGT (#1468)\n\nIt's unclear at this time how we should treat Intel's XE Gen12/Tiger Lake binaries, so we just treat them as Gen9 (Ponte Vecchio) for now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d94f856514d7e312d5d4bd704ddac8b166c48c4e", "commit_date": "2023-07-26T21:22:18Z", "commit_message": "do not export Instruction::appendOperand (#1466)\n\n- do not export since it is now private, and should not have been used\r\n  externally (comment said it was to work around old compiler issue).\r\n\r\n- cleanup method order and remove comment", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7456c05b979130eba42c4ee39a9ed00c92de2ba4", "commit_date": "2023-07-26T15:34:22Z", "commit_message": "add getDisplayOrderedOperands interface (#1465)\n\nAdd method Instruction::getDisplayOrderedOperands to return the\r\noperands that are displayed (non implicit operands) when formatting an\r\ninstruction for disassembly.  Returns a vector of Operands in display\r\norder.\r\n\r\nThese operands can be inspected and formatted to produce a disassembly\r\nstring with annotations.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6394752592546df5adff6bc7edb2d8bde330842d", "commit_date": "2023-07-26T03:27:07Z", "commit_message": "modernize ArchSpecificFormatter classes (#1464)\n\n- pass string and vector parameters by const reference instead of by\r\n  value for performance\r\n\r\n- add ArchSpecificFormatter::getInstructionString and remove the overridden\r\n  versions in the non-x86_64 as they were functionally the same, but not\r\n  identically written\r\n\r\n- remove virtual and add override to overridden methods\r\n\r\n- make methods const, use map::at instead of map::operator[]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25ad35c6762df4c40c68bd2fc3f6428efbd45a28", "commit_date": "2023-07-25T18:12:00Z", "commit_message": "improve intel instruction & operand formatting (#1463)\n\nThis fixes three issues when formatting an x86_64 instruction or its\r\noperands:\r\n\r\n1) Fix the order of operands when formatting the instruction to be the\r\n   AT&T syntax order.  If the instruction had three or more operands.\r\n   Conversion from the internal (Intel) order rotated right by 1 instead\r\n   of reversing the operands.\r\n\r\n2) Eliminate special treatment of register %kN as the first operand as\r\n   mask registers in Instruction::format as Operand::format already\r\n   formats these as masks (enclosed in braces) and not all uses of mask\r\n   registers are as a mask.\r\n\r\n3) Fix Operand::format to produce the correct disassembly operand\r\n   string.  The formatting of the internal Expression needs to be done\r\n   for some indirect values.  This was done in the Instruction::format\r\n   instead of directly in Operand::format\r\n\r\n* x86Formatter::getInstructionString - fixes 1, 2, 3\r\n\r\n* Operand::format - fixes 3\r\n\r\n* x86Formatter::formatRegister - cleanup, remove malloc that could leak", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e38d57c9904ab623350e90e0e3adcab2afcf2100", "commit_date": "2023-07-25T18:08:54Z", "commit_message": "fix x86_64 ret instruction formatting (#1457)\n\nThe ret instruction formats incorrectly with an operand of '(%rsp)'.  The\r\noperand should have been flagged as implicit so it is not included in\r\nthe output.\r\n\r\n- eliminate all but one overloaded Instruction::appendOperand` using\r\n  default parameters\r\n\r\n- add isImplicit parameter defaulting to false to\r\n  Instruction::addSuccessor\r\n\r\n- add isImplicit to the ret instruction's addSuccessor call to set the\r\n  ret_addr (which adds the operand to the Instruction object)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88a774dfa36208bc297b65dc18fdfe4e2e66140c", "commit_date": "2023-07-25T18:07:02Z", "commit_message": "modernize InstructionAPI::Operand class (#1456)\n\n* modernize InstructionAPI::Operand class\r\n\r\n- eliminate all but one of the constructors by using default parameters\r\n\r\n- remove destructor (unnecessarily virtual, and reset a member\r\n  shared_ptr), copy ctor, and copy assignment declarations to allow the\r\n  compiler to generate default versions that are equivalent or better\r\n  than the hand written versions\r\n\r\n- add default member initializers for all members\r\n\r\n- make Operand constructor explicit", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e17bc861ac69ddf6f55629b9912dca37e87d05d", "commit_date": "2023-07-25T17:41:03Z", "commit_message": "Fix x86 misspelled, incorrect, and invalid opcodes (#1421)\n\n* Fix spelling of 'vpperm' stringification\r\n\r\n* Fix spelling of 'vpcomd' stringification\r\n\r\n* Fix spelling of 'vprolvd' stringification\r\n\r\n* Fix spelling of 'vprolvq' stringification\r\n\r\n* Remove duplicate entry for 'e_vpsrlvq'\r\n\r\n* Rename 'vpclmullqlqdq' to 'vpclmulqdq'\r\n\r\n* Rename 'punpcklqd' to 'punpckldq'\r\n\r\n* Replace 'punpckhqd' with 'punpckhqdq'\r\n\r\n* Replace 'pcmpgdt' with 'pcmpgtd'\r\n\r\n* Remove instruction 'vpcmpequd'\r\n\r\nThis mnemonic does not exist in any of Intel Architecture Instruction\r\nSet Extensions, AMD Architecture Programmers Manual, or Intel\r\nArchitecutre Software Developer's Manual.\r\n\r\nThe encoding listed under 'SSET1E_66' is a reserved space.\r\n\r\n* Rename mnemonic for 'prefect_w' to 'prefetchw'\r\n\r\n* Rename 'pclmullqlqdq' to 'pclmulqdq'\r\n\r\nThis is a pseudo-opcode for pclmulqdq when imm8 is 0x0.\r\nThe encoding is 660F3A44, so the lookup table location is correct.\r\n\r\n* Remove 'mmxud'\r\n\r\nIt is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'movslq'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'pcommit'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Rename 'cmpsd_sse' to 'cmpsd'\r\n\r\n* Fix spelling of 'vphaddsw' mnemonic\r\n\r\n* Fix spelling of 'vblendpd' mnemonic\r\n\r\n* Remove redundant copy of 'prefetchwt1'\r\n\r\n* Remove redundant 'phsubsw'\r\n\r\n* Remove redundant 'sarx'\r\n\r\n* Remove redundant 'shlx'\r\n\r\n* Remove redundant 'vblendvpd'\r\n\r\n* Remove redundant 'vcmppd'\r\n\r\n* Remove redundant 'vcmpps'\r\n\r\n* Remove redundant 'vcmpsd'\r\n\r\n* Remove redundant 'vcmpss'\r\n\r\n* Remove redundant 'vpmaddubsw'\r\n\r\n* Remove redundant 'vpmaddwd'\r\n\r\n* Remove redundant 'vpmovsdb'\r\n\r\n* Remove redundant 'vpmovsdw'\r\n\r\n* Remove redundant 'vpmovsqb'\r\n\r\n* Remove redundant 'vpmovsqd'\r\n\r\n* Remove redundant 'vpmovsqw'\r\n\r\n* Remove redundant 'vpmovswb'", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d14dff71691f51fb6b96179a87b4cee6d3a34e6b", "commit_date": "2023-07-25T16:19:35Z", "commit_message": "Remove Object::dwarf_parse_aranges (#1462)\n\nIt's usage was removed by 4be991a7 in 2021.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d82356b795db373fd66b098a8ba6073a07ba6089", "commit_date": "2023-07-24T19:02:44Z", "commit_message": "Fix EM_AMDGPU to use RELA as Region Type (#1444)\n\nAccording to the llvm page\r\nhttps://llvm.org/docs/AMDGPUUsage.html#relocation-records\r\nAMDGPU backend generates Elf64_Rela records.\r\n\r\nThis fix added the case for EM_AMDGPU to\r\nstatic Region::RegionType getRelTypeByElfMachine\r\nsuch that it uses RELA instead of the default REL type.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "96f6344d195bb74f30e209c48ee64c8397421dcd", "commit_date": "2023-07-24T17:56:55Z", "commit_message": "Remove lazy initialization of IBSTrees in Symtab (#1454)\n\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes Symtab::mod_lookup threadsafe.\r\n\r\n* Fix includes in Function.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Fix includes in Variable.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Use Function.h instead of forward declarations\r\n\r\nThis removes duplicate typedefs, as well.\r\n\r\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes its use in\r\nSymtab::parseFunctionRanges threadsafe.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "649e43fa2d26aa3c5245b05bac1038f407c869a9", "commit_date": "2023-07-21T17:49:14Z", "commit_message": "Make Symtab::getContainingInlinedFunction lazy parsing threadsafe (#1452)\n\nThis fix does not address the thread safety issues in\r\nSymtab::parseFunctionRanges. That function is still thread unsafe and\r\nwill require separate modifications.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab915557f2ee64c538515fcdfed250e23dc40e19", "commit_date": "2023-07-14T23:39:33Z", "commit_message": "Clean up Symtab constructors (#1451)\n\n* Use default member initializers instead of initializer lists\r\n\r\nThere are members missing from the lists. This also simplifies the\r\nconstructors considerably.\r\n\r\n* Remove unhelpful message in default ctor\r\n\r\n* Delegate to default ctor in Symtab(MappedFile*)\r\n\r\nThis fixes the bug of inconsistent base initialization and ensures the\r\nconstructors are consistent.\r\n\r\n* Use delegating ctor for Symtab::Symtab(unsigned char*...)\r\n\r\nThis fixes the following bugs\r\n\r\n1. Invoke init_debug_symtabAPI before calling create_printf.\r\n\r\n2. Because this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.\r\n\r\n* Use delegating ctor for Symtab::Symtab(std::string...)\r\n\r\nBecause this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683b050d6132ce6a9e0cc5cad35d497b2d2d9cc2", "commit_date": "2023-07-14T21:08:09Z", "commit_message": "Explicitly delete unusable special member functions in Symtab (#1450)\n\nBecause there is a user-defined destructor, the compiler will not generate the special member functions (e.g., copy assignment operator). However, we explicitly delete them here to signal that this class is not copyable or movable.  The destructor is also moved to the top of the class to be next to the other special member functions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84786bd694d2c2163d6e8fbd2190271db1868ff3", "commit_date": "2023-07-14T20:20:25Z", "commit_message": "Remove Symtab::mfForDebugInfo (#1449)\n\nIt is never used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88bf2091da5aa9a018afb1f1db67fe6ffeb4773b", "commit_date": "2023-07-14T19:30:50Z", "commit_message": "Remove Symtab::checkPPC64DescriptorSymbols (#1448)\n\nThe definition was commented out in 3709ead48 in 2009.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7014ee1b08ffa17381b6f0bcda9b94368cb83937", "commit_date": "2023-07-14T19:30:30Z", "commit_message": "Remove Symtab copy constructor (#1447)\n\nThere are several reasons for this.\r\n\r\n1. It doesn't copy every member of the class\r\n2. IBSTree doesn't have a copy constructor\r\n3. mod_lookup_ and func_lookup_ are not copied, but are recreated in other member functions (e.g., mod_lookup()). This completely breaks the semantics of a copy ctor.\r\n4. Resets _ref_cnt to 1", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "beae2a07b5e0a40de54ee1aa972ac765e4d825b2", "commit_date": "2023-07-11T16:11:00Z", "commit_message": "add header files to directly define std:: syms (#1443)\n\n- update dyninst header files to directly include the standard header\r\n  file defining symbols from the standard C++ library that are used by\r\n  the dyninst header file; in some instances, the code relied on symbols\r\n  being defined via an unrelated include file indirectly including the\r\n  necessary header file leading to fragile code\r\n\r\n- minor other cleanups:  remove unnecessary header files, remove\r\n  definitions of names that are defined in a standard header file", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9696c64a3a1d6f41241d27c3c51820616490efa6", "commit_date": "2023-06-15T15:41:23Z", "commit_message": "Fix vector instruction lengths (#1439)\n\nThe following instruction decoded with the wrong length if the modrm\r\noperand specified a memory access as all the operand was incorrectly\r\nspecified to be a register only operand:\r\n\r\n- vcvtpd2udq\r\n- vcvtss2usi\r\n- vcvttpd2qq\r\n- vcvtudq2pd\r\n- vcvtudq2ps\r\n- vpblendd\r\n- vpermpd", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44d86e56068f62b9ac03f7d7537098fd3728fcdb", "commit_date": "2023-05-11T19:26:58Z", "commit_message": "Fix several resource leaks (#1435)\n\n* Local var leak in Symtab::addSymbol\r\n\r\nThis was found using cppcheck's memleak.\r\n\r\n* memCache::doOperation\r\n\r\nNot technically a leak, but cppcheck can't see through the 'push_back'.\r\n\r\n* PCProcess::hasPassedMain\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* parse_func::calcParentFunc\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* int_iRPC::setBinarySize\r\n\r\nFound using cppcheck's publicAllocationError.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8676f10714fb0bb7d0a3e7c65ec729d7db195d94", "commit_date": "2023-05-11T17:47:08Z", "commit_message": "Fix undefined behavior in integer operations (#1434)\n\n* Shifting signed 32-bit value by 31 bits is undefined behavior\r\n\r\nThis was found using cppcheck's shiftTooManyBitsSigned.\r\n\r\n* Signed to unsigned conversion in calculation\r\n\r\nThese were found using cppcheck's signConversion.\r\n\r\n* Fix signed overflow\r\n\r\nThis was found using cppcheck's integerOverflowCond.\r\n\r\n* Shifting negative value\r\n\r\nThis was found using cppcheck's shiftNegativeLHS.\r\n\r\n* BPatch_addressSpace::deleteSnippet: fix enumeral conversion in conditional", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c4a422834fbc3e6159ba00f10820f13c1958901e", "commit_date": "2023-05-10T19:01:00Z", "commit_message": "Prevent use of possibly-uninitialized local variable (#1433)\n\nThese were found using cppcheck's uninitvar and eraseDereference.\r\n\r\nFor the usages of iterator-like classes in process.C, they aren't strictly\r\nuninitialized variable usages since the classes in question are standard\r\nlayout types. It would be better to replace the usages there with list\r\nconstruction to avoid the static check altogether.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0c88bea297cb64cf147192242aaa3a4047cdb84", "commit_date": "2023-05-10T17:51:52Z", "commit_message": "Fix uninitialized member variables (#1431)\n\nThese were detected by cppcheck's uninitMemberVar*.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a73abaa9c7298a3e4ce0acf4eb14db8b1cb42fc", "commit_date": "2023-05-10T15:45:14Z", "commit_message": "Fix use of null pointer after check (#1432)\n\nThese were found using cppcheck's nullPointerRedundantCheck.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "68fc3d8a5f1527dcaa66c9455369c62e2b4fa54c", "commit_date": "2023-05-10T05:14:42Z", "commit_message": "Protect against self-assignment in copy constructors (#1430)\n\n* Protect against self-assignment in copy constructors\r\n\r\nThese were found by cppcheck:\r\n\r\ncommon/src/Node.C:198:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nNodeIterator &NodeIterator::operator=(const NodeIterator &rhs) {\r\n                            ^\r\ncommon/src/Edge.C:108:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nEdgeIterator &EdgeIterator::operator=(const EdgeIterator &rhs) {", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce097b5399fb654f68fbfe48e25e7a7bd567bf82", "commit_date": "2023-05-10T04:07:40Z", "commit_message": "Fix windows warnings (#1429)\n\n* Mismatched printf format arguments\r\n\r\nThese were found using cppcheck's invalidPrintfArgType_*.\r\n\r\n* Fix uninitialized member variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85fb0f95050c903bf1e1a1dbcacf1913dad1d73b", "commit_date": "2023-05-09T20:05:56Z", "commit_message": "Remove virtual calls in constructor/destructor (#1428)\n\n* AddressTranslateWin\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-win.C:49:17: style: Virtual function 'init' is called from constructor 'AddressTranslateWin(PID pid,PROC_HANDLE phandle)' at line 168. Dynamic binding is not used. [virtualCallInConstructor]\r\n   virtual bool init();\r\n\r\n* NodeIteratorPredicateObj\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:293:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateObj(Graph::NodePredicate::Ptr\r\np,NodeIterator&b,NodeIterator&e)' at line 331. Dynamic binding is not\r\nused. [virtualCallInConstructor]\r\n\r\n* NodeIteratorPredicateFunc\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:352:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateFunc(Graph::NodePredicateFunc\r\np,void*u,NodeIterator&b,NodeIterator&e)' at line 394. Dynamic binding is\r\nnot used. [virtualCallInConstructor]\r\n\r\n* InstructionDecoder_x86\r\n\r\nFound using cppcheck:\r\n\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: style: Virtual function 'setMode' is called from constructor 'InstructionDecoder_x86(Architecture a)' at line 144. Dynamic binding is not used. [virtualCallInConstructor]\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n                                                ^\r\ninstructionAPI/src/InstructionDecoder-x86.C:144:28: note: Calling setMode\r\n      if(a == Arch_x86_64) setMode(true);\r\n                           ^\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: note: setMode is a virtual function\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n\r\n* CFGFactor::destroy_block\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:117:18: style: Virtual function 'free_block' is called from destructor '~CFGFactory()' at line 92. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_block(Block * b);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:92:5: note: Calling destroy_block\r\n    destroy_block(b);\r\n    ^\r\nparseAPI/src/CFGFactory.C:182:5: note: Calling free_block\r\n    free_block(b);\r\n    ^\r\nparseAPI/h/CFGFactory.h:117:18: note: free_block is a virtual function\r\n    virtual void free_block(Block * b);\r\n\r\n* CFGFactor::free_func\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:116:18: style: Virtual function 'free_func' is called from destructor '~CFGFactory()' at line 95. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_func(Function * f);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:95:5: note: Calling destroy_func\r\n    destroy_func(f);\r\n    ^\r\nparseAPI/src/CFGFactory.C:172:4: note: Calling free_func\r\n   free_func(f);\r\n   ^\r\nparseAPI/h/CFGFactory.h:116:18: note: free_func is a virtual function\r\n    virtual void free_func(Function * f);\r\n\r\n* CFGFactor::free_edge\r\n\r\n* ~freebsd_process\r\n\r\nFound using cppcheck:\r\n\r\nproccontrol/src/freebsd.C:1046:17: warning: Member variable 'freebsd_thread::is_exited' is not initialized in the constructor. [uninitMemberVar]\r\nfreebsd_thread::freebsd_thread(int_process *p, Dyninst::THR_ID t, Dyninst::LWP l)\r\n                ^\r\nproccontrol/src/freebsd.h:122:17: style: Virtual function 'getEventQueue' is called from destructor '~freebsd_process()' at line 795. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual int getEventQueue();\r\n                ^\r\nproccontrol/src/freebsd.C:795:22: note: Calling getEventQueue\r\n    int eventQueue = getEventQueue();\r\n                     ^\r\nproccontrol/src/freebsd.h:122:17: note: getEventQueue is a virtual function\r\n    virtual int getEventQueue();", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6ab42a4da20f7d9a5a58c00a4835d337a95fef5", "commit_date": "2023-05-09T17:30:44Z", "commit_message": "AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak (#1427)\n\n* AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-sysv.C:1046:58: error: Resource leak: fd [resourceLeak]\r\n   if (read(fd, &e_hdr, sizeof(e_hdr)) != sizeof(e_hdr)) return base;\r\n                                                         ^\r\ncommon/src/addrtranslate-sysv.C:1048:28: error: Resource leak: fd [resourceLeak]\r\n   if (e_hdr.e_phoff == 0) return base;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5409c471292cb8b1c87e9b5ae1e94fa9b6eb573", "commit_date": "2023-05-09T17:09:20Z", "commit_message": "Make CondVar non-copyable, non-moveable (#1426)\n\nThis makes it consistent with std::condition_variable.\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]\r\n   mutex = new mutex_t;\r\n   ^\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]\r\n   mutex = new mutex_t;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "45614d7908e36d32d26126d2844d388c6936ba61", "commit_date": "2023-05-02T18:17:06Z", "commit_message": "Github CI: increase number of build jobs (#1424)\n\nGithub only allows one CPU core per job, but any number of threads. Testing shows that N=2 threads reduces build time by 2-2.5x, N=3 by 2.2x, and N=4 increases build time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e37524ab88b645328c1f02b5c4ab7ac0f7e8d3f", "commit_date": "2023-05-02T02:13:22Z", "commit_message": "Github CI: make compiler multi-build a cron job (#1425)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8952d3207763a26938e097e58ebe97b490c73cf", "commit_date": "2023-05-01T17:32:12Z", "commit_message": "CI compiler multibuilds (#1415)\n\n* Weekly build across all compiler versions and build types\r\n\r\n* Use DYNINST_WARNINGS_AS_ERRORS=ON instead of -Werror", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2e26598a5301ff900d2ca235db729d1dd4c4d350", "commit_date": "2023-05-01T16:45:24Z", "commit_message": "Use default TBB when doing CI spack build (#1423)\n\nDyninst now requires TBB >= 2019.9.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7621bc85ac0cda3bd1b2a17d78aac6d48c68280a", "commit_date": "2023-04-28T00:34:11Z", "commit_message": "Add ubuntu-22.04 to dev container build (#1419)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "719036aeb55c459a355afb91188cfa4d7d465bc9", "commit_date": "2023-04-27T23:51:51Z", "commit_message": "Refactor Dockerfile.ubuntu (#1420)\n\n* Move elfutils logic into build_elfutils.sh\r\n\r\n* Whitespace\r\n\r\n* Copy in dependencies.versions\r\n\r\nThis is no longer done in the base container because it didn't make\r\nsense there as that image should never change.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8d1a313be087154aad95d660b9fe2b34f4da492", "commit_date": "2023-04-27T22:33:27Z", "commit_message": "warning fix:  stack frame size (#1418)\n\n- when compiling with clang 15 and 16 in addition to clang 14,\r\n  allow a 40000 stack frame size", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a9c9e061ea6b41b93151f0ed3b34208346b4881", "commit_date": "2023-04-27T21:28:12Z", "commit_message": "Make InstructionAPI::isArrayIndexValid const. (#1416)\n\nclang complains:\r\n\r\n  'constexpr' non-static member function will not be implicitly 'const'  in C++14; add 'const' to avoid a change in behavior [-Werror,-Wconstexpr-not-const]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "739ad57883f032fb18a6c741f0c2f98e9a766bc7", "commit_date": "2023-04-25T17:03:44Z", "commit_message": "CMake modernization (#1391)\n\n# Changes to building Dyninst\r\n- Minimum CMake version is 3.14.0\r\n- STERILE_BUILD is now deprecated\r\n- ENABLE_LTO was renamed to DYNINST_ENABLE_LTO\r\n- CMAKE_EXPORT_COMPILE_COMMANDS is no longer set\r\n- Platform detection is done natively in CMake\r\n  - full support for Linux on x86, AMD64, ppc64le, and aarch64/ARMv8\r\n  - experimental support for 32-bit FreeBSD and Windows on x86\r\n- Custom install targets <target>-install have been removed\r\n- Installation subpaths (bin, lib, include, etc.)  are no longer user-configurable\r\n- Static versions of Dyninst libraries now depend on other static Dyninst libraries\r\n  - For example, libDynElf.a now depends on libcommon.a, not libcommon.so\r\n- Libraries that cannot build with symlight now warn when LIGHTWEIGHT_SYMTAB=ON\r\n- User build options passed via CMAKE_<LANG>_FLAGS are correctly preserved and override the builtin options\r\n- <PackageName>_ROOT_DIR now implies <PackageName>_NO_SYSTEM_PATHS and sets <PackageName>_ROOT\r\n  - This forces CMake to find the package at the given location or in CMAKE_PREFIX_PATH\r\n  - When using CMake >= 3.16, searching CMAKE_PREFIX_PATH can be disabled with CMAKE_FIND_USE_CMAKE_PATH=OFF\r\n  - For example, -DElfUtils_ROOT_DIR=/some/path sets ElfUtils_NO_SYSTEM_PATHS=ON and ElfUtils_ROOT=/some/path\r\n\r\n## RPATH handling\r\n- CMP0060 is active and so libraries are linked by their full paths even in implicit directories (e.g., /usr/lib/foo.so instead of -lfoo)\r\n- Populate RPATHs for binaries in the build tree: set(CMAKE_SKIP_BUILD_RPATH FALSE)\r\n- Do not use the install path as the RPATH: set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)\r\n  - $ORIGIN is used instead\r\n- Add paths to any directories outside the project that are in the linker search path or contain linked library files: set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\r\n\r\n## Third-party libraries (tpl)\r\n- The ability to build tpls from source has been removed\r\n- All libraries must have a CMakeConfig.cmake\r\n- Minimum versions\r\n  - Boost: 1.71.0\r\n  - TBB/oneapi-tbb: 2019.9\r\n  - elfutils: 0.186\r\n- An imported interface named Dyninst::<library> is created for each library\r\n  - includes are marked SYSTEM so they don't produce warnings\r\n  - exported in DyninstConfig.cmake as per https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n- pkgconfig is used to find elfutils and valgrind\r\n  - if pkgconfig fails, a manual search is done\r\n  - This can be disabled with  ElfUtils_NO_SYSTEM_PATHS=ON\r\n\r\n# Changes to consuming Dyninst as a CMake project\r\n- All targets are in the Dyninst namespace; e.g., symtabAPI is now Dyninst::symtabAPI\r\n- Each third-party library has an associated imported interface named Dyninst::<library>, e.g., Dyninst::Boost\r\n  - Users are encouraged to use these, if the same library is need in their applications\r\n- DYNINST_LIBRARIES has been removed\r\n- DYNINST_INCLUDE_DIR is now deprecated and will be removed in a future version\r\n  - Use the provided targets, instead\r\n- DYNINST_INTERNAL_DEFINES is now deprecated and will be removed in a future version\r\n- DYNINST_PLATFORM is now deprecated and will be removed in a future version\r\n- find_package(Dyninst ... COMPONENTS ...) now works correctly\r\n- Version constraints for find_package(Dyninst X.Y.Z) now work correctly\r\n  - Dyninst only guarantees ABI compatibility between major releases, so only the same major versions are compatible\r\n\r\nUsers who are not ready to fully migrate to the new Dyninst CMake package may use the following to preserve backward compatibility:\r\n\r\ncmake\r\nif(TARGET Dyninst::common)\r\n  foreach(t common symtabapi ...)\r\n    add_library(${t} INTERFACE IMPORTED)\r\n    target_link_libraries(${t} INTERFACE Dyninst::${t})\r\n  endforeach()\r\nendif()\r\n\r\n* Update minimum CMake version to 3.13.0\r\n\r\n* Rename CMake files to prevent name collisions\r\n\r\nWhen consumed as a subproject, the CMake files could be imported into the parent project where the filenames could collide.\r\n\r\n* Prepend to CMAKE_MODULE_PATH instead of overwriting\r\n\r\n* Fix capitalization error in FindThread_DB\r\n\r\nThis should silence the warning about Thread_Db versus Thread_DB\r\n\r\n* Require CMake package for TBB (#1322)\r\n\r\n* Make libdl/dbghelp private linkage\r\n\r\n* Remove TBB flags from toolkits that don't use TBB\r\n\r\n* Remove FindTBB.cmake\r\n\r\nAll supported TBB versions ship as CMake packages, so this is no longer\r\nneeded.\r\n\r\n* Remove from-source build option\r\n\r\n* Create an imported target for TBB used by Dyninst\r\n\r\nThis is needed to force the include directories to be considered 'system' directories so that compiler warnings from TBB sources are ignored\r\n\r\n* Rename cmake/ThreadingBuildingBlocks.cmake -> cmake/tpls/DyninstTBB.cmake\r\n\r\nThis is needed to keep the namespace clean for DyninstConfig.cmake\r\n\r\n* Export TBB as part of the Dyninst CMake package\r\n\r\nThis is required by the CMake guidelines:\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nIn particular,\r\n  \"All required dependencies of a package must also be found in the package configuration file\"\r\n\r\n* Format DyninstTBB.cmake\r\n\r\n* Boost CMake modernization (#1330)\r\n\r\n* Remove FindBoost.cmake\r\n\r\nUse the one provided by CMake so we don't have to maintain this one.\r\n\r\n* Remove from-source build\r\n\r\n* Remove user-configurable version\r\n\r\n* Force use of multithreaded libraries\r\n\r\nWe don't need to include Threads here. Boost will do that.\r\n\r\n* Disable use of statically-linked runtime\r\n\r\n* Remove Boost_DEBUG\r\n\r\n* Always enable searching system paths\r\n\r\n* Unify path calculations, pass to find_package as hints\r\n\r\n* Clean up comments\r\n\r\n* Use include_guard\r\n\r\n* Allow using Boost's CMake package\r\n\r\nIt is now provided by default since 1.70.0 which is the current minimum\r\nacceptable version.\r\n\r\n* Remove rest of cache variables\r\n\r\n* Remove MSVC-specific template define\r\n\r\nWe can add this back, if we find there are newer VCs still affected.\r\n\r\n* Make Dyninst::Boost imported interface target\r\n\r\nThis is needed to make the include directories be \"system\" directories\r\nso that warnings in their headers do not propagate into Dyninst.\r\n\r\n* Do not add Boost as a dependency for all libs\r\n\r\n* Make find_package QUIET\r\n\r\n* Use Boost_* variables instead of calculating includes, libs, etc.\r\n\r\n* Make a header-only wrapper target\r\n\r\n* Add to Dyninst package\r\n\r\n* Update CMakeLists\r\n\r\n* Set Boost_NO_WARN_NEW_VERSIONS\r\n\r\n* Bump minimum version to 1.71.0\r\n\r\n* Elfutils cmake modernization (#1333)\r\n\r\n* Rename FindLibDwarf -> FindLibDW\r\n\r\n* Update FindLibDW\r\n\r\n* Rename FindLibElf -> FindLibELF\r\n\r\n* Update FindLibELF\r\n\r\n* Create FindElfutils\r\n\r\n* Update FindLibDebuginfod\r\n\r\n* Update DyninstElfUtils\r\n\r\n* Update the CMakeLists to use new targets\r\n\r\n* Use CMP0074 in updated Find modules\r\n\r\nThis enables use of <Package>_ROOT variables when find_package is\r\ninvoked.\r\n\r\n* Provide default dummy interface target for ElfUtils::ElfUtils\r\n\r\nNeeded for non-Unix platforms.\r\n\r\n* Fix rebase bug in CMakeLists.txt\r\n\r\n* Export DyninstElfUtils\r\n\r\n* Forward QUIET flag to pkg_check_modules\r\n\r\n* Forward version to pkg_check_modules\r\n\r\n* Use lib from pkg-config, if found\r\n\r\n* Clean up internal variables\r\n\r\n* Simplify cache variable handling\r\n\r\n* Use full linkage name for libs returned by pkg-config\r\n\r\n* Separate out dependent libraries in FindLibDW\r\n\r\nSome platforms include libelf as a dependency, but IMPORTED_LOCATION accepts only a single entry. Store the rest in IMPORTED_LINK_DEPENDENT_LIBRARIES.\r\n\r\n* Fix quoting bug in FindLibDW\r\n\r\n* Fix lib check in FindLibDW\r\n\r\n* Manually set PC_<XXX>_INCLUDE_DIRS when FindPkgConfig misses it\r\n\r\nFindPkgConfig uses the output from pkg-config --cflags-only-I <lib> to set PC_<XXX>_INCLUDE_DIRS. Because libelf is usually in a system directory, pkg-config will return nothing for this. FindPkgConfig stores the actual includedir variable from the PC file, so we can fetch it from there.\r\n\r\n* Libiberty cmake modernization (#1334)\r\n\r\n* LibIberty cmake modernization\r\n\r\n* Use INCLUDE_DIRS directly\r\n\r\n* Threaddb cmake modernization (#1338)\r\n\r\n* Update FindThread_DB\r\n\r\n* Update thread_db\r\n\r\n* Update docs URL\r\n\r\n* Use OpenMP target (#1339)\r\n\r\nThis also provides a dummy target so we don't have to do any additional checking when USE_OpenMP=OFF. We only use OpenMP_CXX, so I didn't create a target for the other languages (C,Fortran).\r\n\r\n* Valgrind cmake modernization (#1340)\r\n\r\n* Update valgrind\r\n\r\n* Add version check in Find module\r\n\r\n* Remove Valgrind_LIBRARIES\r\n\r\nThey are versioned by architecture, so are hard to nail down with\r\nfind_library. We also don't need them (at least not yet).\r\n\r\n* Make dummy when ADD_VALGRIND_ANNOTATIONS=OFF\r\n\r\n* Add compile defs\r\n\r\n* Update CMakeLists.txt\r\n\r\n* Make the dummy IMPORTED\r\n\r\n* Fix bug with version handling in DyninstBoost\r\n\r\n* Use _min_version in DyninstBoost\r\n\r\nThis is so the CI version check will work uniformly\r\n\r\n* Add existence check for Dyninst::Boost before creating target\r\n\r\n* Clean up find_package flag handling in Find modules\r\n\r\n* Make variable exports uniform across Find modules\r\n\r\n* Coalesce calls to set_target_properties in Find modules\r\n\r\n* Fix bug in DyninstElfutils when calling find_package LibDebuginfod\r\n\r\n* Make just one exported target in FindElfutils\r\n\r\n* Add target existence check in DyninstTBB\r\n\r\n* Add SYSTEM property to Elfutils includes\r\n\r\n* Remove export of DYNINST_LIBRARIES\r\n\r\n* Preserve user's module path when looking for Dyninst modules\r\n\r\n* Manually set legacy DYNINST_INCLUDE_DIR\r\n\r\nThis is now deprecated.\r\n\r\n* Use CMAKE_CURRENT_LIST_DIR intead of DYNINST_CMAKE_DIR\r\n\r\n* Install Find modules for third-party libraries\r\n\r\n* Remove unused DyninstConfigVersion.cmake\r\n\r\n* Remove unneeded comments in DyninstOptions\r\n\r\n* Move all options to DyninstOptions\r\n\r\n* Remove modification of CMAKE_CONFIGURATION_TYPES\r\n\r\nWe just support the usual configs.\r\n\r\n* Move Dyninst version strings to base CMakeLists.txt\r\n\r\n* Move internal includes into base CMakeListst.txt\r\n\r\nThis ensures that all user options and internal settings are in place\r\nbefore third-party dependencies are configured.\r\n\r\n* Clean up 3rd party includes in base CMakeLists.txt\r\n\r\n* Remove unused version strings\r\n\r\n* Remove unneeded 'add_dependencies(common boost)' in base CMakeListst.txt\r\n\r\nThis is now handled directly in CMake recipe for common.\r\n\r\n* Remove unused testsuite include in base CMakeLists.txt\r\n\r\n* Update the project declaration\r\n\r\n* Move setting of CMAKE_BUILD_TYPE to base CMakeLists.txt\r\n\r\nThis keeps all CMake-level variables in one place.\r\n\r\n* Don't set CMAKE_EXPORT_COMPILE_COMMANDS\r\n\r\nThe user should set this.\r\n\r\n* Move BUILD_SHARED_LIBS into base CMakeLists.txt\r\n\r\n* Remove unused INSTALL_DOC_DIR\r\n\r\n* Make cmake_minimum_required a FATAL_ERROR\r\n\r\n* Move rpath and shared lib settings into DyninstLibrary\r\n\r\n* Move installation items into DyninstInstall.cmake\r\n\r\n* Automatically generate DyninstConfigVersion.cmake\r\n\r\n* Use configure_package_config_file to generate DyninstConfig.cmake\r\n\r\nThis will provide more utilities to make a more robust Config.cmake\r\n\r\n* Use INSTALL_INCLUDE_DIR to set DYNINST_INCLUDE_DIR\r\n\r\n* Use PACKAGE_INIT in Config.cmake.in\r\n\r\nAlso use it for DYNINST_INCLUDE_DIR\r\n\r\n* Don't explicitly set Dyninst_FOUND\r\n\r\nThe caller's find_package will do this.\r\n\r\n* Remove unused DyninstSystemPaths.cmake\r\n\r\n* Simplify visibility settings and move to DyninstLibrary\r\n\r\n* Move SYMREADER calculation to base CMakeLists.txt\r\n\r\nIt is needed in several places before DyninstLibrary is included.\r\n\r\n* Merge platform calculations into a DyninstPlatform.cmake\r\n\r\n* Remove DyninstVisibility include\r\n\r\n* Moved configure_file back to base CMakeListst\r\n\r\nThe ordering matters until common gets an explicit list of header files (currently uses a glob).\r\n\r\n* Remove DyninstConfigVersion.cmake.in\r\n\r\nThis isn't needed anymore since the version file is generated automatically.\r\n\r\n* Remove custom target install\r\n\r\ncmake_install.cmake isn't intended to be used that way.\r\n\r\n* Remove install logic from dyninst_library\r\n\r\nThat is now handled in DyninstInstall.\r\n\r\n* cmake-format: set tab size to 2\r\n\r\n* cmake-format: don't format comments\r\n\r\n* Calculate platform from CMake-provided mechanisms\r\n\r\nThese are equivalent to the existing bash, but more adaptable.\r\n\r\n* Map stringy names into CMake variables\r\n\r\n* Replace Windows platform check with DYNINST_OS_Windows\r\n\r\n* Replace Linux platform check with DYNINST_OS_Linux\r\n\r\n* Replace FreeBSD platform check with DYNINST_OS_FreeBSD\r\n\r\n* Replace x86 platform check with DYNINST_OS_x86_64\r\n\r\n* Replace ppc platform check with DYNINST_ARCH_ppc64le\r\n\r\n* Replace aarch64 platform check with DYNINST_ARCH_aarch64\r\n\r\n* Replace mangled platform checks with explicit DYNINST_{OS,ARCH}\r\n\r\n* Rename PLATFORM to DYNINST_PLATFORM and export it as legacy\r\n\r\nThis is only used in the test suite.\r\n\r\n* Don't pass -m64 explicitly on ppc64le\r\n\r\nWe only support 64-bit ppc, so this is redundant and non-portable.\r\n\r\n* Remove commented-out define for aarch64\r\n\r\n* Simplify CapArchDef\r\n\r\nWith the new variables, only one pass over the OS names is needed.\r\n\r\n* Allow FreeBSD to build on i386\r\n\r\nI previously thought it was only allowed on x86_64, but there is an old platform called i386-unknown-freebsd7.2.\r\n\r\n* Add Windows to DYNINST_PLATFORM\r\n\r\n* Replace usage of WIN32 with DYNINST_OS_Windows\r\n\r\n* Replace usage of UNIX with DYNINST_OS_UNIX\r\n\r\n* Merge Linux+FreeBSD checks into UNIX check\r\n\r\n* symtabAPI - replace i386 check\r\n\r\n* Use 'option' instead of 'set(... CACHE ...)'\r\n\r\n* Deprecate STERILE_BUILD\r\n\r\n* DyninstOptions - use 'OFF' instead of 'NO'\r\n\r\n* Get rid of dyninst_link_private_library\r\n\r\nWe require CMake >= 3.13.0 so this is no longer needed.\r\n\r\n* Rename SOVERSION to DYNINST_SOVERSION\r\n\r\nSOVERSION is a keyword.\r\n\r\n* Replace LIBVERSION with DYNINST_LIBVERSION\r\n\r\nFor clarity and consistency.\r\n\r\n* Replace DYNINST_ROOT with PROJECT_SOURCE_DIR\r\n\r\n* Move library settings into DyninstLibrarySettings.cmake\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR absolute\r\n\r\nIn 'install', they are relative to CMAKE_INSTALL_PREFIX by default.\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR cache variables\r\n\r\nThere's no need to let the user modify these locations.\r\n\r\n* DyninstLibrarySettings - reuse INSTALL vars\r\n\r\nThis just makes sure changes are propagated.\r\n\r\n* DyninstLibrarySettings - remove INSTALL_BIN_DIR\r\n\r\nIt's not used.\r\n\r\n* DyninstLibrary - rename INSTALL_*_DIR -> DYNINST_INSTALL_*DIR\r\n\r\nThis is more in line with the naming convention of GNUInstallDirs. We\r\ncould use GNUInstallDirs directly, but there's no need to let the user\r\nconfigure the install directory layout.\r\n\r\n* DyninstLibrarySettings - Use 'Dyninst' instead of PROJECT_NAME\r\n\r\nThis is the only placed PROJECT_NAME is used, so make it consistent.\r\n\r\n* DyninstLibrarySettings - update RPATH handling\r\n\r\n* DyninstLibrary - don't manually create cmake_install.cmake\r\n\r\nThese are automatically created and installed by 'install'.\r\n\r\n* DyninstLibrary - Merge calls to set_target_properties\r\n\r\n* DyninstLibrary - Cleanup superfluous variable usage\r\n\r\n* DyninstLibrary - add Windows defines to targets instead of directories\r\n\r\n* DyninstLibrary - add LIGHTWEIGHT_SYMTAB, SW_ANALYSIS_STEPPER to targets\r\n\r\n* DyninstLibrary - add DYNINST_DIAGNOSTIC_NO_SUPPRESSIONS to targets\r\n\r\n* DyninstLibrary - export all targets to DyninstTargets.cmake\r\n\r\n* DyninstLibrary - don't treat each library as a separate component\r\n\r\n'COMPONENT' in 'install' is used to group targets into \"bags\" of useful\r\nfeatures that can be independently installed using cmake --install .\r\n--component .... That doesn't work for Dyninst. Note: This is\r\northogonal to the concept of a COMPONENT in find_package.\r\n\r\n* DyninstLibrary - remove CLEAN_DIRECT_OUTPUT\r\n\r\nWe no longer offer per-library build targets.\r\n\r\n* DyninstLibrary - remove WITHOUT_SYMTAB_API and WITHOUT_SYMLITE\r\n\r\nThese are never used.\r\n\r\n* DyninstLibrary - refactor global defines in 'dyninst_library'\r\n\r\n* DyninstLibrary - Move calculation of SYMREADER\r\n\r\n* DyninstLibrary - rename 'target' to '_target'\r\n\r\n'target' is a keyword\r\n\r\n* DyninstLibrary - add named arguments\r\n\r\n* DyninstLibrary - rename SRC_LIST with _target_SOURCE_FILES\r\n\r\nThe latter is created from the named argument 'SOURCE_FILES'.\r\n\r\n* DyninstLibrary - Replace ACTUAL_TARGETS with _all_targets\r\n\r\n* DyninstLibrary - make headers part of library declaration\r\n\r\nThis tracks file changes to signal rebuilds.\r\n\r\n* DyninstLibrary - add links, properties, includes to all targets\r\n\r\nThis synchronizes the SHARED and STATIC libraries.\r\n\r\n* DyninstLibrary - link private and public deps separately\r\n\r\n* DyninstLibrary - Set include directories on interfaces\r\n\r\nThis replaces using PUBLIC_HEADERS which is really intended for use with\r\nMacOS Framework targets.\r\n\r\n* DyninstLibrary - remove LIBRARY_OUTPUT_DIRECTORY\r\n\r\nThe default is CMAKE_CURRENT_BINARY_DIR, so no need to specify it.\r\n\r\n* DyninstLibrary - Apply DEFINES passed to dyninst_library\r\n\r\n* DyninstLibrary - make SHARED library explicit\r\n\r\n* DyninstLibrary - don't deref Boolean variable\r\n\r\n* DyninstLibrary - update message\r\n\r\n* DyninstLibrary - Install headers, preserving the directory structure\r\n\r\n* DyninstLibrary - \"return\" the list of generated target names\r\n\r\n* DyninstLibrary - add directory-level include guard\r\n\r\n* common - remove spurious files\r\n\r\nAdded in 2015.\r\n\r\n* common - move generation of dyninstversion.h into CMakeLists.txt\r\n\r\n* common - add global include guard in CMakeLists\r\n\r\n* common - explicitly list header files in CMakeLists\r\n\r\nThis makes it easier to see what the actual public files are.\r\n\r\n* common - refactor source list calculation\r\n\r\n* common - move include of DyninstLibrary into subdirectory\r\n\r\n* common - use new dyninst_library\r\n\r\n* common - set includes and Windows stuff on all targets\r\n\r\n* common - write 'dyninstverison.h' into source dir\r\n\r\n* elf - make a dummy target for non-Unix OSes\r\n\r\n* elf - use new dyninst_library\r\n\r\n* dwarf - use new dyninst_library\r\n\r\nThe changes here are the same as for elf/CMakeLists\r\n\r\n* symlite - make symlite/h/SymLite-elf.h publicly consumable\r\n\r\nIt refers to files in the build tree that aren't available in the\r\ninstall tree. Although this file is in the install tree, it was never\r\nconsumable by users. Updating this is of questionable utility, but it at\r\nleast gives us the opportunity to write tests against the public\r\ninterface.\r\n\r\n* symlite - use new dyninst_library\r\n\r\n* instructionAPI - use new dyninst_library\r\n\r\n* symtabAPI - use new dyninst_library\r\n\r\n* proccontrol - use new dyninst_library\r\n\r\n* parseAPI - use full path to common/h/util.h.\r\n\r\nThis prevents confusion with parseAPI/h/util.h.\r\n\r\n* parseAPI - use new dyninst_library\r\n\r\nThis one is different from the rest because parseAPI and dataflowAPI\r\nhave circular dependencies on each other, so it's not currently possible\r\nto split them up.\r\n\r\n* stackwalk - use new dyninst_library\r\n\r\nPreviously, FORCE_FRAME_POINTER was applied to _all_ of Dyninst. The\r\ncommit comments said it was supposed to be just for the stackwalk\r\nsources, so that is the new behavior.\r\n\r\n* stackwalk - incorporate check of SW_ANALYSIS_STEPPER\r\n\r\nIt only affects stackwalk, so no need to put it on all of the targets.\r\n\r\n* stackwalk - put SW_ANALYSIS_STEPPER check in post-processing\r\n\r\nThis tidies up the code a bit.\r\n\r\n* patchAPI - use new dyninst_library\r\n\r\n* dyninstAPI - use absolute include path for 'debug.h'\r\n\r\n* dyninstAPI - add missing include for Dyninst::Address\r\n\r\nThis was transitively included, but breaks when reording includes.\r\n\r\n* dyninstAPI - add missing include for std::set\r\n\r\n* dyninstAPI - use new dyninst_library\r\n\r\n* dynC_API - use new dyninst_library\r\n\r\n* parseThat - use new dyninst_library\r\n\r\n* dyninstAPI_RT - use new dyninst_library\r\n\r\n1. SRC_ASSEMBLY was never used. The assembly files have always been\r\nexplicitly listed.\r\n\r\n2. We are still linking libdl.so on the static versions of the runtime.\r\nThis hasn't been an issue in the past, so we'll leave it.\r\n\r\n3. The creation of the lists of source files has redundant checks in it,\r\nbut this version is much clearer on what is actually happening.\r\n\r\n4. CHECK_C_COMPILER_FLAG_EXTENDED was removed since CMake now supports a\r\nmuch larger set of compilers and Dyninst has dropped support for HP,\r\nSun, and XL.\r\n\r\n5. The config is much less noisy. There was no reason to determine if\r\n32-bit support would work when the user didn't ask for it. Now, the\r\nconfig will fail if the user asks for 32-bit libraries and the compiler\r\ncan't create them.\r\n\r\n* Remove top-level project includes\r\n\r\nAll of the necessary includes are now handled by each toolkit via\r\nexplicit import/export of targets and include directories.\r\n\r\n* Remove top-level check for SYMREADER\r\n\r\nThe respective CMakeLists now handle this.\r\n\r\n* Add better handling of Threads/pthread\r\n\r\n1. Move Threads include into a tpls module\r\n\r\n2. Link against Threads::Threads instead of 'pthread'\r\n\r\n3. Add explicit dependencies in dyninstAPI and dyninstAPI_RT (they were\r\nimplicit before).\r\n\r\n* DyninstConfig - Correctly detect presence of COMPONENTS on import\r\n\r\nThis previously didn't work at all because DYNINST_${COMP}_FOUND should\r\nhave been spelled Dyninst_${COMP}_FOUND. This is simpler and allows the\r\nuse of check_required_components directly.\r\n\r\n* DyninstConfig - Remove unneeded and (now) incorrect comments\r\n\r\n* Make an OpenMP tpl module\r\n\r\nThis will make it easier to export OpenMP in DyninstConfig. It also makes CMakeLists.txt have just straight-line code.\r\n\r\n* Include all third-party libraries in DyninstConfig\r\n\r\nThis is explicitly required by the CMake documentation:\r\n\r\n  \"All required dependencies of a package must also be found in the\r\npackage configuration file.\"\r\n\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nThis also ensures that the custom Dyninst:: targets are always available\r\nto consumers.\r\n\r\n* Ensure static libraries depend on static Dyninst libraries\r\n\r\nWhen creating a static Dyninst library, ensure that it depends on the\r\ncorresponding static Dyninst library. For example, libDynElf.a should\r\ndepend on libcommon.a, not libcommon.so.\r\n\r\n* DyninstWarnings - Ignore no-pragma warnings for non-Werror builds\r\n\r\n* DyninstCapArchDef - rename UNIFIED_DEFINES\r\n\r\nDYNINST_PLATFORM_CAPABILITIES is more descriptive.\r\n\r\n* DyninstCapArchDef - add include guard\r\n\r\n* DyninstLibrary - add DYNINST_PLATFORM_CAPABILITIES to all targets\r\n\r\n* DyninstLibrary - add documentation\r\n\r\n* DyninstLibrary - update comment about install dir structure\r\n\r\n* DyninstLibrary - install runtime in 'bin'\r\n\r\n* Include 'src' and 'h' subdirectories in BUILD_INTERFACE\r\n\r\nEvery toolkit has a similar directory structure, so we can do this\r\nin just one location instead of in each CMakeLists.\r\n\r\n* Unswitch loops for platform-specific target updates in CMakeLists\r\n\r\nThis is really a code beautification.\r\n\r\n* Remove DYNINST_LIBVERSION\r\n\r\nIt's never different from DYNINST_VERSION and has no special purpose.\r\n\r\n* Remove system path detection in RPATH calculations\r\n\r\nWe use CMAKE_BUILD_WITH_INSTALL_RPATH to ensure the install path is not\r\nin RPATH/RUNPATH, but then this code would add it back if the install\r\ndirectory isn't a system path.\r\n\r\n* DyninstLibrary - simplify regex for header install\r\n\r\n* Rename cmake/version.h.in to cmake/dyninstversion.h.in\r\n\r\nThis makes the generated file match the generator file name.\r\n\r\n* DyninstLibrary - install from _target_PUBLIC_HEADER_FILES\r\n\r\n_public_headers was only incidentally present from the file including\r\nthis one.\r\n\r\n* parseAPI - make headers PRIVATE in dyninst_library\r\n\r\nWe manually install them because of how dataflowAPI is consumed.\r\n\r\n* Issues warning when toolkit cannot be built with LIGHTWEIGHT_SYMTAB\r\n\r\n* CMake modernization - update compiler flags (#1374)\r\n\r\n* Fix spelling of LibDW_INCLUDE_DIRS when marking it as advanced\r\n\r\n* Mark STERILE_BUILD as advanced\r\n\r\n* Mark Boost_DIR as advanced\r\n\r\n* Mark TBB_DIR as advanced\r\n\r\n* Mark Thread_DB_{INCLUDE_DIRS,LIBRARIES} and as advanced\r\n\r\n* Update README\r\n\r\n* Add gfx908 public headers\r\n\r\nThese somehow didn't make it through the rebase\r\n\r\n* Make flags for RelWithDebInfo and Release match\r\n\r\n* Disable cmake-format for extra flags in DyninstWarnings\r\n\r\n* Propagate ElfUtils_ROOT_DIR to FindLib{ELF,DW,Debuginfod}\r\n\r\n* Use 'set' instead of 'option' for stringy options\r\n\r\n* Add more cmake-format exceptions in DyninstWarnings\r\n\r\n* Add <Package>_NO_SYSTEM_PATHS to elf, dw, debuginfod\r\n\r\nThis is used to exclude system directories from the search process.\r\n\r\n* Have ElfUtils_ROOT_DIR override search paths\r\n\r\nIf the user provides a value, then no system paths (aside from the ones\r\nin CMAKE_PREFIX_PATH) are searched. This lets the user 'force' a\r\nlocation for elfutils.\r\n\r\n* Remove explicit version fail check in elfutils find-modules\r\n\r\n* Move ElfUtils_ROOT_DIR check into DyninstElfutils\r\n\r\n* Add LibIberty_NO_SYSTEM_PATHS\r\n\r\n* Add Valgrind_NO_SYSTEM_PATHS\r\n\r\n* Remove explicit version check from FindValgrind\r\n\r\n* Boost - use new meaning of Boost_ROOT_DIR\r\n\r\n* Fix typo in DyninstElfUtils\r\n\r\n* Fix bug when setting path flags\r\n\r\n* TBB - use new meaning of TBB_ROOT_DIR\r\n\r\n* Add support for common/h/unaligned_memory_access.h\r\n\r\n* Set default DYNINST_LINKER to empty\r\n\r\nThis will use the default linker. lld is the LLVM linker.\r\n\r\n* Make requesting an unknown component an error\r\n\r\n* Always build libdyninstAPI_RT.a\r\n\r\nThis is always needed by the test suite and keeps the old behavior of having it built by default.\r\n\r\n* Add DYNINST_FORCE_RUNPATH option\r\n\r\nSetting this flag forces the linker to use RUNPATH instead of RPATH.\r\nThis is most useful for working with older RedHat distros.\r\n\r\n* Reduce number of public link dependencies\r\n\r\nThis reduces the number of transitive links that have to be done by\r\nbinaries linking against Dyninst.\r\n\r\n* Make elfutils dependency public for symtab\r\n\r\nIt's needed in the Module.h public header.\r\n\r\n* Require TBB >=2019.9\r\n\r\nWhen building from source, versions before 2019.9 incorrectly set the\r\nversion in TBBConfigVersion.cmake. For example, 2018.6 sets the version\r\nto 2018.0 because it uses the TBB_{MAJOR,MINOR}_VERSION from tbb_stddef.h\r\ninstead of doing the calculation based on the engineering version.\r\n\r\nThis also unifies the versions required when compiling with gcc and clang.\r\n\r\nTBB 2018.6 was released in Oct 2018 and 2019.9 was released in Oct 2019,\r\nso this just bumps the requirement by just a year even though there are\r\nat least 9 releases in between.\r\n\r\n* Update Boost version in docker/dependencies.versions\r\n\r\n* Update filenames in dependency-version CI check\r\n\r\n* Update variable names in dependency-version CI check\r\n\r\n* Make elfutils dependency public for dynElf\r\n\r\n* bump CMake minimum version to 3.14.0\r\n\r\nThe 3.13.* family requires every 'install' to specify a \"LIBRARY\r\nDESTINATION\". We don't need or want that in the custome parseAPI install\r\n(line ~130) for exporting the public headers.\r\n\r\n* Add cmake to dependency-version CI check\r\n\r\n* Rename cdna2 -> gfx90a in new layout\r\n\r\n* Always create list of static-only sources in dyninstAPI_RT\r\n\r\n* Add common/h to BUILD_INTERFACE in 32-bit libdyninstAPI_RT\r\n\r\n* Fix building with symLite\r\n\r\nThe headers from symtabAPI are still required, even when building with symLite.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e93225713b1633a7bf6ff0d9a89c409db802173", "commit_date": "2023-04-21T19:58:43Z", "commit_message": "Add callback for parsing unknown instructions (#1276)\n\n* Add callback declarations for unknown instructions in InstructionDecoder\r\n\r\n* Update definition of callback interface\r\n\r\nThis also makes 'unknown_instruction' inconstructible.\r\n\r\n* make isValid the same as isLegalInsn\r\n\r\nThis makes it impossible to make an Instruction object from a failed\r\ndecoding process. This only affects x86.\r\n\r\n* Detect illegal instructions sooner in doIA32Decode\r\n\r\n* Don't advance the buffer when an x86 decode fails\r\n\r\n* Use a ternary to avoid linker error on some gcc's\r\n\r\nSome versions of gcc don't inline std::min _and_ need to resolve maxInstructionLength.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "308bddcb75de5df8e18d7b5af62602d9f5f818a0", "commit_date": "2023-04-20T21:01:50Z", "commit_message": "Update GFX90A Decoder  ISA-SPEC(02/22/23) (#1407)\n\nUpdate implementation for AMDGPU GFX90A based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. case label in amdgpu_gfx90a_decoder_impl.C made sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44e3bb530ccb4228588bd17635eaf77cdf5365e1", "commit_date": "2023-04-20T21:01:37Z", "commit_message": "Update GFX908 Decoder ISA-SPEC(02/22/23) (#1408)\n\nUpdate implementation for AMDGPU GFX908 based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions (dsmem)\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. Make case label in amdgpu_gfx90a_decoder_impl.C sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c401cd675058af5e873f4763a6f133fd11938ce", "commit_date": "2023-04-20T21:00:54Z", "commit_message": "Add CI workflow to build consumers of Dyninst (#1412)\n\n* Add CI workflow to build consumers of Dyninst\r\n\r\n* Build with cron", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25b37343f2f115298bd82eecf579bc3baf06b5ba", "commit_date": "2023-04-20T20:55:59Z", "commit_message": "CI workflow to build from spack (#1411)\n\n* CI workflow to build from spack\r\n\r\n* Update cron to every Sunday at 3AM\r\n\r\n* Force use of intel-tbb\r\n\r\nDue to explicit conflicts in the recipe, spack uses intel-parallel-studio which can't be used in automated builds because it prompts the user to accept a license agreement\r\n\r\n* Switch to weekly cron schedule", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0885301c49db8cfc286f41003a558005c9c7ace6", "commit_date": "2023-04-05T13:30:47Z", "commit_message": "Rename Architecture AMDGPU_CDNA2 to AMDGPU_GFX90A (#1404)\n\nRename the Architecture Arch_amdgpu_cdan2 to Arch_amdgpu_gf90a,\r\nas recommended by the vendor.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2f7af10477b0f7daf0efca2c992224711e5deb27", "commit_date": "2023-04-04T02:12:02Z", "commit_message": "Fix link bug in insnCodeGen::loadImmIntoReg on aarch64 (#1405)\n\n* Fix link bug in insnCodeGen::loadImmIntoReg on aarch64\r\n\r\nThe function template has a separate declaration and \"definition\" AND is\r\ncalled from translation units where neither is located. This only happens\r\nto work correctly when the TUs are linked in a specific order.\r\n\r\n* Remove assert\r\n\r\nThe value is now always positive.\r\n\r\n* Remove missed template usage in emit-aarch64.C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a86894f3d9120883ed4c0cf4278287c8bb43ed73", "commit_date": "2023-03-30T20:00:03Z", "commit_message": "remove unneeded zero length files (#1403)\n\n- two old commits (accidentally?) committed zero length files that\r\n  seem to serve no purpose", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1ddebd3125437d3385e65a7cce5bea715588028", "commit_date": "2023-03-23T14:25:12Z", "commit_message": "Fix UB in dwarf/dwarf_subrange.cpp::get_type (#1402)\n\nThe dwarf_* functions return a pointer to their last argument. This causes 'get_type' to return a pointer to a local variable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e952a0dfc13dbb7d665219a672733a505ee2a00", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  stack frame larger than (#1397)\n\n- increase stack frame size warning limit another 1000 bytes for\n  power_opcode_tables.C for RELEASE builds using the clang compiler", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683c85c7ef35d0afe6188271c8f697f6f839e12d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameter (conditionally) (#1397)\n\n- Add macro DYNINST_SUPPRESS_UNUSED_VARIABLE to suppress\n  warnings about unused variables\n\n- use macro to suppress function parameter that is only unused\n  when building on aarch64 and hence cannot be commented out", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "309d167d291f69d0ba9d4671ca581d6d24bf95e0", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "fix broken call to base class function (#1397)\n\n- SgAsmBinaryMultiply::get_type() rose results in infinite recursion\n  as casting the pointer to the base class and calling a function\n  still calls the derived version.  Just call the base class's function\n\n- rewrite SgAsmBinaryAdd::get_type the same way; it was not broken\n  but was convoluted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f57a5cbdfa98333527466423cbc32224874fa81", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "enable warnings in dataflowAPI/src (#1397)\n\n- separate dataflowAPI/src and dataflowAPI/rose source files\n\n- undo disabling warnings for dataflowAPI/src files\n\n- only include ABI.C as a source file once", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "766c7fad0f9f25bc5505f55a88c4f370b0f2cc69", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variable (clang compiler bug) (#1397)\n\n- add suppressions around code that contains a lock using RAII;\n  clang prior to version 10 contains a bug where it does not\n  recognized that the ctor and dtor make the variable used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e86fb6e232b370a66f407f9a0af440134bff147", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  suppress VLA warning (#1397)\n\n- Rose uses a VLA in C++ which is non-standard; for now suppress the\n  diagnostic\n\n- clang requires disabling both -Wvla and -Wvla-extension\n\n- gcc <9, 11.0 and 11.1 has a bug that requires the suppression to\n  to not be in the same macro as VLA itself", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89b22e23d4abcf48a2b1d3dd0f1ce294b4bb6260", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1397)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f7ed33ed9fac49623fea5ed2743462d8c31a062", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  missing noexcept (#1397)\n\n- declare function noexcept to allow potential optimization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "61faa14906eb2a7543867f4cb66643783ba41323", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  deprecated implicit ctor and op= (#1397)\n\n- add explicit copy ctors and operator=,\n  or delete dtor where it could be defaulted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa4713e0f2f063362a496ed03d0d0d65ff43d037", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (delete variable) (#1397)\n\n- remove variables and their initializatins that shadow a variable in\n  the enclosing scope as they were initialized with the same value", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1caea03054dbd73178ea2f40e2ca3474ff9c82e6", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (rename) (#1397)\n\n- rename names that shadow a name in an enclosing scope or class with\n  a unique name", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a309c63953a845f2d0c6e24f3bc3c4d117ef9006", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  potentially evaluated expression (#1397)\n\n- replace use of typeid(expr) where expr executes code at run-time\n  with a dynamic_cast that is obvious that it executes code at\n  run-time", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "412071df5285ecb872abaa966ae4ebb81c733573", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  overloaded virtual overrides (#1397)\n\n- import the name of the base class's virtual function(s) that were\n  overridden in the derived class to prevent hiding of the base class's\n  functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a720e99d94bfb01de40488d5dae8b45645fb284e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  copy ctor missing base class (#1397)\n\n- call the base class's copy constructor in the derived class's\n  copy constructor", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "336409431b648c18c7b51ec1c3135489f82ab7ce", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  case fallthough (#1397)\n\n- add break statement or DYNINST_FALLTHOUGH macro where a switch\n  case falls through to the next case", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "476ba11cf828964579d40a26b21e4b0eb808d560", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  printf format related (#1397)\n\n- add printf-format annotation on dataflow printf function parameter\n\n- fix format string to match parameter types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a15d069e2ce6340396e71bc283f0ac2377b4da6e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  reorder ctor initialization list (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f13b79c36af349203bddba40757b82a1206de42d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  const correctness (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b880173dc64d2d1f07e4d41b4796eac3d14873fe", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variables (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "951ebb64db730f7497ce886e8634aaa3da3cc5e7", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameters (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e9a4b86d2adbe3763fad3df38f85ac92959e26c", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  variadic macro (#1397)\n\n- replace non-standard variadic macro syntax with standard syntax\n\n- remove preprcessor check to use variadic macros if the compiler is\n  gcc;  all compilers support them", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42223b1f9118e32fe145a85a13ced32c13cd5871", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  extraneous semicolons (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ebf545849ef979aaa21bf82e8caff104cbeb6f6", "commit_date": "2023-03-15T13:47:22Z", "commit_message": "Github CI: update dev container deployment (#1400)\n\n* Log in to GHCR before building\r\n* Pull base image for cache", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab965c214b030a302aa0307b121cb9d06ab0a989", "commit_date": "2023-03-15T12:39:13Z", "commit_message": "Github CI: add line continuation in dev-containers.yaml (#1399)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f5558a15b16272eef982b5e8ddfdf172eb59036", "commit_date": "2023-03-15T12:23:31Z", "commit_message": "Add PR testing Github CI (#1393)\n\nRun on pull request to master:\r\n\r\n    Enforce formatting of CMake files, if modified\r\n    Check for changes in minimum required versions of dependencies\r\n    Ensure Dyninst, test suite, examples, and external tests all build with gcc on Ubuntu-20.04\r\n\r\nRun on push to master:\r\n\r\n    Build and deploy new dev container, ghcr.io/dyninst/amd64/<OS>:latest", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e7aa66ddef6768957faae3c62c9909590663901", "commit_date": "2023-03-09T20:15:45Z", "commit_message": "Replace 'cerr' with 'dwarf_print' in DwarfWalker::decodeLocationList (#1395)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1157c87c0b184d83e851bdd5b63582dd2a7647cf", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy with user dtor (#1394)\n\n- Make classes move-only by removing public copy constructor and\n  operator= as they contained pointer members that were just copied\n  (with no semantics of copying the data). This is a double delete\n  waiting to happen.  Luckily the pointer were always nullptr when the\n  copy constructor was called.\n\n- add move constructor (using std::move where appropriate)\n\n- clean up the classes to use default constructors and default member\n  initialization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1aeb249ff90fea49dc50efea1e6c11577bf9d90", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unneeded internal declaration (#1394)\n\n- clang warns of an unneeded internal declaration for yyinput. Since\n  yyinput is generated by flex, just suppress it for the whole file.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7cd7cdb0ba98de24b0d916b8e440db8adb0af6f9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (derived) (#1394)\n\n- Derived type classes have an operator==(const Type&) const, and they\n  call this operator with with both the lhs and rhs being the derived\n  class type.  This is ambiguous when using C++ 20's rule that considers\n  the parameters reversed.  Fix by adding an inlined non-virtual\n  operator== that takes the derived types a parameter and then\n  unambiguously calls the existing ==", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12a4fd86738c048dd82c20c31359cf7a48c082eb", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  stack frame larger than (#1394)\n\n- increase stack frame size warning limit when using the clang compiler\n  for a couple of files that needed a similar increase for gcc", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b78e883c77aefc27d1a30722b414266aa33897d1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  logical op (#1394)\n\n- add suppressions for identical clauses of a logical operator\n  even if they are only identical after evaluating constant\n  expressions that are not identical as gcc 8 and prior warn\n  about this\n\n- Suppression for these are already in place for warnings in adjacent\n  if statements, so extend the suppression to cover these also", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9dbc1e30e30ef263b174d1d2b5ca648e8ef6bf0d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  C function decls without prototype (#1394)\n\n- C functions declared as func() are a declaration without a prototype\n  (from the original K&R C), not a function that takes no parameters\n  (until C23), change all of these to func(void) which is how to\n  declare such a function in C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a2e3fd795f8ec6cb730038ec277431b0832c03c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  set but unused variables (#1394)\n\n- delete variables whose only use is to increment themselves", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6e380f7158326fc686f1b3f7ec7a01b3ac4bfe2", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (#1394)\n\nC++ 20 considers the reversed parameter of a comparison operators in\naddition to the given parameter order.  This implies that if the\nargument is const then the member function must also be const.\n\n- change    bool operator==(const T&)\n      to    bool operator==(const T&) const", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57fe4c395dff4fd11f18d2f00eb58ad25212501", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::random_shuffle is deprecated (#1394)\n\n- replace std::random_shuffle with std::shuffle", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "706fd0e3c532a3d7cfc1d752620ebed2fac65c5d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing noexcept (#1394)\n\n- declare functions noexcept", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "55d8a338e362d3aa4448aa9bae776eb90ca1292a", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1394)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b977e8d7132b312c853652a1e7e6f28eb39dbab0", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unused private field (#1394)\n\n- removed myid member from dyn_thread as it is never used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0eb0b29def9cc2d18e0fe724e536c73e7e9ef964", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy/op= with user provided dtor (#1394)\n\n- Explicitly define the implicit operator or remove the explicit\n  destructor; in C++ 20, if a destructor is explicitly defined then\n  the other constructor, assignment and move operators will not be\n  automatically generated", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9be477535debee15c2403bdc2ddedb31fdf0eb8e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  remove unused variables/members (#1394)\n\n- remove variables that were never used\n\n- remove code that only updated unused variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "344783a7954de9af7f98a5d3f0ec7c505b7536a1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (variables) (#1394)\n\n- rename variables that shadow names in containing scopes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73064a866ee1d19d8e12e2562f60b9b7f8e05406", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (enumerator names) (#1394)\n\nenumerator names shadow names in other scopes\n\n- made 3 internal enum types scoped enums:  StackAccessType,\n  operandType and patch_type_t\n\n- delete one internal and unused enum type:  frameType_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4bf4a24c514d0c395fdd27d6fe68ddf0fef89040", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "replace C-style and functional casts (#1394)\n\n- replace C-style casts ((T)e) and functional casts (T(e)) with modern\n  casts that have a clearer intent and are safer:  static_cast<T>(e),\n  and T{e}.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8d0e2760b307c7d465b56cac639c2e4a2cc93ca8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "write_memory_as to append_memory_as as appropriate (#1394)\n\n- where write_memory also updates the pointer, change then to\n  append_memory_as(...)\n\n- change '*insn++ = <value>' to append_memory_as_byte(...) to\n  be consistent with append_memory_as(...)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c21bd122187e87b74d45a5ba3ec3e3824750f9c3", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (C casts) (#1394)\n\n- fixed increased alignment warnings in C code.  The macro\n  CAST_WITHOUT_ALIGNMENT_WARNING eliminates the warning and allows for\n  future auditing.  For the code as currently written, these are all\n  aligned properly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0eeb1ee0407780ee07f603910d398f836dc2f7", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (pointers) (#1394)\n\n- fix alignment warnings of pointers by using alignas_cast<> defined in\n  common/h/raw_memory_access.h to eliminate the increase alignment\n  warning.  For the code as currently written, these are all aligned\n  properly, but these are inherently unsafe and require manual\n  inspection of the pointers involved.  An assert in alignas_cast can be\n  uncommented to validate proper alignment at runtime.\n\n- explicitly force larger alignment of one variable to eliminate warning", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "285ac938848739e02e38c044cf354dcb9d99f0b9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (#1394)\n\n- Casts of pointers to a type that has a larger alignment requirement\n  will cause an exceptions on some architectures on dereference if the\n  pointer does not meet its alignment requirements.\n\n- Add new template functions read_memory_as and write_memory_as that\n  read and write the bytes of (possibly) unaligned memory of the desired\n  data at the supplied address using the length of the template type in\n  a way that is safe even if the supplied pointer is not properly\n  aligned.\n\n- Add functions append_memory_as; like write_memory_as but updates the\n  pointer value to memory location after the bytes written.\n\n- Add template function alignas_cast to cast a pointer to another\n  pointer without producing an increased alignment warning; requires\n  manual auditing to pointer is properly aligned", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4aff07d1eba822b880558c030c7f5aec94b2ae9c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  pessimizing move (#1394)\n\n- remove unnecessary std::move's", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b88b16dba9477f18fe598fad5552758204a1558e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing override (#1394)\n\n- add override to all overridden virtual methods of a class if present\n  on any method", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84fe176ef5ab61376911570de6b506473a3c8d35", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  tautological always true comparison (#1394)\n\n- value of type unsigned char compared to 256 produces a warning as 256\n  is outside the range of the uint8_t.  256 is the number of array\n  elements (computed using sizeof's).  Changed from (n < numElems) to (n\n  <= numElems - 1) which is also always true, but the error is\n  eliminated due to 255 being within range of a uint8_t.  Ugly but makes\n  the warning disappear.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6b41075d61009b539107836591cb47b8cb3e3c8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  mismatched class/struct (#1394)\n\n- use consistent 'struct' and 'class' keyword between forward\n  declaration and definition; a mismatch is legal be breaks on\n  some versions of MS C++", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9e83871f0380068dba79648c6acee503cac5d76", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  [[fallthrough]] requires C++ 17 (#1394)\n\n- clang's __has_cpp_attribute(fallthrough) feature test macro returns\n  true, but produces warnings if used.  [[clang::fallthough]] works, so\n  force it if the language version is pre-17 with clang compiler.\n\n- fix typo in __cplusplus macro name\n\n- improve robustness: try all alternative fallthrough attributes names", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "067be96bb64a3d4191f12db1694b0fcfec51d457", "commit_date": "2023-03-02T18:41:27Z", "commit_message": "Restore PPC special-purpose registers in opposite order of saving them (#1392)\n\n* Restore PPC special-purpose registers in opposite order of saving them\r\n\r\nThis is the same fix as https://github.com/dyninst/dyninst/pull/1000,\r\nbut for PowerPC.\r\n\r\n* Reverse order of FPSCR restore", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae43ebc6f905345499ed9c55eccb007e9a69efa9", "commit_date": "2023-03-01T23:57:55Z", "commit_message": "Aarch64: Fix restoring special purpose registers order (#1000)\n\nThe special purpose registers are pushed onto the stack by\r\nEmitterAARCH64SaveRegs::saveSPRegisters. This patch reverses the order\r\nused for popping the stored registers from the stack. Without\r\nthis patch, some of the state registers get swapped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46ea3009e1e0e27bd035ac3152dc772bf861f3fd", "commit_date": "2023-03-01T19:33:16Z", "commit_message": "Avoid possible copy in BPatch::createEnum (#1390)\n\nThe Type class doesn't have a user-defined copy constructor and its\r\nimplicit declaration is deprecated in C++20. Rearranging the construction\r\nhere removes the possibility of copying.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f89cc72416fdc1d467b130f48609b8fc93126d37", "commit_date": "2023-02-28T23:54:58Z", "commit_message": "Merge pull request #1389 from dyninst/wuxx1279/gfx908/clang-error\n\nFix ambiguous override of InstructionDecoder_amdgpu_*::makeRegisterExpression", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "557a01949a4c11e8e8975fe113e4ab07b64bf25d", "commit_date": "2023-02-27T21:25:44Z", "commit_message": "add InstructionDecoderImpl::makeRegisterExpression to derived classes\n\nEliminate virtual-overloaded warning as there are 3 overloaded methods of\nInstructionDecoderImpl::makeRegisterExpression, but only 2 are defined in\nthese classes for add a using so the 3rd is not hidden.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42c3a4b497071e421686ded49ad0da406c8053ac", "commit_date": "2023-02-27T20:06:40Z", "commit_message": "Fix virtual derived signature to match base class\n\nmakeRegisterExpression in the derived class had\nan incorrect function signature, which made\ncompilation fails on gcc-6 and clang.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d15c0f714397a1316c74fc8d2c24a62a772ecc3", "commit_date": "2023-02-27T18:39:18Z", "commit_message": "Update DwarfWalker subrange handling (#1369)\n\n* Remove redundant include of libdw.h\r\n\r\n* Add subrange parsing to dynDwarf\r\n\r\n* Remove decipherBound\r\n\r\nThis implementation was neither correct nor complete. Moreover, we\r\nshouldn't be parsing FORM types. Looking for DW_TAG* is sufficient.\r\n\r\n* Remove legacy comments and commented-out code from parseArray\r\n\r\n* Improve error message in parseArray\r\n\r\n* Rename parseSubrangeAUX to parseSubrange and change interface\r\n\r\n* Replace bound calculations in parseSubrange\r\n\r\n* Update some comments and whitespace\r\n\r\n* Update construction of the result type\r\n\r\nThe LONG_MIN/MAX aren't great, but they are propagated to preserve\r\nbehavior.\r\n\r\n* Update debugging messages in parseSubrange\r\n\r\n* Have parseSubrange() call parseSubrange(Dwarf_Die*)\r\n\r\n* Use updated parseSubrange in parseMultidimensionalArray\r\n\r\n* Use std::tostring instead of snprintf\r\n\r\n* Update comments and remove dead code\r\n\r\n* Whitespace\r\n\r\n* parseMDA returns a typeArray instead of just a Type\r\n\r\n* Fix bug in dwarf_result::operator bool\r\n\r\n* Fix hi/low bound mixup in parseMDA\r\n\r\n* Try using Dyninst's parsed CU language, if needed\r\n\r\n* Display subrange DIE ID in pareSubrange\r\n\r\n* Don't create subrange type in parseSubrange\r\n\r\nThis will happen in the callee\r\n\r\n* Update parseSubrange() to use new parseSubrange(Dwarf_DIE*)\r\n\r\n* More carefully parse the child DIE\r\n\r\n* Iteratively parse the subranges in parseArray\r\n\r\n* Whitespace\r\n\r\n* Remove parseMultiDimensionalArray\r\n\r\n* Improve debug messages\r\n\r\n* Register each subrange type in parseArray\r\n\r\n* Remove common/h/dyninstversion.h\r\n\r\nThis was accidentally included.\r\n\r\n* Add copyright notices to new files\r\n\r\n* Make dwarf_result also hold a Dwarf_Word\r\n\r\nC++ doesn't guarantee it is convertible to `long`.\r\n\r\n* Only offer an interface to parse both bounds simultaneously\r\n\r\nThe calculation for a range's upper bound when DW_AT_count is used\r\nrequires knowing the lower bound (if given), so these needed to be\r\nmerged.\r\n\r\n* Use new dwarf_subrange interface in DwarfWalker::parseSubrange", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bfa6e82c2a9ef98801432324ffb3cec2a6254c5", "commit_date": "2023-02-27T14:13:39Z", "commit_message": "use default allocator for tbb::concurrent_hash_map (#1332)\n\n- gcc 12 warns about mismatched new and delete when an allocator is specified\r\n  This is likely a false positive.  Change to use the default, which uses ends\r\n  up using the same std C++ new allocator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "198b54f56cbcdb82f058d007545bdf9f36c5dce5", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "fix infinite recursion in LineInformation::addLine (#1331)\n\n- gcc 12 reported an infinite recursion for LineInformation::addLine\n  that takes the lineSource file\n- fixed by computing the string table index of lineSource and then\n  calling the addLine method that takes the index value\n- also update the lineSource type from string to const string&\n- updated documenation that had the method signature taking a const char*", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6436c734eef50d55ed6c562aa3fabf0c7039c50c", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "eliminate deprecated C++ function objects (#1331)\n\nfix function objects that were deprecate in C++ 11 and removed in C++ 17\n\n- replace mem_fun with mem_fn\n- eliminate binary_function and unary_function base classes\n- use const iterator when constructing boost::transform_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f049fe855640832950f5a6cd87db23ecb4b7533b", "commit_date": "2023-02-24T22:27:17Z", "commit_message": "Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04 (#1362)\n\n* Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04\r\n\r\n- the main issue was `/sbin/ldconfig -p` on Ubuntu 22.04 has an extra line at the end: \"Cache generated by: ldconfig (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35\"\r\n  - this would result in an occasionaly segfault\r\n- refactored the rest to avoid strtok which is known to have a fair amount of problems\r\n\r\n* fix header includes and message about delimit issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31b4d7f19f4e6585518eee179a63812f88911e6f", "commit_date": "2023-02-24T19:36:42Z", "commit_message": "Make SymtabCodeSource constructor const correct (#1293)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc38257de4d5143d097229aef7284b8e1ce6fbf5", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "SymtabAPI::Type: add support for C++ r-value references (#1159)\n\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c677008d0fa8f4ccb6d191d37493060e15d05f22", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "Improve DWARF enum parsing in Symtab::Type (#1164)\n\n* Inherit from derivedType\r\n* Add parsing of underlying type\r\n* Improve enum parsing debug information\r\n* Add support for C++ scoped enums (i.e., 'enum class')\r\n* Remove typeEnum::setName\r\n    This has no definition.\r\n* Inline default constructor\r\n* Clean up BPatch::createEnum\r\n\r\nThis removes the unnecessary construction of a separate (thread-safe!)\r\ncontainer of pairs and the associated memory leaks. It also explicitly\r\nmakes the enum's underlying type a four-byte signed int. Redundant code\r\nfrom the overload which computes the enum values was replaced by using\r\nstd::iota and calling the three-argument createEnum.\r\n\r\n* Remove factory functions\r\n\r\nAdding overloads for these would add more clutter than utility. We\r\nshould remove these from all of the types as the constructors should\r\nalways be used to ensure class invariants.\r\n\r\n* Remove non-portable constructors\r\n\r\nSince we're breaking ABI here, these constructors need to go. Manually\r\nsetting the size to `sizeof(int)` is non-portable as the\r\nBPatch::createEnum may be used to modify a binary that doesn't have the\r\nsame `int` representation as the host on which Dyninst was compiled.\r\n\r\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3046332ba3d32eccb63f8dd6ecc65afca3b2c63f", "commit_date": "2023-02-23T22:24:02Z", "commit_message": "Update global ELF ctor/dtor instrumentation for static executables (#1355)\n\nIf __libc_csu_init doesn't exist, try to insert the constructor call into the beginning of 'main'. If __libc_csu_fini doesn't exist, try to insert the constructor call into the beginning of 'exit'.\r\n\r\n* Use C-style strings for symbol names\r\n\r\nThere's no need to have a std::string object that incurs the overhead of a constructor/destructor call to just hold a literal that's only visible in the current translation unit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "fix-layout-field-overflow": [{"commit_oid": "428f7641500b04a5ec53142ab18599f771f21b4f", "commit_date": "2023-08-10T14:27:51Z", "commit_message": "Fix overflow of fields in instruction layout\n\nFields in instruction layouts can have implicit LSBs.\n\nPreviously this wasn't taken into consideration,\nand causes overflow and decoding instruction.\n\nThis PR fixes the layout definition to include the LSBs.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5055bcf55802fa9a57d7dd4e5397a978ee8d4d0", "commit_date": "2023-08-09T07:09:13Z", "commit_message": "Fix AMDGPU register formatting (#1473)\n\n* Separate out AMDGPU register formatting\r\n\r\nHere we extract the logic of displaying multiple registers as\r\na single operand when doing instruction formatting into a separate helper\r\nfunction that is only called when the architecture is passed to\r\nInstruction.format or Operand.format;\r\n\r\nThis change enables the ability get register operand name in two ways:\r\nConsider s[0:3]\r\n1. Without passing in architecture, each register will be printed separately.\r\nThat is s0,s1,s2,s3\r\n2. By passing in architecture, the first register will return a string\r\nfor the entire group, and the rest will return empty string.\r\nThat is s[0:3],\"\",\"\",\"\"\r\nThese empty strings will later be discarded by the\r\nArchitectureSpecificFormatter functions.\r\n\r\n* Fix missing parameter for makeRegisterExpression\r\n\r\nDuring one of the PRs that targets compiler warning,\r\nthe num_elements parameter to makeRegisterExpression is omitted,\r\nresulting in all register operands are displayed separately,\r\nwhether they should be displayed as a group or not.\r\n\r\nIn addition to adding the parameter, certern unused helper functions\r\nand fields of InstructionDecoder-amdgpu-gfx*** has been removed\r\nto avoid shadowing of variable names.\r\n\r\nNote that this change isn't applied to vega as we don't have ISA-XML for\r\nit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b6fcbb0c4f647fe4fbd39db1e0fb8cbc5cd1206f", "commit_date": "2023-08-08T19:45:36Z", "commit_message": "Clean up SymtabAPI::Function classes (#1475)\n\n* Remove undefined FunctionBase constructors\r\n\r\nThey were added by 5ed068167 in 2013, but never defined.\r\n\r\n* Make ~FunctionBase public\r\n\r\nFunctionBase is intended to be derived from and thus derived types can\r\nbe deleted through pointers to base. This would cause UB in the current\r\nstate.\r\n\r\nhttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual\r\n\r\n  A base class destructor should be either public and virtual, or\r\nprotected and non-virtual\r\n\r\n* Make Function(Symbol *) public\r\n\r\nIt's awkward having it be protected and then friended so it can be used.\r\nJust make it part of the API.\r\n\r\n* Function should not export its interface.\r\n\r\nThese functions should override those in FunctionBase, but should not\r\ndefine a new interface.\r\n\r\n* Explicitly mark overridden members in Function\r\n\r\n* Make InlinedFunction(FunctionBase *) public\r\n\r\nIt's awkward having it be protected and then friended so it can be used.\r\nJust make it part of the API.\r\n\r\n* Make ~InlinedFunction public\r\n\r\nInlinedFunction is intended to be derived from and thus derived types\r\ncan be deleted through pointers to base. This would cause UB in the\r\ncurrent state.\r\n\r\nhttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual\r\n\r\n  A base class destructor should be either public and virtual, or\r\nprotected and non-virtual\r\n\r\n* Make InlinedFunction::getModule public\r\n\r\nIt's a pure virtual member in FunctionBase, so making it protected here\r\nmeans that calls through a pointer to InlinedFunction could generate a\r\nruntime error. gcc and clang seem to \"do what I mean\" even though it's\r\nill-formed. It also removes the astonishment that `getModule` isn't\r\naccessible through the public interface even though it is required to be\r\nthere.\r\n\r\nFrom C++11 standard (n3242):\r\n\r\n11 Member access control [class.access]\r\n\r\n5. It should be noted that it is access to members and base classes that\r\nis controlled, not their visibility. Names of members are still visible,\r\nand implicit conversions to base classes are still considered, when\r\nthose members and base classes are inaccessible. The interpretation of a\r\ngiven construct is established without regard to access control. If the\r\ninterpretation established makes use of inaccessible member names or\r\nbase classes, the construct is ill-formed.\r\n\r\n* InlinedFunction should not export its interface.\r\n\r\nThese functions should override those in FunctionBase, but should not\r\ndefine a new interface.\r\n\r\n* Explicitly mark overridden members in InlinedFunction", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "67dfbb4ac8f5a6c1f98395983ff3a6ba57527101", "commit_date": "2023-08-03T17:55:51Z", "commit_message": "Fix hang when creating ELF dynamic sections (#1474)\n\nThis is triggered when a binary with no .rel.dyn and .rela.dyn\r\nsections, but its target platform uses rel type relocation records.\r\n\r\nThis happened on an AMDGPU binary that was previously incorrectly\r\nspecified as using a rel relocation record.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8fa753d955d43747aa46b0a528a81a0d9adf677d", "commit_date": "2023-07-27T14:25:14Z", "commit_message": "Do not decode operands for invalid opcode (#1467)\n\nCo-authored-by: Xiaozhu Meng <xmeng@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "43026f99ba03d71ec6105c4b52ad70759645a733", "commit_date": "2023-07-27T14:24:18Z", "commit_message": "Add support for EM_INTELGT (#1468)\n\nIt's unclear at this time how we should treat Intel's XE Gen12/Tiger Lake binaries, so we just treat them as Gen9 (Ponte Vecchio) for now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d94f856514d7e312d5d4bd704ddac8b166c48c4e", "commit_date": "2023-07-26T21:22:18Z", "commit_message": "do not export Instruction::appendOperand (#1466)\n\n- do not export since it is now private, and should not have been used\r\n  externally (comment said it was to work around old compiler issue).\r\n\r\n- cleanup method order and remove comment", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7456c05b979130eba42c4ee39a9ed00c92de2ba4", "commit_date": "2023-07-26T15:34:22Z", "commit_message": "add getDisplayOrderedOperands interface (#1465)\n\nAdd method Instruction::getDisplayOrderedOperands to return the\r\noperands that are displayed (non implicit operands) when formatting an\r\ninstruction for disassembly.  Returns a vector of Operands in display\r\norder.\r\n\r\nThese operands can be inspected and formatted to produce a disassembly\r\nstring with annotations.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6394752592546df5adff6bc7edb2d8bde330842d", "commit_date": "2023-07-26T03:27:07Z", "commit_message": "modernize ArchSpecificFormatter classes (#1464)\n\n- pass string and vector parameters by const reference instead of by\r\n  value for performance\r\n\r\n- add ArchSpecificFormatter::getInstructionString and remove the overridden\r\n  versions in the non-x86_64 as they were functionally the same, but not\r\n  identically written\r\n\r\n- remove virtual and add override to overridden methods\r\n\r\n- make methods const, use map::at instead of map::operator[]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25ad35c6762df4c40c68bd2fc3f6428efbd45a28", "commit_date": "2023-07-25T18:12:00Z", "commit_message": "improve intel instruction & operand formatting (#1463)\n\nThis fixes three issues when formatting an x86_64 instruction or its\r\noperands:\r\n\r\n1) Fix the order of operands when formatting the instruction to be the\r\n   AT&T syntax order.  If the instruction had three or more operands.\r\n   Conversion from the internal (Intel) order rotated right by 1 instead\r\n   of reversing the operands.\r\n\r\n2) Eliminate special treatment of register %kN as the first operand as\r\n   mask registers in Instruction::format as Operand::format already\r\n   formats these as masks (enclosed in braces) and not all uses of mask\r\n   registers are as a mask.\r\n\r\n3) Fix Operand::format to produce the correct disassembly operand\r\n   string.  The formatting of the internal Expression needs to be done\r\n   for some indirect values.  This was done in the Instruction::format\r\n   instead of directly in Operand::format\r\n\r\n* x86Formatter::getInstructionString - fixes 1, 2, 3\r\n\r\n* Operand::format - fixes 3\r\n\r\n* x86Formatter::formatRegister - cleanup, remove malloc that could leak", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e38d57c9904ab623350e90e0e3adcab2afcf2100", "commit_date": "2023-07-25T18:08:54Z", "commit_message": "fix x86_64 ret instruction formatting (#1457)\n\nThe ret instruction formats incorrectly with an operand of '(%rsp)'.  The\r\noperand should have been flagged as implicit so it is not included in\r\nthe output.\r\n\r\n- eliminate all but one overloaded Instruction::appendOperand` using\r\n  default parameters\r\n\r\n- add isImplicit parameter defaulting to false to\r\n  Instruction::addSuccessor\r\n\r\n- add isImplicit to the ret instruction's addSuccessor call to set the\r\n  ret_addr (which adds the operand to the Instruction object)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88a774dfa36208bc297b65dc18fdfe4e2e66140c", "commit_date": "2023-07-25T18:07:02Z", "commit_message": "modernize InstructionAPI::Operand class (#1456)\n\n* modernize InstructionAPI::Operand class\r\n\r\n- eliminate all but one of the constructors by using default parameters\r\n\r\n- remove destructor (unnecessarily virtual, and reset a member\r\n  shared_ptr), copy ctor, and copy assignment declarations to allow the\r\n  compiler to generate default versions that are equivalent or better\r\n  than the hand written versions\r\n\r\n- add default member initializers for all members\r\n\r\n- make Operand constructor explicit", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e17bc861ac69ddf6f55629b9912dca37e87d05d", "commit_date": "2023-07-25T17:41:03Z", "commit_message": "Fix x86 misspelled, incorrect, and invalid opcodes (#1421)\n\n* Fix spelling of 'vpperm' stringification\r\n\r\n* Fix spelling of 'vpcomd' stringification\r\n\r\n* Fix spelling of 'vprolvd' stringification\r\n\r\n* Fix spelling of 'vprolvq' stringification\r\n\r\n* Remove duplicate entry for 'e_vpsrlvq'\r\n\r\n* Rename 'vpclmullqlqdq' to 'vpclmulqdq'\r\n\r\n* Rename 'punpcklqd' to 'punpckldq'\r\n\r\n* Replace 'punpckhqd' with 'punpckhqdq'\r\n\r\n* Replace 'pcmpgdt' with 'pcmpgtd'\r\n\r\n* Remove instruction 'vpcmpequd'\r\n\r\nThis mnemonic does not exist in any of Intel Architecture Instruction\r\nSet Extensions, AMD Architecture Programmers Manual, or Intel\r\nArchitecutre Software Developer's Manual.\r\n\r\nThe encoding listed under 'SSET1E_66' is a reserved space.\r\n\r\n* Rename mnemonic for 'prefect_w' to 'prefetchw'\r\n\r\n* Rename 'pclmullqlqdq' to 'pclmulqdq'\r\n\r\nThis is a pseudo-opcode for pclmulqdq when imm8 is 0x0.\r\nThe encoding is 660F3A44, so the lookup table location is correct.\r\n\r\n* Remove 'mmxud'\r\n\r\nIt is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'movslq'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'pcommit'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Rename 'cmpsd_sse' to 'cmpsd'\r\n\r\n* Fix spelling of 'vphaddsw' mnemonic\r\n\r\n* Fix spelling of 'vblendpd' mnemonic\r\n\r\n* Remove redundant copy of 'prefetchwt1'\r\n\r\n* Remove redundant 'phsubsw'\r\n\r\n* Remove redundant 'sarx'\r\n\r\n* Remove redundant 'shlx'\r\n\r\n* Remove redundant 'vblendvpd'\r\n\r\n* Remove redundant 'vcmppd'\r\n\r\n* Remove redundant 'vcmpps'\r\n\r\n* Remove redundant 'vcmpsd'\r\n\r\n* Remove redundant 'vcmpss'\r\n\r\n* Remove redundant 'vpmaddubsw'\r\n\r\n* Remove redundant 'vpmaddwd'\r\n\r\n* Remove redundant 'vpmovsdb'\r\n\r\n* Remove redundant 'vpmovsdw'\r\n\r\n* Remove redundant 'vpmovsqb'\r\n\r\n* Remove redundant 'vpmovsqd'\r\n\r\n* Remove redundant 'vpmovsqw'\r\n\r\n* Remove redundant 'vpmovswb'", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d14dff71691f51fb6b96179a87b4cee6d3a34e6b", "commit_date": "2023-07-25T16:19:35Z", "commit_message": "Remove Object::dwarf_parse_aranges (#1462)\n\nIt's usage was removed by 4be991a7 in 2021.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d82356b795db373fd66b098a8ba6073a07ba6089", "commit_date": "2023-07-24T19:02:44Z", "commit_message": "Fix EM_AMDGPU to use RELA as Region Type (#1444)\n\nAccording to the llvm page\r\nhttps://llvm.org/docs/AMDGPUUsage.html#relocation-records\r\nAMDGPU backend generates Elf64_Rela records.\r\n\r\nThis fix added the case for EM_AMDGPU to\r\nstatic Region::RegionType getRelTypeByElfMachine\r\nsuch that it uses RELA instead of the default REL type.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "96f6344d195bb74f30e209c48ee64c8397421dcd", "commit_date": "2023-07-24T17:56:55Z", "commit_message": "Remove lazy initialization of IBSTrees in Symtab (#1454)\n\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes Symtab::mod_lookup threadsafe.\r\n\r\n* Fix includes in Function.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Fix includes in Variable.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Use Function.h instead of forward declarations\r\n\r\nThis removes duplicate typedefs, as well.\r\n\r\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes its use in\r\nSymtab::parseFunctionRanges threadsafe.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "649e43fa2d26aa3c5245b05bac1038f407c869a9", "commit_date": "2023-07-21T17:49:14Z", "commit_message": "Make Symtab::getContainingInlinedFunction lazy parsing threadsafe (#1452)\n\nThis fix does not address the thread safety issues in\r\nSymtab::parseFunctionRanges. That function is still thread unsafe and\r\nwill require separate modifications.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab915557f2ee64c538515fcdfed250e23dc40e19", "commit_date": "2023-07-14T23:39:33Z", "commit_message": "Clean up Symtab constructors (#1451)\n\n* Use default member initializers instead of initializer lists\r\n\r\nThere are members missing from the lists. This also simplifies the\r\nconstructors considerably.\r\n\r\n* Remove unhelpful message in default ctor\r\n\r\n* Delegate to default ctor in Symtab(MappedFile*)\r\n\r\nThis fixes the bug of inconsistent base initialization and ensures the\r\nconstructors are consistent.\r\n\r\n* Use delegating ctor for Symtab::Symtab(unsigned char*...)\r\n\r\nThis fixes the following bugs\r\n\r\n1. Invoke init_debug_symtabAPI before calling create_printf.\r\n\r\n2. Because this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.\r\n\r\n* Use delegating ctor for Symtab::Symtab(std::string...)\r\n\r\nBecause this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683b050d6132ce6a9e0cc5cad35d497b2d2d9cc2", "commit_date": "2023-07-14T21:08:09Z", "commit_message": "Explicitly delete unusable special member functions in Symtab (#1450)\n\nBecause there is a user-defined destructor, the compiler will not generate the special member functions (e.g., copy assignment operator). However, we explicitly delete them here to signal that this class is not copyable or movable.  The destructor is also moved to the top of the class to be next to the other special member functions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84786bd694d2c2163d6e8fbd2190271db1868ff3", "commit_date": "2023-07-14T20:20:25Z", "commit_message": "Remove Symtab::mfForDebugInfo (#1449)\n\nIt is never used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88bf2091da5aa9a018afb1f1db67fe6ffeb4773b", "commit_date": "2023-07-14T19:30:50Z", "commit_message": "Remove Symtab::checkPPC64DescriptorSymbols (#1448)\n\nThe definition was commented out in 3709ead48 in 2009.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7014ee1b08ffa17381b6f0bcda9b94368cb83937", "commit_date": "2023-07-14T19:30:30Z", "commit_message": "Remove Symtab copy constructor (#1447)\n\nThere are several reasons for this.\r\n\r\n1. It doesn't copy every member of the class\r\n2. IBSTree doesn't have a copy constructor\r\n3. mod_lookup_ and func_lookup_ are not copied, but are recreated in other member functions (e.g., mod_lookup()). This completely breaks the semantics of a copy ctor.\r\n4. Resets _ref_cnt to 1", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "beae2a07b5e0a40de54ee1aa972ac765e4d825b2", "commit_date": "2023-07-11T16:11:00Z", "commit_message": "add header files to directly define std:: syms (#1443)\n\n- update dyninst header files to directly include the standard header\r\n  file defining symbols from the standard C++ library that are used by\r\n  the dyninst header file; in some instances, the code relied on symbols\r\n  being defined via an unrelated include file indirectly including the\r\n  necessary header file leading to fragile code\r\n\r\n- minor other cleanups:  remove unnecessary header files, remove\r\n  definitions of names that are defined in a standard header file", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9696c64a3a1d6f41241d27c3c51820616490efa6", "commit_date": "2023-06-15T15:41:23Z", "commit_message": "Fix vector instruction lengths (#1439)\n\nThe following instruction decoded with the wrong length if the modrm\r\noperand specified a memory access as all the operand was incorrectly\r\nspecified to be a register only operand:\r\n\r\n- vcvtpd2udq\r\n- vcvtss2usi\r\n- vcvttpd2qq\r\n- vcvtudq2pd\r\n- vcvtudq2ps\r\n- vpblendd\r\n- vpermpd", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44d86e56068f62b9ac03f7d7537098fd3728fcdb", "commit_date": "2023-05-11T19:26:58Z", "commit_message": "Fix several resource leaks (#1435)\n\n* Local var leak in Symtab::addSymbol\r\n\r\nThis was found using cppcheck's memleak.\r\n\r\n* memCache::doOperation\r\n\r\nNot technically a leak, but cppcheck can't see through the 'push_back'.\r\n\r\n* PCProcess::hasPassedMain\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* parse_func::calcParentFunc\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* int_iRPC::setBinarySize\r\n\r\nFound using cppcheck's publicAllocationError.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8676f10714fb0bb7d0a3e7c65ec729d7db195d94", "commit_date": "2023-05-11T17:47:08Z", "commit_message": "Fix undefined behavior in integer operations (#1434)\n\n* Shifting signed 32-bit value by 31 bits is undefined behavior\r\n\r\nThis was found using cppcheck's shiftTooManyBitsSigned.\r\n\r\n* Signed to unsigned conversion in calculation\r\n\r\nThese were found using cppcheck's signConversion.\r\n\r\n* Fix signed overflow\r\n\r\nThis was found using cppcheck's integerOverflowCond.\r\n\r\n* Shifting negative value\r\n\r\nThis was found using cppcheck's shiftNegativeLHS.\r\n\r\n* BPatch_addressSpace::deleteSnippet: fix enumeral conversion in conditional", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c4a422834fbc3e6159ba00f10820f13c1958901e", "commit_date": "2023-05-10T19:01:00Z", "commit_message": "Prevent use of possibly-uninitialized local variable (#1433)\n\nThese were found using cppcheck's uninitvar and eraseDereference.\r\n\r\nFor the usages of iterator-like classes in process.C, they aren't strictly\r\nuninitialized variable usages since the classes in question are standard\r\nlayout types. It would be better to replace the usages there with list\r\nconstruction to avoid the static check altogether.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0c88bea297cb64cf147192242aaa3a4047cdb84", "commit_date": "2023-05-10T17:51:52Z", "commit_message": "Fix uninitialized member variables (#1431)\n\nThese were detected by cppcheck's uninitMemberVar*.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a73abaa9c7298a3e4ce0acf4eb14db8b1cb42fc", "commit_date": "2023-05-10T15:45:14Z", "commit_message": "Fix use of null pointer after check (#1432)\n\nThese were found using cppcheck's nullPointerRedundantCheck.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "68fc3d8a5f1527dcaa66c9455369c62e2b4fa54c", "commit_date": "2023-05-10T05:14:42Z", "commit_message": "Protect against self-assignment in copy constructors (#1430)\n\n* Protect against self-assignment in copy constructors\r\n\r\nThese were found by cppcheck:\r\n\r\ncommon/src/Node.C:198:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nNodeIterator &NodeIterator::operator=(const NodeIterator &rhs) {\r\n                            ^\r\ncommon/src/Edge.C:108:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nEdgeIterator &EdgeIterator::operator=(const EdgeIterator &rhs) {", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce097b5399fb654f68fbfe48e25e7a7bd567bf82", "commit_date": "2023-05-10T04:07:40Z", "commit_message": "Fix windows warnings (#1429)\n\n* Mismatched printf format arguments\r\n\r\nThese were found using cppcheck's invalidPrintfArgType_*.\r\n\r\n* Fix uninitialized member variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85fb0f95050c903bf1e1a1dbcacf1913dad1d73b", "commit_date": "2023-05-09T20:05:56Z", "commit_message": "Remove virtual calls in constructor/destructor (#1428)\n\n* AddressTranslateWin\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-win.C:49:17: style: Virtual function 'init' is called from constructor 'AddressTranslateWin(PID pid,PROC_HANDLE phandle)' at line 168. Dynamic binding is not used. [virtualCallInConstructor]\r\n   virtual bool init();\r\n\r\n* NodeIteratorPredicateObj\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:293:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateObj(Graph::NodePredicate::Ptr\r\np,NodeIterator&b,NodeIterator&e)' at line 331. Dynamic binding is not\r\nused. [virtualCallInConstructor]\r\n\r\n* NodeIteratorPredicateFunc\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:352:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateFunc(Graph::NodePredicateFunc\r\np,void*u,NodeIterator&b,NodeIterator&e)' at line 394. Dynamic binding is\r\nnot used. [virtualCallInConstructor]\r\n\r\n* InstructionDecoder_x86\r\n\r\nFound using cppcheck:\r\n\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: style: Virtual function 'setMode' is called from constructor 'InstructionDecoder_x86(Architecture a)' at line 144. Dynamic binding is not used. [virtualCallInConstructor]\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n                                                ^\r\ninstructionAPI/src/InstructionDecoder-x86.C:144:28: note: Calling setMode\r\n      if(a == Arch_x86_64) setMode(true);\r\n                           ^\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: note: setMode is a virtual function\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n\r\n* CFGFactor::destroy_block\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:117:18: style: Virtual function 'free_block' is called from destructor '~CFGFactory()' at line 92. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_block(Block * b);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:92:5: note: Calling destroy_block\r\n    destroy_block(b);\r\n    ^\r\nparseAPI/src/CFGFactory.C:182:5: note: Calling free_block\r\n    free_block(b);\r\n    ^\r\nparseAPI/h/CFGFactory.h:117:18: note: free_block is a virtual function\r\n    virtual void free_block(Block * b);\r\n\r\n* CFGFactor::free_func\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:116:18: style: Virtual function 'free_func' is called from destructor '~CFGFactory()' at line 95. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_func(Function * f);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:95:5: note: Calling destroy_func\r\n    destroy_func(f);\r\n    ^\r\nparseAPI/src/CFGFactory.C:172:4: note: Calling free_func\r\n   free_func(f);\r\n   ^\r\nparseAPI/h/CFGFactory.h:116:18: note: free_func is a virtual function\r\n    virtual void free_func(Function * f);\r\n\r\n* CFGFactor::free_edge\r\n\r\n* ~freebsd_process\r\n\r\nFound using cppcheck:\r\n\r\nproccontrol/src/freebsd.C:1046:17: warning: Member variable 'freebsd_thread::is_exited' is not initialized in the constructor. [uninitMemberVar]\r\nfreebsd_thread::freebsd_thread(int_process *p, Dyninst::THR_ID t, Dyninst::LWP l)\r\n                ^\r\nproccontrol/src/freebsd.h:122:17: style: Virtual function 'getEventQueue' is called from destructor '~freebsd_process()' at line 795. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual int getEventQueue();\r\n                ^\r\nproccontrol/src/freebsd.C:795:22: note: Calling getEventQueue\r\n    int eventQueue = getEventQueue();\r\n                     ^\r\nproccontrol/src/freebsd.h:122:17: note: getEventQueue is a virtual function\r\n    virtual int getEventQueue();", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6ab42a4da20f7d9a5a58c00a4835d337a95fef5", "commit_date": "2023-05-09T17:30:44Z", "commit_message": "AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak (#1427)\n\n* AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-sysv.C:1046:58: error: Resource leak: fd [resourceLeak]\r\n   if (read(fd, &e_hdr, sizeof(e_hdr)) != sizeof(e_hdr)) return base;\r\n                                                         ^\r\ncommon/src/addrtranslate-sysv.C:1048:28: error: Resource leak: fd [resourceLeak]\r\n   if (e_hdr.e_phoff == 0) return base;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5409c471292cb8b1c87e9b5ae1e94fa9b6eb573", "commit_date": "2023-05-09T17:09:20Z", "commit_message": "Make CondVar non-copyable, non-moveable (#1426)\n\nThis makes it consistent with std::condition_variable.\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]\r\n   mutex = new mutex_t;\r\n   ^\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]\r\n   mutex = new mutex_t;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "45614d7908e36d32d26126d2844d388c6936ba61", "commit_date": "2023-05-02T18:17:06Z", "commit_message": "Github CI: increase number of build jobs (#1424)\n\nGithub only allows one CPU core per job, but any number of threads. Testing shows that N=2 threads reduces build time by 2-2.5x, N=3 by 2.2x, and N=4 increases build time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e37524ab88b645328c1f02b5c4ab7ac0f7e8d3f", "commit_date": "2023-05-02T02:13:22Z", "commit_message": "Github CI: make compiler multi-build a cron job (#1425)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8952d3207763a26938e097e58ebe97b490c73cf", "commit_date": "2023-05-01T17:32:12Z", "commit_message": "CI compiler multibuilds (#1415)\n\n* Weekly build across all compiler versions and build types\r\n\r\n* Use DYNINST_WARNINGS_AS_ERRORS=ON instead of -Werror", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2e26598a5301ff900d2ca235db729d1dd4c4d350", "commit_date": "2023-05-01T16:45:24Z", "commit_message": "Use default TBB when doing CI spack build (#1423)\n\nDyninst now requires TBB >= 2019.9.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7621bc85ac0cda3bd1b2a17d78aac6d48c68280a", "commit_date": "2023-04-28T00:34:11Z", "commit_message": "Add ubuntu-22.04 to dev container build (#1419)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "719036aeb55c459a355afb91188cfa4d7d465bc9", "commit_date": "2023-04-27T23:51:51Z", "commit_message": "Refactor Dockerfile.ubuntu (#1420)\n\n* Move elfutils logic into build_elfutils.sh\r\n\r\n* Whitespace\r\n\r\n* Copy in dependencies.versions\r\n\r\nThis is no longer done in the base container because it didn't make\r\nsense there as that image should never change.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8d1a313be087154aad95d660b9fe2b34f4da492", "commit_date": "2023-04-27T22:33:27Z", "commit_message": "warning fix:  stack frame size (#1418)\n\n- when compiling with clang 15 and 16 in addition to clang 14,\r\n  allow a 40000 stack frame size", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a9c9e061ea6b41b93151f0ed3b34208346b4881", "commit_date": "2023-04-27T21:28:12Z", "commit_message": "Make InstructionAPI::isArrayIndexValid const. (#1416)\n\nclang complains:\r\n\r\n  'constexpr' non-static member function will not be implicitly 'const'  in C++14; add 'const' to avoid a change in behavior [-Werror,-Wconstexpr-not-const]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "739ad57883f032fb18a6c741f0c2f98e9a766bc7", "commit_date": "2023-04-25T17:03:44Z", "commit_message": "CMake modernization (#1391)\n\n# Changes to building Dyninst\r\n- Minimum CMake version is 3.14.0\r\n- STERILE_BUILD is now deprecated\r\n- ENABLE_LTO was renamed to DYNINST_ENABLE_LTO\r\n- CMAKE_EXPORT_COMPILE_COMMANDS is no longer set\r\n- Platform detection is done natively in CMake\r\n  - full support for Linux on x86, AMD64, ppc64le, and aarch64/ARMv8\r\n  - experimental support for 32-bit FreeBSD and Windows on x86\r\n- Custom install targets <target>-install have been removed\r\n- Installation subpaths (bin, lib, include, etc.)  are no longer user-configurable\r\n- Static versions of Dyninst libraries now depend on other static Dyninst libraries\r\n  - For example, libDynElf.a now depends on libcommon.a, not libcommon.so\r\n- Libraries that cannot build with symlight now warn when LIGHTWEIGHT_SYMTAB=ON\r\n- User build options passed via CMAKE_<LANG>_FLAGS are correctly preserved and override the builtin options\r\n- <PackageName>_ROOT_DIR now implies <PackageName>_NO_SYSTEM_PATHS and sets <PackageName>_ROOT\r\n  - This forces CMake to find the package at the given location or in CMAKE_PREFIX_PATH\r\n  - When using CMake >= 3.16, searching CMAKE_PREFIX_PATH can be disabled with CMAKE_FIND_USE_CMAKE_PATH=OFF\r\n  - For example, -DElfUtils_ROOT_DIR=/some/path sets ElfUtils_NO_SYSTEM_PATHS=ON and ElfUtils_ROOT=/some/path\r\n\r\n## RPATH handling\r\n- CMP0060 is active and so libraries are linked by their full paths even in implicit directories (e.g., /usr/lib/foo.so instead of -lfoo)\r\n- Populate RPATHs for binaries in the build tree: set(CMAKE_SKIP_BUILD_RPATH FALSE)\r\n- Do not use the install path as the RPATH: set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)\r\n  - $ORIGIN is used instead\r\n- Add paths to any directories outside the project that are in the linker search path or contain linked library files: set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\r\n\r\n## Third-party libraries (tpl)\r\n- The ability to build tpls from source has been removed\r\n- All libraries must have a CMakeConfig.cmake\r\n- Minimum versions\r\n  - Boost: 1.71.0\r\n  - TBB/oneapi-tbb: 2019.9\r\n  - elfutils: 0.186\r\n- An imported interface named Dyninst::<library> is created for each library\r\n  - includes are marked SYSTEM so they don't produce warnings\r\n  - exported in DyninstConfig.cmake as per https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n- pkgconfig is used to find elfutils and valgrind\r\n  - if pkgconfig fails, a manual search is done\r\n  - This can be disabled with  ElfUtils_NO_SYSTEM_PATHS=ON\r\n\r\n# Changes to consuming Dyninst as a CMake project\r\n- All targets are in the Dyninst namespace; e.g., symtabAPI is now Dyninst::symtabAPI\r\n- Each third-party library has an associated imported interface named Dyninst::<library>, e.g., Dyninst::Boost\r\n  - Users are encouraged to use these, if the same library is need in their applications\r\n- DYNINST_LIBRARIES has been removed\r\n- DYNINST_INCLUDE_DIR is now deprecated and will be removed in a future version\r\n  - Use the provided targets, instead\r\n- DYNINST_INTERNAL_DEFINES is now deprecated and will be removed in a future version\r\n- DYNINST_PLATFORM is now deprecated and will be removed in a future version\r\n- find_package(Dyninst ... COMPONENTS ...) now works correctly\r\n- Version constraints for find_package(Dyninst X.Y.Z) now work correctly\r\n  - Dyninst only guarantees ABI compatibility between major releases, so only the same major versions are compatible\r\n\r\nUsers who are not ready to fully migrate to the new Dyninst CMake package may use the following to preserve backward compatibility:\r\n\r\ncmake\r\nif(TARGET Dyninst::common)\r\n  foreach(t common symtabapi ...)\r\n    add_library(${t} INTERFACE IMPORTED)\r\n    target_link_libraries(${t} INTERFACE Dyninst::${t})\r\n  endforeach()\r\nendif()\r\n\r\n* Update minimum CMake version to 3.13.0\r\n\r\n* Rename CMake files to prevent name collisions\r\n\r\nWhen consumed as a subproject, the CMake files could be imported into the parent project where the filenames could collide.\r\n\r\n* Prepend to CMAKE_MODULE_PATH instead of overwriting\r\n\r\n* Fix capitalization error in FindThread_DB\r\n\r\nThis should silence the warning about Thread_Db versus Thread_DB\r\n\r\n* Require CMake package for TBB (#1322)\r\n\r\n* Make libdl/dbghelp private linkage\r\n\r\n* Remove TBB flags from toolkits that don't use TBB\r\n\r\n* Remove FindTBB.cmake\r\n\r\nAll supported TBB versions ship as CMake packages, so this is no longer\r\nneeded.\r\n\r\n* Remove from-source build option\r\n\r\n* Create an imported target for TBB used by Dyninst\r\n\r\nThis is needed to force the include directories to be considered 'system' directories so that compiler warnings from TBB sources are ignored\r\n\r\n* Rename cmake/ThreadingBuildingBlocks.cmake -> cmake/tpls/DyninstTBB.cmake\r\n\r\nThis is needed to keep the namespace clean for DyninstConfig.cmake\r\n\r\n* Export TBB as part of the Dyninst CMake package\r\n\r\nThis is required by the CMake guidelines:\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nIn particular,\r\n  \"All required dependencies of a package must also be found in the package configuration file\"\r\n\r\n* Format DyninstTBB.cmake\r\n\r\n* Boost CMake modernization (#1330)\r\n\r\n* Remove FindBoost.cmake\r\n\r\nUse the one provided by CMake so we don't have to maintain this one.\r\n\r\n* Remove from-source build\r\n\r\n* Remove user-configurable version\r\n\r\n* Force use of multithreaded libraries\r\n\r\nWe don't need to include Threads here. Boost will do that.\r\n\r\n* Disable use of statically-linked runtime\r\n\r\n* Remove Boost_DEBUG\r\n\r\n* Always enable searching system paths\r\n\r\n* Unify path calculations, pass to find_package as hints\r\n\r\n* Clean up comments\r\n\r\n* Use include_guard\r\n\r\n* Allow using Boost's CMake package\r\n\r\nIt is now provided by default since 1.70.0 which is the current minimum\r\nacceptable version.\r\n\r\n* Remove rest of cache variables\r\n\r\n* Remove MSVC-specific template define\r\n\r\nWe can add this back, if we find there are newer VCs still affected.\r\n\r\n* Make Dyninst::Boost imported interface target\r\n\r\nThis is needed to make the include directories be \"system\" directories\r\nso that warnings in their headers do not propagate into Dyninst.\r\n\r\n* Do not add Boost as a dependency for all libs\r\n\r\n* Make find_package QUIET\r\n\r\n* Use Boost_* variables instead of calculating includes, libs, etc.\r\n\r\n* Make a header-only wrapper target\r\n\r\n* Add to Dyninst package\r\n\r\n* Update CMakeLists\r\n\r\n* Set Boost_NO_WARN_NEW_VERSIONS\r\n\r\n* Bump minimum version to 1.71.0\r\n\r\n* Elfutils cmake modernization (#1333)\r\n\r\n* Rename FindLibDwarf -> FindLibDW\r\n\r\n* Update FindLibDW\r\n\r\n* Rename FindLibElf -> FindLibELF\r\n\r\n* Update FindLibELF\r\n\r\n* Create FindElfutils\r\n\r\n* Update FindLibDebuginfod\r\n\r\n* Update DyninstElfUtils\r\n\r\n* Update the CMakeLists to use new targets\r\n\r\n* Use CMP0074 in updated Find modules\r\n\r\nThis enables use of <Package>_ROOT variables when find_package is\r\ninvoked.\r\n\r\n* Provide default dummy interface target for ElfUtils::ElfUtils\r\n\r\nNeeded for non-Unix platforms.\r\n\r\n* Fix rebase bug in CMakeLists.txt\r\n\r\n* Export DyninstElfUtils\r\n\r\n* Forward QUIET flag to pkg_check_modules\r\n\r\n* Forward version to pkg_check_modules\r\n\r\n* Use lib from pkg-config, if found\r\n\r\n* Clean up internal variables\r\n\r\n* Simplify cache variable handling\r\n\r\n* Use full linkage name for libs returned by pkg-config\r\n\r\n* Separate out dependent libraries in FindLibDW\r\n\r\nSome platforms include libelf as a dependency, but IMPORTED_LOCATION accepts only a single entry. Store the rest in IMPORTED_LINK_DEPENDENT_LIBRARIES.\r\n\r\n* Fix quoting bug in FindLibDW\r\n\r\n* Fix lib check in FindLibDW\r\n\r\n* Manually set PC_<XXX>_INCLUDE_DIRS when FindPkgConfig misses it\r\n\r\nFindPkgConfig uses the output from pkg-config --cflags-only-I <lib> to set PC_<XXX>_INCLUDE_DIRS. Because libelf is usually in a system directory, pkg-config will return nothing for this. FindPkgConfig stores the actual includedir variable from the PC file, so we can fetch it from there.\r\n\r\n* Libiberty cmake modernization (#1334)\r\n\r\n* LibIberty cmake modernization\r\n\r\n* Use INCLUDE_DIRS directly\r\n\r\n* Threaddb cmake modernization (#1338)\r\n\r\n* Update FindThread_DB\r\n\r\n* Update thread_db\r\n\r\n* Update docs URL\r\n\r\n* Use OpenMP target (#1339)\r\n\r\nThis also provides a dummy target so we don't have to do any additional checking when USE_OpenMP=OFF. We only use OpenMP_CXX, so I didn't create a target for the other languages (C,Fortran).\r\n\r\n* Valgrind cmake modernization (#1340)\r\n\r\n* Update valgrind\r\n\r\n* Add version check in Find module\r\n\r\n* Remove Valgrind_LIBRARIES\r\n\r\nThey are versioned by architecture, so are hard to nail down with\r\nfind_library. We also don't need them (at least not yet).\r\n\r\n* Make dummy when ADD_VALGRIND_ANNOTATIONS=OFF\r\n\r\n* Add compile defs\r\n\r\n* Update CMakeLists.txt\r\n\r\n* Make the dummy IMPORTED\r\n\r\n* Fix bug with version handling in DyninstBoost\r\n\r\n* Use _min_version in DyninstBoost\r\n\r\nThis is so the CI version check will work uniformly\r\n\r\n* Add existence check for Dyninst::Boost before creating target\r\n\r\n* Clean up find_package flag handling in Find modules\r\n\r\n* Make variable exports uniform across Find modules\r\n\r\n* Coalesce calls to set_target_properties in Find modules\r\n\r\n* Fix bug in DyninstElfutils when calling find_package LibDebuginfod\r\n\r\n* Make just one exported target in FindElfutils\r\n\r\n* Add target existence check in DyninstTBB\r\n\r\n* Add SYSTEM property to Elfutils includes\r\n\r\n* Remove export of DYNINST_LIBRARIES\r\n\r\n* Preserve user's module path when looking for Dyninst modules\r\n\r\n* Manually set legacy DYNINST_INCLUDE_DIR\r\n\r\nThis is now deprecated.\r\n\r\n* Use CMAKE_CURRENT_LIST_DIR intead of DYNINST_CMAKE_DIR\r\n\r\n* Install Find modules for third-party libraries\r\n\r\n* Remove unused DyninstConfigVersion.cmake\r\n\r\n* Remove unneeded comments in DyninstOptions\r\n\r\n* Move all options to DyninstOptions\r\n\r\n* Remove modification of CMAKE_CONFIGURATION_TYPES\r\n\r\nWe just support the usual configs.\r\n\r\n* Move Dyninst version strings to base CMakeLists.txt\r\n\r\n* Move internal includes into base CMakeListst.txt\r\n\r\nThis ensures that all user options and internal settings are in place\r\nbefore third-party dependencies are configured.\r\n\r\n* Clean up 3rd party includes in base CMakeLists.txt\r\n\r\n* Remove unused version strings\r\n\r\n* Remove unneeded 'add_dependencies(common boost)' in base CMakeListst.txt\r\n\r\nThis is now handled directly in CMake recipe for common.\r\n\r\n* Remove unused testsuite include in base CMakeLists.txt\r\n\r\n* Update the project declaration\r\n\r\n* Move setting of CMAKE_BUILD_TYPE to base CMakeLists.txt\r\n\r\nThis keeps all CMake-level variables in one place.\r\n\r\n* Don't set CMAKE_EXPORT_COMPILE_COMMANDS\r\n\r\nThe user should set this.\r\n\r\n* Move BUILD_SHARED_LIBS into base CMakeLists.txt\r\n\r\n* Remove unused INSTALL_DOC_DIR\r\n\r\n* Make cmake_minimum_required a FATAL_ERROR\r\n\r\n* Move rpath and shared lib settings into DyninstLibrary\r\n\r\n* Move installation items into DyninstInstall.cmake\r\n\r\n* Automatically generate DyninstConfigVersion.cmake\r\n\r\n* Use configure_package_config_file to generate DyninstConfig.cmake\r\n\r\nThis will provide more utilities to make a more robust Config.cmake\r\n\r\n* Use INSTALL_INCLUDE_DIR to set DYNINST_INCLUDE_DIR\r\n\r\n* Use PACKAGE_INIT in Config.cmake.in\r\n\r\nAlso use it for DYNINST_INCLUDE_DIR\r\n\r\n* Don't explicitly set Dyninst_FOUND\r\n\r\nThe caller's find_package will do this.\r\n\r\n* Remove unused DyninstSystemPaths.cmake\r\n\r\n* Simplify visibility settings and move to DyninstLibrary\r\n\r\n* Move SYMREADER calculation to base CMakeLists.txt\r\n\r\nIt is needed in several places before DyninstLibrary is included.\r\n\r\n* Merge platform calculations into a DyninstPlatform.cmake\r\n\r\n* Remove DyninstVisibility include\r\n\r\n* Moved configure_file back to base CMakeListst\r\n\r\nThe ordering matters until common gets an explicit list of header files (currently uses a glob).\r\n\r\n* Remove DyninstConfigVersion.cmake.in\r\n\r\nThis isn't needed anymore since the version file is generated automatically.\r\n\r\n* Remove custom target install\r\n\r\ncmake_install.cmake isn't intended to be used that way.\r\n\r\n* Remove install logic from dyninst_library\r\n\r\nThat is now handled in DyninstInstall.\r\n\r\n* cmake-format: set tab size to 2\r\n\r\n* cmake-format: don't format comments\r\n\r\n* Calculate platform from CMake-provided mechanisms\r\n\r\nThese are equivalent to the existing bash, but more adaptable.\r\n\r\n* Map stringy names into CMake variables\r\n\r\n* Replace Windows platform check with DYNINST_OS_Windows\r\n\r\n* Replace Linux platform check with DYNINST_OS_Linux\r\n\r\n* Replace FreeBSD platform check with DYNINST_OS_FreeBSD\r\n\r\n* Replace x86 platform check with DYNINST_OS_x86_64\r\n\r\n* Replace ppc platform check with DYNINST_ARCH_ppc64le\r\n\r\n* Replace aarch64 platform check with DYNINST_ARCH_aarch64\r\n\r\n* Replace mangled platform checks with explicit DYNINST_{OS,ARCH}\r\n\r\n* Rename PLATFORM to DYNINST_PLATFORM and export it as legacy\r\n\r\nThis is only used in the test suite.\r\n\r\n* Don't pass -m64 explicitly on ppc64le\r\n\r\nWe only support 64-bit ppc, so this is redundant and non-portable.\r\n\r\n* Remove commented-out define for aarch64\r\n\r\n* Simplify CapArchDef\r\n\r\nWith the new variables, only one pass over the OS names is needed.\r\n\r\n* Allow FreeBSD to build on i386\r\n\r\nI previously thought it was only allowed on x86_64, but there is an old platform called i386-unknown-freebsd7.2.\r\n\r\n* Add Windows to DYNINST_PLATFORM\r\n\r\n* Replace usage of WIN32 with DYNINST_OS_Windows\r\n\r\n* Replace usage of UNIX with DYNINST_OS_UNIX\r\n\r\n* Merge Linux+FreeBSD checks into UNIX check\r\n\r\n* symtabAPI - replace i386 check\r\n\r\n* Use 'option' instead of 'set(... CACHE ...)'\r\n\r\n* Deprecate STERILE_BUILD\r\n\r\n* DyninstOptions - use 'OFF' instead of 'NO'\r\n\r\n* Get rid of dyninst_link_private_library\r\n\r\nWe require CMake >= 3.13.0 so this is no longer needed.\r\n\r\n* Rename SOVERSION to DYNINST_SOVERSION\r\n\r\nSOVERSION is a keyword.\r\n\r\n* Replace LIBVERSION with DYNINST_LIBVERSION\r\n\r\nFor clarity and consistency.\r\n\r\n* Replace DYNINST_ROOT with PROJECT_SOURCE_DIR\r\n\r\n* Move library settings into DyninstLibrarySettings.cmake\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR absolute\r\n\r\nIn 'install', they are relative to CMAKE_INSTALL_PREFIX by default.\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR cache variables\r\n\r\nThere's no need to let the user modify these locations.\r\n\r\n* DyninstLibrarySettings - reuse INSTALL vars\r\n\r\nThis just makes sure changes are propagated.\r\n\r\n* DyninstLibrarySettings - remove INSTALL_BIN_DIR\r\n\r\nIt's not used.\r\n\r\n* DyninstLibrary - rename INSTALL_*_DIR -> DYNINST_INSTALL_*DIR\r\n\r\nThis is more in line with the naming convention of GNUInstallDirs. We\r\ncould use GNUInstallDirs directly, but there's no need to let the user\r\nconfigure the install directory layout.\r\n\r\n* DyninstLibrarySettings - Use 'Dyninst' instead of PROJECT_NAME\r\n\r\nThis is the only placed PROJECT_NAME is used, so make it consistent.\r\n\r\n* DyninstLibrarySettings - update RPATH handling\r\n\r\n* DyninstLibrary - don't manually create cmake_install.cmake\r\n\r\nThese are automatically created and installed by 'install'.\r\n\r\n* DyninstLibrary - Merge calls to set_target_properties\r\n\r\n* DyninstLibrary - Cleanup superfluous variable usage\r\n\r\n* DyninstLibrary - add Windows defines to targets instead of directories\r\n\r\n* DyninstLibrary - add LIGHTWEIGHT_SYMTAB, SW_ANALYSIS_STEPPER to targets\r\n\r\n* DyninstLibrary - add DYNINST_DIAGNOSTIC_NO_SUPPRESSIONS to targets\r\n\r\n* DyninstLibrary - export all targets to DyninstTargets.cmake\r\n\r\n* DyninstLibrary - don't treat each library as a separate component\r\n\r\n'COMPONENT' in 'install' is used to group targets into \"bags\" of useful\r\nfeatures that can be independently installed using cmake --install .\r\n--component .... That doesn't work for Dyninst. Note: This is\r\northogonal to the concept of a COMPONENT in find_package.\r\n\r\n* DyninstLibrary - remove CLEAN_DIRECT_OUTPUT\r\n\r\nWe no longer offer per-library build targets.\r\n\r\n* DyninstLibrary - remove WITHOUT_SYMTAB_API and WITHOUT_SYMLITE\r\n\r\nThese are never used.\r\n\r\n* DyninstLibrary - refactor global defines in 'dyninst_library'\r\n\r\n* DyninstLibrary - Move calculation of SYMREADER\r\n\r\n* DyninstLibrary - rename 'target' to '_target'\r\n\r\n'target' is a keyword\r\n\r\n* DyninstLibrary - add named arguments\r\n\r\n* DyninstLibrary - rename SRC_LIST with _target_SOURCE_FILES\r\n\r\nThe latter is created from the named argument 'SOURCE_FILES'.\r\n\r\n* DyninstLibrary - Replace ACTUAL_TARGETS with _all_targets\r\n\r\n* DyninstLibrary - make headers part of library declaration\r\n\r\nThis tracks file changes to signal rebuilds.\r\n\r\n* DyninstLibrary - add links, properties, includes to all targets\r\n\r\nThis synchronizes the SHARED and STATIC libraries.\r\n\r\n* DyninstLibrary - link private and public deps separately\r\n\r\n* DyninstLibrary - Set include directories on interfaces\r\n\r\nThis replaces using PUBLIC_HEADERS which is really intended for use with\r\nMacOS Framework targets.\r\n\r\n* DyninstLibrary - remove LIBRARY_OUTPUT_DIRECTORY\r\n\r\nThe default is CMAKE_CURRENT_BINARY_DIR, so no need to specify it.\r\n\r\n* DyninstLibrary - Apply DEFINES passed to dyninst_library\r\n\r\n* DyninstLibrary - make SHARED library explicit\r\n\r\n* DyninstLibrary - don't deref Boolean variable\r\n\r\n* DyninstLibrary - update message\r\n\r\n* DyninstLibrary - Install headers, preserving the directory structure\r\n\r\n* DyninstLibrary - \"return\" the list of generated target names\r\n\r\n* DyninstLibrary - add directory-level include guard\r\n\r\n* common - remove spurious files\r\n\r\nAdded in 2015.\r\n\r\n* common - move generation of dyninstversion.h into CMakeLists.txt\r\n\r\n* common - add global include guard in CMakeLists\r\n\r\n* common - explicitly list header files in CMakeLists\r\n\r\nThis makes it easier to see what the actual public files are.\r\n\r\n* common - refactor source list calculation\r\n\r\n* common - move include of DyninstLibrary into subdirectory\r\n\r\n* common - use new dyninst_library\r\n\r\n* common - set includes and Windows stuff on all targets\r\n\r\n* common - write 'dyninstverison.h' into source dir\r\n\r\n* elf - make a dummy target for non-Unix OSes\r\n\r\n* elf - use new dyninst_library\r\n\r\n* dwarf - use new dyninst_library\r\n\r\nThe changes here are the same as for elf/CMakeLists\r\n\r\n* symlite - make symlite/h/SymLite-elf.h publicly consumable\r\n\r\nIt refers to files in the build tree that aren't available in the\r\ninstall tree. Although this file is in the install tree, it was never\r\nconsumable by users. Updating this is of questionable utility, but it at\r\nleast gives us the opportunity to write tests against the public\r\ninterface.\r\n\r\n* symlite - use new dyninst_library\r\n\r\n* instructionAPI - use new dyninst_library\r\n\r\n* symtabAPI - use new dyninst_library\r\n\r\n* proccontrol - use new dyninst_library\r\n\r\n* parseAPI - use full path to common/h/util.h.\r\n\r\nThis prevents confusion with parseAPI/h/util.h.\r\n\r\n* parseAPI - use new dyninst_library\r\n\r\nThis one is different from the rest because parseAPI and dataflowAPI\r\nhave circular dependencies on each other, so it's not currently possible\r\nto split them up.\r\n\r\n* stackwalk - use new dyninst_library\r\n\r\nPreviously, FORCE_FRAME_POINTER was applied to _all_ of Dyninst. The\r\ncommit comments said it was supposed to be just for the stackwalk\r\nsources, so that is the new behavior.\r\n\r\n* stackwalk - incorporate check of SW_ANALYSIS_STEPPER\r\n\r\nIt only affects stackwalk, so no need to put it on all of the targets.\r\n\r\n* stackwalk - put SW_ANALYSIS_STEPPER check in post-processing\r\n\r\nThis tidies up the code a bit.\r\n\r\n* patchAPI - use new dyninst_library\r\n\r\n* dyninstAPI - use absolute include path for 'debug.h'\r\n\r\n* dyninstAPI - add missing include for Dyninst::Address\r\n\r\nThis was transitively included, but breaks when reording includes.\r\n\r\n* dyninstAPI - add missing include for std::set\r\n\r\n* dyninstAPI - use new dyninst_library\r\n\r\n* dynC_API - use new dyninst_library\r\n\r\n* parseThat - use new dyninst_library\r\n\r\n* dyninstAPI_RT - use new dyninst_library\r\n\r\n1. SRC_ASSEMBLY was never used. The assembly files have always been\r\nexplicitly listed.\r\n\r\n2. We are still linking libdl.so on the static versions of the runtime.\r\nThis hasn't been an issue in the past, so we'll leave it.\r\n\r\n3. The creation of the lists of source files has redundant checks in it,\r\nbut this version is much clearer on what is actually happening.\r\n\r\n4. CHECK_C_COMPILER_FLAG_EXTENDED was removed since CMake now supports a\r\nmuch larger set of compilers and Dyninst has dropped support for HP,\r\nSun, and XL.\r\n\r\n5. The config is much less noisy. There was no reason to determine if\r\n32-bit support would work when the user didn't ask for it. Now, the\r\nconfig will fail if the user asks for 32-bit libraries and the compiler\r\ncan't create them.\r\n\r\n* Remove top-level project includes\r\n\r\nAll of the necessary includes are now handled by each toolkit via\r\nexplicit import/export of targets and include directories.\r\n\r\n* Remove top-level check for SYMREADER\r\n\r\nThe respective CMakeLists now handle this.\r\n\r\n* Add better handling of Threads/pthread\r\n\r\n1. Move Threads include into a tpls module\r\n\r\n2. Link against Threads::Threads instead of 'pthread'\r\n\r\n3. Add explicit dependencies in dyninstAPI and dyninstAPI_RT (they were\r\nimplicit before).\r\n\r\n* DyninstConfig - Correctly detect presence of COMPONENTS on import\r\n\r\nThis previously didn't work at all because DYNINST_${COMP}_FOUND should\r\nhave been spelled Dyninst_${COMP}_FOUND. This is simpler and allows the\r\nuse of check_required_components directly.\r\n\r\n* DyninstConfig - Remove unneeded and (now) incorrect comments\r\n\r\n* Make an OpenMP tpl module\r\n\r\nThis will make it easier to export OpenMP in DyninstConfig. It also makes CMakeLists.txt have just straight-line code.\r\n\r\n* Include all third-party libraries in DyninstConfig\r\n\r\nThis is explicitly required by the CMake documentation:\r\n\r\n  \"All required dependencies of a package must also be found in the\r\npackage configuration file.\"\r\n\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nThis also ensures that the custom Dyninst:: targets are always available\r\nto consumers.\r\n\r\n* Ensure static libraries depend on static Dyninst libraries\r\n\r\nWhen creating a static Dyninst library, ensure that it depends on the\r\ncorresponding static Dyninst library. For example, libDynElf.a should\r\ndepend on libcommon.a, not libcommon.so.\r\n\r\n* DyninstWarnings - Ignore no-pragma warnings for non-Werror builds\r\n\r\n* DyninstCapArchDef - rename UNIFIED_DEFINES\r\n\r\nDYNINST_PLATFORM_CAPABILITIES is more descriptive.\r\n\r\n* DyninstCapArchDef - add include guard\r\n\r\n* DyninstLibrary - add DYNINST_PLATFORM_CAPABILITIES to all targets\r\n\r\n* DyninstLibrary - add documentation\r\n\r\n* DyninstLibrary - update comment about install dir structure\r\n\r\n* DyninstLibrary - install runtime in 'bin'\r\n\r\n* Include 'src' and 'h' subdirectories in BUILD_INTERFACE\r\n\r\nEvery toolkit has a similar directory structure, so we can do this\r\nin just one location instead of in each CMakeLists.\r\n\r\n* Unswitch loops for platform-specific target updates in CMakeLists\r\n\r\nThis is really a code beautification.\r\n\r\n* Remove DYNINST_LIBVERSION\r\n\r\nIt's never different from DYNINST_VERSION and has no special purpose.\r\n\r\n* Remove system path detection in RPATH calculations\r\n\r\nWe use CMAKE_BUILD_WITH_INSTALL_RPATH to ensure the install path is not\r\nin RPATH/RUNPATH, but then this code would add it back if the install\r\ndirectory isn't a system path.\r\n\r\n* DyninstLibrary - simplify regex for header install\r\n\r\n* Rename cmake/version.h.in to cmake/dyninstversion.h.in\r\n\r\nThis makes the generated file match the generator file name.\r\n\r\n* DyninstLibrary - install from _target_PUBLIC_HEADER_FILES\r\n\r\n_public_headers was only incidentally present from the file including\r\nthis one.\r\n\r\n* parseAPI - make headers PRIVATE in dyninst_library\r\n\r\nWe manually install them because of how dataflowAPI is consumed.\r\n\r\n* Issues warning when toolkit cannot be built with LIGHTWEIGHT_SYMTAB\r\n\r\n* CMake modernization - update compiler flags (#1374)\r\n\r\n* Fix spelling of LibDW_INCLUDE_DIRS when marking it as advanced\r\n\r\n* Mark STERILE_BUILD as advanced\r\n\r\n* Mark Boost_DIR as advanced\r\n\r\n* Mark TBB_DIR as advanced\r\n\r\n* Mark Thread_DB_{INCLUDE_DIRS,LIBRARIES} and as advanced\r\n\r\n* Update README\r\n\r\n* Add gfx908 public headers\r\n\r\nThese somehow didn't make it through the rebase\r\n\r\n* Make flags for RelWithDebInfo and Release match\r\n\r\n* Disable cmake-format for extra flags in DyninstWarnings\r\n\r\n* Propagate ElfUtils_ROOT_DIR to FindLib{ELF,DW,Debuginfod}\r\n\r\n* Use 'set' instead of 'option' for stringy options\r\n\r\n* Add more cmake-format exceptions in DyninstWarnings\r\n\r\n* Add <Package>_NO_SYSTEM_PATHS to elf, dw, debuginfod\r\n\r\nThis is used to exclude system directories from the search process.\r\n\r\n* Have ElfUtils_ROOT_DIR override search paths\r\n\r\nIf the user provides a value, then no system paths (aside from the ones\r\nin CMAKE_PREFIX_PATH) are searched. This lets the user 'force' a\r\nlocation for elfutils.\r\n\r\n* Remove explicit version fail check in elfutils find-modules\r\n\r\n* Move ElfUtils_ROOT_DIR check into DyninstElfutils\r\n\r\n* Add LibIberty_NO_SYSTEM_PATHS\r\n\r\n* Add Valgrind_NO_SYSTEM_PATHS\r\n\r\n* Remove explicit version check from FindValgrind\r\n\r\n* Boost - use new meaning of Boost_ROOT_DIR\r\n\r\n* Fix typo in DyninstElfUtils\r\n\r\n* Fix bug when setting path flags\r\n\r\n* TBB - use new meaning of TBB_ROOT_DIR\r\n\r\n* Add support for common/h/unaligned_memory_access.h\r\n\r\n* Set default DYNINST_LINKER to empty\r\n\r\nThis will use the default linker. lld is the LLVM linker.\r\n\r\n* Make requesting an unknown component an error\r\n\r\n* Always build libdyninstAPI_RT.a\r\n\r\nThis is always needed by the test suite and keeps the old behavior of having it built by default.\r\n\r\n* Add DYNINST_FORCE_RUNPATH option\r\n\r\nSetting this flag forces the linker to use RUNPATH instead of RPATH.\r\nThis is most useful for working with older RedHat distros.\r\n\r\n* Reduce number of public link dependencies\r\n\r\nThis reduces the number of transitive links that have to be done by\r\nbinaries linking against Dyninst.\r\n\r\n* Make elfutils dependency public for symtab\r\n\r\nIt's needed in the Module.h public header.\r\n\r\n* Require TBB >=2019.9\r\n\r\nWhen building from source, versions before 2019.9 incorrectly set the\r\nversion in TBBConfigVersion.cmake. For example, 2018.6 sets the version\r\nto 2018.0 because it uses the TBB_{MAJOR,MINOR}_VERSION from tbb_stddef.h\r\ninstead of doing the calculation based on the engineering version.\r\n\r\nThis also unifies the versions required when compiling with gcc and clang.\r\n\r\nTBB 2018.6 was released in Oct 2018 and 2019.9 was released in Oct 2019,\r\nso this just bumps the requirement by just a year even though there are\r\nat least 9 releases in between.\r\n\r\n* Update Boost version in docker/dependencies.versions\r\n\r\n* Update filenames in dependency-version CI check\r\n\r\n* Update variable names in dependency-version CI check\r\n\r\n* Make elfutils dependency public for dynElf\r\n\r\n* bump CMake minimum version to 3.14.0\r\n\r\nThe 3.13.* family requires every 'install' to specify a \"LIBRARY\r\nDESTINATION\". We don't need or want that in the custome parseAPI install\r\n(line ~130) for exporting the public headers.\r\n\r\n* Add cmake to dependency-version CI check\r\n\r\n* Rename cdna2 -> gfx90a in new layout\r\n\r\n* Always create list of static-only sources in dyninstAPI_RT\r\n\r\n* Add common/h to BUILD_INTERFACE in 32-bit libdyninstAPI_RT\r\n\r\n* Fix building with symLite\r\n\r\nThe headers from symtabAPI are still required, even when building with symLite.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e93225713b1633a7bf6ff0d9a89c409db802173", "commit_date": "2023-04-21T19:58:43Z", "commit_message": "Add callback for parsing unknown instructions (#1276)\n\n* Add callback declarations for unknown instructions in InstructionDecoder\r\n\r\n* Update definition of callback interface\r\n\r\nThis also makes 'unknown_instruction' inconstructible.\r\n\r\n* make isValid the same as isLegalInsn\r\n\r\nThis makes it impossible to make an Instruction object from a failed\r\ndecoding process. This only affects x86.\r\n\r\n* Detect illegal instructions sooner in doIA32Decode\r\n\r\n* Don't advance the buffer when an x86 decode fails\r\n\r\n* Use a ternary to avoid linker error on some gcc's\r\n\r\nSome versions of gcc don't inline std::min _and_ need to resolve maxInstructionLength.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "308bddcb75de5df8e18d7b5af62602d9f5f818a0", "commit_date": "2023-04-20T21:01:50Z", "commit_message": "Update GFX90A Decoder  ISA-SPEC(02/22/23) (#1407)\n\nUpdate implementation for AMDGPU GFX90A based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. case label in amdgpu_gfx90a_decoder_impl.C made sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44e3bb530ccb4228588bd17635eaf77cdf5365e1", "commit_date": "2023-04-20T21:01:37Z", "commit_message": "Update GFX908 Decoder ISA-SPEC(02/22/23) (#1408)\n\nUpdate implementation for AMDGPU GFX908 based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions (dsmem)\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. Make case label in amdgpu_gfx90a_decoder_impl.C sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c401cd675058af5e873f4763a6f133fd11938ce", "commit_date": "2023-04-20T21:00:54Z", "commit_message": "Add CI workflow to build consumers of Dyninst (#1412)\n\n* Add CI workflow to build consumers of Dyninst\r\n\r\n* Build with cron", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25b37343f2f115298bd82eecf579bc3baf06b5ba", "commit_date": "2023-04-20T20:55:59Z", "commit_message": "CI workflow to build from spack (#1411)\n\n* CI workflow to build from spack\r\n\r\n* Update cron to every Sunday at 3AM\r\n\r\n* Force use of intel-tbb\r\n\r\nDue to explicit conflicts in the recipe, spack uses intel-parallel-studio which can't be used in automated builds because it prompts the user to accept a license agreement\r\n\r\n* Switch to weekly cron schedule", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0885301c49db8cfc286f41003a558005c9c7ace6", "commit_date": "2023-04-05T13:30:47Z", "commit_message": "Rename Architecture AMDGPU_CDNA2 to AMDGPU_GFX90A (#1404)\n\nRename the Architecture Arch_amdgpu_cdan2 to Arch_amdgpu_gf90a,\r\nas recommended by the vendor.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2f7af10477b0f7daf0efca2c992224711e5deb27", "commit_date": "2023-04-04T02:12:02Z", "commit_message": "Fix link bug in insnCodeGen::loadImmIntoReg on aarch64 (#1405)\n\n* Fix link bug in insnCodeGen::loadImmIntoReg on aarch64\r\n\r\nThe function template has a separate declaration and \"definition\" AND is\r\ncalled from translation units where neither is located. This only happens\r\nto work correctly when the TUs are linked in a specific order.\r\n\r\n* Remove assert\r\n\r\nThe value is now always positive.\r\n\r\n* Remove missed template usage in emit-aarch64.C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a86894f3d9120883ed4c0cf4278287c8bb43ed73", "commit_date": "2023-03-30T20:00:03Z", "commit_message": "remove unneeded zero length files (#1403)\n\n- two old commits (accidentally?) committed zero length files that\r\n  seem to serve no purpose", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1ddebd3125437d3385e65a7cce5bea715588028", "commit_date": "2023-03-23T14:25:12Z", "commit_message": "Fix UB in dwarf/dwarf_subrange.cpp::get_type (#1402)\n\nThe dwarf_* functions return a pointer to their last argument. This causes 'get_type' to return a pointer to a local variable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e952a0dfc13dbb7d665219a672733a505ee2a00", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  stack frame larger than (#1397)\n\n- increase stack frame size warning limit another 1000 bytes for\n  power_opcode_tables.C for RELEASE builds using the clang compiler", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683c85c7ef35d0afe6188271c8f697f6f839e12d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameter (conditionally) (#1397)\n\n- Add macro DYNINST_SUPPRESS_UNUSED_VARIABLE to suppress\n  warnings about unused variables\n\n- use macro to suppress function parameter that is only unused\n  when building on aarch64 and hence cannot be commented out", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "309d167d291f69d0ba9d4671ca581d6d24bf95e0", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "fix broken call to base class function (#1397)\n\n- SgAsmBinaryMultiply::get_type() rose results in infinite recursion\n  as casting the pointer to the base class and calling a function\n  still calls the derived version.  Just call the base class's function\n\n- rewrite SgAsmBinaryAdd::get_type the same way; it was not broken\n  but was convoluted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f57a5cbdfa98333527466423cbc32224874fa81", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "enable warnings in dataflowAPI/src (#1397)\n\n- separate dataflowAPI/src and dataflowAPI/rose source files\n\n- undo disabling warnings for dataflowAPI/src files\n\n- only include ABI.C as a source file once", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "766c7fad0f9f25bc5505f55a88c4f370b0f2cc69", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variable (clang compiler bug) (#1397)\n\n- add suppressions around code that contains a lock using RAII;\n  clang prior to version 10 contains a bug where it does not\n  recognized that the ctor and dtor make the variable used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e86fb6e232b370a66f407f9a0af440134bff147", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  suppress VLA warning (#1397)\n\n- Rose uses a VLA in C++ which is non-standard; for now suppress the\n  diagnostic\n\n- clang requires disabling both -Wvla and -Wvla-extension\n\n- gcc <9, 11.0 and 11.1 has a bug that requires the suppression to\n  to not be in the same macro as VLA itself", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89b22e23d4abcf48a2b1d3dd0f1ce294b4bb6260", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1397)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f7ed33ed9fac49623fea5ed2743462d8c31a062", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  missing noexcept (#1397)\n\n- declare function noexcept to allow potential optimization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "61faa14906eb2a7543867f4cb66643783ba41323", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  deprecated implicit ctor and op= (#1397)\n\n- add explicit copy ctors and operator=,\n  or delete dtor where it could be defaulted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa4713e0f2f063362a496ed03d0d0d65ff43d037", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (delete variable) (#1397)\n\n- remove variables and their initializatins that shadow a variable in\n  the enclosing scope as they were initialized with the same value", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1caea03054dbd73178ea2f40e2ca3474ff9c82e6", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (rename) (#1397)\n\n- rename names that shadow a name in an enclosing scope or class with\n  a unique name", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a309c63953a845f2d0c6e24f3bc3c4d117ef9006", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  potentially evaluated expression (#1397)\n\n- replace use of typeid(expr) where expr executes code at run-time\n  with a dynamic_cast that is obvious that it executes code at\n  run-time", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "412071df5285ecb872abaa966ae4ebb81c733573", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  overloaded virtual overrides (#1397)\n\n- import the name of the base class's virtual function(s) that were\n  overridden in the derived class to prevent hiding of the base class's\n  functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a720e99d94bfb01de40488d5dae8b45645fb284e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  copy ctor missing base class (#1397)\n\n- call the base class's copy constructor in the derived class's\n  copy constructor", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "336409431b648c18c7b51ec1c3135489f82ab7ce", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  case fallthough (#1397)\n\n- add break statement or DYNINST_FALLTHOUGH macro where a switch\n  case falls through to the next case", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "476ba11cf828964579d40a26b21e4b0eb808d560", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  printf format related (#1397)\n\n- add printf-format annotation on dataflow printf function parameter\n\n- fix format string to match parameter types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a15d069e2ce6340396e71bc283f0ac2377b4da6e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  reorder ctor initialization list (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f13b79c36af349203bddba40757b82a1206de42d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  const correctness (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b880173dc64d2d1f07e4d41b4796eac3d14873fe", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variables (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "951ebb64db730f7497ce886e8634aaa3da3cc5e7", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameters (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e9a4b86d2adbe3763fad3df38f85ac92959e26c", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  variadic macro (#1397)\n\n- replace non-standard variadic macro syntax with standard syntax\n\n- remove preprcessor check to use variadic macros if the compiler is\n  gcc;  all compilers support them", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42223b1f9118e32fe145a85a13ced32c13cd5871", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  extraneous semicolons (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ebf545849ef979aaa21bf82e8caff104cbeb6f6", "commit_date": "2023-03-15T13:47:22Z", "commit_message": "Github CI: update dev container deployment (#1400)\n\n* Log in to GHCR before building\r\n* Pull base image for cache", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab965c214b030a302aa0307b121cb9d06ab0a989", "commit_date": "2023-03-15T12:39:13Z", "commit_message": "Github CI: add line continuation in dev-containers.yaml (#1399)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f5558a15b16272eef982b5e8ddfdf172eb59036", "commit_date": "2023-03-15T12:23:31Z", "commit_message": "Add PR testing Github CI (#1393)\n\nRun on pull request to master:\r\n\r\n    Enforce formatting of CMake files, if modified\r\n    Check for changes in minimum required versions of dependencies\r\n    Ensure Dyninst, test suite, examples, and external tests all build with gcc on Ubuntu-20.04\r\n\r\nRun on push to master:\r\n\r\n    Build and deploy new dev container, ghcr.io/dyninst/amd64/<OS>:latest", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e7aa66ddef6768957faae3c62c9909590663901", "commit_date": "2023-03-09T20:15:45Z", "commit_message": "Replace 'cerr' with 'dwarf_print' in DwarfWalker::decodeLocationList (#1395)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1157c87c0b184d83e851bdd5b63582dd2a7647cf", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy with user dtor (#1394)\n\n- Make classes move-only by removing public copy constructor and\n  operator= as they contained pointer members that were just copied\n  (with no semantics of copying the data). This is a double delete\n  waiting to happen.  Luckily the pointer were always nullptr when the\n  copy constructor was called.\n\n- add move constructor (using std::move where appropriate)\n\n- clean up the classes to use default constructors and default member\n  initialization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1aeb249ff90fea49dc50efea1e6c11577bf9d90", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unneeded internal declaration (#1394)\n\n- clang warns of an unneeded internal declaration for yyinput. Since\n  yyinput is generated by flex, just suppress it for the whole file.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7cd7cdb0ba98de24b0d916b8e440db8adb0af6f9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (derived) (#1394)\n\n- Derived type classes have an operator==(const Type&) const, and they\n  call this operator with with both the lhs and rhs being the derived\n  class type.  This is ambiguous when using C++ 20's rule that considers\n  the parameters reversed.  Fix by adding an inlined non-virtual\n  operator== that takes the derived types a parameter and then\n  unambiguously calls the existing ==", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12a4fd86738c048dd82c20c31359cf7a48c082eb", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  stack frame larger than (#1394)\n\n- increase stack frame size warning limit when using the clang compiler\n  for a couple of files that needed a similar increase for gcc", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b78e883c77aefc27d1a30722b414266aa33897d1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  logical op (#1394)\n\n- add suppressions for identical clauses of a logical operator\n  even if they are only identical after evaluating constant\n  expressions that are not identical as gcc 8 and prior warn\n  about this\n\n- Suppression for these are already in place for warnings in adjacent\n  if statements, so extend the suppression to cover these also", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9dbc1e30e30ef263b174d1d2b5ca648e8ef6bf0d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  C function decls without prototype (#1394)\n\n- C functions declared as func() are a declaration without a prototype\n  (from the original K&R C), not a function that takes no parameters\n  (until C23), change all of these to func(void) which is how to\n  declare such a function in C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a2e3fd795f8ec6cb730038ec277431b0832c03c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  set but unused variables (#1394)\n\n- delete variables whose only use is to increment themselves", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6e380f7158326fc686f1b3f7ec7a01b3ac4bfe2", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (#1394)\n\nC++ 20 considers the reversed parameter of a comparison operators in\naddition to the given parameter order.  This implies that if the\nargument is const then the member function must also be const.\n\n- change    bool operator==(const T&)\n      to    bool operator==(const T&) const", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57fe4c395dff4fd11f18d2f00eb58ad25212501", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::random_shuffle is deprecated (#1394)\n\n- replace std::random_shuffle with std::shuffle", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "706fd0e3c532a3d7cfc1d752620ebed2fac65c5d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing noexcept (#1394)\n\n- declare functions noexcept", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "55d8a338e362d3aa4448aa9bae776eb90ca1292a", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1394)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b977e8d7132b312c853652a1e7e6f28eb39dbab0", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unused private field (#1394)\n\n- removed myid member from dyn_thread as it is never used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0eb0b29def9cc2d18e0fe724e536c73e7e9ef964", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy/op= with user provided dtor (#1394)\n\n- Explicitly define the implicit operator or remove the explicit\n  destructor; in C++ 20, if a destructor is explicitly defined then\n  the other constructor, assignment and move operators will not be\n  automatically generated", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9be477535debee15c2403bdc2ddedb31fdf0eb8e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  remove unused variables/members (#1394)\n\n- remove variables that were never used\n\n- remove code that only updated unused variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "344783a7954de9af7f98a5d3f0ec7c505b7536a1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (variables) (#1394)\n\n- rename variables that shadow names in containing scopes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73064a866ee1d19d8e12e2562f60b9b7f8e05406", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (enumerator names) (#1394)\n\nenumerator names shadow names in other scopes\n\n- made 3 internal enum types scoped enums:  StackAccessType,\n  operandType and patch_type_t\n\n- delete one internal and unused enum type:  frameType_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4bf4a24c514d0c395fdd27d6fe68ddf0fef89040", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "replace C-style and functional casts (#1394)\n\n- replace C-style casts ((T)e) and functional casts (T(e)) with modern\n  casts that have a clearer intent and are safer:  static_cast<T>(e),\n  and T{e}.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8d0e2760b307c7d465b56cac639c2e4a2cc93ca8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "write_memory_as to append_memory_as as appropriate (#1394)\n\n- where write_memory also updates the pointer, change then to\n  append_memory_as(...)\n\n- change '*insn++ = <value>' to append_memory_as_byte(...) to\n  be consistent with append_memory_as(...)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c21bd122187e87b74d45a5ba3ec3e3824750f9c3", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (C casts) (#1394)\n\n- fixed increased alignment warnings in C code.  The macro\n  CAST_WITHOUT_ALIGNMENT_WARNING eliminates the warning and allows for\n  future auditing.  For the code as currently written, these are all\n  aligned properly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0eeb1ee0407780ee07f603910d398f836dc2f7", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (pointers) (#1394)\n\n- fix alignment warnings of pointers by using alignas_cast<> defined in\n  common/h/raw_memory_access.h to eliminate the increase alignment\n  warning.  For the code as currently written, these are all aligned\n  properly, but these are inherently unsafe and require manual\n  inspection of the pointers involved.  An assert in alignas_cast can be\n  uncommented to validate proper alignment at runtime.\n\n- explicitly force larger alignment of one variable to eliminate warning", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "285ac938848739e02e38c044cf354dcb9d99f0b9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (#1394)\n\n- Casts of pointers to a type that has a larger alignment requirement\n  will cause an exceptions on some architectures on dereference if the\n  pointer does not meet its alignment requirements.\n\n- Add new template functions read_memory_as and write_memory_as that\n  read and write the bytes of (possibly) unaligned memory of the desired\n  data at the supplied address using the length of the template type in\n  a way that is safe even if the supplied pointer is not properly\n  aligned.\n\n- Add functions append_memory_as; like write_memory_as but updates the\n  pointer value to memory location after the bytes written.\n\n- Add template function alignas_cast to cast a pointer to another\n  pointer without producing an increased alignment warning; requires\n  manual auditing to pointer is properly aligned", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4aff07d1eba822b880558c030c7f5aec94b2ae9c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  pessimizing move (#1394)\n\n- remove unnecessary std::move's", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b88b16dba9477f18fe598fad5552758204a1558e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing override (#1394)\n\n- add override to all overridden virtual methods of a class if present\n  on any method", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84fe176ef5ab61376911570de6b506473a3c8d35", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  tautological always true comparison (#1394)\n\n- value of type unsigned char compared to 256 produces a warning as 256\n  is outside the range of the uint8_t.  256 is the number of array\n  elements (computed using sizeof's).  Changed from (n < numElems) to (n\n  <= numElems - 1) which is also always true, but the error is\n  eliminated due to 255 being within range of a uint8_t.  Ugly but makes\n  the warning disappear.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6b41075d61009b539107836591cb47b8cb3e3c8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  mismatched class/struct (#1394)\n\n- use consistent 'struct' and 'class' keyword between forward\n  declaration and definition; a mismatch is legal be breaks on\n  some versions of MS C++", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9e83871f0380068dba79648c6acee503cac5d76", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  [[fallthrough]] requires C++ 17 (#1394)\n\n- clang's __has_cpp_attribute(fallthrough) feature test macro returns\n  true, but produces warnings if used.  [[clang::fallthough]] works, so\n  force it if the language version is pre-17 with clang compiler.\n\n- fix typo in __cplusplus macro name\n\n- improve robustness: try all alternative fallthrough attributes names", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "067be96bb64a3d4191f12db1694b0fcfec51d457", "commit_date": "2023-03-02T18:41:27Z", "commit_message": "Restore PPC special-purpose registers in opposite order of saving them (#1392)\n\n* Restore PPC special-purpose registers in opposite order of saving them\r\n\r\nThis is the same fix as https://github.com/dyninst/dyninst/pull/1000,\r\nbut for PowerPC.\r\n\r\n* Reverse order of FPSCR restore", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae43ebc6f905345499ed9c55eccb007e9a69efa9", "commit_date": "2023-03-01T23:57:55Z", "commit_message": "Aarch64: Fix restoring special purpose registers order (#1000)\n\nThe special purpose registers are pushed onto the stack by\r\nEmitterAARCH64SaveRegs::saveSPRegisters. This patch reverses the order\r\nused for popping the stored registers from the stack. Without\r\nthis patch, some of the state registers get swapped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46ea3009e1e0e27bd035ac3152dc772bf861f3fd", "commit_date": "2023-03-01T19:33:16Z", "commit_message": "Avoid possible copy in BPatch::createEnum (#1390)\n\nThe Type class doesn't have a user-defined copy constructor and its\r\nimplicit declaration is deprecated in C++20. Rearranging the construction\r\nhere removes the possibility of copying.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f89cc72416fdc1d467b130f48609b8fc93126d37", "commit_date": "2023-02-28T23:54:58Z", "commit_message": "Merge pull request #1389 from dyninst/wuxx1279/gfx908/clang-error\n\nFix ambiguous override of InstructionDecoder_amdgpu_*::makeRegisterExpression", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "557a01949a4c11e8e8975fe113e4ab07b64bf25d", "commit_date": "2023-02-27T21:25:44Z", "commit_message": "add InstructionDecoderImpl::makeRegisterExpression to derived classes\n\nEliminate virtual-overloaded warning as there are 3 overloaded methods of\nInstructionDecoderImpl::makeRegisterExpression, but only 2 are defined in\nthese classes for add a using so the 3rd is not hidden.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42c3a4b497071e421686ded49ad0da406c8053ac", "commit_date": "2023-02-27T20:06:40Z", "commit_message": "Fix virtual derived signature to match base class\n\nmakeRegisterExpression in the derived class had\nan incorrect function signature, which made\ncompilation fails on gcc-6 and clang.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d15c0f714397a1316c74fc8d2c24a62a772ecc3", "commit_date": "2023-02-27T18:39:18Z", "commit_message": "Update DwarfWalker subrange handling (#1369)\n\n* Remove redundant include of libdw.h\r\n\r\n* Add subrange parsing to dynDwarf\r\n\r\n* Remove decipherBound\r\n\r\nThis implementation was neither correct nor complete. Moreover, we\r\nshouldn't be parsing FORM types. Looking for DW_TAG* is sufficient.\r\n\r\n* Remove legacy comments and commented-out code from parseArray\r\n\r\n* Improve error message in parseArray\r\n\r\n* Rename parseSubrangeAUX to parseSubrange and change interface\r\n\r\n* Replace bound calculations in parseSubrange\r\n\r\n* Update some comments and whitespace\r\n\r\n* Update construction of the result type\r\n\r\nThe LONG_MIN/MAX aren't great, but they are propagated to preserve\r\nbehavior.\r\n\r\n* Update debugging messages in parseSubrange\r\n\r\n* Have parseSubrange() call parseSubrange(Dwarf_Die*)\r\n\r\n* Use updated parseSubrange in parseMultidimensionalArray\r\n\r\n* Use std::tostring instead of snprintf\r\n\r\n* Update comments and remove dead code\r\n\r\n* Whitespace\r\n\r\n* parseMDA returns a typeArray instead of just a Type\r\n\r\n* Fix bug in dwarf_result::operator bool\r\n\r\n* Fix hi/low bound mixup in parseMDA\r\n\r\n* Try using Dyninst's parsed CU language, if needed\r\n\r\n* Display subrange DIE ID in pareSubrange\r\n\r\n* Don't create subrange type in parseSubrange\r\n\r\nThis will happen in the callee\r\n\r\n* Update parseSubrange() to use new parseSubrange(Dwarf_DIE*)\r\n\r\n* More carefully parse the child DIE\r\n\r\n* Iteratively parse the subranges in parseArray\r\n\r\n* Whitespace\r\n\r\n* Remove parseMultiDimensionalArray\r\n\r\n* Improve debug messages\r\n\r\n* Register each subrange type in parseArray\r\n\r\n* Remove common/h/dyninstversion.h\r\n\r\nThis was accidentally included.\r\n\r\n* Add copyright notices to new files\r\n\r\n* Make dwarf_result also hold a Dwarf_Word\r\n\r\nC++ doesn't guarantee it is convertible to `long`.\r\n\r\n* Only offer an interface to parse both bounds simultaneously\r\n\r\nThe calculation for a range's upper bound when DW_AT_count is used\r\nrequires knowing the lower bound (if given), so these needed to be\r\nmerged.\r\n\r\n* Use new dwarf_subrange interface in DwarfWalker::parseSubrange", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bfa6e82c2a9ef98801432324ffb3cec2a6254c5", "commit_date": "2023-02-27T14:13:39Z", "commit_message": "use default allocator for tbb::concurrent_hash_map (#1332)\n\n- gcc 12 warns about mismatched new and delete when an allocator is specified\r\n  This is likely a false positive.  Change to use the default, which uses ends\r\n  up using the same std C++ new allocator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "198b54f56cbcdb82f058d007545bdf9f36c5dce5", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "fix infinite recursion in LineInformation::addLine (#1331)\n\n- gcc 12 reported an infinite recursion for LineInformation::addLine\n  that takes the lineSource file\n- fixed by computing the string table index of lineSource and then\n  calling the addLine method that takes the index value\n- also update the lineSource type from string to const string&\n- updated documenation that had the method signature taking a const char*", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6436c734eef50d55ed6c562aa3fabf0c7039c50c", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "eliminate deprecated C++ function objects (#1331)\n\nfix function objects that were deprecate in C++ 11 and removed in C++ 17\n\n- replace mem_fun with mem_fn\n- eliminate binary_function and unary_function base classes\n- use const iterator when constructing boost::transform_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f049fe855640832950f5a6cd87db23ecb4b7533b", "commit_date": "2023-02-24T22:27:17Z", "commit_message": "Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04 (#1362)\n\n* Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04\r\n\r\n- the main issue was `/sbin/ldconfig -p` on Ubuntu 22.04 has an extra line at the end: \"Cache generated by: ldconfig (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35\"\r\n  - this would result in an occasionaly segfault\r\n- refactored the rest to avoid strtok which is known to have a fair amount of problems\r\n\r\n* fix header includes and message about delimit issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31b4d7f19f4e6585518eee179a63812f88911e6f", "commit_date": "2023-02-24T19:36:42Z", "commit_message": "Make SymtabCodeSource constructor const correct (#1293)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc38257de4d5143d097229aef7284b8e1ce6fbf5", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "SymtabAPI::Type: add support for C++ r-value references (#1159)\n\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c677008d0fa8f4ccb6d191d37493060e15d05f22", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "Improve DWARF enum parsing in Symtab::Type (#1164)\n\n* Inherit from derivedType\r\n* Add parsing of underlying type\r\n* Improve enum parsing debug information\r\n* Add support for C++ scoped enums (i.e., 'enum class')\r\n* Remove typeEnum::setName\r\n    This has no definition.\r\n* Inline default constructor\r\n* Clean up BPatch::createEnum\r\n\r\nThis removes the unnecessary construction of a separate (thread-safe!)\r\ncontainer of pairs and the associated memory leaks. It also explicitly\r\nmakes the enum's underlying type a four-byte signed int. Redundant code\r\nfrom the overload which computes the enum values was replaced by using\r\nstd::iota and calling the three-argument createEnum.\r\n\r\n* Remove factory functions\r\n\r\nAdding overloads for these would add more clutter than utility. We\r\nshould remove these from all of the types as the constructors should\r\nalways be used to ensure class invariants.\r\n\r\n* Remove non-portable constructors\r\n\r\nSince we're breaking ABI here, these constructors need to go. Manually\r\nsetting the size to `sizeof(int)` is non-portable as the\r\nBPatch::createEnum may be used to modify a binary that doesn't have the\r\nsame `int` representation as the host on which Dyninst was compiled.\r\n\r\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3046332ba3d32eccb63f8dd6ecc65afca3b2c63f", "commit_date": "2023-02-23T22:24:02Z", "commit_message": "Update global ELF ctor/dtor instrumentation for static executables (#1355)\n\nIf __libc_csu_init doesn't exist, try to insert the constructor call into the beginning of 'main'. If __libc_csu_fini doesn't exist, try to insert the constructor call into the beginning of 'exit'.\r\n\r\n* Use C-style strings for symbol names\r\n\r\nThere's no need to have a std::string object that incurs the overhead of a constructor/destructor call to just hold a literal that's only visible in the current translation unit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "gfx90a": [{"commit_oid": "0bd51e26d2bb134c4a7c9d5e713b2375c235971f", "commit_date": "2023-03-28T17:58:18Z", "commit_message": "Update gfx90a decoder implementation\n\nUpdate the decoder implementation for amdgpu gfx90a to be based\non the XML-ISA-DROP 2302222\n\nA new register dsmem is added", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "363d1358c86791e749d5a48bf34abaf8b0f606db", "commit_date": "2023-03-28T17:57:16Z", "commit_message": "Revert accidental typo introduced during rebase", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4924ac7e82c99a6dfa9e5d6d873f1c6bd213b12e", "commit_date": "2023-03-28T16:55:46Z", "commit_message": "Fix function signature for makeRegisterExpression\n\nThis makes the code compile under gcc-6 and clang.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "60cf82fc8572a39cded67af775fd1d2f4af41ac4", "commit_date": "2023-03-28T16:55:09Z", "commit_message": "remove trailing cout.clear call", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "20405fcc618eb6b53584b4f1d2fc3688b49658fc", "commit_date": "2023-03-28T16:55:09Z", "commit_message": "add empty finalizeOperand implementation for ENC_VINTRP, since no instructions of such encoding exists in the gfx90a isa drop", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "50804b4fff1f85c151ca01d611135df99b470de4", "commit_date": "2023-03-28T16:55:09Z", "commit_message": "add definition for the memory-counter registers", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "35532e68ed4204be4870e9bf4da06ec7e4d3ecee", "commit_date": "2023-03-28T16:52:47Z", "commit_message": "Rename AMDGPU cdna2 to gfx90a, decoder updated\n\nRename the architecture name for cdna2 to gfx90a\nUpdated the decoder implementation to based on newer\nXML-ISA-Drop", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1ddebd3125437d3385e65a7cce5bea715588028", "commit_date": "2023-03-23T14:25:12Z", "commit_message": "Fix UB in dwarf/dwarf_subrange.cpp::get_type (#1402)\n\nThe dwarf_* functions return a pointer to their last argument. This causes 'get_type' to return a pointer to a local variable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e952a0dfc13dbb7d665219a672733a505ee2a00", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  stack frame larger than (#1397)\n\n- increase stack frame size warning limit another 1000 bytes for\n  power_opcode_tables.C for RELEASE builds using the clang compiler", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683c85c7ef35d0afe6188271c8f697f6f839e12d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameter (conditionally) (#1397)\n\n- Add macro DYNINST_SUPPRESS_UNUSED_VARIABLE to suppress\n  warnings about unused variables\n\n- use macro to suppress function parameter that is only unused\n  when building on aarch64 and hence cannot be commented out", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "309d167d291f69d0ba9d4671ca581d6d24bf95e0", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "fix broken call to base class function (#1397)\n\n- SgAsmBinaryMultiply::get_type() rose results in infinite recursion\n  as casting the pointer to the base class and calling a function\n  still calls the derived version.  Just call the base class's function\n\n- rewrite SgAsmBinaryAdd::get_type the same way; it was not broken\n  but was convoluted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f57a5cbdfa98333527466423cbc32224874fa81", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "enable warnings in dataflowAPI/src (#1397)\n\n- separate dataflowAPI/src and dataflowAPI/rose source files\n\n- undo disabling warnings for dataflowAPI/src files\n\n- only include ABI.C as a source file once", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "766c7fad0f9f25bc5505f55a88c4f370b0f2cc69", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variable (clang compiler bug) (#1397)\n\n- add suppressions around code that contains a lock using RAII;\n  clang prior to version 10 contains a bug where it does not\n  recognized that the ctor and dtor make the variable used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e86fb6e232b370a66f407f9a0af440134bff147", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  suppress VLA warning (#1397)\n\n- Rose uses a VLA in C++ which is non-standard; for now suppress the\n  diagnostic\n\n- clang requires disabling both -Wvla and -Wvla-extension\n\n- gcc <9, 11.0 and 11.1 has a bug that requires the suppression to\n  to not be in the same macro as VLA itself", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89b22e23d4abcf48a2b1d3dd0f1ce294b4bb6260", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1397)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f7ed33ed9fac49623fea5ed2743462d8c31a062", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  missing noexcept (#1397)\n\n- declare function noexcept to allow potential optimization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "61faa14906eb2a7543867f4cb66643783ba41323", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  deprecated implicit ctor and op= (#1397)\n\n- add explicit copy ctors and operator=,\n  or delete dtor where it could be defaulted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa4713e0f2f063362a496ed03d0d0d65ff43d037", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (delete variable) (#1397)\n\n- remove variables and their initializatins that shadow a variable in\n  the enclosing scope as they were initialized with the same value", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1caea03054dbd73178ea2f40e2ca3474ff9c82e6", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (rename) (#1397)\n\n- rename names that shadow a name in an enclosing scope or class with\n  a unique name", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a309c63953a845f2d0c6e24f3bc3c4d117ef9006", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  potentially evaluated expression (#1397)\n\n- replace use of typeid(expr) where expr executes code at run-time\n  with a dynamic_cast that is obvious that it executes code at\n  run-time", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "412071df5285ecb872abaa966ae4ebb81c733573", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  overloaded virtual overrides (#1397)\n\n- import the name of the base class's virtual function(s) that were\n  overridden in the derived class to prevent hiding of the base class's\n  functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a720e99d94bfb01de40488d5dae8b45645fb284e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  copy ctor missing base class (#1397)\n\n- call the base class's copy constructor in the derived class's\n  copy constructor", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "336409431b648c18c7b51ec1c3135489f82ab7ce", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  case fallthough (#1397)\n\n- add break statement or DYNINST_FALLTHOUGH macro where a switch\n  case falls through to the next case", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "476ba11cf828964579d40a26b21e4b0eb808d560", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  printf format related (#1397)\n\n- add printf-format annotation on dataflow printf function parameter\n\n- fix format string to match parameter types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a15d069e2ce6340396e71bc283f0ac2377b4da6e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  reorder ctor initialization list (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f13b79c36af349203bddba40757b82a1206de42d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  const correctness (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b880173dc64d2d1f07e4d41b4796eac3d14873fe", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variables (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "951ebb64db730f7497ce886e8634aaa3da3cc5e7", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameters (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e9a4b86d2adbe3763fad3df38f85ac92959e26c", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  variadic macro (#1397)\n\n- replace non-standard variadic macro syntax with standard syntax\n\n- remove preprcessor check to use variadic macros if the compiler is\n  gcc;  all compilers support them", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42223b1f9118e32fe145a85a13ced32c13cd5871", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  extraneous semicolons (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ebf545849ef979aaa21bf82e8caff104cbeb6f6", "commit_date": "2023-03-15T13:47:22Z", "commit_message": "Github CI: update dev container deployment (#1400)\n\n* Log in to GHCR before building\r\n* Pull base image for cache", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab965c214b030a302aa0307b121cb9d06ab0a989", "commit_date": "2023-03-15T12:39:13Z", "commit_message": "Github CI: add line continuation in dev-containers.yaml (#1399)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f5558a15b16272eef982b5e8ddfdf172eb59036", "commit_date": "2023-03-15T12:23:31Z", "commit_message": "Add PR testing Github CI (#1393)\n\nRun on pull request to master:\r\n\r\n    Enforce formatting of CMake files, if modified\r\n    Check for changes in minimum required versions of dependencies\r\n    Ensure Dyninst, test suite, examples, and external tests all build with gcc on Ubuntu-20.04\r\n\r\nRun on push to master:\r\n\r\n    Build and deploy new dev container, ghcr.io/dyninst/amd64/<OS>:latest", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e7aa66ddef6768957faae3c62c9909590663901", "commit_date": "2023-03-09T20:15:45Z", "commit_message": "Replace 'cerr' with 'dwarf_print' in DwarfWalker::decodeLocationList (#1395)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1157c87c0b184d83e851bdd5b63582dd2a7647cf", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy with user dtor (#1394)\n\n- Make classes move-only by removing public copy constructor and\n  operator= as they contained pointer members that were just copied\n  (with no semantics of copying the data). This is a double delete\n  waiting to happen.  Luckily the pointer were always nullptr when the\n  copy constructor was called.\n\n- add move constructor (using std::move where appropriate)\n\n- clean up the classes to use default constructors and default member\n  initialization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1aeb249ff90fea49dc50efea1e6c11577bf9d90", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unneeded internal declaration (#1394)\n\n- clang warns of an unneeded internal declaration for yyinput. Since\n  yyinput is generated by flex, just suppress it for the whole file.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7cd7cdb0ba98de24b0d916b8e440db8adb0af6f9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (derived) (#1394)\n\n- Derived type classes have an operator==(const Type&) const, and they\n  call this operator with with both the lhs and rhs being the derived\n  class type.  This is ambiguous when using C++ 20's rule that considers\n  the parameters reversed.  Fix by adding an inlined non-virtual\n  operator== that takes the derived types a parameter and then\n  unambiguously calls the existing ==", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12a4fd86738c048dd82c20c31359cf7a48c082eb", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  stack frame larger than (#1394)\n\n- increase stack frame size warning limit when using the clang compiler\n  for a couple of files that needed a similar increase for gcc", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b78e883c77aefc27d1a30722b414266aa33897d1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  logical op (#1394)\n\n- add suppressions for identical clauses of a logical operator\n  even if they are only identical after evaluating constant\n  expressions that are not identical as gcc 8 and prior warn\n  about this\n\n- Suppression for these are already in place for warnings in adjacent\n  if statements, so extend the suppression to cover these also", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9dbc1e30e30ef263b174d1d2b5ca648e8ef6bf0d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  C function decls without prototype (#1394)\n\n- C functions declared as func() are a declaration without a prototype\n  (from the original K&R C), not a function that takes no parameters\n  (until C23), change all of these to func(void) which is how to\n  declare such a function in C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a2e3fd795f8ec6cb730038ec277431b0832c03c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  set but unused variables (#1394)\n\n- delete variables whose only use is to increment themselves", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6e380f7158326fc686f1b3f7ec7a01b3ac4bfe2", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (#1394)\n\nC++ 20 considers the reversed parameter of a comparison operators in\naddition to the given parameter order.  This implies that if the\nargument is const then the member function must also be const.\n\n- change    bool operator==(const T&)\n      to    bool operator==(const T&) const", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57fe4c395dff4fd11f18d2f00eb58ad25212501", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::random_shuffle is deprecated (#1394)\n\n- replace std::random_shuffle with std::shuffle", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "706fd0e3c532a3d7cfc1d752620ebed2fac65c5d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing noexcept (#1394)\n\n- declare functions noexcept", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "55d8a338e362d3aa4448aa9bae776eb90ca1292a", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1394)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b977e8d7132b312c853652a1e7e6f28eb39dbab0", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unused private field (#1394)\n\n- removed myid member from dyn_thread as it is never used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0eb0b29def9cc2d18e0fe724e536c73e7e9ef964", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy/op= with user provided dtor (#1394)\n\n- Explicitly define the implicit operator or remove the explicit\n  destructor; in C++ 20, if a destructor is explicitly defined then\n  the other constructor, assignment and move operators will not be\n  automatically generated", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9be477535debee15c2403bdc2ddedb31fdf0eb8e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  remove unused variables/members (#1394)\n\n- remove variables that were never used\n\n- remove code that only updated unused variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "344783a7954de9af7f98a5d3f0ec7c505b7536a1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (variables) (#1394)\n\n- rename variables that shadow names in containing scopes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73064a866ee1d19d8e12e2562f60b9b7f8e05406", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (enumerator names) (#1394)\n\nenumerator names shadow names in other scopes\n\n- made 3 internal enum types scoped enums:  StackAccessType,\n  operandType and patch_type_t\n\n- delete one internal and unused enum type:  frameType_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4bf4a24c514d0c395fdd27d6fe68ddf0fef89040", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "replace C-style and functional casts (#1394)\n\n- replace C-style casts ((T)e) and functional casts (T(e)) with modern\n  casts that have a clearer intent and are safer:  static_cast<T>(e),\n  and T{e}.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8d0e2760b307c7d465b56cac639c2e4a2cc93ca8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "write_memory_as to append_memory_as as appropriate (#1394)\n\n- where write_memory also updates the pointer, change then to\n  append_memory_as(...)\n\n- change '*insn++ = <value>' to append_memory_as_byte(...) to\n  be consistent with append_memory_as(...)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c21bd122187e87b74d45a5ba3ec3e3824750f9c3", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (C casts) (#1394)\n\n- fixed increased alignment warnings in C code.  The macro\n  CAST_WITHOUT_ALIGNMENT_WARNING eliminates the warning and allows for\n  future auditing.  For the code as currently written, these are all\n  aligned properly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0eeb1ee0407780ee07f603910d398f836dc2f7", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (pointers) (#1394)\n\n- fix alignment warnings of pointers by using alignas_cast<> defined in\n  common/h/raw_memory_access.h to eliminate the increase alignment\n  warning.  For the code as currently written, these are all aligned\n  properly, but these are inherently unsafe and require manual\n  inspection of the pointers involved.  An assert in alignas_cast can be\n  uncommented to validate proper alignment at runtime.\n\n- explicitly force larger alignment of one variable to eliminate warning", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "285ac938848739e02e38c044cf354dcb9d99f0b9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (#1394)\n\n- Casts of pointers to a type that has a larger alignment requirement\n  will cause an exceptions on some architectures on dereference if the\n  pointer does not meet its alignment requirements.\n\n- Add new template functions read_memory_as and write_memory_as that\n  read and write the bytes of (possibly) unaligned memory of the desired\n  data at the supplied address using the length of the template type in\n  a way that is safe even if the supplied pointer is not properly\n  aligned.\n\n- Add functions append_memory_as; like write_memory_as but updates the\n  pointer value to memory location after the bytes written.\n\n- Add template function alignas_cast to cast a pointer to another\n  pointer without producing an increased alignment warning; requires\n  manual auditing to pointer is properly aligned", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4aff07d1eba822b880558c030c7f5aec94b2ae9c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  pessimizing move (#1394)\n\n- remove unnecessary std::move's", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b88b16dba9477f18fe598fad5552758204a1558e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing override (#1394)\n\n- add override to all overridden virtual methods of a class if present\n  on any method", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84fe176ef5ab61376911570de6b506473a3c8d35", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  tautological always true comparison (#1394)\n\n- value of type unsigned char compared to 256 produces a warning as 256\n  is outside the range of the uint8_t.  256 is the number of array\n  elements (computed using sizeof's).  Changed from (n < numElems) to (n\n  <= numElems - 1) which is also always true, but the error is\n  eliminated due to 255 being within range of a uint8_t.  Ugly but makes\n  the warning disappear.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6b41075d61009b539107836591cb47b8cb3e3c8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  mismatched class/struct (#1394)\n\n- use consistent 'struct' and 'class' keyword between forward\n  declaration and definition; a mismatch is legal be breaks on\n  some versions of MS C++", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9e83871f0380068dba79648c6acee503cac5d76", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  [[fallthrough]] requires C++ 17 (#1394)\n\n- clang's __has_cpp_attribute(fallthrough) feature test macro returns\n  true, but produces warnings if used.  [[clang::fallthough]] works, so\n  force it if the language version is pre-17 with clang compiler.\n\n- fix typo in __cplusplus macro name\n\n- improve robustness: try all alternative fallthrough attributes names", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "067be96bb64a3d4191f12db1694b0fcfec51d457", "commit_date": "2023-03-02T18:41:27Z", "commit_message": "Restore PPC special-purpose registers in opposite order of saving them (#1392)\n\n* Restore PPC special-purpose registers in opposite order of saving them\r\n\r\nThis is the same fix as https://github.com/dyninst/dyninst/pull/1000,\r\nbut for PowerPC.\r\n\r\n* Reverse order of FPSCR restore", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae43ebc6f905345499ed9c55eccb007e9a69efa9", "commit_date": "2023-03-01T23:57:55Z", "commit_message": "Aarch64: Fix restoring special purpose registers order (#1000)\n\nThe special purpose registers are pushed onto the stack by\r\nEmitterAARCH64SaveRegs::saveSPRegisters. This patch reverses the order\r\nused for popping the stored registers from the stack. Without\r\nthis patch, some of the state registers get swapped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46ea3009e1e0e27bd035ac3152dc772bf861f3fd", "commit_date": "2023-03-01T19:33:16Z", "commit_message": "Avoid possible copy in BPatch::createEnum (#1390)\n\nThe Type class doesn't have a user-defined copy constructor and its\r\nimplicit declaration is deprecated in C++20. Rearranging the construction\r\nhere removes the possibility of copying.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f89cc72416fdc1d467b130f48609b8fc93126d37", "commit_date": "2023-02-28T23:54:58Z", "commit_message": "Merge pull request #1389 from dyninst/wuxx1279/gfx908/clang-error\n\nFix ambiguous override of InstructionDecoder_amdgpu_*::makeRegisterExpression", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "557a01949a4c11e8e8975fe113e4ab07b64bf25d", "commit_date": "2023-02-27T21:25:44Z", "commit_message": "add InstructionDecoderImpl::makeRegisterExpression to derived classes\n\nEliminate virtual-overloaded warning as there are 3 overloaded methods of\nInstructionDecoderImpl::makeRegisterExpression, but only 2 are defined in\nthese classes for add a using so the 3rd is not hidden.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42c3a4b497071e421686ded49ad0da406c8053ac", "commit_date": "2023-02-27T20:06:40Z", "commit_message": "Fix virtual derived signature to match base class\n\nmakeRegisterExpression in the derived class had\nan incorrect function signature, which made\ncompilation fails on gcc-6 and clang.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d15c0f714397a1316c74fc8d2c24a62a772ecc3", "commit_date": "2023-02-27T18:39:18Z", "commit_message": "Update DwarfWalker subrange handling (#1369)\n\n* Remove redundant include of libdw.h\r\n\r\n* Add subrange parsing to dynDwarf\r\n\r\n* Remove decipherBound\r\n\r\nThis implementation was neither correct nor complete. Moreover, we\r\nshouldn't be parsing FORM types. Looking for DW_TAG* is sufficient.\r\n\r\n* Remove legacy comments and commented-out code from parseArray\r\n\r\n* Improve error message in parseArray\r\n\r\n* Rename parseSubrangeAUX to parseSubrange and change interface\r\n\r\n* Replace bound calculations in parseSubrange\r\n\r\n* Update some comments and whitespace\r\n\r\n* Update construction of the result type\r\n\r\nThe LONG_MIN/MAX aren't great, but they are propagated to preserve\r\nbehavior.\r\n\r\n* Update debugging messages in parseSubrange\r\n\r\n* Have parseSubrange() call parseSubrange(Dwarf_Die*)\r\n\r\n* Use updated parseSubrange in parseMultidimensionalArray\r\n\r\n* Use std::tostring instead of snprintf\r\n\r\n* Update comments and remove dead code\r\n\r\n* Whitespace\r\n\r\n* parseMDA returns a typeArray instead of just a Type\r\n\r\n* Fix bug in dwarf_result::operator bool\r\n\r\n* Fix hi/low bound mixup in parseMDA\r\n\r\n* Try using Dyninst's parsed CU language, if needed\r\n\r\n* Display subrange DIE ID in pareSubrange\r\n\r\n* Don't create subrange type in parseSubrange\r\n\r\nThis will happen in the callee\r\n\r\n* Update parseSubrange() to use new parseSubrange(Dwarf_DIE*)\r\n\r\n* More carefully parse the child DIE\r\n\r\n* Iteratively parse the subranges in parseArray\r\n\r\n* Whitespace\r\n\r\n* Remove parseMultiDimensionalArray\r\n\r\n* Improve debug messages\r\n\r\n* Register each subrange type in parseArray\r\n\r\n* Remove common/h/dyninstversion.h\r\n\r\nThis was accidentally included.\r\n\r\n* Add copyright notices to new files\r\n\r\n* Make dwarf_result also hold a Dwarf_Word\r\n\r\nC++ doesn't guarantee it is convertible to `long`.\r\n\r\n* Only offer an interface to parse both bounds simultaneously\r\n\r\nThe calculation for a range's upper bound when DW_AT_count is used\r\nrequires knowing the lower bound (if given), so these needed to be\r\nmerged.\r\n\r\n* Use new dwarf_subrange interface in DwarfWalker::parseSubrange", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bfa6e82c2a9ef98801432324ffb3cec2a6254c5", "commit_date": "2023-02-27T14:13:39Z", "commit_message": "use default allocator for tbb::concurrent_hash_map (#1332)\n\n- gcc 12 warns about mismatched new and delete when an allocator is specified\r\n  This is likely a false positive.  Change to use the default, which uses ends\r\n  up using the same std C++ new allocator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "198b54f56cbcdb82f058d007545bdf9f36c5dce5", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "fix infinite recursion in LineInformation::addLine (#1331)\n\n- gcc 12 reported an infinite recursion for LineInformation::addLine\n  that takes the lineSource file\n- fixed by computing the string table index of lineSource and then\n  calling the addLine method that takes the index value\n- also update the lineSource type from string to const string&\n- updated documenation that had the method signature taking a const char*", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6436c734eef50d55ed6c562aa3fabf0c7039c50c", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "eliminate deprecated C++ function objects (#1331)\n\nfix function objects that were deprecate in C++ 11 and removed in C++ 17\n\n- replace mem_fun with mem_fn\n- eliminate binary_function and unary_function base classes\n- use const iterator when constructing boost::transform_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f049fe855640832950f5a6cd87db23ecb4b7533b", "commit_date": "2023-02-24T22:27:17Z", "commit_message": "Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04 (#1362)\n\n* Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04\r\n\r\n- the main issue was `/sbin/ldconfig -p` on Ubuntu 22.04 has an extra line at the end: \"Cache generated by: ldconfig (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35\"\r\n  - this would result in an occasionaly segfault\r\n- refactored the rest to avoid strtok which is known to have a fair amount of problems\r\n\r\n* fix header includes and message about delimit issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31b4d7f19f4e6585518eee179a63812f88911e6f", "commit_date": "2023-02-24T19:36:42Z", "commit_message": "Make SymtabCodeSource constructor const correct (#1293)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc38257de4d5143d097229aef7284b8e1ce6fbf5", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "SymtabAPI::Type: add support for C++ r-value references (#1159)\n\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c677008d0fa8f4ccb6d191d37493060e15d05f22", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "Improve DWARF enum parsing in Symtab::Type (#1164)\n\n* Inherit from derivedType\r\n* Add parsing of underlying type\r\n* Improve enum parsing debug information\r\n* Add support for C++ scoped enums (i.e., 'enum class')\r\n* Remove typeEnum::setName\r\n    This has no definition.\r\n* Inline default constructor\r\n* Clean up BPatch::createEnum\r\n\r\nThis removes the unnecessary construction of a separate (thread-safe!)\r\ncontainer of pairs and the associated memory leaks. It also explicitly\r\nmakes the enum's underlying type a four-byte signed int. Redundant code\r\nfrom the overload which computes the enum values was replaced by using\r\nstd::iota and calling the three-argument createEnum.\r\n\r\n* Remove factory functions\r\n\r\nAdding overloads for these would add more clutter than utility. We\r\nshould remove these from all of the types as the constructors should\r\nalways be used to ensure class invariants.\r\n\r\n* Remove non-portable constructors\r\n\r\nSince we're breaking ABI here, these constructors need to go. Manually\r\nsetting the size to `sizeof(int)` is non-portable as the\r\nBPatch::createEnum may be used to modify a binary that doesn't have the\r\nsame `int` representation as the host on which Dyninst was compiled.\r\n\r\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3046332ba3d32eccb63f8dd6ecc65afca3b2c63f", "commit_date": "2023-02-23T22:24:02Z", "commit_message": "Update global ELF ctor/dtor instrumentation for static executables (#1355)\n\nIf __libc_csu_init doesn't exist, try to insert the constructor call into the beginning of 'main'. If __libc_csu_fini doesn't exist, try to insert the constructor call into the beginning of 'exit'.\r\n\r\n* Use C-style strings for symbol names\r\n\r\nThere's no need to have a std::string object that incurs the overhead of a constructor/destructor call to just hold a literal that's only visible in the current translation unit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "kpp_amdgpu_instrument": [{"commit_oid": "4b25a2b43fc41909c30bf432267291affea529ad", "commit_date": "2023-09-20T17:02:16Z", "commit_message": "some updates", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "578831e563478610c589a23f1a83c2b891b4f676", "commit_date": "2023-09-20T17:02:16Z", "commit_message": "Test Branching to AMDGPU working on small example", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4298a0a35a979e4cebaa3d451f652c79579239f8", "commit_date": "2023-09-20T02:46:08Z", "commit_message": "Remove Symtab::fixup_SymbolAddr (#1530)\n\nIts usage was removed by 4bc7f25d in 2020.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a66e73e8bedb27b07b20711c523667d7f32778c9", "commit_date": "2023-09-20T00:49:49Z", "commit_message": "GithubCI: Re-enable consumer builds (#1529)\n\nI forgot to do this before merging #1527.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c870fb6485d86efe8836656f9a080c32b2ae25f", "commit_date": "2023-09-19T22:31:43Z", "commit_message": "Github CI: Add weekly build of MUST (#1527)\n\n* Add weekly build of must\r\n\r\n'MUST' detects MPI usage errors. Comes from RWTH Aachen University.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1c5494f2017d726be10b03d2540410d15a322e78", "commit_date": "2023-09-19T19:45:41Z", "commit_message": "GithubCI: Allow conumer builds to be run manually (#1528)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "384377d2671a99cc1388d06e84873d4be17138c5", "commit_date": "2023-09-19T04:11:10Z", "commit_message": "Github CI: Build TAU weekly (#1526)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4fe97f34596fcd657d308f3b4edc8d2f8970fb13", "commit_date": "2023-09-19T01:29:15Z", "commit_message": "Github CI: Build LLNL/STAT weekly (#1525)\n\nNot built with spack because it takes longer than 6 hours due to trying to build clang from source.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e9956825aad23c72aa5c24bd33c502f8f5e7042e", "commit_date": "2023-09-18T17:37:16Z", "commit_message": "Github CI: Build systemtap weekly (#1524)\n\nThis could be built using spack, but it would require making a packages.yaml to keep from having to install libjsonc every time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "633adb9075d1347a1203822ff21ba986ac8ced92", "commit_date": "2023-09-14T15:54:32Z", "commit_message": "Add indirect branch support for gfx908 and gfx90a (#1519)\n\n* Support Indirect Control Flow for GFX908 / GFX90A\r\n\r\nThis commit ports the support for indirect control flow\r\nanalysis that was done for gfx900 to gfx908 and gfx90a.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "423c1bba58849c4be0090c58aa99531e67824207", "commit_date": "2023-09-11T20:27:22Z", "commit_message": "Fix int size of rose operations return values (#1522)\n\n- set integer bit size of equalsizeOp to be 1\r\n- set integer bit size of andOp to be max size of operands\r\n- set integer bit size of orOp to be max size of operands", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "822c1c0366531fe722c2403aaf2fef29601d99d7", "commit_date": "2023-09-11T13:40:40Z", "commit_message": "Fix Implementation for RoseOperation::extractOp (#1511)\n\nFix implementation in dataflowAPI to have end_bit exclusive.\r\nFix implementation in parseAPI to be based on begin_bit and end_bit instead of based on size only.\r\nFix #1510.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "782ec44877e8cb5a231e0a8f1e9801df89c27802", "commit_date": "2023-09-08T20:45:57Z", "commit_message": "Don't create a name for artificial DIEs with a DW_AT_name (#1520)\n\nFor C++ member functions, compilers will sometimes add a DW_AT_name\r\ncalled 'this', and we don't want to mangle that.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57886efea6d6f16adc01d41198d011cd95aed86", "commit_date": "2023-09-08T20:45:06Z", "commit_message": "Github CI: use correct directory when running external-tests on PR (#1521)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2d2f4c23298586211a58bff90423231d524fb22", "commit_date": "2023-09-08T15:46:49Z", "commit_message": "Remove DwarfWalker::version member variable (#1516)\n\nIt was added by 49df4377c in 2012, but never used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a0a0a2b245aa115b6bf8e8712e40f512afb5bae", "commit_date": "2023-09-08T15:46:32Z", "commit_message": "Parse all DWARF source files in DwarfWalker::buildSrcFiles (#1515)\n\nFrom 2.6.4.16 of the DWARF5 standard\r\n\r\n\tPrior to DWARF Version 5, the current compilation file name was not\r\n\trepresented in the file_names field. In DWARF Version 5, the current\r\n\tcompilation file name is explicitly present and has index 0. This is\r\n\tneeded to support the common practice of stripping all but the line\r\n\tnumber sections (.debug_line and .debug_line_str) from an executable.\r\n\r\nHowever, libdw takes care of this in dwarf_getsrcfiles.\r\n\r\nFixes a major bug where we produce no function parameter information\r\nwhen there is only one CU in a binary because\r\nDwarfWalker::parseFormalParam requires line information.\r\n\r\nFixes #1156", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e4e6fbc7fdfe7faaa9f0a6ceb42b5d9adc996bf5", "commit_date": "2023-09-08T15:45:27Z", "commit_message": "Refactor dwarf/dwarf_names.h (#1514)\n\n* Rename is_fullcu -> is_full_unit\r\n\r\n* Rename is_partialcu -> is_partial_unit\r\n\r\n* Rename is_typecu -> is_type_unit\r\n\r\n* Refactor is_cudie to make unit concepts clearer\r\n\r\n* Add is_imported_unit for completeness\r\n\r\nNot currently used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bec7e21a5008adc1c0445775602ce740943e9b55", "commit_date": "2023-09-07T19:57:09Z", "commit_message": "Github CI: execute external tests on PR (#1512)\n\n* Github CI: execute external tests on PR", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "52acf2734d3da3106edb3f3866778a26eda32819", "commit_date": "2023-09-07T19:55:06Z", "commit_message": "Github CI: terminate PR pipeline at first failure (#1513)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9fddc4282879da75ffc456d91d8e70c9d06b091e", "commit_date": "2023-09-07T18:04:19Z", "commit_message": "Unify naming of Modules (#1500)\n\n* Unify naming of Modules\r\n\r\nThere are currently several different techniques being used\r\ninconsistently to name Modules. This unifies all of these techniques\r\nand applies them consistently.\r\n\r\nNaming type units:\r\n\r\nIt's not clear from the DWARF std at this time if dwarf_formstring\r\nwill actually return the signature/MD5 hash for a type unit. Whatever\r\nthe old code has done is likely broken, so we don't want to propagate\r\nthat here. Likely, the DW_FORM_ref_sig8 parsing isn't being done\r\ncorrectly overall, and will need to be fixed in the future.\r\n\r\nAnonymous DIEs:\r\n\r\nMany DIEs don't have names (e.g., type decorator definitions like\r\nDW_TAG_pointer_type), but DwarfWalker has explicit checks for these\r\ncases (DwarfWalker::nameDefined).\r\n\r\n* Remove DEFAULT_MODULE\r\n\r\nBecause every Module now has a unique name, it's no longer possible to\r\nexecute this code path. The 'pmodule' class uses the name from the Module\r\nclass (see the pmodule constructor).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "80f84e4f2e27d91929f48290740899c3edb3b77b", "commit_date": "2023-09-06T21:07:14Z", "commit_message": "Remove ret_lock from SymtabAPI::FunctionBase (#1504)\n\nThis was used to guard calling setReturnType. That function is only\r\never called from DwarfWalker::setFuncReturnType which is itself\r\nguarded by `ParsedFuncs::accessor` in DwarfWalker::parseSubprogram,\r\nrendering this mutex unnecessary.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "212ccd3b4e12f52cb6a743f1fbeff9fccfe7d0bc", "commit_date": "2023-09-06T20:06:15Z", "commit_message": "Remove hasSpecification param from DwarfWalker::getReturnType (#1507)\n\nSince 5ed068167 in 2017, only literal 'false' has ever been used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6eec4844b82ed2176c455359efb29c5ca04a3e87", "commit_date": "2023-09-06T03:57:50Z", "commit_message": "Use full filenames when handling Modules (#1501)\n\nA module's name is either a unique string or the pathname of the file\r\nused to create the corresponding DWARF compilation unit. In the latter\r\ncase, the 'name' is only the basename of the path which is never\r\nguaranteed to be unique (e.g., /path1/foo.c /path2/foo.c would have the\r\nsame 'name').\r\n\r\n* Remove useless file creations\r\n\r\nThese don't correspond to any Module.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d7047e2d22ab5f7bb2a0b8b37434ed955ab97f29", "commit_date": "2023-09-06T03:19:28Z", "commit_message": "Fix inverted logic  in DwarfDyninst::is_cudie (#1505)\n\nIf a DIE is a CU, then it contains a reference to its Dwarf_CU.\r\n\r\nIntroduced by 71f2e14d3 (PR1499).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7acb76787c647a434301579e4e9baa3a59884eb4", "commit_date": "2023-09-06T03:15:54Z", "commit_message": "Don't check for existing return type when parsing DWARF subprogram (#1509)\n\nSince 8b400af5, functions are guaranteed to only be parsed once, so the\r\nreturn type can never be set before the call here. Checking the return\r\ntype circularly invokes Symtab::parseTypesNow which deadlocks since\r\n7f1e24d.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "481ee344d36721c44aa456e31937836c90ee235d", "commit_date": "2023-09-06T02:50:47Z", "commit_message": "Remove FunctionBase::setReturnType(Type*) (#1503)\n\nThis is never called from within Dyninst and should never be called by\r\na user.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "463801216b933cdfdc4115b3d170eb4f64b513f1", "commit_date": "2023-09-05T23:18:45Z", "commit_message": "Workarounds to align decoder output with llvm-objdump (#1508)\n\n* Add info registers and fix some duplicate values\r\n\r\n* Add named immediate as an operand type\r\n\r\n* Add a method for updating mnemonic(required for adding extensions)\r\n\r\n* Implement Workarounds for Gfx908 and GFX90A\r\n\r\nThis commit is intended to fix the following problems\r\n\r\n1. Instructions that use SDWA have wrong length\r\n2. Instructions that use SDWA does not have the _SDWA suffixh\r\n3. MUBUF instructions decodes the VADDR field incorrectly\r\n4. MUBUF instructions missing information about offset\r\n5. DS instructions missing information about offset\r\n\r\n* redo whitespace and indentation changes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d04e892c8f3c9451ff4e77187416a391b5e4ecfa", "commit_date": "2023-09-05T20:45:20Z", "commit_message": "Add newline in log message in DwarfWalker::parseModule (#1506)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "63600787a5ff07d1fdc03835c3fcb99731e65a9a", "commit_date": "2023-09-05T18:08:33Z", "commit_message": "Fix responsibility inversion in Module::finalizeRanges (#1498)\n\nA Module shouldn't modify the Symtab object to which it belongs. It\r\nknows what ranges belong to it (see\r\nObject::fix_global_symbol_modules_static_dwarf), so it can munge them\r\ninto a collection of `ModRange`s.\r\n\r\nThe `ranges_finalized` member was never needed as the only place\r\nit was set was in `finalizeRanges` which is the only place where\r\n`ranges` was emptied.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "50c33bef8c039f696e4b9a60eee3578b9e140cd2", "commit_date": "2023-08-31T17:13:03Z", "commit_message": "Use uniform CU checks in DwarfWalker (#1499)\n\nThese should have been part of 71f2e14d3.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8779898ce685a69d97ce305096eaeb8a3557bd4", "commit_date": "2023-08-28T20:36:59Z", "commit_message": "Remove pd_dwarf_handler (#1496)\n\nIts usage was removed by 340799a in 2017.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71f2e14d3d3ad45c5e5bfdeae3c36222c4200e4f", "commit_date": "2023-08-28T19:18:54Z", "commit_message": "Refactor extracting CU tags from DWARF (#1495)\n\nThis centralizes the process and gives readable names to what's\r\nhappening.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7f1e24d526be740d9c200c5a2b26b0033709806d", "commit_date": "2023-08-28T18:50:01Z", "commit_message": "Make Symtab::parseTypesNow thread-safe (#1497)\n\nThere are many places where this is called without a user realizing it.\r\nIf they were to call any of those functions in parallel, type parsing\r\nwould break.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bf6e869f966112344d627d3044f5e76fcbbc9676", "commit_date": "2023-08-21T15:31:02Z", "commit_message": "Move inst2ast example to examples repo (#1492)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c2e31c0886b30f7b7b07b1e7ab840d3bb5521d1", "commit_date": "2023-08-21T15:30:15Z", "commit_message": "Remove parseAPI examples (#1494)\n\n* Remove parseAPI/doc/code_sample.cc\r\n\r\nThis exists in the dyninst/examples repository as 'disassemble'.\r\n\r\n* Remove parseAPI/doc/example.cc\r\n\r\nThis exists in the dynint/examples repository as 'CFGraph'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "692ff9f4b7e52f5689f880e01bfdd708a0dcdc14", "commit_date": "2023-08-18T21:47:43Z", "commit_message": "Remove patchAPI/test/findPoint (#1490)\n\nIt uses code that is no longer available and the functionality it\r\ncovers is already in the testsuite.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "82268024ac1a4c180b9da876010e5b3abfa5a2ac", "commit_date": "2023-08-18T21:47:25Z", "commit_message": "Remove patchAPI/example (#1491)\n\nIt is already in the examples repository under 'insertSnippet'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "369ec2d033d4554229d5e9228acdeb68791b1f85", "commit_date": "2023-08-18T17:30:14Z", "commit_message": "Remove AObject::symsToModules_ (#1488)\n\n* Remove AObject::findModuleForSym\r\n\r\nIts usage was removed by 4e4a375a4 in 2016.\r\n\r\n* Remove AObject::setModuleForOffset\r\n\r\nIts usage was removed by 0e5d83405 in 2016.\r\n\r\n* Remove use of AObject::symsToModules_ in Object-nt\r\n\r\nIt is only ever written to, and its usage was removed by 4e4a375a4\r\nin 2016.\r\n\r\n* Remove use of AObject::symsToModules_ in Object-elf\r\n\r\nIt is only ever written to, and its usage was removed by 4e4a375a4\r\nin 2016.\r\n\r\n* Remove unused parameters and variables\r\n\r\nThese are no longer needed.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7132622b1fc93f763437c7f6f1170916bfc983e9", "commit_date": "2023-08-18T15:27:49Z", "commit_message": "Remove Module::setName (#1485)\n\nThis is never called internally. The filename corresponding to the\r\nmodule is a class invariant. It makes no sense to make it mutable. This\r\nmember function is not documented.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a49e5e5a882f5035cc01ca9e2962f341748b34be", "commit_date": "2023-08-18T15:27:20Z", "commit_message": "Remove declaration of image::getModuleLanguageInfo (#1486)\n\nIt's definition was removed by 6c65e3c9a in 2007.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "366f9201032c51d2f15b1c4f5f96d541a21feb7f", "commit_date": "2023-08-18T15:26:59Z", "commit_message": "Remove declaration of Object::load_shared_object (#1487)\n\nIts definition was removed by 758aa226 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d40984a42345144c842bc7be469f9f9c9d314be5", "commit_date": "2023-08-18T15:26:15Z", "commit_message": "Remove unused Object::getFileName (#1489)\n\nIts usage was removed by 760bfda6e in 2019. It's also confusing because\r\nit could return either the object's SONAME or the Module's filename.\r\nThese two things are not the same.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "789b9468d8a9160972e64d1aae0239e06cbf980d", "commit_date": "2023-08-17T23:59:11Z", "commit_message": "Clean up unused global variables in Object-elf.C (#1483)\n\n* Clean up stab globals\r\n\r\nThese were removed by 5e142effc in 2021.\r\n\r\n* Remove unused globals from old symbol fixer\r\n\r\nThese were removed by 9de709ec5 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "47605aa681ca733a7d3ab6e7fbc7dee3fc83913b", "commit_date": "2023-08-17T15:21:47Z", "commit_message": "Remove unused Object::find_symbol in Object-elf (#1480)\n\nIts usage was removed by 9de709ec5 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc408511ee37c72bd4444de69fd4c34bd07de786", "commit_date": "2023-08-17T15:21:21Z", "commit_message": "Remove Symtab::updateIndices (#1481)\n\nIts usage was removed by cabbe58ff in 2015. It's a private function, so\r\nthere are no API/ABI issues in removing it.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5a12cccf2395d6a6fc0a5156c420016a04cf8d27", "commit_date": "2023-08-11T20:41:26Z", "commit_message": "Clean up SymtabAPI::LineInformation class (#1479)\n\n* Remove unused member variables\r\n\r\nThese were added by 0dee1c8f8 in 2016, but never used.\r\n\r\n* Remove redundant visibility specifiers\r\n\r\n* Remove useless comments\r\n\r\nThese are either incorrect or just noise.\r\n\r\n* Make the class uninheritable\r\n\r\nThis appears to be some remnants of someone's scratch/dev work.\r\n\r\n* Use a default dtor\r\n\r\nNo reason to have it.\r\n\r\n* Reduce string copies\r\n\r\nThese parameters are only ever read from.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cc88eac20fdbd2b7ce3450ec1cca3e7eb417ee24", "commit_date": "2023-08-09T23:23:24Z", "commit_message": "Remove Symtab::forceFullLineInfoParse (#1478)\n\nIt was added by 1867619517b3 in 2015, but was never implemented.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9cba0b348ce2006ce8a41e8ab549f05abbac377f", "commit_date": "2023-08-09T19:56:52Z", "commit_message": "Don't include compiler-specific headers (#1477)\n\nIncluding anything in <bits/*> is not portable. Also, the contents of\r\nthis header were never used.\r\n\r\nStan Cox (scox@redhat.com) reported:\r\n\r\nIt's not included as the first thing in the file, which means it can't\r\nuse the precompiled version of that header\r\n(https://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html) and\r\ntherefore it's just including the entire C++ standard library, which is\r\ngoing to be much slower than just including the right headers.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5055bcf55802fa9a57d7dd4e5397a978ee8d4d0", "commit_date": "2023-08-09T07:09:13Z", "commit_message": "Fix AMDGPU register formatting (#1473)\n\n* Separate out AMDGPU register formatting\r\n\r\nHere we extract the logic of displaying multiple registers as\r\na single operand when doing instruction formatting into a separate helper\r\nfunction that is only called when the architecture is passed to\r\nInstruction.format or Operand.format;\r\n\r\nThis change enables the ability get register operand name in two ways:\r\nConsider s[0:3]\r\n1. Without passing in architecture, each register will be printed separately.\r\nThat is s0,s1,s2,s3\r\n2. By passing in architecture, the first register will return a string\r\nfor the entire group, and the rest will return empty string.\r\nThat is s[0:3],\"\",\"\",\"\"\r\nThese empty strings will later be discarded by the\r\nArchitectureSpecificFormatter functions.\r\n\r\n* Fix missing parameter for makeRegisterExpression\r\n\r\nDuring one of the PRs that targets compiler warning,\r\nthe num_elements parameter to makeRegisterExpression is omitted,\r\nresulting in all register operands are displayed separately,\r\nwhether they should be displayed as a group or not.\r\n\r\nIn addition to adding the parameter, certern unused helper functions\r\nand fields of InstructionDecoder-amdgpu-gfx*** has been removed\r\nto avoid shadowing of variable names.\r\n\r\nNote that this change isn't applied to vega as we don't have ISA-XML for\r\nit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b6fcbb0c4f647fe4fbd39db1e0fb8cbc5cd1206f", "commit_date": "2023-08-08T19:45:36Z", "commit_message": "Clean up SymtabAPI::Function classes (#1475)\n\n* Remove undefined FunctionBase constructors\r\n\r\nThey were added by 5ed068167 in 2013, but never defined.\r\n\r\n* Make ~FunctionBase public\r\n\r\nFunctionBase is intended to be derived from and thus derived types can\r\nbe deleted through pointers to base. This would cause UB in the current\r\nstate.\r\n\r\nhttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual\r\n\r\n  A base class destructor should be either public and virtual, or\r\nprotected and non-virtual\r\n\r\n* Make Function(Symbol *) public\r\n\r\nIt's awkward having it be protected and then friended so it can be used.\r\nJust make it part of the API.\r\n\r\n* Function should not export its interface.\r\n\r\nThese functions should override those in FunctionBase, but should not\r\ndefine a new interface.\r\n\r\n* Explicitly mark overridden members in Function\r\n\r\n* Make InlinedFunction(FunctionBase *) public\r\n\r\nIt's awkward having it be protected and then friended so it can be used.\r\nJust make it part of the API.\r\n\r\n* Make ~InlinedFunction public\r\n\r\nInlinedFunction is intended to be derived from and thus derived types\r\ncan be deleted through pointers to base. This would cause UB in the\r\ncurrent state.\r\n\r\nhttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual\r\n\r\n  A base class destructor should be either public and virtual, or\r\nprotected and non-virtual\r\n\r\n* Make InlinedFunction::getModule public\r\n\r\nIt's a pure virtual member in FunctionBase, so making it protected here\r\nmeans that calls through a pointer to InlinedFunction could generate a\r\nruntime error. gcc and clang seem to \"do what I mean\" even though it's\r\nill-formed. It also removes the astonishment that `getModule` isn't\r\naccessible through the public interface even though it is required to be\r\nthere.\r\n\r\nFrom C++11 standard (n3242):\r\n\r\n11 Member access control [class.access]\r\n\r\n5. It should be noted that it is access to members and base classes that\r\nis controlled, not their visibility. Names of members are still visible,\r\nand implicit conversions to base classes are still considered, when\r\nthose members and base classes are inaccessible. The interpretation of a\r\ngiven construct is established without regard to access control. If the\r\ninterpretation established makes use of inaccessible member names or\r\nbase classes, the construct is ill-formed.\r\n\r\n* InlinedFunction should not export its interface.\r\n\r\nThese functions should override those in FunctionBase, but should not\r\ndefine a new interface.\r\n\r\n* Explicitly mark overridden members in InlinedFunction", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "67dfbb4ac8f5a6c1f98395983ff3a6ba57527101", "commit_date": "2023-08-03T17:55:51Z", "commit_message": "Fix hang when creating ELF dynamic sections (#1474)\n\nThis is triggered when a binary with no .rel.dyn and .rela.dyn\r\nsections, but its target platform uses rel type relocation records.\r\n\r\nThis happened on an AMDGPU binary that was previously incorrectly\r\nspecified as using a rel relocation record.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8fa753d955d43747aa46b0a528a81a0d9adf677d", "commit_date": "2023-07-27T14:25:14Z", "commit_message": "Do not decode operands for invalid opcode (#1467)\n\nCo-authored-by: Xiaozhu Meng <xmeng@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "43026f99ba03d71ec6105c4b52ad70759645a733", "commit_date": "2023-07-27T14:24:18Z", "commit_message": "Add support for EM_INTELGT (#1468)\n\nIt's unclear at this time how we should treat Intel's XE Gen12/Tiger Lake binaries, so we just treat them as Gen9 (Ponte Vecchio) for now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d94f856514d7e312d5d4bd704ddac8b166c48c4e", "commit_date": "2023-07-26T21:22:18Z", "commit_message": "do not export Instruction::appendOperand (#1466)\n\n- do not export since it is now private, and should not have been used\r\n  externally (comment said it was to work around old compiler issue).\r\n\r\n- cleanup method order and remove comment", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7456c05b979130eba42c4ee39a9ed00c92de2ba4", "commit_date": "2023-07-26T15:34:22Z", "commit_message": "add getDisplayOrderedOperands interface (#1465)\n\nAdd method Instruction::getDisplayOrderedOperands to return the\r\noperands that are displayed (non implicit operands) when formatting an\r\ninstruction for disassembly.  Returns a vector of Operands in display\r\norder.\r\n\r\nThese operands can be inspected and formatted to produce a disassembly\r\nstring with annotations.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6394752592546df5adff6bc7edb2d8bde330842d", "commit_date": "2023-07-26T03:27:07Z", "commit_message": "modernize ArchSpecificFormatter classes (#1464)\n\n- pass string and vector parameters by const reference instead of by\r\n  value for performance\r\n\r\n- add ArchSpecificFormatter::getInstructionString and remove the overridden\r\n  versions in the non-x86_64 as they were functionally the same, but not\r\n  identically written\r\n\r\n- remove virtual and add override to overridden methods\r\n\r\n- make methods const, use map::at instead of map::operator[]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25ad35c6762df4c40c68bd2fc3f6428efbd45a28", "commit_date": "2023-07-25T18:12:00Z", "commit_message": "improve intel instruction & operand formatting (#1463)\n\nThis fixes three issues when formatting an x86_64 instruction or its\r\noperands:\r\n\r\n1) Fix the order of operands when formatting the instruction to be the\r\n   AT&T syntax order.  If the instruction had three or more operands.\r\n   Conversion from the internal (Intel) order rotated right by 1 instead\r\n   of reversing the operands.\r\n\r\n2) Eliminate special treatment of register %kN as the first operand as\r\n   mask registers in Instruction::format as Operand::format already\r\n   formats these as masks (enclosed in braces) and not all uses of mask\r\n   registers are as a mask.\r\n\r\n3) Fix Operand::format to produce the correct disassembly operand\r\n   string.  The formatting of the internal Expression needs to be done\r\n   for some indirect values.  This was done in the Instruction::format\r\n   instead of directly in Operand::format\r\n\r\n* x86Formatter::getInstructionString - fixes 1, 2, 3\r\n\r\n* Operand::format - fixes 3\r\n\r\n* x86Formatter::formatRegister - cleanup, remove malloc that could leak", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e38d57c9904ab623350e90e0e3adcab2afcf2100", "commit_date": "2023-07-25T18:08:54Z", "commit_message": "fix x86_64 ret instruction formatting (#1457)\n\nThe ret instruction formats incorrectly with an operand of '(%rsp)'.  The\r\noperand should have been flagged as implicit so it is not included in\r\nthe output.\r\n\r\n- eliminate all but one overloaded Instruction::appendOperand` using\r\n  default parameters\r\n\r\n- add isImplicit parameter defaulting to false to\r\n  Instruction::addSuccessor\r\n\r\n- add isImplicit to the ret instruction's addSuccessor call to set the\r\n  ret_addr (which adds the operand to the Instruction object)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88a774dfa36208bc297b65dc18fdfe4e2e66140c", "commit_date": "2023-07-25T18:07:02Z", "commit_message": "modernize InstructionAPI::Operand class (#1456)\n\n* modernize InstructionAPI::Operand class\r\n\r\n- eliminate all but one of the constructors by using default parameters\r\n\r\n- remove destructor (unnecessarily virtual, and reset a member\r\n  shared_ptr), copy ctor, and copy assignment declarations to allow the\r\n  compiler to generate default versions that are equivalent or better\r\n  than the hand written versions\r\n\r\n- add default member initializers for all members\r\n\r\n- make Operand constructor explicit", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e17bc861ac69ddf6f55629b9912dca37e87d05d", "commit_date": "2023-07-25T17:41:03Z", "commit_message": "Fix x86 misspelled, incorrect, and invalid opcodes (#1421)\n\n* Fix spelling of 'vpperm' stringification\r\n\r\n* Fix spelling of 'vpcomd' stringification\r\n\r\n* Fix spelling of 'vprolvd' stringification\r\n\r\n* Fix spelling of 'vprolvq' stringification\r\n\r\n* Remove duplicate entry for 'e_vpsrlvq'\r\n\r\n* Rename 'vpclmullqlqdq' to 'vpclmulqdq'\r\n\r\n* Rename 'punpcklqd' to 'punpckldq'\r\n\r\n* Replace 'punpckhqd' with 'punpckhqdq'\r\n\r\n* Replace 'pcmpgdt' with 'pcmpgtd'\r\n\r\n* Remove instruction 'vpcmpequd'\r\n\r\nThis mnemonic does not exist in any of Intel Architecture Instruction\r\nSet Extensions, AMD Architecture Programmers Manual, or Intel\r\nArchitecutre Software Developer's Manual.\r\n\r\nThe encoding listed under 'SSET1E_66' is a reserved space.\r\n\r\n* Rename mnemonic for 'prefect_w' to 'prefetchw'\r\n\r\n* Rename 'pclmullqlqdq' to 'pclmulqdq'\r\n\r\nThis is a pseudo-opcode for pclmulqdq when imm8 is 0x0.\r\nThe encoding is 660F3A44, so the lookup table location is correct.\r\n\r\n* Remove 'mmxud'\r\n\r\nIt is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'movslq'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'pcommit'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Rename 'cmpsd_sse' to 'cmpsd'\r\n\r\n* Fix spelling of 'vphaddsw' mnemonic\r\n\r\n* Fix spelling of 'vblendpd' mnemonic\r\n\r\n* Remove redundant copy of 'prefetchwt1'\r\n\r\n* Remove redundant 'phsubsw'\r\n\r\n* Remove redundant 'sarx'\r\n\r\n* Remove redundant 'shlx'\r\n\r\n* Remove redundant 'vblendvpd'\r\n\r\n* Remove redundant 'vcmppd'\r\n\r\n* Remove redundant 'vcmpps'\r\n\r\n* Remove redundant 'vcmpsd'\r\n\r\n* Remove redundant 'vcmpss'\r\n\r\n* Remove redundant 'vpmaddubsw'\r\n\r\n* Remove redundant 'vpmaddwd'\r\n\r\n* Remove redundant 'vpmovsdb'\r\n\r\n* Remove redundant 'vpmovsdw'\r\n\r\n* Remove redundant 'vpmovsqb'\r\n\r\n* Remove redundant 'vpmovsqd'\r\n\r\n* Remove redundant 'vpmovsqw'\r\n\r\n* Remove redundant 'vpmovswb'", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d14dff71691f51fb6b96179a87b4cee6d3a34e6b", "commit_date": "2023-07-25T16:19:35Z", "commit_message": "Remove Object::dwarf_parse_aranges (#1462)\n\nIt's usage was removed by 4be991a7 in 2021.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d82356b795db373fd66b098a8ba6073a07ba6089", "commit_date": "2023-07-24T19:02:44Z", "commit_message": "Fix EM_AMDGPU to use RELA as Region Type (#1444)\n\nAccording to the llvm page\r\nhttps://llvm.org/docs/AMDGPUUsage.html#relocation-records\r\nAMDGPU backend generates Elf64_Rela records.\r\n\r\nThis fix added the case for EM_AMDGPU to\r\nstatic Region::RegionType getRelTypeByElfMachine\r\nsuch that it uses RELA instead of the default REL type.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "96f6344d195bb74f30e209c48ee64c8397421dcd", "commit_date": "2023-07-24T17:56:55Z", "commit_message": "Remove lazy initialization of IBSTrees in Symtab (#1454)\n\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes Symtab::mod_lookup threadsafe.\r\n\r\n* Fix includes in Function.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Fix includes in Variable.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Use Function.h instead of forward declarations\r\n\r\nThis removes duplicate typedefs, as well.\r\n\r\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes its use in\r\nSymtab::parseFunctionRanges threadsafe.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "649e43fa2d26aa3c5245b05bac1038f407c869a9", "commit_date": "2023-07-21T17:49:14Z", "commit_message": "Make Symtab::getContainingInlinedFunction lazy parsing threadsafe (#1452)\n\nThis fix does not address the thread safety issues in\r\nSymtab::parseFunctionRanges. That function is still thread unsafe and\r\nwill require separate modifications.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab915557f2ee64c538515fcdfed250e23dc40e19", "commit_date": "2023-07-14T23:39:33Z", "commit_message": "Clean up Symtab constructors (#1451)\n\n* Use default member initializers instead of initializer lists\r\n\r\nThere are members missing from the lists. This also simplifies the\r\nconstructors considerably.\r\n\r\n* Remove unhelpful message in default ctor\r\n\r\n* Delegate to default ctor in Symtab(MappedFile*)\r\n\r\nThis fixes the bug of inconsistent base initialization and ensures the\r\nconstructors are consistent.\r\n\r\n* Use delegating ctor for Symtab::Symtab(unsigned char*...)\r\n\r\nThis fixes the following bugs\r\n\r\n1. Invoke init_debug_symtabAPI before calling create_printf.\r\n\r\n2. Because this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.\r\n\r\n* Use delegating ctor for Symtab::Symtab(std::string...)\r\n\r\nBecause this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683b050d6132ce6a9e0cc5cad35d497b2d2d9cc2", "commit_date": "2023-07-14T21:08:09Z", "commit_message": "Explicitly delete unusable special member functions in Symtab (#1450)\n\nBecause there is a user-defined destructor, the compiler will not generate the special member functions (e.g., copy assignment operator). However, we explicitly delete them here to signal that this class is not copyable or movable.  The destructor is also moved to the top of the class to be next to the other special member functions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84786bd694d2c2163d6e8fbd2190271db1868ff3", "commit_date": "2023-07-14T20:20:25Z", "commit_message": "Remove Symtab::mfForDebugInfo (#1449)\n\nIt is never used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88bf2091da5aa9a018afb1f1db67fe6ffeb4773b", "commit_date": "2023-07-14T19:30:50Z", "commit_message": "Remove Symtab::checkPPC64DescriptorSymbols (#1448)\n\nThe definition was commented out in 3709ead48 in 2009.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7014ee1b08ffa17381b6f0bcda9b94368cb83937", "commit_date": "2023-07-14T19:30:30Z", "commit_message": "Remove Symtab copy constructor (#1447)\n\nThere are several reasons for this.\r\n\r\n1. It doesn't copy every member of the class\r\n2. IBSTree doesn't have a copy constructor\r\n3. mod_lookup_ and func_lookup_ are not copied, but are recreated in other member functions (e.g., mod_lookup()). This completely breaks the semantics of a copy ctor.\r\n4. Resets _ref_cnt to 1", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "beae2a07b5e0a40de54ee1aa972ac765e4d825b2", "commit_date": "2023-07-11T16:11:00Z", "commit_message": "add header files to directly define std:: syms (#1443)\n\n- update dyninst header files to directly include the standard header\r\n  file defining symbols from the standard C++ library that are used by\r\n  the dyninst header file; in some instances, the code relied on symbols\r\n  being defined via an unrelated include file indirectly including the\r\n  necessary header file leading to fragile code\r\n\r\n- minor other cleanups:  remove unnecessary header files, remove\r\n  definitions of names that are defined in a standard header file", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9696c64a3a1d6f41241d27c3c51820616490efa6", "commit_date": "2023-06-15T15:41:23Z", "commit_message": "Fix vector instruction lengths (#1439)\n\nThe following instruction decoded with the wrong length if the modrm\r\noperand specified a memory access as all the operand was incorrectly\r\nspecified to be a register only operand:\r\n\r\n- vcvtpd2udq\r\n- vcvtss2usi\r\n- vcvttpd2qq\r\n- vcvtudq2pd\r\n- vcvtudq2ps\r\n- vpblendd\r\n- vpermpd", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44d86e56068f62b9ac03f7d7537098fd3728fcdb", "commit_date": "2023-05-11T19:26:58Z", "commit_message": "Fix several resource leaks (#1435)\n\n* Local var leak in Symtab::addSymbol\r\n\r\nThis was found using cppcheck's memleak.\r\n\r\n* memCache::doOperation\r\n\r\nNot technically a leak, but cppcheck can't see through the 'push_back'.\r\n\r\n* PCProcess::hasPassedMain\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* parse_func::calcParentFunc\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* int_iRPC::setBinarySize\r\n\r\nFound using cppcheck's publicAllocationError.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8676f10714fb0bb7d0a3e7c65ec729d7db195d94", "commit_date": "2023-05-11T17:47:08Z", "commit_message": "Fix undefined behavior in integer operations (#1434)\n\n* Shifting signed 32-bit value by 31 bits is undefined behavior\r\n\r\nThis was found using cppcheck's shiftTooManyBitsSigned.\r\n\r\n* Signed to unsigned conversion in calculation\r\n\r\nThese were found using cppcheck's signConversion.\r\n\r\n* Fix signed overflow\r\n\r\nThis was found using cppcheck's integerOverflowCond.\r\n\r\n* Shifting negative value\r\n\r\nThis was found using cppcheck's shiftNegativeLHS.\r\n\r\n* BPatch_addressSpace::deleteSnippet: fix enumeral conversion in conditional", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c4a422834fbc3e6159ba00f10820f13c1958901e", "commit_date": "2023-05-10T19:01:00Z", "commit_message": "Prevent use of possibly-uninitialized local variable (#1433)\n\nThese were found using cppcheck's uninitvar and eraseDereference.\r\n\r\nFor the usages of iterator-like classes in process.C, they aren't strictly\r\nuninitialized variable usages since the classes in question are standard\r\nlayout types. It would be better to replace the usages there with list\r\nconstruction to avoid the static check altogether.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0c88bea297cb64cf147192242aaa3a4047cdb84", "commit_date": "2023-05-10T17:51:52Z", "commit_message": "Fix uninitialized member variables (#1431)\n\nThese were detected by cppcheck's uninitMemberVar*.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a73abaa9c7298a3e4ce0acf4eb14db8b1cb42fc", "commit_date": "2023-05-10T15:45:14Z", "commit_message": "Fix use of null pointer after check (#1432)\n\nThese were found using cppcheck's nullPointerRedundantCheck.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "68fc3d8a5f1527dcaa66c9455369c62e2b4fa54c", "commit_date": "2023-05-10T05:14:42Z", "commit_message": "Protect against self-assignment in copy constructors (#1430)\n\n* Protect against self-assignment in copy constructors\r\n\r\nThese were found by cppcheck:\r\n\r\ncommon/src/Node.C:198:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nNodeIterator &NodeIterator::operator=(const NodeIterator &rhs) {\r\n                            ^\r\ncommon/src/Edge.C:108:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nEdgeIterator &EdgeIterator::operator=(const EdgeIterator &rhs) {", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce097b5399fb654f68fbfe48e25e7a7bd567bf82", "commit_date": "2023-05-10T04:07:40Z", "commit_message": "Fix windows warnings (#1429)\n\n* Mismatched printf format arguments\r\n\r\nThese were found using cppcheck's invalidPrintfArgType_*.\r\n\r\n* Fix uninitialized member variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85fb0f95050c903bf1e1a1dbcacf1913dad1d73b", "commit_date": "2023-05-09T20:05:56Z", "commit_message": "Remove virtual calls in constructor/destructor (#1428)\n\n* AddressTranslateWin\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-win.C:49:17: style: Virtual function 'init' is called from constructor 'AddressTranslateWin(PID pid,PROC_HANDLE phandle)' at line 168. Dynamic binding is not used. [virtualCallInConstructor]\r\n   virtual bool init();\r\n\r\n* NodeIteratorPredicateObj\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:293:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateObj(Graph::NodePredicate::Ptr\r\np,NodeIterator&b,NodeIterator&e)' at line 331. Dynamic binding is not\r\nused. [virtualCallInConstructor]\r\n\r\n* NodeIteratorPredicateFunc\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:352:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateFunc(Graph::NodePredicateFunc\r\np,void*u,NodeIterator&b,NodeIterator&e)' at line 394. Dynamic binding is\r\nnot used. [virtualCallInConstructor]\r\n\r\n* InstructionDecoder_x86\r\n\r\nFound using cppcheck:\r\n\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: style: Virtual function 'setMode' is called from constructor 'InstructionDecoder_x86(Architecture a)' at line 144. Dynamic binding is not used. [virtualCallInConstructor]\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n                                                ^\r\ninstructionAPI/src/InstructionDecoder-x86.C:144:28: note: Calling setMode\r\n      if(a == Arch_x86_64) setMode(true);\r\n                           ^\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: note: setMode is a virtual function\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n\r\n* CFGFactor::destroy_block\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:117:18: style: Virtual function 'free_block' is called from destructor '~CFGFactory()' at line 92. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_block(Block * b);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:92:5: note: Calling destroy_block\r\n    destroy_block(b);\r\n    ^\r\nparseAPI/src/CFGFactory.C:182:5: note: Calling free_block\r\n    free_block(b);\r\n    ^\r\nparseAPI/h/CFGFactory.h:117:18: note: free_block is a virtual function\r\n    virtual void free_block(Block * b);\r\n\r\n* CFGFactor::free_func\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:116:18: style: Virtual function 'free_func' is called from destructor '~CFGFactory()' at line 95. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_func(Function * f);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:95:5: note: Calling destroy_func\r\n    destroy_func(f);\r\n    ^\r\nparseAPI/src/CFGFactory.C:172:4: note: Calling free_func\r\n   free_func(f);\r\n   ^\r\nparseAPI/h/CFGFactory.h:116:18: note: free_func is a virtual function\r\n    virtual void free_func(Function * f);\r\n\r\n* CFGFactor::free_edge\r\n\r\n* ~freebsd_process\r\n\r\nFound using cppcheck:\r\n\r\nproccontrol/src/freebsd.C:1046:17: warning: Member variable 'freebsd_thread::is_exited' is not initialized in the constructor. [uninitMemberVar]\r\nfreebsd_thread::freebsd_thread(int_process *p, Dyninst::THR_ID t, Dyninst::LWP l)\r\n                ^\r\nproccontrol/src/freebsd.h:122:17: style: Virtual function 'getEventQueue' is called from destructor '~freebsd_process()' at line 795. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual int getEventQueue();\r\n                ^\r\nproccontrol/src/freebsd.C:795:22: note: Calling getEventQueue\r\n    int eventQueue = getEventQueue();\r\n                     ^\r\nproccontrol/src/freebsd.h:122:17: note: getEventQueue is a virtual function\r\n    virtual int getEventQueue();", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6ab42a4da20f7d9a5a58c00a4835d337a95fef5", "commit_date": "2023-05-09T17:30:44Z", "commit_message": "AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak (#1427)\n\n* AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-sysv.C:1046:58: error: Resource leak: fd [resourceLeak]\r\n   if (read(fd, &e_hdr, sizeof(e_hdr)) != sizeof(e_hdr)) return base;\r\n                                                         ^\r\ncommon/src/addrtranslate-sysv.C:1048:28: error: Resource leak: fd [resourceLeak]\r\n   if (e_hdr.e_phoff == 0) return base;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5409c471292cb8b1c87e9b5ae1e94fa9b6eb573", "commit_date": "2023-05-09T17:09:20Z", "commit_message": "Make CondVar non-copyable, non-moveable (#1426)\n\nThis makes it consistent with std::condition_variable.\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]\r\n   mutex = new mutex_t;\r\n   ^\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]\r\n   mutex = new mutex_t;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "45614d7908e36d32d26126d2844d388c6936ba61", "commit_date": "2023-05-02T18:17:06Z", "commit_message": "Github CI: increase number of build jobs (#1424)\n\nGithub only allows one CPU core per job, but any number of threads. Testing shows that N=2 threads reduces build time by 2-2.5x, N=3 by 2.2x, and N=4 increases build time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e37524ab88b645328c1f02b5c4ab7ac0f7e8d3f", "commit_date": "2023-05-02T02:13:22Z", "commit_message": "Github CI: make compiler multi-build a cron job (#1425)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8952d3207763a26938e097e58ebe97b490c73cf", "commit_date": "2023-05-01T17:32:12Z", "commit_message": "CI compiler multibuilds (#1415)\n\n* Weekly build across all compiler versions and build types\r\n\r\n* Use DYNINST_WARNINGS_AS_ERRORS=ON instead of -Werror", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2e26598a5301ff900d2ca235db729d1dd4c4d350", "commit_date": "2023-05-01T16:45:24Z", "commit_message": "Use default TBB when doing CI spack build (#1423)\n\nDyninst now requires TBB >= 2019.9.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7621bc85ac0cda3bd1b2a17d78aac6d48c68280a", "commit_date": "2023-04-28T00:34:11Z", "commit_message": "Add ubuntu-22.04 to dev container build (#1419)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "719036aeb55c459a355afb91188cfa4d7d465bc9", "commit_date": "2023-04-27T23:51:51Z", "commit_message": "Refactor Dockerfile.ubuntu (#1420)\n\n* Move elfutils logic into build_elfutils.sh\r\n\r\n* Whitespace\r\n\r\n* Copy in dependencies.versions\r\n\r\nThis is no longer done in the base container because it didn't make\r\nsense there as that image should never change.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8d1a313be087154aad95d660b9fe2b34f4da492", "commit_date": "2023-04-27T22:33:27Z", "commit_message": "warning fix:  stack frame size (#1418)\n\n- when compiling with clang 15 and 16 in addition to clang 14,\r\n  allow a 40000 stack frame size", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a9c9e061ea6b41b93151f0ed3b34208346b4881", "commit_date": "2023-04-27T21:28:12Z", "commit_message": "Make InstructionAPI::isArrayIndexValid const. (#1416)\n\nclang complains:\r\n\r\n  'constexpr' non-static member function will not be implicitly 'const'  in C++14; add 'const' to avoid a change in behavior [-Werror,-Wconstexpr-not-const]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "739ad57883f032fb18a6c741f0c2f98e9a766bc7", "commit_date": "2023-04-25T17:03:44Z", "commit_message": "CMake modernization (#1391)\n\n# Changes to building Dyninst\r\n- Minimum CMake version is 3.14.0\r\n- STERILE_BUILD is now deprecated\r\n- ENABLE_LTO was renamed to DYNINST_ENABLE_LTO\r\n- CMAKE_EXPORT_COMPILE_COMMANDS is no longer set\r\n- Platform detection is done natively in CMake\r\n  - full support for Linux on x86, AMD64, ppc64le, and aarch64/ARMv8\r\n  - experimental support for 32-bit FreeBSD and Windows on x86\r\n- Custom install targets <target>-install have been removed\r\n- Installation subpaths (bin, lib, include, etc.)  are no longer user-configurable\r\n- Static versions of Dyninst libraries now depend on other static Dyninst libraries\r\n  - For example, libDynElf.a now depends on libcommon.a, not libcommon.so\r\n- Libraries that cannot build with symlight now warn when LIGHTWEIGHT_SYMTAB=ON\r\n- User build options passed via CMAKE_<LANG>_FLAGS are correctly preserved and override the builtin options\r\n- <PackageName>_ROOT_DIR now implies <PackageName>_NO_SYSTEM_PATHS and sets <PackageName>_ROOT\r\n  - This forces CMake to find the package at the given location or in CMAKE_PREFIX_PATH\r\n  - When using CMake >= 3.16, searching CMAKE_PREFIX_PATH can be disabled with CMAKE_FIND_USE_CMAKE_PATH=OFF\r\n  - For example, -DElfUtils_ROOT_DIR=/some/path sets ElfUtils_NO_SYSTEM_PATHS=ON and ElfUtils_ROOT=/some/path\r\n\r\n## RPATH handling\r\n- CMP0060 is active and so libraries are linked by their full paths even in implicit directories (e.g., /usr/lib/foo.so instead of -lfoo)\r\n- Populate RPATHs for binaries in the build tree: set(CMAKE_SKIP_BUILD_RPATH FALSE)\r\n- Do not use the install path as the RPATH: set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)\r\n  - $ORIGIN is used instead\r\n- Add paths to any directories outside the project that are in the linker search path or contain linked library files: set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\r\n\r\n## Third-party libraries (tpl)\r\n- The ability to build tpls from source has been removed\r\n- All libraries must have a CMakeConfig.cmake\r\n- Minimum versions\r\n  - Boost: 1.71.0\r\n  - TBB/oneapi-tbb: 2019.9\r\n  - elfutils: 0.186\r\n- An imported interface named Dyninst::<library> is created for each library\r\n  - includes are marked SYSTEM so they don't produce warnings\r\n  - exported in DyninstConfig.cmake as per https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n- pkgconfig is used to find elfutils and valgrind\r\n  - if pkgconfig fails, a manual search is done\r\n  - This can be disabled with  ElfUtils_NO_SYSTEM_PATHS=ON\r\n\r\n# Changes to consuming Dyninst as a CMake project\r\n- All targets are in the Dyninst namespace; e.g., symtabAPI is now Dyninst::symtabAPI\r\n- Each third-party library has an associated imported interface named Dyninst::<library>, e.g., Dyninst::Boost\r\n  - Users are encouraged to use these, if the same library is need in their applications\r\n- DYNINST_LIBRARIES has been removed\r\n- DYNINST_INCLUDE_DIR is now deprecated and will be removed in a future version\r\n  - Use the provided targets, instead\r\n- DYNINST_INTERNAL_DEFINES is now deprecated and will be removed in a future version\r\n- DYNINST_PLATFORM is now deprecated and will be removed in a future version\r\n- find_package(Dyninst ... COMPONENTS ...) now works correctly\r\n- Version constraints for find_package(Dyninst X.Y.Z) now work correctly\r\n  - Dyninst only guarantees ABI compatibility between major releases, so only the same major versions are compatible\r\n\r\nUsers who are not ready to fully migrate to the new Dyninst CMake package may use the following to preserve backward compatibility:\r\n\r\ncmake\r\nif(TARGET Dyninst::common)\r\n  foreach(t common symtabapi ...)\r\n    add_library(${t} INTERFACE IMPORTED)\r\n    target_link_libraries(${t} INTERFACE Dyninst::${t})\r\n  endforeach()\r\nendif()\r\n\r\n* Update minimum CMake version to 3.13.0\r\n\r\n* Rename CMake files to prevent name collisions\r\n\r\nWhen consumed as a subproject, the CMake files could be imported into the parent project where the filenames could collide.\r\n\r\n* Prepend to CMAKE_MODULE_PATH instead of overwriting\r\n\r\n* Fix capitalization error in FindThread_DB\r\n\r\nThis should silence the warning about Thread_Db versus Thread_DB\r\n\r\n* Require CMake package for TBB (#1322)\r\n\r\n* Make libdl/dbghelp private linkage\r\n\r\n* Remove TBB flags from toolkits that don't use TBB\r\n\r\n* Remove FindTBB.cmake\r\n\r\nAll supported TBB versions ship as CMake packages, so this is no longer\r\nneeded.\r\n\r\n* Remove from-source build option\r\n\r\n* Create an imported target for TBB used by Dyninst\r\n\r\nThis is needed to force the include directories to be considered 'system' directories so that compiler warnings from TBB sources are ignored\r\n\r\n* Rename cmake/ThreadingBuildingBlocks.cmake -> cmake/tpls/DyninstTBB.cmake\r\n\r\nThis is needed to keep the namespace clean for DyninstConfig.cmake\r\n\r\n* Export TBB as part of the Dyninst CMake package\r\n\r\nThis is required by the CMake guidelines:\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nIn particular,\r\n  \"All required dependencies of a package must also be found in the package configuration file\"\r\n\r\n* Format DyninstTBB.cmake\r\n\r\n* Boost CMake modernization (#1330)\r\n\r\n* Remove FindBoost.cmake\r\n\r\nUse the one provided by CMake so we don't have to maintain this one.\r\n\r\n* Remove from-source build\r\n\r\n* Remove user-configurable version\r\n\r\n* Force use of multithreaded libraries\r\n\r\nWe don't need to include Threads here. Boost will do that.\r\n\r\n* Disable use of statically-linked runtime\r\n\r\n* Remove Boost_DEBUG\r\n\r\n* Always enable searching system paths\r\n\r\n* Unify path calculations, pass to find_package as hints\r\n\r\n* Clean up comments\r\n\r\n* Use include_guard\r\n\r\n* Allow using Boost's CMake package\r\n\r\nIt is now provided by default since 1.70.0 which is the current minimum\r\nacceptable version.\r\n\r\n* Remove rest of cache variables\r\n\r\n* Remove MSVC-specific template define\r\n\r\nWe can add this back, if we find there are newer VCs still affected.\r\n\r\n* Make Dyninst::Boost imported interface target\r\n\r\nThis is needed to make the include directories be \"system\" directories\r\nso that warnings in their headers do not propagate into Dyninst.\r\n\r\n* Do not add Boost as a dependency for all libs\r\n\r\n* Make find_package QUIET\r\n\r\n* Use Boost_* variables instead of calculating includes, libs, etc.\r\n\r\n* Make a header-only wrapper target\r\n\r\n* Add to Dyninst package\r\n\r\n* Update CMakeLists\r\n\r\n* Set Boost_NO_WARN_NEW_VERSIONS\r\n\r\n* Bump minimum version to 1.71.0\r\n\r\n* Elfutils cmake modernization (#1333)\r\n\r\n* Rename FindLibDwarf -> FindLibDW\r\n\r\n* Update FindLibDW\r\n\r\n* Rename FindLibElf -> FindLibELF\r\n\r\n* Update FindLibELF\r\n\r\n* Create FindElfutils\r\n\r\n* Update FindLibDebuginfod\r\n\r\n* Update DyninstElfUtils\r\n\r\n* Update the CMakeLists to use new targets\r\n\r\n* Use CMP0074 in updated Find modules\r\n\r\nThis enables use of <Package>_ROOT variables when find_package is\r\ninvoked.\r\n\r\n* Provide default dummy interface target for ElfUtils::ElfUtils\r\n\r\nNeeded for non-Unix platforms.\r\n\r\n* Fix rebase bug in CMakeLists.txt\r\n\r\n* Export DyninstElfUtils\r\n\r\n* Forward QUIET flag to pkg_check_modules\r\n\r\n* Forward version to pkg_check_modules\r\n\r\n* Use lib from pkg-config, if found\r\n\r\n* Clean up internal variables\r\n\r\n* Simplify cache variable handling\r\n\r\n* Use full linkage name for libs returned by pkg-config\r\n\r\n* Separate out dependent libraries in FindLibDW\r\n\r\nSome platforms include libelf as a dependency, but IMPORTED_LOCATION accepts only a single entry. Store the rest in IMPORTED_LINK_DEPENDENT_LIBRARIES.\r\n\r\n* Fix quoting bug in FindLibDW\r\n\r\n* Fix lib check in FindLibDW\r\n\r\n* Manually set PC_<XXX>_INCLUDE_DIRS when FindPkgConfig misses it\r\n\r\nFindPkgConfig uses the output from pkg-config --cflags-only-I <lib> to set PC_<XXX>_INCLUDE_DIRS. Because libelf is usually in a system directory, pkg-config will return nothing for this. FindPkgConfig stores the actual includedir variable from the PC file, so we can fetch it from there.\r\n\r\n* Libiberty cmake modernization (#1334)\r\n\r\n* LibIberty cmake modernization\r\n\r\n* Use INCLUDE_DIRS directly\r\n\r\n* Threaddb cmake modernization (#1338)\r\n\r\n* Update FindThread_DB\r\n\r\n* Update thread_db\r\n\r\n* Update docs URL\r\n\r\n* Use OpenMP target (#1339)\r\n\r\nThis also provides a dummy target so we don't have to do any additional checking when USE_OpenMP=OFF. We only use OpenMP_CXX, so I didn't create a target for the other languages (C,Fortran).\r\n\r\n* Valgrind cmake modernization (#1340)\r\n\r\n* Update valgrind\r\n\r\n* Add version check in Find module\r\n\r\n* Remove Valgrind_LIBRARIES\r\n\r\nThey are versioned by architecture, so are hard to nail down with\r\nfind_library. We also don't need them (at least not yet).\r\n\r\n* Make dummy when ADD_VALGRIND_ANNOTATIONS=OFF\r\n\r\n* Add compile defs\r\n\r\n* Update CMakeLists.txt\r\n\r\n* Make the dummy IMPORTED\r\n\r\n* Fix bug with version handling in DyninstBoost\r\n\r\n* Use _min_version in DyninstBoost\r\n\r\nThis is so the CI version check will work uniformly\r\n\r\n* Add existence check for Dyninst::Boost before creating target\r\n\r\n* Clean up find_package flag handling in Find modules\r\n\r\n* Make variable exports uniform across Find modules\r\n\r\n* Coalesce calls to set_target_properties in Find modules\r\n\r\n* Fix bug in DyninstElfutils when calling find_package LibDebuginfod\r\n\r\n* Make just one exported target in FindElfutils\r\n\r\n* Add target existence check in DyninstTBB\r\n\r\n* Add SYSTEM property to Elfutils includes\r\n\r\n* Remove export of DYNINST_LIBRARIES\r\n\r\n* Preserve user's module path when looking for Dyninst modules\r\n\r\n* Manually set legacy DYNINST_INCLUDE_DIR\r\n\r\nThis is now deprecated.\r\n\r\n* Use CMAKE_CURRENT_LIST_DIR intead of DYNINST_CMAKE_DIR\r\n\r\n* Install Find modules for third-party libraries\r\n\r\n* Remove unused DyninstConfigVersion.cmake\r\n\r\n* Remove unneeded comments in DyninstOptions\r\n\r\n* Move all options to DyninstOptions\r\n\r\n* Remove modification of CMAKE_CONFIGURATION_TYPES\r\n\r\nWe just support the usual configs.\r\n\r\n* Move Dyninst version strings to base CMakeLists.txt\r\n\r\n* Move internal includes into base CMakeListst.txt\r\n\r\nThis ensures that all user options and internal settings are in place\r\nbefore third-party dependencies are configured.\r\n\r\n* Clean up 3rd party includes in base CMakeLists.txt\r\n\r\n* Remove unused version strings\r\n\r\n* Remove unneeded 'add_dependencies(common boost)' in base CMakeListst.txt\r\n\r\nThis is now handled directly in CMake recipe for common.\r\n\r\n* Remove unused testsuite include in base CMakeLists.txt\r\n\r\n* Update the project declaration\r\n\r\n* Move setting of CMAKE_BUILD_TYPE to base CMakeLists.txt\r\n\r\nThis keeps all CMake-level variables in one place.\r\n\r\n* Don't set CMAKE_EXPORT_COMPILE_COMMANDS\r\n\r\nThe user should set this.\r\n\r\n* Move BUILD_SHARED_LIBS into base CMakeLists.txt\r\n\r\n* Remove unused INSTALL_DOC_DIR\r\n\r\n* Make cmake_minimum_required a FATAL_ERROR\r\n\r\n* Move rpath and shared lib settings into DyninstLibrary\r\n\r\n* Move installation items into DyninstInstall.cmake\r\n\r\n* Automatically generate DyninstConfigVersion.cmake\r\n\r\n* Use configure_package_config_file to generate DyninstConfig.cmake\r\n\r\nThis will provide more utilities to make a more robust Config.cmake\r\n\r\n* Use INSTALL_INCLUDE_DIR to set DYNINST_INCLUDE_DIR\r\n\r\n* Use PACKAGE_INIT in Config.cmake.in\r\n\r\nAlso use it for DYNINST_INCLUDE_DIR\r\n\r\n* Don't explicitly set Dyninst_FOUND\r\n\r\nThe caller's find_package will do this.\r\n\r\n* Remove unused DyninstSystemPaths.cmake\r\n\r\n* Simplify visibility settings and move to DyninstLibrary\r\n\r\n* Move SYMREADER calculation to base CMakeLists.txt\r\n\r\nIt is needed in several places before DyninstLibrary is included.\r\n\r\n* Merge platform calculations into a DyninstPlatform.cmake\r\n\r\n* Remove DyninstVisibility include\r\n\r\n* Moved configure_file back to base CMakeListst\r\n\r\nThe ordering matters until common gets an explicit list of header files (currently uses a glob).\r\n\r\n* Remove DyninstConfigVersion.cmake.in\r\n\r\nThis isn't needed anymore since the version file is generated automatically.\r\n\r\n* Remove custom target install\r\n\r\ncmake_install.cmake isn't intended to be used that way.\r\n\r\n* Remove install logic from dyninst_library\r\n\r\nThat is now handled in DyninstInstall.\r\n\r\n* cmake-format: set tab size to 2\r\n\r\n* cmake-format: don't format comments\r\n\r\n* Calculate platform from CMake-provided mechanisms\r\n\r\nThese are equivalent to the existing bash, but more adaptable.\r\n\r\n* Map stringy names into CMake variables\r\n\r\n* Replace Windows platform check with DYNINST_OS_Windows\r\n\r\n* Replace Linux platform check with DYNINST_OS_Linux\r\n\r\n* Replace FreeBSD platform check with DYNINST_OS_FreeBSD\r\n\r\n* Replace x86 platform check with DYNINST_OS_x86_64\r\n\r\n* Replace ppc platform check with DYNINST_ARCH_ppc64le\r\n\r\n* Replace aarch64 platform check with DYNINST_ARCH_aarch64\r\n\r\n* Replace mangled platform checks with explicit DYNINST_{OS,ARCH}\r\n\r\n* Rename PLATFORM to DYNINST_PLATFORM and export it as legacy\r\n\r\nThis is only used in the test suite.\r\n\r\n* Don't pass -m64 explicitly on ppc64le\r\n\r\nWe only support 64-bit ppc, so this is redundant and non-portable.\r\n\r\n* Remove commented-out define for aarch64\r\n\r\n* Simplify CapArchDef\r\n\r\nWith the new variables, only one pass over the OS names is needed.\r\n\r\n* Allow FreeBSD to build on i386\r\n\r\nI previously thought it was only allowed on x86_64, but there is an old platform called i386-unknown-freebsd7.2.\r\n\r\n* Add Windows to DYNINST_PLATFORM\r\n\r\n* Replace usage of WIN32 with DYNINST_OS_Windows\r\n\r\n* Replace usage of UNIX with DYNINST_OS_UNIX\r\n\r\n* Merge Linux+FreeBSD checks into UNIX check\r\n\r\n* symtabAPI - replace i386 check\r\n\r\n* Use 'option' instead of 'set(... CACHE ...)'\r\n\r\n* Deprecate STERILE_BUILD\r\n\r\n* DyninstOptions - use 'OFF' instead of 'NO'\r\n\r\n* Get rid of dyninst_link_private_library\r\n\r\nWe require CMake >= 3.13.0 so this is no longer needed.\r\n\r\n* Rename SOVERSION to DYNINST_SOVERSION\r\n\r\nSOVERSION is a keyword.\r\n\r\n* Replace LIBVERSION with DYNINST_LIBVERSION\r\n\r\nFor clarity and consistency.\r\n\r\n* Replace DYNINST_ROOT with PROJECT_SOURCE_DIR\r\n\r\n* Move library settings into DyninstLibrarySettings.cmake\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR absolute\r\n\r\nIn 'install', they are relative to CMAKE_INSTALL_PREFIX by default.\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR cache variables\r\n\r\nThere's no need to let the user modify these locations.\r\n\r\n* DyninstLibrarySettings - reuse INSTALL vars\r\n\r\nThis just makes sure changes are propagated.\r\n\r\n* DyninstLibrarySettings - remove INSTALL_BIN_DIR\r\n\r\nIt's not used.\r\n\r\n* DyninstLibrary - rename INSTALL_*_DIR -> DYNINST_INSTALL_*DIR\r\n\r\nThis is more in line with the naming convention of GNUInstallDirs. We\r\ncould use GNUInstallDirs directly, but there's no need to let the user\r\nconfigure the install directory layout.\r\n\r\n* DyninstLibrarySettings - Use 'Dyninst' instead of PROJECT_NAME\r\n\r\nThis is the only placed PROJECT_NAME is used, so make it consistent.\r\n\r\n* DyninstLibrarySettings - update RPATH handling\r\n\r\n* DyninstLibrary - don't manually create cmake_install.cmake\r\n\r\nThese are automatically created and installed by 'install'.\r\n\r\n* DyninstLibrary - Merge calls to set_target_properties\r\n\r\n* DyninstLibrary - Cleanup superfluous variable usage\r\n\r\n* DyninstLibrary - add Windows defines to targets instead of directories\r\n\r\n* DyninstLibrary - add LIGHTWEIGHT_SYMTAB, SW_ANALYSIS_STEPPER to targets\r\n\r\n* DyninstLibrary - add DYNINST_DIAGNOSTIC_NO_SUPPRESSIONS to targets\r\n\r\n* DyninstLibrary - export all targets to DyninstTargets.cmake\r\n\r\n* DyninstLibrary - don't treat each library as a separate component\r\n\r\n'COMPONENT' in 'install' is used to group targets into \"bags\" of useful\r\nfeatures that can be independently installed using cmake --install .\r\n--component .... That doesn't work for Dyninst. Note: This is\r\northogonal to the concept of a COMPONENT in find_package.\r\n\r\n* DyninstLibrary - remove CLEAN_DIRECT_OUTPUT\r\n\r\nWe no longer offer per-library build targets.\r\n\r\n* DyninstLibrary - remove WITHOUT_SYMTAB_API and WITHOUT_SYMLITE\r\n\r\nThese are never used.\r\n\r\n* DyninstLibrary - refactor global defines in 'dyninst_library'\r\n\r\n* DyninstLibrary - Move calculation of SYMREADER\r\n\r\n* DyninstLibrary - rename 'target' to '_target'\r\n\r\n'target' is a keyword\r\n\r\n* DyninstLibrary - add named arguments\r\n\r\n* DyninstLibrary - rename SRC_LIST with _target_SOURCE_FILES\r\n\r\nThe latter is created from the named argument 'SOURCE_FILES'.\r\n\r\n* DyninstLibrary - Replace ACTUAL_TARGETS with _all_targets\r\n\r\n* DyninstLibrary - make headers part of library declaration\r\n\r\nThis tracks file changes to signal rebuilds.\r\n\r\n* DyninstLibrary - add links, properties, includes to all targets\r\n\r\nThis synchronizes the SHARED and STATIC libraries.\r\n\r\n* DyninstLibrary - link private and public deps separately\r\n\r\n* DyninstLibrary - Set include directories on interfaces\r\n\r\nThis replaces using PUBLIC_HEADERS which is really intended for use with\r\nMacOS Framework targets.\r\n\r\n* DyninstLibrary - remove LIBRARY_OUTPUT_DIRECTORY\r\n\r\nThe default is CMAKE_CURRENT_BINARY_DIR, so no need to specify it.\r\n\r\n* DyninstLibrary - Apply DEFINES passed to dyninst_library\r\n\r\n* DyninstLibrary - make SHARED library explicit\r\n\r\n* DyninstLibrary - don't deref Boolean variable\r\n\r\n* DyninstLibrary - update message\r\n\r\n* DyninstLibrary - Install headers, preserving the directory structure\r\n\r\n* DyninstLibrary - \"return\" the list of generated target names\r\n\r\n* DyninstLibrary - add directory-level include guard\r\n\r\n* common - remove spurious files\r\n\r\nAdded in 2015.\r\n\r\n* common - move generation of dyninstversion.h into CMakeLists.txt\r\n\r\n* common - add global include guard in CMakeLists\r\n\r\n* common - explicitly list header files in CMakeLists\r\n\r\nThis makes it easier to see what the actual public files are.\r\n\r\n* common - refactor source list calculation\r\n\r\n* common - move include of DyninstLibrary into subdirectory\r\n\r\n* common - use new dyninst_library\r\n\r\n* common - set includes and Windows stuff on all targets\r\n\r\n* common - write 'dyninstverison.h' into source dir\r\n\r\n* elf - make a dummy target for non-Unix OSes\r\n\r\n* elf - use new dyninst_library\r\n\r\n* dwarf - use new dyninst_library\r\n\r\nThe changes here are the same as for elf/CMakeLists\r\n\r\n* symlite - make symlite/h/SymLite-elf.h publicly consumable\r\n\r\nIt refers to files in the build tree that aren't available in the\r\ninstall tree. Although this file is in the install tree, it was never\r\nconsumable by users. Updating this is of questionable utility, but it at\r\nleast gives us the opportunity to write tests against the public\r\ninterface.\r\n\r\n* symlite - use new dyninst_library\r\n\r\n* instructionAPI - use new dyninst_library\r\n\r\n* symtabAPI - use new dyninst_library\r\n\r\n* proccontrol - use new dyninst_library\r\n\r\n* parseAPI - use full path to common/h/util.h.\r\n\r\nThis prevents confusion with parseAPI/h/util.h.\r\n\r\n* parseAPI - use new dyninst_library\r\n\r\nThis one is different from the rest because parseAPI and dataflowAPI\r\nhave circular dependencies on each other, so it's not currently possible\r\nto split them up.\r\n\r\n* stackwalk - use new dyninst_library\r\n\r\nPreviously, FORCE_FRAME_POINTER was applied to _all_ of Dyninst. The\r\ncommit comments said it was supposed to be just for the stackwalk\r\nsources, so that is the new behavior.\r\n\r\n* stackwalk - incorporate check of SW_ANALYSIS_STEPPER\r\n\r\nIt only affects stackwalk, so no need to put it on all of the targets.\r\n\r\n* stackwalk - put SW_ANALYSIS_STEPPER check in post-processing\r\n\r\nThis tidies up the code a bit.\r\n\r\n* patchAPI - use new dyninst_library\r\n\r\n* dyninstAPI - use absolute include path for 'debug.h'\r\n\r\n* dyninstAPI - add missing include for Dyninst::Address\r\n\r\nThis was transitively included, but breaks when reording includes.\r\n\r\n* dyninstAPI - add missing include for std::set\r\n\r\n* dyninstAPI - use new dyninst_library\r\n\r\n* dynC_API - use new dyninst_library\r\n\r\n* parseThat - use new dyninst_library\r\n\r\n* dyninstAPI_RT - use new dyninst_library\r\n\r\n1. SRC_ASSEMBLY was never used. The assembly files have always been\r\nexplicitly listed.\r\n\r\n2. We are still linking libdl.so on the static versions of the runtime.\r\nThis hasn't been an issue in the past, so we'll leave it.\r\n\r\n3. The creation of the lists of source files has redundant checks in it,\r\nbut this version is much clearer on what is actually happening.\r\n\r\n4. CHECK_C_COMPILER_FLAG_EXTENDED was removed since CMake now supports a\r\nmuch larger set of compilers and Dyninst has dropped support for HP,\r\nSun, and XL.\r\n\r\n5. The config is much less noisy. There was no reason to determine if\r\n32-bit support would work when the user didn't ask for it. Now, the\r\nconfig will fail if the user asks for 32-bit libraries and the compiler\r\ncan't create them.\r\n\r\n* Remove top-level project includes\r\n\r\nAll of the necessary includes are now handled by each toolkit via\r\nexplicit import/export of targets and include directories.\r\n\r\n* Remove top-level check for SYMREADER\r\n\r\nThe respective CMakeLists now handle this.\r\n\r\n* Add better handling of Threads/pthread\r\n\r\n1. Move Threads include into a tpls module\r\n\r\n2. Link against Threads::Threads instead of 'pthread'\r\n\r\n3. Add explicit dependencies in dyninstAPI and dyninstAPI_RT (they were\r\nimplicit before).\r\n\r\n* DyninstConfig - Correctly detect presence of COMPONENTS on import\r\n\r\nThis previously didn't work at all because DYNINST_${COMP}_FOUND should\r\nhave been spelled Dyninst_${COMP}_FOUND. This is simpler and allows the\r\nuse of check_required_components directly.\r\n\r\n* DyninstConfig - Remove unneeded and (now) incorrect comments\r\n\r\n* Make an OpenMP tpl module\r\n\r\nThis will make it easier to export OpenMP in DyninstConfig. It also makes CMakeLists.txt have just straight-line code.\r\n\r\n* Include all third-party libraries in DyninstConfig\r\n\r\nThis is explicitly required by the CMake documentation:\r\n\r\n  \"All required dependencies of a package must also be found in the\r\npackage configuration file.\"\r\n\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nThis also ensures that the custom Dyninst:: targets are always available\r\nto consumers.\r\n\r\n* Ensure static libraries depend on static Dyninst libraries\r\n\r\nWhen creating a static Dyninst library, ensure that it depends on the\r\ncorresponding static Dyninst library. For example, libDynElf.a should\r\ndepend on libcommon.a, not libcommon.so.\r\n\r\n* DyninstWarnings - Ignore no-pragma warnings for non-Werror builds\r\n\r\n* DyninstCapArchDef - rename UNIFIED_DEFINES\r\n\r\nDYNINST_PLATFORM_CAPABILITIES is more descriptive.\r\n\r\n* DyninstCapArchDef - add include guard\r\n\r\n* DyninstLibrary - add DYNINST_PLATFORM_CAPABILITIES to all targets\r\n\r\n* DyninstLibrary - add documentation\r\n\r\n* DyninstLibrary - update comment about install dir structure\r\n\r\n* DyninstLibrary - install runtime in 'bin'\r\n\r\n* Include 'src' and 'h' subdirectories in BUILD_INTERFACE\r\n\r\nEvery toolkit has a similar directory structure, so we can do this\r\nin just one location instead of in each CMakeLists.\r\n\r\n* Unswitch loops for platform-specific target updates in CMakeLists\r\n\r\nThis is really a code beautification.\r\n\r\n* Remove DYNINST_LIBVERSION\r\n\r\nIt's never different from DYNINST_VERSION and has no special purpose.\r\n\r\n* Remove system path detection in RPATH calculations\r\n\r\nWe use CMAKE_BUILD_WITH_INSTALL_RPATH to ensure the install path is not\r\nin RPATH/RUNPATH, but then this code would add it back if the install\r\ndirectory isn't a system path.\r\n\r\n* DyninstLibrary - simplify regex for header install\r\n\r\n* Rename cmake/version.h.in to cmake/dyninstversion.h.in\r\n\r\nThis makes the generated file match the generator file name.\r\n\r\n* DyninstLibrary - install from _target_PUBLIC_HEADER_FILES\r\n\r\n_public_headers was only incidentally present from the file including\r\nthis one.\r\n\r\n* parseAPI - make headers PRIVATE in dyninst_library\r\n\r\nWe manually install them because of how dataflowAPI is consumed.\r\n\r\n* Issues warning when toolkit cannot be built with LIGHTWEIGHT_SYMTAB\r\n\r\n* CMake modernization - update compiler flags (#1374)\r\n\r\n* Fix spelling of LibDW_INCLUDE_DIRS when marking it as advanced\r\n\r\n* Mark STERILE_BUILD as advanced\r\n\r\n* Mark Boost_DIR as advanced\r\n\r\n* Mark TBB_DIR as advanced\r\n\r\n* Mark Thread_DB_{INCLUDE_DIRS,LIBRARIES} and as advanced\r\n\r\n* Update README\r\n\r\n* Add gfx908 public headers\r\n\r\nThese somehow didn't make it through the rebase\r\n\r\n* Make flags for RelWithDebInfo and Release match\r\n\r\n* Disable cmake-format for extra flags in DyninstWarnings\r\n\r\n* Propagate ElfUtils_ROOT_DIR to FindLib{ELF,DW,Debuginfod}\r\n\r\n* Use 'set' instead of 'option' for stringy options\r\n\r\n* Add more cmake-format exceptions in DyninstWarnings\r\n\r\n* Add <Package>_NO_SYSTEM_PATHS to elf, dw, debuginfod\r\n\r\nThis is used to exclude system directories from the search process.\r\n\r\n* Have ElfUtils_ROOT_DIR override search paths\r\n\r\nIf the user provides a value, then no system paths (aside from the ones\r\nin CMAKE_PREFIX_PATH) are searched. This lets the user 'force' a\r\nlocation for elfutils.\r\n\r\n* Remove explicit version fail check in elfutils find-modules\r\n\r\n* Move ElfUtils_ROOT_DIR check into DyninstElfutils\r\n\r\n* Add LibIberty_NO_SYSTEM_PATHS\r\n\r\n* Add Valgrind_NO_SYSTEM_PATHS\r\n\r\n* Remove explicit version check from FindValgrind\r\n\r\n* Boost - use new meaning of Boost_ROOT_DIR\r\n\r\n* Fix typo in DyninstElfUtils\r\n\r\n* Fix bug when setting path flags\r\n\r\n* TBB - use new meaning of TBB_ROOT_DIR\r\n\r\n* Add support for common/h/unaligned_memory_access.h\r\n\r\n* Set default DYNINST_LINKER to empty\r\n\r\nThis will use the default linker. lld is the LLVM linker.\r\n\r\n* Make requesting an unknown component an error\r\n\r\n* Always build libdyninstAPI_RT.a\r\n\r\nThis is always needed by the test suite and keeps the old behavior of having it built by default.\r\n\r\n* Add DYNINST_FORCE_RUNPATH option\r\n\r\nSetting this flag forces the linker to use RUNPATH instead of RPATH.\r\nThis is most useful for working with older RedHat distros.\r\n\r\n* Reduce number of public link dependencies\r\n\r\nThis reduces the number of transitive links that have to be done by\r\nbinaries linking against Dyninst.\r\n\r\n* Make elfutils dependency public for symtab\r\n\r\nIt's needed in the Module.h public header.\r\n\r\n* Require TBB >=2019.9\r\n\r\nWhen building from source, versions before 2019.9 incorrectly set the\r\nversion in TBBConfigVersion.cmake. For example, 2018.6 sets the version\r\nto 2018.0 because it uses the TBB_{MAJOR,MINOR}_VERSION from tbb_stddef.h\r\ninstead of doing the calculation based on the engineering version.\r\n\r\nThis also unifies the versions required when compiling with gcc and clang.\r\n\r\nTBB 2018.6 was released in Oct 2018 and 2019.9 was released in Oct 2019,\r\nso this just bumps the requirement by just a year even though there are\r\nat least 9 releases in between.\r\n\r\n* Update Boost version in docker/dependencies.versions\r\n\r\n* Update filenames in dependency-version CI check\r\n\r\n* Update variable names in dependency-version CI check\r\n\r\n* Make elfutils dependency public for dynElf\r\n\r\n* bump CMake minimum version to 3.14.0\r\n\r\nThe 3.13.* family requires every 'install' to specify a \"LIBRARY\r\nDESTINATION\". We don't need or want that in the custome parseAPI install\r\n(line ~130) for exporting the public headers.\r\n\r\n* Add cmake to dependency-version CI check\r\n\r\n* Rename cdna2 -> gfx90a in new layout\r\n\r\n* Always create list of static-only sources in dyninstAPI_RT\r\n\r\n* Add common/h to BUILD_INTERFACE in 32-bit libdyninstAPI_RT\r\n\r\n* Fix building with symLite\r\n\r\nThe headers from symtabAPI are still required, even when building with symLite.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e93225713b1633a7bf6ff0d9a89c409db802173", "commit_date": "2023-04-21T19:58:43Z", "commit_message": "Add callback for parsing unknown instructions (#1276)\n\n* Add callback declarations for unknown instructions in InstructionDecoder\r\n\r\n* Update definition of callback interface\r\n\r\nThis also makes 'unknown_instruction' inconstructible.\r\n\r\n* make isValid the same as isLegalInsn\r\n\r\nThis makes it impossible to make an Instruction object from a failed\r\ndecoding process. This only affects x86.\r\n\r\n* Detect illegal instructions sooner in doIA32Decode\r\n\r\n* Don't advance the buffer when an x86 decode fails\r\n\r\n* Use a ternary to avoid linker error on some gcc's\r\n\r\nSome versions of gcc don't inline std::min _and_ need to resolve maxInstructionLength.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "308bddcb75de5df8e18d7b5af62602d9f5f818a0", "commit_date": "2023-04-20T21:01:50Z", "commit_message": "Update GFX90A Decoder  ISA-SPEC(02/22/23) (#1407)\n\nUpdate implementation for AMDGPU GFX90A based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. case label in amdgpu_gfx90a_decoder_impl.C made sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44e3bb530ccb4228588bd17635eaf77cdf5365e1", "commit_date": "2023-04-20T21:01:37Z", "commit_message": "Update GFX908 Decoder ISA-SPEC(02/22/23) (#1408)\n\nUpdate implementation for AMDGPU GFX908 based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions (dsmem)\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. Make case label in amdgpu_gfx90a_decoder_impl.C sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c401cd675058af5e873f4763a6f133fd11938ce", "commit_date": "2023-04-20T21:00:54Z", "commit_message": "Add CI workflow to build consumers of Dyninst (#1412)\n\n* Add CI workflow to build consumers of Dyninst\r\n\r\n* Build with cron", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25b37343f2f115298bd82eecf579bc3baf06b5ba", "commit_date": "2023-04-20T20:55:59Z", "commit_message": "CI workflow to build from spack (#1411)\n\n* CI workflow to build from spack\r\n\r\n* Update cron to every Sunday at 3AM\r\n\r\n* Force use of intel-tbb\r\n\r\nDue to explicit conflicts in the recipe, spack uses intel-parallel-studio which can't be used in automated builds because it prompts the user to accept a license agreement\r\n\r\n* Switch to weekly cron schedule", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0885301c49db8cfc286f41003a558005c9c7ace6", "commit_date": "2023-04-05T13:30:47Z", "commit_message": "Rename Architecture AMDGPU_CDNA2 to AMDGPU_GFX90A (#1404)\n\nRename the Architecture Arch_amdgpu_cdan2 to Arch_amdgpu_gf90a,\r\nas recommended by the vendor.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2f7af10477b0f7daf0efca2c992224711e5deb27", "commit_date": "2023-04-04T02:12:02Z", "commit_message": "Fix link bug in insnCodeGen::loadImmIntoReg on aarch64 (#1405)\n\n* Fix link bug in insnCodeGen::loadImmIntoReg on aarch64\r\n\r\nThe function template has a separate declaration and \"definition\" AND is\r\ncalled from translation units where neither is located. This only happens\r\nto work correctly when the TUs are linked in a specific order.\r\n\r\n* Remove assert\r\n\r\nThe value is now always positive.\r\n\r\n* Remove missed template usage in emit-aarch64.C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a86894f3d9120883ed4c0cf4278287c8bb43ed73", "commit_date": "2023-03-30T20:00:03Z", "commit_message": "remove unneeded zero length files (#1403)\n\n- two old commits (accidentally?) committed zero length files that\r\n  seem to serve no purpose", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1ddebd3125437d3385e65a7cce5bea715588028", "commit_date": "2023-03-23T14:25:12Z", "commit_message": "Fix UB in dwarf/dwarf_subrange.cpp::get_type (#1402)\n\nThe dwarf_* functions return a pointer to their last argument. This causes 'get_type' to return a pointer to a local variable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e952a0dfc13dbb7d665219a672733a505ee2a00", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  stack frame larger than (#1397)\n\n- increase stack frame size warning limit another 1000 bytes for\n  power_opcode_tables.C for RELEASE builds using the clang compiler", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683c85c7ef35d0afe6188271c8f697f6f839e12d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameter (conditionally) (#1397)\n\n- Add macro DYNINST_SUPPRESS_UNUSED_VARIABLE to suppress\n  warnings about unused variables\n\n- use macro to suppress function parameter that is only unused\n  when building on aarch64 and hence cannot be commented out", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "309d167d291f69d0ba9d4671ca581d6d24bf95e0", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "fix broken call to base class function (#1397)\n\n- SgAsmBinaryMultiply::get_type() rose results in infinite recursion\n  as casting the pointer to the base class and calling a function\n  still calls the derived version.  Just call the base class's function\n\n- rewrite SgAsmBinaryAdd::get_type the same way; it was not broken\n  but was convoluted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f57a5cbdfa98333527466423cbc32224874fa81", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "enable warnings in dataflowAPI/src (#1397)\n\n- separate dataflowAPI/src and dataflowAPI/rose source files\n\n- undo disabling warnings for dataflowAPI/src files\n\n- only include ABI.C as a source file once", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "766c7fad0f9f25bc5505f55a88c4f370b0f2cc69", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variable (clang compiler bug) (#1397)\n\n- add suppressions around code that contains a lock using RAII;\n  clang prior to version 10 contains a bug where it does not\n  recognized that the ctor and dtor make the variable used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e86fb6e232b370a66f407f9a0af440134bff147", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  suppress VLA warning (#1397)\n\n- Rose uses a VLA in C++ which is non-standard; for now suppress the\n  diagnostic\n\n- clang requires disabling both -Wvla and -Wvla-extension\n\n- gcc <9, 11.0 and 11.1 has a bug that requires the suppression to\n  to not be in the same macro as VLA itself", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89b22e23d4abcf48a2b1d3dd0f1ce294b4bb6260", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1397)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f7ed33ed9fac49623fea5ed2743462d8c31a062", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  missing noexcept (#1397)\n\n- declare function noexcept to allow potential optimization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "61faa14906eb2a7543867f4cb66643783ba41323", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  deprecated implicit ctor and op= (#1397)\n\n- add explicit copy ctors and operator=,\n  or delete dtor where it could be defaulted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa4713e0f2f063362a496ed03d0d0d65ff43d037", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (delete variable) (#1397)\n\n- remove variables and their initializatins that shadow a variable in\n  the enclosing scope as they were initialized with the same value", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1caea03054dbd73178ea2f40e2ca3474ff9c82e6", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (rename) (#1397)\n\n- rename names that shadow a name in an enclosing scope or class with\n  a unique name", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a309c63953a845f2d0c6e24f3bc3c4d117ef9006", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  potentially evaluated expression (#1397)\n\n- replace use of typeid(expr) where expr executes code at run-time\n  with a dynamic_cast that is obvious that it executes code at\n  run-time", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "412071df5285ecb872abaa966ae4ebb81c733573", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  overloaded virtual overrides (#1397)\n\n- import the name of the base class's virtual function(s) that were\n  overridden in the derived class to prevent hiding of the base class's\n  functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a720e99d94bfb01de40488d5dae8b45645fb284e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  copy ctor missing base class (#1397)\n\n- call the base class's copy constructor in the derived class's\n  copy constructor", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "336409431b648c18c7b51ec1c3135489f82ab7ce", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  case fallthough (#1397)\n\n- add break statement or DYNINST_FALLTHOUGH macro where a switch\n  case falls through to the next case", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "476ba11cf828964579d40a26b21e4b0eb808d560", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  printf format related (#1397)\n\n- add printf-format annotation on dataflow printf function parameter\n\n- fix format string to match parameter types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a15d069e2ce6340396e71bc283f0ac2377b4da6e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  reorder ctor initialization list (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f13b79c36af349203bddba40757b82a1206de42d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  const correctness (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b880173dc64d2d1f07e4d41b4796eac3d14873fe", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variables (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "951ebb64db730f7497ce886e8634aaa3da3cc5e7", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameters (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e9a4b86d2adbe3763fad3df38f85ac92959e26c", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  variadic macro (#1397)\n\n- replace non-standard variadic macro syntax with standard syntax\n\n- remove preprcessor check to use variadic macros if the compiler is\n  gcc;  all compilers support them", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42223b1f9118e32fe145a85a13ced32c13cd5871", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  extraneous semicolons (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ebf545849ef979aaa21bf82e8caff104cbeb6f6", "commit_date": "2023-03-15T13:47:22Z", "commit_message": "Github CI: update dev container deployment (#1400)\n\n* Log in to GHCR before building\r\n* Pull base image for cache", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab965c214b030a302aa0307b121cb9d06ab0a989", "commit_date": "2023-03-15T12:39:13Z", "commit_message": "Github CI: add line continuation in dev-containers.yaml (#1399)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f5558a15b16272eef982b5e8ddfdf172eb59036", "commit_date": "2023-03-15T12:23:31Z", "commit_message": "Add PR testing Github CI (#1393)\n\nRun on pull request to master:\r\n\r\n    Enforce formatting of CMake files, if modified\r\n    Check for changes in minimum required versions of dependencies\r\n    Ensure Dyninst, test suite, examples, and external tests all build with gcc on Ubuntu-20.04\r\n\r\nRun on push to master:\r\n\r\n    Build and deploy new dev container, ghcr.io/dyninst/amd64/<OS>:latest", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e7aa66ddef6768957faae3c62c9909590663901", "commit_date": "2023-03-09T20:15:45Z", "commit_message": "Replace 'cerr' with 'dwarf_print' in DwarfWalker::decodeLocationList (#1395)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1157c87c0b184d83e851bdd5b63582dd2a7647cf", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy with user dtor (#1394)\n\n- Make classes move-only by removing public copy constructor and\n  operator= as they contained pointer members that were just copied\n  (with no semantics of copying the data). This is a double delete\n  waiting to happen.  Luckily the pointer were always nullptr when the\n  copy constructor was called.\n\n- add move constructor (using std::move where appropriate)\n\n- clean up the classes to use default constructors and default member\n  initialization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1aeb249ff90fea49dc50efea1e6c11577bf9d90", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unneeded internal declaration (#1394)\n\n- clang warns of an unneeded internal declaration for yyinput. Since\n  yyinput is generated by flex, just suppress it for the whole file.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7cd7cdb0ba98de24b0d916b8e440db8adb0af6f9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (derived) (#1394)\n\n- Derived type classes have an operator==(const Type&) const, and they\n  call this operator with with both the lhs and rhs being the derived\n  class type.  This is ambiguous when using C++ 20's rule that considers\n  the parameters reversed.  Fix by adding an inlined non-virtual\n  operator== that takes the derived types a parameter and then\n  unambiguously calls the existing ==", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12a4fd86738c048dd82c20c31359cf7a48c082eb", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  stack frame larger than (#1394)\n\n- increase stack frame size warning limit when using the clang compiler\n  for a couple of files that needed a similar increase for gcc", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b78e883c77aefc27d1a30722b414266aa33897d1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  logical op (#1394)\n\n- add suppressions for identical clauses of a logical operator\n  even if they are only identical after evaluating constant\n  expressions that are not identical as gcc 8 and prior warn\n  about this\n\n- Suppression for these are already in place for warnings in adjacent\n  if statements, so extend the suppression to cover these also", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9dbc1e30e30ef263b174d1d2b5ca648e8ef6bf0d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  C function decls without prototype (#1394)\n\n- C functions declared as func() are a declaration without a prototype\n  (from the original K&R C), not a function that takes no parameters\n  (until C23), change all of these to func(void) which is how to\n  declare such a function in C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a2e3fd795f8ec6cb730038ec277431b0832c03c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  set but unused variables (#1394)\n\n- delete variables whose only use is to increment themselves", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6e380f7158326fc686f1b3f7ec7a01b3ac4bfe2", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (#1394)\n\nC++ 20 considers the reversed parameter of a comparison operators in\naddition to the given parameter order.  This implies that if the\nargument is const then the member function must also be const.\n\n- change    bool operator==(const T&)\n      to    bool operator==(const T&) const", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57fe4c395dff4fd11f18d2f00eb58ad25212501", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::random_shuffle is deprecated (#1394)\n\n- replace std::random_shuffle with std::shuffle", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "706fd0e3c532a3d7cfc1d752620ebed2fac65c5d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing noexcept (#1394)\n\n- declare functions noexcept", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "55d8a338e362d3aa4448aa9bae776eb90ca1292a", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1394)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b977e8d7132b312c853652a1e7e6f28eb39dbab0", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unused private field (#1394)\n\n- removed myid member from dyn_thread as it is never used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0eb0b29def9cc2d18e0fe724e536c73e7e9ef964", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy/op= with user provided dtor (#1394)\n\n- Explicitly define the implicit operator or remove the explicit\n  destructor; in C++ 20, if a destructor is explicitly defined then\n  the other constructor, assignment and move operators will not be\n  automatically generated", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9be477535debee15c2403bdc2ddedb31fdf0eb8e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  remove unused variables/members (#1394)\n\n- remove variables that were never used\n\n- remove code that only updated unused variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "344783a7954de9af7f98a5d3f0ec7c505b7536a1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (variables) (#1394)\n\n- rename variables that shadow names in containing scopes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73064a866ee1d19d8e12e2562f60b9b7f8e05406", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (enumerator names) (#1394)\n\nenumerator names shadow names in other scopes\n\n- made 3 internal enum types scoped enums:  StackAccessType,\n  operandType and patch_type_t\n\n- delete one internal and unused enum type:  frameType_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4bf4a24c514d0c395fdd27d6fe68ddf0fef89040", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "replace C-style and functional casts (#1394)\n\n- replace C-style casts ((T)e) and functional casts (T(e)) with modern\n  casts that have a clearer intent and are safer:  static_cast<T>(e),\n  and T{e}.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8d0e2760b307c7d465b56cac639c2e4a2cc93ca8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "write_memory_as to append_memory_as as appropriate (#1394)\n\n- where write_memory also updates the pointer, change then to\n  append_memory_as(...)\n\n- change '*insn++ = <value>' to append_memory_as_byte(...) to\n  be consistent with append_memory_as(...)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c21bd122187e87b74d45a5ba3ec3e3824750f9c3", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (C casts) (#1394)\n\n- fixed increased alignment warnings in C code.  The macro\n  CAST_WITHOUT_ALIGNMENT_WARNING eliminates the warning and allows for\n  future auditing.  For the code as currently written, these are all\n  aligned properly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0eeb1ee0407780ee07f603910d398f836dc2f7", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (pointers) (#1394)\n\n- fix alignment warnings of pointers by using alignas_cast<> defined in\n  common/h/raw_memory_access.h to eliminate the increase alignment\n  warning.  For the code as currently written, these are all aligned\n  properly, but these are inherently unsafe and require manual\n  inspection of the pointers involved.  An assert in alignas_cast can be\n  uncommented to validate proper alignment at runtime.\n\n- explicitly force larger alignment of one variable to eliminate warning", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "285ac938848739e02e38c044cf354dcb9d99f0b9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (#1394)\n\n- Casts of pointers to a type that has a larger alignment requirement\n  will cause an exceptions on some architectures on dereference if the\n  pointer does not meet its alignment requirements.\n\n- Add new template functions read_memory_as and write_memory_as that\n  read and write the bytes of (possibly) unaligned memory of the desired\n  data at the supplied address using the length of the template type in\n  a way that is safe even if the supplied pointer is not properly\n  aligned.\n\n- Add functions append_memory_as; like write_memory_as but updates the\n  pointer value to memory location after the bytes written.\n\n- Add template function alignas_cast to cast a pointer to another\n  pointer without producing an increased alignment warning; requires\n  manual auditing to pointer is properly aligned", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4aff07d1eba822b880558c030c7f5aec94b2ae9c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  pessimizing move (#1394)\n\n- remove unnecessary std::move's", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b88b16dba9477f18fe598fad5552758204a1558e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing override (#1394)\n\n- add override to all overridden virtual methods of a class if present\n  on any method", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84fe176ef5ab61376911570de6b506473a3c8d35", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  tautological always true comparison (#1394)\n\n- value of type unsigned char compared to 256 produces a warning as 256\n  is outside the range of the uint8_t.  256 is the number of array\n  elements (computed using sizeof's).  Changed from (n < numElems) to (n\n  <= numElems - 1) which is also always true, but the error is\n  eliminated due to 255 being within range of a uint8_t.  Ugly but makes\n  the warning disappear.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6b41075d61009b539107836591cb47b8cb3e3c8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  mismatched class/struct (#1394)\n\n- use consistent 'struct' and 'class' keyword between forward\n  declaration and definition; a mismatch is legal be breaks on\n  some versions of MS C++", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9e83871f0380068dba79648c6acee503cac5d76", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  [[fallthrough]] requires C++ 17 (#1394)\n\n- clang's __has_cpp_attribute(fallthrough) feature test macro returns\n  true, but produces warnings if used.  [[clang::fallthough]] works, so\n  force it if the language version is pre-17 with clang compiler.\n\n- fix typo in __cplusplus macro name\n\n- improve robustness: try all alternative fallthrough attributes names", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "067be96bb64a3d4191f12db1694b0fcfec51d457", "commit_date": "2023-03-02T18:41:27Z", "commit_message": "Restore PPC special-purpose registers in opposite order of saving them (#1392)\n\n* Restore PPC special-purpose registers in opposite order of saving them\r\n\r\nThis is the same fix as https://github.com/dyninst/dyninst/pull/1000,\r\nbut for PowerPC.\r\n\r\n* Reverse order of FPSCR restore", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae43ebc6f905345499ed9c55eccb007e9a69efa9", "commit_date": "2023-03-01T23:57:55Z", "commit_message": "Aarch64: Fix restoring special purpose registers order (#1000)\n\nThe special purpose registers are pushed onto the stack by\r\nEmitterAARCH64SaveRegs::saveSPRegisters. This patch reverses the order\r\nused for popping the stored registers from the stack. Without\r\nthis patch, some of the state registers get swapped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46ea3009e1e0e27bd035ac3152dc772bf861f3fd", "commit_date": "2023-03-01T19:33:16Z", "commit_message": "Avoid possible copy in BPatch::createEnum (#1390)\n\nThe Type class doesn't have a user-defined copy constructor and its\r\nimplicit declaration is deprecated in C++20. Rearranging the construction\r\nhere removes the possibility of copying.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f89cc72416fdc1d467b130f48609b8fc93126d37", "commit_date": "2023-02-28T23:54:58Z", "commit_message": "Merge pull request #1389 from dyninst/wuxx1279/gfx908/clang-error\n\nFix ambiguous override of InstructionDecoder_amdgpu_*::makeRegisterExpression", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "557a01949a4c11e8e8975fe113e4ab07b64bf25d", "commit_date": "2023-02-27T21:25:44Z", "commit_message": "add InstructionDecoderImpl::makeRegisterExpression to derived classes\n\nEliminate virtual-overloaded warning as there are 3 overloaded methods of\nInstructionDecoderImpl::makeRegisterExpression, but only 2 are defined in\nthese classes for add a using so the 3rd is not hidden.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42c3a4b497071e421686ded49ad0da406c8053ac", "commit_date": "2023-02-27T20:06:40Z", "commit_message": "Fix virtual derived signature to match base class\n\nmakeRegisterExpression in the derived class had\nan incorrect function signature, which made\ncompilation fails on gcc-6 and clang.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d15c0f714397a1316c74fc8d2c24a62a772ecc3", "commit_date": "2023-02-27T18:39:18Z", "commit_message": "Update DwarfWalker subrange handling (#1369)\n\n* Remove redundant include of libdw.h\r\n\r\n* Add subrange parsing to dynDwarf\r\n\r\n* Remove decipherBound\r\n\r\nThis implementation was neither correct nor complete. Moreover, we\r\nshouldn't be parsing FORM types. Looking for DW_TAG* is sufficient.\r\n\r\n* Remove legacy comments and commented-out code from parseArray\r\n\r\n* Improve error message in parseArray\r\n\r\n* Rename parseSubrangeAUX to parseSubrange and change interface\r\n\r\n* Replace bound calculations in parseSubrange\r\n\r\n* Update some comments and whitespace\r\n\r\n* Update construction of the result type\r\n\r\nThe LONG_MIN/MAX aren't great, but they are propagated to preserve\r\nbehavior.\r\n\r\n* Update debugging messages in parseSubrange\r\n\r\n* Have parseSubrange() call parseSubrange(Dwarf_Die*)\r\n\r\n* Use updated parseSubrange in parseMultidimensionalArray\r\n\r\n* Use std::tostring instead of snprintf\r\n\r\n* Update comments and remove dead code\r\n\r\n* Whitespace\r\n\r\n* parseMDA returns a typeArray instead of just a Type\r\n\r\n* Fix bug in dwarf_result::operator bool\r\n\r\n* Fix hi/low bound mixup in parseMDA\r\n\r\n* Try using Dyninst's parsed CU language, if needed\r\n\r\n* Display subrange DIE ID in pareSubrange\r\n\r\n* Don't create subrange type in parseSubrange\r\n\r\nThis will happen in the callee\r\n\r\n* Update parseSubrange() to use new parseSubrange(Dwarf_DIE*)\r\n\r\n* More carefully parse the child DIE\r\n\r\n* Iteratively parse the subranges in parseArray\r\n\r\n* Whitespace\r\n\r\n* Remove parseMultiDimensionalArray\r\n\r\n* Improve debug messages\r\n\r\n* Register each subrange type in parseArray\r\n\r\n* Remove common/h/dyninstversion.h\r\n\r\nThis was accidentally included.\r\n\r\n* Add copyright notices to new files\r\n\r\n* Make dwarf_result also hold a Dwarf_Word\r\n\r\nC++ doesn't guarantee it is convertible to `long`.\r\n\r\n* Only offer an interface to parse both bounds simultaneously\r\n\r\nThe calculation for a range's upper bound when DW_AT_count is used\r\nrequires knowing the lower bound (if given), so these needed to be\r\nmerged.\r\n\r\n* Use new dwarf_subrange interface in DwarfWalker::parseSubrange", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bfa6e82c2a9ef98801432324ffb3cec2a6254c5", "commit_date": "2023-02-27T14:13:39Z", "commit_message": "use default allocator for tbb::concurrent_hash_map (#1332)\n\n- gcc 12 warns about mismatched new and delete when an allocator is specified\r\n  This is likely a false positive.  Change to use the default, which uses ends\r\n  up using the same std C++ new allocator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "198b54f56cbcdb82f058d007545bdf9f36c5dce5", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "fix infinite recursion in LineInformation::addLine (#1331)\n\n- gcc 12 reported an infinite recursion for LineInformation::addLine\n  that takes the lineSource file\n- fixed by computing the string table index of lineSource and then\n  calling the addLine method that takes the index value\n- also update the lineSource type from string to const string&\n- updated documenation that had the method signature taking a const char*", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6436c734eef50d55ed6c562aa3fabf0c7039c50c", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "eliminate deprecated C++ function objects (#1331)\n\nfix function objects that were deprecate in C++ 11 and removed in C++ 17\n\n- replace mem_fun with mem_fn\n- eliminate binary_function and unary_function base classes\n- use const iterator when constructing boost::transform_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f049fe855640832950f5a6cd87db23ecb4b7533b", "commit_date": "2023-02-24T22:27:17Z", "commit_message": "Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04 (#1362)\n\n* Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04\r\n\r\n- the main issue was `/sbin/ldconfig -p` on Ubuntu 22.04 has an extra line at the end: \"Cache generated by: ldconfig (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35\"\r\n  - this would result in an occasionaly segfault\r\n- refactored the rest to avoid strtok which is known to have a fair amount of problems\r\n\r\n* fix header includes and message about delimit issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31b4d7f19f4e6585518eee179a63812f88911e6f", "commit_date": "2023-02-24T19:36:42Z", "commit_message": "Make SymtabCodeSource constructor const correct (#1293)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc38257de4d5143d097229aef7284b8e1ce6fbf5", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "SymtabAPI::Type: add support for C++ r-value references (#1159)\n\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c677008d0fa8f4ccb6d191d37493060e15d05f22", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "Improve DWARF enum parsing in Symtab::Type (#1164)\n\n* Inherit from derivedType\r\n* Add parsing of underlying type\r\n* Improve enum parsing debug information\r\n* Add support for C++ scoped enums (i.e., 'enum class')\r\n* Remove typeEnum::setName\r\n    This has no definition.\r\n* Inline default constructor\r\n* Clean up BPatch::createEnum\r\n\r\nThis removes the unnecessary construction of a separate (thread-safe!)\r\ncontainer of pairs and the associated memory leaks. It also explicitly\r\nmakes the enum's underlying type a four-byte signed int. Redundant code\r\nfrom the overload which computes the enum values was replaced by using\r\nstd::iota and calling the three-argument createEnum.\r\n\r\n* Remove factory functions\r\n\r\nAdding overloads for these would add more clutter than utility. We\r\nshould remove these from all of the types as the constructors should\r\nalways be used to ensure class invariants.\r\n\r\n* Remove non-portable constructors\r\n\r\nSince we're breaking ABI here, these constructors need to go. Manually\r\nsetting the size to `sizeof(int)` is non-portable as the\r\nBPatch::createEnum may be used to modify a binary that doesn't have the\r\nsame `int` representation as the host on which Dyninst was compiled.\r\n\r\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3046332ba3d32eccb63f8dd6ecc65afca3b2c63f", "commit_date": "2023-02-23T22:24:02Z", "commit_message": "Update global ELF ctor/dtor instrumentation for static executables (#1355)\n\nIf __libc_csu_init doesn't exist, try to insert the constructor call into the beginning of 'main'. If __libc_csu_fini doesn't exist, try to insert the constructor call into the beginning of 'exit'.\r\n\r\n* Use C-style strings for symbol names\r\n\r\nThere's no need to have a std::string object that incurs the overhead of a constructor/destructor call to just hold a literal that's only visible in the current translation unit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "master": [{"commit_oid": "747f0d8125c5f4047ee7e9166c951713c7142b05", "commit_date": "2023-09-23T01:50:22Z", "commit_message": "Refactor DwarfWalker::dieRanges (#1535)\n\n* Remove unused parameters\r\n\r\nTheir usage was removed by 48d4286c in 2018.\r\n\r\n* Remove old debug code", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c217eb64b495f034a17006919bd6d3e53fdfd80", "commit_date": "2023-09-22T20:27:29Z", "commit_message": "Remove dwarfWalker::getHighPCLowPC (#1536)\n\nIts usage was removed by aaa5e321c in 2017.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a88a323264b7ff6b58c72f265540dbaafd648d1", "commit_date": "2023-09-22T00:38:59Z", "commit_message": "Hide implementations of complex data structures in SymtabAPI::Symtab (#1531)\n\n* Moved indexed_symbols into a private implementation\r\n\r\n* Move indexed_modules into private implementation\r\n\r\n* Move funcRangesAreParsed into private implementation\r\n\r\n* Move types_parsed into private implementation\r\n\r\n* Move funcsByOffset into private implementation\r\n\r\n* Move varsByOffset into private implementation\r\n\r\n* Remove 'concurrent.h' from 'Symtab.h'\r\n\r\n* Move mod_lookup_ into private implementation.\r\n\r\n* Move func_lookup into private implementation", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "861d4279a69d28dca8b2b1a58be4edbfa7c2e1f1", "commit_date": "2023-09-21T19:53:19Z", "commit_message": "Refactor Symtab::addSymbolToAggregate (#1534)\n\nThis makes it easier to understand what's happening. It's still not\r\nclear why the region check is necessary.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ee70be0730b063a612705ad3be1dd3a5d57d9dd1", "commit_date": "2023-09-21T19:05:05Z", "commit_message": "Remove dwarfWalker::deallocateLocationList (#1532)\n\nIts usage was removed by 1aec77b59 in 2017.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "39fe75f11ef8c5fa44b0865e22c664fa7a92d42c", "commit_date": "2023-09-21T16:56:21Z", "commit_message": "GithubCI: allow manually running all CI workflows (#1533)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4298a0a35a979e4cebaa3d451f652c79579239f8", "commit_date": "2023-09-20T02:46:08Z", "commit_message": "Remove Symtab::fixup_SymbolAddr (#1530)\n\nIts usage was removed by 4bc7f25d in 2020.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a66e73e8bedb27b07b20711c523667d7f32778c9", "commit_date": "2023-09-20T00:49:49Z", "commit_message": "GithubCI: Re-enable consumer builds (#1529)\n\nI forgot to do this before merging #1527.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c870fb6485d86efe8836656f9a080c32b2ae25f", "commit_date": "2023-09-19T22:31:43Z", "commit_message": "Github CI: Add weekly build of MUST (#1527)\n\n* Add weekly build of must\r\n\r\n'MUST' detects MPI usage errors. Comes from RWTH Aachen University.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1c5494f2017d726be10b03d2540410d15a322e78", "commit_date": "2023-09-19T19:45:41Z", "commit_message": "GithubCI: Allow conumer builds to be run manually (#1528)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "384377d2671a99cc1388d06e84873d4be17138c5", "commit_date": "2023-09-19T04:11:10Z", "commit_message": "Github CI: Build TAU weekly (#1526)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4fe97f34596fcd657d308f3b4edc8d2f8970fb13", "commit_date": "2023-09-19T01:29:15Z", "commit_message": "Github CI: Build LLNL/STAT weekly (#1525)\n\nNot built with spack because it takes longer than 6 hours due to trying to build clang from source.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e9956825aad23c72aa5c24bd33c502f8f5e7042e", "commit_date": "2023-09-18T17:37:16Z", "commit_message": "Github CI: Build systemtap weekly (#1524)\n\nThis could be built using spack, but it would require making a packages.yaml to keep from having to install libjsonc every time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "633adb9075d1347a1203822ff21ba986ac8ced92", "commit_date": "2023-09-14T15:54:32Z", "commit_message": "Add indirect branch support for gfx908 and gfx90a (#1519)\n\n* Support Indirect Control Flow for GFX908 / GFX90A\r\n\r\nThis commit ports the support for indirect control flow\r\nanalysis that was done for gfx900 to gfx908 and gfx90a.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "423c1bba58849c4be0090c58aa99531e67824207", "commit_date": "2023-09-11T20:27:22Z", "commit_message": "Fix int size of rose operations return values (#1522)\n\n- set integer bit size of equalsizeOp to be 1\r\n- set integer bit size of andOp to be max size of operands\r\n- set integer bit size of orOp to be max size of operands", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "822c1c0366531fe722c2403aaf2fef29601d99d7", "commit_date": "2023-09-11T13:40:40Z", "commit_message": "Fix Implementation for RoseOperation::extractOp (#1511)\n\nFix implementation in dataflowAPI to have end_bit exclusive.\r\nFix implementation in parseAPI to be based on begin_bit and end_bit instead of based on size only.\r\nFix #1510.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "782ec44877e8cb5a231e0a8f1e9801df89c27802", "commit_date": "2023-09-08T20:45:57Z", "commit_message": "Don't create a name for artificial DIEs with a DW_AT_name (#1520)\n\nFor C++ member functions, compilers will sometimes add a DW_AT_name\r\ncalled 'this', and we don't want to mangle that.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57886efea6d6f16adc01d41198d011cd95aed86", "commit_date": "2023-09-08T20:45:06Z", "commit_message": "Github CI: use correct directory when running external-tests on PR (#1521)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2d2f4c23298586211a58bff90423231d524fb22", "commit_date": "2023-09-08T15:46:49Z", "commit_message": "Remove DwarfWalker::version member variable (#1516)\n\nIt was added by 49df4377c in 2012, but never used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a0a0a2b245aa115b6bf8e8712e40f512afb5bae", "commit_date": "2023-09-08T15:46:32Z", "commit_message": "Parse all DWARF source files in DwarfWalker::buildSrcFiles (#1515)\n\nFrom 2.6.4.16 of the DWARF5 standard\r\n\r\n\tPrior to DWARF Version 5, the current compilation file name was not\r\n\trepresented in the file_names field. In DWARF Version 5, the current\r\n\tcompilation file name is explicitly present and has index 0. This is\r\n\tneeded to support the common practice of stripping all but the line\r\n\tnumber sections (.debug_line and .debug_line_str) from an executable.\r\n\r\nHowever, libdw takes care of this in dwarf_getsrcfiles.\r\n\r\nFixes a major bug where we produce no function parameter information\r\nwhen there is only one CU in a binary because\r\nDwarfWalker::parseFormalParam requires line information.\r\n\r\nFixes #1156", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e4e6fbc7fdfe7faaa9f0a6ceb42b5d9adc996bf5", "commit_date": "2023-09-08T15:45:27Z", "commit_message": "Refactor dwarf/dwarf_names.h (#1514)\n\n* Rename is_fullcu -> is_full_unit\r\n\r\n* Rename is_partialcu -> is_partial_unit\r\n\r\n* Rename is_typecu -> is_type_unit\r\n\r\n* Refactor is_cudie to make unit concepts clearer\r\n\r\n* Add is_imported_unit for completeness\r\n\r\nNot currently used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bec7e21a5008adc1c0445775602ce740943e9b55", "commit_date": "2023-09-07T19:57:09Z", "commit_message": "Github CI: execute external tests on PR (#1512)\n\n* Github CI: execute external tests on PR", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "52acf2734d3da3106edb3f3866778a26eda32819", "commit_date": "2023-09-07T19:55:06Z", "commit_message": "Github CI: terminate PR pipeline at first failure (#1513)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9fddc4282879da75ffc456d91d8e70c9d06b091e", "commit_date": "2023-09-07T18:04:19Z", "commit_message": "Unify naming of Modules (#1500)\n\n* Unify naming of Modules\r\n\r\nThere are currently several different techniques being used\r\ninconsistently to name Modules. This unifies all of these techniques\r\nand applies them consistently.\r\n\r\nNaming type units:\r\n\r\nIt's not clear from the DWARF std at this time if dwarf_formstring\r\nwill actually return the signature/MD5 hash for a type unit. Whatever\r\nthe old code has done is likely broken, so we don't want to propagate\r\nthat here. Likely, the DW_FORM_ref_sig8 parsing isn't being done\r\ncorrectly overall, and will need to be fixed in the future.\r\n\r\nAnonymous DIEs:\r\n\r\nMany DIEs don't have names (e.g., type decorator definitions like\r\nDW_TAG_pointer_type), but DwarfWalker has explicit checks for these\r\ncases (DwarfWalker::nameDefined).\r\n\r\n* Remove DEFAULT_MODULE\r\n\r\nBecause every Module now has a unique name, it's no longer possible to\r\nexecute this code path. The 'pmodule' class uses the name from the Module\r\nclass (see the pmodule constructor).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "80f84e4f2e27d91929f48290740899c3edb3b77b", "commit_date": "2023-09-06T21:07:14Z", "commit_message": "Remove ret_lock from SymtabAPI::FunctionBase (#1504)\n\nThis was used to guard calling setReturnType. That function is only\r\never called from DwarfWalker::setFuncReturnType which is itself\r\nguarded by `ParsedFuncs::accessor` in DwarfWalker::parseSubprogram,\r\nrendering this mutex unnecessary.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "212ccd3b4e12f52cb6a743f1fbeff9fccfe7d0bc", "commit_date": "2023-09-06T20:06:15Z", "commit_message": "Remove hasSpecification param from DwarfWalker::getReturnType (#1507)\n\nSince 5ed068167 in 2017, only literal 'false' has ever been used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6eec4844b82ed2176c455359efb29c5ca04a3e87", "commit_date": "2023-09-06T03:57:50Z", "commit_message": "Use full filenames when handling Modules (#1501)\n\nA module's name is either a unique string or the pathname of the file\r\nused to create the corresponding DWARF compilation unit. In the latter\r\ncase, the 'name' is only the basename of the path which is never\r\nguaranteed to be unique (e.g., /path1/foo.c /path2/foo.c would have the\r\nsame 'name').\r\n\r\n* Remove useless file creations\r\n\r\nThese don't correspond to any Module.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d7047e2d22ab5f7bb2a0b8b37434ed955ab97f29", "commit_date": "2023-09-06T03:19:28Z", "commit_message": "Fix inverted logic  in DwarfDyninst::is_cudie (#1505)\n\nIf a DIE is a CU, then it contains a reference to its Dwarf_CU.\r\n\r\nIntroduced by 71f2e14d3 (PR1499).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7acb76787c647a434301579e4e9baa3a59884eb4", "commit_date": "2023-09-06T03:15:54Z", "commit_message": "Don't check for existing return type when parsing DWARF subprogram (#1509)\n\nSince 8b400af5, functions are guaranteed to only be parsed once, so the\r\nreturn type can never be set before the call here. Checking the return\r\ntype circularly invokes Symtab::parseTypesNow which deadlocks since\r\n7f1e24d.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "481ee344d36721c44aa456e31937836c90ee235d", "commit_date": "2023-09-06T02:50:47Z", "commit_message": "Remove FunctionBase::setReturnType(Type*) (#1503)\n\nThis is never called from within Dyninst and should never be called by\r\na user.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "463801216b933cdfdc4115b3d170eb4f64b513f1", "commit_date": "2023-09-05T23:18:45Z", "commit_message": "Workarounds to align decoder output with llvm-objdump (#1508)\n\n* Add info registers and fix some duplicate values\r\n\r\n* Add named immediate as an operand type\r\n\r\n* Add a method for updating mnemonic(required for adding extensions)\r\n\r\n* Implement Workarounds for Gfx908 and GFX90A\r\n\r\nThis commit is intended to fix the following problems\r\n\r\n1. Instructions that use SDWA have wrong length\r\n2. Instructions that use SDWA does not have the _SDWA suffixh\r\n3. MUBUF instructions decodes the VADDR field incorrectly\r\n4. MUBUF instructions missing information about offset\r\n5. DS instructions missing information about offset\r\n\r\n* redo whitespace and indentation changes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d04e892c8f3c9451ff4e77187416a391b5e4ecfa", "commit_date": "2023-09-05T20:45:20Z", "commit_message": "Add newline in log message in DwarfWalker::parseModule (#1506)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "63600787a5ff07d1fdc03835c3fcb99731e65a9a", "commit_date": "2023-09-05T18:08:33Z", "commit_message": "Fix responsibility inversion in Module::finalizeRanges (#1498)\n\nA Module shouldn't modify the Symtab object to which it belongs. It\r\nknows what ranges belong to it (see\r\nObject::fix_global_symbol_modules_static_dwarf), so it can munge them\r\ninto a collection of `ModRange`s.\r\n\r\nThe `ranges_finalized` member was never needed as the only place\r\nit was set was in `finalizeRanges` which is the only place where\r\n`ranges` was emptied.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "50c33bef8c039f696e4b9a60eee3578b9e140cd2", "commit_date": "2023-08-31T17:13:03Z", "commit_message": "Use uniform CU checks in DwarfWalker (#1499)\n\nThese should have been part of 71f2e14d3.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8779898ce685a69d97ce305096eaeb8a3557bd4", "commit_date": "2023-08-28T20:36:59Z", "commit_message": "Remove pd_dwarf_handler (#1496)\n\nIts usage was removed by 340799a in 2017.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71f2e14d3d3ad45c5e5bfdeae3c36222c4200e4f", "commit_date": "2023-08-28T19:18:54Z", "commit_message": "Refactor extracting CU tags from DWARF (#1495)\n\nThis centralizes the process and gives readable names to what's\r\nhappening.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7f1e24d526be740d9c200c5a2b26b0033709806d", "commit_date": "2023-08-28T18:50:01Z", "commit_message": "Make Symtab::parseTypesNow thread-safe (#1497)\n\nThere are many places where this is called without a user realizing it.\r\nIf they were to call any of those functions in parallel, type parsing\r\nwould break.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bf6e869f966112344d627d3044f5e76fcbbc9676", "commit_date": "2023-08-21T15:31:02Z", "commit_message": "Move inst2ast example to examples repo (#1492)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c2e31c0886b30f7b7b07b1e7ab840d3bb5521d1", "commit_date": "2023-08-21T15:30:15Z", "commit_message": "Remove parseAPI examples (#1494)\n\n* Remove parseAPI/doc/code_sample.cc\r\n\r\nThis exists in the dyninst/examples repository as 'disassemble'.\r\n\r\n* Remove parseAPI/doc/example.cc\r\n\r\nThis exists in the dynint/examples repository as 'CFGraph'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "692ff9f4b7e52f5689f880e01bfdd708a0dcdc14", "commit_date": "2023-08-18T21:47:43Z", "commit_message": "Remove patchAPI/test/findPoint (#1490)\n\nIt uses code that is no longer available and the functionality it\r\ncovers is already in the testsuite.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "82268024ac1a4c180b9da876010e5b3abfa5a2ac", "commit_date": "2023-08-18T21:47:25Z", "commit_message": "Remove patchAPI/example (#1491)\n\nIt is already in the examples repository under 'insertSnippet'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "369ec2d033d4554229d5e9228acdeb68791b1f85", "commit_date": "2023-08-18T17:30:14Z", "commit_message": "Remove AObject::symsToModules_ (#1488)\n\n* Remove AObject::findModuleForSym\r\n\r\nIts usage was removed by 4e4a375a4 in 2016.\r\n\r\n* Remove AObject::setModuleForOffset\r\n\r\nIts usage was removed by 0e5d83405 in 2016.\r\n\r\n* Remove use of AObject::symsToModules_ in Object-nt\r\n\r\nIt is only ever written to, and its usage was removed by 4e4a375a4\r\nin 2016.\r\n\r\n* Remove use of AObject::symsToModules_ in Object-elf\r\n\r\nIt is only ever written to, and its usage was removed by 4e4a375a4\r\nin 2016.\r\n\r\n* Remove unused parameters and variables\r\n\r\nThese are no longer needed.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7132622b1fc93f763437c7f6f1170916bfc983e9", "commit_date": "2023-08-18T15:27:49Z", "commit_message": "Remove Module::setName (#1485)\n\nThis is never called internally. The filename corresponding to the\r\nmodule is a class invariant. It makes no sense to make it mutable. This\r\nmember function is not documented.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a49e5e5a882f5035cc01ca9e2962f341748b34be", "commit_date": "2023-08-18T15:27:20Z", "commit_message": "Remove declaration of image::getModuleLanguageInfo (#1486)\n\nIt's definition was removed by 6c65e3c9a in 2007.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "366f9201032c51d2f15b1c4f5f96d541a21feb7f", "commit_date": "2023-08-18T15:26:59Z", "commit_message": "Remove declaration of Object::load_shared_object (#1487)\n\nIts definition was removed by 758aa226 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d40984a42345144c842bc7be469f9f9c9d314be5", "commit_date": "2023-08-18T15:26:15Z", "commit_message": "Remove unused Object::getFileName (#1489)\n\nIts usage was removed by 760bfda6e in 2019. It's also confusing because\r\nit could return either the object's SONAME or the Module's filename.\r\nThese two things are not the same.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "789b9468d8a9160972e64d1aae0239e06cbf980d", "commit_date": "2023-08-17T23:59:11Z", "commit_message": "Clean up unused global variables in Object-elf.C (#1483)\n\n* Clean up stab globals\r\n\r\nThese were removed by 5e142effc in 2021.\r\n\r\n* Remove unused globals from old symbol fixer\r\n\r\nThese were removed by 9de709ec5 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "47605aa681ca733a7d3ab6e7fbc7dee3fc83913b", "commit_date": "2023-08-17T15:21:47Z", "commit_message": "Remove unused Object::find_symbol in Object-elf (#1480)\n\nIts usage was removed by 9de709ec5 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc408511ee37c72bd4444de69fd4c34bd07de786", "commit_date": "2023-08-17T15:21:21Z", "commit_message": "Remove Symtab::updateIndices (#1481)\n\nIts usage was removed by cabbe58ff in 2015. It's a private function, so\r\nthere are no API/ABI issues in removing it.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5a12cccf2395d6a6fc0a5156c420016a04cf8d27", "commit_date": "2023-08-11T20:41:26Z", "commit_message": "Clean up SymtabAPI::LineInformation class (#1479)\n\n* Remove unused member variables\r\n\r\nThese were added by 0dee1c8f8 in 2016, but never used.\r\n\r\n* Remove redundant visibility specifiers\r\n\r\n* Remove useless comments\r\n\r\nThese are either incorrect or just noise.\r\n\r\n* Make the class uninheritable\r\n\r\nThis appears to be some remnants of someone's scratch/dev work.\r\n\r\n* Use a default dtor\r\n\r\nNo reason to have it.\r\n\r\n* Reduce string copies\r\n\r\nThese parameters are only ever read from.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cc88eac20fdbd2b7ce3450ec1cca3e7eb417ee24", "commit_date": "2023-08-09T23:23:24Z", "commit_message": "Remove Symtab::forceFullLineInfoParse (#1478)\n\nIt was added by 1867619517b3 in 2015, but was never implemented.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9cba0b348ce2006ce8a41e8ab549f05abbac377f", "commit_date": "2023-08-09T19:56:52Z", "commit_message": "Don't include compiler-specific headers (#1477)\n\nIncluding anything in <bits/*> is not portable. Also, the contents of\r\nthis header were never used.\r\n\r\nStan Cox (scox@redhat.com) reported:\r\n\r\nIt's not included as the first thing in the file, which means it can't\r\nuse the precompiled version of that header\r\n(https://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html) and\r\ntherefore it's just including the entire C++ standard library, which is\r\ngoing to be much slower than just including the right headers.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5055bcf55802fa9a57d7dd4e5397a978ee8d4d0", "commit_date": "2023-08-09T07:09:13Z", "commit_message": "Fix AMDGPU register formatting (#1473)\n\n* Separate out AMDGPU register formatting\r\n\r\nHere we extract the logic of displaying multiple registers as\r\na single operand when doing instruction formatting into a separate helper\r\nfunction that is only called when the architecture is passed to\r\nInstruction.format or Operand.format;\r\n\r\nThis change enables the ability get register operand name in two ways:\r\nConsider s[0:3]\r\n1. Without passing in architecture, each register will be printed separately.\r\nThat is s0,s1,s2,s3\r\n2. By passing in architecture, the first register will return a string\r\nfor the entire group, and the rest will return empty string.\r\nThat is s[0:3],\"\",\"\",\"\"\r\nThese empty strings will later be discarded by the\r\nArchitectureSpecificFormatter functions.\r\n\r\n* Fix missing parameter for makeRegisterExpression\r\n\r\nDuring one of the PRs that targets compiler warning,\r\nthe num_elements parameter to makeRegisterExpression is omitted,\r\nresulting in all register operands are displayed separately,\r\nwhether they should be displayed as a group or not.\r\n\r\nIn addition to adding the parameter, certern unused helper functions\r\nand fields of InstructionDecoder-amdgpu-gfx*** has been removed\r\nto avoid shadowing of variable names.\r\n\r\nNote that this change isn't applied to vega as we don't have ISA-XML for\r\nit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b6fcbb0c4f647fe4fbd39db1e0fb8cbc5cd1206f", "commit_date": "2023-08-08T19:45:36Z", "commit_message": "Clean up SymtabAPI::Function classes (#1475)\n\n* Remove undefined FunctionBase constructors\r\n\r\nThey were added by 5ed068167 in 2013, but never defined.\r\n\r\n* Make ~FunctionBase public\r\n\r\nFunctionBase is intended to be derived from and thus derived types can\r\nbe deleted through pointers to base. This would cause UB in the current\r\nstate.\r\n\r\nhttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual\r\n\r\n  A base class destructor should be either public and virtual, or\r\nprotected and non-virtual\r\n\r\n* Make Function(Symbol *) public\r\n\r\nIt's awkward having it be protected and then friended so it can be used.\r\nJust make it part of the API.\r\n\r\n* Function should not export its interface.\r\n\r\nThese functions should override those in FunctionBase, but should not\r\ndefine a new interface.\r\n\r\n* Explicitly mark overridden members in Function\r\n\r\n* Make InlinedFunction(FunctionBase *) public\r\n\r\nIt's awkward having it be protected and then friended so it can be used.\r\nJust make it part of the API.\r\n\r\n* Make ~InlinedFunction public\r\n\r\nInlinedFunction is intended to be derived from and thus derived types\r\ncan be deleted through pointers to base. This would cause UB in the\r\ncurrent state.\r\n\r\nhttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual\r\n\r\n  A base class destructor should be either public and virtual, or\r\nprotected and non-virtual\r\n\r\n* Make InlinedFunction::getModule public\r\n\r\nIt's a pure virtual member in FunctionBase, so making it protected here\r\nmeans that calls through a pointer to InlinedFunction could generate a\r\nruntime error. gcc and clang seem to \"do what I mean\" even though it's\r\nill-formed. It also removes the astonishment that `getModule` isn't\r\naccessible through the public interface even though it is required to be\r\nthere.\r\n\r\nFrom C++11 standard (n3242):\r\n\r\n11 Member access control [class.access]\r\n\r\n5. It should be noted that it is access to members and base classes that\r\nis controlled, not their visibility. Names of members are still visible,\r\nand implicit conversions to base classes are still considered, when\r\nthose members and base classes are inaccessible. The interpretation of a\r\ngiven construct is established without regard to access control. If the\r\ninterpretation established makes use of inaccessible member names or\r\nbase classes, the construct is ill-formed.\r\n\r\n* InlinedFunction should not export its interface.\r\n\r\nThese functions should override those in FunctionBase, but should not\r\ndefine a new interface.\r\n\r\n* Explicitly mark overridden members in InlinedFunction", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "67dfbb4ac8f5a6c1f98395983ff3a6ba57527101", "commit_date": "2023-08-03T17:55:51Z", "commit_message": "Fix hang when creating ELF dynamic sections (#1474)\n\nThis is triggered when a binary with no .rel.dyn and .rela.dyn\r\nsections, but its target platform uses rel type relocation records.\r\n\r\nThis happened on an AMDGPU binary that was previously incorrectly\r\nspecified as using a rel relocation record.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8fa753d955d43747aa46b0a528a81a0d9adf677d", "commit_date": "2023-07-27T14:25:14Z", "commit_message": "Do not decode operands for invalid opcode (#1467)\n\nCo-authored-by: Xiaozhu Meng <xmeng@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "43026f99ba03d71ec6105c4b52ad70759645a733", "commit_date": "2023-07-27T14:24:18Z", "commit_message": "Add support for EM_INTELGT (#1468)\n\nIt's unclear at this time how we should treat Intel's XE Gen12/Tiger Lake binaries, so we just treat them as Gen9 (Ponte Vecchio) for now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d94f856514d7e312d5d4bd704ddac8b166c48c4e", "commit_date": "2023-07-26T21:22:18Z", "commit_message": "do not export Instruction::appendOperand (#1466)\n\n- do not export since it is now private, and should not have been used\r\n  externally (comment said it was to work around old compiler issue).\r\n\r\n- cleanup method order and remove comment", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7456c05b979130eba42c4ee39a9ed00c92de2ba4", "commit_date": "2023-07-26T15:34:22Z", "commit_message": "add getDisplayOrderedOperands interface (#1465)\n\nAdd method Instruction::getDisplayOrderedOperands to return the\r\noperands that are displayed (non implicit operands) when formatting an\r\ninstruction for disassembly.  Returns a vector of Operands in display\r\norder.\r\n\r\nThese operands can be inspected and formatted to produce a disassembly\r\nstring with annotations.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6394752592546df5adff6bc7edb2d8bde330842d", "commit_date": "2023-07-26T03:27:07Z", "commit_message": "modernize ArchSpecificFormatter classes (#1464)\n\n- pass string and vector parameters by const reference instead of by\r\n  value for performance\r\n\r\n- add ArchSpecificFormatter::getInstructionString and remove the overridden\r\n  versions in the non-x86_64 as they were functionally the same, but not\r\n  identically written\r\n\r\n- remove virtual and add override to overridden methods\r\n\r\n- make methods const, use map::at instead of map::operator[]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25ad35c6762df4c40c68bd2fc3f6428efbd45a28", "commit_date": "2023-07-25T18:12:00Z", "commit_message": "improve intel instruction & operand formatting (#1463)\n\nThis fixes three issues when formatting an x86_64 instruction or its\r\noperands:\r\n\r\n1) Fix the order of operands when formatting the instruction to be the\r\n   AT&T syntax order.  If the instruction had three or more operands.\r\n   Conversion from the internal (Intel) order rotated right by 1 instead\r\n   of reversing the operands.\r\n\r\n2) Eliminate special treatment of register %kN as the first operand as\r\n   mask registers in Instruction::format as Operand::format already\r\n   formats these as masks (enclosed in braces) and not all uses of mask\r\n   registers are as a mask.\r\n\r\n3) Fix Operand::format to produce the correct disassembly operand\r\n   string.  The formatting of the internal Expression needs to be done\r\n   for some indirect values.  This was done in the Instruction::format\r\n   instead of directly in Operand::format\r\n\r\n* x86Formatter::getInstructionString - fixes 1, 2, 3\r\n\r\n* Operand::format - fixes 3\r\n\r\n* x86Formatter::formatRegister - cleanup, remove malloc that could leak", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e38d57c9904ab623350e90e0e3adcab2afcf2100", "commit_date": "2023-07-25T18:08:54Z", "commit_message": "fix x86_64 ret instruction formatting (#1457)\n\nThe ret instruction formats incorrectly with an operand of '(%rsp)'.  The\r\noperand should have been flagged as implicit so it is not included in\r\nthe output.\r\n\r\n- eliminate all but one overloaded Instruction::appendOperand` using\r\n  default parameters\r\n\r\n- add isImplicit parameter defaulting to false to\r\n  Instruction::addSuccessor\r\n\r\n- add isImplicit to the ret instruction's addSuccessor call to set the\r\n  ret_addr (which adds the operand to the Instruction object)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88a774dfa36208bc297b65dc18fdfe4e2e66140c", "commit_date": "2023-07-25T18:07:02Z", "commit_message": "modernize InstructionAPI::Operand class (#1456)\n\n* modernize InstructionAPI::Operand class\r\n\r\n- eliminate all but one of the constructors by using default parameters\r\n\r\n- remove destructor (unnecessarily virtual, and reset a member\r\n  shared_ptr), copy ctor, and copy assignment declarations to allow the\r\n  compiler to generate default versions that are equivalent or better\r\n  than the hand written versions\r\n\r\n- add default member initializers for all members\r\n\r\n- make Operand constructor explicit", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e17bc861ac69ddf6f55629b9912dca37e87d05d", "commit_date": "2023-07-25T17:41:03Z", "commit_message": "Fix x86 misspelled, incorrect, and invalid opcodes (#1421)\n\n* Fix spelling of 'vpperm' stringification\r\n\r\n* Fix spelling of 'vpcomd' stringification\r\n\r\n* Fix spelling of 'vprolvd' stringification\r\n\r\n* Fix spelling of 'vprolvq' stringification\r\n\r\n* Remove duplicate entry for 'e_vpsrlvq'\r\n\r\n* Rename 'vpclmullqlqdq' to 'vpclmulqdq'\r\n\r\n* Rename 'punpcklqd' to 'punpckldq'\r\n\r\n* Replace 'punpckhqd' with 'punpckhqdq'\r\n\r\n* Replace 'pcmpgdt' with 'pcmpgtd'\r\n\r\n* Remove instruction 'vpcmpequd'\r\n\r\nThis mnemonic does not exist in any of Intel Architecture Instruction\r\nSet Extensions, AMD Architecture Programmers Manual, or Intel\r\nArchitecutre Software Developer's Manual.\r\n\r\nThe encoding listed under 'SSET1E_66' is a reserved space.\r\n\r\n* Rename mnemonic for 'prefect_w' to 'prefetchw'\r\n\r\n* Rename 'pclmullqlqdq' to 'pclmulqdq'\r\n\r\nThis is a pseudo-opcode for pclmulqdq when imm8 is 0x0.\r\nThe encoding is 660F3A44, so the lookup table location is correct.\r\n\r\n* Remove 'mmxud'\r\n\r\nIt is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'movslq'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'pcommit'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Rename 'cmpsd_sse' to 'cmpsd'\r\n\r\n* Fix spelling of 'vphaddsw' mnemonic\r\n\r\n* Fix spelling of 'vblendpd' mnemonic\r\n\r\n* Remove redundant copy of 'prefetchwt1'\r\n\r\n* Remove redundant 'phsubsw'\r\n\r\n* Remove redundant 'sarx'\r\n\r\n* Remove redundant 'shlx'\r\n\r\n* Remove redundant 'vblendvpd'\r\n\r\n* Remove redundant 'vcmppd'\r\n\r\n* Remove redundant 'vcmpps'\r\n\r\n* Remove redundant 'vcmpsd'\r\n\r\n* Remove redundant 'vcmpss'\r\n\r\n* Remove redundant 'vpmaddubsw'\r\n\r\n* Remove redundant 'vpmaddwd'\r\n\r\n* Remove redundant 'vpmovsdb'\r\n\r\n* Remove redundant 'vpmovsdw'\r\n\r\n* Remove redundant 'vpmovsqb'\r\n\r\n* Remove redundant 'vpmovsqd'\r\n\r\n* Remove redundant 'vpmovsqw'\r\n\r\n* Remove redundant 'vpmovswb'", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d14dff71691f51fb6b96179a87b4cee6d3a34e6b", "commit_date": "2023-07-25T16:19:35Z", "commit_message": "Remove Object::dwarf_parse_aranges (#1462)\n\nIt's usage was removed by 4be991a7 in 2021.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d82356b795db373fd66b098a8ba6073a07ba6089", "commit_date": "2023-07-24T19:02:44Z", "commit_message": "Fix EM_AMDGPU to use RELA as Region Type (#1444)\n\nAccording to the llvm page\r\nhttps://llvm.org/docs/AMDGPUUsage.html#relocation-records\r\nAMDGPU backend generates Elf64_Rela records.\r\n\r\nThis fix added the case for EM_AMDGPU to\r\nstatic Region::RegionType getRelTypeByElfMachine\r\nsuch that it uses RELA instead of the default REL type.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "96f6344d195bb74f30e209c48ee64c8397421dcd", "commit_date": "2023-07-24T17:56:55Z", "commit_message": "Remove lazy initialization of IBSTrees in Symtab (#1454)\n\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes Symtab::mod_lookup threadsafe.\r\n\r\n* Fix includes in Function.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Fix includes in Variable.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Use Function.h instead of forward declarations\r\n\r\nThis removes duplicate typedefs, as well.\r\n\r\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes its use in\r\nSymtab::parseFunctionRanges threadsafe.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "649e43fa2d26aa3c5245b05bac1038f407c869a9", "commit_date": "2023-07-21T17:49:14Z", "commit_message": "Make Symtab::getContainingInlinedFunction lazy parsing threadsafe (#1452)\n\nThis fix does not address the thread safety issues in\r\nSymtab::parseFunctionRanges. That function is still thread unsafe and\r\nwill require separate modifications.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab915557f2ee64c538515fcdfed250e23dc40e19", "commit_date": "2023-07-14T23:39:33Z", "commit_message": "Clean up Symtab constructors (#1451)\n\n* Use default member initializers instead of initializer lists\r\n\r\nThere are members missing from the lists. This also simplifies the\r\nconstructors considerably.\r\n\r\n* Remove unhelpful message in default ctor\r\n\r\n* Delegate to default ctor in Symtab(MappedFile*)\r\n\r\nThis fixes the bug of inconsistent base initialization and ensures the\r\nconstructors are consistent.\r\n\r\n* Use delegating ctor for Symtab::Symtab(unsigned char*...)\r\n\r\nThis fixes the following bugs\r\n\r\n1. Invoke init_debug_symtabAPI before calling create_printf.\r\n\r\n2. Because this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.\r\n\r\n* Use delegating ctor for Symtab::Symtab(std::string...)\r\n\r\nBecause this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683b050d6132ce6a9e0cc5cad35d497b2d2d9cc2", "commit_date": "2023-07-14T21:08:09Z", "commit_message": "Explicitly delete unusable special member functions in Symtab (#1450)\n\nBecause there is a user-defined destructor, the compiler will not generate the special member functions (e.g., copy assignment operator). However, we explicitly delete them here to signal that this class is not copyable or movable.  The destructor is also moved to the top of the class to be next to the other special member functions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84786bd694d2c2163d6e8fbd2190271db1868ff3", "commit_date": "2023-07-14T20:20:25Z", "commit_message": "Remove Symtab::mfForDebugInfo (#1449)\n\nIt is never used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88bf2091da5aa9a018afb1f1db67fe6ffeb4773b", "commit_date": "2023-07-14T19:30:50Z", "commit_message": "Remove Symtab::checkPPC64DescriptorSymbols (#1448)\n\nThe definition was commented out in 3709ead48 in 2009.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7014ee1b08ffa17381b6f0bcda9b94368cb83937", "commit_date": "2023-07-14T19:30:30Z", "commit_message": "Remove Symtab copy constructor (#1447)\n\nThere are several reasons for this.\r\n\r\n1. It doesn't copy every member of the class\r\n2. IBSTree doesn't have a copy constructor\r\n3. mod_lookup_ and func_lookup_ are not copied, but are recreated in other member functions (e.g., mod_lookup()). This completely breaks the semantics of a copy ctor.\r\n4. Resets _ref_cnt to 1", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "beae2a07b5e0a40de54ee1aa972ac765e4d825b2", "commit_date": "2023-07-11T16:11:00Z", "commit_message": "add header files to directly define std:: syms (#1443)\n\n- update dyninst header files to directly include the standard header\r\n  file defining symbols from the standard C++ library that are used by\r\n  the dyninst header file; in some instances, the code relied on symbols\r\n  being defined via an unrelated include file indirectly including the\r\n  necessary header file leading to fragile code\r\n\r\n- minor other cleanups:  remove unnecessary header files, remove\r\n  definitions of names that are defined in a standard header file", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9696c64a3a1d6f41241d27c3c51820616490efa6", "commit_date": "2023-06-15T15:41:23Z", "commit_message": "Fix vector instruction lengths (#1439)\n\nThe following instruction decoded with the wrong length if the modrm\r\noperand specified a memory access as all the operand was incorrectly\r\nspecified to be a register only operand:\r\n\r\n- vcvtpd2udq\r\n- vcvtss2usi\r\n- vcvttpd2qq\r\n- vcvtudq2pd\r\n- vcvtudq2ps\r\n- vpblendd\r\n- vpermpd", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44d86e56068f62b9ac03f7d7537098fd3728fcdb", "commit_date": "2023-05-11T19:26:58Z", "commit_message": "Fix several resource leaks (#1435)\n\n* Local var leak in Symtab::addSymbol\r\n\r\nThis was found using cppcheck's memleak.\r\n\r\n* memCache::doOperation\r\n\r\nNot technically a leak, but cppcheck can't see through the 'push_back'.\r\n\r\n* PCProcess::hasPassedMain\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* parse_func::calcParentFunc\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* int_iRPC::setBinarySize\r\n\r\nFound using cppcheck's publicAllocationError.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8676f10714fb0bb7d0a3e7c65ec729d7db195d94", "commit_date": "2023-05-11T17:47:08Z", "commit_message": "Fix undefined behavior in integer operations (#1434)\n\n* Shifting signed 32-bit value by 31 bits is undefined behavior\r\n\r\nThis was found using cppcheck's shiftTooManyBitsSigned.\r\n\r\n* Signed to unsigned conversion in calculation\r\n\r\nThese were found using cppcheck's signConversion.\r\n\r\n* Fix signed overflow\r\n\r\nThis was found using cppcheck's integerOverflowCond.\r\n\r\n* Shifting negative value\r\n\r\nThis was found using cppcheck's shiftNegativeLHS.\r\n\r\n* BPatch_addressSpace::deleteSnippet: fix enumeral conversion in conditional", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c4a422834fbc3e6159ba00f10820f13c1958901e", "commit_date": "2023-05-10T19:01:00Z", "commit_message": "Prevent use of possibly-uninitialized local variable (#1433)\n\nThese were found using cppcheck's uninitvar and eraseDereference.\r\n\r\nFor the usages of iterator-like classes in process.C, they aren't strictly\r\nuninitialized variable usages since the classes in question are standard\r\nlayout types. It would be better to replace the usages there with list\r\nconstruction to avoid the static check altogether.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0c88bea297cb64cf147192242aaa3a4047cdb84", "commit_date": "2023-05-10T17:51:52Z", "commit_message": "Fix uninitialized member variables (#1431)\n\nThese were detected by cppcheck's uninitMemberVar*.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a73abaa9c7298a3e4ce0acf4eb14db8b1cb42fc", "commit_date": "2023-05-10T15:45:14Z", "commit_message": "Fix use of null pointer after check (#1432)\n\nThese were found using cppcheck's nullPointerRedundantCheck.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "68fc3d8a5f1527dcaa66c9455369c62e2b4fa54c", "commit_date": "2023-05-10T05:14:42Z", "commit_message": "Protect against self-assignment in copy constructors (#1430)\n\n* Protect against self-assignment in copy constructors\r\n\r\nThese were found by cppcheck:\r\n\r\ncommon/src/Node.C:198:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nNodeIterator &NodeIterator::operator=(const NodeIterator &rhs) {\r\n                            ^\r\ncommon/src/Edge.C:108:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nEdgeIterator &EdgeIterator::operator=(const EdgeIterator &rhs) {", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce097b5399fb654f68fbfe48e25e7a7bd567bf82", "commit_date": "2023-05-10T04:07:40Z", "commit_message": "Fix windows warnings (#1429)\n\n* Mismatched printf format arguments\r\n\r\nThese were found using cppcheck's invalidPrintfArgType_*.\r\n\r\n* Fix uninitialized member variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85fb0f95050c903bf1e1a1dbcacf1913dad1d73b", "commit_date": "2023-05-09T20:05:56Z", "commit_message": "Remove virtual calls in constructor/destructor (#1428)\n\n* AddressTranslateWin\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-win.C:49:17: style: Virtual function 'init' is called from constructor 'AddressTranslateWin(PID pid,PROC_HANDLE phandle)' at line 168. Dynamic binding is not used. [virtualCallInConstructor]\r\n   virtual bool init();\r\n\r\n* NodeIteratorPredicateObj\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:293:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateObj(Graph::NodePredicate::Ptr\r\np,NodeIterator&b,NodeIterator&e)' at line 331. Dynamic binding is not\r\nused. [virtualCallInConstructor]\r\n\r\n* NodeIteratorPredicateFunc\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:352:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateFunc(Graph::NodePredicateFunc\r\np,void*u,NodeIterator&b,NodeIterator&e)' at line 394. Dynamic binding is\r\nnot used. [virtualCallInConstructor]\r\n\r\n* InstructionDecoder_x86\r\n\r\nFound using cppcheck:\r\n\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: style: Virtual function 'setMode' is called from constructor 'InstructionDecoder_x86(Architecture a)' at line 144. Dynamic binding is not used. [virtualCallInConstructor]\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n                                                ^\r\ninstructionAPI/src/InstructionDecoder-x86.C:144:28: note: Calling setMode\r\n      if(a == Arch_x86_64) setMode(true);\r\n                           ^\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: note: setMode is a virtual function\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n\r\n* CFGFactor::destroy_block\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:117:18: style: Virtual function 'free_block' is called from destructor '~CFGFactory()' at line 92. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_block(Block * b);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:92:5: note: Calling destroy_block\r\n    destroy_block(b);\r\n    ^\r\nparseAPI/src/CFGFactory.C:182:5: note: Calling free_block\r\n    free_block(b);\r\n    ^\r\nparseAPI/h/CFGFactory.h:117:18: note: free_block is a virtual function\r\n    virtual void free_block(Block * b);\r\n\r\n* CFGFactor::free_func\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:116:18: style: Virtual function 'free_func' is called from destructor '~CFGFactory()' at line 95. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_func(Function * f);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:95:5: note: Calling destroy_func\r\n    destroy_func(f);\r\n    ^\r\nparseAPI/src/CFGFactory.C:172:4: note: Calling free_func\r\n   free_func(f);\r\n   ^\r\nparseAPI/h/CFGFactory.h:116:18: note: free_func is a virtual function\r\n    virtual void free_func(Function * f);\r\n\r\n* CFGFactor::free_edge\r\n\r\n* ~freebsd_process\r\n\r\nFound using cppcheck:\r\n\r\nproccontrol/src/freebsd.C:1046:17: warning: Member variable 'freebsd_thread::is_exited' is not initialized in the constructor. [uninitMemberVar]\r\nfreebsd_thread::freebsd_thread(int_process *p, Dyninst::THR_ID t, Dyninst::LWP l)\r\n                ^\r\nproccontrol/src/freebsd.h:122:17: style: Virtual function 'getEventQueue' is called from destructor '~freebsd_process()' at line 795. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual int getEventQueue();\r\n                ^\r\nproccontrol/src/freebsd.C:795:22: note: Calling getEventQueue\r\n    int eventQueue = getEventQueue();\r\n                     ^\r\nproccontrol/src/freebsd.h:122:17: note: getEventQueue is a virtual function\r\n    virtual int getEventQueue();", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6ab42a4da20f7d9a5a58c00a4835d337a95fef5", "commit_date": "2023-05-09T17:30:44Z", "commit_message": "AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak (#1427)\n\n* AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-sysv.C:1046:58: error: Resource leak: fd [resourceLeak]\r\n   if (read(fd, &e_hdr, sizeof(e_hdr)) != sizeof(e_hdr)) return base;\r\n                                                         ^\r\ncommon/src/addrtranslate-sysv.C:1048:28: error: Resource leak: fd [resourceLeak]\r\n   if (e_hdr.e_phoff == 0) return base;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5409c471292cb8b1c87e9b5ae1e94fa9b6eb573", "commit_date": "2023-05-09T17:09:20Z", "commit_message": "Make CondVar non-copyable, non-moveable (#1426)\n\nThis makes it consistent with std::condition_variable.\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]\r\n   mutex = new mutex_t;\r\n   ^\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]\r\n   mutex = new mutex_t;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "45614d7908e36d32d26126d2844d388c6936ba61", "commit_date": "2023-05-02T18:17:06Z", "commit_message": "Github CI: increase number of build jobs (#1424)\n\nGithub only allows one CPU core per job, but any number of threads. Testing shows that N=2 threads reduces build time by 2-2.5x, N=3 by 2.2x, and N=4 increases build time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e37524ab88b645328c1f02b5c4ab7ac0f7e8d3f", "commit_date": "2023-05-02T02:13:22Z", "commit_message": "Github CI: make compiler multi-build a cron job (#1425)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8952d3207763a26938e097e58ebe97b490c73cf", "commit_date": "2023-05-01T17:32:12Z", "commit_message": "CI compiler multibuilds (#1415)\n\n* Weekly build across all compiler versions and build types\r\n\r\n* Use DYNINST_WARNINGS_AS_ERRORS=ON instead of -Werror", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2e26598a5301ff900d2ca235db729d1dd4c4d350", "commit_date": "2023-05-01T16:45:24Z", "commit_message": "Use default TBB when doing CI spack build (#1423)\n\nDyninst now requires TBB >= 2019.9.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7621bc85ac0cda3bd1b2a17d78aac6d48c68280a", "commit_date": "2023-04-28T00:34:11Z", "commit_message": "Add ubuntu-22.04 to dev container build (#1419)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "719036aeb55c459a355afb91188cfa4d7d465bc9", "commit_date": "2023-04-27T23:51:51Z", "commit_message": "Refactor Dockerfile.ubuntu (#1420)\n\n* Move elfutils logic into build_elfutils.sh\r\n\r\n* Whitespace\r\n\r\n* Copy in dependencies.versions\r\n\r\nThis is no longer done in the base container because it didn't make\r\nsense there as that image should never change.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8d1a313be087154aad95d660b9fe2b34f4da492", "commit_date": "2023-04-27T22:33:27Z", "commit_message": "warning fix:  stack frame size (#1418)\n\n- when compiling with clang 15 and 16 in addition to clang 14,\r\n  allow a 40000 stack frame size", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a9c9e061ea6b41b93151f0ed3b34208346b4881", "commit_date": "2023-04-27T21:28:12Z", "commit_message": "Make InstructionAPI::isArrayIndexValid const. (#1416)\n\nclang complains:\r\n\r\n  'constexpr' non-static member function will not be implicitly 'const'  in C++14; add 'const' to avoid a change in behavior [-Werror,-Wconstexpr-not-const]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "739ad57883f032fb18a6c741f0c2f98e9a766bc7", "commit_date": "2023-04-25T17:03:44Z", "commit_message": "CMake modernization (#1391)\n\n# Changes to building Dyninst\r\n- Minimum CMake version is 3.14.0\r\n- STERILE_BUILD is now deprecated\r\n- ENABLE_LTO was renamed to DYNINST_ENABLE_LTO\r\n- CMAKE_EXPORT_COMPILE_COMMANDS is no longer set\r\n- Platform detection is done natively in CMake\r\n  - full support for Linux on x86, AMD64, ppc64le, and aarch64/ARMv8\r\n  - experimental support for 32-bit FreeBSD and Windows on x86\r\n- Custom install targets <target>-install have been removed\r\n- Installation subpaths (bin, lib, include, etc.)  are no longer user-configurable\r\n- Static versions of Dyninst libraries now depend on other static Dyninst libraries\r\n  - For example, libDynElf.a now depends on libcommon.a, not libcommon.so\r\n- Libraries that cannot build with symlight now warn when LIGHTWEIGHT_SYMTAB=ON\r\n- User build options passed via CMAKE_<LANG>_FLAGS are correctly preserved and override the builtin options\r\n- <PackageName>_ROOT_DIR now implies <PackageName>_NO_SYSTEM_PATHS and sets <PackageName>_ROOT\r\n  - This forces CMake to find the package at the given location or in CMAKE_PREFIX_PATH\r\n  - When using CMake >= 3.16, searching CMAKE_PREFIX_PATH can be disabled with CMAKE_FIND_USE_CMAKE_PATH=OFF\r\n  - For example, -DElfUtils_ROOT_DIR=/some/path sets ElfUtils_NO_SYSTEM_PATHS=ON and ElfUtils_ROOT=/some/path\r\n\r\n## RPATH handling\r\n- CMP0060 is active and so libraries are linked by their full paths even in implicit directories (e.g., /usr/lib/foo.so instead of -lfoo)\r\n- Populate RPATHs for binaries in the build tree: set(CMAKE_SKIP_BUILD_RPATH FALSE)\r\n- Do not use the install path as the RPATH: set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)\r\n  - $ORIGIN is used instead\r\n- Add paths to any directories outside the project that are in the linker search path or contain linked library files: set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\r\n\r\n## Third-party libraries (tpl)\r\n- The ability to build tpls from source has been removed\r\n- All libraries must have a CMakeConfig.cmake\r\n- Minimum versions\r\n  - Boost: 1.71.0\r\n  - TBB/oneapi-tbb: 2019.9\r\n  - elfutils: 0.186\r\n- An imported interface named Dyninst::<library> is created for each library\r\n  - includes are marked SYSTEM so they don't produce warnings\r\n  - exported in DyninstConfig.cmake as per https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n- pkgconfig is used to find elfutils and valgrind\r\n  - if pkgconfig fails, a manual search is done\r\n  - This can be disabled with  ElfUtils_NO_SYSTEM_PATHS=ON\r\n\r\n# Changes to consuming Dyninst as a CMake project\r\n- All targets are in the Dyninst namespace; e.g., symtabAPI is now Dyninst::symtabAPI\r\n- Each third-party library has an associated imported interface named Dyninst::<library>, e.g., Dyninst::Boost\r\n  - Users are encouraged to use these, if the same library is need in their applications\r\n- DYNINST_LIBRARIES has been removed\r\n- DYNINST_INCLUDE_DIR is now deprecated and will be removed in a future version\r\n  - Use the provided targets, instead\r\n- DYNINST_INTERNAL_DEFINES is now deprecated and will be removed in a future version\r\n- DYNINST_PLATFORM is now deprecated and will be removed in a future version\r\n- find_package(Dyninst ... COMPONENTS ...) now works correctly\r\n- Version constraints for find_package(Dyninst X.Y.Z) now work correctly\r\n  - Dyninst only guarantees ABI compatibility between major releases, so only the same major versions are compatible\r\n\r\nUsers who are not ready to fully migrate to the new Dyninst CMake package may use the following to preserve backward compatibility:\r\n\r\ncmake\r\nif(TARGET Dyninst::common)\r\n  foreach(t common symtabapi ...)\r\n    add_library(${t} INTERFACE IMPORTED)\r\n    target_link_libraries(${t} INTERFACE Dyninst::${t})\r\n  endforeach()\r\nendif()\r\n\r\n* Update minimum CMake version to 3.13.0\r\n\r\n* Rename CMake files to prevent name collisions\r\n\r\nWhen consumed as a subproject, the CMake files could be imported into the parent project where the filenames could collide.\r\n\r\n* Prepend to CMAKE_MODULE_PATH instead of overwriting\r\n\r\n* Fix capitalization error in FindThread_DB\r\n\r\nThis should silence the warning about Thread_Db versus Thread_DB\r\n\r\n* Require CMake package for TBB (#1322)\r\n\r\n* Make libdl/dbghelp private linkage\r\n\r\n* Remove TBB flags from toolkits that don't use TBB\r\n\r\n* Remove FindTBB.cmake\r\n\r\nAll supported TBB versions ship as CMake packages, so this is no longer\r\nneeded.\r\n\r\n* Remove from-source build option\r\n\r\n* Create an imported target for TBB used by Dyninst\r\n\r\nThis is needed to force the include directories to be considered 'system' directories so that compiler warnings from TBB sources are ignored\r\n\r\n* Rename cmake/ThreadingBuildingBlocks.cmake -> cmake/tpls/DyninstTBB.cmake\r\n\r\nThis is needed to keep the namespace clean for DyninstConfig.cmake\r\n\r\n* Export TBB as part of the Dyninst CMake package\r\n\r\nThis is required by the CMake guidelines:\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nIn particular,\r\n  \"All required dependencies of a package must also be found in the package configuration file\"\r\n\r\n* Format DyninstTBB.cmake\r\n\r\n* Boost CMake modernization (#1330)\r\n\r\n* Remove FindBoost.cmake\r\n\r\nUse the one provided by CMake so we don't have to maintain this one.\r\n\r\n* Remove from-source build\r\n\r\n* Remove user-configurable version\r\n\r\n* Force use of multithreaded libraries\r\n\r\nWe don't need to include Threads here. Boost will do that.\r\n\r\n* Disable use of statically-linked runtime\r\n\r\n* Remove Boost_DEBUG\r\n\r\n* Always enable searching system paths\r\n\r\n* Unify path calculations, pass to find_package as hints\r\n\r\n* Clean up comments\r\n\r\n* Use include_guard\r\n\r\n* Allow using Boost's CMake package\r\n\r\nIt is now provided by default since 1.70.0 which is the current minimum\r\nacceptable version.\r\n\r\n* Remove rest of cache variables\r\n\r\n* Remove MSVC-specific template define\r\n\r\nWe can add this back, if we find there are newer VCs still affected.\r\n\r\n* Make Dyninst::Boost imported interface target\r\n\r\nThis is needed to make the include directories be \"system\" directories\r\nso that warnings in their headers do not propagate into Dyninst.\r\n\r\n* Do not add Boost as a dependency for all libs\r\n\r\n* Make find_package QUIET\r\n\r\n* Use Boost_* variables instead of calculating includes, libs, etc.\r\n\r\n* Make a header-only wrapper target\r\n\r\n* Add to Dyninst package\r\n\r\n* Update CMakeLists\r\n\r\n* Set Boost_NO_WARN_NEW_VERSIONS\r\n\r\n* Bump minimum version to 1.71.0\r\n\r\n* Elfutils cmake modernization (#1333)\r\n\r\n* Rename FindLibDwarf -> FindLibDW\r\n\r\n* Update FindLibDW\r\n\r\n* Rename FindLibElf -> FindLibELF\r\n\r\n* Update FindLibELF\r\n\r\n* Create FindElfutils\r\n\r\n* Update FindLibDebuginfod\r\n\r\n* Update DyninstElfUtils\r\n\r\n* Update the CMakeLists to use new targets\r\n\r\n* Use CMP0074 in updated Find modules\r\n\r\nThis enables use of <Package>_ROOT variables when find_package is\r\ninvoked.\r\n\r\n* Provide default dummy interface target for ElfUtils::ElfUtils\r\n\r\nNeeded for non-Unix platforms.\r\n\r\n* Fix rebase bug in CMakeLists.txt\r\n\r\n* Export DyninstElfUtils\r\n\r\n* Forward QUIET flag to pkg_check_modules\r\n\r\n* Forward version to pkg_check_modules\r\n\r\n* Use lib from pkg-config, if found\r\n\r\n* Clean up internal variables\r\n\r\n* Simplify cache variable handling\r\n\r\n* Use full linkage name for libs returned by pkg-config\r\n\r\n* Separate out dependent libraries in FindLibDW\r\n\r\nSome platforms include libelf as a dependency, but IMPORTED_LOCATION accepts only a single entry. Store the rest in IMPORTED_LINK_DEPENDENT_LIBRARIES.\r\n\r\n* Fix quoting bug in FindLibDW\r\n\r\n* Fix lib check in FindLibDW\r\n\r\n* Manually set PC_<XXX>_INCLUDE_DIRS when FindPkgConfig misses it\r\n\r\nFindPkgConfig uses the output from pkg-config --cflags-only-I <lib> to set PC_<XXX>_INCLUDE_DIRS. Because libelf is usually in a system directory, pkg-config will return nothing for this. FindPkgConfig stores the actual includedir variable from the PC file, so we can fetch it from there.\r\n\r\n* Libiberty cmake modernization (#1334)\r\n\r\n* LibIberty cmake modernization\r\n\r\n* Use INCLUDE_DIRS directly\r\n\r\n* Threaddb cmake modernization (#1338)\r\n\r\n* Update FindThread_DB\r\n\r\n* Update thread_db\r\n\r\n* Update docs URL\r\n\r\n* Use OpenMP target (#1339)\r\n\r\nThis also provides a dummy target so we don't have to do any additional checking when USE_OpenMP=OFF. We only use OpenMP_CXX, so I didn't create a target for the other languages (C,Fortran).\r\n\r\n* Valgrind cmake modernization (#1340)\r\n\r\n* Update valgrind\r\n\r\n* Add version check in Find module\r\n\r\n* Remove Valgrind_LIBRARIES\r\n\r\nThey are versioned by architecture, so are hard to nail down with\r\nfind_library. We also don't need them (at least not yet).\r\n\r\n* Make dummy when ADD_VALGRIND_ANNOTATIONS=OFF\r\n\r\n* Add compile defs\r\n\r\n* Update CMakeLists.txt\r\n\r\n* Make the dummy IMPORTED\r\n\r\n* Fix bug with version handling in DyninstBoost\r\n\r\n* Use _min_version in DyninstBoost\r\n\r\nThis is so the CI version check will work uniformly\r\n\r\n* Add existence check for Dyninst::Boost before creating target\r\n\r\n* Clean up find_package flag handling in Find modules\r\n\r\n* Make variable exports uniform across Find modules\r\n\r\n* Coalesce calls to set_target_properties in Find modules\r\n\r\n* Fix bug in DyninstElfutils when calling find_package LibDebuginfod\r\n\r\n* Make just one exported target in FindElfutils\r\n\r\n* Add target existence check in DyninstTBB\r\n\r\n* Add SYSTEM property to Elfutils includes\r\n\r\n* Remove export of DYNINST_LIBRARIES\r\n\r\n* Preserve user's module path when looking for Dyninst modules\r\n\r\n* Manually set legacy DYNINST_INCLUDE_DIR\r\n\r\nThis is now deprecated.\r\n\r\n* Use CMAKE_CURRENT_LIST_DIR intead of DYNINST_CMAKE_DIR\r\n\r\n* Install Find modules for third-party libraries\r\n\r\n* Remove unused DyninstConfigVersion.cmake\r\n\r\n* Remove unneeded comments in DyninstOptions\r\n\r\n* Move all options to DyninstOptions\r\n\r\n* Remove modification of CMAKE_CONFIGURATION_TYPES\r\n\r\nWe just support the usual configs.\r\n\r\n* Move Dyninst version strings to base CMakeLists.txt\r\n\r\n* Move internal includes into base CMakeListst.txt\r\n\r\nThis ensures that all user options and internal settings are in place\r\nbefore third-party dependencies are configured.\r\n\r\n* Clean up 3rd party includes in base CMakeLists.txt\r\n\r\n* Remove unused version strings\r\n\r\n* Remove unneeded 'add_dependencies(common boost)' in base CMakeListst.txt\r\n\r\nThis is now handled directly in CMake recipe for common.\r\n\r\n* Remove unused testsuite include in base CMakeLists.txt\r\n\r\n* Update the project declaration\r\n\r\n* Move setting of CMAKE_BUILD_TYPE to base CMakeLists.txt\r\n\r\nThis keeps all CMake-level variables in one place.\r\n\r\n* Don't set CMAKE_EXPORT_COMPILE_COMMANDS\r\n\r\nThe user should set this.\r\n\r\n* Move BUILD_SHARED_LIBS into base CMakeLists.txt\r\n\r\n* Remove unused INSTALL_DOC_DIR\r\n\r\n* Make cmake_minimum_required a FATAL_ERROR\r\n\r\n* Move rpath and shared lib settings into DyninstLibrary\r\n\r\n* Move installation items into DyninstInstall.cmake\r\n\r\n* Automatically generate DyninstConfigVersion.cmake\r\n\r\n* Use configure_package_config_file to generate DyninstConfig.cmake\r\n\r\nThis will provide more utilities to make a more robust Config.cmake\r\n\r\n* Use INSTALL_INCLUDE_DIR to set DYNINST_INCLUDE_DIR\r\n\r\n* Use PACKAGE_INIT in Config.cmake.in\r\n\r\nAlso use it for DYNINST_INCLUDE_DIR\r\n\r\n* Don't explicitly set Dyninst_FOUND\r\n\r\nThe caller's find_package will do this.\r\n\r\n* Remove unused DyninstSystemPaths.cmake\r\n\r\n* Simplify visibility settings and move to DyninstLibrary\r\n\r\n* Move SYMREADER calculation to base CMakeLists.txt\r\n\r\nIt is needed in several places before DyninstLibrary is included.\r\n\r\n* Merge platform calculations into a DyninstPlatform.cmake\r\n\r\n* Remove DyninstVisibility include\r\n\r\n* Moved configure_file back to base CMakeListst\r\n\r\nThe ordering matters until common gets an explicit list of header files (currently uses a glob).\r\n\r\n* Remove DyninstConfigVersion.cmake.in\r\n\r\nThis isn't needed anymore since the version file is generated automatically.\r\n\r\n* Remove custom target install\r\n\r\ncmake_install.cmake isn't intended to be used that way.\r\n\r\n* Remove install logic from dyninst_library\r\n\r\nThat is now handled in DyninstInstall.\r\n\r\n* cmake-format: set tab size to 2\r\n\r\n* cmake-format: don't format comments\r\n\r\n* Calculate platform from CMake-provided mechanisms\r\n\r\nThese are equivalent to the existing bash, but more adaptable.\r\n\r\n* Map stringy names into CMake variables\r\n\r\n* Replace Windows platform check with DYNINST_OS_Windows\r\n\r\n* Replace Linux platform check with DYNINST_OS_Linux\r\n\r\n* Replace FreeBSD platform check with DYNINST_OS_FreeBSD\r\n\r\n* Replace x86 platform check with DYNINST_OS_x86_64\r\n\r\n* Replace ppc platform check with DYNINST_ARCH_ppc64le\r\n\r\n* Replace aarch64 platform check with DYNINST_ARCH_aarch64\r\n\r\n* Replace mangled platform checks with explicit DYNINST_{OS,ARCH}\r\n\r\n* Rename PLATFORM to DYNINST_PLATFORM and export it as legacy\r\n\r\nThis is only used in the test suite.\r\n\r\n* Don't pass -m64 explicitly on ppc64le\r\n\r\nWe only support 64-bit ppc, so this is redundant and non-portable.\r\n\r\n* Remove commented-out define for aarch64\r\n\r\n* Simplify CapArchDef\r\n\r\nWith the new variables, only one pass over the OS names is needed.\r\n\r\n* Allow FreeBSD to build on i386\r\n\r\nI previously thought it was only allowed on x86_64, but there is an old platform called i386-unknown-freebsd7.2.\r\n\r\n* Add Windows to DYNINST_PLATFORM\r\n\r\n* Replace usage of WIN32 with DYNINST_OS_Windows\r\n\r\n* Replace usage of UNIX with DYNINST_OS_UNIX\r\n\r\n* Merge Linux+FreeBSD checks into UNIX check\r\n\r\n* symtabAPI - replace i386 check\r\n\r\n* Use 'option' instead of 'set(... CACHE ...)'\r\n\r\n* Deprecate STERILE_BUILD\r\n\r\n* DyninstOptions - use 'OFF' instead of 'NO'\r\n\r\n* Get rid of dyninst_link_private_library\r\n\r\nWe require CMake >= 3.13.0 so this is no longer needed.\r\n\r\n* Rename SOVERSION to DYNINST_SOVERSION\r\n\r\nSOVERSION is a keyword.\r\n\r\n* Replace LIBVERSION with DYNINST_LIBVERSION\r\n\r\nFor clarity and consistency.\r\n\r\n* Replace DYNINST_ROOT with PROJECT_SOURCE_DIR\r\n\r\n* Move library settings into DyninstLibrarySettings.cmake\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR absolute\r\n\r\nIn 'install', they are relative to CMAKE_INSTALL_PREFIX by default.\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR cache variables\r\n\r\nThere's no need to let the user modify these locations.\r\n\r\n* DyninstLibrarySettings - reuse INSTALL vars\r\n\r\nThis just makes sure changes are propagated.\r\n\r\n* DyninstLibrarySettings - remove INSTALL_BIN_DIR\r\n\r\nIt's not used.\r\n\r\n* DyninstLibrary - rename INSTALL_*_DIR -> DYNINST_INSTALL_*DIR\r\n\r\nThis is more in line with the naming convention of GNUInstallDirs. We\r\ncould use GNUInstallDirs directly, but there's no need to let the user\r\nconfigure the install directory layout.\r\n\r\n* DyninstLibrarySettings - Use 'Dyninst' instead of PROJECT_NAME\r\n\r\nThis is the only placed PROJECT_NAME is used, so make it consistent.\r\n\r\n* DyninstLibrarySettings - update RPATH handling\r\n\r\n* DyninstLibrary - don't manually create cmake_install.cmake\r\n\r\nThese are automatically created and installed by 'install'.\r\n\r\n* DyninstLibrary - Merge calls to set_target_properties\r\n\r\n* DyninstLibrary - Cleanup superfluous variable usage\r\n\r\n* DyninstLibrary - add Windows defines to targets instead of directories\r\n\r\n* DyninstLibrary - add LIGHTWEIGHT_SYMTAB, SW_ANALYSIS_STEPPER to targets\r\n\r\n* DyninstLibrary - add DYNINST_DIAGNOSTIC_NO_SUPPRESSIONS to targets\r\n\r\n* DyninstLibrary - export all targets to DyninstTargets.cmake\r\n\r\n* DyninstLibrary - don't treat each library as a separate component\r\n\r\n'COMPONENT' in 'install' is used to group targets into \"bags\" of useful\r\nfeatures that can be independently installed using cmake --install .\r\n--component .... That doesn't work for Dyninst. Note: This is\r\northogonal to the concept of a COMPONENT in find_package.\r\n\r\n* DyninstLibrary - remove CLEAN_DIRECT_OUTPUT\r\n\r\nWe no longer offer per-library build targets.\r\n\r\n* DyninstLibrary - remove WITHOUT_SYMTAB_API and WITHOUT_SYMLITE\r\n\r\nThese are never used.\r\n\r\n* DyninstLibrary - refactor global defines in 'dyninst_library'\r\n\r\n* DyninstLibrary - Move calculation of SYMREADER\r\n\r\n* DyninstLibrary - rename 'target' to '_target'\r\n\r\n'target' is a keyword\r\n\r\n* DyninstLibrary - add named arguments\r\n\r\n* DyninstLibrary - rename SRC_LIST with _target_SOURCE_FILES\r\n\r\nThe latter is created from the named argument 'SOURCE_FILES'.\r\n\r\n* DyninstLibrary - Replace ACTUAL_TARGETS with _all_targets\r\n\r\n* DyninstLibrary - make headers part of library declaration\r\n\r\nThis tracks file changes to signal rebuilds.\r\n\r\n* DyninstLibrary - add links, properties, includes to all targets\r\n\r\nThis synchronizes the SHARED and STATIC libraries.\r\n\r\n* DyninstLibrary - link private and public deps separately\r\n\r\n* DyninstLibrary - Set include directories on interfaces\r\n\r\nThis replaces using PUBLIC_HEADERS which is really intended for use with\r\nMacOS Framework targets.\r\n\r\n* DyninstLibrary - remove LIBRARY_OUTPUT_DIRECTORY\r\n\r\nThe default is CMAKE_CURRENT_BINARY_DIR, so no need to specify it.\r\n\r\n* DyninstLibrary - Apply DEFINES passed to dyninst_library\r\n\r\n* DyninstLibrary - make SHARED library explicit\r\n\r\n* DyninstLibrary - don't deref Boolean variable\r\n\r\n* DyninstLibrary - update message\r\n\r\n* DyninstLibrary - Install headers, preserving the directory structure\r\n\r\n* DyninstLibrary - \"return\" the list of generated target names\r\n\r\n* DyninstLibrary - add directory-level include guard\r\n\r\n* common - remove spurious files\r\n\r\nAdded in 2015.\r\n\r\n* common - move generation of dyninstversion.h into CMakeLists.txt\r\n\r\n* common - add global include guard in CMakeLists\r\n\r\n* common - explicitly list header files in CMakeLists\r\n\r\nThis makes it easier to see what the actual public files are.\r\n\r\n* common - refactor source list calculation\r\n\r\n* common - move include of DyninstLibrary into subdirectory\r\n\r\n* common - use new dyninst_library\r\n\r\n* common - set includes and Windows stuff on all targets\r\n\r\n* common - write 'dyninstverison.h' into source dir\r\n\r\n* elf - make a dummy target for non-Unix OSes\r\n\r\n* elf - use new dyninst_library\r\n\r\n* dwarf - use new dyninst_library\r\n\r\nThe changes here are the same as for elf/CMakeLists\r\n\r\n* symlite - make symlite/h/SymLite-elf.h publicly consumable\r\n\r\nIt refers to files in the build tree that aren't available in the\r\ninstall tree. Although this file is in the install tree, it was never\r\nconsumable by users. Updating this is of questionable utility, but it at\r\nleast gives us the opportunity to write tests against the public\r\ninterface.\r\n\r\n* symlite - use new dyninst_library\r\n\r\n* instructionAPI - use new dyninst_library\r\n\r\n* symtabAPI - use new dyninst_library\r\n\r\n* proccontrol - use new dyninst_library\r\n\r\n* parseAPI - use full path to common/h/util.h.\r\n\r\nThis prevents confusion with parseAPI/h/util.h.\r\n\r\n* parseAPI - use new dyninst_library\r\n\r\nThis one is different from the rest because parseAPI and dataflowAPI\r\nhave circular dependencies on each other, so it's not currently possible\r\nto split them up.\r\n\r\n* stackwalk - use new dyninst_library\r\n\r\nPreviously, FORCE_FRAME_POINTER was applied to _all_ of Dyninst. The\r\ncommit comments said it was supposed to be just for the stackwalk\r\nsources, so that is the new behavior.\r\n\r\n* stackwalk - incorporate check of SW_ANALYSIS_STEPPER\r\n\r\nIt only affects stackwalk, so no need to put it on all of the targets.\r\n\r\n* stackwalk - put SW_ANALYSIS_STEPPER check in post-processing\r\n\r\nThis tidies up the code a bit.\r\n\r\n* patchAPI - use new dyninst_library\r\n\r\n* dyninstAPI - use absolute include path for 'debug.h'\r\n\r\n* dyninstAPI - add missing include for Dyninst::Address\r\n\r\nThis was transitively included, but breaks when reording includes.\r\n\r\n* dyninstAPI - add missing include for std::set\r\n\r\n* dyninstAPI - use new dyninst_library\r\n\r\n* dynC_API - use new dyninst_library\r\n\r\n* parseThat - use new dyninst_library\r\n\r\n* dyninstAPI_RT - use new dyninst_library\r\n\r\n1. SRC_ASSEMBLY was never used. The assembly files have always been\r\nexplicitly listed.\r\n\r\n2. We are still linking libdl.so on the static versions of the runtime.\r\nThis hasn't been an issue in the past, so we'll leave it.\r\n\r\n3. The creation of the lists of source files has redundant checks in it,\r\nbut this version is much clearer on what is actually happening.\r\n\r\n4. CHECK_C_COMPILER_FLAG_EXTENDED was removed since CMake now supports a\r\nmuch larger set of compilers and Dyninst has dropped support for HP,\r\nSun, and XL.\r\n\r\n5. The config is much less noisy. There was no reason to determine if\r\n32-bit support would work when the user didn't ask for it. Now, the\r\nconfig will fail if the user asks for 32-bit libraries and the compiler\r\ncan't create them.\r\n\r\n* Remove top-level project includes\r\n\r\nAll of the necessary includes are now handled by each toolkit via\r\nexplicit import/export of targets and include directories.\r\n\r\n* Remove top-level check for SYMREADER\r\n\r\nThe respective CMakeLists now handle this.\r\n\r\n* Add better handling of Threads/pthread\r\n\r\n1. Move Threads include into a tpls module\r\n\r\n2. Link against Threads::Threads instead of 'pthread'\r\n\r\n3. Add explicit dependencies in dyninstAPI and dyninstAPI_RT (they were\r\nimplicit before).\r\n\r\n* DyninstConfig - Correctly detect presence of COMPONENTS on import\r\n\r\nThis previously didn't work at all because DYNINST_${COMP}_FOUND should\r\nhave been spelled Dyninst_${COMP}_FOUND. This is simpler and allows the\r\nuse of check_required_components directly.\r\n\r\n* DyninstConfig - Remove unneeded and (now) incorrect comments\r\n\r\n* Make an OpenMP tpl module\r\n\r\nThis will make it easier to export OpenMP in DyninstConfig. It also makes CMakeLists.txt have just straight-line code.\r\n\r\n* Include all third-party libraries in DyninstConfig\r\n\r\nThis is explicitly required by the CMake documentation:\r\n\r\n  \"All required dependencies of a package must also be found in the\r\npackage configuration file.\"\r\n\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nThis also ensures that the custom Dyninst:: targets are always available\r\nto consumers.\r\n\r\n* Ensure static libraries depend on static Dyninst libraries\r\n\r\nWhen creating a static Dyninst library, ensure that it depends on the\r\ncorresponding static Dyninst library. For example, libDynElf.a should\r\ndepend on libcommon.a, not libcommon.so.\r\n\r\n* DyninstWarnings - Ignore no-pragma warnings for non-Werror builds\r\n\r\n* DyninstCapArchDef - rename UNIFIED_DEFINES\r\n\r\nDYNINST_PLATFORM_CAPABILITIES is more descriptive.\r\n\r\n* DyninstCapArchDef - add include guard\r\n\r\n* DyninstLibrary - add DYNINST_PLATFORM_CAPABILITIES to all targets\r\n\r\n* DyninstLibrary - add documentation\r\n\r\n* DyninstLibrary - update comment about install dir structure\r\n\r\n* DyninstLibrary - install runtime in 'bin'\r\n\r\n* Include 'src' and 'h' subdirectories in BUILD_INTERFACE\r\n\r\nEvery toolkit has a similar directory structure, so we can do this\r\nin just one location instead of in each CMakeLists.\r\n\r\n* Unswitch loops for platform-specific target updates in CMakeLists\r\n\r\nThis is really a code beautification.\r\n\r\n* Remove DYNINST_LIBVERSION\r\n\r\nIt's never different from DYNINST_VERSION and has no special purpose.\r\n\r\n* Remove system path detection in RPATH calculations\r\n\r\nWe use CMAKE_BUILD_WITH_INSTALL_RPATH to ensure the install path is not\r\nin RPATH/RUNPATH, but then this code would add it back if the install\r\ndirectory isn't a system path.\r\n\r\n* DyninstLibrary - simplify regex for header install\r\n\r\n* Rename cmake/version.h.in to cmake/dyninstversion.h.in\r\n\r\nThis makes the generated file match the generator file name.\r\n\r\n* DyninstLibrary - install from _target_PUBLIC_HEADER_FILES\r\n\r\n_public_headers was only incidentally present from the file including\r\nthis one.\r\n\r\n* parseAPI - make headers PRIVATE in dyninst_library\r\n\r\nWe manually install them because of how dataflowAPI is consumed.\r\n\r\n* Issues warning when toolkit cannot be built with LIGHTWEIGHT_SYMTAB\r\n\r\n* CMake modernization - update compiler flags (#1374)\r\n\r\n* Fix spelling of LibDW_INCLUDE_DIRS when marking it as advanced\r\n\r\n* Mark STERILE_BUILD as advanced\r\n\r\n* Mark Boost_DIR as advanced\r\n\r\n* Mark TBB_DIR as advanced\r\n\r\n* Mark Thread_DB_{INCLUDE_DIRS,LIBRARIES} and as advanced\r\n\r\n* Update README\r\n\r\n* Add gfx908 public headers\r\n\r\nThese somehow didn't make it through the rebase\r\n\r\n* Make flags for RelWithDebInfo and Release match\r\n\r\n* Disable cmake-format for extra flags in DyninstWarnings\r\n\r\n* Propagate ElfUtils_ROOT_DIR to FindLib{ELF,DW,Debuginfod}\r\n\r\n* Use 'set' instead of 'option' for stringy options\r\n\r\n* Add more cmake-format exceptions in DyninstWarnings\r\n\r\n* Add <Package>_NO_SYSTEM_PATHS to elf, dw, debuginfod\r\n\r\nThis is used to exclude system directories from the search process.\r\n\r\n* Have ElfUtils_ROOT_DIR override search paths\r\n\r\nIf the user provides a value, then no system paths (aside from the ones\r\nin CMAKE_PREFIX_PATH) are searched. This lets the user 'force' a\r\nlocation for elfutils.\r\n\r\n* Remove explicit version fail check in elfutils find-modules\r\n\r\n* Move ElfUtils_ROOT_DIR check into DyninstElfutils\r\n\r\n* Add LibIberty_NO_SYSTEM_PATHS\r\n\r\n* Add Valgrind_NO_SYSTEM_PATHS\r\n\r\n* Remove explicit version check from FindValgrind\r\n\r\n* Boost - use new meaning of Boost_ROOT_DIR\r\n\r\n* Fix typo in DyninstElfUtils\r\n\r\n* Fix bug when setting path flags\r\n\r\n* TBB - use new meaning of TBB_ROOT_DIR\r\n\r\n* Add support for common/h/unaligned_memory_access.h\r\n\r\n* Set default DYNINST_LINKER to empty\r\n\r\nThis will use the default linker. lld is the LLVM linker.\r\n\r\n* Make requesting an unknown component an error\r\n\r\n* Always build libdyninstAPI_RT.a\r\n\r\nThis is always needed by the test suite and keeps the old behavior of having it built by default.\r\n\r\n* Add DYNINST_FORCE_RUNPATH option\r\n\r\nSetting this flag forces the linker to use RUNPATH instead of RPATH.\r\nThis is most useful for working with older RedHat distros.\r\n\r\n* Reduce number of public link dependencies\r\n\r\nThis reduces the number of transitive links that have to be done by\r\nbinaries linking against Dyninst.\r\n\r\n* Make elfutils dependency public for symtab\r\n\r\nIt's needed in the Module.h public header.\r\n\r\n* Require TBB >=2019.9\r\n\r\nWhen building from source, versions before 2019.9 incorrectly set the\r\nversion in TBBConfigVersion.cmake. For example, 2018.6 sets the version\r\nto 2018.0 because it uses the TBB_{MAJOR,MINOR}_VERSION from tbb_stddef.h\r\ninstead of doing the calculation based on the engineering version.\r\n\r\nThis also unifies the versions required when compiling with gcc and clang.\r\n\r\nTBB 2018.6 was released in Oct 2018 and 2019.9 was released in Oct 2019,\r\nso this just bumps the requirement by just a year even though there are\r\nat least 9 releases in between.\r\n\r\n* Update Boost version in docker/dependencies.versions\r\n\r\n* Update filenames in dependency-version CI check\r\n\r\n* Update variable names in dependency-version CI check\r\n\r\n* Make elfutils dependency public for dynElf\r\n\r\n* bump CMake minimum version to 3.14.0\r\n\r\nThe 3.13.* family requires every 'install' to specify a \"LIBRARY\r\nDESTINATION\". We don't need or want that in the custome parseAPI install\r\n(line ~130) for exporting the public headers.\r\n\r\n* Add cmake to dependency-version CI check\r\n\r\n* Rename cdna2 -> gfx90a in new layout\r\n\r\n* Always create list of static-only sources in dyninstAPI_RT\r\n\r\n* Add common/h to BUILD_INTERFACE in 32-bit libdyninstAPI_RT\r\n\r\n* Fix building with symLite\r\n\r\nThe headers from symtabAPI are still required, even when building with symLite.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e93225713b1633a7bf6ff0d9a89c409db802173", "commit_date": "2023-04-21T19:58:43Z", "commit_message": "Add callback for parsing unknown instructions (#1276)\n\n* Add callback declarations for unknown instructions in InstructionDecoder\r\n\r\n* Update definition of callback interface\r\n\r\nThis also makes 'unknown_instruction' inconstructible.\r\n\r\n* make isValid the same as isLegalInsn\r\n\r\nThis makes it impossible to make an Instruction object from a failed\r\ndecoding process. This only affects x86.\r\n\r\n* Detect illegal instructions sooner in doIA32Decode\r\n\r\n* Don't advance the buffer when an x86 decode fails\r\n\r\n* Use a ternary to avoid linker error on some gcc's\r\n\r\nSome versions of gcc don't inline std::min _and_ need to resolve maxInstructionLength.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "308bddcb75de5df8e18d7b5af62602d9f5f818a0", "commit_date": "2023-04-20T21:01:50Z", "commit_message": "Update GFX90A Decoder  ISA-SPEC(02/22/23) (#1407)\n\nUpdate implementation for AMDGPU GFX90A based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. case label in amdgpu_gfx90a_decoder_impl.C made sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44e3bb530ccb4228588bd17635eaf77cdf5365e1", "commit_date": "2023-04-20T21:01:37Z", "commit_message": "Update GFX908 Decoder ISA-SPEC(02/22/23) (#1408)\n\nUpdate implementation for AMDGPU GFX908 based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions (dsmem)\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. Make case label in amdgpu_gfx90a_decoder_impl.C sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c401cd675058af5e873f4763a6f133fd11938ce", "commit_date": "2023-04-20T21:00:54Z", "commit_message": "Add CI workflow to build consumers of Dyninst (#1412)\n\n* Add CI workflow to build consumers of Dyninst\r\n\r\n* Build with cron", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25b37343f2f115298bd82eecf579bc3baf06b5ba", "commit_date": "2023-04-20T20:55:59Z", "commit_message": "CI workflow to build from spack (#1411)\n\n* CI workflow to build from spack\r\n\r\n* Update cron to every Sunday at 3AM\r\n\r\n* Force use of intel-tbb\r\n\r\nDue to explicit conflicts in the recipe, spack uses intel-parallel-studio which can't be used in automated builds because it prompts the user to accept a license agreement\r\n\r\n* Switch to weekly cron schedule", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0885301c49db8cfc286f41003a558005c9c7ace6", "commit_date": "2023-04-05T13:30:47Z", "commit_message": "Rename Architecture AMDGPU_CDNA2 to AMDGPU_GFX90A (#1404)\n\nRename the Architecture Arch_amdgpu_cdan2 to Arch_amdgpu_gf90a,\r\nas recommended by the vendor.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2f7af10477b0f7daf0efca2c992224711e5deb27", "commit_date": "2023-04-04T02:12:02Z", "commit_message": "Fix link bug in insnCodeGen::loadImmIntoReg on aarch64 (#1405)\n\n* Fix link bug in insnCodeGen::loadImmIntoReg on aarch64\r\n\r\nThe function template has a separate declaration and \"definition\" AND is\r\ncalled from translation units where neither is located. This only happens\r\nto work correctly when the TUs are linked in a specific order.\r\n\r\n* Remove assert\r\n\r\nThe value is now always positive.\r\n\r\n* Remove missed template usage in emit-aarch64.C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a86894f3d9120883ed4c0cf4278287c8bb43ed73", "commit_date": "2023-03-30T20:00:03Z", "commit_message": "remove unneeded zero length files (#1403)\n\n- two old commits (accidentally?) committed zero length files that\r\n  seem to serve no purpose", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1ddebd3125437d3385e65a7cce5bea715588028", "commit_date": "2023-03-23T14:25:12Z", "commit_message": "Fix UB in dwarf/dwarf_subrange.cpp::get_type (#1402)\n\nThe dwarf_* functions return a pointer to their last argument. This causes 'get_type' to return a pointer to a local variable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e952a0dfc13dbb7d665219a672733a505ee2a00", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  stack frame larger than (#1397)\n\n- increase stack frame size warning limit another 1000 bytes for\n  power_opcode_tables.C for RELEASE builds using the clang compiler", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683c85c7ef35d0afe6188271c8f697f6f839e12d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameter (conditionally) (#1397)\n\n- Add macro DYNINST_SUPPRESS_UNUSED_VARIABLE to suppress\n  warnings about unused variables\n\n- use macro to suppress function parameter that is only unused\n  when building on aarch64 and hence cannot be commented out", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "309d167d291f69d0ba9d4671ca581d6d24bf95e0", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "fix broken call to base class function (#1397)\n\n- SgAsmBinaryMultiply::get_type() rose results in infinite recursion\n  as casting the pointer to the base class and calling a function\n  still calls the derived version.  Just call the base class's function\n\n- rewrite SgAsmBinaryAdd::get_type the same way; it was not broken\n  but was convoluted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f57a5cbdfa98333527466423cbc32224874fa81", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "enable warnings in dataflowAPI/src (#1397)\n\n- separate dataflowAPI/src and dataflowAPI/rose source files\n\n- undo disabling warnings for dataflowAPI/src files\n\n- only include ABI.C as a source file once", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "766c7fad0f9f25bc5505f55a88c4f370b0f2cc69", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variable (clang compiler bug) (#1397)\n\n- add suppressions around code that contains a lock using RAII;\n  clang prior to version 10 contains a bug where it does not\n  recognized that the ctor and dtor make the variable used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e86fb6e232b370a66f407f9a0af440134bff147", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  suppress VLA warning (#1397)\n\n- Rose uses a VLA in C++ which is non-standard; for now suppress the\n  diagnostic\n\n- clang requires disabling both -Wvla and -Wvla-extension\n\n- gcc <9, 11.0 and 11.1 has a bug that requires the suppression to\n  to not be in the same macro as VLA itself", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89b22e23d4abcf48a2b1d3dd0f1ce294b4bb6260", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1397)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f7ed33ed9fac49623fea5ed2743462d8c31a062", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  missing noexcept (#1397)\n\n- declare function noexcept to allow potential optimization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "61faa14906eb2a7543867f4cb66643783ba41323", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  deprecated implicit ctor and op= (#1397)\n\n- add explicit copy ctors and operator=,\n  or delete dtor where it could be defaulted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa4713e0f2f063362a496ed03d0d0d65ff43d037", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (delete variable) (#1397)\n\n- remove variables and their initializatins that shadow a variable in\n  the enclosing scope as they were initialized with the same value", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1caea03054dbd73178ea2f40e2ca3474ff9c82e6", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (rename) (#1397)\n\n- rename names that shadow a name in an enclosing scope or class with\n  a unique name", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a309c63953a845f2d0c6e24f3bc3c4d117ef9006", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  potentially evaluated expression (#1397)\n\n- replace use of typeid(expr) where expr executes code at run-time\n  with a dynamic_cast that is obvious that it executes code at\n  run-time", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "412071df5285ecb872abaa966ae4ebb81c733573", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  overloaded virtual overrides (#1397)\n\n- import the name of the base class's virtual function(s) that were\n  overridden in the derived class to prevent hiding of the base class's\n  functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a720e99d94bfb01de40488d5dae8b45645fb284e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  copy ctor missing base class (#1397)\n\n- call the base class's copy constructor in the derived class's\n  copy constructor", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "336409431b648c18c7b51ec1c3135489f82ab7ce", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  case fallthough (#1397)\n\n- add break statement or DYNINST_FALLTHOUGH macro where a switch\n  case falls through to the next case", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "476ba11cf828964579d40a26b21e4b0eb808d560", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  printf format related (#1397)\n\n- add printf-format annotation on dataflow printf function parameter\n\n- fix format string to match parameter types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a15d069e2ce6340396e71bc283f0ac2377b4da6e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  reorder ctor initialization list (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f13b79c36af349203bddba40757b82a1206de42d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  const correctness (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b880173dc64d2d1f07e4d41b4796eac3d14873fe", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variables (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "951ebb64db730f7497ce886e8634aaa3da3cc5e7", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameters (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e9a4b86d2adbe3763fad3df38f85ac92959e26c", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  variadic macro (#1397)\n\n- replace non-standard variadic macro syntax with standard syntax\n\n- remove preprcessor check to use variadic macros if the compiler is\n  gcc;  all compilers support them", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42223b1f9118e32fe145a85a13ced32c13cd5871", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  extraneous semicolons (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ebf545849ef979aaa21bf82e8caff104cbeb6f6", "commit_date": "2023-03-15T13:47:22Z", "commit_message": "Github CI: update dev container deployment (#1400)\n\n* Log in to GHCR before building\r\n* Pull base image for cache", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab965c214b030a302aa0307b121cb9d06ab0a989", "commit_date": "2023-03-15T12:39:13Z", "commit_message": "Github CI: add line continuation in dev-containers.yaml (#1399)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f5558a15b16272eef982b5e8ddfdf172eb59036", "commit_date": "2023-03-15T12:23:31Z", "commit_message": "Add PR testing Github CI (#1393)\n\nRun on pull request to master:\r\n\r\n    Enforce formatting of CMake files, if modified\r\n    Check for changes in minimum required versions of dependencies\r\n    Ensure Dyninst, test suite, examples, and external tests all build with gcc on Ubuntu-20.04\r\n\r\nRun on push to master:\r\n\r\n    Build and deploy new dev container, ghcr.io/dyninst/amd64/<OS>:latest", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e7aa66ddef6768957faae3c62c9909590663901", "commit_date": "2023-03-09T20:15:45Z", "commit_message": "Replace 'cerr' with 'dwarf_print' in DwarfWalker::decodeLocationList (#1395)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1157c87c0b184d83e851bdd5b63582dd2a7647cf", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy with user dtor (#1394)\n\n- Make classes move-only by removing public copy constructor and\n  operator= as they contained pointer members that were just copied\n  (with no semantics of copying the data). This is a double delete\n  waiting to happen.  Luckily the pointer were always nullptr when the\n  copy constructor was called.\n\n- add move constructor (using std::move where appropriate)\n\n- clean up the classes to use default constructors and default member\n  initialization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1aeb249ff90fea49dc50efea1e6c11577bf9d90", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unneeded internal declaration (#1394)\n\n- clang warns of an unneeded internal declaration for yyinput. Since\n  yyinput is generated by flex, just suppress it for the whole file.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7cd7cdb0ba98de24b0d916b8e440db8adb0af6f9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (derived) (#1394)\n\n- Derived type classes have an operator==(const Type&) const, and they\n  call this operator with with both the lhs and rhs being the derived\n  class type.  This is ambiguous when using C++ 20's rule that considers\n  the parameters reversed.  Fix by adding an inlined non-virtual\n  operator== that takes the derived types a parameter and then\n  unambiguously calls the existing ==", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12a4fd86738c048dd82c20c31359cf7a48c082eb", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  stack frame larger than (#1394)\n\n- increase stack frame size warning limit when using the clang compiler\n  for a couple of files that needed a similar increase for gcc", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b78e883c77aefc27d1a30722b414266aa33897d1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  logical op (#1394)\n\n- add suppressions for identical clauses of a logical operator\n  even if they are only identical after evaluating constant\n  expressions that are not identical as gcc 8 and prior warn\n  about this\n\n- Suppression for these are already in place for warnings in adjacent\n  if statements, so extend the suppression to cover these also", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9dbc1e30e30ef263b174d1d2b5ca648e8ef6bf0d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  C function decls without prototype (#1394)\n\n- C functions declared as func() are a declaration without a prototype\n  (from the original K&R C), not a function that takes no parameters\n  (until C23), change all of these to func(void) which is how to\n  declare such a function in C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a2e3fd795f8ec6cb730038ec277431b0832c03c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  set but unused variables (#1394)\n\n- delete variables whose only use is to increment themselves", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6e380f7158326fc686f1b3f7ec7a01b3ac4bfe2", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (#1394)\n\nC++ 20 considers the reversed parameter of a comparison operators in\naddition to the given parameter order.  This implies that if the\nargument is const then the member function must also be const.\n\n- change    bool operator==(const T&)\n      to    bool operator==(const T&) const", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57fe4c395dff4fd11f18d2f00eb58ad25212501", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::random_shuffle is deprecated (#1394)\n\n- replace std::random_shuffle with std::shuffle", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "706fd0e3c532a3d7cfc1d752620ebed2fac65c5d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing noexcept (#1394)\n\n- declare functions noexcept", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "55d8a338e362d3aa4448aa9bae776eb90ca1292a", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1394)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b977e8d7132b312c853652a1e7e6f28eb39dbab0", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unused private field (#1394)\n\n- removed myid member from dyn_thread as it is never used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0eb0b29def9cc2d18e0fe724e536c73e7e9ef964", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy/op= with user provided dtor (#1394)\n\n- Explicitly define the implicit operator or remove the explicit\n  destructor; in C++ 20, if a destructor is explicitly defined then\n  the other constructor, assignment and move operators will not be\n  automatically generated", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9be477535debee15c2403bdc2ddedb31fdf0eb8e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  remove unused variables/members (#1394)\n\n- remove variables that were never used\n\n- remove code that only updated unused variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "344783a7954de9af7f98a5d3f0ec7c505b7536a1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (variables) (#1394)\n\n- rename variables that shadow names in containing scopes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73064a866ee1d19d8e12e2562f60b9b7f8e05406", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (enumerator names) (#1394)\n\nenumerator names shadow names in other scopes\n\n- made 3 internal enum types scoped enums:  StackAccessType,\n  operandType and patch_type_t\n\n- delete one internal and unused enum type:  frameType_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4bf4a24c514d0c395fdd27d6fe68ddf0fef89040", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "replace C-style and functional casts (#1394)\n\n- replace C-style casts ((T)e) and functional casts (T(e)) with modern\n  casts that have a clearer intent and are safer:  static_cast<T>(e),\n  and T{e}.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8d0e2760b307c7d465b56cac639c2e4a2cc93ca8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "write_memory_as to append_memory_as as appropriate (#1394)\n\n- where write_memory also updates the pointer, change then to\n  append_memory_as(...)\n\n- change '*insn++ = <value>' to append_memory_as_byte(...) to\n  be consistent with append_memory_as(...)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c21bd122187e87b74d45a5ba3ec3e3824750f9c3", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (C casts) (#1394)\n\n- fixed increased alignment warnings in C code.  The macro\n  CAST_WITHOUT_ALIGNMENT_WARNING eliminates the warning and allows for\n  future auditing.  For the code as currently written, these are all\n  aligned properly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0eeb1ee0407780ee07f603910d398f836dc2f7", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (pointers) (#1394)\n\n- fix alignment warnings of pointers by using alignas_cast<> defined in\n  common/h/raw_memory_access.h to eliminate the increase alignment\n  warning.  For the code as currently written, these are all aligned\n  properly, but these are inherently unsafe and require manual\n  inspection of the pointers involved.  An assert in alignas_cast can be\n  uncommented to validate proper alignment at runtime.\n\n- explicitly force larger alignment of one variable to eliminate warning", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "285ac938848739e02e38c044cf354dcb9d99f0b9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (#1394)\n\n- Casts of pointers to a type that has a larger alignment requirement\n  will cause an exceptions on some architectures on dereference if the\n  pointer does not meet its alignment requirements.\n\n- Add new template functions read_memory_as and write_memory_as that\n  read and write the bytes of (possibly) unaligned memory of the desired\n  data at the supplied address using the length of the template type in\n  a way that is safe even if the supplied pointer is not properly\n  aligned.\n\n- Add functions append_memory_as; like write_memory_as but updates the\n  pointer value to memory location after the bytes written.\n\n- Add template function alignas_cast to cast a pointer to another\n  pointer without producing an increased alignment warning; requires\n  manual auditing to pointer is properly aligned", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4aff07d1eba822b880558c030c7f5aec94b2ae9c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  pessimizing move (#1394)\n\n- remove unnecessary std::move's", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b88b16dba9477f18fe598fad5552758204a1558e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing override (#1394)\n\n- add override to all overridden virtual methods of a class if present\n  on any method", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84fe176ef5ab61376911570de6b506473a3c8d35", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  tautological always true comparison (#1394)\n\n- value of type unsigned char compared to 256 produces a warning as 256\n  is outside the range of the uint8_t.  256 is the number of array\n  elements (computed using sizeof's).  Changed from (n < numElems) to (n\n  <= numElems - 1) which is also always true, but the error is\n  eliminated due to 255 being within range of a uint8_t.  Ugly but makes\n  the warning disappear.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6b41075d61009b539107836591cb47b8cb3e3c8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  mismatched class/struct (#1394)\n\n- use consistent 'struct' and 'class' keyword between forward\n  declaration and definition; a mismatch is legal be breaks on\n  some versions of MS C++", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9e83871f0380068dba79648c6acee503cac5d76", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  [[fallthrough]] requires C++ 17 (#1394)\n\n- clang's __has_cpp_attribute(fallthrough) feature test macro returns\n  true, but produces warnings if used.  [[clang::fallthough]] works, so\n  force it if the language version is pre-17 with clang compiler.\n\n- fix typo in __cplusplus macro name\n\n- improve robustness: try all alternative fallthrough attributes names", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "067be96bb64a3d4191f12db1694b0fcfec51d457", "commit_date": "2023-03-02T18:41:27Z", "commit_message": "Restore PPC special-purpose registers in opposite order of saving them (#1392)\n\n* Restore PPC special-purpose registers in opposite order of saving them\r\n\r\nThis is the same fix as https://github.com/dyninst/dyninst/pull/1000,\r\nbut for PowerPC.\r\n\r\n* Reverse order of FPSCR restore", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae43ebc6f905345499ed9c55eccb007e9a69efa9", "commit_date": "2023-03-01T23:57:55Z", "commit_message": "Aarch64: Fix restoring special purpose registers order (#1000)\n\nThe special purpose registers are pushed onto the stack by\r\nEmitterAARCH64SaveRegs::saveSPRegisters. This patch reverses the order\r\nused for popping the stored registers from the stack. Without\r\nthis patch, some of the state registers get swapped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46ea3009e1e0e27bd035ac3152dc772bf861f3fd", "commit_date": "2023-03-01T19:33:16Z", "commit_message": "Avoid possible copy in BPatch::createEnum (#1390)\n\nThe Type class doesn't have a user-defined copy constructor and its\r\nimplicit declaration is deprecated in C++20. Rearranging the construction\r\nhere removes the possibility of copying.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f89cc72416fdc1d467b130f48609b8fc93126d37", "commit_date": "2023-02-28T23:54:58Z", "commit_message": "Merge pull request #1389 from dyninst/wuxx1279/gfx908/clang-error\n\nFix ambiguous override of InstructionDecoder_amdgpu_*::makeRegisterExpression", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "557a01949a4c11e8e8975fe113e4ab07b64bf25d", "commit_date": "2023-02-27T21:25:44Z", "commit_message": "add InstructionDecoderImpl::makeRegisterExpression to derived classes\n\nEliminate virtual-overloaded warning as there are 3 overloaded methods of\nInstructionDecoderImpl::makeRegisterExpression, but only 2 are defined in\nthese classes for add a using so the 3rd is not hidden.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42c3a4b497071e421686ded49ad0da406c8053ac", "commit_date": "2023-02-27T20:06:40Z", "commit_message": "Fix virtual derived signature to match base class\n\nmakeRegisterExpression in the derived class had\nan incorrect function signature, which made\ncompilation fails on gcc-6 and clang.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d15c0f714397a1316c74fc8d2c24a62a772ecc3", "commit_date": "2023-02-27T18:39:18Z", "commit_message": "Update DwarfWalker subrange handling (#1369)\n\n* Remove redundant include of libdw.h\r\n\r\n* Add subrange parsing to dynDwarf\r\n\r\n* Remove decipherBound\r\n\r\nThis implementation was neither correct nor complete. Moreover, we\r\nshouldn't be parsing FORM types. Looking for DW_TAG* is sufficient.\r\n\r\n* Remove legacy comments and commented-out code from parseArray\r\n\r\n* Improve error message in parseArray\r\n\r\n* Rename parseSubrangeAUX to parseSubrange and change interface\r\n\r\n* Replace bound calculations in parseSubrange\r\n\r\n* Update some comments and whitespace\r\n\r\n* Update construction of the result type\r\n\r\nThe LONG_MIN/MAX aren't great, but they are propagated to preserve\r\nbehavior.\r\n\r\n* Update debugging messages in parseSubrange\r\n\r\n* Have parseSubrange() call parseSubrange(Dwarf_Die*)\r\n\r\n* Use updated parseSubrange in parseMultidimensionalArray\r\n\r\n* Use std::tostring instead of snprintf\r\n\r\n* Update comments and remove dead code\r\n\r\n* Whitespace\r\n\r\n* parseMDA returns a typeArray instead of just a Type\r\n\r\n* Fix bug in dwarf_result::operator bool\r\n\r\n* Fix hi/low bound mixup in parseMDA\r\n\r\n* Try using Dyninst's parsed CU language, if needed\r\n\r\n* Display subrange DIE ID in pareSubrange\r\n\r\n* Don't create subrange type in parseSubrange\r\n\r\nThis will happen in the callee\r\n\r\n* Update parseSubrange() to use new parseSubrange(Dwarf_DIE*)\r\n\r\n* More carefully parse the child DIE\r\n\r\n* Iteratively parse the subranges in parseArray\r\n\r\n* Whitespace\r\n\r\n* Remove parseMultiDimensionalArray\r\n\r\n* Improve debug messages\r\n\r\n* Register each subrange type in parseArray\r\n\r\n* Remove common/h/dyninstversion.h\r\n\r\nThis was accidentally included.\r\n\r\n* Add copyright notices to new files\r\n\r\n* Make dwarf_result also hold a Dwarf_Word\r\n\r\nC++ doesn't guarantee it is convertible to `long`.\r\n\r\n* Only offer an interface to parse both bounds simultaneously\r\n\r\nThe calculation for a range's upper bound when DW_AT_count is used\r\nrequires knowing the lower bound (if given), so these needed to be\r\nmerged.\r\n\r\n* Use new dwarf_subrange interface in DwarfWalker::parseSubrange", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bfa6e82c2a9ef98801432324ffb3cec2a6254c5", "commit_date": "2023-02-27T14:13:39Z", "commit_message": "use default allocator for tbb::concurrent_hash_map (#1332)\n\n- gcc 12 warns about mismatched new and delete when an allocator is specified\r\n  This is likely a false positive.  Change to use the default, which uses ends\r\n  up using the same std C++ new allocator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "198b54f56cbcdb82f058d007545bdf9f36c5dce5", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "fix infinite recursion in LineInformation::addLine (#1331)\n\n- gcc 12 reported an infinite recursion for LineInformation::addLine\n  that takes the lineSource file\n- fixed by computing the string table index of lineSource and then\n  calling the addLine method that takes the index value\n- also update the lineSource type from string to const string&\n- updated documenation that had the method signature taking a const char*", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6436c734eef50d55ed6c562aa3fabf0c7039c50c", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "eliminate deprecated C++ function objects (#1331)\n\nfix function objects that were deprecate in C++ 11 and removed in C++ 17\n\n- replace mem_fun with mem_fn\n- eliminate binary_function and unary_function base classes\n- use const iterator when constructing boost::transform_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f049fe855640832950f5a6cd87db23ecb4b7533b", "commit_date": "2023-02-24T22:27:17Z", "commit_message": "Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04 (#1362)\n\n* Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04\r\n\r\n- the main issue was `/sbin/ldconfig -p` on Ubuntu 22.04 has an extra line at the end: \"Cache generated by: ldconfig (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35\"\r\n  - this would result in an occasionaly segfault\r\n- refactored the rest to avoid strtok which is known to have a fair amount of problems\r\n\r\n* fix header includes and message about delimit issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31b4d7f19f4e6585518eee179a63812f88911e6f", "commit_date": "2023-02-24T19:36:42Z", "commit_message": "Make SymtabCodeSource constructor const correct (#1293)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc38257de4d5143d097229aef7284b8e1ce6fbf5", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "SymtabAPI::Type: add support for C++ r-value references (#1159)\n\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c677008d0fa8f4ccb6d191d37493060e15d05f22", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "Improve DWARF enum parsing in Symtab::Type (#1164)\n\n* Inherit from derivedType\r\n* Add parsing of underlying type\r\n* Improve enum parsing debug information\r\n* Add support for C++ scoped enums (i.e., 'enum class')\r\n* Remove typeEnum::setName\r\n    This has no definition.\r\n* Inline default constructor\r\n* Clean up BPatch::createEnum\r\n\r\nThis removes the unnecessary construction of a separate (thread-safe!)\r\ncontainer of pairs and the associated memory leaks. It also explicitly\r\nmakes the enum's underlying type a four-byte signed int. Redundant code\r\nfrom the overload which computes the enum values was replaced by using\r\nstd::iota and calling the three-argument createEnum.\r\n\r\n* Remove factory functions\r\n\r\nAdding overloads for these would add more clutter than utility. We\r\nshould remove these from all of the types as the constructors should\r\nalways be used to ensure class invariants.\r\n\r\n* Remove non-portable constructors\r\n\r\nSince we're breaking ABI here, these constructors need to go. Manually\r\nsetting the size to `sizeof(int)` is non-portable as the\r\nBPatch::createEnum may be used to modify a binary that doesn't have the\r\nsame `int` representation as the host on which Dyninst was compiled.\r\n\r\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3046332ba3d32eccb63f8dd6ecc65afca3b2c63f", "commit_date": "2023-02-23T22:24:02Z", "commit_message": "Update global ELF ctor/dtor instrumentation for static executables (#1355)\n\nIf __libc_csu_init doesn't exist, try to insert the constructor call into the beginning of 'main'. If __libc_csu_fini doesn't exist, try to insert the constructor call into the beginning of 'exit'.\r\n\r\n* Use C-style strings for symbol names\r\n\r\nThere's no need to have a std::string object that incurs the overhead of a constructor/destructor call to just hold a literal that's only visible in the current translation unit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "thaines/documentation_modernization": [{"commit_oid": "b1aea3f76e071e16816d7ae34e59f348138991d3", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Fix example in dyninstAPI", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d46711691583179719d986dfc48ef8d34f357716", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Start of dyninstAPI", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f7fc8c7943a95a7b56265a3f4555206a70d93d7", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Finish public dataflowAPI", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c7c90e2cc229430d03053f14782381be340e044e", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Start on dataflowAPI", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e7c43e67b1e069b088de807f94fc0864f4866bc", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Finish all common/public", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dbfc5d9bf73247ae930329e46ed24c3365403e07", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Reformat dyn_regs.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "33edf815d8f610479f998ec583efe1be05739f53", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add Buffer.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "99fa8019eae79825d44a33d705f40edbacdc11d0", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Don't include aarch64_sys_regs.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2e8a2318e76880bf57f10a249602adfcad8a964e", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Fix build errors", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4ef427a6fd64739aa8ecd83f61dc21681903cb36", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Rename */index.rst */overview.rst", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1072750772836d4f3c8d30dccd18627380408545", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Break up parseAPI, patchAPI, dyninstAPI, and instructionAPI", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a4cfac3993aab4b4f42d726017f91203d345fcfe", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Reformat AddrLookup.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aa4a234a54961116e0e01660ed1d418cbd3c412b", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Fix typo in symtabAPI/index", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "53e436dfa1cd82291864c09fe15ea93cae502ad5", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add type hierarchy figure to symtab/index", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9427e8cdba1c92dc91d47cf0fa39d10d89b5e384", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Move everything out of symtabAPI/API", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c9c992ffb03e5ff57bdefa11ef307831d7509ca", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Fix namespaces", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a8ac181c757e15b38ec53a9d6741df2327d6838", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Fix header in stub files", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d0eb21b07e8790252e0d8dab32132a10a9c193ae", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Fix class headers in Graph and Node", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "53b309bd104d930b5c8c44c24ddcdaf099ffd9df", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Make stubs for all docs", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7a2b05468052c4634e3111c28fd909230060cfaa", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Small changes in proccontrol usage example", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9e858684d50d9db71b888fc9d9d6a6c7d5cba0d9", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add stubs for the rest of the headers", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ec62cd226a64cd09d6023d35b1fe7563bf167852", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Finish PlatFeatures.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e3e0a7f22e765e77b93ba722a1e21e7795066a2", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Fix whitespace on Handler.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ef4ec3ecf1bb0d7e6cc3211cb5982e61168a1752", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Fix whitespace on EventType.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b2c10caa606c36cb10aac2bc01a1b0519d300208", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Fix whitespace in Generator.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae2bd3dfa754a6bc3380ec97110e435e67bced87", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "docs/proccontrol/public/Event.h.rst", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad5b8a642e5b3ed6b7e7910e3c0c0b0d6518d1a5", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Removed unused section tag in proccontrol/public/API", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "635a1dc06091fcfa37b495be164a6bf36a04fd5a", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Finish PCProcess.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0eb2f84ad391628463524418abeea9ef95a69153", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add more sections to proccontrol/index", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "09a1d8676de1e22bab0867281f8856b1f720dee4", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add more references in proccontrol/index", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d7dfbdafac23af38b0b45a2a331a0f1ea812ad1b", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Final updates for PCProcess.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ae4d4303c27af6fa9946c4a916194f186efd0aa", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Fix typo in index.rst", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb1ecfc9d3a90a09e50a934a571ba580312af3dc", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Fix namespace in dyntypes.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2a86d924cf2ae86e607e0c0ecc5ef60cba5ae56", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "More work on PCProcess.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1694f1c2de693bb37284c2a06bce2de3b97595a6", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add common/dyninstype.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "28ee1b25a7770b6cfdd5907ab12de7f8ea81699e", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Start working on PCProcess.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3863842f27da1da9cc61abb75bb3ea68b1f3d9c1", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Use ProcControlAPI namespace", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "51c1add2d2be00347d21d1c446c8c37701701c77", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Move discussion of Breakpoints and Registers into overview", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a58c3a05dfb6dd3296aed04668d520ffa9b6c497", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add dyn_regs.h and MachSyscall.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4063066a9572007687cfa163fe3752f701d3ce39", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add section link to ProcControlAPI/Registers", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e1456ebacf8a41808eee04a458d8a46aff8e3029", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Use inline code markup in Event.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e233e2581e3189a6e02dbf3834ea3d61f83f5940", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Label sections in proccontrol/index", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e43b5ac530f9a2d86474550f8f53085162772c7", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add stubs for 'common'", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dae4a503c2250d869cf87e37bb23d2e7e67f316b", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add dataflowAPI/public", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba5a997ab51470812932ad12f49f4eb3a26fba65", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Reformat inline code", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f1be2898741b9c21fe71702d3c59f803de0dfae1", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Use sphinxcontrib.remoteliteralinclude to fetch remote code", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "220b5f5bf573155d828183a4e0f3219e3c00b19d", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Whitespace", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba64de76e010152e9d82f70b026a3f2a155652b5", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Remove a missing Container declaration", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "63326a1c6b7ae3816cce54dfc4bd435960021cb6", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Use csv table", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "de216241658739d5d741aec0070c846ebfdc0880", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Clean up language in intro", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac4cd6c5865cc9dd182be71606540b821292b12e", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add stubs for proccontrol dev docs", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "16a9a2c0bf28e6bd506d6376deaa313cfd0a2452", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add Mailbox.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e9ec572d026f5bd804596981ecb487f89af87d32", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add PCErrors.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "388d12a3e0d1bf076b45ab03e15ae198e4ceaaad", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add Handler.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6837eeab11adf83e0b00d13fc6327c001690c899", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add Generator.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d630749e692a6f28a11b8a04c288b6e2a29d3dd8", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add Decoder.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "49f96b393badc291a0e4e5767b6efec2de7be8cb", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Finish EventType.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "266c4e5cc941d74efa2931062596724931112323", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Finish Event.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eebd94469382a77529276f405816873483a666da", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Update enum in Event.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "349a321404342bf7a651d761f58b55fa9fee7181", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Convert member functions for Event.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f3c0f7850cdae2d94f42d630e54bf6bf4483903c", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Rename proccontrolAPI directory to proccontrol", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a677fbfcd590e3782a68a8ef1f3a4bae096c58be", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Start to fill out files for proccontrol public API", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5dcf8da31bbefbda55e034c1209444355cebd528", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Temporary build warning fix", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5411d1bba269fa91f11115314165d92a241c0ceb", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Separate EventPreSyscall and EventPostSyscall", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e990600c143127e3305fb324fc55ee50ce4f71ea", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Remove 'Event Child Classes'\n\nIt's not really a class description.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cb091d6c55fa37fee8bf213d5fe9c9b9941346e9", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Unify class name sections", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e94fec9c45b54d9d1be2e8ebf7fec0d3ef5674f5", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Remove double spaces", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d82b71077daff57561db1b505965f2c3afe64338", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Remove '.. container:: Definition\n\nThese were added by the automatic import.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c14de865f4f8ce83c6212a44a9f45b0fcde5b74", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Start of work on proccontrol", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5d706f729eab93a451a72def8615602cd3f2167f", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Moved 'advanced' items into subdirectory", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2079c81ab2d33628beeb5f9230ff6961be91a68c", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add start of dev docs for symtabAPI", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f528d8c7b9f94f8465d438537e3dbaff9d1482bb", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add 'developer docs' section", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ed0bdf7e8be506cc7f4330e94c2607b08497b378", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Rename 'developer apis' to 'api docs'", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fd25818f586a17b0f2f0c6dfcd7c368ffe400a04", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Move 'basics' items into subdirectory", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0355114a2f22655d639ef1a32537d80bd1d21a8a", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add changes from #1500 and #1503 for Module class", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f21819fd9a29590769dbe8a9521accb0b991a40", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Remove instructions for building symtabAPI\n\nThey are antiquated.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6d60e87dfe36b55caf3a3d190b79c1845b67896b", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Update requirements", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "93a86353cddd61793eea9597144db704ae2f32dd", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Use numbered headings for toolkits", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "064d2b816681bd84f3dbdf02f7469f86bbb2f69e", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add Github action to build docs", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b498e9fbea9e1adc4632d900dad6a9ea53eafe5", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add page on using/importing Dyninst via CMake", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6fee688a88de559bdfc731111f5f41e034acbf04", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Move optimization and pitfalls into 'advanced' section", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d7fe23d5a313d71ad036356b6194eeb3e0fd660c", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Collect examples into their own section\n\nA 'usage' is a short snippet. An 'example' is a complete program.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "021ecd38d4999ea4f99be0fd6661b690d5466f0c", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add very rough first mutator example", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "14c478139c07945efd16d182c43520f0217d8391", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Move DyninstAPI intro to overview section", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "219ccab34dd2b40fa589cebd13e6dd2cf065cff4", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Move pitfalls discussion to its own section", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e18c566a33e1e8a2adff1d371029cf9bac47bde7", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Move optimization discussion to its own section", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "43caa57682c7f9ff025ab7ef6bff57973bd656d2", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "dataflowAPI: enumerated list", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a0a5f27f896f55cd3570a7b63bd0a6ead0c9a31", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Fix intro do dataflowAPI", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e9ea86c082447127fc209a3c047cca98a2c4e54f", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "ignore perl scripts", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "97d6635af5494b63a4a3664e397cf6c60a66f6f3", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add dyninstAPI and proccontrolAPI to landing page", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8ee89615c6e6c0294e4680edb3d1bd4e63e72da4", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add c++ domain markup to dataflowAPI", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1ad62b88436d9270357b0a522c11b927a8e4bb14", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add content to overview\n\nStill needs more.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2c6d4262c5dd483ad98c477e4a9473043c5f19f0", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Clean up dyninstAPI", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b97b02ea61519a487bc01f94368a575d1166d33a", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Initial import of proccontrolAPI", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "27673d42578965b7676bf6bb544730ff3dc53799", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Initial import of dyninstAPI", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c25fc7c473cef5c4c723e27d6edecb07c99ca53f", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add acknowledgement on landing page", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a4717e3014d5fcf2c9c9c9d0ab6ab43584e9ac8", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Update landing page epigraph", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "75655fb6a3366317291189dcbd879d8e3f83d188", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add a stub for an overview", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "45d563f15616c2153351675a2510393870c6a093", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add description of toolkits and links on the landing page", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce6da8bc77374ff677d027d4db13c939696876ac", "commit_date": "2023-09-19T21:50:37Z", "commit_message": "Add basic instructions for building Dyninst", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b06d9634db2d5eba2da260ae8b3222e9ff27f1ff", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Rename dynC_API to DynC", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d688bd2bd68fe7eea8395e6c9f3b5681904f07dd", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Split all API reference sections into their own file\n\nThis makes separating the toctrees much easier and should make maintenance of these API docs easier, too.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b6df0e00afdb2bdbbf008f63fcb9cc7f4c380da4", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Rename 'Examples' section to 'Usage'\n\nThey aren't really examples. We should make a new toctree for that and\nthen bring in code from the dyninst/examples repo.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5796d916ad65f716ae36b258de37604d854cda6", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Move DynC into usertools", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7f7ddb20de8eb859992fcf7f3b9c319ed53c4b9a", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Clean up a bunch of unused doc/README files", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "11e06049630c4cc29d96870d0525ba63278c485a", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Update symtabAPI document structure", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0b6c004ca8744367f0bbf7a913541841d3a45bbf", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Update stackwalk document structure", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e1e04b1402a1dc5b1fe8af0f37fe9dcfaf2ac7ce", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Update patchAPI document structure", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f99af02b102c456e41dac6111aab40a6043130f", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Update parseAPI document structure", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "05caf28b65b6fbcee213f36867c46d7c990f7fb0", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Update instructionAPI document layout", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a0c203a5babc489bbd384aa0fb102a94e2f03540", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Update the DynC_API document structure", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "79afbbf25e48bc3ce1bd8e612129fda1bfac9339", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Update dataflowAPI/index document structure", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a4b340a9035f331829703a74199f5a6a6172d07", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Make a 'Toolkits' toctree root", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dd533ca7742a5f1b57af67891031256bd02c6642", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Change TOC behavior", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3275919dde913450430d08a73fe35bc11c5d3908", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Don't auto-label sections\n\nThis fixes several spurious 'duplicate section name' warnings.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5b75c5ed807a2f77a669310f02b76443384ecfe0", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "Switch to using myst_parser\n\nrecommonmark is deprecated\nhttps://stackoverflow.com/questions/62631362/get-rid-of-duplicate-label-warning-in-sphinx", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6d648f1514d42e89cf76b0bed1ac5e25c298c5b", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "try fix for gha\n\nSigned-off-by: vsoch <vsoch@users.noreply.github.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "90e5b0534042caab07a5ad0368bf5507eff22e2d", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "use different version of checkout to get around checkout bug\n\nSigned-off-by: vsoch <vsoch@users.noreply.github.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0c7f6873608d7eabc4f65651c02a4dffe1605e9d", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "adding missing figures and re-creating tables in format that will render\n\nSigned-off-by: vsoch <vsoch@users.noreply.github.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4fcac65951c501357040e085fac6712f92a8ff58", "commit_date": "2023-09-19T21:50:36Z", "commit_message": "start of work to refactor the docs to use readthedocs\n\nthis is the first pass to format the previous latex into rst. I have done the conversion and\nonly started to go through ensuring that content is preserved (meaning I did not miss anything)\nand all the code blocks are formatted (after the automated conversion they indeed are not!) I\nwill want a few more hours to finish this up, and then we need to discuss deployment. E.g., I\nrecommend readthedocs so you can automate deployment and keep versioned docs. We can also deploy\nto github pages (I can make a workflow) but I do not have a good suggestion for versioning things\nthat way. I also have not added in an ability to still render the pdfs if that is desired, which\nI think should be possibly. Finally, it would be nice if some of these docs could render from\ndocstrings - I know how to do this for Python so I wonder if Cpp is that much different. It is\nprobably terrible because it is cpp, but what can you do?\n\nSigned-off-by: vsoch <vsoch@users.noreply.github.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1c5494f2017d726be10b03d2540410d15a322e78", "commit_date": "2023-09-19T19:45:41Z", "commit_message": "GithubCI: Allow conumer builds to be run manually (#1528)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "384377d2671a99cc1388d06e84873d4be17138c5", "commit_date": "2023-09-19T04:11:10Z", "commit_message": "Github CI: Build TAU weekly (#1526)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4fe97f34596fcd657d308f3b4edc8d2f8970fb13", "commit_date": "2023-09-19T01:29:15Z", "commit_message": "Github CI: Build LLNL/STAT weekly (#1525)\n\nNot built with spack because it takes longer than 6 hours due to trying to build clang from source.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e9956825aad23c72aa5c24bd33c502f8f5e7042e", "commit_date": "2023-09-18T17:37:16Z", "commit_message": "Github CI: Build systemtap weekly (#1524)\n\nThis could be built using spack, but it would require making a packages.yaml to keep from having to install libjsonc every time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "633adb9075d1347a1203822ff21ba986ac8ced92", "commit_date": "2023-09-14T15:54:32Z", "commit_message": "Add indirect branch support for gfx908 and gfx90a (#1519)\n\n* Support Indirect Control Flow for GFX908 / GFX90A\r\n\r\nThis commit ports the support for indirect control flow\r\nanalysis that was done for gfx900 to gfx908 and gfx90a.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "423c1bba58849c4be0090c58aa99531e67824207", "commit_date": "2023-09-11T20:27:22Z", "commit_message": "Fix int size of rose operations return values (#1522)\n\n- set integer bit size of equalsizeOp to be 1\r\n- set integer bit size of andOp to be max size of operands\r\n- set integer bit size of orOp to be max size of operands", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "822c1c0366531fe722c2403aaf2fef29601d99d7", "commit_date": "2023-09-11T13:40:40Z", "commit_message": "Fix Implementation for RoseOperation::extractOp (#1511)\n\nFix implementation in dataflowAPI to have end_bit exclusive.\r\nFix implementation in parseAPI to be based on begin_bit and end_bit instead of based on size only.\r\nFix #1510.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "782ec44877e8cb5a231e0a8f1e9801df89c27802", "commit_date": "2023-09-08T20:45:57Z", "commit_message": "Don't create a name for artificial DIEs with a DW_AT_name (#1520)\n\nFor C++ member functions, compilers will sometimes add a DW_AT_name\r\ncalled 'this', and we don't want to mangle that.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57886efea6d6f16adc01d41198d011cd95aed86", "commit_date": "2023-09-08T20:45:06Z", "commit_message": "Github CI: use correct directory when running external-tests on PR (#1521)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2d2f4c23298586211a58bff90423231d524fb22", "commit_date": "2023-09-08T15:46:49Z", "commit_message": "Remove DwarfWalker::version member variable (#1516)\n\nIt was added by 49df4377c in 2012, but never used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a0a0a2b245aa115b6bf8e8712e40f512afb5bae", "commit_date": "2023-09-08T15:46:32Z", "commit_message": "Parse all DWARF source files in DwarfWalker::buildSrcFiles (#1515)\n\nFrom 2.6.4.16 of the DWARF5 standard\r\n\r\n\tPrior to DWARF Version 5, the current compilation file name was not\r\n\trepresented in the file_names field. In DWARF Version 5, the current\r\n\tcompilation file name is explicitly present and has index 0. This is\r\n\tneeded to support the common practice of stripping all but the line\r\n\tnumber sections (.debug_line and .debug_line_str) from an executable.\r\n\r\nHowever, libdw takes care of this in dwarf_getsrcfiles.\r\n\r\nFixes a major bug where we produce no function parameter information\r\nwhen there is only one CU in a binary because\r\nDwarfWalker::parseFormalParam requires line information.\r\n\r\nFixes #1156", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e4e6fbc7fdfe7faaa9f0a6ceb42b5d9adc996bf5", "commit_date": "2023-09-08T15:45:27Z", "commit_message": "Refactor dwarf/dwarf_names.h (#1514)\n\n* Rename is_fullcu -> is_full_unit\r\n\r\n* Rename is_partialcu -> is_partial_unit\r\n\r\n* Rename is_typecu -> is_type_unit\r\n\r\n* Refactor is_cudie to make unit concepts clearer\r\n\r\n* Add is_imported_unit for completeness\r\n\r\nNot currently used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bec7e21a5008adc1c0445775602ce740943e9b55", "commit_date": "2023-09-07T19:57:09Z", "commit_message": "Github CI: execute external tests on PR (#1512)\n\n* Github CI: execute external tests on PR", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "52acf2734d3da3106edb3f3866778a26eda32819", "commit_date": "2023-09-07T19:55:06Z", "commit_message": "Github CI: terminate PR pipeline at first failure (#1513)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9fddc4282879da75ffc456d91d8e70c9d06b091e", "commit_date": "2023-09-07T18:04:19Z", "commit_message": "Unify naming of Modules (#1500)\n\n* Unify naming of Modules\r\n\r\nThere are currently several different techniques being used\r\ninconsistently to name Modules. This unifies all of these techniques\r\nand applies them consistently.\r\n\r\nNaming type units:\r\n\r\nIt's not clear from the DWARF std at this time if dwarf_formstring\r\nwill actually return the signature/MD5 hash for a type unit. Whatever\r\nthe old code has done is likely broken, so we don't want to propagate\r\nthat here. Likely, the DW_FORM_ref_sig8 parsing isn't being done\r\ncorrectly overall, and will need to be fixed in the future.\r\n\r\nAnonymous DIEs:\r\n\r\nMany DIEs don't have names (e.g., type decorator definitions like\r\nDW_TAG_pointer_type), but DwarfWalker has explicit checks for these\r\ncases (DwarfWalker::nameDefined).\r\n\r\n* Remove DEFAULT_MODULE\r\n\r\nBecause every Module now has a unique name, it's no longer possible to\r\nexecute this code path. The 'pmodule' class uses the name from the Module\r\nclass (see the pmodule constructor).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "80f84e4f2e27d91929f48290740899c3edb3b77b", "commit_date": "2023-09-06T21:07:14Z", "commit_message": "Remove ret_lock from SymtabAPI::FunctionBase (#1504)\n\nThis was used to guard calling setReturnType. That function is only\r\never called from DwarfWalker::setFuncReturnType which is itself\r\nguarded by `ParsedFuncs::accessor` in DwarfWalker::parseSubprogram,\r\nrendering this mutex unnecessary.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "212ccd3b4e12f52cb6a743f1fbeff9fccfe7d0bc", "commit_date": "2023-09-06T20:06:15Z", "commit_message": "Remove hasSpecification param from DwarfWalker::getReturnType (#1507)\n\nSince 5ed068167 in 2017, only literal 'false' has ever been used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6eec4844b82ed2176c455359efb29c5ca04a3e87", "commit_date": "2023-09-06T03:57:50Z", "commit_message": "Use full filenames when handling Modules (#1501)\n\nA module's name is either a unique string or the pathname of the file\r\nused to create the corresponding DWARF compilation unit. In the latter\r\ncase, the 'name' is only the basename of the path which is never\r\nguaranteed to be unique (e.g., /path1/foo.c /path2/foo.c would have the\r\nsame 'name').\r\n\r\n* Remove useless file creations\r\n\r\nThese don't correspond to any Module.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d7047e2d22ab5f7bb2a0b8b37434ed955ab97f29", "commit_date": "2023-09-06T03:19:28Z", "commit_message": "Fix inverted logic  in DwarfDyninst::is_cudie (#1505)\n\nIf a DIE is a CU, then it contains a reference to its Dwarf_CU.\r\n\r\nIntroduced by 71f2e14d3 (PR1499).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7acb76787c647a434301579e4e9baa3a59884eb4", "commit_date": "2023-09-06T03:15:54Z", "commit_message": "Don't check for existing return type when parsing DWARF subprogram (#1509)\n\nSince 8b400af5, functions are guaranteed to only be parsed once, so the\r\nreturn type can never be set before the call here. Checking the return\r\ntype circularly invokes Symtab::parseTypesNow which deadlocks since\r\n7f1e24d.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "481ee344d36721c44aa456e31937836c90ee235d", "commit_date": "2023-09-06T02:50:47Z", "commit_message": "Remove FunctionBase::setReturnType(Type*) (#1503)\n\nThis is never called from within Dyninst and should never be called by\r\na user.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "463801216b933cdfdc4115b3d170eb4f64b513f1", "commit_date": "2023-09-05T23:18:45Z", "commit_message": "Workarounds to align decoder output with llvm-objdump (#1508)\n\n* Add info registers and fix some duplicate values\r\n\r\n* Add named immediate as an operand type\r\n\r\n* Add a method for updating mnemonic(required for adding extensions)\r\n\r\n* Implement Workarounds for Gfx908 and GFX90A\r\n\r\nThis commit is intended to fix the following problems\r\n\r\n1. Instructions that use SDWA have wrong length\r\n2. Instructions that use SDWA does not have the _SDWA suffixh\r\n3. MUBUF instructions decodes the VADDR field incorrectly\r\n4. MUBUF instructions missing information about offset\r\n5. DS instructions missing information about offset\r\n\r\n* redo whitespace and indentation changes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d04e892c8f3c9451ff4e77187416a391b5e4ecfa", "commit_date": "2023-09-05T20:45:20Z", "commit_message": "Add newline in log message in DwarfWalker::parseModule (#1506)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "63600787a5ff07d1fdc03835c3fcb99731e65a9a", "commit_date": "2023-09-05T18:08:33Z", "commit_message": "Fix responsibility inversion in Module::finalizeRanges (#1498)\n\nA Module shouldn't modify the Symtab object to which it belongs. It\r\nknows what ranges belong to it (see\r\nObject::fix_global_symbol_modules_static_dwarf), so it can munge them\r\ninto a collection of `ModRange`s.\r\n\r\nThe `ranges_finalized` member was never needed as the only place\r\nit was set was in `finalizeRanges` which is the only place where\r\n`ranges` was emptied.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "50c33bef8c039f696e4b9a60eee3578b9e140cd2", "commit_date": "2023-08-31T17:13:03Z", "commit_message": "Use uniform CU checks in DwarfWalker (#1499)\n\nThese should have been part of 71f2e14d3.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8779898ce685a69d97ce305096eaeb8a3557bd4", "commit_date": "2023-08-28T20:36:59Z", "commit_message": "Remove pd_dwarf_handler (#1496)\n\nIts usage was removed by 340799a in 2017.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71f2e14d3d3ad45c5e5bfdeae3c36222c4200e4f", "commit_date": "2023-08-28T19:18:54Z", "commit_message": "Refactor extracting CU tags from DWARF (#1495)\n\nThis centralizes the process and gives readable names to what's\r\nhappening.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7f1e24d526be740d9c200c5a2b26b0033709806d", "commit_date": "2023-08-28T18:50:01Z", "commit_message": "Make Symtab::parseTypesNow thread-safe (#1497)\n\nThere are many places where this is called without a user realizing it.\r\nIf they were to call any of those functions in parallel, type parsing\r\nwould break.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bf6e869f966112344d627d3044f5e76fcbbc9676", "commit_date": "2023-08-21T15:31:02Z", "commit_message": "Move inst2ast example to examples repo (#1492)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c2e31c0886b30f7b7b07b1e7ab840d3bb5521d1", "commit_date": "2023-08-21T15:30:15Z", "commit_message": "Remove parseAPI examples (#1494)\n\n* Remove parseAPI/doc/code_sample.cc\r\n\r\nThis exists in the dyninst/examples repository as 'disassemble'.\r\n\r\n* Remove parseAPI/doc/example.cc\r\n\r\nThis exists in the dynint/examples repository as 'CFGraph'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "692ff9f4b7e52f5689f880e01bfdd708a0dcdc14", "commit_date": "2023-08-18T21:47:43Z", "commit_message": "Remove patchAPI/test/findPoint (#1490)\n\nIt uses code that is no longer available and the functionality it\r\ncovers is already in the testsuite.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "82268024ac1a4c180b9da876010e5b3abfa5a2ac", "commit_date": "2023-08-18T21:47:25Z", "commit_message": "Remove patchAPI/example (#1491)\n\nIt is already in the examples repository under 'insertSnippet'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "369ec2d033d4554229d5e9228acdeb68791b1f85", "commit_date": "2023-08-18T17:30:14Z", "commit_message": "Remove AObject::symsToModules_ (#1488)\n\n* Remove AObject::findModuleForSym\r\n\r\nIts usage was removed by 4e4a375a4 in 2016.\r\n\r\n* Remove AObject::setModuleForOffset\r\n\r\nIts usage was removed by 0e5d83405 in 2016.\r\n\r\n* Remove use of AObject::symsToModules_ in Object-nt\r\n\r\nIt is only ever written to, and its usage was removed by 4e4a375a4\r\nin 2016.\r\n\r\n* Remove use of AObject::symsToModules_ in Object-elf\r\n\r\nIt is only ever written to, and its usage was removed by 4e4a375a4\r\nin 2016.\r\n\r\n* Remove unused parameters and variables\r\n\r\nThese are no longer needed.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7132622b1fc93f763437c7f6f1170916bfc983e9", "commit_date": "2023-08-18T15:27:49Z", "commit_message": "Remove Module::setName (#1485)\n\nThis is never called internally. The filename corresponding to the\r\nmodule is a class invariant. It makes no sense to make it mutable. This\r\nmember function is not documented.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a49e5e5a882f5035cc01ca9e2962f341748b34be", "commit_date": "2023-08-18T15:27:20Z", "commit_message": "Remove declaration of image::getModuleLanguageInfo (#1486)\n\nIt's definition was removed by 6c65e3c9a in 2007.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "366f9201032c51d2f15b1c4f5f96d541a21feb7f", "commit_date": "2023-08-18T15:26:59Z", "commit_message": "Remove declaration of Object::load_shared_object (#1487)\n\nIts definition was removed by 758aa226 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d40984a42345144c842bc7be469f9f9c9d314be5", "commit_date": "2023-08-18T15:26:15Z", "commit_message": "Remove unused Object::getFileName (#1489)\n\nIts usage was removed by 760bfda6e in 2019. It's also confusing because\r\nit could return either the object's SONAME or the Module's filename.\r\nThese two things are not the same.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "789b9468d8a9160972e64d1aae0239e06cbf980d", "commit_date": "2023-08-17T23:59:11Z", "commit_message": "Clean up unused global variables in Object-elf.C (#1483)\n\n* Clean up stab globals\r\n\r\nThese were removed by 5e142effc in 2021.\r\n\r\n* Remove unused globals from old symbol fixer\r\n\r\nThese were removed by 9de709ec5 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "47605aa681ca733a7d3ab6e7fbc7dee3fc83913b", "commit_date": "2023-08-17T15:21:47Z", "commit_message": "Remove unused Object::find_symbol in Object-elf (#1480)\n\nIts usage was removed by 9de709ec5 in 2016.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc408511ee37c72bd4444de69fd4c34bd07de786", "commit_date": "2023-08-17T15:21:21Z", "commit_message": "Remove Symtab::updateIndices (#1481)\n\nIts usage was removed by cabbe58ff in 2015. It's a private function, so\r\nthere are no API/ABI issues in removing it.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5a12cccf2395d6a6fc0a5156c420016a04cf8d27", "commit_date": "2023-08-11T20:41:26Z", "commit_message": "Clean up SymtabAPI::LineInformation class (#1479)\n\n* Remove unused member variables\r\n\r\nThese were added by 0dee1c8f8 in 2016, but never used.\r\n\r\n* Remove redundant visibility specifiers\r\n\r\n* Remove useless comments\r\n\r\nThese are either incorrect or just noise.\r\n\r\n* Make the class uninheritable\r\n\r\nThis appears to be some remnants of someone's scratch/dev work.\r\n\r\n* Use a default dtor\r\n\r\nNo reason to have it.\r\n\r\n* Reduce string copies\r\n\r\nThese parameters are only ever read from.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cc88eac20fdbd2b7ce3450ec1cca3e7eb417ee24", "commit_date": "2023-08-09T23:23:24Z", "commit_message": "Remove Symtab::forceFullLineInfoParse (#1478)\n\nIt was added by 1867619517b3 in 2015, but was never implemented.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9cba0b348ce2006ce8a41e8ab549f05abbac377f", "commit_date": "2023-08-09T19:56:52Z", "commit_message": "Don't include compiler-specific headers (#1477)\n\nIncluding anything in <bits/*> is not portable. Also, the contents of\r\nthis header were never used.\r\n\r\nStan Cox (scox@redhat.com) reported:\r\n\r\nIt's not included as the first thing in the file, which means it can't\r\nuse the precompiled version of that header\r\n(https://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html) and\r\ntherefore it's just including the entire C++ standard library, which is\r\ngoing to be much slower than just including the right headers.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5055bcf55802fa9a57d7dd4e5397a978ee8d4d0", "commit_date": "2023-08-09T07:09:13Z", "commit_message": "Fix AMDGPU register formatting (#1473)\n\n* Separate out AMDGPU register formatting\r\n\r\nHere we extract the logic of displaying multiple registers as\r\na single operand when doing instruction formatting into a separate helper\r\nfunction that is only called when the architecture is passed to\r\nInstruction.format or Operand.format;\r\n\r\nThis change enables the ability get register operand name in two ways:\r\nConsider s[0:3]\r\n1. Without passing in architecture, each register will be printed separately.\r\nThat is s0,s1,s2,s3\r\n2. By passing in architecture, the first register will return a string\r\nfor the entire group, and the rest will return empty string.\r\nThat is s[0:3],\"\",\"\",\"\"\r\nThese empty strings will later be discarded by the\r\nArchitectureSpecificFormatter functions.\r\n\r\n* Fix missing parameter for makeRegisterExpression\r\n\r\nDuring one of the PRs that targets compiler warning,\r\nthe num_elements parameter to makeRegisterExpression is omitted,\r\nresulting in all register operands are displayed separately,\r\nwhether they should be displayed as a group or not.\r\n\r\nIn addition to adding the parameter, certern unused helper functions\r\nand fields of InstructionDecoder-amdgpu-gfx*** has been removed\r\nto avoid shadowing of variable names.\r\n\r\nNote that this change isn't applied to vega as we don't have ISA-XML for\r\nit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b6fcbb0c4f647fe4fbd39db1e0fb8cbc5cd1206f", "commit_date": "2023-08-08T19:45:36Z", "commit_message": "Clean up SymtabAPI::Function classes (#1475)\n\n* Remove undefined FunctionBase constructors\r\n\r\nThey were added by 5ed068167 in 2013, but never defined.\r\n\r\n* Make ~FunctionBase public\r\n\r\nFunctionBase is intended to be derived from and thus derived types can\r\nbe deleted through pointers to base. This would cause UB in the current\r\nstate.\r\n\r\nhttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual\r\n\r\n  A base class destructor should be either public and virtual, or\r\nprotected and non-virtual\r\n\r\n* Make Function(Symbol *) public\r\n\r\nIt's awkward having it be protected and then friended so it can be used.\r\nJust make it part of the API.\r\n\r\n* Function should not export its interface.\r\n\r\nThese functions should override those in FunctionBase, but should not\r\ndefine a new interface.\r\n\r\n* Explicitly mark overridden members in Function\r\n\r\n* Make InlinedFunction(FunctionBase *) public\r\n\r\nIt's awkward having it be protected and then friended so it can be used.\r\nJust make it part of the API.\r\n\r\n* Make ~InlinedFunction public\r\n\r\nInlinedFunction is intended to be derived from and thus derived types\r\ncan be deleted through pointers to base. This would cause UB in the\r\ncurrent state.\r\n\r\nhttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual\r\n\r\n  A base class destructor should be either public and virtual, or\r\nprotected and non-virtual\r\n\r\n* Make InlinedFunction::getModule public\r\n\r\nIt's a pure virtual member in FunctionBase, so making it protected here\r\nmeans that calls through a pointer to InlinedFunction could generate a\r\nruntime error. gcc and clang seem to \"do what I mean\" even though it's\r\nill-formed. It also removes the astonishment that `getModule` isn't\r\naccessible through the public interface even though it is required to be\r\nthere.\r\n\r\nFrom C++11 standard (n3242):\r\n\r\n11 Member access control [class.access]\r\n\r\n5. It should be noted that it is access to members and base classes that\r\nis controlled, not their visibility. Names of members are still visible,\r\nand implicit conversions to base classes are still considered, when\r\nthose members and base classes are inaccessible. The interpretation of a\r\ngiven construct is established without regard to access control. If the\r\ninterpretation established makes use of inaccessible member names or\r\nbase classes, the construct is ill-formed.\r\n\r\n* InlinedFunction should not export its interface.\r\n\r\nThese functions should override those in FunctionBase, but should not\r\ndefine a new interface.\r\n\r\n* Explicitly mark overridden members in InlinedFunction", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "67dfbb4ac8f5a6c1f98395983ff3a6ba57527101", "commit_date": "2023-08-03T17:55:51Z", "commit_message": "Fix hang when creating ELF dynamic sections (#1474)\n\nThis is triggered when a binary with no .rel.dyn and .rela.dyn\r\nsections, but its target platform uses rel type relocation records.\r\n\r\nThis happened on an AMDGPU binary that was previously incorrectly\r\nspecified as using a rel relocation record.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8fa753d955d43747aa46b0a528a81a0d9adf677d", "commit_date": "2023-07-27T14:25:14Z", "commit_message": "Do not decode operands for invalid opcode (#1467)\n\nCo-authored-by: Xiaozhu Meng <xmeng@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "43026f99ba03d71ec6105c4b52ad70759645a733", "commit_date": "2023-07-27T14:24:18Z", "commit_message": "Add support for EM_INTELGT (#1468)\n\nIt's unclear at this time how we should treat Intel's XE Gen12/Tiger Lake binaries, so we just treat them as Gen9 (Ponte Vecchio) for now.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d94f856514d7e312d5d4bd704ddac8b166c48c4e", "commit_date": "2023-07-26T21:22:18Z", "commit_message": "do not export Instruction::appendOperand (#1466)\n\n- do not export since it is now private, and should not have been used\r\n  externally (comment said it was to work around old compiler issue).\r\n\r\n- cleanup method order and remove comment", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7456c05b979130eba42c4ee39a9ed00c92de2ba4", "commit_date": "2023-07-26T15:34:22Z", "commit_message": "add getDisplayOrderedOperands interface (#1465)\n\nAdd method Instruction::getDisplayOrderedOperands to return the\r\noperands that are displayed (non implicit operands) when formatting an\r\ninstruction for disassembly.  Returns a vector of Operands in display\r\norder.\r\n\r\nThese operands can be inspected and formatted to produce a disassembly\r\nstring with annotations.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6394752592546df5adff6bc7edb2d8bde330842d", "commit_date": "2023-07-26T03:27:07Z", "commit_message": "modernize ArchSpecificFormatter classes (#1464)\n\n- pass string and vector parameters by const reference instead of by\r\n  value for performance\r\n\r\n- add ArchSpecificFormatter::getInstructionString and remove the overridden\r\n  versions in the non-x86_64 as they were functionally the same, but not\r\n  identically written\r\n\r\n- remove virtual and add override to overridden methods\r\n\r\n- make methods const, use map::at instead of map::operator[]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25ad35c6762df4c40c68bd2fc3f6428efbd45a28", "commit_date": "2023-07-25T18:12:00Z", "commit_message": "improve intel instruction & operand formatting (#1463)\n\nThis fixes three issues when formatting an x86_64 instruction or its\r\noperands:\r\n\r\n1) Fix the order of operands when formatting the instruction to be the\r\n   AT&T syntax order.  If the instruction had three or more operands.\r\n   Conversion from the internal (Intel) order rotated right by 1 instead\r\n   of reversing the operands.\r\n\r\n2) Eliminate special treatment of register %kN as the first operand as\r\n   mask registers in Instruction::format as Operand::format already\r\n   formats these as masks (enclosed in braces) and not all uses of mask\r\n   registers are as a mask.\r\n\r\n3) Fix Operand::format to produce the correct disassembly operand\r\n   string.  The formatting of the internal Expression needs to be done\r\n   for some indirect values.  This was done in the Instruction::format\r\n   instead of directly in Operand::format\r\n\r\n* x86Formatter::getInstructionString - fixes 1, 2, 3\r\n\r\n* Operand::format - fixes 3\r\n\r\n* x86Formatter::formatRegister - cleanup, remove malloc that could leak", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e38d57c9904ab623350e90e0e3adcab2afcf2100", "commit_date": "2023-07-25T18:08:54Z", "commit_message": "fix x86_64 ret instruction formatting (#1457)\n\nThe ret instruction formats incorrectly with an operand of '(%rsp)'.  The\r\noperand should have been flagged as implicit so it is not included in\r\nthe output.\r\n\r\n- eliminate all but one overloaded Instruction::appendOperand` using\r\n  default parameters\r\n\r\n- add isImplicit parameter defaulting to false to\r\n  Instruction::addSuccessor\r\n\r\n- add isImplicit to the ret instruction's addSuccessor call to set the\r\n  ret_addr (which adds the operand to the Instruction object)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88a774dfa36208bc297b65dc18fdfe4e2e66140c", "commit_date": "2023-07-25T18:07:02Z", "commit_message": "modernize InstructionAPI::Operand class (#1456)\n\n* modernize InstructionAPI::Operand class\r\n\r\n- eliminate all but one of the constructors by using default parameters\r\n\r\n- remove destructor (unnecessarily virtual, and reset a member\r\n  shared_ptr), copy ctor, and copy assignment declarations to allow the\r\n  compiler to generate default versions that are equivalent or better\r\n  than the hand written versions\r\n\r\n- add default member initializers for all members\r\n\r\n- make Operand constructor explicit", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e17bc861ac69ddf6f55629b9912dca37e87d05d", "commit_date": "2023-07-25T17:41:03Z", "commit_message": "Fix x86 misspelled, incorrect, and invalid opcodes (#1421)\n\n* Fix spelling of 'vpperm' stringification\r\n\r\n* Fix spelling of 'vpcomd' stringification\r\n\r\n* Fix spelling of 'vprolvd' stringification\r\n\r\n* Fix spelling of 'vprolvq' stringification\r\n\r\n* Remove duplicate entry for 'e_vpsrlvq'\r\n\r\n* Rename 'vpclmullqlqdq' to 'vpclmulqdq'\r\n\r\n* Rename 'punpcklqd' to 'punpckldq'\r\n\r\n* Replace 'punpckhqd' with 'punpckhqdq'\r\n\r\n* Replace 'pcmpgdt' with 'pcmpgtd'\r\n\r\n* Remove instruction 'vpcmpequd'\r\n\r\nThis mnemonic does not exist in any of Intel Architecture Instruction\r\nSet Extensions, AMD Architecture Programmers Manual, or Intel\r\nArchitecutre Software Developer's Manual.\r\n\r\nThe encoding listed under 'SSET1E_66' is a reserved space.\r\n\r\n* Rename mnemonic for 'prefect_w' to 'prefetchw'\r\n\r\n* Rename 'pclmullqlqdq' to 'pclmulqdq'\r\n\r\nThis is a pseudo-opcode for pclmulqdq when imm8 is 0x0.\r\nThe encoding is 660F3A44, so the lookup table location is correct.\r\n\r\n* Remove 'mmxud'\r\n\r\nIt is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'movslq'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Remove 'pcommit'\r\n\r\nThis is an unknown instruction and has no decode table entry.\r\n\r\n* Rename 'cmpsd_sse' to 'cmpsd'\r\n\r\n* Fix spelling of 'vphaddsw' mnemonic\r\n\r\n* Fix spelling of 'vblendpd' mnemonic\r\n\r\n* Remove redundant copy of 'prefetchwt1'\r\n\r\n* Remove redundant 'phsubsw'\r\n\r\n* Remove redundant 'sarx'\r\n\r\n* Remove redundant 'shlx'\r\n\r\n* Remove redundant 'vblendvpd'\r\n\r\n* Remove redundant 'vcmppd'\r\n\r\n* Remove redundant 'vcmpps'\r\n\r\n* Remove redundant 'vcmpsd'\r\n\r\n* Remove redundant 'vcmpss'\r\n\r\n* Remove redundant 'vpmaddubsw'\r\n\r\n* Remove redundant 'vpmaddwd'\r\n\r\n* Remove redundant 'vpmovsdb'\r\n\r\n* Remove redundant 'vpmovsdw'\r\n\r\n* Remove redundant 'vpmovsqb'\r\n\r\n* Remove redundant 'vpmovsqd'\r\n\r\n* Remove redundant 'vpmovsqw'\r\n\r\n* Remove redundant 'vpmovswb'", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d14dff71691f51fb6b96179a87b4cee6d3a34e6b", "commit_date": "2023-07-25T16:19:35Z", "commit_message": "Remove Object::dwarf_parse_aranges (#1462)\n\nIt's usage was removed by 4be991a7 in 2021.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d82356b795db373fd66b098a8ba6073a07ba6089", "commit_date": "2023-07-24T19:02:44Z", "commit_message": "Fix EM_AMDGPU to use RELA as Region Type (#1444)\n\nAccording to the llvm page\r\nhttps://llvm.org/docs/AMDGPUUsage.html#relocation-records\r\nAMDGPU backend generates Elf64_Rela records.\r\n\r\nThis fix added the case for EM_AMDGPU to\r\nstatic Region::RegionType getRelTypeByElfMachine\r\nsuch that it uses RELA instead of the default REL type.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "96f6344d195bb74f30e209c48ee64c8397421dcd", "commit_date": "2023-07-24T17:56:55Z", "commit_message": "Remove lazy initialization of IBSTrees in Symtab (#1454)\n\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes Symtab::mod_lookup threadsafe.\r\n\r\n* Fix includes in Function.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Fix includes in Variable.h\r\n\r\nso that it can be included in Symtab.h\r\n\r\n* Use Function.h instead of forward declarations\r\n\r\nThis removes duplicate typedefs, as well.\r\n\r\n* Convert mod_lookup_ to a value type\r\n\r\nThis makes its existence a class invariant and makes its use in\r\nSymtab::parseFunctionRanges threadsafe.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "649e43fa2d26aa3c5245b05bac1038f407c869a9", "commit_date": "2023-07-21T17:49:14Z", "commit_message": "Make Symtab::getContainingInlinedFunction lazy parsing threadsafe (#1452)\n\nThis fix does not address the thread safety issues in\r\nSymtab::parseFunctionRanges. That function is still thread unsafe and\r\nwill require separate modifications.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab915557f2ee64c538515fcdfed250e23dc40e19", "commit_date": "2023-07-14T23:39:33Z", "commit_message": "Clean up Symtab constructors (#1451)\n\n* Use default member initializers instead of initializer lists\r\n\r\nThere are members missing from the lists. This also simplifies the\r\nconstructors considerably.\r\n\r\n* Remove unhelpful message in default ctor\r\n\r\n* Delegate to default ctor in Symtab(MappedFile*)\r\n\r\nThis fixes the bug of inconsistent base initialization and ensures the\r\nconstructors are consistent.\r\n\r\n* Use delegating ctor for Symtab::Symtab(unsigned char*...)\r\n\r\nThis fixes the following bugs\r\n\r\n1. Invoke init_debug_symtabAPI before calling create_printf.\r\n\r\n2. Because this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.\r\n\r\n* Use delegating ctor for Symtab::Symtab(std::string...)\r\n\r\nBecause this constructor can return early due to errors, it's\r\nimperative that the object is completely constructed by some means\r\n_before_ such a return happens. Otherwise, references to this object and\r\nits destruction would have class invariants inconsistent with objects\r\ncreated by the other constructors.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683b050d6132ce6a9e0cc5cad35d497b2d2d9cc2", "commit_date": "2023-07-14T21:08:09Z", "commit_message": "Explicitly delete unusable special member functions in Symtab (#1450)\n\nBecause there is a user-defined destructor, the compiler will not generate the special member functions (e.g., copy assignment operator). However, we explicitly delete them here to signal that this class is not copyable or movable.  The destructor is also moved to the top of the class to be next to the other special member functions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84786bd694d2c2163d6e8fbd2190271db1868ff3", "commit_date": "2023-07-14T20:20:25Z", "commit_message": "Remove Symtab::mfForDebugInfo (#1449)\n\nIt is never used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88bf2091da5aa9a018afb1f1db67fe6ffeb4773b", "commit_date": "2023-07-14T19:30:50Z", "commit_message": "Remove Symtab::checkPPC64DescriptorSymbols (#1448)\n\nThe definition was commented out in 3709ead48 in 2009.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7014ee1b08ffa17381b6f0bcda9b94368cb83937", "commit_date": "2023-07-14T19:30:30Z", "commit_message": "Remove Symtab copy constructor (#1447)\n\nThere are several reasons for this.\r\n\r\n1. It doesn't copy every member of the class\r\n2. IBSTree doesn't have a copy constructor\r\n3. mod_lookup_ and func_lookup_ are not copied, but are recreated in other member functions (e.g., mod_lookup()). This completely breaks the semantics of a copy ctor.\r\n4. Resets _ref_cnt to 1", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "beae2a07b5e0a40de54ee1aa972ac765e4d825b2", "commit_date": "2023-07-11T16:11:00Z", "commit_message": "add header files to directly define std:: syms (#1443)\n\n- update dyninst header files to directly include the standard header\r\n  file defining symbols from the standard C++ library that are used by\r\n  the dyninst header file; in some instances, the code relied on symbols\r\n  being defined via an unrelated include file indirectly including the\r\n  necessary header file leading to fragile code\r\n\r\n- minor other cleanups:  remove unnecessary header files, remove\r\n  definitions of names that are defined in a standard header file", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9696c64a3a1d6f41241d27c3c51820616490efa6", "commit_date": "2023-06-15T15:41:23Z", "commit_message": "Fix vector instruction lengths (#1439)\n\nThe following instruction decoded with the wrong length if the modrm\r\noperand specified a memory access as all the operand was incorrectly\r\nspecified to be a register only operand:\r\n\r\n- vcvtpd2udq\r\n- vcvtss2usi\r\n- vcvttpd2qq\r\n- vcvtudq2pd\r\n- vcvtudq2ps\r\n- vpblendd\r\n- vpermpd", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44d86e56068f62b9ac03f7d7537098fd3728fcdb", "commit_date": "2023-05-11T19:26:58Z", "commit_message": "Fix several resource leaks (#1435)\n\n* Local var leak in Symtab::addSymbol\r\n\r\nThis was found using cppcheck's memleak.\r\n\r\n* memCache::doOperation\r\n\r\nNot technically a leak, but cppcheck can't see through the 'push_back'.\r\n\r\n* PCProcess::hasPassedMain\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* parse_func::calcParentFunc\r\n\r\nFound using cppcheck's danglingTemporaryLifetime.\r\n\r\n* int_iRPC::setBinarySize\r\n\r\nFound using cppcheck's publicAllocationError.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8676f10714fb0bb7d0a3e7c65ec729d7db195d94", "commit_date": "2023-05-11T17:47:08Z", "commit_message": "Fix undefined behavior in integer operations (#1434)\n\n* Shifting signed 32-bit value by 31 bits is undefined behavior\r\n\r\nThis was found using cppcheck's shiftTooManyBitsSigned.\r\n\r\n* Signed to unsigned conversion in calculation\r\n\r\nThese were found using cppcheck's signConversion.\r\n\r\n* Fix signed overflow\r\n\r\nThis was found using cppcheck's integerOverflowCond.\r\n\r\n* Shifting negative value\r\n\r\nThis was found using cppcheck's shiftNegativeLHS.\r\n\r\n* BPatch_addressSpace::deleteSnippet: fix enumeral conversion in conditional", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c4a422834fbc3e6159ba00f10820f13c1958901e", "commit_date": "2023-05-10T19:01:00Z", "commit_message": "Prevent use of possibly-uninitialized local variable (#1433)\n\nThese were found using cppcheck's uninitvar and eraseDereference.\r\n\r\nFor the usages of iterator-like classes in process.C, they aren't strictly\r\nuninitialized variable usages since the classes in question are standard\r\nlayout types. It would be better to replace the usages there with list\r\nconstruction to avoid the static check altogether.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0c88bea297cb64cf147192242aaa3a4047cdb84", "commit_date": "2023-05-10T17:51:52Z", "commit_message": "Fix uninitialized member variables (#1431)\n\nThese were detected by cppcheck's uninitMemberVar*.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a73abaa9c7298a3e4ce0acf4eb14db8b1cb42fc", "commit_date": "2023-05-10T15:45:14Z", "commit_message": "Fix use of null pointer after check (#1432)\n\nThese were found using cppcheck's nullPointerRedundantCheck.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "68fc3d8a5f1527dcaa66c9455369c62e2b4fa54c", "commit_date": "2023-05-10T05:14:42Z", "commit_message": "Protect against self-assignment in copy constructors (#1430)\n\n* Protect against self-assignment in copy constructors\r\n\r\nThese were found by cppcheck:\r\n\r\ncommon/src/Node.C:198:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nNodeIterator &NodeIterator::operator=(const NodeIterator &rhs) {\r\n                            ^\r\ncommon/src/Edge.C:108:29: warning: 'operator=' should check for assignment to self to avoid problems with dynamic memory. [operatorEqToSelf]\r\nEdgeIterator &EdgeIterator::operator=(const EdgeIterator &rhs) {", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce097b5399fb654f68fbfe48e25e7a7bd567bf82", "commit_date": "2023-05-10T04:07:40Z", "commit_message": "Fix windows warnings (#1429)\n\n* Mismatched printf format arguments\r\n\r\nThese were found using cppcheck's invalidPrintfArgType_*.\r\n\r\n* Fix uninitialized member variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85fb0f95050c903bf1e1a1dbcacf1913dad1d73b", "commit_date": "2023-05-09T20:05:56Z", "commit_message": "Remove virtual calls in constructor/destructor (#1428)\n\n* AddressTranslateWin\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-win.C:49:17: style: Virtual function 'init' is called from constructor 'AddressTranslateWin(PID pid,PROC_HANDLE phandle)' at line 168. Dynamic binding is not used. [virtualCallInConstructor]\r\n   virtual bool init();\r\n\r\n* NodeIteratorPredicateObj\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:293:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateObj(Graph::NodePredicate::Ptr\r\np,NodeIterator&b,NodeIterator&e)' at line 331. Dynamic binding is not\r\nused. [virtualCallInConstructor]\r\n\r\n* NodeIteratorPredicateFunc\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/NodeIterator.h:352:18: style: Virtual function 'inc' is\r\ncalled from constructor\r\n'NodeIteratorPredicateFunc(Graph::NodePredicateFunc\r\np,void*u,NodeIterator&b,NodeIterator&e)' at line 394. Dynamic binding is\r\nnot used. [virtualCallInConstructor]\r\n\r\n* InstructionDecoder_x86\r\n\r\nFound using cppcheck:\r\n\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: style: Virtual function 'setMode' is called from constructor 'InstructionDecoder_x86(Architecture a)' at line 144. Dynamic binding is not used. [virtualCallInConstructor]\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n                                                ^\r\ninstructionAPI/src/InstructionDecoder-x86.C:144:28: note: Calling setMode\r\n      if(a == Arch_x86_64) setMode(true);\r\n                           ^\r\ninstructionAPI/src/InstructionDecoder-x86.h:74:49: note: setMode is a virtual function\r\n                INSTRUCTION_EXPORT virtual void setMode(bool is64);\r\n\r\n* CFGFactor::destroy_block\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:117:18: style: Virtual function 'free_block' is called from destructor '~CFGFactory()' at line 92. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_block(Block * b);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:92:5: note: Calling destroy_block\r\n    destroy_block(b);\r\n    ^\r\nparseAPI/src/CFGFactory.C:182:5: note: Calling free_block\r\n    free_block(b);\r\n    ^\r\nparseAPI/h/CFGFactory.h:117:18: note: free_block is a virtual function\r\n    virtual void free_block(Block * b);\r\n\r\n* CFGFactor::free_func\r\n\r\nFound using cppcheck:\r\n\r\nparseAPI/h/CFGFactory.h:116:18: style: Virtual function 'free_func' is called from destructor '~CFGFactory()' at line 95. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual void free_func(Function * f);\r\n                 ^\r\nparseAPI/src/CFGFactory.C:95:5: note: Calling destroy_func\r\n    destroy_func(f);\r\n    ^\r\nparseAPI/src/CFGFactory.C:172:4: note: Calling free_func\r\n   free_func(f);\r\n   ^\r\nparseAPI/h/CFGFactory.h:116:18: note: free_func is a virtual function\r\n    virtual void free_func(Function * f);\r\n\r\n* CFGFactor::free_edge\r\n\r\n* ~freebsd_process\r\n\r\nFound using cppcheck:\r\n\r\nproccontrol/src/freebsd.C:1046:17: warning: Member variable 'freebsd_thread::is_exited' is not initialized in the constructor. [uninitMemberVar]\r\nfreebsd_thread::freebsd_thread(int_process *p, Dyninst::THR_ID t, Dyninst::LWP l)\r\n                ^\r\nproccontrol/src/freebsd.h:122:17: style: Virtual function 'getEventQueue' is called from destructor '~freebsd_process()' at line 795. Dynamic binding is not used. [virtualCallInConstructor]\r\n    virtual int getEventQueue();\r\n                ^\r\nproccontrol/src/freebsd.C:795:22: note: Calling getEventQueue\r\n    int eventQueue = getEventQueue();\r\n                     ^\r\nproccontrol/src/freebsd.h:122:17: note: getEventQueue is a virtual function\r\n    virtual int getEventQueue();", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6ab42a4da20f7d9a5a58c00a4835d337a95fef5", "commit_date": "2023-05-09T17:30:44Z", "commit_message": "AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak (#1427)\n\n* AddressTranslateSysV::adjustForAddrSpaceWrap: Fix C file descriptor leak\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/addrtranslate-sysv.C:1046:58: error: Resource leak: fd [resourceLeak]\r\n   if (read(fd, &e_hdr, sizeof(e_hdr)) != sizeof(e_hdr)) return base;\r\n                                                         ^\r\ncommon/src/addrtranslate-sysv.C:1048:28: error: Resource leak: fd [resourceLeak]\r\n   if (e_hdr.e_phoff == 0) return base;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5409c471292cb8b1c87e9b5ae1e94fa9b6eb573", "commit_date": "2023-05-09T17:09:20Z", "commit_message": "Make CondVar non-copyable, non-moveable (#1426)\n\nThis makes it consistent with std::condition_variable.\r\n\r\nFound using cppcheck:\r\n\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]\r\n   mutex = new mutex_t;\r\n   ^\r\ncommon/src/dthread.h:114:4: warning: Class 'CondVar' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]\r\n   mutex = new mutex_t;", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "45614d7908e36d32d26126d2844d388c6936ba61", "commit_date": "2023-05-02T18:17:06Z", "commit_message": "Github CI: increase number of build jobs (#1424)\n\nGithub only allows one CPU core per job, but any number of threads. Testing shows that N=2 threads reduces build time by 2-2.5x, N=3 by 2.2x, and N=4 increases build time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e37524ab88b645328c1f02b5c4ab7ac0f7e8d3f", "commit_date": "2023-05-02T02:13:22Z", "commit_message": "Github CI: make compiler multi-build a cron job (#1425)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8952d3207763a26938e097e58ebe97b490c73cf", "commit_date": "2023-05-01T17:32:12Z", "commit_message": "CI compiler multibuilds (#1415)\n\n* Weekly build across all compiler versions and build types\r\n\r\n* Use DYNINST_WARNINGS_AS_ERRORS=ON instead of -Werror", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2e26598a5301ff900d2ca235db729d1dd4c4d350", "commit_date": "2023-05-01T16:45:24Z", "commit_message": "Use default TBB when doing CI spack build (#1423)\n\nDyninst now requires TBB >= 2019.9.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7621bc85ac0cda3bd1b2a17d78aac6d48c68280a", "commit_date": "2023-04-28T00:34:11Z", "commit_message": "Add ubuntu-22.04 to dev container build (#1419)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "719036aeb55c459a355afb91188cfa4d7d465bc9", "commit_date": "2023-04-27T23:51:51Z", "commit_message": "Refactor Dockerfile.ubuntu (#1420)\n\n* Move elfutils logic into build_elfutils.sh\r\n\r\n* Whitespace\r\n\r\n* Copy in dependencies.versions\r\n\r\nThis is no longer done in the base container because it didn't make\r\nsense there as that image should never change.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8d1a313be087154aad95d660b9fe2b34f4da492", "commit_date": "2023-04-27T22:33:27Z", "commit_message": "warning fix:  stack frame size (#1418)\n\n- when compiling with clang 15 and 16 in addition to clang 14,\r\n  allow a 40000 stack frame size", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a9c9e061ea6b41b93151f0ed3b34208346b4881", "commit_date": "2023-04-27T21:28:12Z", "commit_message": "Make InstructionAPI::isArrayIndexValid const. (#1416)\n\nclang complains:\r\n\r\n  'constexpr' non-static member function will not be implicitly 'const'  in C++14; add 'const' to avoid a change in behavior [-Werror,-Wconstexpr-not-const]", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "739ad57883f032fb18a6c741f0c2f98e9a766bc7", "commit_date": "2023-04-25T17:03:44Z", "commit_message": "CMake modernization (#1391)\n\n# Changes to building Dyninst\r\n- Minimum CMake version is 3.14.0\r\n- STERILE_BUILD is now deprecated\r\n- ENABLE_LTO was renamed to DYNINST_ENABLE_LTO\r\n- CMAKE_EXPORT_COMPILE_COMMANDS is no longer set\r\n- Platform detection is done natively in CMake\r\n  - full support for Linux on x86, AMD64, ppc64le, and aarch64/ARMv8\r\n  - experimental support for 32-bit FreeBSD and Windows on x86\r\n- Custom install targets <target>-install have been removed\r\n- Installation subpaths (bin, lib, include, etc.)  are no longer user-configurable\r\n- Static versions of Dyninst libraries now depend on other static Dyninst libraries\r\n  - For example, libDynElf.a now depends on libcommon.a, not libcommon.so\r\n- Libraries that cannot build with symlight now warn when LIGHTWEIGHT_SYMTAB=ON\r\n- User build options passed via CMAKE_<LANG>_FLAGS are correctly preserved and override the builtin options\r\n- <PackageName>_ROOT_DIR now implies <PackageName>_NO_SYSTEM_PATHS and sets <PackageName>_ROOT\r\n  - This forces CMake to find the package at the given location or in CMAKE_PREFIX_PATH\r\n  - When using CMake >= 3.16, searching CMAKE_PREFIX_PATH can be disabled with CMAKE_FIND_USE_CMAKE_PATH=OFF\r\n  - For example, -DElfUtils_ROOT_DIR=/some/path sets ElfUtils_NO_SYSTEM_PATHS=ON and ElfUtils_ROOT=/some/path\r\n\r\n## RPATH handling\r\n- CMP0060 is active and so libraries are linked by their full paths even in implicit directories (e.g., /usr/lib/foo.so instead of -lfoo)\r\n- Populate RPATHs for binaries in the build tree: set(CMAKE_SKIP_BUILD_RPATH FALSE)\r\n- Do not use the install path as the RPATH: set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)\r\n  - $ORIGIN is used instead\r\n- Add paths to any directories outside the project that are in the linker search path or contain linked library files: set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\r\n\r\n## Third-party libraries (tpl)\r\n- The ability to build tpls from source has been removed\r\n- All libraries must have a CMakeConfig.cmake\r\n- Minimum versions\r\n  - Boost: 1.71.0\r\n  - TBB/oneapi-tbb: 2019.9\r\n  - elfutils: 0.186\r\n- An imported interface named Dyninst::<library> is created for each library\r\n  - includes are marked SYSTEM so they don't produce warnings\r\n  - exported in DyninstConfig.cmake as per https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n- pkgconfig is used to find elfutils and valgrind\r\n  - if pkgconfig fails, a manual search is done\r\n  - This can be disabled with  ElfUtils_NO_SYSTEM_PATHS=ON\r\n\r\n# Changes to consuming Dyninst as a CMake project\r\n- All targets are in the Dyninst namespace; e.g., symtabAPI is now Dyninst::symtabAPI\r\n- Each third-party library has an associated imported interface named Dyninst::<library>, e.g., Dyninst::Boost\r\n  - Users are encouraged to use these, if the same library is need in their applications\r\n- DYNINST_LIBRARIES has been removed\r\n- DYNINST_INCLUDE_DIR is now deprecated and will be removed in a future version\r\n  - Use the provided targets, instead\r\n- DYNINST_INTERNAL_DEFINES is now deprecated and will be removed in a future version\r\n- DYNINST_PLATFORM is now deprecated and will be removed in a future version\r\n- find_package(Dyninst ... COMPONENTS ...) now works correctly\r\n- Version constraints for find_package(Dyninst X.Y.Z) now work correctly\r\n  - Dyninst only guarantees ABI compatibility between major releases, so only the same major versions are compatible\r\n\r\nUsers who are not ready to fully migrate to the new Dyninst CMake package may use the following to preserve backward compatibility:\r\n\r\ncmake\r\nif(TARGET Dyninst::common)\r\n  foreach(t common symtabapi ...)\r\n    add_library(${t} INTERFACE IMPORTED)\r\n    target_link_libraries(${t} INTERFACE Dyninst::${t})\r\n  endforeach()\r\nendif()\r\n\r\n* Update minimum CMake version to 3.13.0\r\n\r\n* Rename CMake files to prevent name collisions\r\n\r\nWhen consumed as a subproject, the CMake files could be imported into the parent project where the filenames could collide.\r\n\r\n* Prepend to CMAKE_MODULE_PATH instead of overwriting\r\n\r\n* Fix capitalization error in FindThread_DB\r\n\r\nThis should silence the warning about Thread_Db versus Thread_DB\r\n\r\n* Require CMake package for TBB (#1322)\r\n\r\n* Make libdl/dbghelp private linkage\r\n\r\n* Remove TBB flags from toolkits that don't use TBB\r\n\r\n* Remove FindTBB.cmake\r\n\r\nAll supported TBB versions ship as CMake packages, so this is no longer\r\nneeded.\r\n\r\n* Remove from-source build option\r\n\r\n* Create an imported target for TBB used by Dyninst\r\n\r\nThis is needed to force the include directories to be considered 'system' directories so that compiler warnings from TBB sources are ignored\r\n\r\n* Rename cmake/ThreadingBuildingBlocks.cmake -> cmake/tpls/DyninstTBB.cmake\r\n\r\nThis is needed to keep the namespace clean for DyninstConfig.cmake\r\n\r\n* Export TBB as part of the Dyninst CMake package\r\n\r\nThis is required by the CMake guidelines:\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nIn particular,\r\n  \"All required dependencies of a package must also be found in the package configuration file\"\r\n\r\n* Format DyninstTBB.cmake\r\n\r\n* Boost CMake modernization (#1330)\r\n\r\n* Remove FindBoost.cmake\r\n\r\nUse the one provided by CMake so we don't have to maintain this one.\r\n\r\n* Remove from-source build\r\n\r\n* Remove user-configurable version\r\n\r\n* Force use of multithreaded libraries\r\n\r\nWe don't need to include Threads here. Boost will do that.\r\n\r\n* Disable use of statically-linked runtime\r\n\r\n* Remove Boost_DEBUG\r\n\r\n* Always enable searching system paths\r\n\r\n* Unify path calculations, pass to find_package as hints\r\n\r\n* Clean up comments\r\n\r\n* Use include_guard\r\n\r\n* Allow using Boost's CMake package\r\n\r\nIt is now provided by default since 1.70.0 which is the current minimum\r\nacceptable version.\r\n\r\n* Remove rest of cache variables\r\n\r\n* Remove MSVC-specific template define\r\n\r\nWe can add this back, if we find there are newer VCs still affected.\r\n\r\n* Make Dyninst::Boost imported interface target\r\n\r\nThis is needed to make the include directories be \"system\" directories\r\nso that warnings in their headers do not propagate into Dyninst.\r\n\r\n* Do not add Boost as a dependency for all libs\r\n\r\n* Make find_package QUIET\r\n\r\n* Use Boost_* variables instead of calculating includes, libs, etc.\r\n\r\n* Make a header-only wrapper target\r\n\r\n* Add to Dyninst package\r\n\r\n* Update CMakeLists\r\n\r\n* Set Boost_NO_WARN_NEW_VERSIONS\r\n\r\n* Bump minimum version to 1.71.0\r\n\r\n* Elfutils cmake modernization (#1333)\r\n\r\n* Rename FindLibDwarf -> FindLibDW\r\n\r\n* Update FindLibDW\r\n\r\n* Rename FindLibElf -> FindLibELF\r\n\r\n* Update FindLibELF\r\n\r\n* Create FindElfutils\r\n\r\n* Update FindLibDebuginfod\r\n\r\n* Update DyninstElfUtils\r\n\r\n* Update the CMakeLists to use new targets\r\n\r\n* Use CMP0074 in updated Find modules\r\n\r\nThis enables use of <Package>_ROOT variables when find_package is\r\ninvoked.\r\n\r\n* Provide default dummy interface target for ElfUtils::ElfUtils\r\n\r\nNeeded for non-Unix platforms.\r\n\r\n* Fix rebase bug in CMakeLists.txt\r\n\r\n* Export DyninstElfUtils\r\n\r\n* Forward QUIET flag to pkg_check_modules\r\n\r\n* Forward version to pkg_check_modules\r\n\r\n* Use lib from pkg-config, if found\r\n\r\n* Clean up internal variables\r\n\r\n* Simplify cache variable handling\r\n\r\n* Use full linkage name for libs returned by pkg-config\r\n\r\n* Separate out dependent libraries in FindLibDW\r\n\r\nSome platforms include libelf as a dependency, but IMPORTED_LOCATION accepts only a single entry. Store the rest in IMPORTED_LINK_DEPENDENT_LIBRARIES.\r\n\r\n* Fix quoting bug in FindLibDW\r\n\r\n* Fix lib check in FindLibDW\r\n\r\n* Manually set PC_<XXX>_INCLUDE_DIRS when FindPkgConfig misses it\r\n\r\nFindPkgConfig uses the output from pkg-config --cflags-only-I <lib> to set PC_<XXX>_INCLUDE_DIRS. Because libelf is usually in a system directory, pkg-config will return nothing for this. FindPkgConfig stores the actual includedir variable from the PC file, so we can fetch it from there.\r\n\r\n* Libiberty cmake modernization (#1334)\r\n\r\n* LibIberty cmake modernization\r\n\r\n* Use INCLUDE_DIRS directly\r\n\r\n* Threaddb cmake modernization (#1338)\r\n\r\n* Update FindThread_DB\r\n\r\n* Update thread_db\r\n\r\n* Update docs URL\r\n\r\n* Use OpenMP target (#1339)\r\n\r\nThis also provides a dummy target so we don't have to do any additional checking when USE_OpenMP=OFF. We only use OpenMP_CXX, so I didn't create a target for the other languages (C,Fortran).\r\n\r\n* Valgrind cmake modernization (#1340)\r\n\r\n* Update valgrind\r\n\r\n* Add version check in Find module\r\n\r\n* Remove Valgrind_LIBRARIES\r\n\r\nThey are versioned by architecture, so are hard to nail down with\r\nfind_library. We also don't need them (at least not yet).\r\n\r\n* Make dummy when ADD_VALGRIND_ANNOTATIONS=OFF\r\n\r\n* Add compile defs\r\n\r\n* Update CMakeLists.txt\r\n\r\n* Make the dummy IMPORTED\r\n\r\n* Fix bug with version handling in DyninstBoost\r\n\r\n* Use _min_version in DyninstBoost\r\n\r\nThis is so the CI version check will work uniformly\r\n\r\n* Add existence check for Dyninst::Boost before creating target\r\n\r\n* Clean up find_package flag handling in Find modules\r\n\r\n* Make variable exports uniform across Find modules\r\n\r\n* Coalesce calls to set_target_properties in Find modules\r\n\r\n* Fix bug in DyninstElfutils when calling find_package LibDebuginfod\r\n\r\n* Make just one exported target in FindElfutils\r\n\r\n* Add target existence check in DyninstTBB\r\n\r\n* Add SYSTEM property to Elfutils includes\r\n\r\n* Remove export of DYNINST_LIBRARIES\r\n\r\n* Preserve user's module path when looking for Dyninst modules\r\n\r\n* Manually set legacy DYNINST_INCLUDE_DIR\r\n\r\nThis is now deprecated.\r\n\r\n* Use CMAKE_CURRENT_LIST_DIR intead of DYNINST_CMAKE_DIR\r\n\r\n* Install Find modules for third-party libraries\r\n\r\n* Remove unused DyninstConfigVersion.cmake\r\n\r\n* Remove unneeded comments in DyninstOptions\r\n\r\n* Move all options to DyninstOptions\r\n\r\n* Remove modification of CMAKE_CONFIGURATION_TYPES\r\n\r\nWe just support the usual configs.\r\n\r\n* Move Dyninst version strings to base CMakeLists.txt\r\n\r\n* Move internal includes into base CMakeListst.txt\r\n\r\nThis ensures that all user options and internal settings are in place\r\nbefore third-party dependencies are configured.\r\n\r\n* Clean up 3rd party includes in base CMakeLists.txt\r\n\r\n* Remove unused version strings\r\n\r\n* Remove unneeded 'add_dependencies(common boost)' in base CMakeListst.txt\r\n\r\nThis is now handled directly in CMake recipe for common.\r\n\r\n* Remove unused testsuite include in base CMakeLists.txt\r\n\r\n* Update the project declaration\r\n\r\n* Move setting of CMAKE_BUILD_TYPE to base CMakeLists.txt\r\n\r\nThis keeps all CMake-level variables in one place.\r\n\r\n* Don't set CMAKE_EXPORT_COMPILE_COMMANDS\r\n\r\nThe user should set this.\r\n\r\n* Move BUILD_SHARED_LIBS into base CMakeLists.txt\r\n\r\n* Remove unused INSTALL_DOC_DIR\r\n\r\n* Make cmake_minimum_required a FATAL_ERROR\r\n\r\n* Move rpath and shared lib settings into DyninstLibrary\r\n\r\n* Move installation items into DyninstInstall.cmake\r\n\r\n* Automatically generate DyninstConfigVersion.cmake\r\n\r\n* Use configure_package_config_file to generate DyninstConfig.cmake\r\n\r\nThis will provide more utilities to make a more robust Config.cmake\r\n\r\n* Use INSTALL_INCLUDE_DIR to set DYNINST_INCLUDE_DIR\r\n\r\n* Use PACKAGE_INIT in Config.cmake.in\r\n\r\nAlso use it for DYNINST_INCLUDE_DIR\r\n\r\n* Don't explicitly set Dyninst_FOUND\r\n\r\nThe caller's find_package will do this.\r\n\r\n* Remove unused DyninstSystemPaths.cmake\r\n\r\n* Simplify visibility settings and move to DyninstLibrary\r\n\r\n* Move SYMREADER calculation to base CMakeLists.txt\r\n\r\nIt is needed in several places before DyninstLibrary is included.\r\n\r\n* Merge platform calculations into a DyninstPlatform.cmake\r\n\r\n* Remove DyninstVisibility include\r\n\r\n* Moved configure_file back to base CMakeListst\r\n\r\nThe ordering matters until common gets an explicit list of header files (currently uses a glob).\r\n\r\n* Remove DyninstConfigVersion.cmake.in\r\n\r\nThis isn't needed anymore since the version file is generated automatically.\r\n\r\n* Remove custom target install\r\n\r\ncmake_install.cmake isn't intended to be used that way.\r\n\r\n* Remove install logic from dyninst_library\r\n\r\nThat is now handled in DyninstInstall.\r\n\r\n* cmake-format: set tab size to 2\r\n\r\n* cmake-format: don't format comments\r\n\r\n* Calculate platform from CMake-provided mechanisms\r\n\r\nThese are equivalent to the existing bash, but more adaptable.\r\n\r\n* Map stringy names into CMake variables\r\n\r\n* Replace Windows platform check with DYNINST_OS_Windows\r\n\r\n* Replace Linux platform check with DYNINST_OS_Linux\r\n\r\n* Replace FreeBSD platform check with DYNINST_OS_FreeBSD\r\n\r\n* Replace x86 platform check with DYNINST_OS_x86_64\r\n\r\n* Replace ppc platform check with DYNINST_ARCH_ppc64le\r\n\r\n* Replace aarch64 platform check with DYNINST_ARCH_aarch64\r\n\r\n* Replace mangled platform checks with explicit DYNINST_{OS,ARCH}\r\n\r\n* Rename PLATFORM to DYNINST_PLATFORM and export it as legacy\r\n\r\nThis is only used in the test suite.\r\n\r\n* Don't pass -m64 explicitly on ppc64le\r\n\r\nWe only support 64-bit ppc, so this is redundant and non-portable.\r\n\r\n* Remove commented-out define for aarch64\r\n\r\n* Simplify CapArchDef\r\n\r\nWith the new variables, only one pass over the OS names is needed.\r\n\r\n* Allow FreeBSD to build on i386\r\n\r\nI previously thought it was only allowed on x86_64, but there is an old platform called i386-unknown-freebsd7.2.\r\n\r\n* Add Windows to DYNINST_PLATFORM\r\n\r\n* Replace usage of WIN32 with DYNINST_OS_Windows\r\n\r\n* Replace usage of UNIX with DYNINST_OS_UNIX\r\n\r\n* Merge Linux+FreeBSD checks into UNIX check\r\n\r\n* symtabAPI - replace i386 check\r\n\r\n* Use 'option' instead of 'set(... CACHE ...)'\r\n\r\n* Deprecate STERILE_BUILD\r\n\r\n* DyninstOptions - use 'OFF' instead of 'NO'\r\n\r\n* Get rid of dyninst_link_private_library\r\n\r\nWe require CMake >= 3.13.0 so this is no longer needed.\r\n\r\n* Rename SOVERSION to DYNINST_SOVERSION\r\n\r\nSOVERSION is a keyword.\r\n\r\n* Replace LIBVERSION with DYNINST_LIBVERSION\r\n\r\nFor clarity and consistency.\r\n\r\n* Replace DYNINST_ROOT with PROJECT_SOURCE_DIR\r\n\r\n* Move library settings into DyninstLibrarySettings.cmake\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR absolute\r\n\r\nIn 'install', they are relative to CMAKE_INSTALL_PREFIX by default.\r\n\r\n* DyninstLibrarySettings - don't make INSTALL_*_DIR cache variables\r\n\r\nThere's no need to let the user modify these locations.\r\n\r\n* DyninstLibrarySettings - reuse INSTALL vars\r\n\r\nThis just makes sure changes are propagated.\r\n\r\n* DyninstLibrarySettings - remove INSTALL_BIN_DIR\r\n\r\nIt's not used.\r\n\r\n* DyninstLibrary - rename INSTALL_*_DIR -> DYNINST_INSTALL_*DIR\r\n\r\nThis is more in line with the naming convention of GNUInstallDirs. We\r\ncould use GNUInstallDirs directly, but there's no need to let the user\r\nconfigure the install directory layout.\r\n\r\n* DyninstLibrarySettings - Use 'Dyninst' instead of PROJECT_NAME\r\n\r\nThis is the only placed PROJECT_NAME is used, so make it consistent.\r\n\r\n* DyninstLibrarySettings - update RPATH handling\r\n\r\n* DyninstLibrary - don't manually create cmake_install.cmake\r\n\r\nThese are automatically created and installed by 'install'.\r\n\r\n* DyninstLibrary - Merge calls to set_target_properties\r\n\r\n* DyninstLibrary - Cleanup superfluous variable usage\r\n\r\n* DyninstLibrary - add Windows defines to targets instead of directories\r\n\r\n* DyninstLibrary - add LIGHTWEIGHT_SYMTAB, SW_ANALYSIS_STEPPER to targets\r\n\r\n* DyninstLibrary - add DYNINST_DIAGNOSTIC_NO_SUPPRESSIONS to targets\r\n\r\n* DyninstLibrary - export all targets to DyninstTargets.cmake\r\n\r\n* DyninstLibrary - don't treat each library as a separate component\r\n\r\n'COMPONENT' in 'install' is used to group targets into \"bags\" of useful\r\nfeatures that can be independently installed using cmake --install .\r\n--component .... That doesn't work for Dyninst. Note: This is\r\northogonal to the concept of a COMPONENT in find_package.\r\n\r\n* DyninstLibrary - remove CLEAN_DIRECT_OUTPUT\r\n\r\nWe no longer offer per-library build targets.\r\n\r\n* DyninstLibrary - remove WITHOUT_SYMTAB_API and WITHOUT_SYMLITE\r\n\r\nThese are never used.\r\n\r\n* DyninstLibrary - refactor global defines in 'dyninst_library'\r\n\r\n* DyninstLibrary - Move calculation of SYMREADER\r\n\r\n* DyninstLibrary - rename 'target' to '_target'\r\n\r\n'target' is a keyword\r\n\r\n* DyninstLibrary - add named arguments\r\n\r\n* DyninstLibrary - rename SRC_LIST with _target_SOURCE_FILES\r\n\r\nThe latter is created from the named argument 'SOURCE_FILES'.\r\n\r\n* DyninstLibrary - Replace ACTUAL_TARGETS with _all_targets\r\n\r\n* DyninstLibrary - make headers part of library declaration\r\n\r\nThis tracks file changes to signal rebuilds.\r\n\r\n* DyninstLibrary - add links, properties, includes to all targets\r\n\r\nThis synchronizes the SHARED and STATIC libraries.\r\n\r\n* DyninstLibrary - link private and public deps separately\r\n\r\n* DyninstLibrary - Set include directories on interfaces\r\n\r\nThis replaces using PUBLIC_HEADERS which is really intended for use with\r\nMacOS Framework targets.\r\n\r\n* DyninstLibrary - remove LIBRARY_OUTPUT_DIRECTORY\r\n\r\nThe default is CMAKE_CURRENT_BINARY_DIR, so no need to specify it.\r\n\r\n* DyninstLibrary - Apply DEFINES passed to dyninst_library\r\n\r\n* DyninstLibrary - make SHARED library explicit\r\n\r\n* DyninstLibrary - don't deref Boolean variable\r\n\r\n* DyninstLibrary - update message\r\n\r\n* DyninstLibrary - Install headers, preserving the directory structure\r\n\r\n* DyninstLibrary - \"return\" the list of generated target names\r\n\r\n* DyninstLibrary - add directory-level include guard\r\n\r\n* common - remove spurious files\r\n\r\nAdded in 2015.\r\n\r\n* common - move generation of dyninstversion.h into CMakeLists.txt\r\n\r\n* common - add global include guard in CMakeLists\r\n\r\n* common - explicitly list header files in CMakeLists\r\n\r\nThis makes it easier to see what the actual public files are.\r\n\r\n* common - refactor source list calculation\r\n\r\n* common - move include of DyninstLibrary into subdirectory\r\n\r\n* common - use new dyninst_library\r\n\r\n* common - set includes and Windows stuff on all targets\r\n\r\n* common - write 'dyninstverison.h' into source dir\r\n\r\n* elf - make a dummy target for non-Unix OSes\r\n\r\n* elf - use new dyninst_library\r\n\r\n* dwarf - use new dyninst_library\r\n\r\nThe changes here are the same as for elf/CMakeLists\r\n\r\n* symlite - make symlite/h/SymLite-elf.h publicly consumable\r\n\r\nIt refers to files in the build tree that aren't available in the\r\ninstall tree. Although this file is in the install tree, it was never\r\nconsumable by users. Updating this is of questionable utility, but it at\r\nleast gives us the opportunity to write tests against the public\r\ninterface.\r\n\r\n* symlite - use new dyninst_library\r\n\r\n* instructionAPI - use new dyninst_library\r\n\r\n* symtabAPI - use new dyninst_library\r\n\r\n* proccontrol - use new dyninst_library\r\n\r\n* parseAPI - use full path to common/h/util.h.\r\n\r\nThis prevents confusion with parseAPI/h/util.h.\r\n\r\n* parseAPI - use new dyninst_library\r\n\r\nThis one is different from the rest because parseAPI and dataflowAPI\r\nhave circular dependencies on each other, so it's not currently possible\r\nto split them up.\r\n\r\n* stackwalk - use new dyninst_library\r\n\r\nPreviously, FORCE_FRAME_POINTER was applied to _all_ of Dyninst. The\r\ncommit comments said it was supposed to be just for the stackwalk\r\nsources, so that is the new behavior.\r\n\r\n* stackwalk - incorporate check of SW_ANALYSIS_STEPPER\r\n\r\nIt only affects stackwalk, so no need to put it on all of the targets.\r\n\r\n* stackwalk - put SW_ANALYSIS_STEPPER check in post-processing\r\n\r\nThis tidies up the code a bit.\r\n\r\n* patchAPI - use new dyninst_library\r\n\r\n* dyninstAPI - use absolute include path for 'debug.h'\r\n\r\n* dyninstAPI - add missing include for Dyninst::Address\r\n\r\nThis was transitively included, but breaks when reording includes.\r\n\r\n* dyninstAPI - add missing include for std::set\r\n\r\n* dyninstAPI - use new dyninst_library\r\n\r\n* dynC_API - use new dyninst_library\r\n\r\n* parseThat - use new dyninst_library\r\n\r\n* dyninstAPI_RT - use new dyninst_library\r\n\r\n1. SRC_ASSEMBLY was never used. The assembly files have always been\r\nexplicitly listed.\r\n\r\n2. We are still linking libdl.so on the static versions of the runtime.\r\nThis hasn't been an issue in the past, so we'll leave it.\r\n\r\n3. The creation of the lists of source files has redundant checks in it,\r\nbut this version is much clearer on what is actually happening.\r\n\r\n4. CHECK_C_COMPILER_FLAG_EXTENDED was removed since CMake now supports a\r\nmuch larger set of compilers and Dyninst has dropped support for HP,\r\nSun, and XL.\r\n\r\n5. The config is much less noisy. There was no reason to determine if\r\n32-bit support would work when the user didn't ask for it. Now, the\r\nconfig will fail if the user asks for 32-bit libraries and the compiler\r\ncan't create them.\r\n\r\n* Remove top-level project includes\r\n\r\nAll of the necessary includes are now handled by each toolkit via\r\nexplicit import/export of targets and include directories.\r\n\r\n* Remove top-level check for SYMREADER\r\n\r\nThe respective CMakeLists now handle this.\r\n\r\n* Add better handling of Threads/pthread\r\n\r\n1. Move Threads include into a tpls module\r\n\r\n2. Link against Threads::Threads instead of 'pthread'\r\n\r\n3. Add explicit dependencies in dyninstAPI and dyninstAPI_RT (they were\r\nimplicit before).\r\n\r\n* DyninstConfig - Correctly detect presence of COMPONENTS on import\r\n\r\nThis previously didn't work at all because DYNINST_${COMP}_FOUND should\r\nhave been spelled Dyninst_${COMP}_FOUND. This is simpler and allows the\r\nuse of check_required_components directly.\r\n\r\n* DyninstConfig - Remove unneeded and (now) incorrect comments\r\n\r\n* Make an OpenMP tpl module\r\n\r\nThis will make it easier to export OpenMP in DyninstConfig. It also makes CMakeLists.txt have just straight-line code.\r\n\r\n* Include all third-party libraries in DyninstConfig\r\n\r\nThis is explicitly required by the CMake documentation:\r\n\r\n  \"All required dependencies of a package must also be found in the\r\npackage configuration file.\"\r\n\r\n  https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html\r\n\r\nThis also ensures that the custom Dyninst:: targets are always available\r\nto consumers.\r\n\r\n* Ensure static libraries depend on static Dyninst libraries\r\n\r\nWhen creating a static Dyninst library, ensure that it depends on the\r\ncorresponding static Dyninst library. For example, libDynElf.a should\r\ndepend on libcommon.a, not libcommon.so.\r\n\r\n* DyninstWarnings - Ignore no-pragma warnings for non-Werror builds\r\n\r\n* DyninstCapArchDef - rename UNIFIED_DEFINES\r\n\r\nDYNINST_PLATFORM_CAPABILITIES is more descriptive.\r\n\r\n* DyninstCapArchDef - add include guard\r\n\r\n* DyninstLibrary - add DYNINST_PLATFORM_CAPABILITIES to all targets\r\n\r\n* DyninstLibrary - add documentation\r\n\r\n* DyninstLibrary - update comment about install dir structure\r\n\r\n* DyninstLibrary - install runtime in 'bin'\r\n\r\n* Include 'src' and 'h' subdirectories in BUILD_INTERFACE\r\n\r\nEvery toolkit has a similar directory structure, so we can do this\r\nin just one location instead of in each CMakeLists.\r\n\r\n* Unswitch loops for platform-specific target updates in CMakeLists\r\n\r\nThis is really a code beautification.\r\n\r\n* Remove DYNINST_LIBVERSION\r\n\r\nIt's never different from DYNINST_VERSION and has no special purpose.\r\n\r\n* Remove system path detection in RPATH calculations\r\n\r\nWe use CMAKE_BUILD_WITH_INSTALL_RPATH to ensure the install path is not\r\nin RPATH/RUNPATH, but then this code would add it back if the install\r\ndirectory isn't a system path.\r\n\r\n* DyninstLibrary - simplify regex for header install\r\n\r\n* Rename cmake/version.h.in to cmake/dyninstversion.h.in\r\n\r\nThis makes the generated file match the generator file name.\r\n\r\n* DyninstLibrary - install from _target_PUBLIC_HEADER_FILES\r\n\r\n_public_headers was only incidentally present from the file including\r\nthis one.\r\n\r\n* parseAPI - make headers PRIVATE in dyninst_library\r\n\r\nWe manually install them because of how dataflowAPI is consumed.\r\n\r\n* Issues warning when toolkit cannot be built with LIGHTWEIGHT_SYMTAB\r\n\r\n* CMake modernization - update compiler flags (#1374)\r\n\r\n* Fix spelling of LibDW_INCLUDE_DIRS when marking it as advanced\r\n\r\n* Mark STERILE_BUILD as advanced\r\n\r\n* Mark Boost_DIR as advanced\r\n\r\n* Mark TBB_DIR as advanced\r\n\r\n* Mark Thread_DB_{INCLUDE_DIRS,LIBRARIES} and as advanced\r\n\r\n* Update README\r\n\r\n* Add gfx908 public headers\r\n\r\nThese somehow didn't make it through the rebase\r\n\r\n* Make flags for RelWithDebInfo and Release match\r\n\r\n* Disable cmake-format for extra flags in DyninstWarnings\r\n\r\n* Propagate ElfUtils_ROOT_DIR to FindLib{ELF,DW,Debuginfod}\r\n\r\n* Use 'set' instead of 'option' for stringy options\r\n\r\n* Add more cmake-format exceptions in DyninstWarnings\r\n\r\n* Add <Package>_NO_SYSTEM_PATHS to elf, dw, debuginfod\r\n\r\nThis is used to exclude system directories from the search process.\r\n\r\n* Have ElfUtils_ROOT_DIR override search paths\r\n\r\nIf the user provides a value, then no system paths (aside from the ones\r\nin CMAKE_PREFIX_PATH) are searched. This lets the user 'force' a\r\nlocation for elfutils.\r\n\r\n* Remove explicit version fail check in elfutils find-modules\r\n\r\n* Move ElfUtils_ROOT_DIR check into DyninstElfutils\r\n\r\n* Add LibIberty_NO_SYSTEM_PATHS\r\n\r\n* Add Valgrind_NO_SYSTEM_PATHS\r\n\r\n* Remove explicit version check from FindValgrind\r\n\r\n* Boost - use new meaning of Boost_ROOT_DIR\r\n\r\n* Fix typo in DyninstElfUtils\r\n\r\n* Fix bug when setting path flags\r\n\r\n* TBB - use new meaning of TBB_ROOT_DIR\r\n\r\n* Add support for common/h/unaligned_memory_access.h\r\n\r\n* Set default DYNINST_LINKER to empty\r\n\r\nThis will use the default linker. lld is the LLVM linker.\r\n\r\n* Make requesting an unknown component an error\r\n\r\n* Always build libdyninstAPI_RT.a\r\n\r\nThis is always needed by the test suite and keeps the old behavior of having it built by default.\r\n\r\n* Add DYNINST_FORCE_RUNPATH option\r\n\r\nSetting this flag forces the linker to use RUNPATH instead of RPATH.\r\nThis is most useful for working with older RedHat distros.\r\n\r\n* Reduce number of public link dependencies\r\n\r\nThis reduces the number of transitive links that have to be done by\r\nbinaries linking against Dyninst.\r\n\r\n* Make elfutils dependency public for symtab\r\n\r\nIt's needed in the Module.h public header.\r\n\r\n* Require TBB >=2019.9\r\n\r\nWhen building from source, versions before 2019.9 incorrectly set the\r\nversion in TBBConfigVersion.cmake. For example, 2018.6 sets the version\r\nto 2018.0 because it uses the TBB_{MAJOR,MINOR}_VERSION from tbb_stddef.h\r\ninstead of doing the calculation based on the engineering version.\r\n\r\nThis also unifies the versions required when compiling with gcc and clang.\r\n\r\nTBB 2018.6 was released in Oct 2018 and 2019.9 was released in Oct 2019,\r\nso this just bumps the requirement by just a year even though there are\r\nat least 9 releases in between.\r\n\r\n* Update Boost version in docker/dependencies.versions\r\n\r\n* Update filenames in dependency-version CI check\r\n\r\n* Update variable names in dependency-version CI check\r\n\r\n* Make elfutils dependency public for dynElf\r\n\r\n* bump CMake minimum version to 3.14.0\r\n\r\nThe 3.13.* family requires every 'install' to specify a \"LIBRARY\r\nDESTINATION\". We don't need or want that in the custome parseAPI install\r\n(line ~130) for exporting the public headers.\r\n\r\n* Add cmake to dependency-version CI check\r\n\r\n* Rename cdna2 -> gfx90a in new layout\r\n\r\n* Always create list of static-only sources in dyninstAPI_RT\r\n\r\n* Add common/h to BUILD_INTERFACE in 32-bit libdyninstAPI_RT\r\n\r\n* Fix building with symLite\r\n\r\nThe headers from symtabAPI are still required, even when building with symLite.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e93225713b1633a7bf6ff0d9a89c409db802173", "commit_date": "2023-04-21T19:58:43Z", "commit_message": "Add callback for parsing unknown instructions (#1276)\n\n* Add callback declarations for unknown instructions in InstructionDecoder\r\n\r\n* Update definition of callback interface\r\n\r\nThis also makes 'unknown_instruction' inconstructible.\r\n\r\n* make isValid the same as isLegalInsn\r\n\r\nThis makes it impossible to make an Instruction object from a failed\r\ndecoding process. This only affects x86.\r\n\r\n* Detect illegal instructions sooner in doIA32Decode\r\n\r\n* Don't advance the buffer when an x86 decode fails\r\n\r\n* Use a ternary to avoid linker error on some gcc's\r\n\r\nSome versions of gcc don't inline std::min _and_ need to resolve maxInstructionLength.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "308bddcb75de5df8e18d7b5af62602d9f5f818a0", "commit_date": "2023-04-20T21:01:50Z", "commit_message": "Update GFX90A Decoder  ISA-SPEC(02/22/23) (#1407)\n\nUpdate implementation for AMDGPU GFX90A based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. case label in amdgpu_gfx90a_decoder_impl.C made sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44e3bb530ccb4228588bd17635eaf77cdf5365e1", "commit_date": "2023-04-20T21:01:37Z", "commit_message": "Update GFX908 Decoder ISA-SPEC(02/22/23) (#1408)\n\nUpdate implementation for AMDGPU GFX908 based on ISA-SPEC 02/22/23\r\n\r\n1. Fix use of wrong immediate length in sign_extend (bug-fix)\r\n2. Add memory counter definitions (dsmem)\r\n3. In functions IS_ENC_* use hex representation instead of int\r\n4. Use isArrayIndexValid function to do boundary check for ENC_*_insn_table\r\n5. Fix compile warning for shadowing num_elements in the decoder\r\n6. Make case label in amdgpu_gfx90a_decoder_impl.C sorted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c401cd675058af5e873f4763a6f133fd11938ce", "commit_date": "2023-04-20T21:00:54Z", "commit_message": "Add CI workflow to build consumers of Dyninst (#1412)\n\n* Add CI workflow to build consumers of Dyninst\r\n\r\n* Build with cron", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25b37343f2f115298bd82eecf579bc3baf06b5ba", "commit_date": "2023-04-20T20:55:59Z", "commit_message": "CI workflow to build from spack (#1411)\n\n* CI workflow to build from spack\r\n\r\n* Update cron to every Sunday at 3AM\r\n\r\n* Force use of intel-tbb\r\n\r\nDue to explicit conflicts in the recipe, spack uses intel-parallel-studio which can't be used in automated builds because it prompts the user to accept a license agreement\r\n\r\n* Switch to weekly cron schedule", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0885301c49db8cfc286f41003a558005c9c7ace6", "commit_date": "2023-04-05T13:30:47Z", "commit_message": "Rename Architecture AMDGPU_CDNA2 to AMDGPU_GFX90A (#1404)\n\nRename the Architecture Arch_amdgpu_cdan2 to Arch_amdgpu_gf90a,\r\nas recommended by the vendor.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2f7af10477b0f7daf0efca2c992224711e5deb27", "commit_date": "2023-04-04T02:12:02Z", "commit_message": "Fix link bug in insnCodeGen::loadImmIntoReg on aarch64 (#1405)\n\n* Fix link bug in insnCodeGen::loadImmIntoReg on aarch64\r\n\r\nThe function template has a separate declaration and \"definition\" AND is\r\ncalled from translation units where neither is located. This only happens\r\nto work correctly when the TUs are linked in a specific order.\r\n\r\n* Remove assert\r\n\r\nThe value is now always positive.\r\n\r\n* Remove missed template usage in emit-aarch64.C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a86894f3d9120883ed4c0cf4278287c8bb43ed73", "commit_date": "2023-03-30T20:00:03Z", "commit_message": "remove unneeded zero length files (#1403)\n\n- two old commits (accidentally?) committed zero length files that\r\n  seem to serve no purpose", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1ddebd3125437d3385e65a7cce5bea715588028", "commit_date": "2023-03-23T14:25:12Z", "commit_message": "Fix UB in dwarf/dwarf_subrange.cpp::get_type (#1402)\n\nThe dwarf_* functions return a pointer to their last argument. This causes 'get_type' to return a pointer to a local variable.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e952a0dfc13dbb7d665219a672733a505ee2a00", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  stack frame larger than (#1397)\n\n- increase stack frame size warning limit another 1000 bytes for\n  power_opcode_tables.C for RELEASE builds using the clang compiler", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "683c85c7ef35d0afe6188271c8f697f6f839e12d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameter (conditionally) (#1397)\n\n- Add macro DYNINST_SUPPRESS_UNUSED_VARIABLE to suppress\n  warnings about unused variables\n\n- use macro to suppress function parameter that is only unused\n  when building on aarch64 and hence cannot be commented out", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "309d167d291f69d0ba9d4671ca581d6d24bf95e0", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "fix broken call to base class function (#1397)\n\n- SgAsmBinaryMultiply::get_type() rose results in infinite recursion\n  as casting the pointer to the base class and calling a function\n  still calls the derived version.  Just call the base class's function\n\n- rewrite SgAsmBinaryAdd::get_type the same way; it was not broken\n  but was convoluted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f57a5cbdfa98333527466423cbc32224874fa81", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "enable warnings in dataflowAPI/src (#1397)\n\n- separate dataflowAPI/src and dataflowAPI/rose source files\n\n- undo disabling warnings for dataflowAPI/src files\n\n- only include ABI.C as a source file once", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "766c7fad0f9f25bc5505f55a88c4f370b0f2cc69", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variable (clang compiler bug) (#1397)\n\n- add suppressions around code that contains a lock using RAII;\n  clang prior to version 10 contains a bug where it does not\n  recognized that the ctor and dtor make the variable used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e86fb6e232b370a66f407f9a0af440134bff147", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  suppress VLA warning (#1397)\n\n- Rose uses a VLA in C++ which is non-standard; for now suppress the\n  diagnostic\n\n- clang requires disabling both -Wvla and -Wvla-extension\n\n- gcc <9, 11.0 and 11.1 has a bug that requires the suppression to\n  to not be in the same macro as VLA itself", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89b22e23d4abcf48a2b1d3dd0f1ce294b4bb6260", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1397)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f7ed33ed9fac49623fea5ed2743462d8c31a062", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  missing noexcept (#1397)\n\n- declare function noexcept to allow potential optimization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "61faa14906eb2a7543867f4cb66643783ba41323", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  deprecated implicit ctor and op= (#1397)\n\n- add explicit copy ctors and operator=,\n  or delete dtor where it could be defaulted", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa4713e0f2f063362a496ed03d0d0d65ff43d037", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (delete variable) (#1397)\n\n- remove variables and their initializatins that shadow a variable in\n  the enclosing scope as they were initialized with the same value", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1caea03054dbd73178ea2f40e2ca3474ff9c82e6", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  shadow (rename) (#1397)\n\n- rename names that shadow a name in an enclosing scope or class with\n  a unique name", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a309c63953a845f2d0c6e24f3bc3c4d117ef9006", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  potentially evaluated expression (#1397)\n\n- replace use of typeid(expr) where expr executes code at run-time\n  with a dynamic_cast that is obvious that it executes code at\n  run-time", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "412071df5285ecb872abaa966ae4ebb81c733573", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  overloaded virtual overrides (#1397)\n\n- import the name of the base class's virtual function(s) that were\n  overridden in the derived class to prevent hiding of the base class's\n  functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a720e99d94bfb01de40488d5dae8b45645fb284e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  copy ctor missing base class (#1397)\n\n- call the base class's copy constructor in the derived class's\n  copy constructor", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "336409431b648c18c7b51ec1c3135489f82ab7ce", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  case fallthough (#1397)\n\n- add break statement or DYNINST_FALLTHOUGH macro where a switch\n  case falls through to the next case", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "476ba11cf828964579d40a26b21e4b0eb808d560", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  printf format related (#1397)\n\n- add printf-format annotation on dataflow printf function parameter\n\n- fix format string to match parameter types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a15d069e2ce6340396e71bc283f0ac2377b4da6e", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  reorder ctor initialization list (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f13b79c36af349203bddba40757b82a1206de42d", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  const correctness (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b880173dc64d2d1f07e4d41b4796eac3d14873fe", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused variables (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "951ebb64db730f7497ce886e8634aaa3da3cc5e7", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  unused parameters (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e9a4b86d2adbe3763fad3df38f85ac92959e26c", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  variadic macro (#1397)\n\n- replace non-standard variadic macro syntax with standard syntax\n\n- remove preprcessor check to use variadic macros if the compiler is\n  gcc;  all compilers support them", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42223b1f9118e32fe145a85a13ced32c13cd5871", "commit_date": "2023-03-15T19:56:13Z", "commit_message": "warning fix:  extraneous semicolons (#1397)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ebf545849ef979aaa21bf82e8caff104cbeb6f6", "commit_date": "2023-03-15T13:47:22Z", "commit_message": "Github CI: update dev container deployment (#1400)\n\n* Log in to GHCR before building\r\n* Pull base image for cache", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab965c214b030a302aa0307b121cb9d06ab0a989", "commit_date": "2023-03-15T12:39:13Z", "commit_message": "Github CI: add line continuation in dev-containers.yaml (#1399)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f5558a15b16272eef982b5e8ddfdf172eb59036", "commit_date": "2023-03-15T12:23:31Z", "commit_message": "Add PR testing Github CI (#1393)\n\nRun on pull request to master:\r\n\r\n    Enforce formatting of CMake files, if modified\r\n    Check for changes in minimum required versions of dependencies\r\n    Ensure Dyninst, test suite, examples, and external tests all build with gcc on Ubuntu-20.04\r\n\r\nRun on push to master:\r\n\r\n    Build and deploy new dev container, ghcr.io/dyninst/amd64/<OS>:latest", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e7aa66ddef6768957faae3c62c9909590663901", "commit_date": "2023-03-09T20:15:45Z", "commit_message": "Replace 'cerr' with 'dwarf_print' in DwarfWalker::decodeLocationList (#1395)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1157c87c0b184d83e851bdd5b63582dd2a7647cf", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy with user dtor (#1394)\n\n- Make classes move-only by removing public copy constructor and\n  operator= as they contained pointer members that were just copied\n  (with no semantics of copying the data). This is a double delete\n  waiting to happen.  Luckily the pointer were always nullptr when the\n  copy constructor was called.\n\n- add move constructor (using std::move where appropriate)\n\n- clean up the classes to use default constructors and default member\n  initialization", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1aeb249ff90fea49dc50efea1e6c11577bf9d90", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unneeded internal declaration (#1394)\n\n- clang warns of an unneeded internal declaration for yyinput. Since\n  yyinput is generated by flex, just suppress it for the whole file.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7cd7cdb0ba98de24b0d916b8e440db8adb0af6f9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (derived) (#1394)\n\n- Derived type classes have an operator==(const Type&) const, and they\n  call this operator with with both the lhs and rhs being the derived\n  class type.  This is ambiguous when using C++ 20's rule that considers\n  the parameters reversed.  Fix by adding an inlined non-virtual\n  operator== that takes the derived types a parameter and then\n  unambiguously calls the existing ==", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12a4fd86738c048dd82c20c31359cf7a48c082eb", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  stack frame larger than (#1394)\n\n- increase stack frame size warning limit when using the clang compiler\n  for a couple of files that needed a similar increase for gcc", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b78e883c77aefc27d1a30722b414266aa33897d1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  logical op (#1394)\n\n- add suppressions for identical clauses of a logical operator\n  even if they are only identical after evaluating constant\n  expressions that are not identical as gcc 8 and prior warn\n  about this\n\n- Suppression for these are already in place for warnings in adjacent\n  if statements, so extend the suppression to cover these also", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9dbc1e30e30ef263b174d1d2b5ca648e8ef6bf0d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  C function decls without prototype (#1394)\n\n- C functions declared as func() are a declaration without a prototype\n  (from the original K&R C), not a function that takes no parameters\n  (until C23), change all of these to func(void) which is how to\n  declare such a function in C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a2e3fd795f8ec6cb730038ec277431b0832c03c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  set but unused variables (#1394)\n\n- delete variables whose only use is to increment themselves", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6e380f7158326fc686f1b3f7ec7a01b3ac4bfe2", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  ambiguous reversed operator (#1394)\n\nC++ 20 considers the reversed parameter of a comparison operators in\naddition to the given parameter order.  This implies that if the\nargument is const then the member function must also be const.\n\n- change    bool operator==(const T&)\n      to    bool operator==(const T&) const", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e57fe4c395dff4fd11f18d2f00eb58ad25212501", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::random_shuffle is deprecated (#1394)\n\n- replace std::random_shuffle with std::shuffle", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "706fd0e3c532a3d7cfc1d752620ebed2fac65c5d", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing noexcept (#1394)\n\n- declare functions noexcept", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "55d8a338e362d3aa4448aa9bae776eb90ca1292a", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  std::iterator is deprecated (#1394)\n\n- replace std::iterator with in class type aliass for required types", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b977e8d7132b312c853652a1e7e6f28eb39dbab0", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  unused private field (#1394)\n\n- removed myid member from dyn_thread as it is never used", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0eb0b29def9cc2d18e0fe724e536c73e7e9ef964", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  deprecated copy/op= with user provided dtor (#1394)\n\n- Explicitly define the implicit operator or remove the explicit\n  destructor; in C++ 20, if a destructor is explicitly defined then\n  the other constructor, assignment and move operators will not be\n  automatically generated", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9be477535debee15c2403bdc2ddedb31fdf0eb8e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  remove unused variables/members (#1394)\n\n- remove variables that were never used\n\n- remove code that only updated unused variables", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "344783a7954de9af7f98a5d3f0ec7c505b7536a1", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (variables) (#1394)\n\n- rename variables that shadow names in containing scopes", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73064a866ee1d19d8e12e2562f60b9b7f8e05406", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  shadow (enumerator names) (#1394)\n\nenumerator names shadow names in other scopes\n\n- made 3 internal enum types scoped enums:  StackAccessType,\n  operandType and patch_type_t\n\n- delete one internal and unused enum type:  frameType_t", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4bf4a24c514d0c395fdd27d6fe68ddf0fef89040", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "replace C-style and functional casts (#1394)\n\n- replace C-style casts ((T)e) and functional casts (T(e)) with modern\n  casts that have a clearer intent and are safer:  static_cast<T>(e),\n  and T{e}.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8d0e2760b307c7d465b56cac639c2e4a2cc93ca8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "write_memory_as to append_memory_as as appropriate (#1394)\n\n- where write_memory also updates the pointer, change then to\n  append_memory_as(...)\n\n- change '*insn++ = <value>' to append_memory_as_byte(...) to\n  be consistent with append_memory_as(...)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c21bd122187e87b74d45a5ba3ec3e3824750f9c3", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (C casts) (#1394)\n\n- fixed increased alignment warnings in C code.  The macro\n  CAST_WITHOUT_ALIGNMENT_WARNING eliminates the warning and allows for\n  future auditing.  For the code as currently written, these are all\n  aligned properly.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0eeb1ee0407780ee07f603910d398f836dc2f7", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (pointers) (#1394)\n\n- fix alignment warnings of pointers by using alignas_cast<> defined in\n  common/h/raw_memory_access.h to eliminate the increase alignment\n  warning.  For the code as currently written, these are all aligned\n  properly, but these are inherently unsafe and require manual\n  inspection of the pointers involved.  An assert in alignas_cast can be\n  uncommented to validate proper alignment at runtime.\n\n- explicitly force larger alignment of one variable to eliminate warning", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "285ac938848739e02e38c044cf354dcb9d99f0b9", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  increased alignment cast (#1394)\n\n- Casts of pointers to a type that has a larger alignment requirement\n  will cause an exceptions on some architectures on dereference if the\n  pointer does not meet its alignment requirements.\n\n- Add new template functions read_memory_as and write_memory_as that\n  read and write the bytes of (possibly) unaligned memory of the desired\n  data at the supplied address using the length of the template type in\n  a way that is safe even if the supplied pointer is not properly\n  aligned.\n\n- Add functions append_memory_as; like write_memory_as but updates the\n  pointer value to memory location after the bytes written.\n\n- Add template function alignas_cast to cast a pointer to another\n  pointer without producing an increased alignment warning; requires\n  manual auditing to pointer is properly aligned", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4aff07d1eba822b880558c030c7f5aec94b2ae9c", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  pessimizing move (#1394)\n\n- remove unnecessary std::move's", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b88b16dba9477f18fe598fad5552758204a1558e", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  missing override (#1394)\n\n- add override to all overridden virtual methods of a class if present\n  on any method", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84fe176ef5ab61376911570de6b506473a3c8d35", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  tautological always true comparison (#1394)\n\n- value of type unsigned char compared to 256 produces a warning as 256\n  is outside the range of the uint8_t.  256 is the number of array\n  elements (computed using sizeof's).  Changed from (n < numElems) to (n\n  <= numElems - 1) which is also always true, but the error is\n  eliminated due to 255 being within range of a uint8_t.  Ugly but makes\n  the warning disappear.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6b41075d61009b539107836591cb47b8cb3e3c8", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  mismatched class/struct (#1394)\n\n- use consistent 'struct' and 'class' keyword between forward\n  declaration and definition; a mismatch is legal be breaks on\n  some versions of MS C++", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9e83871f0380068dba79648c6acee503cac5d76", "commit_date": "2023-03-09T17:02:13Z", "commit_message": "warning fix:  [[fallthrough]] requires C++ 17 (#1394)\n\n- clang's __has_cpp_attribute(fallthrough) feature test macro returns\n  true, but produces warnings if used.  [[clang::fallthough]] works, so\n  force it if the language version is pre-17 with clang compiler.\n\n- fix typo in __cplusplus macro name\n\n- improve robustness: try all alternative fallthrough attributes names", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "067be96bb64a3d4191f12db1694b0fcfec51d457", "commit_date": "2023-03-02T18:41:27Z", "commit_message": "Restore PPC special-purpose registers in opposite order of saving them (#1392)\n\n* Restore PPC special-purpose registers in opposite order of saving them\r\n\r\nThis is the same fix as https://github.com/dyninst/dyninst/pull/1000,\r\nbut for PowerPC.\r\n\r\n* Reverse order of FPSCR restore", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae43ebc6f905345499ed9c55eccb007e9a69efa9", "commit_date": "2023-03-01T23:57:55Z", "commit_message": "Aarch64: Fix restoring special purpose registers order (#1000)\n\nThe special purpose registers are pushed onto the stack by\r\nEmitterAARCH64SaveRegs::saveSPRegisters. This patch reverses the order\r\nused for popping the stored registers from the stack. Without\r\nthis patch, some of the state registers get swapped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46ea3009e1e0e27bd035ac3152dc772bf861f3fd", "commit_date": "2023-03-01T19:33:16Z", "commit_message": "Avoid possible copy in BPatch::createEnum (#1390)\n\nThe Type class doesn't have a user-defined copy constructor and its\r\nimplicit declaration is deprecated in C++20. Rearranging the construction\r\nhere removes the possibility of copying.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f89cc72416fdc1d467b130f48609b8fc93126d37", "commit_date": "2023-02-28T23:54:58Z", "commit_message": "Merge pull request #1389 from dyninst/wuxx1279/gfx908/clang-error\n\nFix ambiguous override of InstructionDecoder_amdgpu_*::makeRegisterExpression", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "557a01949a4c11e8e8975fe113e4ab07b64bf25d", "commit_date": "2023-02-27T21:25:44Z", "commit_message": "add InstructionDecoderImpl::makeRegisterExpression to derived classes\n\nEliminate virtual-overloaded warning as there are 3 overloaded methods of\nInstructionDecoderImpl::makeRegisterExpression, but only 2 are defined in\nthese classes for add a using so the 3rd is not hidden.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42c3a4b497071e421686ded49ad0da406c8053ac", "commit_date": "2023-02-27T20:06:40Z", "commit_message": "Fix virtual derived signature to match base class\n\nmakeRegisterExpression in the derived class had\nan incorrect function signature, which made\ncompilation fails on gcc-6 and clang.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d15c0f714397a1316c74fc8d2c24a62a772ecc3", "commit_date": "2023-02-27T18:39:18Z", "commit_message": "Update DwarfWalker subrange handling (#1369)\n\n* Remove redundant include of libdw.h\r\n\r\n* Add subrange parsing to dynDwarf\r\n\r\n* Remove decipherBound\r\n\r\nThis implementation was neither correct nor complete. Moreover, we\r\nshouldn't be parsing FORM types. Looking for DW_TAG* is sufficient.\r\n\r\n* Remove legacy comments and commented-out code from parseArray\r\n\r\n* Improve error message in parseArray\r\n\r\n* Rename parseSubrangeAUX to parseSubrange and change interface\r\n\r\n* Replace bound calculations in parseSubrange\r\n\r\n* Update some comments and whitespace\r\n\r\n* Update construction of the result type\r\n\r\nThe LONG_MIN/MAX aren't great, but they are propagated to preserve\r\nbehavior.\r\n\r\n* Update debugging messages in parseSubrange\r\n\r\n* Have parseSubrange() call parseSubrange(Dwarf_Die*)\r\n\r\n* Use updated parseSubrange in parseMultidimensionalArray\r\n\r\n* Use std::tostring instead of snprintf\r\n\r\n* Update comments and remove dead code\r\n\r\n* Whitespace\r\n\r\n* parseMDA returns a typeArray instead of just a Type\r\n\r\n* Fix bug in dwarf_result::operator bool\r\n\r\n* Fix hi/low bound mixup in parseMDA\r\n\r\n* Try using Dyninst's parsed CU language, if needed\r\n\r\n* Display subrange DIE ID in pareSubrange\r\n\r\n* Don't create subrange type in parseSubrange\r\n\r\nThis will happen in the callee\r\n\r\n* Update parseSubrange() to use new parseSubrange(Dwarf_DIE*)\r\n\r\n* More carefully parse the child DIE\r\n\r\n* Iteratively parse the subranges in parseArray\r\n\r\n* Whitespace\r\n\r\n* Remove parseMultiDimensionalArray\r\n\r\n* Improve debug messages\r\n\r\n* Register each subrange type in parseArray\r\n\r\n* Remove common/h/dyninstversion.h\r\n\r\nThis was accidentally included.\r\n\r\n* Add copyright notices to new files\r\n\r\n* Make dwarf_result also hold a Dwarf_Word\r\n\r\nC++ doesn't guarantee it is convertible to `long`.\r\n\r\n* Only offer an interface to parse both bounds simultaneously\r\n\r\nThe calculation for a range's upper bound when DW_AT_count is used\r\nrequires knowing the lower bound (if given), so these needed to be\r\nmerged.\r\n\r\n* Use new dwarf_subrange interface in DwarfWalker::parseSubrange", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bfa6e82c2a9ef98801432324ffb3cec2a6254c5", "commit_date": "2023-02-27T14:13:39Z", "commit_message": "use default allocator for tbb::concurrent_hash_map (#1332)\n\n- gcc 12 warns about mismatched new and delete when an allocator is specified\r\n  This is likely a false positive.  Change to use the default, which uses ends\r\n  up using the same std C++ new allocator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "198b54f56cbcdb82f058d007545bdf9f36c5dce5", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "fix infinite recursion in LineInformation::addLine (#1331)\n\n- gcc 12 reported an infinite recursion for LineInformation::addLine\n  that takes the lineSource file\n- fixed by computing the string table index of lineSource and then\n  calling the addLine method that takes the index value\n- also update the lineSource type from string to const string&\n- updated documenation that had the method signature taking a const char*", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6436c734eef50d55ed6c562aa3fabf0c7039c50c", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "eliminate deprecated C++ function objects (#1331)\n\nfix function objects that were deprecate in C++ 11 and removed in C++ 17\n\n- replace mem_fun with mem_fn\n- eliminate binary_function and unary_function base classes\n- use const iterator when constructing boost::transform_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f049fe855640832950f5a6cd87db23ecb4b7533b", "commit_date": "2023-02-24T22:27:17Z", "commit_message": "Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04 (#1362)\n\n* Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04\r\n\r\n- the main issue was `/sbin/ldconfig -p` on Ubuntu 22.04 has an extra line at the end: \"Cache generated by: ldconfig (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35\"\r\n  - this would result in an occasionaly segfault\r\n- refactored the rest to avoid strtok which is known to have a fair amount of problems\r\n\r\n* fix header includes and message about delimit issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31b4d7f19f4e6585518eee179a63812f88911e6f", "commit_date": "2023-02-24T19:36:42Z", "commit_message": "Make SymtabCodeSource constructor const correct (#1293)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc38257de4d5143d097229aef7284b8e1ce6fbf5", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "SymtabAPI::Type: add support for C++ r-value references (#1159)\n\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c677008d0fa8f4ccb6d191d37493060e15d05f22", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "Improve DWARF enum parsing in Symtab::Type (#1164)\n\n* Inherit from derivedType\r\n* Add parsing of underlying type\r\n* Improve enum parsing debug information\r\n* Add support for C++ scoped enums (i.e., 'enum class')\r\n* Remove typeEnum::setName\r\n    This has no definition.\r\n* Inline default constructor\r\n* Clean up BPatch::createEnum\r\n\r\nThis removes the unnecessary construction of a separate (thread-safe!)\r\ncontainer of pairs and the associated memory leaks. It also explicitly\r\nmakes the enum's underlying type a four-byte signed int. Redundant code\r\nfrom the overload which computes the enum values was replaced by using\r\nstd::iota and calling the three-argument createEnum.\r\n\r\n* Remove factory functions\r\n\r\nAdding overloads for these would add more clutter than utility. We\r\nshould remove these from all of the types as the constructors should\r\nalways be used to ensure class invariants.\r\n\r\n* Remove non-portable constructors\r\n\r\nSince we're breaking ABI here, these constructors need to go. Manually\r\nsetting the size to `sizeof(int)` is non-portable as the\r\nBPatch::createEnum may be used to modify a binary that doesn't have the\r\nsame `int` representation as the host on which Dyninst was compiled.\r\n\r\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3046332ba3d32eccb63f8dd6ecc65afca3b2c63f", "commit_date": "2023-02-23T22:24:02Z", "commit_message": "Update global ELF ctor/dtor instrumentation for static executables (#1355)\n\nIf __libc_csu_init doesn't exist, try to insert the constructor call into the beginning of 'main'. If __libc_csu_fini doesn't exist, try to insert the constructor call into the beginning of 'exit'.\r\n\r\n* Use C-style strings for symbol names\r\n\r\nThere's no need to have a std::string object that incurs the overhead of a constructor/destructor call to just hold a literal that's only visible in the current translation unit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "thaines/power_opcodes": [{"commit_oid": "5aef68bfbfbfc52f0f4b7f57be76fd15ca4b2bfb", "commit_date": "2023-03-04T20:22:11Z", "commit_message": "Comment out vshasigna* opcodes\n\nThese were commented out in the original branch, but somehow weren't here.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "13d81983d997056d21cb2cfa72968aa7d7558ea5", "commit_date": "2023-03-02T05:13:55Z", "commit_message": "Revised and added some new PowerPC instructions\n\nPut comment for how to implement operands in InstructionDecoder-power.C", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae43ebc6f905345499ed9c55eccb007e9a69efa9", "commit_date": "2023-03-01T23:57:55Z", "commit_message": "Aarch64: Fix restoring special purpose registers order (#1000)\n\nThe special purpose registers are pushed onto the stack by\r\nEmitterAARCH64SaveRegs::saveSPRegisters. This patch reverses the order\r\nused for popping the stored registers from the stack. Without\r\nthis patch, some of the state registers get swapped.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46ea3009e1e0e27bd035ac3152dc772bf861f3fd", "commit_date": "2023-03-01T19:33:16Z", "commit_message": "Avoid possible copy in BPatch::createEnum (#1390)\n\nThe Type class doesn't have a user-defined copy constructor and its\r\nimplicit declaration is deprecated in C++20. Rearranging the construction\r\nhere removes the possibility of copying.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f89cc72416fdc1d467b130f48609b8fc93126d37", "commit_date": "2023-02-28T23:54:58Z", "commit_message": "Merge pull request #1389 from dyninst/wuxx1279/gfx908/clang-error\n\nFix ambiguous override of InstructionDecoder_amdgpu_*::makeRegisterExpression", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "557a01949a4c11e8e8975fe113e4ab07b64bf25d", "commit_date": "2023-02-27T21:25:44Z", "commit_message": "add InstructionDecoderImpl::makeRegisterExpression to derived classes\n\nEliminate virtual-overloaded warning as there are 3 overloaded methods of\nInstructionDecoderImpl::makeRegisterExpression, but only 2 are defined in\nthese classes for add a using so the 3rd is not hidden.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42c3a4b497071e421686ded49ad0da406c8053ac", "commit_date": "2023-02-27T20:06:40Z", "commit_message": "Fix virtual derived signature to match base class\n\nmakeRegisterExpression in the derived class had\nan incorrect function signature, which made\ncompilation fails on gcc-6 and clang.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d15c0f714397a1316c74fc8d2c24a62a772ecc3", "commit_date": "2023-02-27T18:39:18Z", "commit_message": "Update DwarfWalker subrange handling (#1369)\n\n* Remove redundant include of libdw.h\r\n\r\n* Add subrange parsing to dynDwarf\r\n\r\n* Remove decipherBound\r\n\r\nThis implementation was neither correct nor complete. Moreover, we\r\nshouldn't be parsing FORM types. Looking for DW_TAG* is sufficient.\r\n\r\n* Remove legacy comments and commented-out code from parseArray\r\n\r\n* Improve error message in parseArray\r\n\r\n* Rename parseSubrangeAUX to parseSubrange and change interface\r\n\r\n* Replace bound calculations in parseSubrange\r\n\r\n* Update some comments and whitespace\r\n\r\n* Update construction of the result type\r\n\r\nThe LONG_MIN/MAX aren't great, but they are propagated to preserve\r\nbehavior.\r\n\r\n* Update debugging messages in parseSubrange\r\n\r\n* Have parseSubrange() call parseSubrange(Dwarf_Die*)\r\n\r\n* Use updated parseSubrange in parseMultidimensionalArray\r\n\r\n* Use std::tostring instead of snprintf\r\n\r\n* Update comments and remove dead code\r\n\r\n* Whitespace\r\n\r\n* parseMDA returns a typeArray instead of just a Type\r\n\r\n* Fix bug in dwarf_result::operator bool\r\n\r\n* Fix hi/low bound mixup in parseMDA\r\n\r\n* Try using Dyninst's parsed CU language, if needed\r\n\r\n* Display subrange DIE ID in pareSubrange\r\n\r\n* Don't create subrange type in parseSubrange\r\n\r\nThis will happen in the callee\r\n\r\n* Update parseSubrange() to use new parseSubrange(Dwarf_DIE*)\r\n\r\n* More carefully parse the child DIE\r\n\r\n* Iteratively parse the subranges in parseArray\r\n\r\n* Whitespace\r\n\r\n* Remove parseMultiDimensionalArray\r\n\r\n* Improve debug messages\r\n\r\n* Register each subrange type in parseArray\r\n\r\n* Remove common/h/dyninstversion.h\r\n\r\nThis was accidentally included.\r\n\r\n* Add copyright notices to new files\r\n\r\n* Make dwarf_result also hold a Dwarf_Word\r\n\r\nC++ doesn't guarantee it is convertible to `long`.\r\n\r\n* Only offer an interface to parse both bounds simultaneously\r\n\r\nThe calculation for a range's upper bound when DW_AT_count is used\r\nrequires knowing the lower bound (if given), so these needed to be\r\nmerged.\r\n\r\n* Use new dwarf_subrange interface in DwarfWalker::parseSubrange", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bfa6e82c2a9ef98801432324ffb3cec2a6254c5", "commit_date": "2023-02-27T14:13:39Z", "commit_message": "use default allocator for tbb::concurrent_hash_map (#1332)\n\n- gcc 12 warns about mismatched new and delete when an allocator is specified\r\n  This is likely a false positive.  Change to use the default, which uses ends\r\n  up using the same std C++ new allocator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "198b54f56cbcdb82f058d007545bdf9f36c5dce5", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "fix infinite recursion in LineInformation::addLine (#1331)\n\n- gcc 12 reported an infinite recursion for LineInformation::addLine\n  that takes the lineSource file\n- fixed by computing the string table index of lineSource and then\n  calling the addLine method that takes the index value\n- also update the lineSource type from string to const string&\n- updated documenation that had the method signature taking a const char*", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6436c734eef50d55ed6c562aa3fabf0c7039c50c", "commit_date": "2023-02-27T07:55:20Z", "commit_message": "eliminate deprecated C++ function objects (#1331)\n\nfix function objects that were deprecate in C++ 11 and removed in C++ 17\n\n- replace mem_fun with mem_fn\n- eliminate binary_function and unary_function base classes\n- use const iterator when constructing boost::transform_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f049fe855640832950f5a6cd87db23ecb4b7533b", "commit_date": "2023-02-24T22:27:17Z", "commit_message": "Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04 (#1362)\n\n* Fix BinaryEdit::getResolvedLibraryPath for Ubuntu 22.04\r\n\r\n- the main issue was `/sbin/ldconfig -p` on Ubuntu 22.04 has an extra line at the end: \"Cache generated by: ldconfig (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35\"\r\n  - this would result in an occasionaly segfault\r\n- refactored the rest to avoid strtok which is known to have a fair amount of problems\r\n\r\n* fix header includes and message about delimit issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31b4d7f19f4e6585518eee179a63812f88911e6f", "commit_date": "2023-02-24T19:36:42Z", "commit_message": "Make SymtabCodeSource constructor const correct (#1293)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc38257de4d5143d097229aef7284b8e1ce6fbf5", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "SymtabAPI::Type: add support for C++ r-value references (#1159)\n\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c677008d0fa8f4ccb6d191d37493060e15d05f22", "commit_date": "2023-02-24T13:43:24Z", "commit_message": "Improve DWARF enum parsing in Symtab::Type (#1164)\n\n* Inherit from derivedType\r\n* Add parsing of underlying type\r\n* Improve enum parsing debug information\r\n* Add support for C++ scoped enums (i.e., 'enum class')\r\n* Remove typeEnum::setName\r\n    This has no definition.\r\n* Inline default constructor\r\n* Clean up BPatch::createEnum\r\n\r\nThis removes the unnecessary construction of a separate (thread-safe!)\r\ncontainer of pairs and the associated memory leaks. It also explicitly\r\nmakes the enum's underlying type a four-byte signed int. Redundant code\r\nfrom the overload which computes the enum values was replaced by using\r\nstd::iota and calling the three-argument createEnum.\r\n\r\n* Remove factory functions\r\n\r\nAdding overloads for these would add more clutter than utility. We\r\nshould remove these from all of the types as the constructors should\r\nalways be used to ensure class invariants.\r\n\r\n* Remove non-portable constructors\r\n\r\nSince we're breaking ABI here, these constructors need to go. Manually\r\nsetting the size to `sizeof(int)` is non-portable as the\r\nBPatch::createEnum may be used to modify a binary that doesn't have the\r\nsame `int` representation as the host on which Dyninst was compiled.\r\n\r\nCo-authored-by: Tim Haines <thaines@cs.wisc.edu>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3046332ba3d32eccb63f8dd6ecc65afca3b2c63f", "commit_date": "2023-02-23T22:24:02Z", "commit_message": "Update global ELF ctor/dtor instrumentation for static executables (#1355)\n\nIf __libc_csu_init doesn't exist, try to insert the constructor call into the beginning of 'main'. If __libc_csu_fini doesn't exist, try to insert the constructor call into the beginning of 'exit'.\r\n\r\n* Use C-style strings for symbol names\r\n\r\nThere's no need to have a std::string object that incurs the overhead of a constructor/destructor call to just hold a literal that's only visible in the current translation unit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "thaines/remove_dwarfWalker_deallocateLocationList": [], "thaines/symtab_impl_hiding": []}