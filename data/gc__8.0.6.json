{"release-8_0": [{"commit_oid": "0039956d35008e6347f7fbe848394a1774ad49e0", "commit_date": "2023-09-09T12:48:16Z", "commit_message": "Update ChangeLog file (v8.0 changes)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "39a06aa48c4afa3c20e54ce5e68ba738dd0710d1", "commit_date": "2023-09-09T12:33:48Z", "commit_message": "Update ChangeLog file (v7.6 changes)\n(a cherry-pick of commit cbc0d5455 from 'release-7_6')", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "64b1eeb1b2a3c858f468a3bca5d1f1749a6186a8", "commit_date": "2023-09-09T12:30:48Z", "commit_message": "Update ChangeLog file (v7.2 - v7.4 changes only)\n(a cherry-pick of commit 1d2f56cfe from 'release-7_4')", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7bb76da23f826d48e08f92b150086130001fdb24", "commit_date": "2023-09-08T18:17:28Z", "commit_message": "Fix missing redirect and implementation of pthread_sigmask() on OpenBSD\n(a cherry-pick of commit 6f8349aba from 'master')\n\nPreviously user-level threads had been always used (regardless of\nGC_OPENBSD_UTHREADS macro) not needing GC_pthread_sigmask().\n\n* include/gc_config_macros.h [!(GC_DARWIN_THREADS\n|| GC_WIN32_PTHREADS || __native_client__) && !GC_NO_PTHREAD_SIGMASK]\n(GC_NO_PTHREAD_SIGMASK): Do not depend on GC_OPENBSD_THREADS.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc332fe188f464696dc2f759e7e64d54caf1e70d", "commit_date": "2023-09-08T18:14:02Z", "commit_message": "Fix missing GC_pthread_sigmask on Free/NetBSD\n(a cherry-pick of commit 3ed9b96eb from 'master')\n\nIssue #571 (bdwgc).\n\n* include/gc_pthread_redirects.h [!GC_NO_PTHREAD_SIGMASK\n&& __POSIX_VISIBLE>=199506] (GC_pthread_sigmask): Declare.\n* include/gc_pthread_redirects.h [!GC_NO_PTHREAD_SIGMASK\n&& !(GC_PTHREAD_SIGMASK_NEEDED || _BSD_SOURCE || _GNU_SOURCE\n|| _POSIX_C_SOURCE>=199506L || _XOPEN_SOURCE>=500)]\n(GC_NO_PTHREAD_SIGMASK): Do not define if __POSIX_VISIBLE>=199506.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "70063170f558d0efe3c1b553841e0f68ec52216f", "commit_date": "2023-09-08T18:12:55Z", "commit_message": "Update AUTHORS file (add Marius Gerbershagen)\n(a cherry-pick of commit 07a6d0ee8 from 'master')", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "50f730baab6686808a0b71d46dec2ab960b357c3", "commit_date": "2023-09-08T18:12:15Z", "commit_message": "Fix GC_push_stack_for() to push also Xmm registers on Windows/x64\n(a cherry-pick of commit c245cf60f from 'master')\n\nPR #566 (bdwgc).\n\nSome registers that can contain pointers given the right compiler\noptimization settings are not scanned during the marking phase,\nas observed when the client code is compiled with gcc 13.2.0 passing\n-march=native option.\n\n* win32_threads.c [X86_64\n&& !XMM_CANT_STORE_PTRS] (PUSHED_REGS_COUNT): Change from 15 to 47; add\ncomment.\n* win32_threads.c [!WOW64_THREAD_CONTEXT_WORKAROUND && !I386\n&& !XMM_CANT_STORE_PTRS] (GET_THREAD_CONTEXT_FLAGS): Add\nCONTEXT_FLOATING_POINT.\n* win32_threads.c (PUSH8_LH): Define macro.\n* win32_threads.c [X86_64 && !XMM_CANT_STORE_PTRS] (copy_ptr_regs): Use\nPUSH8_LH() to store Xmm registers.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bf2b73aa30b699f56101c1073ee6f09314078e36", "commit_date": "2023-09-08T18:09:42Z", "commit_message": "Fix 'missing binary operator before token' gcc error in gcconfig.h\n(a cherry-pick of commit 75e522cdb from 'release-8_2')\n\nThe error occurs only if gcconfig.h is included before include gc.h\n(as, e.g., done in init_global_static_roots.cpp).\n\n* include/private/gcconfig.h [!GC_H && HAVE_CONFIG_H]: Include\nconfig.h.\n* include/private/gcconfig.h [!GC_H]: Include gc.h.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44b914501f755fbcb851796c2ab450c089061e3c", "commit_date": "2023-09-08T18:08:16Z", "commit_message": "Eliminate 'unused value' gcc warnings in init_global_static_roots (Symbian)\n\n* extra/symbian/init_global_static_roots.cpp\n(GC_init_global_static_roots): Do not initialize dataStart and dataEnd\nto NULL.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "07b0551baaab8a85405383e17a14b195bf255eb6", "commit_date": "2023-09-08T18:05:30Z", "commit_message": "Fix 'implicit declaration of function sbrk' gcc error on Symbian\n(a cherry-pick of commit 3cd72c1b8 from 'release-8_2')\n\nDefining USE_MMAP macro is mandatory when compiling for Symbian\nbecause sbrk() is not provided there.\n\n* include/private/gcconfig.h [ARM32 && SYMBIAN && !USE_MMAP]\n(USE_MMAP): Define.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ec6c748906f2fa464c7462f3397db6cf06797e5f", "commit_date": "2023-09-08T17:51:59Z", "commit_message": "Fix MACH_TYPE macro redefinition on Symbian/arm\n(a cherry-pick of commit 672f2f762 from 'release-8_2')\n\n* include/private/gcconfig.h [SYMBIAN] (mach_type_known, OS_TYPE,\nALIGNMENT, DATASTART, DATAEND): Define only if ARM32.\n* include/private/gcconfig.h [SYMBIAN] (MACH_TYPE, CPP_WORDSZ): Do not\ndefine.\n* include/private/gcconfig.h [SYMBIAN] (OS_TYPE, ALIGNMENT, DATASTART,\nDATAEND): Move definition down.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5330fa67dd1e58144b2672059188bb728782f802", "commit_date": "2023-08-27T12:03:43Z", "commit_message": "Eliminate compiler warning of missing cast in LONG_MULT after shift\n(a cherry-pick of commit 96ed233e3 from 'master')\n\n* include/private/gc_pmark.h [!I386 || !__GNUC__\n|| NACL] (LONG_MULT): Add cast to unsigned32 in hprod assignment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e72a8eee7fba3885200ea8d40228a3b65df88f42", "commit_date": "2023-08-27T12:03:18Z", "commit_message": "Fix a typo in comment of GC_get_back_ptr_info\n(a cherry-pick of commits 49234ebf1, dafda5939 from 'master')\n\n* dbg_mlc.c (GC_get_back_ptr_info): Remove wrong statement in comment\nthat only 1 or 0 is returned.\n* include/gc_backptr.h (GC_get_back_ptr_info): Likewise.\n* include/gc_backptr.h (GC_ref_kind, GC_get_back_ptr_info): Fix\ntypo (\"last one\") in comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c2f265710bb8fa2c3d70f404ef40d047df699f1a", "commit_date": "2023-08-27T12:03:09Z", "commit_message": "Fix misspelled GC_HEADERS_H macro in gc_priv.h\n(a cherry-pick of commit 4864e3e2c from 'master')\n\n* include/private/gc_priv.h: Include gc_hdrs.h unconditionally (i.e.\ndo not check HEADERS_H macro which does not have GC_ prefix).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a35b4cbee0c651283bd28e32b552b0db750f0ee", "commit_date": "2023-08-27T12:02:57Z", "commit_message": "Eliminate 'make_key is defined but unused' gcc warning in threadkeytest\n(a cherry-pick of commit 90ebee8e5 from 'master')\n\n* tests/threadkey_test.c [GC_SOLARIS_THREADS] (main): Call make_key()\ninstead of pthread_key_create().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8abbb9463d3f63162435d85e376ae6429f35badc", "commit_date": "2023-08-27T12:02:48Z", "commit_message": "Fix asm constraint in LONG_MULT for gcc/x86\n\n* include/private/gc_pmark.h [I386 && __GNUC__ && !NACL] (LONG_MULT):\nChange \"g\"(y) simple constraint to \"r\"(y).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d7eafe8b5711160a0c0bc8f9e35176d633cb2e54", "commit_date": "2023-08-27T12:01:47Z", "commit_message": "Fix missing outermost parentheses in macro definitions in huge test\n(a cherry-pick of commit 9ef3305fd from 'master')\n\n* tests/huge_test.c [!GC_MAXIMUM_HEAP_SIZE] (GC_MAXIMUM_HEAP_SIZE,\nGC_INITIAL_HEAP_SIZE): Wrap the expression into parentheses.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "68ac31c3e8ed35dd72cf6a37f6689142508e1864", "commit_date": "2023-08-27T12:01:34Z", "commit_message": "Fix 'implicit declaration of iscntrl()' warning in cord/de_win (MinGW)\n(a cherry-pick of commit 8d945c79f from 'master')\n\n* cord/tests/de_win.c [__BORLANDC__ || __CYGWIN__ || __MINGW32__\n|| __NT__ || _WIN32 || WIN32]: Include ctype.h.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3ca8aad210a751695d6a3d9058baa1a33d116b68", "commit_date": "2023-08-27T12:01:24Z", "commit_message": "Fix a typo in the comment documenting CORD_set_pos\n(a cherry-pick of commit de47da1b4 from 'master')\n\n* include/cord_pos.h (CORD_set_pos): Fix a typo (\"given\") in\ncomment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3cd3ae991762b3b00125e102edf4e34ded770192", "commit_date": "2023-08-27T11:55:35Z", "commit_message": "Fix SVR4 macro definition order\n(a cherry-pick of commit d2690a7c2 from 'master')\n\nThe macro should not be used before the last place of its definition.\n\n* include/private/gcconfig.h [SOLARIS || DRSNX || UTS4] (SVR4): Move\ndefinition up (to be before GETPAGESIZE one).\n* include/private/gcconfig.h [!GETPAGESIZE && !HOST_ANDROID\n&& !HOST_TIZEN]: Check LINUX && SPARC instead of SVR4 (to retain old\nbehavior).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0c9a21aeb17628447e29d266a7729fa30b9748d", "commit_date": "2023-06-30T10:38:12Z", "commit_message": "Fix 'missing sysconf() prototype' gcc error in setjmp_t tool (OpenBSD)\n(a cherry-pick of commit cdcbf15a3 from 'master')\n\n* include/private/gcconfig.h [!GETPAGESIZE && OPENBSD]: Include\nunistd.h.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "94afcc7da23339117247f1e9dd6dfffb850dc0a2", "commit_date": "2023-06-30T10:37:41Z", "commit_message": "Fix missing type widening before left shift in GC_MAKE_PROC\n(a cherry-pick of commit a6774621b from 'master')\n\n* include/gc_mark.h (GC_MAKE_PROC): Cast env argument to GC_word.\n* typd_mlc.c (GC_make_descriptor): Remove cast of the 2nd argument of\nGC_MAKE_PROC() call.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c281e2ab8dd47a0fe8841f695d1828a89dc2238d", "commit_date": "2023-06-30T10:36:36Z", "commit_message": "Fix a typo in comment of SPARC-specific SIG_SUSPEND definition\n\n* include/private/gc_priv.h [(GC_LINUX_THREADS || GC_DGUX386_THREADS)\n&& !GC_USESIGRT_SIGNALS && SPARC && !SIGPWR] (SIG_SUSPEND): Fix a typo\n(\"Linux/SPARC\") in comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a532571f59e85f37a54488ec626f110dd499d7b3", "commit_date": "2023-06-30T10:34:43Z", "commit_message": "Fix missing outermost parentheses in CORD_pos_cur_char_addr\n(a cherry-pick of commit 165dc9eca from 'release-8_2')\n\n* include/cord_pos.h (CORD_pos_cur_char_addr): Add outermost\nparentheses.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "908e710503f950ad47a46a288c6195b9127987cb", "commit_date": "2023-06-30T10:32:58Z", "commit_message": "Fix a typo in comment of do_command() prototype of cord/de\n\n* cord/tests/de_win.h (do_command): Fix typo (\"argument\") in comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb18ab7cc59d0cfe7c3ad084e6250d9e5f24f77b", "commit_date": "2023-06-30T10:32:11Z", "commit_message": "Fix 'g++ not found' error on OpenBSD (Makefile.direct)\n(a cherry-pick of commit d94f073c3 from 'release-8_2')\n\n* Makefile.direct (CXX): Use c++ instead of g++.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c3965d2a7241f1db09356863866aaf7c8f1ef8f6", "commit_date": "2023-06-30T10:30:38Z", "commit_message": "Fix bitwise negation and rounding direction in setjmp_t tool\n\n* tools/setjmp_t.c (main): Cast ps-1 to unsigned long type before \"~\"\noperation; do not add ps to sp if stack grows up (i.e. round sp down).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "de736cc84ee0a1f84c531e77d7f480012049d8ee", "commit_date": "2023-05-26T06:14:03Z", "commit_message": "Travis CI: Remove checks by ancient cppcheck", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8412d6568e1acd3ef4cebbeb81864b3a74d188d8", "commit_date": "2023-05-26T05:29:48Z", "commit_message": "[8.0.10]\n\nBump gc version to 8.0.10\n\n* ChangeLog (8.0.10): Set release date.\n* Makefile.am (LIBGC_VER_INFO): Increment revision (change version info\nof libgc.so to 5:6:4).\n* README.md: Bump micro version.\n* configure.ac (AC_INIT): Likewise.\n* include/gc_version.h (GC_TMP_VERSION_MICRO): Likewise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "551adaa75ba88fd6f16973e22fb0b3c3061f76fc", "commit_date": "2023-05-26T05:14:29Z", "commit_message": "Update ChangeLog file (v8.0 changes)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "376e57790714a4fc0428ed6476230d35132f9604", "commit_date": "2023-05-26T05:06:54Z", "commit_message": "Update ChangeLog file (set v7.6.18 release date)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a2227b53b2dcca17b1a35b616267da73ef10766c", "commit_date": "2023-05-26T05:05:52Z", "commit_message": "Update ChangeLog file (v7.6 changes)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e0126480a76f93deda58fed3d58df4a66855f07", "commit_date": "2023-05-26T05:05:24Z", "commit_message": "Update ChangeLog file (set v7.4.24 release date)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dea52ff422bbc27b7b197791c4d9ad65eda389e0", "commit_date": "2023-05-26T05:05:12Z", "commit_message": "Update ChangeLog file (set v7.2q release date)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f149091eb86ff67daae03bf519941a861d356d4f", "commit_date": "2023-05-26T05:04:58Z", "commit_message": "Update ChangeLog file (v7.2 - v7.4 changes only)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4dd3808ad67753b35e784fc52a6675ab9f16c650", "commit_date": "2023-05-25T12:11:53Z", "commit_message": "Eliminate '&array may not produce intended result' wcc warnings\n\nThe fix is to replace &array to &array[0].\n\n* include/private/gc_priv.h (beginGC_obj_kinds): Replace &GC_obj_kinds\nto &GC_obj_kinds[0].\n* include/private/gc_priv.h [SEPARATE_GLOBALS] (beginGC_objfreelist):\nReplace &GC_objfreelist to &GC_objfreelist[0].\n* include/private/gc_priv.h [SEPARATE_GLOBALS] (beginGC_aobjfreelist):\nReplace &GC_aobjfreelist to &GC_aobjfreelist[0].\n* mach_dep.c [!HAVE_PUSH_REGS && !EMSCRIPTEN\n&& !HAVE_BUILTIN_UNWIND_INIT && (!NO_CRT || !MSWIN32)]\n(GC_with_callee_saves_pushed): Replace &regs to &regs[0].", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0cc830512fac600022592ca61df6835bf3cf8d95", "commit_date": "2023-05-25T12:11:22Z", "commit_message": "Workaround CSA null pointer dereference FP in invalidate_map of cord/de\n\n* cord/tests/de.c (invalidate_map): Call exit() if current_map is null\n(in the loop); add comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "879157186755c68022422a4b867ca8c3ef48635b", "commit_date": "2023-05-25T12:10:33Z", "commit_message": "Remove redundant 'ifdef THREADS' around LOCK/UNLOCK in call_with_alloc_lock\n(a cherry-pick of commit 3656826e8 from 'master')\n\n* misc.c (GC_call_with_alloc_lock): Do not check THREADS for\nLOCK/UNLOCK.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "499effe6b362dcea65af7a9b60a7c4dd196a0636", "commit_date": "2023-05-20T10:05:40Z", "commit_message": "Fix alt-stack handling in GC_push_all_stacks if stack grows up\n(a cherry-pick of commit 9229da044 from 'master')\n\n* pthread_stop_world.c [STACK_GROWS_UP] (GC_push_all_stacks): Set hi\nto p->altstack (instead of p->altstack+p->altstack_size) if\nlo is inside altstack; remove relevant FIXME item.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "642ff3bb90292899d3b0595688ec2c55bb0f432d", "commit_date": "2023-05-20T10:05:39Z", "commit_message": "Fix overlapping region assertion in mark_some if malloc redirect on Linux\n(a cherry-pick of commit 4d88582ca from 'release-8_2')\n\n* alloc.c [SET_REAL_HEAP_BOUNDS && INCLUDE_LINUX_THREAD_DESCR]\n(GC_add_to_heap): If endp is greater than GC_greatest_real_heap_addr\nthen add [p,endp) region to the data roots exclusions; add comment.\n* include/private/gc_priv.h [INCLUDE_LINUX_THREAD_DESCR]\n(SET_REAL_HEAP_BOUNDS, GC_least_real_heap_addr,\nGC_greatest_real_heap_addr): Define.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "97c029bd32c91aa514a2faf808d7a2f2a6ecbcd6", "commit_date": "2023-05-20T10:05:39Z", "commit_message": "Fix comparisons to heap boundary in GC_get_back_ptr_info and GC_mark_from\n(a cherry-pick of commit 7b2043146 from 'release-8_2')\n\nThe region delimited by GC_least_plausible_heap_addr and\nGC_greatest_plausible_heap_addr might contain part of static data\nroots or stacks (in addition to potential heap expansion areas).\nCertain comparisons in GC_get_back_ptr_info (when ALIGNMENT is 1) and\nin GC_mark_from (in assertions) expect the real heap boundaries.\n\n* alloc.c [SET_REAL_HEAP_BOUNDS] (GC_add_to_heap): Update\nGC_least_real_heap_addr and GC_greatest_real_heap_addr variables.\n* dbg_mlc.c [KEEP_BACK_PTRS && ALIGNMENT == 1] (GC_get_back_ptr_info):\nCompare alternate_target and target to GC_least_real_heap_addr\nand GC_greatest_real_heap_addr (instead of GC_least_plausible_heap_addr\nand GC_greatest_plausible_heap_addr).\n* include/gc_mark.h (GC_greatest_plausible_heap_addr): Refine\ncomment.\n* include/private/gc_priv.h [GC_ASSERTIONS || KEEP_BACK_PTRS\n&& ALIGNMENT == 1] (SET_REAL_HEAP_BOUNDS): Define macro.\n* include/private/gc_priv.h [GC_ASSERTIONS || KEEP_BACK_PTRS\n&& ALIGNMENT == 1] (GC_least_real_heap_addr,\nGC_greatest_real_heap_addr): Define (as macro).\n* include/private/gc_priv.h [GC_ASSERTIONS || KEEP_BACK_PTRS\n&& ALIGNMENT == 1] (_GC_arrays._least_real_heap_addr,\n_GC_arrays._greatest_real_heap_addr): New field; add comment.\n* mark.c (GC_mark_from): Use GC_greatest_real_heap_addr and\nGC_least_real_heap_addr instead of GC_least_plausible_heap_addr and\nGC_greatest_plausible_heap_addr, respectively, in assertions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1815b381160dd337e5fbe85b52d6b3c2f57d4bfe", "commit_date": "2023-05-20T09:46:36Z", "commit_message": "Fix GC_excl_table overrun on overflow in GC_exclude_static_roots\n\nPreviously, in case of full GC_excl_table[], an attempt to insert an\nelement to it caused write past end of GC_excl_table (when shifting the\ntail elements) before aborting cause of the table overflow.\n\n* mark_rts.c (GC_exclude_static_roots_inner): Move check of\nGC_excl_table_entries upper to be before first access to GC_excl_table;\nmove i local variable down to be near place of usage; cast result of\nnext-GC_excl_table to size_t.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "11fd3513cbb69644c4a003b1f55fb54d4bd4e3ca", "commit_date": "2023-05-20T08:40:15Z", "commit_message": "Fix GC_unregister_my_thread call before GC functions usage in gctest\n(a cherry-pick of commit 67624f2e9 from 'release-8_2')\n\n* tests/test.c [THREADS] (check_heap_stats): Do not call\nGC_unregister_my_thread().\n* tests/test.c [GC_WIN32_THREADS && !GC_PTHREADS] (main): Call\nGC_unregister_my_thread() just before return.\n* tests/test.c [GC_PTHREADS && !PTW32_STATIC_LIB] (main): Likewise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "225d858378fee1c136d2bfd15db855a549a5fedc", "commit_date": "2023-05-20T08:37:42Z", "commit_message": "Adjust CORD_ec comment placement in ec.h\n(a cherry-pick of commit 15f0510eb from 'master')\n\n* include/ec.h (CORD_ec): Move comment to be before the declaration;\nreplace \"...\" to \"..\" in comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "05fdf4dfcfdd043ea013c27d87f8cab1178aa944", "commit_date": "2023-05-20T08:37:14Z", "commit_message": "Fix old name (typo) of gc_priv.h\n\n* blacklst.c: Fix old file name in comment (\"gc_priv.h\").\n* include/private/gcconfig.h: Likewise.\n* tools/setjmp_t.c (main): Fix old file name in message (\"gc_priv.h\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "369c6e9c64c0245d6f1c032ef11e786a08eb0977", "commit_date": "2023-04-29T07:52:28Z", "commit_message": "Update ChangeLog file (v8.0 changes)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae17014f2aa6b8e41092a3e465de7b3b6c4e11ef", "commit_date": "2023-04-29T07:43:48Z", "commit_message": "Update ChangeLog file (v7.2 - v7.4 changes only)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "65fc80eb222346c5516211d520e21332d74311b2", "commit_date": "2023-04-28T18:23:11Z", "commit_message": "Fix missing extern C for __asan_default_options\n(fix of commit 84b695d01)\n\nIssue #206 (bdwgc).\n\n* os_dep.c [ADDRESS_SANITIZER && (UNIX_LIKE || NEED_FIND_LIMIT\n|| MPROTECT_VDB) && !CUSTOM_ASAN_DEF_OPTIONS] (__asan_default_options):\nAdd the declaration wrapped into EXTERN_C_BEGIN.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0de4e1bdbc7fc5ca2f78864607e06a41b48bd466", "commit_date": "2023-04-28T18:17:43Z", "commit_message": "Fix infinite loop in disable_gc_for_dlopen and GC_wait_for_gc_completion\n(a cherry-pick of commit 2dff48cb3 from 'release-8_2')\n\nIssue #257 (bdwgc).\n\n* alloc.c (GC_collect_a_little_inner): Call GC_mark_some() (in a loop)\neven if GC_dont_gc.\n* alloc.c (GC_collect_a_little, GC_allocobj): Do not call\nGC_collect_a_little_inner() if GC_dont_gc.\n* tests/test.c (check_heap_stats): Do not call GC_collect_a_little()\n(repeatedly) if GC_is_disabled().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "74f06fe0606c300b9e61267f77118ea6817b520d", "commit_date": "2023-04-28T17:10:55Z", "commit_message": "Ensure 'new' system header is included by gc_cpp.h if GC_INCLUDE_NEW\n(a cherry-pick of commit d1bc109ec from 'master')\n\n* include/gc_cpp.h [GC_INCLUDE_NEW]: Include <new> right after\ninclude gc.h (regardless of GC_NEW_ABORTS_ON_OOM and\n_LIBCPP_NO_EXCEPTIONS).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "308ae952064b11a688af3945b4d6b2e41524e27b", "commit_date": "2023-04-28T17:06:33Z", "commit_message": "Fix description of client promise for IGNORE_OFF_PAGE allocated objects\n(a cherry-pick of commit d1aa5274a from 'release-8_2')\n\nThe client should keep a pointer within the first heap block for such\nan allocated object.  Previously, it was mentioned in the documentation\nand comments that such a pointer should be within the first 256 or 512\nbytes.\n\n* README.md (The C Interface to the Allocator): Fix the description\n(comment) of GC_malloc_ignore_off_page (the client promises to keep\na pointer within the first hblk of the object instead of 256 or 512\nbytes, or a page).\n* doc/gcinterface.md (GC_MALLOC_IGNORE_OFF_PAGE): Likewise.\n* doc/gc.man (GC_malloc_atomic_ignore_off_page): Likewise.\n* include/gc.h (GC_malloc_ignore_off_page): Likewise.\n* include/gc_mark.h (GC_generic_malloc_ignore_off_page): Likewise.\n* include/private/gc_priv.h (IGNORE_OFF_PAGE): Likewise.\n* include/private/gc_priv.h [DBG_HDRS_ALL || GC_GCJ_SUPPORT\n|| !GC_NO_FINALIZATION] (GC_generic_malloc_inner_ignore_off_page):\nLikewise.\n* malloc.c [DBG_HDRS_ALL || GC_GCJ_SUPPORT || !GC_NO_FINALIZATION]\n(GC_generic_malloc_inner_ignore_off_page): Likewise.\n* include/gc_gcj.h (GC_gcj_malloc_ignore_off_page): Refine comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7891261fa1ddc443b2d2971ad1e5653e8a2ffd34", "commit_date": "2023-04-28T16:49:55Z", "commit_message": "Invoke GC_oom_fn if GC_make_array_descriptor failed because of no memory\n(a cherry-pick of commit 223ce4fdf from 'master')\n\n* typd_mlc.c (GC_calloc_explicitly_typed): If descr_type is NO_MEM then\nreturn the result of GC_get_oom_fn()(lb) instead of NULL.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c1d1915271e51bb1d725e3d1191c14e0181b1a57", "commit_date": "2023-04-28T16:49:14Z", "commit_message": "Do not prohibit zero proc argument in GC_register_disclaim_proc\n(a cherry-pick of commit d4c4a7ba5 from 'master')\n\n* fnlz_mlc.c [ENABLE_DISCLAIM] (GC_register_disclaim_proc): Do not\ncheck that proc is non-zero.\n* include/gc_disclaim.h (GC_register_disclaim_proc): Remove\nGC_ATTR_NONNULL(2) attribute.\n* reclaim.c [ENABLE_DISCLAIM] (GC_disclaim_and_reclaim): Add assertion\nthat disclaim is non-zero.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c6c618cc6512cbe4449acae4417a785c67da4ac", "commit_date": "2023-04-28T16:48:44Z", "commit_message": "Fix null pointer dereference in TRACE_TARGET\n\n* include/private/gc_pmark.h [ENABLE_TRACE] (TRACE_TARGET): Do not\ndereference GC_trace_addr if it is not a pointer to a heap object.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ab9c128262ddfbd267d300168ad86f11fc8c13cd", "commit_date": "2023-04-28T16:46:53Z", "commit_message": "Increment allocated objects count after GC_GCJ_MALLOC() in gctest\n(a cherry-pick of commit 4d83569d5 from 'master')\n\n* tests/test.c [GC_GCJ_SUPPORT] (gcj_cons): Increment\ncollectable_count.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c181e8f9fdb108f8e3085fb1e584a9c47b702286", "commit_date": "2023-04-28T16:45:45Z", "commit_message": "Fix of GC_bytes_allocd increment in GC_generic_malloc_inner\n\nEXTRA_BYTES should be always counted when updating GC_bytes_allocd.\n\n* malloc.c (GC_generic_malloc_inner): Define lb_adjusted local\nvariable and set it to ADD_SLOP(lb); increment GC_bytes_allocd by\nlb_adjusted instead of lb (in case of a non-small object).\n* malloc.c [DBG_HDRS_ALL || GC_GCJ_SUPPORT || !GC_NO_FINALIZATION]\n(GC_generic_malloc_inner_ignore_off_page): Change type of lb_adjusted\nlocal variable from word to size_t.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "de3a4d4856bc57d5ec2af2c19e8964c339811313", "commit_date": "2023-04-28T16:43:40Z", "commit_message": "Fix old function name in comment of GC_finalized_disclaim\n(fix of commit 6c1a92445)\n\n* fnlz_mlc.c [ENABLE_DISCLAIM] (GC_finalized_disclaim): Fix old\nfunction name in comment (\"GC_disclaim_and_reclaim\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "06104c58ea1e145d04a7f386c5d6ca20c4a91449", "commit_date": "2023-04-28T16:43:17Z", "commit_message": "Remove misleading comment in GC_obj_kinds for AUNCOLLECTABLE kind\n\n* mark.c [GC_ATOMIC_UNCOLLECTABLE] (GC_obj_kinds): Remove misleading\ncomment (\"add length to descr\") for FALSE value (for ok_relocate_descr\nfield).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9b8cdbd25ce63b7a9367f6e20f3c5c418e85e61d", "commit_date": "2023-04-28T16:42:42Z", "commit_message": "Fix a typo in comment of GC_generic_malloc_inner\n\n* malloc.c (GC_generic_malloc_inner): Fix a typo\n(\"to directly allocate\") in comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f458451b746591561cffc70bd02777c6d9a05cfd", "commit_date": "2023-04-28T16:42:23Z", "commit_message": "Fix mistyped GC_register_finalizer[_unreachable] in comments\n(a cherry-pick of commit a04c55a5b from 'master')\n\n* dbg_mlc.c (store_old): Fix name in comment (\"GC_register_finalizer\").\n* include/gc.h (GC_java_finalization): Fix name in comment\n(\"GC_register_finalizer_unreachable\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fbf715c53879620d907458f124cd6b490bb6ed2f", "commit_date": "2023-04-28T16:41:57Z", "commit_message": "Fix CORD_next() indent inside loops in test_basics() of cordtest\n\n* cord/tests/cordtest.c (test_basics): Adjust indentation of\nCORD_next() call inside while loop.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d7ccaa3cc9100db22a7028175625d2e0e23a79ee", "commit_date": "2023-04-28T16:40:54Z", "commit_message": ".gitignore: Add 'configure~' file", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a756273964b26acd76ed79df31fbe225b6bbd0c", "commit_date": "2023-03-15T17:27:18Z", "commit_message": "Update ChangeLog file (v8.0 changes)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4af1efdd5d6435eaa457b5d1ec960a561be8ed3b", "commit_date": "2023-03-15T17:16:33Z", "commit_message": "Update ChangeLog file (v7.2 - v7.4 changes only)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "af53391d76a9dfada5c21826f0772c430f218179", "commit_date": "2023-03-15T04:30:26Z", "commit_message": "Do not pass GC_malloc result to GC_size w/o checking in gctest\n(a cherry-pick of commit 923a30202 from 'master')\n\n* tests/test.c (run_one_test): Do not call GC_malloc(0) inside\nGC_printf argument.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8dcf9976524972308c27d7f12a302df5c2aa111", "commit_date": "2023-03-14T08:46:51Z", "commit_message": "Fix GC_thread_is_registered for finished threads\n(a cherry-pick of commit 5a8c02852 from 'master')\n\nA finished thread may still stay in GC_threads, but it is no longer\nconsidered during a garbage collection phase, thus\nGC_thread_is_registered() should return false in such a case.\n\n* include/gc.h [GC_THREADS] (GC_thread_is_registered): Refine\ncomment (describe the case when the thread is marked as finished).\n* pthread_support.c (GC_thread_is_registered): Return FALSE if\nme->flags&FINISHED.\n* win32_threads.c (GC_thread_is_registered): Return FALSE if\nKNOWN_FINISHED(me).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d2b01b2d0758bc0d29855431e1aab28a42198c1b", "commit_date": "2023-03-14T08:40:23Z", "commit_message": "Do not mix debug and non-debug allocations in disclaim tests\n(a cherry-pick of commit 30d32b4e9 from 'master')\n\n* include/gc_disclaim.h (GC_finalized_malloc): Add comment that the\ndebugging version of the function is missing.\n* tests/disclaim_bench.c (testobj_new): Use GC_malloc() instead of\nGC_NEW().\n* tests/disclaim_weakmap_test.c (weakmap_add, weakmap_new): Likewise.\n* tests/disclaim_bench.c (testobj_new): Use\nGC_register_finalizer_no_order() instead of\nGC_REGISTER_FINALIZER_NO_ORDER().\n* tests/disclaim_bench.c (main): Use GC_malloc() instead of\nGC_MALLOC().\n* tests/weakmap.c (weakmap_add, weakmap_new): Use\nGC_ptr_store_and_dirty() instead of GC_PTR_STORE_AND_DIRTY().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1d22f1697cfd6279e6a987b339b7810b9d1180b8", "commit_date": "2023-03-14T08:39:15Z", "commit_message": "Fix a typo in comment of GC_start_rtn_prepare_thread\n(a cherry-pick of commit 1a8160ea8 from 'master')\n\n* pthread_support.c (GC_start_rtn_prepare_thread): Fix a typo in\ncomment (\"used in\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "142596984109344ed880cf550dec0524eb1df6a6", "commit_date": "2023-03-14T08:39:04Z", "commit_message": "Ensure GC_NO_PTHREAD_SIGMASK defined if no GC_pthread_sigmask prototype\n(a cherry-pick of commit 272e61e46 from 'master')\n\n* include/gc_pthread_redirects.h [!GC_PTHREAD_REDIRECTS_ONLY\n&& !GC_NO_PTHREAD_SIGMASK && !(GC_PTHREAD_SIGMASK_NEEDED || _BSD_SOURCE\n|| _GNU_SOURCE || _POSIX_C_SOURCE>=199506L || _XOPEN_SOURCE>=500)]\n(GC_NO_PTHREAD_SIGMASK): Define macro.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b8b3712bce2fbb20dae0d85fed0fd045195b2066", "commit_date": "2023-03-14T08:38:16Z", "commit_message": "Fix potential SIGSEGV on out-of-memory in gctest\n(a cherry-pick of commit 051f57762 from 'master')\n\n* tests/test.c (test_generic_malloc_or_special): Call\nCHECK_OUT_OF_MEMORY() before GC_get_kind_and_size().\n* tests/test.c [DBG_HDRS_ALL] (run_one_test): Set y to fail_proc1\nright before its use; call CHECK_OUT_OF_MEMORY() before each GC_size()\ninvocation; call CHECK_OUT_OF_MEMORY() before GC_base().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "116f52abdefd4f58f3fd06209a5cddd1a33d57b5", "commit_date": "2023-03-14T08:36:52Z", "commit_message": "Fix joinable threads shutdown on NaCl\n(a cherry-pick of commit a6cd81cbd from 'master')\n\nGC_nacl_shutdown_gc_thread() should be called (and value of\nGC_nacl_gc_thread_self should be cleared) on thread termination even\nfor non-detached threads.  Thus, GC_nacl_initialize_gc_thread() should\nbe called (and value of GC_nacl_gc_thread_self should be set)\nadditionally if the thread is registered from its destructor.\n\n* pthread_support.c [NACL] (GC_delete_thread): Do not call\nGC_nacl_shutdown_gc_thread() and do not clear GC_nacl_gc_thread_self.\n* pthread_support.c [NACL] (GC_unregister_my_thread_inner): Call\nGC_nacl_shutdown_gc_thread() and clear value of GC_nacl_gc_thread_self\n(after GC_destroy_thread_local).\n* pthread_support.c [NACL] (GC_register_my_thread): If KNOWN_FINISHED\nthen set GC_nacl_gc_thread_self to me and call\nGC_nacl_initialize_gc_thread().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0519265b7aac7e57a012611b7f7a80eb2bfd1e55", "commit_date": "2023-03-14T08:36:41Z", "commit_message": "Fix unregistering of thread created by intercepted pthread_create on NaCl\n(a cherry-pick of commit ee779ffc5 from 'master')\n\n* pthread_start.c [GC_PTHREADS && !GC_WIN32_THREADS && NACL]\n(GC_pthread_start_inner): Call GC_thread_exit_proc(me) before return.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4923759b9446aa2da22a19720b3904ca688295b1", "commit_date": "2023-03-14T08:36:14Z", "commit_message": "Update AUTHORS file (add Amaury Sechet)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "499020404c24e08f27704ad81b63c4b7b966ed39", "commit_date": "2023-03-14T08:36:03Z", "commit_message": "Fix one more typo in scale.md\n\n* docs/scale.md (The Parallel Marking Algorithm): Fix a typo\n(\"our approach\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a9d165b2b634f28f9c02e33ae1745049da2945d6", "commit_date": "2023-03-14T08:35:50Z", "commit_message": "Fix typo in 'STATIC' word in ChangeLog\n\n* ChangeLog (7.0alpha9): Fix a typo (\"STATIC\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8cfc56d85340836a33eeee3fb1b70476c0c81f10", "commit_date": "2023-03-14T08:35:43Z", "commit_message": "Fix a typo in GC_register_data_segments comment (MacOS)\n\n* os_dep.c [!OS2 && !MSWIN32 && !MSWINCE && !CYGWIN32 && !AMIGA\n&& !OPENBSD && !PCR && MACOS && !THINK_C && __MWERKS__ && !__POWERPC__\n&& __option(far_data)] (GC_register_data_segments): Fix typo in\ncomment (\"the\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "696f7970c0557c0a16169fc85841bd3829a69b4b", "commit_date": "2023-03-14T08:35:30Z", "commit_message": "Fix store-and-dirty call in GC_CONS\n(a cherry-pick of commit f6befb64d from 'master')\n\nGC_PTR_STORE_AND_DIRTY() might be expanded to a debugging version of\nthe store-and-dirty function, thus the former should not be used for\npointers returned from the non-debugging version of a GC allocation\nroutine like GC_FAST_MALLOC_GRANS().\n\n* include/gc_inline.h: Add comment that the debugging version of\nthis API is missing.\n* include/gc_inline.h (GC_CONS): Use GC_ptr_store_and_dirty()\ninstead of GC_PTR_STORE_AND_DIRTY().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71ff4a4193a58e2a1f8f3a71ab5001e7f5aff458", "commit_date": "2023-03-14T08:35:04Z", "commit_message": "Fix DCL_LOCK_STATE placement in GC_set_oom_fn\n(fix of commit c7047ca9e)\n\n* misc.c (GC_set_oom_fn): Move GC_ASSERT() to be after DCL_LOCK_STATE.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1265600857868e4eba211df63bd3a431fcd6b6d4", "commit_date": "2023-03-14T08:34:51Z", "commit_message": "Fix typos in comments and documentation (regarding 'it is')\n(a cherry-pick of commit 25aa62fee from 'master')\n\n* ChangeLog (4.3): Fix typo (\"it's\").\n* doc/platforms/README.amiga (GC_AMIGA_GC): Likewise.\n* extra/AmigaOS.c (GC_amiga_allocwrapper_any): Fix typo in comment\n(\"it's\").\n* malloc.c (GC_free): Likewise.\n* new_hblk.c (GC_build_fl): Likewise.\n* os_dep.c [DATASTART_USES_BSDGETDATASTART] (GC_FreeBSDGetDataStart):\nLikewise.\n* reclaim.c (GC_start_reclaim): Likewise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7303c92c088627fde4669337df0b5d1031d031be", "commit_date": "2023-03-14T08:34:34Z", "commit_message": "Fix mistyped GC_free_inner in comment of GC_remove_all_threads_but_me\n(a cherry-pick of commit 05b220b98 from 'master')\n\n* pthread_support.c [CAN_HANDLE_FORK && (GC_DARWIN_THREADS\n|| THREAD_LOCAL_ALLOC && !USE_CUSTOM_SPECIFIC)]\n(GC_remove_all_threads_but_me): Rename GC_free_internal to\nGC_free_inner in comments.\n* win32_threads.c [CAN_HANDLE_FORK && THREAD_LOCAL_ALLOC\n&& !USE_CUSTOM_SPECIFIC] (GC_remove_all_threads_but_me): Likewise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "305eee5831eaef93617c3afc2714b196c4f30b04", "commit_date": "2023-03-14T08:32:11Z", "commit_message": "Fix typo in GC_allochblk_nth name\n(a cherry-pick of commit c716d77bd from 'release-8_2')\n\n* ChangeLog: Fix typo (\"GC_allochblk_nth\").\n* include/private/gc_priv.h (GC_alloc_large): Fix typo in comment\n(\"GC_allochblk_nth\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "057c9072adb4aa6212a01260b4f601e99f40dff4", "commit_date": "2023-03-14T08:29:23Z", "commit_message": "Eliminate 'cast signed to bigger unsigned' CSA warning in GC_new_thread\n(a cherry-pick of commit 99a571390 from 'master')\n\n* pthread_support.c [CPPCHECK && THREAD_SANITIZER] (GC_new_thread):\nCast result->dummy[0] to unsigned char.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ed4a18a706101727896fd4e2d071b2c19b85c07e", "commit_date": "2022-11-16T11:36:16Z", "commit_message": "Update ChangeLog file (v8.0 changes)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac6fb9221283f69ba78ba9e4e0280259d6a5b011", "commit_date": "2022-11-16T11:18:16Z", "commit_message": "Update ChangeLog file (v7.6 changes)\n(a cherry-pick of commit 4fe277030 from 'release-7_6')", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "229b9edfa22fefd7542a7b189b9727912abea14a", "commit_date": "2022-11-16T11:17:22Z", "commit_message": "Update ChangeLog file (v7.2 - v7.4 changes only)\n(a cherry-pick of commit ec801e0ef from 'release-7_4')", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "08f69721168fa61ad14c5a1cf658128306b32254", "commit_date": "2022-11-14T19:33:54Z", "commit_message": "Fix mistyped function name in documentation of REDIRECT_REALLOC\n\n* doc/README.macros (REDIRECT_REALLOC): Fix typo (\"realloc\" w/o GC_\nprefix).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cfd7456be495732cca7e1fd1f9c58cd2cbcad4fd", "commit_date": "2022-11-14T19:30:44Z", "commit_message": "Fix data race in GC_heapsize_at_forced_unmap variable\n(a cherry-pick of commit 856760844 from 'release-8_2')\n\nIssue #488 (bdwgc).\n\nWrite to GC_heapsize_at_forced_unmap should be only performed when\nholding the allocation lock.\n\n* alloc.c (GC_heapsize_at_forced_unmap): Move the definition upper to\nbe before GC_try_to_collect_general(); add comment.\n* alloc.c (GC_try_to_collect_general): Set GC_heapsize_at_forced_unmap\nvalue (after LOCK) if force_unmap; move comment from\nGC_heapsize_at_forced_unmap().\n* alloc.c (GC_try_to_collect_general): Remove GC_ATTR_UNUSED for\nforce_unmap.\n* alloc.c (GC_gcollect_and_unmap): Do not set\nGC_heapsize_at_forced_unmap.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e3b3bbb465833ff88d3d43c96b80e68f2982b8d3", "commit_date": "2022-11-14T19:22:36Z", "commit_message": "Eliminate 'cast signed to bigger unsigned' CSA warning in WARN calls\n(a cherry-pick of commit 99536f178 from 'release-8_2')\n\n* pthread_support.c (GC_thr_init): Cast WARN argument to signed_word.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "60183e2f34402a75d7a4a30ed7a0f71ae4b6c347", "commit_date": "2022-11-14T19:17:53Z", "commit_message": "Fix use of unset errno after pthread_sigmask calls\n(a cherry-pick of commit e55d1b99b from 'release-8_2')\n\n* pthread_support.c [PARALLEL_MARK]\n(GC_start_mark_threads_inner): Do not pass errno value to WARN() calls\n(because pthread_create and pthread_sigmask do not set errno).\n* win32_threads.c [PARALLEL_MARK && GC_PTHREADS_PARAMARK\n&& !NO_MARKER_SPECIAL_SIGMASK] (GC_start_mark_threads_inner): Likewise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "800b29ecc448b4b589dc9fdf38699080c48a10d1", "commit_date": "2022-11-14T19:07:38Z", "commit_message": "Fix missing libalphagc.so dependency in Makefile.direct\n(a cherry-pick of commit 397e06470 from 'master')\n\n* Makefile.direct (OBJS): Add comment.\n* Makefile.direct (libalphagc.so): Add dependency on dyn_load.o.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "50e4e7b3ca1737be718dc9a620eeb1e2d360d7d5", "commit_date": "2022-11-14T19:01:35Z", "commit_message": "Fix double initialization of main thread local free lists on Win32\n(a cherry-pick of commit 4b101ee06 from 'release-8_2')\n\n* win32_threads.c [THREAD_LOCAL_ALLOC] (GC_register_my_thread_inner):\nUpdate comment; do not call GC_init_thread_local().\n* win32_threads.c [THREAD_LOCAL_ALLOC] (GC_register_my_thread): Call\nGC_init_thread_local() both after GC_register_my_thread_inner() and\nGC_record_stack_base() calls (in case of return GC_SUCCESS).\n* win32_threads.c [GC_PTHREADS && THREAD_LOCAL_ALLOC]\n(GC_pthread_start_inner): Call GC_init_thread_local().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3607a595f433d6dd4aead7520de6b13b1124688c", "commit_date": "2022-11-14T18:58:28Z", "commit_message": "Fix disabling of automatic dynamic libraries registration\n(a cherry-pick of commit 0d19067c3 from 'master')\n\nNow, if GC_no_dls then GC_is_visible does not cause registration of\ndynamic libraries.\n\n* ptr_chck.c [!THREADS && (DYNAMIC_LOADING || MSWIN32 || MSWINCE\n|| CYGWIN32 || PCR)] (GC_is_visible): Do not call\nGC_register_dynamic_libraries() followed by GC_is_static_root()\nif GC_no_dls.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d02a747fb16779a92093fbda260fed201f0fd72", "commit_date": "2022-11-14T18:52:21Z", "commit_message": "Abort with appropriate message if first call of mmap fails with EPERM\n(fix of commit 1c62b365b)\n\nThis is observed on Linux, at least.\n\n* os_dep.c [!OS2 && !PCR && !AMIGA && !USE_WINALLOC && !MACOS\n&& !DOS4GW && !NINTENDO_SWITCH && !NONSTOP && !SN_TARGET_ORBIS\n&& !SN_TARGET_PS3 && !SN_TARGET_PSP2 && !RTEMS && !__CC_ARM\n&& MMAP_SUPPORTED && !MSWIN_XBOX1] (GC_unix_mmap_get_mem): Call ABORT()\nif allocation failed and GC_pages_executable and last_addr==HEAP_START\nand errno is EPERM.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "18b384c5c3548f8a960c2382c645aed55ab98874", "commit_date": "2022-11-14T18:50:43Z", "commit_message": "Fix missing result check of pthread_attr_getdetachstate in pthread_create\n\n* pthread_support.c (pthread_create): Call ABORT() if\npthread_attr_getdetachstate() has failed.\n* win32_threads.c [GC_PTHREADS] (GC_pthread_create): Likewise.\n* win32_threads.c [GC_PTHREADS] (start_info.detached): Change type from\nGC_bool to int (to match the type of the 2nd argument of\npthread_attr_getdetachstate).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ccecdaf04411b65f5badbeaae36f50c9c216d37b", "commit_date": "2022-11-14T18:49:31Z", "commit_message": "Fix missing lock while updating GC_in_thread_creation in GC_exit_check\n(fix of commit 8e6460052)\n\n* misc.c [!DONT_USE_ATEXIT && THREADS] (GC_exit_check): Wrap each\nupdate of GC_in_thread_creation into LOCK/UNLOCK (but not GC_gcollect\ncall); add comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6d38614d7130c736442a2a7c6a9fcf69480592f8", "commit_date": "2022-11-14T18:49:13Z", "commit_message": "Fix typo in comment of GC_Thread_Rep.dummy\n(fix of commit 8e058bbfe)\n\n* include/private/pthread_support.h (GC_Thread_Rep.dummy): Fix a typo\n(\"stop_info\") in comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2d6c7cd42d08216ba8dc113e0b00daad959a9f3d", "commit_date": "2022-11-14T18:49:04Z", "commit_message": "Fix typo in comment belonging to dll_thread_table\n\n* win32_threads.c (dll_thread_table): Fix a typo (\"use\") in comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9918685abb2f7688ffd74da9c030ef83b7bc8767", "commit_date": "2022-11-14T18:48:22Z", "commit_message": "Fix missing GC_CALLBACK for GC_waitForSingleObjectInfinite\n(fix of commit 6713d8473)\n\n* win32_threads.c [GC_WINMAIN_REDIRECT]\n(GC_waitForSingleObjectInfinite): Add GC_CALLBACK.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ada29bd3cad032ddb1452e41be024c8f45b968ab", "commit_date": "2022-11-14T18:47:12Z", "commit_message": "Fix a typo in comment of dyn_load.c (shortened USE_PROC_FOR_LIBRARIES)\n\n* dyn_load.c [SOLARISDL || !LINUX]: Rename USE_PROC to\nUSE_PROC_FOR_LIBRARIES in comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b407cd4df751b6fcbbc1a83d253f531aae75e7d9", "commit_date": "2022-11-14T18:46:50Z", "commit_message": "Fix loop condition over dll_thread_table in GC_lookup_pthread (Win32)\n(fix of commit 2fe9e9d55)\n\nBreak the loop (over dll_thread_table elements) in GC_lookup_pthread\nwhen pthread_id matches id (provided the element is in use).\n\n* win32_threads.c [GC_PTHREADS && !GC_NO_THREADS_DISCOVERY]\n(GC_lookup_pthread): Inverse THREAD_EQUAL() condition in for statement.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ba84885cc3278969f3641f3ac1a292bacdf94f7", "commit_date": "2022-11-14T18:46:15Z", "commit_message": "Avoid potential race between realloc and GC_block_was_dirty\n(a cherry-pick of commit ed5281444 from 'master')\n\nGC_realloc might be changing the block size while GC_block_was_dirty\nis examining it.  The change to the size field is benign, in that\nGC_block_was_dirty would work correctly with either value, since we\nare not changing the number of objects in the block.  But seeing\na half-updated value (though unlikely to occur in practice) could be\nprobably bad.  Using unordered atomic accesses on the size field\nshould solve the issue.\n\n* mark.c [!GC_DISABLE_INCREMENTAL && AO_HAVE_load]\n(GC_block_was_dirty): Use AO_load() to get hhdr->hb_sz value; add\ncomment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5348f232f82d9004178133ea2bb3eae8499e9c3d", "commit_date": "2022-11-14T18:43:51Z", "commit_message": "Remove redundant GC_ATTR_UNUSED for GC_mark_and_push\n(fix of commit 8d64dbd10)\n\n* mark.c (GC_mark_and_push): Remove unneeded GC_ATTR_UNUSED for src\nargument.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5b8473b47ec7882a30086c614cd1ff3c3902126e", "commit_date": "2022-11-14T18:41:56Z", "commit_message": "Fix 'overflow in conversion from word' g++ warning in GC_init\n\n* include/private/gcconfig.h [POINTER_SHIFT && !POINTER_MASK]\n(POINTER_MASK): Covert -1 to word type thru signed_word.\n* misc.c [ALIGNMENT>GC_DS_TAGS] (GC_init): Change (word)-ALIGNMENT to\n(~(word)ALIGNMENT)+1.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "64346c42ff42a70943bd7038abfcfa5d97b4e7f8", "commit_date": "2022-11-14T18:40:29Z", "commit_message": "Fix IRIX5 defined wrongly on WinCE/mips\n(a cherry-pick of commit 6238b81c9 from 'master')\n\n* include/private/gcconfig.h [(mips || __mips || _mips) && !__TANDEM\n&& !LINUX && !EWS4800 && !NETBSD && !OPENBSD && !FREEBSD] (IRIX5): Do\nnot define if _WIN32_WCE or __CEGCC__ or __MINGW32CE__.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0ffaac5b73abcf3fe09b4eca9c7b0cb0261ff3b5", "commit_date": "2022-11-14T18:38:55Z", "commit_message": "Fix IRIX5 defined wrongly on Tandem S-Series\n(a cherry-pick of commit 8d2e82bcf from 'master')\n\n* include/private/gcconfig.h [mips || __mips || _mips] (MIPS): Do not\nredefine if __TANDEM.\n* include/private/gcconfig.h [(mips || __mips || _mips) && !LINUX\n&& !EWS4800 && !NETBSD && !OPENBSD] (IRIX5): Do not define if __TANDEM.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "74ed0ea003ddb3cd12052aae331e25bb46b8a07b", "commit_date": "2022-11-14T18:38:42Z", "commit_message": "Update AUTHORS file", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "011214a28792dabf1a31690bdcdf72e7464d7a14", "commit_date": "2022-11-14T18:33:15Z", "commit_message": "Fix IRIX5 defined wrongly on FreeBSD/mips\n(a cherry-pick of commit f1a855f08 from 'master')\n\nIssue #471 (bdwgc).\n\n* include/private/gcconfig.h [(mips || __mips || _mips) && !LINUX\n&& !EWS4800 && !NETBSD] (IRIX5): Do not define if FREEBSD.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d310b0d5737a87d8fa5ad3afb9cfc0af8fc7d86e", "commit_date": "2022-08-26T12:48:18Z", "commit_message": "[8.0.8]\n\nBump gc version to 8.0.8\n\n* ChangeLog (8.0.8): Set release date.\n* Makefile.am (LIBGC_VER_INFO): Increment revision (change version info\nof libgc.so to 5:5:4).\n* README.md: Bump micro version.\n* configure.ac (AC_INIT): Likewise.\n* cord/cord.am (LIBCORD_VER_INFO): Increment revision (change version\ninfo of libcord.so to 5:1:4).\n* include/gc_version.h (GC_TMP_VERSION_MICRO): Likewise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc2b9b514adc255a67a539595a1caeeccb9ed7ca", "commit_date": "2022-08-26T12:36:35Z", "commit_message": "Update ChangeLog file (v8.0 changes)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb46015b5223c7e6ccce46dd6731caa9a1ca18cc", "commit_date": "2022-08-25T22:37:05Z", "commit_message": "Update ChangeLog file (set v7.6.16 release date)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59b66daa57d1dfd461e06bcbe238b4a5fe11361e", "commit_date": "2022-08-25T22:35:45Z", "commit_message": "Update ChangeLog file (set v7.4.22 release date)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f7a43330ecd7ad435f1ea2381cfd5defb1c9b478", "commit_date": "2022-08-25T22:35:33Z", "commit_message": "Update ChangeLog file (set v7.2p release date)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e644db78b74fa1b30ce5e3c92061b2fb4bdb275e", "commit_date": "2022-08-25T22:35:28Z", "commit_message": "Update ChangeLog file (v7.2 - v7.4 changes only)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d67b0659196bad9411060c15a38523b0f0099b80", "commit_date": "2022-08-06T21:38:00Z", "commit_message": "Remove duplicate check of MSWIN_XBOX1 in os_dep.c\n(fix of commit ad3409469)\n\nIssue #173 (bdwgc).\n\n* os_dep.c [!MSWIN_XBOX1 && !MSWINCE && USE_WINALLOC]: Do not check\nwhether MSWIN_XBOX1 is defined.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f95d88adc0c8deaa701070306040b564df01a3ce", "commit_date": "2022-08-06T21:34:52Z", "commit_message": "Fix hb_obj_kind type in documentation (ASCII diagram) describing hblkhdr\n(a cherry-pick of commit 061625106 from 'release-8_2')\n\n* doc/tree.md (A picture): Change type of hb_obj_kind (of hblkhdr)\nfrom ushort to uchar; add hb_flags field right after hb_obj_kind.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9b160d7c7d1a59ec728c13e2bee55ec82c89ccab", "commit_date": "2022-08-05T17:24:31Z", "commit_message": "Update AUTHORS file (add Davide Beatrici)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5803e80d8e85003ec463705bf6bcb28b6493a12d", "commit_date": "2022-08-05T17:23:50Z", "commit_message": "Fix 'undefined reference to __data_start' linker error on Linux/aarch64\n\n* include/private/gcconfig.h [AARCH64 && LINUX && !HOST_ANDROID]\n(__data_start): Add weak attribute.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "06ca751ff90f3607da27f03cc6e5207a9b817ebc", "commit_date": "2022-08-05T17:22:33Z", "commit_message": "Eliminate 'extension used' clang warning in sparc_mach_dep.S (configure)\n(a cherry-pick of commit 56d79d8c4 from 'master')\n\nA number of .S (asm) files to be compiled when targeting sparc.\nOption -Wno-language-extension-token should be passed to clang to\nsuppress a warning about passing asm files to the compiler.\n\n* configure.ac (compile_asm): New variable.\n* configure.ac [$host==sparc-*] (compile_asm): Set to true.\n* configure.ac [$compile_asm==true && $GCC==yes]\n(ac_cv_lang_ext_token): Set to yes if compiler supports -Werror and\n-Wno-language-extension-token options.\n* configure.ac [$compile_asm==true && $ac_cv_lang_ext_token==yes\n&& $GCC==yes] (CFLAGS): Append -Wno-language-extension-token.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "62aa1ab5238880f45d2da32b98189994a393084d", "commit_date": "2022-08-05T17:21:34Z", "commit_message": "Fix assertion about built-in AO_test_and_set_acquire on sparc64 (gcc-12)\n(fix of commit 46a241130)\n\nIssue #464 (bdwgc).\n\nAccording to the GCC manual, __atomic_test_and_set() result type is\nBool, thus it is not guaranteed to return AO_TS_SET value.  (E.g., the\nfunction may return 1 while AO_TS_SET is 255, as observed on sparc64\nwith gcc-12.)\n\n* include/private/gc_atomic_ops.h [GC_BUILTIN_ATOMIC]\n(AO_test_and_set_acquire): Return AO_TS_SET if __atomic_test_and_set()\nreturns true, AO_TS_CLEAR otherwise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "96c09ef22a525eef279eb3f75a77bd5d1c58d472", "commit_date": "2022-07-27T17:13:34Z", "commit_message": "Define SUNOS5SIGS macro for kFreeBSD\n(a cherry-pick of commit 84e77b6b1 from 'master')\n\nIssue #184 (bdwgc).\n\n* include/private/gcconfig.h [MPROTECT_VDB && (__GLIBC__<2\n|| __GLIBC__==2 && __GLIBC_MINOR__<2)]: Move error directive from\nos_dep.c.\n*  include/private/gcconfig.h [FREEBSD && __GLIBC__] (SUNOS5SIGS):\nDefine.\n* os_dep.c [MPROTECT_VDB && !DARWIN && FREEBSD] (GC_dirty_init): Do not\ncheck __GLIBC__.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "66cb7fc2a8cb1f3b45e4bcbd9bf6e71354380b94", "commit_date": "2022-07-27T17:11:05Z", "commit_message": "Revert \"Remove nested always-false ifdef for HPUX and FREEBSD\"\n\nThis reverts commit 2a420e272d9f036130fbf95a359fb4140ff11da3.\n\nThe reason: SUNOS5SIGS is defined for HP/UX and some flavors of\nFreeBSD.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8c9294f516d6d2f2950c39c53c4911728b9ed73", "commit_date": "2022-07-27T17:09:58Z", "commit_message": "Fix SUNOS5SIGS documentation to match macro definition in gcconfig.h\n\n* doc/README.macros (SUNOS5SIGS): Update documentation (mention\nFreeBSD to match that in gcconfig.h).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "047ac087908d308a09c9548855081b52fe3fb0df", "commit_date": "2022-06-17T17:36:05Z", "commit_message": "Update ChangeLog file (v8.0 changes)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "64407dabae5371476e14f5fb48a8346e255ff4e5", "commit_date": "2022-06-17T08:19:27Z", "commit_message": "Update ChangeLog file (v7.6 changes)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bd7c8c377a1e1f4e12dee4b490318f2057c7ccdd", "commit_date": "2022-06-17T08:19:15Z", "commit_message": "Update ChangeLog file (v7.2 - v7.4 changes only)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "229b97975b0ad4974766b56e4572577965ad2ab5", "commit_date": "2022-06-16T07:00:12Z", "commit_message": "Fix 'undefined reference to GC_start_mark_threads' error in middletest\n(fix of commits d95745914, 3c5959ad5)\n\n* tests/middle.c (GC_THREADS): Do not define.\n* tests/middle.c (main): Do not call GC_start_mark_threads().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3c5959ad5f064b6def3b2a1a3a4363a9d6934f1d", "commit_date": "2022-06-16T06:28:06Z", "commit_message": "Fix 'implicit declaration of GC_start_mark_threads' error in middle.c\n(fix of commit d95745914)\n\n* tests/middle.c [!GC_THREADS] (GC_THREADS): Define (before include\ngc.h).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "21b1f094f2b96a03fd0a89998072a73116210c59", "commit_date": "2022-06-16T06:04:10Z", "commit_message": "Ensure typed objects descriptor is never located in the first word\n(a cherry-pick of commit daa06b3ac from 'master')\n\nFree objects are linked in the collector through the first word in the\nobject.  This commit prevents placing type descriptor to the first\nword of the allocated object by ensuring that the size of typed objects\n(requested by a client) is non-zero.\n\nAlso, guarantee no nelements*size overflow in GC_make_array_descriptor.\n\n* typd_mlc.c (GC_make_array_descriptor): Add comment that no overflow\nguaranteed by caller.\n* typd_mlc.c (GC_malloc_explicitly_typed,\nGC_malloc_explicitly_typed_ignore_off_page): If lb is zero, then assume\nlb is 1 (byte).\n* typd_mlc.c (GC_calloc_explicitly_typed): If lb or n is zero, then\nassume that lb*n is 1; check that lb*n does not overflow before\nGC_make_array_descriptor() call.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b89885a921169401d53166e9008318f08781c067", "commit_date": "2022-06-16T06:03:16Z", "commit_message": "Fix race between calloc_explicitly_typed and push_complex_descriptor\n(a cherry-pick of commits 4e020ef3c, 8fcba0985, b75f1aa68 from 'master')\n\nIssue #449 (bdwgc).\n\nUse atomic store release operation to write a simple descriptor to\nobject in GC_malloc_explicitly_typed[_ignore_off_page] to ensure the\ndescriptor is seen by GC_typed_mark_proc (even if the object might\nbe constructed incompletely by client yet).\n\nHold the allocation lock while writing a complex descriptor to the\nobject (in GC_calloc_explicitly_typed) to ensure that the descriptor\nis seen by GC_array_mark_proc as expected.\n\n* typd_mlc.c (set_obj_descr): Define macro (using AO_store_release\nif available).\n* typd_mlc.c (GC_malloc_explicitly_typed,\nGC_malloc_explicitly_typed_ignore_off_page): Use set_complex_descr()\ninstead of direct write to *op.\n* typd_mlc.c (GC_calloc_explicitly_typed): Remove volatile for lp\nlocal variable; add comment; wrap writing to op[lw-1] into LOCK/UNLOCK.\n\nCo-authored-by: Hans Boehm <boehm@acm.org>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d95745914dd36a5c12d0e105aea27dadebdf98ff", "commit_date": "2022-06-16T05:50:28Z", "commit_message": "Prevent (fix) parallel custom mark procs run in single-threaded clients\n(a cherry-pick of commit b8ee3ca62 from 'release-8_2')\n\nIf the collector is built with parallel marker support then marking\nis performed in parallel on multi-core targets.  Thus, if the client\nprovides custom mark procedures, then they could be executed in\nparallel.  In case of a single-threaded client (developed for the\nolder libgc version with the parallel mark support off), its custom\nmark procedures might not be prepared to be launched in parallel.\n\nNow, the parallel mark threads are not launched, even if available,\nuntil the client starts a (user) thread (e.g. calls pthread_create or\nGC_allow_register_threads) or tells the collector explicitly to start\nthe mark threads (by calling GC_start_mark_threads).\n\n* doc/README.macros (GC_ALWAYS_MULTITHREADED): Update documentation.\n* doc/scale.md (Options for enhanced scalability): Likewise.\n* include/gc.h [GC_THREADS] (GC_parallel,\nGC_allow_register_threads): Update comment.\n* include/gc.h (GC_start_mark_threads): Likewise.\n* include/gc_mark.h (GC_mark_proc): Likewise.\n* include/gc_mark.h (GC_PROC_BYTES, GC_ms_entry): Move upper to be\nbefore the comment belonging to GC_mark_proc.\n* misc.c [THREADS && PARALLEL_MARK] (GC_init): Do not call\nGC_start_mark_threads_inner().\n* misc.c [PARALLEL_MARK] (GC_start_mark_threads): Call\nGC_start_mark_threads_inner() even if THREAD_SANITIZER or\nno CAN_HANDLE_FORK.\n* misc.c [THREADS] (GC_get_parallel): Remove comment.\n* pthread_support.c [PARALLEL_MARK && !CAN_HANDLE_FORK]\n(available_markers_m1): Define as a variable.\n* win32_threads.c [PARALLEL_MARK && !CAN_HANDLE_FORK]\n(available_markers_m1): Likewise.\n* pthread_support.c [PARALLEL_MARK && !CAN_HANDLE_FORK]\n(GC_wait_for_gc_completion): Declare.\n* pthread_support.c [PARALLEL_MARK && !CAN_HANDLE_FORK]\n(GC_start_mark_threads_inner): If GC_parallel then return; call\nGC_wait_for_gc_completion(); set GC_markers_m1 value from\navailable_markers_m1.\n* win32_threads.c [PARALLEL_MARK && (!GC_PTHREADS_PARAMARK\n|| !CAN_HANDLE_FORK)] (GC_start_mark_threads_inner): Likewise.\n* pthread_support.c [CAN_HANDLE_FORK && PARALLEL_MARK\n&& THREAD_SANITIZER] (fork_child_proc): Set available_markers_m1 to 0.\n* pthread_support.c [CAN_HANDLE_FORK]: Move\nGC_remove_all_threads_but_me() call to be after setting\navailable_markers_m1.\n* pthread_support.c (GC_allow_register_threads): Call\nGC_start_mark_threads().\n* tests/middle.c (main): Likewise.\n* win32_threads.c (GC_allow_register_threads): Likewise.\n* pthread_support.c [PARALLEL_MARK] (pthread_create): Call\nGC_start_mark_threads() unless GC_parallel or available_markers_m1<=0.\n* win32_threads.c (START_MARK_THREADS): Define macro (to call\nGC_start_mark_threads() if PARALLEL_MARK).\n* win32_threads.c (GC_CreateThread): Call START_MARK_THREADS() (right\nbefore set_need_to_lock).\n* win32_threads.c [!CYGWIN32 && !MSWINCE && !MSWIN_XBOX1 && !NO_CRT]\n(GC_beginthreadex): Likewise.\n* win32_threads.c [GC_PTHREADS] (GC_pthread_create): Likewise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85a2dc684d4ed57c5bd4da395349af1a42ee45a1", "commit_date": "2022-06-15T20:09:00Z", "commit_message": "Workaround TSan FP about race between generic_malloc and array_mark_proc\n\n* typd_mlc.c (get_complex_descr): New static function (defined with\nGC_ATTR_NO_SANITIZE_THREAD attribute).\n* typd_mlc.c (GC_array_mark_proc): Use get_complex_descr() instead of\ndirect access of addr[nwords-1].", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "19521231db2c1ade07f5b2edcd5854d5641a7e8d", "commit_date": "2022-06-15T20:08:32Z", "commit_message": "Fix typo in GC_malloc_explicitly_typed comment\n(fix of commit 59372942a)\n\n* typd_mlc.c (GC_malloc_explicitly_typed): Fix typo (remove duplicate\n\"the\") in comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3cd73ef53d08db81f839174d1bb362aed5ce3090", "commit_date": "2022-06-15T20:08:19Z", "commit_message": "Fix GC_dirty() argument in GC_malloc_explicitly_typed_ignore_off_page\n(fix of commit 73d30d2b4)\n\n* typd_mlc.c (GC_malloc_explicitly_typed_ignore_off_page): Cast op\nlocal variable to word* in the argument of GC_dirty() call.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6e19c94ea63c67fdc0faf4dbbc0f58a6d7f6eb38", "commit_date": "2022-06-15T20:07:03Z", "commit_message": "Fix propagation of out-of-memory occurred in GC_make_sequence_descriptor\n(a cherry-pick of commit c3cccd945 from 'master')\n\n* typd_mlc.c (GC_make_array_descriptor): If *complex_d (set to the\nresult of GC_make_sequence_descriptor()) is null then return NO_MEM.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5641149f1e788e27c4d8e2f9ef52a7f133cf058e", "commit_date": "2022-06-15T20:06:50Z", "commit_message": "Fix GC_make_descriptor for zero length argument\n\n* typd_mlc.c (GC_make_descriptor): Cast len variable to signed_word.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38feda2aa3bb21b930eb476f493432d97ab8da60", "commit_date": "2022-06-15T20:06:33Z", "commit_message": "Fix abort in Win32 DllMain if PARALLEL_MARK\n(a cherry-pick of commit 0c56f4381 from 'master')\n\nAlso, enable GC_use_threads_discovery() on Windows even in case\nof PARALLEL_MARK.\n\n* tests/test.c [GC_WIN32_THREADS && !GC_PTHREADS && GC_DLL\n&& !GC_NO_THREADS_DISCOVERY && !MSWINCE && !THREAD_LOCAL_ALLOC]\n(WinMain): Call GC_use_threads_discovery() regardless of PARALLEL_MARK.\n* win32_threads.c [!GC_PTHREADS && !GC_NO_THREADS_DISCOVERY\n&& PARALLEL_MARK] (GC_DllMain): Do not abort if DLL_PROCESS_ATTACH or\nDLL_THREAD_ATTACH (call GC_register_my_thread_inner instead).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0221ae05378ccf49d4c0401410fda64727e2f67d", "commit_date": "2022-06-15T20:06:08Z", "commit_message": "Do not assert that GC is initialized at DLL_THREAD_DETACH (Win32)\n(fix of commits 3d7e4a8c6, 1175c7e62)\n\nThis is to match DLL_THREAD_ATTACH case if parallel_initialized is false.\n\n* win32_threads.c [!GC_NO_THREADS_DISCOVERY && !GC_PTHREADS]\n(GC_DllMain): Remove assertion that parallel_initialized is set (i.e.\nfor the case when GC_win32_dll_threads is set).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "446bd7fd83fbd68a387258d18b27e38c2c0e9fd7", "commit_date": "2022-06-15T20:04:01Z", "commit_message": "Fix comment in GC_init regarding GC_init_parallel call\n\n* misc.c [PARALLEL_MARK || THREAD_LOCAL_ALLOC\n|| GC_ALWAYS_MULTITHREADED && GC_WIN32_THREADS\n&& !GC_NO_THREADS_DISCOVERY] (GC_init): Fix comment describing\nGC_init_parallel() call.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e9fbc31cee12e172979063cd38bab678592ce81c", "commit_date": "2022-06-15T20:02:33Z", "commit_message": "Eliminate 'implicit decl of _setjmp' gcc warning if -std=c11 on Cygwin\n(a cherry-pick of commit d85d90c82 from 'release-8_2')\n\n* include/private/gc_priv.h [__CYGWIN__ && !_GNU_SOURCE] (_GNU_SOURCE):\nDefine macro (even if USE_MMAP).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e3d603ae3239987603f80c043ed4fad4052a38fc", "commit_date": "2022-06-15T19:59:43Z", "commit_message": "Avoid potential race in GC_init_real_syms after GC_allow_register_threads\n(fix of commit ab93e03de)\n\nPerform \"real\" symbols initialization not only in GC pthread_create()\nbut also when the client informs the GC that some threads might be\nregistered manually - otherwise there could be a risk of a data race\nin GC_init_real_syms as INIT_REAL_SYMS() might be called from several\nthreads.\n\n* pthread_support.c (GC_allow_register_threads): Call INIT_REAL_SYMS().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8ae76cbdd6531389b9236dcf961cf7f6012cb4ad", "commit_date": "2022-06-15T19:59:07Z", "commit_message": "Fix assertion violation in GC_allow_register_threads on Windows\n(fix of commit ab93e03de)\n\n* pthread_support.c [GC_ASSERTIONS] (GC_allow_register_threads): Wrap\nGC_lookup_thread() call into LOCK/UNLOCK.\n* win32_threads.c [GC_ASSERTIONS] (GC_allow_register_threads): Wrap\nGC_lookup_thread_inner() call into LOCK/UNLOCK.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "05fd056b24fd85c910a56c68da09ebae531ef07d", "commit_date": "2022-06-15T19:58:28Z", "commit_message": "Eliminate 'possible loss of data' compiler warning in GC_envfile_getenv\n(fix of commit 176d5bda1)\n\n* misc.c [GC_READ_ENV_FILE] (GC_envfile_getenv): Change type of namelen\nfrom unsigned to size_t.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a6dfe829d8aa55bede0b793b7c270203a06f6db", "commit_date": "2022-06-15T19:58:01Z", "commit_message": "Remove useless TSan W/A about read of mark_lock_holder for Windows\n(fix of commit 0fbe44656)\n\nTSan itself is not supported on Windows (native and Cygwin) yet.\n\n* win32_threads.c [PARALLEL_MARK && (!GC_PTHREADS_PARAMARK\n|| NUMERIC_THREAD_ID_UNIQUE)] (GC_acquire_mark_lock): Assertion about\nGC_mark_lock_holder regardless of THREAD_SANITIZER.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c5fb8828c247373200c80d33771bfa3c5956b8ed", "commit_date": "2022-06-15T19:50:43Z", "commit_message": "Prevent changing of GC_markers_m1 value while collection in progress\n\nGC_markers_m1 (GC_parallel) value affects some logic in the garbage\ncollector, e.g. GC_clear_fl_marks, so it would be safer to wait for any\nongoing collection before proceeding with marker threads creation (in\nthe child).\n\n* pthread_support.c [PARALLEL_MARK && CAN_HANDLE_FORK]\n(GC_wait_for_gc_completion): Declare (before\nGC_start_mark_threads_inner).\n* pthread_support.c [PARALLEL_MARK] (GC_start_mark_threads_inner): Add\nassertion that cancellation is disabled.\n* win32_threads.c [PARALLEL_MARK] (GC_start_mark_threads_inner):\nLikewise.\n* pthread_support.c [PARALLEL_MARK && CAN_HANDLE_FORK]\n(GC_start_mark_threads_inner): Call GC_wait_for_gc_completion(TRUE)\nbefore initialization of mark_cv.\n* win32_threads.c [PARALLEL_MARK && GC_PTHREADS_PARAMARK\n&& CAN_HANDLE_FORK] (GC_start_mark_threads_inner): Likewise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cbb38ea627b43703a81b38f1ef5f5b262cbba53b", "commit_date": "2022-06-15T19:49:55Z", "commit_message": "Fix potential race if start_mark_threads called from threads in child\n(a cherry-pick of commit a8b96ed76 from 'master')\n\nThere should be no race in setting GC_markers_m1 value even in case of\na client calls GC_start_mark_threads() from multiple threads in a child\nprocess.\n\n* include/gc.h (GC_start_mark_threads): Add comment that the\nallocation lock is acquired internally.\n* mark.c [PARALLEL_MARK] (GC_wait_for_markers_init): Add assertion\nthat I_HOLD_LOCK.\n* pthread_support.c [PARALLEL_MARK] (GC_start_mark_threads_inner):\nChange assertion from I_DONT_HOLD_LOCK to I_HOLD_LOCK.\n* pthread_support.c [PARALLEL_MARK] (GC_start_mark_threads_inner):\nLikewise.\n* win32_threads.c [PARALLEL_MARK] (GC_start_mark_threads_inner):\nLikewise.\n* misc.c [PARALLEL_MARK && GC_ASSERTIONS && GC_ALWAYS_MULTITHREADED]\n(GC_init): Remove UNLOCK/LOCK around GC_start_mark_threads_inner call.\n* misc.c [THREADS && PARALLEL_MARK && CAN_HANDLE_FORK\n&& !THREAD_SANITIZER] (GC_start_mark_threads): Wrap\nGC_start_mark_threads_inner() call into LOCK/UNLOCK.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "00123b44effb4a3a882f3d6d5acabc0239e18287", "commit_date": "2022-06-15T19:47:55Z", "commit_message": "Make finalizer_closure pointer read/write atomic in malloc and callback\n\n* fnlz_mlc.c [AO_HAVE_load] (GC_finalized_disclaim): Use AO_load() to\nread the 1st word of obj.\n* fnlz_mlc.c (GC_finalized_malloc): Change type of op local variable\nfrom word* to void*.\n* fnlz_mlc.c [AO_HAVE_store] (GC_finalized_malloc): Use AO_store() to\nwrite the 1st word of obj.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "03b3c27a89f68c97bbd90e089f73185ffc85b316", "commit_date": "2022-06-15T19:46:34Z", "commit_message": "Update documentation of GC_RATE and MAX_PRIOR_ATTEMPTS\n(fix of commit f0d18c373)\n\n* alloc.c (GC_deficit): Move definition to be before GC_RATE.\n* alloc.c (GC_deficit): Reformat comment.\n* alloc.c (MAX_PRIOR_ATTEMPTS): Move definition to be after\nGC_get_rate().\n* alloc.c (GC_rate): Move comment from GC_RATE; refine comment.\n* alloc.c (max_prior_attempts): Move comment from MAX_PRIOR_ATTEMPTS.\n* alloc.c (GC_RATE, MAX_PRIOR_ATTEMPTS): Add comment that it is the\ncorresponding default value.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ce4d60f8fd7bf7fa812a1d1e478539500d96511", "commit_date": "2022-06-15T19:41:21Z", "commit_message": "Fix incremental mode enabling in gctest if TEST_MANUAL_VDB\n(a cherry-pick of commit 53f1a64f1 from 'release-8_2')\n\nPreviously, if DEFAULT_VDB was defined in gcconfig.h, then\nTEST_MANUAL_VDB had no effect on gctest, practically.\n\n* tests/test.c [(!PCR && !GC_WIN32_THREADS || GC_PTHREADS)\n&& TEST_MANUAL_VDB && DEFAULT_VDB && !GC_DISABLE_INCREMENTAL\n&& !MAKE_BACK_GRAPH && !NO_INCREMENTAL && !REDIRECT_MALLOC\n&& !USE_PROC_FOR_LIBRARIES] (main): Call GC_enable_incremental().\n* tests/test.c [(!PCR && !GC_WIN32_THREADS || GC_PTHREADS)\n&& TEST_MANUAL_VDB && !GC_DISABLE_INCREMENTAL] (main): Call\nGC_is_incremental_mode() and GC_printf().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c16a8d2c2fb97ff666a2c7b161066e774861a993", "commit_date": "2022-06-15T19:35:14Z", "commit_message": "Update AUTHORS file\n(a cherry-pick of commit 040d27b25 from 'release-8_2')", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b8b219a932ef8955e07d0b841dc0791077dbb67f", "commit_date": "2022-06-15T19:34:09Z", "commit_message": "Replace SSH cloning with HTTPS one in README\n\nIssue #444 (bdwgc).\n\nThe unauthenticated git protocol on port 9418 is no longer supported\nby Github.\n\n* README.md (Installation and Portability): Clone repositories using\nhttps protocol instead of ssh (git) one.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e0f633c7f4696340c80c5113d15cc4cc33843f13", "commit_date": "2022-06-15T19:33:58Z", "commit_message": "Fix typo in comment belonging to GC_need_full_gc\n\n* alloc.c (GC_need_full_gc): Fix typo in comment (\"due to\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7be51a281036922b190a7c78dbd4c13e21c34568", "commit_date": "2022-06-15T19:31:15Z", "commit_message": "Support 'z' format modifier by CORD_vsprintf\n(a cherry-pick of commits c9d1146a4, 8c232eb7a from 'release-8_2')\n\nIssue #439 (bdwgc).\n\n* cord/cordprnt.c (extract_conv_spec): If current=='z' then\nset *long_arg to 2; update comment.\n* cord/cordprnt.c (CORD_vsprintf): If long_arg==2 then pass size_t to\nva_arg() (cast result of ec_len(result) to unsigned type first).\n* cord/tests/cordtest.c (zu_format): New global variable.\n* cord/tests/cordtest.c (test_printf): Declare res local variable; set\nres to result of sprintf(\"%zu\"); if res==1 then test various %z format\nspecifiers passed to CORD_sprintf(); add comment; print a message\nif res!=1.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9b96062a37c5c95c7e98f4fe40e0a9860deb8d6", "commit_date": "2022-04-25T08:03:51Z", "commit_message": "Update ChangeLog file (v8.0 changes)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e76efdb8463281dcd3e6610d28b285cb28aa03f9", "commit_date": "2022-04-25T07:43:37Z", "commit_message": "Update ChangeLog file (v7.6 changes)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "519225e38f157bf5fde41002ede413a37c4f6141", "commit_date": "2022-04-25T07:43:32Z", "commit_message": "Update ChangeLog file (v7.2 - v7.4 changes only)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "932299177ed1d45817160c27fb68d4e2aa3d6f5e", "commit_date": "2022-04-25T05:53:53Z", "commit_message": "Fix 'implicit declaration of function raise_signal' in GC_resume_thread\n(fix of commit 386aa6ba7)\n\n* pthread_stop_world.c [!NACL && !GC_OPENBSD_UTHREADS\n&& GC_ENABLE_SUSPEND_THREAD] (GC_resume_thread): Use RAISE_SIGNAL()\ninstead of raise_signal().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "386aa6ba7c6c855289da1e264488be5ff392f272", "commit_date": "2022-04-24T15:51:26Z", "commit_message": "Fix hang in select() called from suspend signal handler if TSan\n(a cherry-pick of commit 94eb5251f from 'release-8_2')\n\nIssue #236 (bdwgc).\n\nPreviously select() was used to sleep in the suspend signal handler\nwhile the thread is manually suspended.  This is changed to use\nsigsuspend() instead.  (But select() is still used for a reason when\nthe thread is self-suspended.)\n\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_handler_inner): Remove\ncalls of GC_store_stack_ptr(), sem_post(), GC_suspend_self_inner(),\nRESTORE_CANCEL() (dedicated to manual thread suspend).\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_handler_inner): Do not return\nquickly on a duplicate signal if suspend_cnt&1; repeat sigsuspend()\nwhile suspend_cnt&1 and me->stop_info.ext_suspend_cnt is not updated.\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_self_inner): Add\nDISABLE_CANCEL() and RESTORE_CANCEL(); refine TODO item.\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD && DEBUG_THREADS] (GC_suspend_self_inner):\nLog \"suspend self\" and \"resume self\" events.\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_thread): Add assertion\nthat self thread is not suspended; replace sem_wait() in a loop to\nsuspend_restart_barrier(1).\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_resume_thread): Call\nraise_signal(GC_sig_thr_restart) and suspend_restart_barrier(1).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0ab51e45813e1c52a28e2c9b611e30426d96384e", "commit_date": "2022-04-24T15:41:42Z", "commit_message": "Fix hang on sem_wait in GC_suspend_thread if thread was resumed recently\n(a cherry-pick of commit 6d2696ca3 from 'release-8_2')\n\nIf GC_resume_thread(t) is followed by GC_suspend_thread(t) immediately,\nthen there is a risk of the loop (which had been entered before\nGC_resume_thread(t) is called) in GC_suspend_self_inner() continue\niterating, thus the suspend signal handler stays pending, and thus\nthe relevant sem_post() will not be called.\n\nThe solution is to replace a boolean flag (suspended_ext) with\na counter (thread_stop_info.ext_suspend_cnt) with the lowest bit\nindicating whether the thread is suspended manually.\n\n* include/private/pthread_stop_world.h [!GC_OPENBSD_UTHREADS && !NACL\n&& !SN_TARGET_ORBIS && !SN_TARGET_PSP2 && GC_ENABLE_SUSPEND_THREAD]\n(thread_stop_info.ext_suspend_cnt): Add field; add comment.\n* include/private/pthread_support.h [GC_ENABLE_SUSPEND_THREAD\n&& !GC_DARWIN_THREADS && !GC_OPENBSD_UTHREADS && !NACL\n&& !SN_TARGET_ORBIS && !SN_TARGET_PSP2] (GC_thread.suspended_ext):\nRemove field.\n* include/private/pthread_support.h [GC_ENABLE_SUSPEND_THREAD\n&& !GC_DARWIN_THREADS && !GC_OPENBSD_UTHREADS && !NACL\n&& !SN_TARGET_ORBIS && !SN_TARGET_PSP2] (GC_suspend_self_inner):\nAdd suspend_cnt argument.\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_self_inner): Likewise.\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_handler_inner): Declare\nsuspend_cnt local variable, set it from me->stop_info.ext_suspend_cnt,\npass it GC_suspend_self_inner().\n* pthread_support.c [GC_ENABLE_SUSPEND_THREAD && !GC_DARWIN_THREADS\n&& !GC_OPENBSD_UTHREADS && !NACL && !SN_TARGET_ORBIS\n&& !SN_TARGET_PSP2] (GC_do_blocking_inner, GC_suspend_self_blocked,\nGC_call_with_gc_active): Likewise.\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_handler_inner): Replace\nme->suspended_ext with suspend_cnt&1.\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_self_inner): Add assertion\nthat suspend_cnt is odd; replace me->suspended_ext loop condition to\nme->stop_info.ext_suspend_cnt==suspend_cnt.\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_thread, GC_resume_thread):\nDeclare/use suspend_cnt local variable; increment\nt->stop_info.ext_suspend_cnt to indicate suspend/resume; add comment.\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_thread, GC_resume_thread,\nGC_is_thread_suspended, GC_suspend_all, GC_stop_world): Replace\nt->suspended_ext to t->stop_info.ext_suspend_cnt&1.\n* pthread_support.c [GC_ENABLE_SUSPEND_THREAD && !GC_DARWIN_THREADS\n&& !GC_OPENBSD_UTHREADS && !NACL && !SN_TARGET_ORBIS\n&& !SN_TARGET_PSP2] (GC_do_blocking_inner, GC_suspend_self_blocked,\nGC_call_with_gc_active, GC_register_my_thread): Likewise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "877e9af0bf550f46dc093e6e52c0866780ff91d9", "commit_date": "2022-04-24T15:21:19Z", "commit_message": "Fix context saving when GC_suspend_thread(self)\n(a cherry-pick of commit 531652e00 from 'release-8_2')\n\nThis prevents setting suspended_ext before saving context in\nGC_suspend_thread as well as in GC_register_my_thread (for a thread\nregistered from a thread destructor).\n\n* include/private/pthread_support.h [GC_ENABLE_SUSPEND_THREAD\n&& !GC_DARWIN_THREADS && !GC_OPENBSD_UTHREADS && !NACL\n&& !SN_TARGET_ORBIS && !SN_TARGET_PSP2] (GC_suspend_self_blocked):\nDeclare function.\n* include/private/pthread_stop_world.h [GC_ENABLE_SUSPEND_THREAD\n&& !GC_OPENBSD_UTHREADS && !NACL && !SN_TARGET_ORBIS\n&& !SN_TARGET_PSP2] (GC_suspend_self_inner): Move to pthread_support.h.\n* include/private/pthread_support.h [GC_ENABLE_SUSPEND_THREAD\n&& !GC_DARWIN_THREADS && !GC_OPENBSD_UTHREADS && !NACL\n&& !SN_TARGET_ORBIS && !SN_TARGET_PSP2] (GC_suspend_self_inner):\nChange return type from void* to void; remove GC_CALLBACK; change\nargument type from void* to GC_thread.\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_self_inner): Likewise.\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_thread): Call\nGC_with_callee_saves_pushed(GC_suspend_self_blocked) before LOCK\n(instead of GC_do_blocking(GC_suspend_self_inner) after LOCK).\n* pthread_support.c [GC_ENABLE_SUSPEND_THREAD && !GC_DARWIN_THREADS\n&& !GC_OPENBSD_UTHREADS && !NACL && !SN_TARGET_ORBIS\n&& !SN_TARGET_PSP2] (GC_register_my_thread): Likewise.\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_thread): Remove comment; move\nAO_store_release() call to be just before raise_signal() one.\n* pthread_support.c (do_blocking_enter, do_blocking_leave): New static\nfunction (move part of code from GC_do_blocking_inner).\n* pthread_support.c [GC_ENABLE_SUSPEND_THREAD && !GC_DARWIN_THREADS\n&& !GC_OPENBSD_UTHREADS && !NACL && !SN_TARGET_ORBIS\n&& !SN_TARGET_PSP2] (GC_suspend_self_blocked): New GC_INNER function.\n* pthread_support.c (GC_do_blocking_inner): Declare topOfStackUnset\nlocal variable unconditionally; call do_blocking_enter() and\ndo_blocking_leave().\n* pthread_support.c [LINT2 && GC_ASSERTIONS] (GC_do_blocking_inner):\nDefine saved_me local variable.\n* pthread_support.c [LINT2] (GC_do_blocking_inner): After the 2nd LOCK\nrecompute \"me\" value and assert that it is the same as the previously\ncomputed one; add comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4ab7fe5b0d6b40ef3d93db2632c9b8755b56c585", "commit_date": "2022-04-24T15:04:11Z", "commit_message": "Do not send signal to thread which is suspended manually\n(a cherry-pick of commit 09b6f5a74 from 'release-8_2')\n\nIf thread is in do-blocking state (i.e. thread_blocked is set), then\nsuspend it only when it exits from the state.\n\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_thread): If thread_blocked\nthen set thread_blocked, then UNLOCK and return; update comment;\ncheck FINISHED flag before checking t is self thread.\n* pthread_support.c [GC_ENABLE_SUSPEND_THREAD && !GC_DARWIN_THREADS\n&& !GC_OPENBSD_UTHREADS && !NACL && !SN_TARGET_ORBIS\n&& !SN_TARGET_PSP2] (GC_do_blocking_inner, GC_call_with_gc_active):\nCall GC_suspend_self_inner() not holding GC lock while suspended_ext\n(before setting thread_blocked to false).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9de7739b5418f2de696bd0e49e9e41a2613d127", "commit_date": "2022-04-24T14:52:41Z", "commit_message": "Fix GC_suspend_thread if called before thread destructor\n(a cherry-pick of commits 0fbfc5834, fa7cdb7e6 from 'release-8_2')\n\n* include/private/pthread_stop_world.h [GC_ENABLE_SUSPEND_THREAD\n&& !GC_OPENBSD_UTHREADS && !NACL && !SN_TARGET_ORBIS\n&& !SN_TARGET_PSP2] (suspend_self_inner): Rename to\nGC_suspend_self_inner; rename client_data argument to thread_me.\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (suspend_self_inner): Likewise.\n* include/private/pthread_stop_world.h [GC_ENABLE_SUSPEND_THREAD\n&& !GC_OPENBSD_UTHREADS && !NACL && !SN_TARGET_ORBIS\n&& !SN_TARGET_PSP2] (GC_suspend_self_inner): Declare function as GC_INNER.\n* pthread_stop_world.c [!GC_OPENBSD_UTHREADS && !NACL\n&& GC_ENABLE_SUSPEND_THREAD] (GC_suspend_handler_inner,\nGC_suspend_thread): Rename suspend_self_inner to GC_suspend_self_inner.\n* pthread_support.c [GC_ENABLE_SUSPEND_THREAD\n&& !GC_DARWIN_THREADS && !GC_OPENBSD_UTHREADS && !NACL\n&& !SN_TARGET_ORBIS && !SN_TARGET_PSP2] (GC_register_my_thread):\nLikewise.\n* pthread_stop_world.c [GC_ENABLE_SUSPEND_THREAD] (GC_suspend_self_inner):\nRemove declaration; change definition from static to GC_INNER.\n* pthread_support.c [GC_ENABLE_SUSPEND_THREAD && !GC_DARWIN_THREADS\n&& !GC_OPENBSD_UTHREADS && !NACL && !SN_TARGET_ORBIS\n&& !SN_TARGET_PSP2] (GC_register_my_thread): If me->suspended_ext then\nunlock and call GC_do_blocking(GC_suspend_self_inner).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "429aed68b945b269b74ed5fa86352a771112ea29", "commit_date": "2022-04-24T12:19:37Z", "commit_message": "Fix missing update of collectable_count in mktree of gctest\n(a cherry-pick of commit aa4d565cf from 'release-8_2')\n\nIssue #256 (bdwgc).\n\n* tests/test.c [!GC_NO_FINALIZATION] (mktree): Increment\ncollectable_count after GC_NEW(void*).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "066e2d35cda439b66ad2cd005344b234e554db5b", "commit_date": "2022-04-24T12:16:38Z", "commit_message": "Fix 'new_link undeclared' compiler error in gctest if finalization off\n(a cherry-pick of commit 93feca92a from 'release-8_2')\n\nIssue #256 (bdwgc).\n\n* tests/test.c (mktree): Do not CHECK_OUT_OF_MEMORY(new_link)\nif GC_NO_FINALIZATION.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5bae39360e466404f3b30480cdd1f481e79a320", "commit_date": "2022-04-24T09:10:58Z", "commit_message": "Use SIGRTMIN+6 as suspend signal if sigrt-signals on OpenBSD\n(fix of commit 528dea874)\n\nPreviously, GC_USESIGRT_SIGNALS macro (i.e. configure --sigrt-signals\noption) had no effect on SIG_SUSPEND macro definition on OpenBSD.\n\n* include/private/gc_priv.h [!GC_LINUX_THREADS && !GC_DGUX386_THREADS\n&& GC_OPENBSD_THREADS && GC_USESIGRT_SIGNALS] (SIG_SUSPEND): Define to\n[_]SIGRTMIN+6 (instead of SIGXFSZ).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "945d56d14119fc09f04105f63048451798b4704e", "commit_date": "2022-04-24T08:37:35Z", "commit_message": "Workaround TSan false positive in push_marked1/2/4, ptr_store_and_dirty\n(a cherry-pick of commits 782003a08, 490d60bc1 from 'release-8_2')\n\n* mark.c [USE_PUSH_MARKED_ACCELERATORS] (GC_push_marked1): Add\nGC_ATTR_NO_SANITIZE_THREAD attribute.\n* mark.c [!UNALIGNED_PTRS] (GC_push_marked2): Likewise.\n* mark.c [!UNALIGNED_PTRS && GC_GRANULE_WORDS<4] (GC_push_marked4):\nLikewise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f6f979bc3fe63b29da99cf5595f473d5b1fae97e", "commit_date": "2022-04-24T08:37:35Z", "commit_message": "Workaround TSan FP in GC_finalized_malloc and GC_push_unconditionally\n\n* mark.c [ENABLE_DISCLAIM] (GC_push_unconditionally): Add\nGC_ATTR_NO_SANITIZE_THREAD attribute.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "772adff257977bbb77bfc04415228c887faf1364", "commit_date": "2022-04-24T08:37:35Z", "commit_message": "Fix data race in fail_proc1 of gctest\n\n* tests/gctest.c [!DBG_HDRS_ALL] (fail_count): Change type from int to\nvolatile AO_t.\n* tests/gctest.c [!DBG_HDRS_ALL] (fail_proc1): Use AO_fetch_and_add1\nto update fail_count.\n* tests/gctest.c [!DBG_HDRS_ALL && !THREADS] (TEST_FAIL_COUNT): Cast\nn to AO_t.\n* tests/gctest.c [!DBG_HDRS_ALL] (run_one_test): Cast &fail_count to\nvoid* when passed to GC_is_heap_ptr().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa95782a9cbccea11f3057896da2745dab43a4d0", "commit_date": "2022-04-24T08:37:35Z", "commit_message": "Fix typo in comment near extract_conv_spec in cordprnt.c\n\n* cord/cordprnt.c (NONE): Fix a typo in comment (\"non-numeric\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0fc00253ac93b954e59891a8d4ad4e26b7c0ce3f", "commit_date": "2022-04-24T08:37:07Z", "commit_message": "Fix assertion violation of GC_thread_key alignment if pthread-based TLS\n(a cherry-pick of commit c496e9755 from 'release-8_2')\n\nIt is needed to push GC_thread_key only in case of USE_CUSTOM_SPECIFIC;\nit could have any alignment otherwise (e.g., if it is of pthread_key_t\ntype).\n\n* pthread_support.c [THREAD_LOCAL_ALLOC] (GC_push_thread_structures):\nPush GC_thread_key only if USE_CUSTOM_SPECIFIC.\n* win32_threads.c [THREAD_LOCAL_ALLOC] (GC_push_thread_structures):\nLikewise.\n* thread_local_alloc.c [THREAD_LOCAL_ALLOC] (GC_init_thread_local): Do\nnot assert GC_thread_key is word-aligned unless USE_CUSTOM_SPECIFIC;\nadd comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "93bab693ac4543aaa04f8b0cc07d496394e26b51", "commit_date": "2022-03-16T08:51:03Z", "commit_message": "Fix SIGSEGV caused by dropped stack access from child process in gctest\n(a cherry-pick of commit 673f0cf3f from 'master')\n\nIssue #256 (bdwgc).\n\nPreviously, a local variable was passed in gctest to\nGC_move_disappearing_link as a link to clear, this led to a memory\naccess violation during garbage collection in the child process\nif the fork occurred between  GC_move_disappearing_link(..., &new_link)\nand GC_unregister_disappearing_link(&new_link).\n\nThis commit changes the mentioned local variable (new_link) use - now\nit contains a pointer to a heap-allocated link rather then containing\njust a link.\n\n* tests/test.c (mktree): Change type of new_link from void* to\nvoid**; initialize it to GC_NEW(void*) and ensure it is non-null;\nreplace new_link with *new_link; add comment new_link object is\nreclaimed correctly even if the thread is dropped in the child\nprocess between GC_move_disappearing_link(new_link) and\nGC_unregister_disappearing_link.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1ba1c46e77cad1146163a41def03b6448623f11e", "commit_date": "2022-03-14T05:21:55Z", "commit_message": "Relax assertion of hb_n_marks in reclaim_block if more than two markers\n(fix of commit c9be25027)\n\nIssue #412 (bdwgc).\n\n* reclaim.c [PARALLEL_MARK] (GC_reclaim_block): Use\nmin(3,GC_markers_m1+1) (instead of hard-coded 2) multiplier in the\nassertion about hb_n_marks maximum value; update the relevant comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "87160dee0b8af99b1359d3da0b25a78dc649a741", "commit_date": "2022-03-14T05:21:49Z", "commit_message": "Eliminate division-by-zero FP warning in GC_ASSERT in reclaim_block\n\n* reclaim.c [PARALLEL_MARK] (GC_reclaim_block): Assert sz is not zero\n(before HBLKSIZE/sz).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "53e0f799cf373134d5ba3e461db8702593b181c8", "commit_date": "2022-03-14T05:19:20Z", "commit_message": "Fix typo (duplicate word) in GC_unmap_old comment\n\n* allchblk.c [USE_MUNMAP] (GC_unmap_old): Remove duplicate \"way\" in\ncomment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "07cea430750cc94c9dd3add91d8735f86770a7f0", "commit_date": "2022-02-23T07:38:02Z", "commit_message": "Update ChangeLog file (v8.0 changes)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0d7c0910b1d65eadc8fef7f12f7887c382a4bb21", "commit_date": "2022-02-23T07:05:45Z", "commit_message": "Update ChangeLog file (v7.6 changes)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e78d0bf09bd8d21ebc23ecd88aed4bb12495c3cb", "commit_date": "2022-02-23T07:05:42Z", "commit_message": "Update ChangeLog file (v7.2 - v7.4 changes only)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "20cfc4e615ef09a095d19d7214f93fc15f31b5d7", "commit_date": "2022-02-22T09:52:26Z", "commit_message": "Fix 'undeclared getpagesize' compiler warning on AIX and OSF1\n\n* include/private/gcconfig.h [ALPHA && OSF1 || !GETPAGESIZE && AIX]:\nInclude unistd.h.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6ccacdd7a92a0608ca488343dde4eb5afd888151", "commit_date": "2022-02-22T09:39:02Z", "commit_message": "Fix missing lock when GC_generate_random_valid_address is called\n(a cherry-pick of commit 0c6b4caa1 from 'release-8_2')\n\nIssue #414 (bdwgc).\n\n* dbg_mlc.c [KEEP_BACK_PTRS] (GC_generate_random_backtrace_no_gc):\nWrap GC_generate_random_valid_address() call into LOCK/UNLOCK.\n* finalize.c [KEEP_BACK_PTRS] (GC_notify_or_invoke_finalizers):\nDeclare current local variable; expand\nGC_generate_random_backtrace_no_gc() manually.\n* finalize.c [KEEP_BACK_PTRS] (GC_notify_or_invoke_finalizers):\nUNLOCK after GC_generate_random_valid_address() call.\n* include/private/gc_priv.h [KEEP_BACK_PTRS]\n(GC_generate_random_backtrace_no_gc): Remove declaration.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bc01dc390e3e0d8ade52f8cd97992a2f8d5314d7", "commit_date": "2022-02-22T09:18:34Z", "commit_message": "Workaround crash in FreeBSD rand() by avoiding its concurrent usage\n(a cherry-pick of commit 84d42b8c5 from 'release-8_2')\n\nIssue #414 (bdwgc).\n\nThe standard specifies rand() as not a thread-safe API function.  Thus,\nthe concurrent usage of libc rand() should be avoided.\n\nRedefine the standard rand() in disclaim_[weakmap_]test with a trivial\n(yet sufficient for the test purpose) implementation to avoid crashes\ninside rand() on some targets (e.g. FreeBSD 13.0).\n\n* tests/disclaim_test.c [LINT2] (GC_API_PRIV): Do not define.\n* tests/disclaim_weakmap_test.c [LINT2] (GC_API_PRIV): Likewise.\n* tests/disclaim_test.c [LINT2] (GC_random): Do not declare.\n* tests/disclaim_weakmap_test.c [LINT2] (GC_random): Likewise.\n* tests/disclaim_test.c [GC_PTHREADS || LINT2]: Include gc_priv.h.\n* tests/disclaim_test.c [GC_PTHREADS || LINT2] (GC_rand): New static\nfunction.\n* tests/disclaim_weakmap_test.c [GC_PTHREADS || LINT2] (GC_rand):\nLikewise.\n* tests/disclaim_test.c [GC_PTHREADS || LINT2] (rand): Define to\nGC_rand() (instead of (int)GC_random()); add comment.\n* tests/disclaim_weakmap_test.c [GC_PTHREADS || LINT2] (rand):\nLikewise.\n* tests/disclaim_weakmap_test.c [GC_PTHREADS || LINT2]: Include\ngc_priv.h before gc_mark.h; add comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cb54e978347243af964b8b6f3a97f19b02f8904a", "commit_date": "2022-02-22T06:05:00Z", "commit_message": "Eliminate stringop-overflow gcc-12 warning in CORD__next\n\n* cord/cordbscs.c (CORD__next): Reduce limit and i values by cur_pos;\nadd cur_pos to i when fn() is called; add cur_pos to limit in cur_end\nassignment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e7cd5d95f2f84c034a1bc54be09852aae3c9392", "commit_date": "2022-02-22T06:03:54Z", "commit_message": "Fix stack overflow in gctest on Alpine Linux/s390x\n(a cherry-pick of commit b2e2a0bc6 from 'release-8_2')\n\nIssue #422 (bdwgc).\n\n* tests/test.c [(MACOS || UNIX_LIKE && NO_GETCONTEXT) && __s390x__]\n(BIG): Define to 600 (instead of 1000).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a73713e86781a04bdbc2361d6af28ca15739c043", "commit_date": "2022-02-22T06:00:52Z", "commit_message": "Fix get_maps failure when GC_repeat_read returns zero\n(a cherry-pick of commit 9ddc5ceb4 from 'release-8_2')\n\n* os_dep.c [NEED_PROC_MAPS] (GC_get_maps): Do not return 0 from the\nfunction if GC_repeat_read returns 0 unless maps_size is 0.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f135ce1d13d42b18f512e42f5b59b72f1df887c8", "commit_date": "2022-02-21T21:20:51Z", "commit_message": "Fix GC_unmapped_bytes update in GC_unmap for Sony PS/3\n(a cherry-pick of commit c61c01c3b from 'release-8_2')\n\nIssue #173 (bdwgc).\n\n* os_dep.c [USE_MUNMAP && !USE_WINALLOC && SN_TARGET_PS3] (GC_unmap,\nGC_unmap_gap): Call ps3_free_mem() only if len is non-zero; update\nGC_unmapped_bytes value.\n* os_dep.c [USE_MUNMAP && !USE_WINALLOC && !SN_TARGET_PS3] (GC_unmap):\nCall mprotect() or mmap() only if len is non-zero.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4f6a7461b62a17cc6a36bdbbdd91fe6a77377ca", "commit_date": "2022-02-21T20:53:39Z", "commit_message": "Fix 'GC_text_mapping not used' GCC warning if redirect malloc w/o threads\n(a cherry-pick of commit 80da9c091 from 'release-8_2')\n\n* os_dep.c [NEED_PROC_MAPS && !IA64 && !INCLUDE_LINUX_THREAD_DESCR\n&& (!DYNAMIC_LOADING || !USE_PROC_FOR_LIBRARIES) && REDIRECT_MALLOC]\n(GC_parse_map_entry): Do not define unless GC_LINUX_THREADS.\n* os_dep.c [NEED_PROC_MAPS && REDIRECT_MALLOC] (GC_text_mapping):\nLikewise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5124a4897cace01d0bf7c11ae28361794e2c71d3", "commit_date": "2022-02-21T20:19:00Z", "commit_message": "Fix hang in GC_free if GC_PREFER_MPROTECT_VDB (Mingw64)\n(a cherry-pick of commit 0a32dd39a from 'release-8_2')\n\nDisable MPROTECT_VDB for Mingw64 (mingw-w64-x86_64) because\nSetUnhandledExceptionFilter() is not working proporly in this runtime\n(GC_write_fault_handler is never invoked), at least as of Mingw64\nx86_64-8.1.0-release.\n\n* include/private/gcconfig.h [X86_64 && MSWIN32 && !__INTEL_COMPILER\n&& GC_GNUC_PREREQ(4,7)] (MPROTECT_VDB): Do not define if __MINGW64__;\nupdate comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6df5eb1335b191c42763d205a6795bdb590f19b7", "commit_date": "2022-02-21T20:16:39Z", "commit_message": "Update AUTHORS file (add Dimitris Apostolou)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff272e30c0b7d7e1b4e735ef3f1bbc4289aebed6", "commit_date": "2022-02-21T20:16:26Z", "commit_message": "Fix typos in comments in allchblk.c and gc.h\n(a cherry-pick of commit 717039387 from 'master')\n\nIssue #408 (bdwgc).\n\n* allchblk.c (GC_merge_unmapped): Fix a typo in comment (\"mergeable\").\n* include/gc.h (GC_set_stop_func): Fix a typo in comment\n(\"triggered\").\n* ChangeLog: Likewise.\n* ChangeLog: Fix a typo in comment (\"unmergeable\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "085344df703d290c45b2410f85a9c3d6efc64c65", "commit_date": "2022-02-21T20:13:34Z", "commit_message": "Eliminate 'writing into region of size 0' gcc FP warning in realloc\n(a cherry-pick of commits eca62c130, 16ffd1866 from 'master')\n\nIssue #406 (bdwgc).\n\n* mallocx.c [_FORTIFY_SOURCE && __GNUC__ && !__clang__]\n(GC_realloc): Declare cleared_p local variable as volatile; move and\nupdate comment.\n* mallocx.c (GC_realloc): Declare cleared_p local variable at the top\nlevel;\n* mallocx.c [!IGNORE_FREE] (GC_realloc): Pass cleared_p to GC_free()\nunless lb is 0.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8358adc1b1d21b81321d5e926ef1f83b3467c144", "commit_date": "2022-02-21T20:13:26Z", "commit_message": "Eliminate 'value exceeds maximum object size' gcc warning in debug_malloc\n\nIssue #406 (bdwgc).\n\n* dbg_mlc.c [_FORTIFY_SOURCE && !__clang__] (GC_debug_malloc): Expand\nSIZET_SAT_ADD() manually changing it to return GC_SIZE_MAX>>1 in case\nof addition overflow; add comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa8d7d32dd4aa7e22e83a9e73b3f42266b0c754b", "commit_date": "2022-02-21T20:11:44Z", "commit_message": "Eliminate 'buffer overflow detected' FP error in realloc_test\n\nIssue #406 (bdwgc).\n\n* mallocx.c (GC_realloc): Pass p to BZERO() thru an intermediate\nvariable of word type; add comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ccbebc75ec7b9044a0b88e47a1d6c6588fb4eab8", "commit_date": "2022-02-21T20:09:32Z", "commit_message": "Fix oldProc initialization in gc_cleanup and eliminate related warnings\n(a cherry-pick of commit 166d6e07d from 'master')\n\nIssue #406 (bdwgc).\n\nGC_register_finalizer and similar functions do not guarantee to\nset *ofn an *ocd values, thus the client should do it.\n\n* dbg_mlc.c [!GC_NO_FINALIZATION] (GC_debug_register_finalizer_no_order,\nGC_debug_register_finalizer, GC_debug_register_finalizer_unreachable,\nGC_debug_register_finalizer_ignore_self): Initialize my_old_cd to 0;\nadd comment.\n* include/gc_cpp.h (gc_cleanup::gc_cleanup): Initialize oldProc and\noldData to 0; add comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bd3c71b650d1d60adfad041d67819ea1bd36f0bb", "commit_date": "2022-02-21T20:08:56Z", "commit_message": "Eliminate 'value exceeds maximum object size' gcc warnings in huge_test\n\nIssue #406 (bdwgc).\n\n* huge_test.c [_FORTIFY_SOURCE] (main): Do not call GC_MALLOC() with\nsize argument bigger than GC_SWORD_MAX; add comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d73897c3a8be071b2835af2123129606f75f6dd1", "commit_date": "2022-02-21T20:07:51Z", "commit_message": "Fix typo in comment and better document register_finalizer_inner\n\n* finalize.c (GC_register_finalizer_inner): Document the case when\nGC_find_leak is true; fix a typo (\"remain\") in comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "22134485a5f6dce4decac156d632ec645b201afb", "commit_date": "2022-02-21T20:07:44Z", "commit_message": "Fix parallel_initialized assertion violation in initsecondarythread (Win32)\n\n* win32_threads.c [!GC_PTHREADS && !GC_NO_THREADS_DISCOVERY]\n(GC_DllMain): Do not assert parallel_initialized unless\nGC_win32_dll_threads on DLL_THREAD_DETACH.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7273a883ca7dd0b7a8c9c200af23f7d9d2a48838", "commit_date": "2022-02-21T20:07:26Z", "commit_message": "Eliminate 'old_gc_no is initialized but not referenced' MS VC false warning\n\n* win32_threads.c [GC_DISABLE_INCREMENTAL] (GC_wait_for_gc_completion):\nDefine as no-op macro (instead of a static function).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2555bfa008596e5927b41be7344c2b626839c8b6", "commit_date": "2022-02-21T19:40:35Z", "commit_message": "Fix undefined __stack_base__ on UWP/arm64 (llvm-mingw)\n(fix of commit 1471f940e)\n\nIssue #405 (bdwgc).\n\n* include/private/gcconfig.h [__aarch64__] (NOSYS): Do not define\nif _WIN32.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6d068f18f938e9eede0f1e61e28a08aca0a99fba", "commit_date": "2022-02-21T19:39:11Z", "commit_message": ".gitignore: Ignore '<name>test' executable files\n(a cherry-pick of commits fc699c99c, 5ce08caa5 from 'master')", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e16efb2ebb02e721e2b7436230d4206268830bd", "commit_date": "2021-12-21T18:02:35Z", "commit_message": "Update ChangeLog file (v8.0 changes)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0cf0894ab99db5586d45d8e31f1d1af105a83447", "commit_date": "2021-12-21T17:56:35Z", "commit_message": "Update ChangeLog file (v7.6 changes)\n(a cherry-pick of commit 1422cd1d0 from 'release-7_6')", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a40ab0465af00c61d2b5af2f3e5718217ae26626", "commit_date": "2021-12-21T17:55:31Z", "commit_message": "Update ChangeLog file (v7.2 - v7.4 changes only)\n(a cherry-pick of commit e9e52ab66 from 'release-7_4')", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6b8b4e531204e42e545e8fba610579154add888", "commit_date": "2021-12-21T06:34:29Z", "commit_message": "Fix lock assertion violation in GC_find_limit if always multi-threaded\n\nIssue #399 (bdwgc).\n\n* misc.c [GC_ASSERTIONS && GC_ALWAYS_MULTITHREADED\n&& (SEARCH_FOR_DATA_START || NETBSD)] (GC_init): Wrap\nGC_init_linux_data_start() and GC_init_netbsd_elf() calls into\nLOCK/UNLOCK.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5b9bbc225c044b6af76e0a2859158dae02375394", "commit_date": "2021-12-21T06:33:56Z", "commit_message": "Workaround Thread Sanitizer (TSan) FP warning in is_valid_displacement\n\nIssue #237 (bdwgc).\n\n* ptr_chck.c (GC_is_valid_displacement): Avoid passing NULL to HDR(p);\nadd comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84de96bedb9b6d62d8787f3bdda9a3f920596109", "commit_date": "2021-12-21T06:33:12Z", "commit_message": "Fix GC_allocate_ml incorrect cleanup in GC_deinit if pthreads (MinGW)\n(a cherry-pick of commit 68489c84f from 'release-8_2')\n\nIssue #397 (bdwgc).\n\n* misc.c [GC_WIN32_THREADS && (MSWIN32 || MSWINCE)] (GC_deinit): Do not\ncall DeleteCriticalSection(&GC_allocate_ml) if GC_PTHREADS.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6339116332b3b664323b360910f0a8dd73f730e8", "commit_date": "2021-12-21T06:17:18Z", "commit_message": "Fix nodist_libgc_la_SOURCES value in Makefile.am for Solaris/sparc\n\n* Makefile.am [NEED_ATOMIC_OPS_ASM] (nodist_libgc_la_SOURCES): Append\natomic_ops_sysdeps.S instead of overwriting atomic_ops.c item (and\nonly if USE_INTERNAL_LIBATOMIC_OPS).", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1a84f5949bc9ce60b82e8e3bc80596a7c747db6", "commit_date": "2021-12-21T06:07:25Z", "commit_message": "Fix a typo in debugging.md\n\n* doc/debugging.md (Unexpectedly Large Heap): Fix typo \"primitives in\",\nadd missing space after it.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "74e989efb490433435562ccecf34fb4243ba65e5", "commit_date": "2021-12-21T06:06:43Z", "commit_message": "Update AUTHORS file (add email for Jesse Hull, fix one for John Ellis)\n(a cherry-pick of commit 93c4273ce from 'release-8_2')", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e3476622174c1e30dd944dd61cdfcad653b251bb", "commit_date": "2021-12-21T05:52:43Z", "commit_message": "Fix 'ISO C forbids conversion of function pointer to object' warning\n(fix of commit 715416873)\n\n* os_dep.c [GWW_VDB && MSWINRT_FLAVOR] (detect_GetWriteWatch): Cast\nGetProcAddress to void* thru word when passing to VirtualQuery().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c73b0ff0e682fecf86db0a6cc355f445daf7ae10", "commit_date": "2021-12-21T05:49:19Z", "commit_message": "Revert \"Fix missing msvc_dbg.h in dist_noinst_HEADERS (Automake)\"\n\nThis reverts commit 479b187e62e3634d755b671b7e8f8229ea3c3d1e.\n\nThe reason: msvc_dbg.h is listed in EXTRA_DIST.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "071b454e7d1614683f480b6fa089565ccdfdd9f8", "commit_date": "2021-12-21T05:46:35Z", "commit_message": "Update AUTHORS file (add Jakub Wojciech)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "957713d0a4bf23cbb12ab8476ad60c7d029c5738", "commit_date": "2021-12-21T05:45:20Z", "commit_message": "Distribute gc_disclaim.h in single-obj-compilation\n(a cherry-pick of commit 056ad8279 from 'release-8_2')\n\nIssue #389 (bdwgc).\n\nThis fixes installation of\ngc_disclaim.h if --single-obj-compilation is passed to configure.\n\n* Makefile.am [ENABLE_DISCLAIM] (pkginclude_HEADERS): Likewise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bede370284b0c6b66ddf902512be1101bd03e7cc", "commit_date": "2021-12-21T05:29:15Z", "commit_message": "Refer to Makefile.direct instead of deleted Makefile file in README\n(a cherry-pick of commit 6c315e49f from 'release-8_2')\n\n* Makefile.am (EXTRA_DIST): Remove outdated comment exclusion of\n\"Makefile\" file.\n* README.QUICK (WARNINGS): Mention \"Makefile.am or Makefile.direct\"\ninstead of \"Makefile\".\n* doc/README.linux: Mention \"Makefile.direct\" instead of \"Makefile\".\n* doc/README.sgi: Likewise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "408efec1be5953e100a74f50f8a2b1aa8ae60db8", "commit_date": "2021-12-21T05:25:41Z", "commit_message": "Fix a typo and add email in AUTHORS file (David Mosberger)\n\n* AUTHORS: Fix typo in name (David Mosberger).\n* ChangeLog (5.0alpha4): Likewise.\n* AUTHORS: Add email for David Mosberger.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb1228b8f0d62dc2836f7801e23c797bc9e2d610", "commit_date": "2021-12-21T05:23:32Z", "commit_message": "Eliminate 'new_l may be used uninitialized' gcc warning in os_dep (Cygwin)\n\n*  os_dep.c [(MSWIN32 || MSWINCE || CYGWIN32) && USE_WINALLOC\n&& !REDIRECT_MALLOC] (GC_add_current_malloc_heap): Clear field of\nnew_l before passing it to GC_get_allocation_base; add comment.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89d8a6af101fb757a1db04f5b206538a4a717ff9", "commit_date": "2021-12-21T05:21:14Z", "commit_message": "Do not name GCC intrinsics as C11 ones\n(a cherry-pick of commit 0acf6bc06 from 'release-8_2')\n\n* configure.ac (GC_BUILTIN_ATOMIC): Do not mention C11 in comment\n(or documentation) when referring to GCC intrinsics.\n* include/private/gc_atomic_ops.h: Likewise.\n* ChangeLog (8.0.0): Do not mention C11 when referring to GCC\nintrinsics.\n* doc/README.macros (GC_BUILTIN_ATOMIC): Likewise.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4ac763a978a9bd7171748004ec80f90b1985d053", "commit_date": "2021-12-21T05:18:38Z", "commit_message": "AppVeyor CI: Specify VS 2015 image explicitly", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4330a60f4eb88e2fbbed852451a6c954d70811b4", "commit_date": "2021-10-23T20:27:44Z", "commit_message": "Travis CI: Ignore expired certificate reported by wget", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fd3499e222bd175874444deb80192095743ac2eb", "commit_date": "2021-10-23T20:26:42Z", "commit_message": "AppVeyor CI: Prefix appveyor.yml filename with a dot", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "83a514e0efb0db2348cf46b5ffe2be6694813da9", "commit_date": "2021-10-14T10:41:22Z", "commit_message": "Fix 'GC_greatest_stack_base_below is defined but not used' warning (IA64)\n\nDefine GC_greatest_stack_base_below only if needed by GC_get_stack_base.\n\n* include/private/gc_priv.h [THREADS && IA64]\n(GC_greatest_stack_base_below): Do not declare unless\nHAVE_PTHREAD_ATTR_GET_NP or HAVE_PTHREAD_GETATTR_NP.\n* pthread_support.c [GC_PTHREADS && !GC_WIN32_THREADS && IA64]\n(GC_greatest_stack_base_below): Do not define unless\nHAVE_PTHREAD_ATTR_GET_NP or HAVE_PTHREAD_GETATTR_NP.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba2659ae57a022285ead2c3b479adc058963f651", "commit_date": "2021-10-14T07:05:27Z", "commit_message": "Remove non-working check of M68K in gctest\n\nBecause of a bug in the #if logical expression, particular test of\nGC_is_visible has been never excluded on NetBSD/m68k.\nThis commit just simplifies the expression not changing the logic.\n\n* tests/test.c [!DBG_HDRS_ALL && (IA64 || POWERPC)] (run_one_test):\nDo not test M68K macro; move TEST_FAIL_COUNT(1) inside ifdef.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cd7e6d848f873d6ca9a2330b5534adf31016b3ae", "commit_date": "2021-10-14T07:05:06Z", "commit_message": "Remove checking of RS6000 completely\n(fix of commit 3bfe50b3c)\n\n* tests/test.c [!DBG_HDRS_ALL && !ALL_INTERIOR_POINTERS]\n(run_one_test): Do not test for RS6000.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a44d097590c05cfa1dace3c02f1cb0c3c7159a8f", "commit_date": "2021-10-14T07:03:47Z", "commit_message": "Remove comment belonging to deleted GC_push_proc\n(a cherry-pick of commit 59bf4ce23 from 'release-8_2')\n\n* include/private/gc_priv.h (GC_push_one): Remove comment belonging to\ndeleted GC_push_proc (\"Push register contents onto mark stack\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5c0575313ca77511bb3d63c283f0cc2806739cf2", "commit_date": "2021-10-14T07:02:04Z", "commit_message": "Eliminate 'function/data pointer conversion in expression' MSVC warning\n\n* os_dep.c [!OS2 && GWW_VDB && MSWINRT_FLAVOR] (detect_GetWriteWatch):\nCast GetProcAddress to void* before passing to VirtualQuery().", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}]}