{"master": [{"commit_oid": "dad4e6b76774924762a4eb56def7fbaee38d7653", "commit_date": "2023-09-23T06:00:49Z", "commit_message": "rculfhash: Only pass integral types to atomic builtins\n\nClang expects the pointers passed to atomic builtins to be integral. Fix\nthis by casting nodes address to uintptr_t *.\n\nChange-Id: Ifb8833c493df849a542a22f0bb2baeeb85be0297\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "776b7d456bc2adbd880c1917002b4c1a4b479b34", "commit_date": "2023-09-06T13:29:32Z", "commit_message": "LoongArch: Document that byte and short atomics are implemented with LL/SC\n\nBased on the LoongArch Reference Manual:\n\nhttps://loongson.github.io/LoongArch-Documentation/LoongArch-Vol1-EN.html\n\nSection 2.2.7 \"Atomic Memory Access Instructions\" only lists atomic\noperations for 32-bit and 64-bit integers. As detailed in Section\n2.2.7.1, LL/SC instructions operating on 32-bit and 64-bit integers are\nalso available. Those are used by the compiler to support atomics on\nbyte and short types.\n\nThis means atomics on 32-bit and 64-bit types have stronger forward\nprogress guarantees than those operating on 8-bit and 16-bit types.\n\nLink: https://github.com/urcu/userspace-rcu/pull/11#issuecomment-1706528796\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I01569b718f7300a46d984c34065c0bbfbd2f7cc6", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc46a9c324ae94d89da41ea9a3f97503115df88e", "commit_date": "2023-09-06T13:20:24Z", "commit_message": "Add LoongArch support\n\nThis commit completes LoongArch support.\n\nLoongArch supports byte and short atomic operations,\nand defines UATOMIC_HAS_ATOMIC_BYTE and UATOMIC_HAS_ATOMIC_SHORT.\n\nSigned-off-by: Wang Jing <wangjing@loongson.cn>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I335e654939bfc90994275f2a4fad550c95f3eba4", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cac31bf03005c1265ed11df29cf713f626f39c66", "commit_date": "2023-09-03T14:57:48Z", "commit_message": "Tests: Add test for byte/short atomics on addresses which are not word-aligned\n\nAdd a unit test to catch architectures which do not allow byte and short\natomic operations on addresses which are not word aligned.\n\nIf an architecture supports byte and short atomic operations, it should\nbe valid to issue those operations on variables which are not\nword-aligned, otherwise the architecture should not define\nUATOMIC_HAS_ATOMIC_BYTE nor UATOMIC_HAS_ATOMIC_SHORT.\n\nThis should help identify architectures which mistakenly define\nUATOMIC_HAS_ATOMIC_BYTE and UATOMIC_HAS_ATOMIC_SHORT.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I13d2f3be41749b018b39499106938b3746c419c1", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aad674a9a583e09e854145f18c5d8854269dce8c", "commit_date": "2023-08-21T19:22:27Z", "commit_message": "Complete removal of urcu-signal flavor\n\nThis commit completes removal of the urcu-signal flavor.\n\nUsers can migrate to liburcu-memb with a kernel implementing the\nmembarrier(2) system call to have similar read-side performance without\nrequiring use of a reserved signal, and with improved grace period\nperformance.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I75b9171e705b9b2ef4c8eeabe6164e5587816fb4", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3d003c571cd461aba1935e5d21e1e04da7183970", "commit_date": "2023-08-21T18:14:30Z", "commit_message": "doc/examples: Remove urcu-signal example\n\nRemove the urcu-signal example from documentation.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I6497855e63f39420cb1ffa44e07c2cbf5d39c791", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "546d9a117ef442847203e82f6b1bf6abd2d13b25", "commit_date": "2023-08-21T18:14:30Z", "commit_message": "tests/common: Remove urcu-signal common test files\n\nIn preparation for deprecation of the urcu-signal flavor, remove the\nurcu-signal common test files.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I1c4216a86cd4a4bde0ae81e44764e1d66e1d006f", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c60cd05a285c564efd3512fda7c1c17a2f042fc6", "commit_date": "2023-08-21T18:14:30Z", "commit_message": "tests/benchmark: Remove urcu-signal benchmark tests\n\nIn preparation for deprecation of the urcu-signal flavor, remove the\nurcu-signal benchmark tests.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I6824862353b8a14a244d2a882cf8a8cef2f48739", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "efacf6822d97334a8025fa62162851810119f8b3", "commit_date": "2023-08-21T16:07:09Z", "commit_message": "tests/regression: Remove urcu-signal regression tests\n\nIn preparation for deprecation of the urcu-signal flavor, remove the\nurcu-signal regression tests.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: Ib452e758642d8777f9dc51535176487508692456", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "294b37e6b2344523afbc764f3196e0945e476062", "commit_date": "2023-08-21T16:07:09Z", "commit_message": "tests/unit: Remove urcu-signal unit tests\n\nIn preparation for deprecation of the urcu-signal flavor, remove the\nurcu-signal unit tests.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: Ic74dd38d111e320cfd2860c2fc0fdb7ffde114dd", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c5b26a3e57e3ece89c4a2e27b40e41a5b884289f", "commit_date": "2023-08-21T15:23:07Z", "commit_message": "Fix: Add missing cmm_smp_mb() in deprecated urcu-signal\n\ncommit 97d13221f8a1 (\"Phase 1 of deprecating liburcu-signal\") miss a\ncmm_smp_mb() at the beginning of the read-side critical sections, which\ncauses spurious failures in the CI tests.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: Id8d5822142bef5f418e2c4653369d93968dca637", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "843860feae4d81442a345e97ec933f5c68436d94", "commit_date": "2023-08-18T20:38:59Z", "commit_message": "urcu/uatomic.h: Improve verbosity of static assert error messages\n\nImprove verbosity of static assert error messages for value mismatch.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I658a0ff556e362b42c437483a2e3ddb3eebf2b0a", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "455a8429f01ee5f98161bd8710c50ba0bdec61f2", "commit_date": "2023-08-18T20:34:17Z", "commit_message": "urcu/compiler: Add urcu_static_assert\n\nStatic assertion macros copied from LTTng-ust ust-compiler.h for\ncompatibility with compilers that do not support static assertion.\n\nChange-Id: I5dfa8ba565041b522a1d5c226c7a9369979a3a02\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "97d13221f8a10e9ba38821dea2c2ff299d166c71", "commit_date": "2023-08-18T20:16:09Z", "commit_message": "Phase 1 of deprecating liburcu-signal\n\nThe first phase of liburcu-signal deprecation consists of implementing\nit in term of liburcu-mb. In other words, liburcu-signal is identical to\nliburcu-mb at the exception of the function symbols and public header\nfiles.\n\nThis is done by:\n\n  1) Removing the RCU_SIGNAL specific code in urcu.c\n\n  2) Making the RCU_MB specific code also specific to RCU_SIGNAL in\n  urcu.c\n\n  3) Rewriting _urcu_signal_read_unlock_update_and_wakeup to use a\n  atomic store with CMM_SEQ_CST instead of a store CMM_RELAXED with\n  cmm_barrier() around it. We could keep the explicit barriers, but that\n  would require to add some cmm_annotate annotations. Therefore, to be\n  less intrusive in a public header file, simply use the CMM_SEQ_CST\n  like for the mb flavor.\n\nChange-Id: Ie406f7df2f47da0a9f464df94b968ad9204821f3\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e60fda72a3501c52b69bb042c0947817cbe1acc", "commit_date": "2023-08-15T12:30:30Z", "commit_message": "uatomic/generic: Fix redundant declaration warning\n\nabort(3) was explicitly declared external to avoid including\n<stdlib.h>. However, this emit a redundant declaration warning if it was\nalready declared before including <urcu/uatomic.h>.\n\nFix this by including <stdlib.h> and not declaring abort().\n\nChange-Id: If9557814c311e2b531e85fec8c41788462338fe4\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59fdcc3a77acbfd1c4552b64882752b96b2a4a5c", "commit_date": "2023-08-14T19:46:29Z", "commit_message": "tests: Add tests for checking race conditions\n\nThese tests do nothing useful except of stress testing a\nsingle-consumer, multiple-producers program on various data structures.\n\nThese tests are only meaningful when compiling liburcu with TSAN.\n\nChange-Id: If22b27ed0fb95bf890947fc4e75f923edb5ada8f\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e2125fb7b2c7a92d7030b41df5fb372a7706c32", "commit_date": "2023-08-14T19:46:29Z", "commit_message": "Add cmm_emit_legacy_smp_mb()\n\nSome public APIs stipulate implicit memory barriers on operations. These\nwere coherent with the memory model used at that time. However, with the\nmigration to a memory model closer to the C11 memory model, these memory\nbarriers are not strictly emitted by the atomic operations in the new\nmemory model.\n\nTherefore, introducing the `--disable-legacy-mb' configuration\noption. By default, liburcu is configured to emit these legacy memory\nbarriers, thus keeping backward compatibility at the expense of slower\nperformances. However, users can opt-out by disabling the legacy memory\nbarriers.\n\nThis options is publicly exported in the system configuration header\nfile and can be overrode manually on a compilation unit basis by\ndefining `CONFIG_RCU_EMIT_LEGACY_MB' before including any liburcu files.\n\nThe usage of this macro requires to re-write atomic operations in term\nof the CMM memory model. This is done for the queue and stack APIs.\n\nChange-Id: Ia5ce3b3d8cd1955556ce96fa4408a63aa098a1a6\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "601922a81d884e16ff404cee7534ede56fb87d0a", "commit_date": "2023-08-14T19:46:29Z", "commit_message": "urcu/annotate: Add CMM annotation\n\nThe CMM annotation is highly experimental and not meant to be used by\nuser for now, even though it is exposed in the public API since some\nparts of the liburcu public API require those annotations.\n\nThe main primitive is the cmm_annotate_t which denotes a group of memory\noperations associated with a memory barrier. A group follows a state\nmachine, starting from the `CMM_ANNOTATE_VOID' state. The following are\nthe only valid transitions:\n\n  CMM_ANNOTATE_VOID -> CMM_ANNOTATE_MB (acquire & release MB)\n  CMM_ANNOTATE_VOID -> CMM_ANNOTATE_LOAD (acquire memory)\n  CMM_ANNOTATE_LOAD -> CMM_ANNOTATE_MB (acquire MB)\n\nThe macro `cmm_annotate_define(name)' can be used to create an\nannotation object on the stack. The rest of the `cmm_annotate_*' macros\ncan be used to change the state of the group after validating that the\ntransition is allowed. Some of these macros also inject TSAN annotations\nto help it understand the flow of events in the program since it does\nnot currently support thread fence.\n\nSometime, a single memory access does not need to be associated with a\ngroup. In the case, the acquire/release macros variant without the\n`group' infix can be used to annotate memory accesses.\n\nNote that TSAN can not be used on the liburcu-signal flavor. This is\nbecause TSAN hijacks calls to sigaction(3) and places its own handler\nthat will deliver the signal to the application at a synchronization\npoint.\n\nThus, the usage of TSAN on the signal flavor is undefined\nbehavior. However, there's at least one known behavior which is a\ndeadlock between readers that want to unregister them-self by locking\nthe `rcu_registry_lock' while a synchronize RCU is made on the writer\nside which has already locked that mutex until all the registered\nreaders execute a memory barrier in a signal handler defined by\nliburcu-signal. However, TSAN will not call the registered handler while\nwaiting on the mutex. Therefore, the writer spin infinitely on\npthread_kill(3p) because the reader simply never complete the handshake.\n\nSee the deadlock minimal reproducer below.\n\nDeadlock reproducer:\n```\n  #include <poll.h>\n  #include <signal.h>\n\n  #include <pthread.h>\n\n  #define SIGURCU SIGUSR1\n\n  static pthread_mutex_t rcu_registry_lock = PTHREAD_MUTEX_INITIALIZER;\n  static int need_mb = 0;\n\n  static void *reader_side(void *nil)\n  {\n  \t(void) nil;\n\n  \tpthread_mutex_lock(&rcu_registry_lock);\n  \tpthread_mutex_unlock(&rcu_registry_lock);\n\n  \treturn NULL;\n  }\n\n  static void writer_side(pthread_t reader)\n  {\n  \t__atomic_store_n(&need_mb, 1, __ATOMIC_RELEASE);\n  \twhile (__atomic_load_n(&need_mb, __ATOMIC_ACQUIRE)) {\n  \t\tpthread_kill(reader, SIGURCU);\n  \t\t(void) poll(NULL, 0, 1);\n  \t}\n  \tpthread_mutex_unlock(&rcu_registry_lock);\n\n  \tpthread_join(reader, NULL);\n  }\n\n  static void sigrcu_handler(int signo, siginfo_t *siginfo, void *context)\n  {\n  \t(void) signo;\n  \t(void) siginfo;\n  \t(void) context;\n\n  \t__atomic_store_n(&need_mb, 0, __ATOMIC_SEQ_CST);\n  }\n\n  static void install_signal(void)\n  {\n  \tstruct sigaction act;\n\n  \tact.sa_sigaction = sigrcu_handler;\n  \tact.sa_flags     = SA_SIGINFO | SA_RESTART;\n\n  \tsigemptyset(&act.sa_mask);\n\n  \t(void) sigaction(SIGURCU, &act, NULL);\n  }\n\n  int main(void)\n  {\n  \tpthread_t th;\n\n  \tinstall_signal();\n\n  \tpthread_mutex_lock(&rcu_registry_lock);\n  \tpthread_create(&th, NULL, reader_side, NULL);\n\n  \twriter_side(th);\n\n  \treturn 0;\n  }\n```\n\nChange-Id: I9c234bb311cc0f82ea9dbefdf4fee07047ab93f9\nCo-authored-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fcab075f67cf3e29e8556b4af1bbbfb210977ac2", "commit_date": "2023-08-14T19:39:20Z", "commit_message": "tests/unit/test_build: Quiet unused return value\n\nChange-Id: Ie5a18e0ccc4b1b5ee85c5bd140561cc2ff9e2fbc\nCo-authored-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9e4e7ad18c86159520b330fab94b93f7ab6d221c", "commit_date": "2023-08-14T19:39:17Z", "commit_message": "benchmark: Use uatomic for accessing global states\n\nGlobal states accesses were protected via memory barriers. Use the\nuatomic API with the CMM memory model so that TSAN can understand the\nordering imposed by the synchronization flags.\n\nChange-Id: I1bf5702c5ac470f308c478effe39e424a3158060\nCo-authored-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c8c32a5208d6e624f9ae9466196e355269c611d5", "commit_date": "2023-08-14T19:39:14Z", "commit_message": "tests: Use uatomic for accessing global states\n\nGlobal states accesses were protected via memory barriers. Use the\nuatomic API with the CMM memory model so that TSAN does not warn about\nnon-atomic concurrent accesses.\n\nAlso, the thread id map mutex must be unlocked after setting the new\ncreated thread id in the map. Otherwise, the new thread could observe an\nunset id.\n\nChange-Id: I1ecdc387b3f510621cbc116ad3b95c676f5d659a\nCo-authored-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2ea38794876c907639971035ed29c4e59964fd7f", "commit_date": "2023-08-14T19:39:11Z", "commit_message": "urcu-wait: Fix wait state load/store\n\nThe state of a wait node must be accessed atomically. Also, the action\nof busy loading until the teardown state is seen must follow a\nCMM_ACQUIRE semantic while storing the teardown must follow a\nCMM_RELEASE semantic.\n\nChange-Id: I9cd9cf4cd9ab2081551d7f33c0b1c23c3cf3942f\nCo-authored-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d18544842bdfbf2cba6c194a8e8d305ddf5e295e", "commit_date": "2023-08-14T19:39:04Z", "commit_message": "Add CMM memory model\n\nIntroducing the CMM memory model with the following new primitives:\n\n  - uatomic_load(addr, memory_order)\n\n  - uatomic_store(addr, value, memory_order)\n  - uatomic_and_mo(addr, mask, memory_order)\n  - uatomic_or_mo(addr, mask, memory_order)\n  - uatomic_add_mo(addr, value, memory_order)\n  - uatomic_sub_mo(addr, value, memory_order)\n  - uatomic_inc_mo(addr, memory_order)\n  - uatomic_dec_mo(addr, memory_order)\n\n  - uatomic_add_return_mo(addr, value, memory_order)\n  - uatomic_sub_return_mo(addr, value, memory_order)\n\n  - uatomic_xchg_mo(addr, value, memory_order)\n\n  - uatomic_cmpxchg_mo(addr, old, new,\n                       memory_order_success,\n                       memory_order_failure)\n\nThe CMM memory model reflects the C11 memory model with an additional\nCMM_SEQ_CST_FENCE memory order. The memory order can be selected through\nthe enum cmm_memorder.\n\n* With Atomic Builtins\n\nIf configured with atomic builtins, the correspondence between the CMM\nmemory model and the C11 memory model is a one to one at the exception\nof the CMM_SEQ_CST_FENCE memory order which implies the memory order\nCMM_SEQ_CST and a thread fence after the operation.\n\n* Without Atomic Builtins\n\nHowever, if not configured with atomic builtins, the following stipulate\nthe memory model.\n\nFor load operations with uatomic_load(), the memory orders CMM_RELAXED,\nCMM_CONSUME, CMM_ACQUIRE, CMM_SEQ_CST and CMM_SEQ_CST_FENCE are\nallowed. A barrier may be inserted before and after the load from memory\ndepending on the memory order:\n\n  - CMM_RELAXED: No barrier\n  - CMM_CONSUME: Memory barrier after read\n  - CMM_ACQUIRE: Memory barrier after read\n  - CMM_SEQ_CST: Memory barriers before and after read\n  - CMM_SEQ_CST_FENCE: Memory barriers before and after read\n\nFor store operations with uatomic_store(), the memory orders\nCMM_RELAXED, CMM_RELEASE, CMM_SEQ_CST and CMM_SEQ_CST_FENCE are\nallowed. A barrier may be inserted before and after the store to memory\ndepending on the memory order:\n\n  - CMM_RELAXED: No barrier\n  - CMM_RELEASE: Memory barrier before operation\n  - CMM_SEQ_CST: Memory barriers before and after operation\n  - CMM_SEQ_CST_FENCE: Memory barriers before and after operation\n\nFor load/store operations with uatomic_and_mo(), uatomic_or_mo(),\nuatomic_add_mo(), uatomic_sub_mo(), uatomic_inc_mo(), uatomic_dec_mo(),\nuatomic_add_return_mo() and uatomic_sub_return_mo(), all memory orders\nare allowed. A barrier may be inserted before and after the operation\ndepending on the memory order:\n\n  - CMM_RELAXED: No barrier\n  - CMM_ACQUIRE: Memory barrier after operation\n  - CMM_CONSUME: Memory barrier after operation\n  - CMM_RELEASE: Memory barrier before operation\n  - CMM_ACQ_REL: Memory barriers before and after operation\n  - CMM_SEQ_CST: Memory barriers before and after operation\n  - CMM_SEQ_CST_FENCE: Memory barriers before and after operation\n\nFor the exchange operation uatomic_xchg_mo(), any memory order is\nvalid. A barrier may be inserted before and after the exchange to memory\ndepending on the memory order:\n\n  - CMM_RELAXED: No barrier\n  - CMM_ACQUIRE: Memory barrier after operation\n  - CMM_CONSUME: Memory barrier after operation\n  - CMM_RELEASE: Memory barrier before operation\n  - CMM_ACQ_REL: Memory barriers before and after operation\n  - CMM_SEQ_CST: Memory barriers before and after operation\n  - CMM_SEQ_CST_FENCE: Memory barriers before and after operation\n\nFor the compare exchange operation uatomic_cmpxchg_mo(), the success\nmemory order can be anything while the failure memory order cannot be\nCMM_RELEASE nor CMM_ACQ_REL and cannot be stronger than the success\nmemory order. A barrier may be inserted before and after the store to\nmemory depending on the memory orders:\n\n Success memory order:\n\n  - CMM_RELAXED: No barrier\n  - CMM_ACQUIRE: Memory barrier after operation\n  - CMM_CONSUME: Memory barrier after operation\n  - CMM_RELEASE: Memory barrier before operation\n  - CMM_ACQ_REL: Memory barriers before and after operation\n  - CMM_SEQ_CST: Memory barriers before and after operation\n  - CMM_SEQ_CST_FENCE: Memory barriers before and after operation\n\n  Barriers after the operations are only emitted if the compare exchange\n  succeed.\n\n Failure memory order:\n  - CMM_RELAXED: No barrier\n  - CMM_ACQUIRE: Memory barrier after operation\n  - CMM_CONSUME: Memory barrier after operation\n  - CMM_SEQ_CST: Memory barriers before and after operation\n  - CMM_SEQ_CST_FENCE: Memory barriers before and after operation\n\n  Barriers after the operations are only emitted if the compare exchange\n  failed.  Barriers before the operation are never emitted by this\n  memory order.\n\nChange-Id: I213ba19c84e82a63083f00143a3142ffbdab1d52\nCo-authored-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "72d24c88ee075c8368fe57ee7e8fc66d99ce7e39", "commit_date": "2023-08-14T19:39:01Z", "commit_message": "urcu/arch/generic: Use atomic builtins if configured\n\nIf configured to use atomic builtins, implement SMP memory barriers in\nterm of atomic builtins if the architecture does not implement its own\nversion.\n\nChange-Id: Iddc4283606e0fce572e104d2d3f03b5c0d9926fb\nCo-authored-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "865024e9245c55286122413aaf7366dc06a00f27", "commit_date": "2023-08-14T19:38:57Z", "commit_message": "urcu/compiler: Use atomic builtins if configured\n\nUse __atomic_signal_fence(__ATOMIC_SEQ_CST) for cmm_barrier() if\nconfigured to use atomic builtins.\n\nChange-Id: Ib168b50f1e97a8da861b92d6882c56db230ebb2c\nCo-authored-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3afcf5a0407c69b32603a249e8e7b3d309584a85", "commit_date": "2023-08-14T19:38:53Z", "commit_message": "configure: Add --enable-compiler-atomic-builtins option\n\nIf the toolchain supports atomic builtins and the user ask for atomic\nbuiltins, use them for the uatomic API. This requires that the\ntoolchains used to compile the library and the user application supports\nsuch builtins.\n\nThe advantage of using these builtins is that they are well known\nsynchronization primitives by several tools such as TSAN.\n\nHowever, they may introduce redundant memory barriers, mainly on\nstrongly ordered architectures.\n\nChange-Id: Ia8e97112681f744f17816dbc4cbbec805a483331\nCo-authored-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c92c99041415698b57ca123e58a19b05189ae398", "commit_date": "2023-07-14T19:54:31Z", "commit_message": "Fix: tests/rcutorture: Put thread offline on busy-wait\n\nChange-Id: Ic12b7df5d70b474f1e87f0710d3a55e5f906c020\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0d48d10d15ca38fea1010456581b4840dbc9f888", "commit_date": "2023-07-14T19:12:08Z", "commit_message": "tests/regression/rcutorture: Use urcu-wait\n\npthread_cond_wait(3) can have spurious wakeups on some OS. To detect\nsuch spurious wakeup, a global variable is shared between the waiter and\nthe waker.\n\nWe can use urcu-wait instead.\n\nChange-Id: I6a2d2f3c9104ea23df16a7c8ba3557bb5d58306c\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b21d2eb5c48761a54e6868ed114aa256aee1c2cd", "commit_date": "2023-07-14T18:44:21Z", "commit_message": "tests/rcutorture: Factor out thread registration\n\nRegister the thread once at the begining of the update routine. Put the\nthread offline when doing anything that can block.\n\nChange-Id: I345e04ee2ef0b5ba2f065b8a3029dd0e6130037b\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a6ca497d47f123d2fa49675816d52b7541f3509c", "commit_date": "2023-07-14T17:20:29Z", "commit_message": "tests/regression/rcutorture: Add wait state\n\npthread_cond_wait(3) can have spurious wakeups. Fix this by polling a\nstate associated with the the wait.\n\nChange-Id: Iba034cba5f72ad88388d1b90a6093f4ae9f9beb9\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "542fb0dc9860863b1a869f9ad526da699b2179ff", "commit_date": "2023-07-14T17:14:25Z", "commit_message": "urcu-wait: Initialize node in URCU_WAIT_NODE_INIT\n\nC++ emits warnings with the URCU_WAIT_NODE_INIT() macro because the\nmember node is not initialized.\n\nFix this by initializing the node to null.\n\nChange-Id: I7ee3b35624ef61cab826e3668f111e2483ca3c05\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "29b2b11ef53eee2848dd06fba8c49003e17c539f", "commit_date": "2023-07-11T16:13:39Z", "commit_message": "Complete REUSE support\n\nThe SPDX identifiers [1] are a legally binding shorthand, which can be\nused instead of the full boiler plate text. This is the final step\ntowards implementing the full REUSE spec [2] to help with copyright and\nlicensing audits and compliance.\n\nThis will reduce a lot a manual work required for the licensing audit\nrequired in Debian on each update.\n\n[1] https://spdx.org/ids-how\n[2] https://reuse.software/tutorial/\n\nChange-Id: Ia014969f407043d4ac48f4a8f3639c860ca2aafb\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c5e71b137f1ea8e92b41315b8f5c9be5f38bf699", "commit_date": "2023-07-11T16:13:36Z", "commit_message": "extras/abi: license data files under CC-1.0\n\nThe SPDX identifiers [1] are a legally binding shorthand, which can be\nused instead of the full boiler plate text. This is another step towards\nimplementing the full REUSE spec [2] to help with copyright and\nlicensing audits and compliance.\n\nThis will reduce a lot a manual work required for the licensing audit\nrequired in Debian on each update.\n\nThese are generated files, use the CC-1.0 license to make their\nlicensing clear.\n\n[1] https://spdx.org/ids-how\n[2] https://reuse.software/tutorial/\n\nChange-Id: I2ac79f2646ced6c01bce67c1281a2d597ab0d890\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1c87adb3dde9011cc0ac576b5ec622a7c845a06a", "commit_date": "2023-07-11T16:13:32Z", "commit_message": "examples: use SPDX identifiers\n\nThe SPDX identifiers [1] are a legally binding shorthand, which can be\nused instead of the full boiler plate text. This is another step towards\nimplementing the full REUSE spec [2] to help with copyright and\nlicensing audits and compliance.\n\nThis will reduce a lot a manual work required for the licensing audit\nrequired in Debian on each update.\n\nRelicense all examples from 'Boehm-GC' to the more well-known and\nfunctionnaly identical 'MIT' license. This is possible since all the\nexamples were written by Mathieu Desnoyers and only a few trivial fixes\nfrom external contributors were applied over the years.\n\n[1] https://spdx.org/ids-how\n[2] https://reuse.software/tutorial/\n\nChange-Id: I052ab4fca0f8979113f3bae3b78982eb30f50c58\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce29b37132cef1c1c758e0862ac701e9bb756d29", "commit_date": "2023-07-11T16:13:29Z", "commit_message": "tests: use SPDX identifiers\n\nThe SPDX identifiers [1] are a legally binding shorthand, which can be\nused instead of the full boiler plate text. This is another step towards\nimplementing the full REUSE spec [2] to help with copyright and\nlicensing audits and compliance.\n\nThis will reduce a lot a manual work required for the licensing audit\nrequired in Debian on each update.\n\nFor files that lacked copyright and licensing information, I used the\nfollowing guidelines. Use the author from the git history and the test\nscripts license as stated in LICENSE, 'GPL-2.0-only'.\n\n[1] https://spdx.org/ids-how\n[2] https://reuse.software/tutorial/\n\nChange-Id: I23c23edeffe6f3448ad673034480de46c98b746b\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "acdb82a20ba20467b89c67aa44ca03da610513a9", "commit_date": "2023-07-11T16:13:25Z", "commit_message": "src: use SPDX identifiers\n\nThe SPDX identifiers [1] are a legally binding shorthand, which can be\nused instead of the full boiler plate text. This is another step towards\nimplementing the full REUSE spec [2] to help with copyright and\nlicensing audits and compliance.\n\nThis will reduce a lot a manual work required for the licensing audit\nrequired in Debian on each update.\n\n[1] https://spdx.org/ids-how\n[2] https://reuse.software/tutorial/\n\nChange-Id: Ia28ed8c14984ac9acd140ef544fd6e09b96fb03b\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d3d3857f678627e7bbfb5a8d6f3bc15cd2a694d9", "commit_date": "2023-07-11T16:13:22Z", "commit_message": "Public headers: use SPDX identifiers\n\nThe SPDX identifiers [1] are a legally binding shorthand, which can be\nused instead of the full boiler plate text. This is another step towards\nimplementing the full REUSE spec [2] to help with copyright and\nlicensing audits and compliance.\n\nThis will reduce a lot a manual work required for the licensing audit\nrequired in Debian on each update.\n\nFor files that lacked copyright and licensing information, I used the\nfollowing guidelines. Use the author from the git history and the main\nproject license 'LGPL-2.1-or-later'.\n\n[1] https://spdx.org/ids-how\n[2] https://reuse.software/tutorial/\n\nChange-Id: I31928c81be4821cca29b905d8a0a06de9bd0e1ec\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d001c88633f6a58e94eb73f4814976d13f61bd77", "commit_date": "2023-07-11T16:13:18Z", "commit_message": "Build system: use SPDX identifiers\n\nThe SPDX identifiers [1] are a legally binding shorthand, which can be\nused instead of the full boiler plate text. This is the first step\ntowards implementing the full REUSE spec [2] to help with copyright and\nlicensing audits and compliance.\n\nThis will reduce a lot a manual work required for the licensing audit\nrequired in Debian on each update.\n\nFor files that lacked copyright and licensing information, I used the\nfollowing guidelines. If a clear author could be determined from the git\nhistory use it, otherwise use 'EfficiOS Inc.'. For build system files,\nuse 'MIT', for documentation 'CC-BY-4.0' and for data files 'CC-1.0'.\n\n[1] https://spdx.org/ids-how\n[2] https://reuse.software/tutorial/\n\nChange-Id: Ie507130c00b95606dc439616fda4fd9b1d35353d\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "65eaf4b646f566324b92c25c8760a204bfbdffa8", "commit_date": "2023-07-05T15:22:02Z", "commit_message": "Fix: urcu-wait: add missing futex.h include\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: If33cc980f6f8510b8b7acb7038c2afbdab7699ed", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d2916ca5c0c441284ee19cc5b9ba4d2e532768bc", "commit_date": "2023-07-03T15:53:35Z", "commit_message": "doc: update GCC baseline to 4.8\n\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I7ac0c195bed75b210164e9f7a3cec87cf02ef37e", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0966bbf44b29d53f6dd32cdc7f357aa052262dbd", "commit_date": "2023-07-03T15:53:07Z", "commit_message": "doc: update FreeBSD tested version\n\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I263b7c3502995f0df45176f3618b6038f757c0b9", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1320034b0c89a97fab2f83fb35eb13c0fa83705a", "commit_date": "2023-07-03T15:52:46Z", "commit_message": "doc: Remove Solaris from tested platforms\n\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I85d99b928589c2c9943c5023dd86836c7da720f8", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dd8987a4052e51b87d2a399fec8997c5192f362f", "commit_date": "2023-07-03T15:22:20Z", "commit_message": "Revert \"compiler.h: Introduce caa_unqual_scalar_typeof\"\n\nThis reverts commit 67988e204d2c471b24cae61f3f8fedb4f9375034.\n\n_Generic requires C11, but liburcu supports C99.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I3b7c7a629cb9b7417caea4ff30b4844ff3d081e9", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0ef4782c2a106e09f2103b2b110a03e307d6aca8", "commit_date": "2023-07-03T15:20:27Z", "commit_message": "rculfhash: Use caa_container_of_check_null in cds_lfht_entry\n\nUse caa_container_of_check_null in cds_lfht_entry to allow removing\ncaa_unqual_scalar_typeof, which requires C11.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: Ifd8b05e666b8f1618a823b96a934a2357edb6b36", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4b3a7ebd5597b5e241c39110eb426f7832066308", "commit_date": "2023-07-03T15:17:04Z", "commit_message": "compiler.h: Introduce caa_container_of_check_null\n\nThe approach taken by caa_unqual_scalar_typeof requires use of _Generic\nwhich requires full C11 support. Currently liburcu supports C99.\nTherefore, this approach is not appropriate for now.\n\nInstead, introduce caa_container_of_check_null which returns NULL if the\nptr is NULL before offsetting by the member offset.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I0ac1cacc67d83bd3dad6fb6cd2e6595190735441", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "67988e204d2c471b24cae61f3f8fedb4f9375034", "commit_date": "2023-06-29T18:21:37Z", "commit_message": "compiler.h: Introduce caa_unqual_scalar_typeof\n\nAllow defining variables and cast with a typeof which removes the\nvolatile and const qualifiers.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: Ie2ea915a600a69cec3c2ff64209892bf0794cb70", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e58cdfcfc3884d003b7a0b097fd02c6969382edc", "commit_date": "2023-06-29T18:18:23Z", "commit_message": "Avoid calling caa_container_of on NULL pointer in cds_lfht macros\n\nThe cds_lfht_for_each_entry and cds_lfht_for_each_entry_duplicate macros\nwould call caa_container_of() macro on NULL pointer.  This is not a\nproblem under normal circumstances as the check in the for loop fails\nand the loop-statement is not called with invalid (pos) value.\n\nHowever AddressSanitizer doesn't like that and complains about this:\n\n    runtime error: applying non-zero offset 18446744073709551056 to null pointer\n\nMove the cds_lfht_iter_get_node(iter) != NULL from the cond-expression\nof the for loop into both init-clause and iteration-expression as\nconditional operator and check for (pos) value in the cond-expression\ninstead. Introduce the cds_lfht_entry() macro to eliminate code\nduplication.\n\nReported-by: Ond\u0159ej Sur\u00fd <ondrej@sury.org>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I9969c1e0bc0eefc8c90c0d8f17b2927f6a4feb2a", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "be152bdb1af23ed3781fbda231597bad750ee977", "commit_date": "2023-06-15T20:25:16Z", "commit_message": "Fix: revise urcu_read_lock_update() comment\n\nRead-side critical section nesting is tracked in lower-order bits\nand grace-period phase number use a single high-order bit.\n\nSigned-off-by: Li-Kuan Ou <k777k777tw@gmail.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I4fc185aa12a367e997fa20bf37793cfb2023c96f", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a0ddffb9027fa82f360fdd1eb06d27d0942cc8c", "commit_date": "2023-06-09T14:50:48Z", "commit_message": "Fix: uatomic powerpc comment about lwsync\n\nlwsync allows prior stores to be reordered against following loads.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I288900d3546779ee80d14a3d8d02c43d7b1c0e8c", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae0b76db76aa9614381625d93f228a0ec71d4222", "commit_date": "2023-06-05T19:44:54Z", "commit_message": "fix: aarch64: allow RHEL7 gcc 4.8.5-11\n\nThe patch for GCC upstream bug 63293[1] was backported in RHEL7 gcc\n4.8.5-11 package, allow building with this version.\n\n[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63293\n\nChange-Id: Ib5d8ef3c292a691167c5c4834c1e0bfdfe5b56b3\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8363ee3e56dd3532147aa5704cf8107801ded9d", "commit_date": "2023-05-31T16:05:10Z", "commit_message": "aarch64: Implement caa_cpu_relax as yield instruction\n\nUse the aarch64 \"yield\" instruction which has the wanted semantic for\ncaa_cpu_relax.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I9852ae3170d4cc2207f8120355b51c1d0e5e5506", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "106ed13754b1b836f4b59405f4e02aea4bf5eef0", "commit_date": "2023-03-23T19:44:57Z", "commit_message": "fix: warning 'noreturn' function does return on ppc\n\nOn a ppc64 system with gcc 9.5.0 I get the following error when building\nwith -O0 :\n\n/usr/include/urcu/uatomic/generic.h: In function 'void _uatomic_link_error()':\n/usr/include/urcu/uatomic/generic.h:53:1: warning: 'noreturn' function does return\n   53 | }\n      | ^\n\nSplit the inline function in 2 variants and apply the noreturn attribute\nonly on the builtin_trap one.\n\nChange-Id: I5ae8e764c4cc27af0463924a653b9eaa9f698c34\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6fa8b4f80f1d2efbc90fc6d2a5fb0dc1d7fd2a19", "commit_date": "2023-03-17T16:07:22Z", "commit_message": "Fix: use __noreturn__ for C11-compatibility\n\nThe noreturn convenience macro provided by stdnoreturn.h might get\nincluded before urcu headers, use __noreturn__ for better compatibility\nwith code using <stdnoreturn.h> header.\n\nSigned-off-by: Ond\u0159ej Sur\u00fd <ondrej@sury.org>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "da56d5cad05a280a8171ef51f185e6d0d29610f0", "commit_date": "2023-02-27T18:51:20Z", "commit_message": "Adjust shell scripts to allow Bash in other locations\n\nLinux-based OS for the most part provide Bash and being located in /bin,\nbut on other OS's the shell would be in another location. Utilize env(1)\nand allow it to be located elsewhere.\n\nSigned-off-by: Brad Smith <brad@comstyle.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I9d4d4a3feaf993754c64b740ea91e42b336ba2b4", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "11f3d1c24e6179abf8247611c5308f41d95389a1", "commit_date": "2023-02-25T14:43:53Z", "commit_message": "Add support for OpenBSD\n\n- Add OpenBSD to syscall compatibility header as appropriate.\n- Add function for retrieving the thread id in urcu_get_thread_id().\n- Rely on pthread cond variables for futex compatibility.\n\nIt builds on all of our archs and fully run time tested on amd64.\n\nSigned-off-by: Brad Smith <brad@comstyle.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I5cca5962ba3dc3113c9bd12e544b6e6f77dfdb61", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5a39857691dfd86c2b1fb3a7ba6161b98130ab1", "commit_date": "2023-02-14T15:41:43Z", "commit_message": "Bump version to 0.15.0-pre\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: Iabae31adc8a0f2e5dbb9133df4c27d7e1d6d2465", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "stable-0.14": [{"commit_oid": "df8a9108cb82436342ea72dda69a05baab1f5427", "commit_date": "2023-09-06T14:19:34Z", "commit_message": "LoongArch: Document that byte and short atomics are implemented with LL/SC\n\nBased on the LoongArch Reference Manual:\n\nhttps://loongson.github.io/LoongArch-Documentation/LoongArch-Vol1-EN.html\n\nSection 2.2.7 \"Atomic Memory Access Instructions\" only lists atomic\noperations for 32-bit and 64-bit integers. As detailed in Section\n2.2.7.1, LL/SC instructions operating on 32-bit and 64-bit integers are\nalso available. Those are used by the compiler to support atomics on\nbyte and short types.\n\nThis means atomics on 32-bit and 64-bit types have stronger forward\nprogress guarantees than those operating on 8-bit and 16-bit types.\n\nLink: https://github.com/urcu/userspace-rcu/pull/11#issuecomment-1706528796\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I01569b718f7300a46d984c34065c0bbfbd2f7cc6", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ec50625a74c3bd45ffd5e3020527618601b6198", "commit_date": "2023-09-06T14:19:34Z", "commit_message": "Add LoongArch support\n\nThis commit completes LoongArch support.\n\nLoongArch supports byte and short atomic operations,\nand defines UATOMIC_HAS_ATOMIC_BYTE and UATOMIC_HAS_ATOMIC_SHORT.\n\nSigned-off-by: Wang Jing <wangjing@loongson.cn>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I335e654939bfc90994275f2a4fad550c95f3eba4", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad79eaca302be2f16a525829df3f6a443110336c", "commit_date": "2023-07-14T17:21:54Z", "commit_message": "tests/regression/rcutorture: Add wait state\n\npthread_cond_wait(3) can have spurious wakeups. Fix this by polling a\nstate associated with the the wait.\n\nChange-Id: Iba034cba5f72ad88388d1b90a6093f4ae9f9beb9\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "77f79f53c014be557246088462613cb96d96db85", "commit_date": "2023-07-14T17:14:38Z", "commit_message": "urcu-wait: Initialize node in URCU_WAIT_NODE_INIT\n\nC++ emits warnings with the URCU_WAIT_NODE_INIT() macro because the\nmember node is not initialized.\n\nFix this by initializing the node to null.\n\nChange-Id: I7ee3b35624ef61cab826e3668f111e2483ca3c05\nSigned-off-by: Olivier Dion <odion@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a057adb7792c734a35a044909f93c4eb4757dba8", "commit_date": "2023-07-05T15:22:44Z", "commit_message": "Fix: urcu-wait: add missing futex.h include\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: If33cc980f6f8510b8b7acb7038c2afbdab7699ed", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e562864733bdf1572c3c22cd9dbff7031554edfc", "commit_date": "2023-07-04T15:42:09Z", "commit_message": "Adjust shell scripts to allow Bash in other locations\n\nLinux-based OS for the most part provide Bash and being located in /bin,\nbut on other OS's the shell would be in another location. Utilize env(1)\nand allow it to be located elsewhere.\n\nSigned-off-by: Brad Smith <brad@comstyle.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I9d4d4a3feaf993754c64b740ea91e42b336ba2b4", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b44ec5e311e451073580f5bcfb46eb3a16446ef4", "commit_date": "2023-07-04T15:42:09Z", "commit_message": "Add support for OpenBSD\n\n- Add OpenBSD to syscall compatibility header as appropriate.\n- Add function for retrieving the thread id in urcu_get_thread_id().\n- Rely on pthread cond variables for futex compatibility.\n\nIt builds on all of our archs and fully run time tested on amd64.\n\nSigned-off-by: Brad Smith <brad@comstyle.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I5cca5962ba3dc3113c9bd12e544b6e6f77dfdb61", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "de217ade9f82fcb2ddf39aeb23629af2ee3236f3", "commit_date": "2023-07-03T15:32:17Z", "commit_message": "Revert \"compiler.h: Introduce caa_unqual_scalar_typeof\"\n\nThis reverts commit 67988e204d2c471b24cae61f3f8fedb4f9375034.\n\n_Generic requires C11, but liburcu supports C99.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I3b7c7a629cb9b7417caea4ff30b4844ff3d081e9", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e40011fff9f0dce6996c25e889112f41a421260c", "commit_date": "2023-07-03T15:32:17Z", "commit_message": "rculfhash: Use caa_container_of_check_null in cds_lfht_entry\n\nUse caa_container_of_check_null in cds_lfht_entry to allow removing\ncaa_unqual_scalar_typeof, which requires C11.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: Ifd8b05e666b8f1618a823b96a934a2357edb6b36", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "664d450341874fbbe6bc85176ed3336eaecb9f4c", "commit_date": "2023-07-03T15:32:17Z", "commit_message": "compiler.h: Introduce caa_container_of_check_null\n\nThe approach taken by caa_unqual_scalar_typeof requires use of _Generic\nwhich requires full C11 support. Currently liburcu supports C99.\nTherefore, this approach is not appropriate for now.\n\nInstead, introduce caa_container_of_check_null which returns NULL if the\nptr is NULL before offsetting by the member offset.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I0ac1cacc67d83bd3dad6fb6cd2e6595190735441", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e36d48ad1a312aa3135849e83789701a8311ba44", "commit_date": "2023-06-29T18:21:43Z", "commit_message": "compiler.h: Introduce caa_unqual_scalar_typeof\n\nAllow defining variables and cast with a typeof which removes the\nvolatile and const qualifiers.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: Ie2ea915a600a69cec3c2ff64209892bf0794cb70", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5b373e008426545e2dbe7c9b427281aa144b55ef", "commit_date": "2023-06-29T18:18:29Z", "commit_message": "Avoid calling caa_container_of on NULL pointer in cds_lfht macros\n\nThe cds_lfht_for_each_entry and cds_lfht_for_each_entry_duplicate macros\nwould call caa_container_of() macro on NULL pointer.  This is not a\nproblem under normal circumstances as the check in the for loop fails\nand the loop-statement is not called with invalid (pos) value.\n\nHowever AddressSanitizer doesn't like that and complains about this:\n\n    runtime error: applying non-zero offset 18446744073709551056 to null pointer\n\nMove the cds_lfht_iter_get_node(iter) != NULL from the cond-expression\nof the for loop into both init-clause and iteration-expression as\nconditional operator and check for (pos) value in the cond-expression\ninstead. Introduce the cds_lfht_entry() macro to eliminate code\nduplication.\n\nReported-by: Ond\u0159ej Sur\u00fd <ondrej@sury.org>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I9969c1e0bc0eefc8c90c0d8f17b2927f6a4feb2a", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c44ee106d4e3a06921c54d66a2f21b12a2dcd507", "commit_date": "2023-06-15T20:25:49Z", "commit_message": "Fix: revise urcu_read_lock_update() comment\n\nRead-side critical section nesting is tracked in lower-order bits\nand grace-period phase number use a single high-order bit.\n\nSigned-off-by: Li-Kuan Ou <k777k777tw@gmail.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I4fc185aa12a367e997fa20bf37793cfb2023c96f", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "61e298a363bf543d8d219af4e5ecbf2b8b6f9d65", "commit_date": "2023-06-09T14:51:38Z", "commit_message": "Fix: uatomic powerpc comment about lwsync\n\nlwsync allows prior stores to be reordered against following loads.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nChange-Id: I288900d3546779ee80d14a3d8d02c43d7b1c0e8c", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce48fb1ee8d85565517808346faff94d431327a9", "commit_date": "2023-06-05T19:45:44Z", "commit_message": "fix: aarch64: allow RHEL7 gcc 4.8.5-11\n\nThe patch for GCC upstream bug 63293[1] was backported in RHEL7 gcc\n4.8.5-11 package, allow building with this version.\n\n[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63293\n\nChange-Id: Ib5d8ef3c292a691167c5c4834c1e0bfdfe5b56b3\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a405ac80dbda30d294e0055d91529afae604b93", "commit_date": "2023-03-23T19:46:26Z", "commit_message": "fix: warning 'noreturn' function does return on ppc\n\nOn a ppc64 system with gcc 9.5.0 I get the following error when building\nwith -O0 :\n\n/usr/include/urcu/uatomic/generic.h: In function 'void _uatomic_link_error()':\n/usr/include/urcu/uatomic/generic.h:53:1: warning: 'noreturn' function does return\n   53 | }\n      | ^\n\nSplit the inline function in 2 variants and apply the noreturn attribute\nonly on the builtin_trap one.\n\nChange-Id: I5ae8e764c4cc27af0463924a653b9eaa9f698c34\nSigned-off-by: Michael Jeanson <mjeanson@efficios.com>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "95ace1570f9176a0f3d10c3436657d1cc8426b8c", "commit_date": "2023-03-23T19:46:23Z", "commit_message": "Fix: use __noreturn__ for C11-compatibility\n\nThe noreturn convenience macro provided by stdnoreturn.h might get\nincluded before urcu headers, use __noreturn__ for better compatibility\nwith code using <stdnoreturn.h> header.\n\nSigned-off-by: Ond\u0159ej Sur\u00fd <ondrej@sury.org>\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}]}