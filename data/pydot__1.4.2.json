{"master": [{"commit_oid": "90936e75462c7b0e4bb16d97c1ae7efdf04e895c", "commit_date": "2021-07-30T18:57:01Z", "commit_message": "Exceptions: Move to separate module, New hierarchy\n\n- Module structure following example from NetworkX and other projects.\n  This adds an `import pydot` to `core.py`, which is cyclic/circular,\n  but necessary to make the exceptions available. Cyclic imports are\n  not uncommon and Python can handle this. Using the exceptions in\n  pydot source code now requires prefixing `pydot.`, for example:\n\n      raise pydot.Error(\"Message\")\n\n- Exception hierarchy changes. See ChangeLog and class docstrings in\n  this commit for details. Additional background notes:\n\n  - Removal of the unused exception class `InvocationException`: It was\n    introduced in 842173c of 2008 (v1.0.2), but got in disuse when\n    commits 9b3c1a1 and bc639e7 of 2016 (v1.2.0) fell back to using\n    `Exception` and `assert` (`AssertionError`) again. If we ever need\n    a custom class like this again in the future, it would probably\n    have a different signature for context data (e.g. a DOT string,\n    input and output), different parent class (or classes, e.g.\n    `PydotException, CalledProcessError`) and perhaps a different name\n    (e.g. ending in `...Error`), so no need to keep the old class\n    around for that.\n\nFurther additions to the exception hierarchy are likely before the\nfinal release of pydot 2.0.\n\nDiscussed in pydot/pydot#171, pydot/pydot#230 and pydot/pydot#271.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f250d65be3414d9647219b8d5ae62e1b0aa6af84", "commit_date": "2021-07-30T18:57:00Z", "commit_message": "Remove working directory check from test suite\n\nThis commit removes a check from the test suite that was introduced by\ncommit 50bd7308 ([pydot/pydot#164][164]). The check raised an error in\ncase the current working directory was the top of the source tree. The\npurpose was to prevent testing the pydot sources from the source tree\ninstead of the installed pydot.\n\nThe risk of that inadvertently happening is considerably lower now that\nthe sources were moved to subdirectory `src/`. Also note that [Python\n_running a script_ does not by default search the working directory][1]\nanyway.\n\nThe removal of the check makes the `--no-check` option redundant.\nHowever, we cannot remove it yet because that would cause an\n`unrecognized arguments` error in existing scripts. `argparse` does not\nsupport [deprecating CLI arguments][2] yet. So, instead we print a\ndeprecation warning. The remaining `parse_args()` and `import argparse`\ncan be removed in a later major release of pydot.\n\n[1]: https://chrisyeh96.github.io/2017/08/08/definitive-guide-python-imports.html\n[2]: https://bugs.python.org/issue39467\n[164]: https://github.com/pydot/pydot/issues/164", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c0ba69a1c1895ee3a3a8cf055fdf800d447e686d", "commit_date": "2021-07-30T18:54:39Z", "commit_message": "Restructure project directory layout\n\nThis commit brings the directory layout in line with current\nrecommendations by the Python Packaging Authority and others.\n\n    Before                        After\n\n    |-- setup.py                  |-- setup.py\n    |                             |-- src/\n    |                             |   `-- pydot/\n    |                             |       |-- __init__.py\n    |-- pydot.py                  |       |-- core.py\n    |-- dot_parser.py             |       `-- dot_parser.py\n    `-- test/                     `-- test/\n        `-- pydot_unittest.py         `-- pydot_unittest.py\n\nThere are many opinions on what would be the best directory layout for\na Python project, particularly on whether or not to use an additional\n`src/` layer. For example:\n\n- https://blog.ionelmc.ro/2014/05/25/python-packaging/#the-structure\n- https://github.com/pypa/packaging.python.org/issues/320\n- https://github.com/pypa/packaging.python.org/blob/7866cb69f1aa290a13c94da77cfb46a079cfcfa2/source/tutorials/packaging-projects.rst#a-simple-project\n- https://stackoverflow.com/questions/193161/what-is-the-best-project-structure-for-a-python-application\n\nSuffice to say, I can basically understand the arguments in favor of a\n`src/` layout and do not find the arguments against it strong enough\nnot to use it.\n\nMoved the dunder global variables (`__version__` etc.) to `__init__.py`\nto ensure they remain available to the user doing `import pydot`. (They\nwould not be included in `from pydot.core import *` because their names\nstart with an underscore and I did not want to start keeping `__all__`\njust for this.) A test for `pydot.__version__` is added to the\ntestsuite as well.\n\nA question that remains open for the moment is whether we should reduce\nthe weight of pydot \"core\" by splitting off functionality, most notably\nthe parsing functionality. Although that would reduce pydot loading\ntime, it would also make it more difficult for users to discover and\nuse that functionality. For details see:\nhttps://github.com/pydot/pydot/pull/271#issue-687616469\nFor now, things are kept as-is, namely that `pydot` always imports\n`dot_parser`. This is now accomplished via `__init__.py` and `core.py`.\n\nDiscussed in pydot/pydot#171, pydot/pydot#230 and pydot/pydot#271.\n\nSpecial thanks to Kostis Anagnostopoulos (@ankostis) for his advice.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4d45fff002bb9eb5c21152a2d32b135e7156b372", "commit_date": "2021-06-25T08:28:28Z", "commit_message": "Drop Python 2 and 3.4: Bump black target-version", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "439cff329b8903bd9e84acc96cceae387d7c9eda", "commit_date": "2021-06-25T08:28:25Z", "commit_message": "Drop Python 2 and 3.4: Clean up PY2-specific code\n\nJust a very basic cleanup, made with some help from 2to3.\n\nIncludes the removal of intermediairy variable `str_type`, which held\nthe string type for either Python 2 or 3, replacing it with the string\ntype for Python 3 `str`. The previous commit prepared for this by\nremoving the conflicting uses of the name `str` as function parameter\nnames.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "54f9c57ea7119144754fdbf8678d4f85e06b0587", "commit_date": "2021-06-25T08:28:12Z", "commit_message": "Stop using `str` as a function parameter name\n\n`dot_parser.py` currently has 6 functions that still use `str` as a\nparameter name. This will cause conflicts if inside the function body\na reference to Python's built-in [`str` type][1] needs to be made.\n\nSpecifically, as part of the clean up of old Python 2 code, the next\ncommit will introduce direct usage of the built-in `str` in two of\nthese functions. The concurrent use of `str` as a function parameter\nname would then lead to name collisions and errors such as:\n\n      File \"dot_parser.py\", line 349, in push_edge_stmt\n        elif isinstance(toks[2][0], str):\n    TypeError: isinstance() arg 2 must be a type or tuple of types\n\nCommit 842173cab already renamed the parameter for one particular\nfunction from `str` to `s` in 2008. This commit will now do the same\nfor the remaining functions.\n\nFurther notes:\n- None of the affected functions actually use the parameter (`str`, now\n  `s`) in their function bodies.\n- The functions themselves are passed to `pyparsing.setParseAction()`\n  as callback functions. The docstring of that method also uses the\n  parameter name `s` in the example callback signature. However, the\n  actual parameter name is irrelevant for pyparsing (2.4.7), as it uses\n  positional arguments when actually calling the callback.\n- The affected functions contain 3 format strings that use `{s}` as a\n  replacement field name. Other than perhaps being slightly disturbing\n  to the human reader, these do not actually collide with the function\n  parameters named `s`, so leaving them as-is for now. A future change\n  to f-strings would be a better way to resolve the confusion.\n\n[1]: https://docs.python.org/3/library/stdtypes.html#str", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5ccf7acc7023ea90a9ebb45fbf7329336b7fda83", "commit_date": "2021-06-25T08:18:17Z", "commit_message": "Drop Python 2 and 3.4: Update CI configuration\n\nSpecifically for AppVeyor:\n- Explicitely choose the image to be used (Visual Studio 2019), as\n  the default image (Visual Studio 2015) does not have Python 3.8 *in\n  Miniconda*. There is no image with Python 3.9 in Miniconda available\n  yet. [1]\n- Add `fast_finish` option [2] to prevent running subsequent jobs if\n  the first job fails.\n- Normally only test the oldest and the newest Python versions pydot\n  supports, which are currently Python 3.5 (EOL) and 3.9. However, now\n  using 3.6 instead of 3.5, because AppVeyor fails to install pyparsing\n  in 3.5, and using 3.8 instead of 3.9 because 3.9 is not available on\n  AppVeyor yet (see above).\n- Correct a typo in the `init` that prevented correct printing of\n  environment variables.\n\n[1]: https://www.appveyor.com/docs/windows-images-software/#miniconda\n[2]: https://www.appveyor.com/docs/build-configuration/#failing-strategy", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ca990981d0faee1e7f3bf4cffb652e8cfcb37c0a", "commit_date": "2021-06-25T08:17:34Z", "commit_message": "Drop Python 2 and 3.4: Update Metadata, ChangeLog\n\nThis starts a series of commits to drop support for Python 2 and 3.4 as\ndiscussed in [pydot/pydot#171][171] and [pydot/pydot#229][229].\n\n| Python version | Python EOL | PyPI 2020-05-02 | PyPI 2021-06-21 |\n|----------------|------------|-----------------|-----------------|\n| Python 2.7     | 2020-01-01 |             26% |             12% |\n| Python 3.4     | 2019-03-18 |              0% |              0% |\n| Python 3.5     | 2020-09-30 |             27% |              3% |\n| Python 3.6     | 2021-12    |             21% |             14% |\n| Python 3.7     | 2023-06    |             23% |             51% |\n| Python 3.8     | 2024-10    |              3% |             13% |\n| Python 3.9     | 2025-10    |              0% |              6% |\n| Python 3.10    | 2026-10    |               - |              0% |\n\nEOL : End of life, from End of security support on [Wikipedia][1].\nPyPI: Python Package Index statistics for pydot from [PyPIstats.org][2].\n\nWithout support for Python 2, wheel distributions of pydot can [no\nlonger be marked as \"universal\"][3], so removing that from `setup.cfg`.\n\n**USER FEEDBACK REQUESTED**\nWe are considering if pydot 2.0 should drop support for Python 3.5\nand 3.6 as well. If this would affect you, please leave a comment in\n[pydot/pydot#268][268].\n\n[1]: https://en.wikipedia.org/w/index.php?title=History_of_Python&oldid=1022680403#Table_of_versions\n[2]: https://pypistats.org/packages/pydot\n[3]: https://github.com/pypa/packaging.python.org/blob/44313e5db4d729eede0bcb91c08d6ec93e89c5c8/source/guides/dropping-older-python-versions.rst#dealing-with-the-universal-wheels\n[171]: https://github.com/pydot/pydot/issues/171#issuecomment-623147574\n[229]: https://github.com/pydot/pydot/pull/229\n[268]: https://github.com/pydot/pydot/issues/268", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "479bdcae788dcfa92ec3cf699b2878190ba390fe", "commit_date": "2021-06-21T15:02:04Z", "commit_message": "Switch to code formatter Black: Travis integration\n\nThis adds a new job for running `black` to our Travis CI continuous\nintegration configuration. See the previous commits for more details on\nBlack.\n\nIf `black` finds a problem with the formatting, its job will be marked\nas \"Failed\". A diff of the required changes can be found on Travis CI\nby clicking on job `black` and scrolling down the Job log. You may also\nrun `black` on your local machine to let it make the corrections for\nyou.\n\nThe new job is added to the default stage (`test`), meaning it will run\nalongside the regular test suite jobs. `black` is kept separate from\nthe test suite, because it only needs to run once, not on multiple\nPython versions and architectures.\n\nA failure reported by `black` will not stop the test suite jobs from\nrunning, but will result in the build as a whole to be marked \"Failed\"\nin the end, even if the other jobs all passed.\n\nUsing a separate Travis CI \"stage\" (named `lint`) was attempted, but\nconsidered inadequate:\n- Running stage `lint` *after* stage `test` meant long waiting for\n  what was actually the fastest job.\n- Running stage `lint` *before* stage `test` meant a minor formatting\n  issue could prevent the test suite from running at all.\n  - Defining stage `lint` as an `allowed_failure` meant its outcome\n    would become irrelevant for the outcome of the build as a whole,\n    i.e. the build would pass even if `lint` had failed.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9377e3b6ee6438591b4b2157755d1dee659ad092", "commit_date": "2021-06-12T21:32:45Z", "commit_message": "Switch to code formatter Black: Dev dependencies\n\nUsage of `extras_require` suggested by Kostis Anagnostopoulos:\n- https://github.com/pydot/pydot/pull/265#issuecomment-851714386", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cdbfc3e18713e8f9feced936aa212489fe46197f", "commit_date": "2021-06-12T21:31:06Z", "commit_message": "Switch to code formatter Black: Quotes, 2nd run\n\nLet `black` take care of the quotes as well, meaning a switch from\nsingle quotes to double quotes (except for where it would result in\nmore backslash escapes). Currently, `black` can only be configured to\neither enforce double quotes or skip this altogether, not to enforce\nsingle quotes.\n\nI had some doubts about this switch at first, but noticed that several\nother projects and their documentation examples have switched to using\ndouble quotes now. Holding on to a consistent use of single quotes\ncould become more of a burden, while offering only little benefit.\n\nChanges from single quotes to double quotes that were made manually:\n- Examples in `README.md`.\n- `pydot.py`, the `*_ATTRIBUTES` constants at the top, because they are\n  surrounded by `# fmt: off` and `# fmt: on` pragmas.\n\nNote this is all about quotes around Python strings in the pydot source\ncode and not at all related to quotes that are part of a DOT string.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "65988af05062bd21650134bc7087bb63030ab27e", "commit_date": "2021-06-12T20:05:45Z", "commit_message": "Switch to code formatter Black: Config and 1st run\n\n[Black, The Uncompromising Code Formatter][1] promises to save the\ndevelopers of `pydot` time and mental energy by taking control over\ncode formatting. With this commit, we will start to find out.\n\nWith `black` installed, you can now run `black .` in the top `pydot`\ndirectory and any formatting issues in pydot source files should get\ncorrected automatically:\n\n    ~/Development/pydot $ black .\n    reformatted dot_parser.py\n    reformatted setup.py\n    reformatted test/pydot_unittest.py\n    reformatted pydot.py\n    All done!\n    4 files reformatted.\n\nCheck out the documentation for more on the [Black code style][2] and\noptions for [integrating it with your editor or git pre-commit][3].\n\nThis commit contains:\n- New `pyproject.toml`: Configuration of `black`.\n- Changed `.py` files: Results of the first run of `black` 21.5b2.\n\nLine length is kept at 79 characters for now. This is my personal\npreference because it allows for reasonable font size when using a\nphone, side-by-side diffs on a small laptop screen or 3-way diffs on\nlarger screens.\n\nFor easier review of the formatting changes made by `black`, this\ncommit uses the `--skip-string-normalization` flag to prevent that\nsingle quotes are converted to double quotes already. The next commit\nwill drop that flag, so the results of that conversion are shown there.\n\nA later commit will take care of the CI integration.\n\nThanks to Kostis Anagnostopoulos for first suggesting `black` and to\nSebastian Kalinowski and Hrishikesh Terdalkar for giving their reviews\nas well.\n\nAlternatives that were rejected:\n- `yapf`: Not clearly better formatting than `black`. More\n  configuration options, but the cost of reaching agreement on all\n  those options might offset the benefits of using a code formatter.\n- `autopep8`: Focusses mainly on PEP 8 compliance, meaning that a lot\n  of other formatting issues would still need to be decided on\n  manually, reducing the benefits of using a code formatter.\n\nAs discussed in [pydot/pydot#265][265] and [pydot/pydot#267][267].\n\n[1]: https://pypi.org/project/black/\n[2]: https://black.readthedocs.io/en/latest/the_black_code_style/current_style.html\n[3]: https://black.readthedocs.io/en/latest/integrations/index.html\n[265]: https://github.com/pydot/pydot/pull/265\n[267]: https://github.com/pydot/pydot/pull/267", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5af44e0e60f6f3880003f6a58f1882f7bd86dc21", "commit_date": "2021-06-09T20:13:15Z", "commit_message": "Switch to code formatter Black: Preparations\n\n- Add/remove trailing commas in some collections to ensure/prevent\n  Black explodes the contents to a single item per line.\n- Wrap the `*_ATTRIBUTES` constants at the top of `pydot.py` in\n  `# fmt: off/on` pragmas to prevent they get exploded.\n- Merge some string literals that Black will put on a single line\n  anyway.\n- Two unrelated spelling and comment formatting corrections.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "746d7832ef54fe7d58f7916c20d57e62bb72cee7", "commit_date": "2021-05-28T15:15:31Z", "commit_message": "PEP8 compliance", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e48d90cf94e3f5498626b0715b83a23b4b655afd", "commit_date": "2021-02-16T10:14:45Z", "commit_message": "Back to development: 2.0.0", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}]}