{"master": [{"commit_oid": "1e1da7a963007d03a4e0e9a9e0ff17990bb1608d", "commit_date": "2023-08-24T08:56:21Z", "commit_message": "check for e820 conflict\n\nAdd support to check for overlaps with e820 entries.\nIn case the 64bit pci io window has conflicts move it down.\n\nThe only known case where this happens is AMD processors\nwith 1TB address space which has some space just below\n1TB reserved for HT.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ecc51f211f3edd4fcc79d38af56cf84283e4d8b1", "commit_date": "2023-08-24T08:56:21Z", "commit_message": "qemu: log reservations in fw_cfg e820 table\n\nWith loglevel 1 (same we use for RAM entries),\nso it is included in the firmware log by default.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "96a8d130a8c2e908e357ce62cd713f2cc0b0a2eb", "commit_date": "2023-08-24T08:56:21Z", "commit_message": "be less conservative with the 64bit pci io window\n\nCurrent seabios code will only enable and use the 64bit pci io window in\ncase it runs out of space in the 32bit pci mmio window below 4G.\n\nThis patch will also enable the 64bit pci io window when\n  (a) RAM above 4G is present, and\n  (b) the physical address space size is known, and\n  (c) seabios is running on a 64bit capable processor.\n\nThis operates with the assumption that guests which are ok with memory\nabove 4G most likely can handle mmio above 4G too.\n\nIn case the 64bit pci io window is enabled also assign more memory to\nprefetchable pci bridge windows and the complete 64bit pci io window.\n\nThe total mmio window size is 1/8 of the physical address space.\nMinimum bridge windows size is 1/256 of the total mmio window size.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bcfed7e270776ab5595cafc6f1794bea0cae1c6c", "commit_date": "2023-08-24T08:56:21Z", "commit_message": "move 64bit pci window to end of address space\n\nWhen the size of the physical address space is known (PhysBits is not\nzero) move the 64bit pci io window to the end of the address space.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "90eeb0c8558a1524836ec94aee11f4cc88b10c78", "commit_date": "2023-08-24T08:56:21Z", "commit_message": "detect physical address space size\n\nCheck for pae and long mode using cpuid.  If present also read the\nphysical address bits.  Apply some qemu sanity checks (see below).\nRecord results in PhysBits and LongMode variables.  In case we are not\nsure what the address space size is leave the PhysBits variable unset.\n\nOn qemu we have the problem that for historical reasons x86_64\nprocessors advertise 40 physical address space bits by default, even in\ncase the host supports less than that so actually using the whole\naddress space will not work.\n\nBecause of that the code applies some extra sanity checks in case we\nfind 40 (or less) physical address space bits advertised.  Only\nknown-good values (which is 40 for amd processors and 36+39 for intel\nprocessors) will be accepted as valid.\n\nRecommendation is to use 'qemu -cpu ${name},host-phys-bits=on' to\nadvertise valid physical address space bits to the guest.  Some distro\nbuilds enable this by default, and most likely the qemu default will\nchange in near future too.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "be84867613f791ea344d565d65a9ce85238e8533", "commit_date": "2023-08-24T08:56:21Z", "commit_message": "better kvm detection\n\nIn case kvm emulates features of another hypervisor (for example hyperv)\ntwo VMM CPUID blocks will be present, one for the emulated hypervisor\nand one for kvm itself.\n\nThis patch makes seabios loop over the VMM CPUID blocks to make sure it\nwill properly detect kvm when multiple blocks are present.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7a4003be25eae462f3c3d8aad96b57e34dc0c2b8", "commit_date": "2023-08-24T08:40:09Z", "commit_message": "esp-scsi: handle non-DMA SCSI commands with no data phase\n\nThe existing esp-scsi state machine checks for the STAT_TC bit to exit state 1\nbut in the case where there is no data phase, a non-DMA command is executed\nwhich doesn't set STAT_TC. This only works because QEMU currently always sets\nSTAT_TC just after issuing every SCSI command.\n\nUpdate the esp-scsi state machine so that in the case where there is no data\nphase, we immediately execute CMD_ICCS instead of waiting for STAT_TC to be\nset which will never happen with a non-DMA CMD_SELATN command.\n\nSigned-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>\nMessage-ID: <20230807065300.366070-4-mark.cave-ayland@ilande.co.uk>\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cf4b829f0c09153c504858d2f8426912907124d8", "commit_date": "2023-08-24T08:40:09Z", "commit_message": "esp-scsi: check for INTR_BS/INTR_FC instead of STAT_TC for command completion\n\nThe ESP SELATN command used to send SCSI commands from the ESP to the SCSI bus\nis not a DMA command and therefore does not affect the STAT_TC bit. The only\nreason this works at all is due to a bug in QEMU which (currently) always\nupdates the STAT_TC bit in ESP_RSTAT regardless of the state of the ESP_CMD_DMA\nbit.\n\nAccording to the NCR datasheet [1] the INTR_BS/INTR_FC bits are set when the\nSELATN command has completed, so update the existing logic to check for these\nbits in ESP_RINTR instead. Note that the read of ESP_RINTR needs to be\nrestricted to state == 0 as reading ESP_RINTR resets the ESP_RSTAT register\nwhich breaks the STAT_TC check when state == 1.\n\nThis commit also includes an extra read of ESP_INTR to clear all the interrupt\nbits before submitting the SELATN command to ensure that we don't accidentally\nimmediately progress to the data phase handling logic where ESP_RINTR bits have\nalready been set by a previous ESP command.\n\n[1] \"NCR 53C94, 53C95, 53C96 Advanced SCSI Controller\"\n    NCR_53C94_53C95_53C96_Data_Sheet_Feb90.pdf\n\nSigned-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>\nReviewed-by: Paolo Bonzini <pbonzini@redhat.com>\nMessage-ID: <20230807065300.366070-3-mark.cave-ayland@ilande.co.uk>\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "db50227d4e42057f8ff520777b36ab7a742a4bfc", "commit_date": "2023-08-24T08:40:09Z", "commit_message": "esp-scsi: flush FIFO before sending SCSI command\n\nThe ESP FIFO is used as a buffer for DMA requests and so isn't guaranteed to\nbe empty in the case of SCSI errors or a mixed DMA/non-DMA request. Flush the\nFIFO before sending a SCSI command to guarantee that it is correctly\npositioned at the start of the FIFO.\n\nSigned-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>\nReviewed-by: Paolo Bonzini <pbonzini@redhat.com>\nReviewed-by: Philippe Mathieu-Daud\u00e9 <philmd@linaro.org>\nMessage-ID: <20230807065300.366070-2-mark.cave-ayland@ilande.co.uk>\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "774a823a966cdc5d31ddc11af2b7b4f2c250ffdd", "commit_date": "2023-08-24T08:32:06Z", "commit_message": "Increase BUILD_MAX_E820 to 128\n\nFor platforms with high number of numa nodes, 32 e820 entries are not\nenough. Linux kernel sets the maximum e820 entries to a base value of\n128. Setting BUILD_MAX_E820 to 128 to be in sync with this base value.\n\nSigned-off-by: Tony Titus <tonydt@amazon.com>\nMessage-ID: <20230728044148.58041-1-tonydt@amazon.com>\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1281e340ad1d90c0cc8e8d902bb34f1871eb48cf", "commit_date": "2023-06-22T02:02:32Z", "commit_message": "ahci: handle TFES irq correctly\n\nAccording to AHCI 1.3.1, 5.3.8.1 RegFIS:Entry, if ERR_STAT is set in the\nreceived FIS, the HBA shall jump to state ERR:FatalTaskfile, which will\nraise a TFES IRQ.\n\nThis means that if ERR_STAT is set in the recevied FIS, PxIS.TFES will\nbe set, without either PxIS.DHRS or PxIS.PSS being set.\n\nSeaBIOS function ahci_port_setup() will try to identify an AHCI device\nby sending an ATAPI identify device command. However, such a command\nwill be aborted with ERR_STAT set for a regular (non-ATAPI) device.\n\nahci_command() already performs the correct error recovery steps when\nstatus is correctly set, so simply modify ahci_command() to read the\ncorrect status when PxIS.TFES is set.\n\nIt is safe to read PxTFD when PxIS.TFES is set, even for systems with a\nport multiplier, see AHCI 1.3.1, 9.3.7 PxTFD Register Information:\n\"When a taskfile error occurs (PxIS.TFES is set to '1'), the host may\nrefer to the values in PxTFD. The values in PxTFD at this time are\nguaranteed to correspond to the device that reported the taskfile error\ncondition.\"\n\nWithout this, each boot will be delayed by 32 seconds, waiting for the\nAHCI command to timeout.\n\nSigned-off-by: Niklas Cassel <niklas.cassel@wdc.com>\nTested-by: Gerd Hoffmann <kraxel@redhat.com>\nAcked-by: Gerd Hoffmann <kraxel@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cd933454b5e3e1f86379a44b5ae1852c2a01a485", "commit_date": "2023-06-13T15:11:25Z", "commit_message": "virtio-blk: Fix integer overflow for large max IO sizes\n\nWhen the maximum IO size supported by the virtio-blk backend is large\nenough (>= 32MiB for 512B sectors), the computed blk_num_max will\noverflow. In particular, if it's a multiple of 32MiB, blk_num_max\nwill end up as zero, causing IO requests to fail.\n\nThis is triggered by e.g. the SPDK virtio-blk vhost-user backend.\n\nTo fix it, just limit blk_num_max to 65535 before converting to u16.\n\nSigned-off-by: Lukas Stockner <lstockner@genesiscloud.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4db444b9a78abf9f6dc981f0e79db749765dc6e8", "commit_date": "2023-06-13T15:01:34Z", "commit_message": "Fix high memory zone initialization in CSM mode\n\nmalloc_high() cannot allocate any memory in CSM mode due to an empty\nZoneHigh. SeaBIOS cannot find any disk to boot from because device\ninitialization fails.\n\nThe bug was introduced in 1.16.1 (commit dc88f9b) when the meaning of\nBUILD_MAX_HIGHTABLE changed but CSM code was not updated. This patch\nreverts to the previous behavior by using BUILD_MIN_HIGHTABLE in CSM\nmethods.\n\nSigned-off-by: Jos\u00e9 Mart\u00ednez <xose@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "be7e899350caa7b74d8271a34264c3b4aef25ab0", "commit_date": "2023-05-05T07:05:53Z", "commit_message": "disable array bounds warning\n\nThe segmented pointer casting magic confuses gcc, recent versions\nthrow array bound warnings.  Disable the warning.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}]}