{"0.18.1_release": [{"commit_oid": "44250a1f519013af43422f7f1c3defb04a9218a1", "commit_date": "2023-08-31T16:27:15Z", "commit_message": "v0.18.1 bugfix release", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e703db3c56712f9746d1403070753c06ca7189b7", "commit_date": "2023-08-31T16:25:19Z", "commit_message": "Replace FindLibZ with cmake builtin ZLIB\n\nBetter to use standard package location code over our own stuff when\npossible.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d790af130bfde2853ecdf70ac036e111bb65ba5", "commit_date": "2023-08-31T16:25:19Z", "commit_message": "Link binaries against zlib\n\nCommit 1181c12f (\"Parse kernel configuration\") placed an indirect link\ndependency on zlib. This makes linking fail on system with tighter\ncontrols on linking such as nixos.\n\nFix by directly declaring the dependency and directly linking against\nzlib.\n\nThis closes #2598.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44250a1f519013af43422f7f1c3defb04a9218a1", "commit_date": "2023-08-31T16:27:15Z", "commit_message": "v0.18.1 bugfix release", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e703db3c56712f9746d1403070753c06ca7189b7", "commit_date": "2023-08-31T16:25:19Z", "commit_message": "Replace FindLibZ with cmake builtin ZLIB\n\nBetter to use standard package location code over our own stuff when\npossible.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d790af130bfde2853ecdf70ac036e111bb65ba5", "commit_date": "2023-08-31T16:25:19Z", "commit_message": "Link binaries against zlib\n\nCommit 1181c12f (\"Parse kernel configuration\") placed an indirect link\ndependency on zlib. This makes linking fail on system with tighter\ncontrols on linking such as nixos.\n\nFix by directly declaring the dependency and directly linking against\nzlib.\n\nThis closes #2598.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44250a1f519013af43422f7f1c3defb04a9218a1", "commit_date": "2023-08-31T16:27:15Z", "commit_message": "v0.18.1 bugfix release", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e703db3c56712f9746d1403070753c06ca7189b7", "commit_date": "2023-08-31T16:25:19Z", "commit_message": "Replace FindLibZ with cmake builtin ZLIB\n\nBetter to use standard package location code over our own stuff when\npossible.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d790af130bfde2853ecdf70ac036e111bb65ba5", "commit_date": "2023-08-31T16:25:19Z", "commit_message": "Link binaries against zlib\n\nCommit 1181c12f (\"Parse kernel configuration\") placed an indirect link\ndependency on zlib. This makes linking fail on system with tighter\ncontrols on linking such as nixos.\n\nFix by directly declaring the dependency and directly linking against\nzlib.\n\nThis closes #2598.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}], "master": [{"commit_oid": "45b5fec172e9168cf1699cb2e495abe75085a535", "commit_date": "2023-09-27T07:07:37Z", "commit_message": "Fix incorrect variable name in the documentation\n\nThe environment variable controlloing the max string length is\nBPFTRACE_STRLEN, not BPFTRACE_STR_LEN.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4629b3ccb139a95be497f24d55d2ffcbe995d2ca", "commit_date": "2023-09-22T07:34:52Z", "commit_message": "Correct some printf types in runtimes tests", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38b0396036b6ce53baf9c29b96b89320235e6135", "commit_date": "2023-09-22T07:34:52Z", "commit_message": "Add jiffies builtin with bpf_jiffies64", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6b70a3e068f92e7375b8a310223ec56e540b6aa5", "commit_date": "2023-09-19T10:58:10Z", "commit_message": "Add pid and host targeting for uprobes/uretprobes (#2757)\n\nThis allows users to specify a single wildcard in place of the\r\nlibrary_path to either target the whole host or a process's address\r\nspace if a PID is also provided.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "192c87a82174a9bd1f0661a963d381f88d69aef9", "commit_date": "2023-09-19T10:12:54Z", "commit_message": "v0.19.0 release", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12c463e8ff71bb1423243cbc3d23a7c4d59d5b8b", "commit_date": "2023-09-15T08:43:25Z", "commit_message": "ClangParser: improve detection of unknown typedefs\n\nWe are seeing failures of some simple scripts using manual includes:\n\n    # cat script.bt\n    #include <linux/skbuff.h>\n    BEGIN {}\n\n    # bpftrace script.bt\n    [...]\n    /lib/modules/[...]/ibt.h:71:10: error: use of undeclared identifier 'true'\n    [...]\n    /lib/modules/[...]/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n\nLet's improve our parsing of undefined typedefs from Clang diagnostic\nmessages to be able to pull those typedefs from BTF.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "63af82c539ceb5f2d8004b939b95b397f8fabea4", "commit_date": "2023-09-15T08:43:25Z", "commit_message": "CI: temporarily disable biosnoop.bt test\n\nGitHub Actions runners seem to have updated kernel and the old version\nof `biosnoop.bt` is no longer necessary. Unfortunately, it looks like\nthis is the case for some runners only, so we cannot universally use\nneither the old nor the new variant.\n\nLet's disable the test for now and revisit later when all runners are\nupdated.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d724b52e19a759750d6e82a71d8cadbf3e117461", "commit_date": "2023-09-11T05:01:47Z", "commit_message": "Improve runtime test filtering\n\n- Also check the TEST_FILTER env variable to users can filter when\n  running `sudo make runtime-tests`\n- Use a partial regex instead of exact match\n- Add documentation on how to use it", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "28b8a428d28582d8b9a96bafc07a8fd6bf0a6056", "commit_date": "2023-09-08T03:41:40Z", "commit_message": "Increase timeout for usdt runtime test (#2758)\n\nThis test could take longer due to iterating over all pids on the host.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ea13e0d3b29c6a61840314d0da9f2083e3a9f71e", "commit_date": "2023-09-06T06:50:43Z", "commit_message": "Cleanups following on from nsecs(monotonic) implementation", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3ba0b74e7ae4cb5039de7b01e9b8d4dedfa5956c", "commit_date": "2023-09-06T05:58:44Z", "commit_message": "USDT: Enable targeting all pids/paths on a host\n\nThis utilizes the single wildcard `*` for the binary_path/library_path\nvalue to target all running pids on the host.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6e4318a2005992df121c6d25412c725e1cfb6d1", "commit_date": "2023-09-05T15:31:44Z", "commit_message": "appimage: Trim appimage size (#2749)\n\nThis commit trims the appimage size down to ~140M (down from ~300M)\r\nby excluding unnecessary files.\r\n\r\nThis brings the regression from the semi-static build down to ~3x\r\n(143/46.6).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9da81a4d61c60baa205a6465acabf15bf38c3824", "commit_date": "2023-09-05T10:27:05Z", "commit_message": "[docs] consolidate test documentation", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e32fdb3af87ea9afc571e8df626e9172ef322c3c", "commit_date": "2023-09-04T13:49:28Z", "commit_message": "Support embedded nix builds (#2736)\n\nThis adds support for building bpftrace as an appimage. See the\r\ndocumentation update in nix.md in the commit for usage.\r\n\r\nThis is intended to replace the current semi-static embedded build.\r\nThis approach has both pros and cons over the semi-static embedded build.\r\nFor one, the appimage is actually fully static (as it bundles the\r\nnecesssary libc). So it's more likely to work on more systems.\r\n\r\nThe downside is that the appimage is a ~10x larger binary than the\r\nsemi-static binary. The appimage also requires fuse to work (which most\r\nsystems should support). It's takes ~1s longer to start up which I don't\r\nthink is a huge deal.\r\n\r\nThis closes #2721.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f7ae0c3268417a26baf656086b169396b35de814", "commit_date": "2023-09-04T13:47:26Z", "commit_message": "ci: Cancel previous workflow runs if a new one is started\n\nShould help reduce the amount of redundant jobs in flight. This will\nmake the latest runs complete faster b/c they will not be queued behind\nstale/irrelevant runs.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "529ef55e7fa64f23eb734f984a6d4867eabd071b", "commit_date": "2023-09-04T13:46:58Z", "commit_message": "codeql: Use nix for codeql analysis\n\nThis gives us tightly pinned dependencies. If we change flake.nix:\ncodeql, ci, end developer builds, and appimages are all updated in sync.\nThis is a really nice property.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "420b053730846960f8c6afca3a934a602448251b", "commit_date": "2023-09-01T13:59:27Z", "commit_message": "scripts: create-assets.sh: Copy instead of hard link\n\nBefore, I was getting:\n\n```\n$ ./scripts/create-assets.sh\nUsing '/tmp/tmp.q9BHGxFIRP' as assert dir\nCreating tools archive\nCreating man archive\nCreating bundle\nln: failed to create hard link '/tmp/tmp.q9BHGxFIRP/tmp/bin/bpftrace' => 'bpftrace': Invalid cross-device link\n```\n\nProbably b/c my bpftrace repo is on my root fs and /tmp is on a tmpfs\nmount.\n\nFix by using copy.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d186daddbcdb9135f0730da17ecdba30ddd40225", "commit_date": "2023-09-01T05:35:05Z", "commit_message": "Runtime tests runner: remove debugging messages\n\nWhen adding support for multiple BEFORE clauses via commit f6f041e7\n(\"tests: teach runtime runner about multiple before clauses\"), we left\nsome debugging prints. Remove them as they pollute the tests output.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eb95b6b86c4b65b2d8e6836dc22f4ae6fcf8e32e", "commit_date": "2023-09-01T05:35:05Z", "commit_message": "After on call.skboutput was incorrect", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5262edc07ab80f77db10b288391bbf7339db833f", "commit_date": "2023-09-01T05:35:05Z", "commit_message": "Print output of BEFORE/AFTER on tests fail\n\nIf bpftrace is waiting for the BEFORE/AFTER clause to do something and\nit doesn't do it, it's good to know why.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb6cdc5946c27ef080dafb8204c4b6a70e1169b0", "commit_date": "2023-09-01T05:34:20Z", "commit_message": "Adding -vv help description\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f2d6896789c9d67a094ca1262c66451a40b0a46", "commit_date": "2023-08-31T10:29:15Z", "commit_message": "[man] update variants for USDT\n\nThis is to match the reference_guide.md", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "908ae0d73fc259731a3b9a7617d47e46d7c70ca0", "commit_date": "2023-08-31T10:28:20Z", "commit_message": "Correcting parameters to match expected string of runtime test\n\nPlease refer the github discussion for details.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3d29740108c64ddd573737e5747ab1a59140c0f2", "commit_date": "2023-08-31T05:58:40Z", "commit_message": "iter: Skip structures with '__safe_trusted' suffix\n\nIf kernel >= 6.2, there is a warning with 'bpftrace -l' command:\n\n    $ sudo bpftrace -l | grep iter:\n    WARNING: The kernel contains bpf_iter__task__safe_trusted struct but does\n    not support loading an iterator program against it. Please report this bug.\n    iter:bpf_link\n    iter:bpf_map\n    iter:bpf_map_elem\n    iter:bpf_prog\n    iter:bpf_sk_storage_map\n    iter:cgroup\n    iter:ipv6_route\n    iter:ksym\n    iter:netlink\n    iter:sockmap\n    iter:task\n    iter:task_file\n    iter:task_vma\n    iter:tcp\n    iter:udp\n    iter:unix\n\nkernel commit 6fcd486b3a0a(\"bpf: Refactor RCU enforcement in the verifier.\")\nadd 'struct bpf_iter__task__safe_trusted':\n\n    $ bpftool btf dump file /sys/kernel/btf/vmlinux format c | grep bpf_iter__task\n    struct bpf_iter__task {\n    struct bpf_iter__task_file {\n    struct bpf_iter__task_vma {\n    struct bpf_iter__task__safe_trusted {\n\nThis commit skips structs with '__safe_trusted' suffix.\n\nSigned-off-by: Rong Tao <rongtao@cestc.cn>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8bcf5bf4fe1dc9ee792944a7c37f5cd5badbf2dd", "commit_date": "2023-08-29T11:04:53Z", "commit_message": "test: dev_queue_xmit() made static inline\n\ndev_queue_xmit() is a wrapper for __dev_queue_xmit().\nmodifying kfunc trace to __dev_queue_xmit().\n\nCommit reference in Linux: c526fd8\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "70c25e806b732a7201a09b440ef306bdaa0f0e1e", "commit_date": "2023-08-28T17:15:35Z", "commit_message": "test: updating dependency for builtin & call tests\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f676cc812e77f2332b7edfda5beb1e79b459cc14", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Update CHANGELOG (int <-> int array casting)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "582f05c28e271b06bcfda4521235ef3b770e4f53", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Document casting ints to int arrays\n\nAdd examples of casts to both the Reference guide and manpage.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "627a72595fbf4e114686d213a7d49421d9da4f73", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Support casting integer arrays to integers\n\nIt is only possible to cast the entire array to an integer of the same\nsize. The main purpose is to allow conversion of byte arrays such as\nthose returned by the 'pton' builtin:\n\n    kfunc:tcp_connect\n    {\n        if (args->sk->__sk_common.skc_daddr == (uint32)pton(\"127.0.0.1\"))\n            ...\n    }\n\nSince arrays are internally stored as pointers, the codegen for this\njust reinterprets the pointer to the expected integer size and loads the\ndata as an integer (by a direct load or by an additional proberead).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "77abbc3cc96ab2124007d11328317dcfd8a141d2", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Casting to arrays: auto-determine number of elems\n\nSupport omitting the array size when casting to arrays as it can be\ncomputed automatically in semantic analyser.\n\nE.g. for `(int8[])42`, the array will have 8 elements (since ints are by\ndefault 64-bit).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "450e61b079eb50c977bb03ddfd307f3fa899ec7c", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Support casting integers to integer arrays\n\nThe syntax is the same as for other casts:\n\n    $array = (int8[8])42;\n\nFor now, it is only possible to cast integers to integer arrays. Both\nthe cast value and the target array must have the same size.\n\nThe integer being cast is copied to the BPF stack and the pointer to it\nis then reinterpreted as the target array pointer.\n\nThis, in combination with recently added array comparison, allows to\ncompare values which are stored under different types in kernel.\nE.g., IP addresses are represented with 32-bit int in \"struct sock\" [1]\nbut with byte array in TCP tracepoints [2]. This feature allows to\ncompare them:\n\n    kfunc:tcp_connect\n    {\n        @ = args->sk->__sk_common.skc_daddr;\n    }\n    tracepoint:tcp:tcp_rcv_space_adjust\n    {\n        // map values are always 64-bit so first cast to uint32\n        // and then to the target array\n        if ((uint8[4])(uint32)@ == args->daddr)\n        {\n            ...\n        }\n    }\n\n[1] https://elixir.bootlin.com/linux/v6.4/source/include/net/sock.h#L167\n[2] https://elixir.bootlin.com/linux/v6.4/source/include/trace/events/tcp.h#L64", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "53f51694da554a0ff0636eec0e1d63b232895534", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Parser: refactor simple types\n\nSplit simple types into integer types and builtin types. This is useful\nas it will allow special treatment of integer types and their usage in\nconstructions where builtin types don't make sense (e.g. arrays).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ec1eb1b9ff72e502d781055ec2e3f38eb6e40191", "commit_date": "2023-08-24T21:16:25Z", "commit_message": "Add FUNDING.yml\n\nAs discussed during office hours, it would be useful if we have a way\nfor sponsors to donate money. We may need to pay down some infra costs\nin the near term.\n\nI looked at a few options and it looked like OpenCollective was the most\nstraightforward. They can do fiscal hosting which means they'll deal\nwith all the tax stuff. But in exchange they take 10%. Not too bad (but\nalso not 0%).\n\nThis is the collective: https://opencollective.com/bpftrace", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba258818d57d6c948e4cebe4022c1058904e44a3", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "docs: Update developers.md", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "77de3c69d762a6cebac7c1ddacb16349df25e765", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "scripts: Update update_codegen_tests.sh\n\nUpdate to use nix infra so it matches the CI.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "16f982d3cd886dad6c7080103f2fa695946b7c6e", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: Unbuffer test output\n\nRunning headless in CI seems to cause buffering. While not a big deal\ngenerally speaking, it's kinda annoying when you're debugging CI and\nstaring at the output.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "430dd5b64c7e5a0ea4ce9b9c616fa30590da1813", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "ci: Migrate ci.yml to new nix infra\n\nThis should make it considerably easier to run the CI locally.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f56caa0b655d4ae12965ece8da04987a24708162", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "ci: Add ci.py\n\nThis script will serve as the new entrypoint for the ci.yml workflow.\nIt's intended to replace the current docker setup in favor of a more\ncacheable and more easily reproducible system via the new nix flake\ninfra.\n\nNote that this script is designed to be run locally on basically any\nlinux system _as well_ as in CI.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c72215aa4ebb189ae5e1abefae4bef909dafc98", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: Use /usr/bin/env to find interpreter\n\nThis makes the tests use nix-provided binaries. It's also just more\ncorrect to specify interpreters this way.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f2af079aa992458d04de3038827a89164269fa8", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "nix: Add runtime test dependencies to devshells\n\nThe runtime tests require a few extra packages to be installed. A bunch\nof test cases will `cat`, `tail`, `awk`, etc. at runtime, so the tools\nneed to be present.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "56bac0ddc20003478938ea9dd59d6891a039a314", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "runtime: runner: Propagate PATH\n\nNix does a lot of funny things to PATH, so it's important to propagate\nthat into the test run.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5c7d98e1f739da9a387db53234f9e056c032eabf", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: child: Fix childproc.multi_exec_match\n\nRewrite test to:\n\n* Not throw exceptions on failure (gtest does not like them)\n* Simplify symlinking (no chdir manipulation)\n* And work in nix env (where the PATH was overflowing the 2048 byte\n  buffer)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "33a6ee4d31b7d27f80b59341c26a3fdbee652e68", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: runtime: Delete software_order test\n\nThat test was historically flaky. And it's acting up again. So delete\nit. Make the remaining software probe test use a more reliable event.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c5432c24d227a8e9aaf01fe84e67f1e789326de", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: runtime: Fixup string trunc tests for nix env\n\nDuring this test we can race with other execve's. Some of those paths\nmay be rooted at /nix. We don't actually care about if it's /nix or\n/bin, just that the strings are truncated.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "94bcb5931d3de72a3fba251b33f51bb85a1b5045", "commit_date": "2023-08-23T07:20:57Z", "commit_message": "add notes on invocation mode", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3217b9456a1d52b67ab66260405582bb10d8cba6", "commit_date": "2023-08-22T13:12:06Z", "commit_message": "Reference Guide: Remove duplicate sections", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0fc58ac1ed1f173d796f395f24451cd01c572d4", "commit_date": "2023-08-22T13:12:06Z", "commit_message": "Add access to CLOCK_MONOTONIC with nsecs(monotonic)\n\nThis lets users explicitly request CLOCK_MONOTONIC when it is desired to\nget a timestamp exclusive of suspend time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb389ca34451673619fd1abd66d22e4cf4c41990", "commit_date": "2023-08-22T13:12:06Z", "commit_message": "Tests: Add expected_error option to semantic_analyser::test()\n\nAlso remove some optional parameters to make it easier to understand\nwhich test() overload is being used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46dd1ab76701a6bd3f7b1410335f4e6f229f131a", "commit_date": "2023-08-21T16:13:21Z", "commit_message": "test: codegen: Make kfunc targets determinstic\n\nBefore, codegen tests tried to look at the host's actual tracefs for\navailable_filter_functions. This would silently fail in most developer\nenvs as we don't usually run codegen tests as root. However, in CI, they\nactually ran as root so reads succeeded. This caused difficult-to-debug\nskew.\n\nFix by mocking out the filesystem access so tests are consistent no\nmatter where they are run.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6626dfa9d73540a013611cd1063a518d749a4a59", "commit_date": "2023-08-18T17:23:53Z", "commit_message": "test: codegen: Test both rolled and unrolled codegen\n\nThe previous logic was a little buggy. It looks like the intention was\nto check if the host supports loops and only test the codegen path that\nthe host supports. It's unclear if that logic actually worked, as it\nkinda layered on MockBPFfeature.\n\nIn any case, it's better to test both codegen codepaths where possible.\n\nAlso move both test cases into the same file so they can share the\nprogram definition.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "65427d22b388e0d4fb79f77c2fa6eef4d3f58a32", "commit_date": "2023-08-18T17:23:53Z", "commit_message": "test: codegen: Move MockBPFfeature init out to callers\n\nThis moves MockBPFfeature init out of the low level test() entrypoint\nout to the callers. Since there are relatively few users of the low\nlevel entrypoint, keep the core code simple by moving the init out.\n\nI'd prefer if we avoid the explosion of overloads we have in semantic\nanalyser tests.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0137b3ed2e86e4a345f6ebe9a0ce2d83510e6059", "commit_date": "2023-08-18T17:23:53Z", "commit_message": "test: codegen: Simplify common case test() calls\n\nThe simplified test() interface already sets up the MockBPFtrace.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "08a47afae50530656cfc15888a19d212f646daf8", "commit_date": "2023-08-16T16:46:24Z", "commit_message": "Fixing absolute address test issue across platforms\n\nmapping(using mmap()) to the address 0x10000000 works fine on few arch,\ni.e x86_64. However, on ppc64, this mmap fails, leading to an untriggered\nwatchpoint on 0x10000000. This patch dynamically replaces the allocated\naddress from mmap, causing the watchpoint to be triggered on write at the\ncorrect mapped address.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dabdaa2baad054d1ce66fb5b20ddc808bdf9fa19", "commit_date": "2023-08-16T16:44:32Z", "commit_message": "test: Make tests that create tmpdirs clean up\n\nSome tests weren't cleaning up after themselves. Better to at least\nattempt to cleanup.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b27b07e6c7f6729393d2fa39280aef421a0f79d5", "commit_date": "2023-08-16T16:44:17Z", "commit_message": "Update changelog", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f659c1c91416304a63dd4d3b5b0e4978806ded68", "commit_date": "2023-08-16T16:35:02Z", "commit_message": "tests: Add test childproc.multi_exec_match\n\n    $ sudo ./tests/bpftrace_test --gtest_filter=childproc.multi_exec_match\n    Note: Google Test filter = childproc.multi_exec_match\n    [==========] Running 1 test from 1 test suite.\n    [----------] Global test environment set-up.\n    [----------] 1 test from childproc\n    [ RUN      ] childproc.multi_exec_match\n    [       OK ] childproc.multi_exec_match (10 ms)\n    [----------] 1 test from childproc (10 ms total)\n\n    [----------] Global test environment tear-down\n    [==========] 1 test from 1 test suite ran. (10 ms total)\n    [  PASSED  ] 1 test.\n\nSigned-off-by: Rong Tao <rongtao@cestc.cn>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46e829db895afa4f545d616b507c540c8fcda124", "commit_date": "2023-08-16T16:35:02Z", "commit_message": "child.cpp: validate_cmd: Support symbolic links in environment variables\n\nOn some systems /bin is a symbolic link to /usr/bin (/bin -> /usr/bin), When\nusing the '-c' parameter to specify the executable program in the environment\nvariable, the problem of \"multiple binary files matching\" occurs, for example:\n\n  $ sudo bpftrace -e 'kprobe:do_nanosleep { printf(\"%d sleeping\\n\", pid); }' -c 'sleep 5'\n  ERROR: Failed to fork child: path 'sleep' must refer to a unique binary but matched 2 binaries\n\nDebugging the bpftrace program through gdb can also be verified:\n\n  (gdb) p valid_executable_paths\n  $9 = std::vector of length 2, capacity 2 = {\"/bin/ls\", \"/usr/bin/ls\"}\n\nAnother situation is:\n\n  $ realpath /usr/bin/ping /bin/ping /usr/sbin/ping /sbin/ping\n  /usr/bin/ping\n  /usr/bin/ping\n  /usr/bin/ping\n  /usr/bin/ping\n\n  $ sudo bpftrace -e 'kprobe:do_nanosleep { printf(\"%d sleeping\\n\", pid); }' -c 'ping -c 4 0'\n  ERROR: Failed to fork child: path 'ping' must refer to a unique binary but matched 4 binaries\n\nThis commit fixes this problem. See also v1[0], v2[1].\n\n[0] https://github.com/iovisor/bpftrace/pull/2682\n[1] https://github.com/iovisor/bpftrace/pull/2689\n\nSigned-off-by: Rong Tao <rongtao@cestc.cn>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d4ee0b6f47262d7e5b393ffdf0d6f471fd4c604", "commit_date": "2023-08-13T19:49:25Z", "commit_message": "tests: semantic: Fix semantic_analyser_btf.kfunc\n\nBefore, I was getting:\n\n```\n[ RUN      ] semantic_analyser_btf.kfunc\n/home/dxu/dev/bpftrace/tests/semantic_analyser.cpp:82: Failure\nExpected equality of these values:\n  expected_result\n    Which is: 0\n  semantics.analyse()\n    Which is: 1\n\nInput:\nkfunc:func_1 { @[func] = 1; }\n\nOutput:\nstdin:1:16-22: ERROR: BPF_FUNC_get_func_ip not available for your kernel version\nkfunc:func_1 { @[func] = 1; }\n```\n\ndue to the helper test not being mocked out.\n\nFix by mocking the helper out as being available.\n\nFixes: bf7d0fe2 (\"tests: semantic: Fix semantic_analyser_btf.kfunc\")", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "32c7cae4389fbcc60945fb160344b68471b3ac3b", "commit_date": "2023-08-09T16:22:01Z", "commit_message": "probe builtin with aliased soft-/hardware probes\n\nUsing probe builtin in software/hardware probes specified by alias name\nis not possible b/c ProbeMatcher cannot find the match:\n\n    # bpftrace -e 'software:cpu:1 { print(probe); exit() }'\n    No probes to attach\n\nFix this by adding the aliased name (if exists) to the search list.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eb6611df065c261caac52a2e258c66f447a5b5af", "commit_date": "2023-08-09T16:21:06Z", "commit_message": "Removing unsupported options of subprocess.run()\n\n\"capture_output\" and \"text\" options is supported beyond\npython-3.7, whereas some instances of current CI pipeline\nare using python-3.6 and facing failures. The \"stderr/sdtout\"\noption is supported across python versions.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e9bede1a8dc588d573af9d1d4bae2fb663c126a", "commit_date": "2023-08-09T09:06:27Z", "commit_message": "printf: Fix mismatch between format specifier and argument\n\nInteger arguments to printf-style functions are represented as 64-bit ints,\nboth in generated BPF code [1] and in bpftrace-side printing logic [2].\nTherefore, a common pattern such as `printf(\"%d\", pid)` is buggy -- it uses\nthe conversion specifier for ints to print an int64_t value.\n\nWhile in practice this works as expected on most platforms (the value is\ntruncated to 4 bytes), it's by accident -- it depends on the architecture,\ntoolchain, calling convention, etc. For example, the above breaks on arm\nwith gcc where the compiler emits the following code for PrintableInt:\n\n   0x000d6240 <+8>:     vldr    d7, [r12, #8]    # this->value_\n   [...]\n   0x000d6250 <+24>:    vstr    d7, [sp]\n   0x000d6254 <+28>:    mov     r2, r3           # fmt\n   0x000d6258 <+32>:    bl      0x1e000 <snprintf@plt>\n\n(Note that the first 3 arguments to snprintf are passed via r0-r2, but\nvalue_ is pushed onto the stack; snprintf expects the \"%d\" argument to\nbe in r3, so it ends up printing the value of fmt instead)\n\nThis patch adds an explicit cast to make sure that the argument provided\nto snprintf is consistent with the conversion specifier.\n\n[1] https://github.com/iovisor/bpftrace/blob/34cf5c2b53b82cddc9111055cd499d6e35763f3c/src/ast/passes/codegen_llvm.cpp#L3167\n[2] https://github.com/iovisor/bpftrace/blob/34cf5c2b53b82cddc9111055cd499d6e35763f3c/src/printf.h#L82", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "534bca42bd313e09ae593f41b3cbb46b64959869", "commit_date": "2023-08-07T06:01:40Z", "commit_message": "tools: Remove stale comments about ipv4 limitation\n\nCommit c9dd10f93ba2 (\"[ntop] add support for arrays and IPv6\") added\nipv6 support to the tools, remove the stale comments about only\nsupporting ipv4.\n\nSigned-off-by: Gal Pressman <gal@nvidia.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e010d27b4b5b3c873544a7d16bf864bcf918d665", "commit_date": "2023-08-03T14:30:23Z", "commit_message": "Fixing stack unwind regex for ppc\n\nStack unwinding in x86 skips the test2 function,\nwhereas unwinding on ppc lists function test2.\nThe current regex is not having test2 match-string,\nhence test failure on ppc.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5fcc340ae1a2cc531dc381fb07a1e2c378c4a20a", "commit_date": "2023-08-03T14:29:36Z", "commit_message": "uprobe: improve C++ probes listing\n\nWhen listing probes with the new \":cpp\" prefix, demangle function names.\n\nExample:\n\n    # bpftrace -l 'uprobe:/my/prog:*'\n    uprobe:/my/prog:_Z3funi\n    uprobe:/my/prog:_ZN3Bar3funEv\n    uprobe:/my/prog:_ZN3Foo3funEv\n\n    # bpftrace -l 'uprobe:/my/prog:cpp:*'\n    uprobe:/my/prog:cpp:\"fun(int)\"\n    uprobe:/my/prog:cpp:\"Bar::fun()\"\n    uprobe:/my/prog:cpp:\"Foo::fun()\"\n\nNote: we need to surround the demangled name with quotes as it may\ncontain some symbols which won't be accepted by the attach point parser\n(e.g.  \"::\" or \"()\"). With quotes, the listing entries can be directly\nused as attach points.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0ceaef3cd6333a3cd3239b4ae105099e8e9f4b67", "commit_date": "2023-08-03T14:24:09Z", "commit_message": "Support func builtin for k(ret)func probes\n\nSince [1], kernel has the 'bpf_get_func_ip' helper to get the value of\ninstruction pointer from BPF_PROG_TYPE_TRACING programs. This allows to\nenable the `func` builtin in k(ret)func probes.\n\nAlso adding feature detection for the helper into both `--info` and\nruntime tests.\n\n[1] https://github.com/torvalds/linux/commit/9b99edcae5c80c8fb9f8e7149bae528c9e610a72", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0b3392baa881f501ce684637acbd4136f8a29ed3", "commit_date": "2023-07-26T09:05:12Z", "commit_message": "tests: Only set up dwarf data file once\n\nWe only need to do it once globally since the contents don't change.\n\nAlso delete the datafile after the tests are over and chmod to give\neveryone executable permissions (semantic analysis needs this).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7c2d8005cef826a6457189f1454a632378413337", "commit_date": "2023-07-25T13:31:45Z", "commit_message": "Update CHANGELOG (probe listing and probe builtin)\n\nThe PR allowed listing of software, hardware, interval, and profile\nprobe types. Also fixed using the 'probe' builtin from hardware and\nsoftware probes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4b19d19d5abf9fbdf4c36cc1a3610ba14d3c4bf8", "commit_date": "2023-07-25T13:31:45Z", "commit_message": "Allow listing profile and interval probes\n\nIt is now possible to use wildcards for profile/interval probe listing\nto get the list of all available frequency units:\n\n    # bpftrace -l 'interval:*'\n    interval:hz:\n    interval:ms:\n    interval:s:\n    interval:us:", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "817179075c67d9d55a10661ec44047eab1e4e52a", "commit_date": "2023-07-25T13:31:45Z", "commit_message": "Support 'probe' builtin in hardware/software probe\n\nWhen using the 'probe' builtin, probe is expanded even if the given\nprobe type doesn't support wildcards. This poses problems for hardware\nand software probes as the generated probe name is not correct.\n\nThis commit fixes the problem by using the correct probe name.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "87a112e284a4d8a3c31bfdfa3bb882755c4e8a8a", "commit_date": "2023-07-25T13:31:45Z", "commit_message": "Fix listing software/hardware probes\n\nIn probe matcher, hardware and software probes are handled with the same\ncode as e.g. tracepoints of kfuncs. This is not correct since hardware\nand software probes never define the 'func' field, only the 'target'\nfield. This causes problems with probe listing:\n\n    # bpftrace -lv 'software:*'\n    software:*:\n\nMove handling of these probes to a separate case using only 'target'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "738a7bd179bf56e11d5c61441cc77e6ecc569685", "commit_date": "2023-07-25T12:44:29Z", "commit_message": "Attachpoint parser: improve stoull error messages\n\nThere's a number of probe types that expect a number as one of their\narguments. We use our own parser to convert a string to an integer,\nhowever, when it fails, the error message is not very nice:\n\n    # bpftrace -e 'interval:5:s{ @[comm] = count();}'\n    stdin:1:1-13: ERROR: stoull\n    interval:5:s{ @[comm] = count();}\n\nProvide better messages for all places where stoull/stoll may fail in\nAttachPointParser:\n\n    # bpftrace -e 'interval:5:s{ @[comm] = count();}'\n    stdin:1:1-13: ERROR: stoull\n    invalid rate of interval probe\n    interval:5:s{ @[comm] = count();}", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "91db77c5707c30346035330ea4fb719821254161", "commit_date": "2023-07-24T16:35:02Z", "commit_message": "Decouple kheaders unpacking from BTF support\n\nThis is a partial revert of 17bbcd2b0 (\"kheader: Do not unpack kheaders if\nsystem has BTF\"). Checking if the kernel supports BTF is not sufficient, as\nClangParser may decide to not use the BTF-generated header in case there are\nconflicts with user-defined types[1].\n\nFor example, the following script falls back on kernel headers, which on a\nsystem that relies on CONFIG_IKHEADERS (e.g. Android) produces this error:\n\n  $ sudo bpftrace -\n  struct task_struct {}   // redefinition\n  struct foo { struct task_struct dummy; }\n  BEGIN {}\n  ^D\n  /bpftrace/include/clang_workarounds.h:14:10: fatal error: 'linux/types.h' file not found\n\nThis also unbreaks scripts written for older kernels without BTF support\nthat unconditionally include kernel headers.\n\n[1] https://github.com/iovisor/bpftrace/blob/3c417c8e3792c58a5958e3b1c49958ac063667a8/src/clang_parser.cpp#L765", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "952628379ac647bd22aae711f8aabb2ad2f0e700", "commit_date": "2023-07-24T07:21:28Z", "commit_message": "Fixing runtime tests for ppc\n\nIn ppc, \"nip\" is used for instruction pointer.\nOther fix is general dependency issue.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dd0e6c5a3659420975d539e327cf66ceb58c0f3d", "commit_date": "2023-07-24T05:59:37Z", "commit_message": "Allow '+' in attach point path", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6ae54410db34bb91c572e96e59a246ce7701ef70", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "tests: tools: Find tools directory relative to script\n\nPrevious code assumed cwd was inside build/tests.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff6837590ac78c0ede543edfedaf5f1e7b77a8bc", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "runtime: engine: Do not line buffer subprocesses\n\nLine buffering stdout/stderr does not make much sense as we are only\nreading. IIUC line buffering is really only useful when writing to a\nfile.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "66491792ec9917a170fd47693dfc0758bcfd7732", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "runtime: engine: Use start_new_session instead of os.setsid\n\nThe former was introduced to replace the latter b/c the latter can\ndeadlock. Update for correctness.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "29eb48210989384bdb701e3a03130dab4e50373b", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "runtime: engine: More reliably collect test output\n\nPreviously, we were using `Popen.communicate()` to collect test case\noutput after probe attachment. This meant that if a test case did not\nexplicilty call exit(), then the timer would fire and we could\npotentially lose output b/c\n\n    output += p.communicate()[0]\n\nwould not fully execute and all the data buffered in p.communicate()'s\nimpl would be lost.\n\nA potential fix could be to use in-band timeouts with communicate()'s\ntimeout parameter. But some experimentation has shown that communicate()\nand readline() implementations may not share the same underlying buffer\n(as both impls buffer output from the OS) and could lose data depending\non how much the OS returns to python at a time.\n\nSo change all calls to communicate() to `_io.TextIOWrapper` methods.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "568fb7790ccddc8b09a531891307112a7c661467", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "runtime: engine: Remove PATH manipulation\n\nRemove $PATH manipulation when shelling out. It was added in c7f1aa6d\n(\"Fix field analyser not requesting BTF info for identifiers\") but was\nlater made unnecessary in 27759be0 (\"tests: Add {{BPFTRACE}} runtime\nvariable\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2a9db896994294733a9198cde06feb077adca5cc", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "Update CHANGELOG (symbol demangling)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b0569acafbf2fab109abd68ef91a2151776a84cf", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "Update docs with info on symbol demangling\n\nFor now adds just basic information about demangling and the C++ uprobe\nprefix.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb8efcd16ef5e5385133d0bf5894eb68de98fcb8", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "uprobes: fix false matches for demangled symbols\n\nWhen matching demangled symbols from the binary, we always add a\ntrailing wildcard to the search input b/c the demangled name contains\nalso the argument list (e.g. \"fun(void)\"). This, however, produces false\nmatches as \"fun\" would also match e.g. \"function(void)\".\n\nThis commit takes a different approach. Rather than adding a trailing\nwildcard, remove the argument list from the demangled name that we're\nmatching against, unless the user explicitly specified the '(' character\nin the search input meaning that he wants to match against function\narguments, too.\n\nThis allows to remove addition of the trailing wildcard. At the same\ntime, we remove addition of leading wildcard as it has no effect.\n\nExpand unit tests to cover this situation.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9452ede945165134d716f81fb82b899df1207108", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "uprobes: disable demangling without :cpp prefix\n\nThe previous commit introduced a new part of uprobe specification - the\nlanguage prefix. For now, only C++ prefixes are supported.\n\nThis commits changes the behaviour of uprobes by only allowing symbol\ndemangling when the :cpp prefix is specified. This saves some\ncomputation time and gives users a better control over bpftrace\nbehaviour. In addition, symbol demangling sometimes produces confusing\nresults - demangling support automatically adds leading and trailing\nwildcards, which means that more functions than expected are sometimes\nmatched. Now, this behaviour does not happen for default uprobes.\n\nNote that this is a breaking change b/c it is now required to specify\nthe :cpp prefix to enable symbol demangling (it was always enabled\npreviously).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ca98ab16de7890b38d89fb12830be6854592d0a", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "uprobes: support language probe prefix (for C++)\n\nAdd a new part of probe definition which allows to specify the language\nin which the traced binary is written. This will allow to enable\nlanguage-specific features.\n\nFor now, allow C++ prefix \"cpp\".\nAt this point, specifying the prefix has no effect. In future, giving\none of the above will allow C++ symbol demangling.\n\nThere are now four parts of uprobe specification and some of them are\noptional, which may create tricky situations:\n- 'uprobe:bin:func' attaches to 'bin' and uses no language-specific\n  features,\n- 'uprobe:bin:func ... -p PID' attaches to 'bin' with given PID (if the\n  process runs 'bin') and uses no language-specific features,\n- 'uprobe:cpp:func ... -p PID' attaches to PID and uses C++ features,\n  this one is distinguished from the previous one by using one of the\n  supported language prefixes as the second part of the attachpoint,\n- 'uprobe:func ... -p PID' attaches to PID and uses no language-specific\n  features.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e4558a667eef91887c94389d7df51680b02446bc", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "Fix uprobe symbol resolution\n\nThe BPFtrace::resolve_uname function doesn't search for function symbols\nwhich causes BPFtrace::add_probe to always perform a ProbeMatcher\nsearch, even if the attach target exists in the binary. This is rather\ninefficient so better expand the symbol search to functions, too.\n\nNote that this is a potentially breaking change for binaries combining C\nand C++ symbols. The reason is that if the attachment target precisely\nmatches a symbol name in the binary, the ProbeMatcher search will now be\nskipped and we'll potentially not attach to some mangled C++ functions\nthat we attached to before. This situation should occur very rarely,\nthough.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c89439494f03668af2b2cf25774d97ac0633c416", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "Refactor ProbeMatcher w.r.t. symbol demangling\n\nAdd a new parameter to ProbeMatcher::get_matches_in_stream that allows\nto control whether symbols should be demangled. For now, always set the\nparameter to true.\n\nThe purpose of this is to prepare for an improved handling of symbol\ndemangling where we will only turn it on in certain cases.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3c417c8e3792c58a5958e3b1c49958ac063667a8", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Update CHANGELOG (improved work with args)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2c9cc119eb00d927e095ca57a2990bb36b08ce3a", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Document the args builtin\n\nAdd entry to the reference guide and manpage about the `args` builtin.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e77f6896b1285a6b6eba044e16880c88faa2f44", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "uprobe: support accessing entire args\n\nAllows to pull all arguments of a uprobe from DWARF into a single\nstructure (record) using \"args\". The record can be used as any other\nrecord - printed, stored inside maps/variables, used as a map key, etc.\n\nThis enables constructions like:\n\n    print(args);\n    @[args] = count();\n    @[tid] = args;\n\nThe implementation builds on the fact that probe args are now stored\ninside struct manager under a special \"struct <probename>_args\" type.\nWhen accessing the \"args\" builtin in a uprobe, this builds a new record\n(having the above type) on stack and fills it with probe args (from\nregisters).\n\nOne effect of this is that all uprobe args are always read onto stack,\neven when a single arg is necessary (e.g. \"args.a\" is used). This is a\nbit inefficient but much better fits the current implementation. Since\nthere are at most 6 args, the slowdown should be small.\n\nAlso a difference from other records in bpftrace is that we don't use\nbyte arrays to represent the new record with an LLVM type. The reason is\nthat it is easier to use GEPs with indices to access individual args,\ninstead of using byte offsets inside the new record.\n\nAdds runtime tests for the above constructions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cad1cfb0291cf783181ff4e17e681ef96b80f7a3", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Allow args as map key/value in k(ret)func\n\nSince args is now representing a record containing all function args, it\nmay be used as a map key/value since the it will be proberead and copied\ninto the map. For now, this only works for k(ret)func probes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "92b2b999383b71d6a975169f805a04cd15e210cb", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Allow assigning args to a local var in kfunc\n\nThis was disabled by commit 722c5c73ebdc (\"Error if trying to assign\nargs to a variable in kfunc\") since it was not supported at the time.\nNow, FieldAnalyser supports this so it can be enabled.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5c002da40afd2d750d28e80a69b03347aeb2a65b", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Semantic analyser: fail on accessing empty args\n\nWhen trying to access the 'args' builtin for a probe in which the\narguments cannot be parsed (e.g. are not present in DWARF/BTF), throw an\nerror in semantic analyser (instead of segfaulting in codegen).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5ffa91ea739d679e684e1911fd3787ef3fb488b7", "commit_date": "2023-07-14T09:13:18Z", "commit_message": "Introduce builtin function nsecs(tai) which is nanoseconds of CLOCK_TAI  (#2619)\n\n* add nsecs([MODE]) function\r\n\r\nThe nsecs function is added, and its receiving parameter is a timestamp mode, such as boot, and tai, tai_sw and other support will be added in subsequent patches.\r\n\r\nnsecs() defaults to nanoseconds since system boot, synonymous with nsecs(boot).\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add timestamp mode member to Strftime\r\n\r\nAdd timestamp mode member to Strftime. Use mode to represent the timestamp type of the strftime function, which can be boot or tai (subsequent patches will implement tai)\r\n\r\n- add mode member to Strftime\r\n- remove test cases about nsecs in Parser.call_builtin\r\n- update call_strftime.ll\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* support tai timestamp\r\n\r\nKernel versions 6.1 and above provide the ktime_get_tai_ns helper function. We can get the timestamp through nsecs(tai). And use TimestampMode to solve the problem of wrong results when strftime formats tai timestamp\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* support sw_tai timestamp\r\n\r\nAt present, the kernel versions of most users stay at 4.19 and 5.10, and these kernel versions do not support ktime_get_tai_ns. Thus, we provide sw_tai, sw_tai obtains the approximate tai time through the \"triple vdso sandwich\" method area, and its accuracy is about tens of nanoseconds.\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* docs: fix wrong format of `offsetof` entry\r\n\r\nadd `offsetof` entry into table contents and fix wrong header format of `offsetof`\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add nsecs() guide\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add semantic analyser test for nsecs()\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add codegen test for nsecs()\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add runtime test for nsecs()\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3ddb60bc1d019da6cb91b2127b5272d7f1d6f234", "commit_date": "2023-07-13T21:29:30Z", "commit_message": "cmake: fix linking libbfd\n\nOn some distributions, libbfd is not available as a shared library (e.g.\nopenSUSE [1]). In such a case, libbfd.a must be used and the libraries\nthat it requires must be linked manually, even when bpftrace is linked\ndynamically, otherwise the compilation fails.\n\nThis fixes the above problem by:\n- adding a detection that static libbfd.a is used and in such a case\n  linking necessary libraries even for dynamic builds and\n- expanding the list of necessary libraries to all that may be required:\n  libopcodes, libz, libzstd, libiberty, libsframe.\n\n[1] https://bugzilla.suse.com/show_bug.cgi?id=1162312", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59bf5f0ba3ff0969f9c4c557a75304a069d6c6ad", "commit_date": "2023-07-13T08:50:06Z", "commit_message": "Update INSTALL.md", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "945e558eb7d2eae0fe541ad4603fd90125e78a46", "commit_date": "2023-07-12T16:59:40Z", "commit_message": "arm: Determine target arch at runtime\n\nAs of 9d9cb58c9 (\"Add helper methods to obtain pointer width of traced\ncode\") we're already checking if the kernel is 32-bit, and this can be\nextended to figuring out the list of available registers, the layout of\n`struct pt_regs` etc. dynamically rather than having separate armv7 and\naarch64 implementations selected at compile time.\n\nThis makes it possible to use the same 32-bit build of bpftrace on both\narm and arm64 kernels.\n\nFixes #2654", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "34cf5c2b53b82cddc9111055cd499d6e35763f3c", "commit_date": "2023-07-11T08:11:39Z", "commit_message": "arm: Fix gcc build when using -mthumb\n\nWhen compiling with `-mthumb`, we need to force the compiler to generate ARM\ncode for the two trigger functions for uprobes to work. This is achieved by\nusing the target attribute[1].\n\nWhile this works fine with clang, gcc complains about an invalid conversion\nwhen calling run_special_probe[2]; latest development version (14.0) suggests\nthis is a gcc bug:\n\n  <source>:8:9: internal compiler error: canonical types differ for identical\n      types 'void()' and 'void()'\n\nThis patch adds an explicit cast as a workaround.\n\nReported-by: @daniloegea [3]\n\n[1] https://gcc.gnu.org/onlinedocs/gcc/ARM-Function-Attributes.html#index-target-function-attribute-1\n[2] https://gcc.godbolt.org/z/44b5MjdbT\n[3] https://github.com/iovisor/bpftrace/pull/2360", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e199c7e73da84bff9fe744d1e3402c2b505aa5a2", "commit_date": "2023-07-06T09:08:40Z", "commit_message": "Reduce size of SizedType class\n\n- Store all sizes internally as bits, converting back to bytes as needed\n- Delete unused field num_elements_\n- Shrink StackType::limit\n- Shrink underlying types of enums\n- Reorder fields from largest to smallest (roughly)\n\nBefore:\n  sizeof(SizedType) = 136\n\nAfter:\n  sizeof(SizedType) = 96\n\nSizedType objects are created and copied a lot during compilation, so\nreducing the size should help with performance.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9e4a5b16bd16a105d8bd4cda91db6ed4267182be", "commit_date": "2023-06-26T09:22:50Z", "commit_message": "AttachPointParser: Error handling improvements\n\n- Ensure integer parsing errors end in new lines\n- Parse signed integers when requested (not always unsigned)\n- Early returns from sto[u]ll parsing errors to reduce nesting\n- Ensure non-fatal errors do not get displayed\n\nAttempting to parse a string with stoll can result in a non-fatal error\nwhen parsing uprobes, as they are allowed to accept either an address or\na function name. This stoll error should never be displayed to the user.\n\nPreviously, when the error buffer was not cleared between attachpoints,\nif the next attachpoint had a fatal error then this non-fatal stoll\nerror would also be displayed.\n\nDue to a combination of the now-fixed problems, the error message for\nthe new test case used to be:\n\n  ERROR: Coefficient part of scientific literal is not a valid number: Str: stoulltracepoint probe type requires 2 arguments\n\nNote the missing newline and the non-fatal first error.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b23cda02eb3ab4394b61300a5a014cf14b14b0fc", "commit_date": "2023-06-23T07:01:50Z", "commit_message": "Revert \"Fix one-liners args access\"\n\nThis reverts commit 39d026ecfb229376be6fd708ed937ef2e320a28d.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "39d026ecfb229376be6fd708ed937ef2e320a28d", "commit_date": "2023-06-22T20:53:33Z", "commit_message": "Fix one-liners args access", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "593f5c96cf80e0ee1f60bd8cdebe197388a6f751", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "Update changelog\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "539756d42f321ebae75878d3b0820c46aaf56a8e", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "Fix the problem of panic when running `bpftrace -l iter:`\n\nWhen ap.func is empty, the input parameter tokens of the wildcard_match function will be empty, and a panic will occur when tokens[0] is obtained. Therefore, iter should be similar to kfunc, and avoid ap.func being empty during the semantic analysis stage.\n\n```\nbpftrace -l kfunc:\nstdin:1:1-7: ERROR: kfunc should specify a function\nkfunc:\n~~~~~~\n\nbpftrace -l iter:\nstdin:1:1-6: ERROR: iter should specify a iterator's name\niter:\n~~~~~\n```\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c2dbcbbbe8329ac0d1145c418088a9b7d8a7893", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "support all iters\n\nSupport all iters, this patch mainly modifies the following places:\n\n- Delete the hard code, and get the type of iter by concatenating `bpf_iter__` and the function name\n- Use has_iter to check whether the iter exists\n- add iter tracing function for tests\n- clean up older iter related code\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1caba6b52f825bef338bbb3e7785906b22c05398", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "support to get all iter params\n\nFor each iter, the kernel will have a bpf_iter_$ITER function, so we can get the parameters of iter through bpf_iter_$ITER.\n\nRun `bpftrace -l iter:*` and shows:\n\n```\niter:task\n    struct task_struct * task\niter:task_file\n    struct task_struct * task\n    int fd\n    struct file * file\niter:task_vma\n    struct task_struct * task\n    struct vm_area_struct * vma\n```\n\nThe output after applying this patch is as follows:\n\n```\niter:bpf_map\n    struct bpf_map * map\niter:bpf_map_elem\n    struct bpf_map * map\n    void * key\n    void * value\niter:bpf_prog\n    struct bpf_prog * prog\niter:bpf_sk_storage_map\n    struct bpf_map * map\n    struct sock * sk\n    void * value\niter:ipv6_route\n    struct fib6_info * rt\niter:netlink\n    struct netlink_sock * sk\niter:sockmap\n    struct bpf_map * map\n    void * key\n    struct sock * sk\niter:task\n    struct task_struct * task\niter:task_file\n    struct task_struct * task\n    u32 fd\n    struct file * file\niter:tcp\n    struct sock_common * sk_common\n    uid_t uid\niter:udp\n    struct udp_sock * udp_sk\n    uid_t uid\n    int bucket\n```\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4b8cf6b2fef23a35103a3e7942cb267cbea1987f", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "fix 'bpftrace -l iter:*' printing wrong list\n\nRun bpftrace -l iter:* the output is as follows:\n\n\titer:task\n\titer:task_file\n\titer:task_vma\n\nBut the current kernel does not support 'iter:task_vma'. After applying this patch, run the command again, the output is as follows:\n\n\titer:bpf_map\n\titer:bpf_map_elem\n\titer:bpf_prog\n\titer:bpf_sk_storage_map\n\titer:ipv6_route\n\titer:netlink\n\titer:sockmap\n\titer:task\n\titer:task_file\n\titer:tcp\n\titer:udp\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7b45ce9d2d6a334f57d7f624ebfecf8a84ed1332", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "get all iters from btf\n\nAccording to [1], we can get all iter types supported by the current kernel according to the 'bpf_ter__' prefix\n\n[1]: https://www.kernel.org/doc/html/latest/bpf/bpf_iterators.html#how-to-use-bpf-iterators\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5a592c6bc8c75863f3598ad41fc2c8881bb87938", "commit_date": "2023-06-16T16:39:16Z", "commit_message": "update the helper function list of the bpf.h file\n\nUpdate list of helper functions\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fdd60c453dd814dc72862c817bceaa171002092f", "commit_date": "2023-06-16T16:39:11Z", "commit_message": "Increase the distance of backslashes\n\nIncrease the distance of backslashes, because some helper function names are very long, and the distance of backslashes is no longer able to maintain line alignment, so increase the distance of backslashes\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "960fb8c1eadf671e5d4de4947b56801b241ae444", "commit_date": "2023-06-16T11:12:05Z", "commit_message": "fix kernel cflags for loongarch\n\nThe arch should return loongarch in loongarch64 machine, but it\nreturn loongarch64, because it is loongarch in kernel source tree.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "87ee52395117d865724bd4daec5e8a8152b186f8", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Update CHANGELOG.md\n\nBetter symbol resolution", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b067adf627e81adfdfcbccc3f2d3f66e81d0104a", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Add tests for usym cache preload\n\nNote: test for ASLR enabled is disabled because of race condition,\nsee https://github.com/iovisor/bcc/pull/4319.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e4e4dbc69d008831b28be5592f9e36c27683efb", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Allow user to set user symbol caching type\n\nChange BPFTRACE_CACHE_USER_SYMBOLS values from 0 and 1 to PER_PID,\nPER_PROGRAM, and NONE. The values 0 and 1 are still supported, meaning\nNONE and default (see below), for compatibility.\n\nThe new default is PER_PROGRAM when ASLR is disabled and PER_PID if\nASLR is enabled. NONE option can be used to save memory in case the\nnumber of traced processes is high.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e4ef2f1a82cd5193ccbf3ad9b3f24d7df13fd748", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Mention usym() limitations in manual", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5b20ba90930b92bbe5cba91ea3b4b2935c1781f", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Preload symcache for running processes\n\nWhile attaching a uprobe using symbol resultions, look for running\ninstances of the program targeted by the uprobe and create a BCC symcache\nfor each of them.\n\nThis enables bpftrace to resolve usyms for processes running at the time of\nattaching the probe even when ASLR is on and the process is gone at the time\nwhen the print event fires.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "390f048d9ea73b06f360030598b438636924cec3", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Add ELF-based userspace symbol resolution\n\nIn addition to resolving usyms from the running process, an alternative\nis implemented that reads the program binary via libelf. This is useful\nfor cases when the usym resolution happens after the process exists.\n\nThis approach does not work for dynamically loaded symbols or processes\nwith ASLR enabled, in these cases usym resolution falls back to using\nBCC symcache.\n\nImplementation notes:\n- To access the program binary, a \"probe id\" (distinct from the AST probe\nid) is generated in resource analyzer, and passed via usym/ustack events\ninto the userspace when the associated perf event fires. If the probe\ncontains only one attach point, and therefore one program, this allows\nthe binary to be identified even for exited processes.\n- ustack perf event was changed from pid/stack id packed integer to struct\nto fit the probe id.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5c09d9374d0df6a1a108cea50de7033808f56d9", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Add usym caching by PID\n\nExtend caching usym tables by program (used when ASLR is disabled) with\ncaching by PID, which is used when ASLR is enabled.\n\nWithout ASLR all instances of one program share the same memory layout,\nhence it can be stored once per-program.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "64048acb9c64c13acb927e37a2423e6d42985e8d", "commit_date": "2023-06-06T13:17:36Z", "commit_message": "Fix alignment of byte arrays inside tuples\n\nWhen using types internally represented by byte arrays inside tuples\n(e.g. usym, inet, etc.), LLVM aligns them to 1 byte inside the tuple. We\nmust do the same in our internal type system so that the size of our\ntype matches the size of the type generated by LLVM.\n\nThis also renames the `SizedType::GetAlignment` method to\n`SizedType::GetInTupleAlignment` as it's only used to get alignment of a\ntype when it is used inside a tuple and the old name was confusing.\n\nAdded runtime and codegen tests for a case where bpftrace previously\ncrashed.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d3ffdb965cd71a0a538c673003c3c65920a68fa0", "commit_date": "2023-06-06T05:32:00Z", "commit_message": "docs/tutorial_one_liners_chinese: Fix a chinese typo\n\nSigned-off-by: Rong Tao <rongtao@cestc.cn>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "be2a24acc365a99b799ee60d83ffc6b2d0fdd35a", "commit_date": "2023-06-05T06:29:37Z", "commit_message": "Update INSTALL.md\n\nAdded libffi-devel due to build-libs.sh message.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38bbc2c0886853246b54bbc3de9a3a2bd3cc3a19", "commit_date": "2023-06-05T06:29:37Z", "commit_message": "Update INSTALL.md\n\nUpdate list of dependencies to successfully build on Fedora 38", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59eabbe1f6b2e1f43fa20014e9e84f06a3d260d8", "commit_date": "2023-06-05T05:13:21Z", "commit_message": "Replace args->x by args.x in docs\n\nThe `args` builtin has been transformed from a pointer to a normal structure.\nUpdate the Chinese version of one-liner tutorial to synchronize with its\nEnglish version.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1230b41f4bd8b27b444ed555ecacd0f266b5784f", "commit_date": "2023-06-05T05:13:21Z", "commit_message": "Update tutorial_one_liners_chinese.md\n\nPolish the Chinese version of one-liner tutorial by fixing typos and\nimproving expression.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "446109acdef586fb0f0b5d40196dedb946b613ed", "commit_date": "2023-06-03T03:00:28Z", "commit_message": "Add CHANGELOG entry for #2623", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a20675c14900c0f7fb774c271fbd5f79d714a279", "commit_date": "2023-06-03T02:56:58Z", "commit_message": "Add runtime test for parallel map accessing\n\nSigned-off-by: maokelong <chenjinglong1@huawei.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6edb980285dfbbfed8d8ca920cedd8289d8f96d6", "commit_date": "2023-06-03T02:56:58Z", "commit_message": "Fix crashes caused by improper error handling for bpf_*_elem\n\nbpf_*_elem returns -errno when error occured. These functions will\nreturn -ENOENT(-2) when they failed to find a entry. It's a harmless\nerror that could be found when doing delete and print/zero/clear\noperations on the same map simultaneously. It's not reasonable to\nstop the whole program at this moment.\n\nSigned-off-by: maokelong <chenjinglong1@huawei.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3726c0281ece85c5b7f074ece88091e3b4ccbfe1", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Update CHANGELOG (making `args` a struct)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e73f0d5d4e1a62d2cf542c18b03546b2899edf50", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Replace args->x by args.x in docs and tools\n\nThe `args` builtin has been transformed from a pointer to a normal\nstructure. While dereferencing and using `->` is still possible for\nbackwards compatibility, the canonical way now is to use plain dot\noperator to access individual arguments (e.g. `args.filename`).  Reflect\nthat in documentation (reference guide and tutorial) and tools.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "353146a10c242bab7bc66ae5cf92a46af46b63bf", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Replace `args->` by `args.` in tests\n\nThe `args` builtin has been transformed from a pointer into a normal\nstructure, hence it should now be accessed using the plain dot operator.\nTransform tests to reflect that.\n\nThe access via dereference is still supported for backwards\ncompatibility, so add few tests to check that it works fine (basically\none runtime and one unit test for each probe type that supports args -\ntracepoints, kfuncs, uprobes).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "13c3ca3ff7dd28fb7afa1284a076bbc25e9ffb9d", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Make `args` builtin a structure (not a pointer)\n\nHistorically, `args` has been treated as a pointer as it was closest to\nthe implementation (context of the BPF program). From the user point of\nview, this adds an unnecessary complexity (need to dereference) as the\nvalue of the raw pointer itself is never read.\n\nThis commit changes `args` to a standard structure type. This allows to\naccess the individual arguments with the dot operator (`args.arg`). For\nbackwards compatibility, dereferencing args is still possible, it simply\nhas no effect.\n\nTogether with the previous commit, this allows to print all arguments of\nkfuncs using `print(args)`.\n\nThe commit also takes several existing tests using `args->` and\nduplicates them using `args.`. I was considering to transform all\n`args->` tests to use `args.` but that would break Git history and\ndecouple the tests from the original changes that introduced them.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "731f1d3dc5db3f227365c80edfc1bf185d3a7d19", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Refactor storage of probe args\n\nInstead of using private maps in multiple classes (BPFtrace::ap_args_,\nSemanticAnalyser::ap_args_, FieldAnalyser::ap_args_), store probe args\ninside struct manager under a special type \"struct <probename>_args\".\n\nThis simplifies the code and also allows to treat struct args just like\nany other record type. Thanks to this, it is now possible to print all\nargs of kfuncs. At this point, printing works for kfunc args only b/c\nkfuncs store all args in memory pointed by ctx and the entire args\nstruct can be proberead at once. On the other hand, uprobes store args\nin registers and therefore we'll need to access them individually. Also\nnote that printing now requires a dereference (`print(*args)`) which\nwill be changed in the follow-up commit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f6c13b25b9d8b778e7f120769d586517e49ac6d4", "commit_date": "2023-06-01T05:19:51Z", "commit_message": "Fix resolving username for malformed /etc/passwd\n\nWhen /etc/passwd has malformed or unexpected content (e.g. contains an\nempty line), resolving the username builtin causes segfault due to\nout-of-bounds access to a std::vector. This fixes the issue.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c0198aa4f1a7629e7ba02b5472394ddeffeeb80", "commit_date": "2023-05-26T23:31:36Z", "commit_message": "Fixing runtime test filter option: --filter\n\nThis patch handles following observed issues:\n\n1. Inconsistency with test names, some have double qoutes,\n   whereas others don't. Extra pre-processing is required in\n   runtime bash script for such inconsistent names, before they\n   are supplied as args to python script.\n\n2. Test name nomenclature for \"--filter\" option is missing.\n   Need to manually figure out from code.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a7decf0b89041048081bb8539918d3b5f2c97b09", "commit_date": "2023-05-25T15:41:08Z", "commit_message": "Add documentation for nix build", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8eea8e1351edf2ffc00596bbee0a8a74a9925baf", "commit_date": "2023-05-25T15:41:08Z", "commit_message": "Export matrix of bpftrace builds with different LLVMs", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "da631b213ffb884eb50b451a407ceb7235e59c33", "commit_date": "2023-05-25T15:41:08Z", "commit_message": "Use pinned libbpf/bcc versions", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "181fc37f21cc4dc22e27ce4c88d2482865223302", "commit_date": "2023-05-25T15:41:08Z", "commit_message": "Set up nix flake for builds\n\nThis flake can build bpftrace with all features enabled as well as\nrun all the tests from outside the build environment.\n\nThe runtests.sh script is a bit hacky but I'm not sure we can do better.\nWe have to run the runtime tests at least from a non-nix environment b/c\nthe runtime tests make too many assumptions about the availability of\nvarious binaries.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7d2e0abfd9707f0a7a839aae5c624faed84973df", "commit_date": "2023-05-25T11:36:59Z", "commit_message": "Fix kprobe_offset_module test with correct offset for ppc64\n\nThe instruction size in ppc64 is 4 bytes, but the entry-point\nto the local functions is located at an offset of 8 bytes.\nTherefore, a kprobe can be attached at offsets that are multiples\nof 4 bytes beyond the initial 8-byte offset.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "76e019d844886fa0f33b3c70d88e3ee959a4a3a7", "commit_date": "2023-05-25T07:57:49Z", "commit_message": "Fix runtime tests using the nft tool\n\nSeveral tests use the nft tool to fire probes in a kernel module\n(nf_tables). All the tests have two issues which are fixed by this\ncommit:\n- The command that invokes the traced function is called using the `-c`\n  parameter which does not wait for the probes to attach. The correct\n  way to run the command is via the `AFTER` directive.\n- The created nftables table is deleted in the `AFTER` directive which\n  is not correct. It should be deleted using the `CLEANUP` directive.\n\nThe above issues caused a race condition in the tests (the command is\nexecuted before the probes are attached) which should be now fixed.\n\nIn addition, the probe.kprobe_offset_module_error test now never\nexecutes the command, so no cleanup is necessary (as it would fail).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "923ceccebdad84a231c49c81b290fa1f1adb7e59", "commit_date": "2023-05-25T07:57:49Z", "commit_message": "tests: improve docs for the AFTER directive\n\nThe important property of the directive is that it executes the command\nonly after the probes are attached. Document this property .", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f6f041e777b304d77e53121f32c569de2c3ca599", "commit_date": "2023-05-24T16:12:16Z", "commit_message": "tests: teach runtime runner about multiple before clauses\n\nAs noted in iovisor/bpftrace#2402, usdt flakiness was made better by\n508538a but not fully fixed.\n\nThis commit is what I should have done all along: it allows the test\nrunner to parse and wait for multiple BEFORE clauses and thus ensures\nthe processes have started before the test runs.\n\nThere are two minor changes:\n\n  1. The check for child processes is now `ps --ppid` based to\n     eventually allow parallel process runs in the same environment.\n     That requires to use `ps` from the `procps` package on Alpine as\n     the default BusyBox one doesn't have the `--ppid` option.\n  2. Because of the `ps` usage, the name check is now truncated to 15\n     chars, which will fail if TASK_COMM_LEN is not 16. That looks like\n     a constant in the kernel, so I think we're good.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb1e082a4f9f2b756f813156b58ee2a5af12747e", "commit_date": "2023-05-24T06:53:15Z", "commit_message": "Rawtracepoint probe add a judgment on -EINVAL and provide a reasonable error message\n\nSigned-off-by: Feng Zhou <zhoufeng.zf@bytedance.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0a734286841d728c372c52d294d2265793213530", "commit_date": "2023-05-24T06:53:15Z", "commit_message": "Add testcase for rawtracepoint's wildcard and list show\n\nSigned-off-by: Feng Zhou <zhoufeng.zf@bytedance.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6b3f75e7368c3389928c84f2ac8da2c139233528", "commit_date": "2023-05-24T06:53:15Z", "commit_message": "Rawtracepoint program type support -l and wildcards\n\nSigned-off-by: Feng Zhou <zhoufeng.zf@bytedance.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1bd37ec5ef7772b1a0155cccfaa31020ae42137e", "commit_date": "2023-05-22T21:29:46Z", "commit_message": "Fixing args-type in subprocess.Popen against f4bc83e\n\nAs per subprocess.Popen docs: If shell=True, it is\nrecommended to pass args as string rather than as\na sequence.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71c45f544f1295362243452291cd59874f811189", "commit_date": "2023-05-22T15:13:58Z", "commit_message": "Fix threadsnoop.bt for greater than glibc 2.34", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73dc630e1194f8ddc9aa238f8220c55d60ffdcbe", "commit_date": "2023-05-22T15:05:04Z", "commit_message": "resources: generate std::string_view instead of c strings and lengths", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "26d61f56ebfb5db7ac9d116c5108fd6f1ebaecf3", "commit_date": "2023-05-22T11:58:00Z", "commit_message": "testdata: Rewrite test header generation code\n\nBefore, the old generation could would write temporary data in the\nsource directory. Technically this works, but it was causing issues with\nvmtest, as vmtest was only mounting the build directory read/write. This\nrewrite makes it so all temporary file generation occurs in the build\ndirectory.\n\nFurthermore, this rewrite correctly declares all the input/output\ndependencies so the test headers are only regenerated when absolutely\nnecessary.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad23fc38e92ac6272b2ba23e0efc979c03de3fd3", "commit_date": "2023-05-22T11:50:44Z", "commit_message": "update changelog for ringbuf\n\nSigned-off-by: xh4n3 <xyn1016@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fff6d887d94c12125635bbb634f87797b856ca27", "commit_date": "2023-05-22T11:50:44Z", "commit_message": "update codegen tests for ringbuf\n\nSigned-off-by: xh4n3 <xyn1016@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "67d4bd7c79839ca9563a6be155f0413da519f482", "commit_date": "2023-05-22T11:50:44Z", "commit_message": "support ringbuf\n\nSigned-off-by: xh4n3 <xyn1016@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4bc83e6f0e1deca45dfb7e0d067ab0b500c0f45", "commit_date": "2023-05-22T07:52:06Z", "commit_message": "Adding new directive CLEANUP to test-suite\n\nCLEANUP\tdirective aims to hold the clean-up command to\nclear the resources allocated during test run.\n\nThe command specified in CLEANUP directive will run\nafter the termination of commands from other directives\ni.e. BEFORE/RUN/AFTER.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2353019927351f0808befc5518c912e96c98f69", "commit_date": "2023-05-19T10:22:39Z", "commit_message": "Adding feature dependency in runtime tests\n\nTest cases that depend on 'features' are\nskipped rather than failed.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59140c8f4e280345ce1caea1bef1bed18143d7c5", "commit_date": "2023-05-19T10:21:31Z", "commit_message": "Add codegen test for kretfunc dereferencing\n\nkretfunc is btf-based tracing, when dereferencing, there is no need to call the bpf_probe_read helper function. This test is mainly used to verify kretfunc dereferencing.\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3cfbe643ce04fa97ca4e5094a5984e9cc95c7dec", "commit_date": "2023-05-19T10:21:31Z", "commit_message": "Add codegen test for iter dereferencing\n\niter is btf-based tracing, when dereferencing, there is no need to call the bpf_probe_read helper function. This test is mainly used to verify iter dereferencing.\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7efa0a272517a85ac2e294d0ae4be7de40000f3d", "commit_date": "2023-05-19T10:21:31Z", "commit_message": "Add codegen test for kfunc dereferencing\n\nkfunc is btf-based tracing, when dereferencing, there is no need to call the bpf_probe_read helper function. This test is mainly used to verify kfunc dereferencing.\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c2c3ab96a45b552380ca93171f8a9fbc3fe9aff4", "commit_date": "2023-05-19T10:21:31Z", "commit_message": "Support identifying btf type\n\nk(ret)func and iter are btf-based tracing, which can detect whether dereferencing is safe through btf, so dereferencing does not need to call the helper function bpf_probe_read. This patch mainly modifies the semantic and codegen modules\n\nsemantic:\n- Handle the ctx of iter, mark is_btftype as true\n- Handle the retval of kretfunc, mark is_btftype as true\n- When dealing with ArrayAccess, Unop, FieldAccess, inherit is_btftype attribute\n\ncodegen:\n- If it is a string type, use CREATE_MEMCPY directly to load the data\n- For other types, load data through CreateDatastructElemLoad instead of CreateProbeRead\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31d7a35816fa4993ae2f1208153ce38c632be567", "commit_date": "2023-05-17T14:14:40Z", "commit_message": "Replace FindLibZ with cmake builtin ZLIB\n\nBetter to use standard package location code over our own stuff when\npossible.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a60b171eb288250c3f1d6f065b05d8a87aff3cdd", "commit_date": "2023-05-17T14:14:40Z", "commit_message": "Link binaries against zlib\n\nCommit 1181c12f (\"Parse kernel configuration\") placed an indirect link\ndependency on zlib. This makes linking fail on system with tighter\ncontrols on linking such as nixos.\n\nFix by directly declaring the dependency and directly linking against\nzlib.\n\nThis closes #2598.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "45b5fec172e9168cf1699cb2e495abe75085a535", "commit_date": "2023-09-27T07:07:37Z", "commit_message": "Fix incorrect variable name in the documentation\n\nThe environment variable controlloing the max string length is\nBPFTRACE_STRLEN, not BPFTRACE_STR_LEN.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4629b3ccb139a95be497f24d55d2ffcbe995d2ca", "commit_date": "2023-09-22T07:34:52Z", "commit_message": "Correct some printf types in runtimes tests", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38b0396036b6ce53baf9c29b96b89320235e6135", "commit_date": "2023-09-22T07:34:52Z", "commit_message": "Add jiffies builtin with bpf_jiffies64", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6b70a3e068f92e7375b8a310223ec56e540b6aa5", "commit_date": "2023-09-19T10:58:10Z", "commit_message": "Add pid and host targeting for uprobes/uretprobes (#2757)\n\nThis allows users to specify a single wildcard in place of the\r\nlibrary_path to either target the whole host or a process's address\r\nspace if a PID is also provided.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "192c87a82174a9bd1f0661a963d381f88d69aef9", "commit_date": "2023-09-19T10:12:54Z", "commit_message": "v0.19.0 release", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12c463e8ff71bb1423243cbc3d23a7c4d59d5b8b", "commit_date": "2023-09-15T08:43:25Z", "commit_message": "ClangParser: improve detection of unknown typedefs\n\nWe are seeing failures of some simple scripts using manual includes:\n\n    # cat script.bt\n    #include <linux/skbuff.h>\n    BEGIN {}\n\n    # bpftrace script.bt\n    [...]\n    /lib/modules/[...]/ibt.h:71:10: error: use of undeclared identifier 'true'\n    [...]\n    /lib/modules/[...]/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n\nLet's improve our parsing of undefined typedefs from Clang diagnostic\nmessages to be able to pull those typedefs from BTF.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "63af82c539ceb5f2d8004b939b95b397f8fabea4", "commit_date": "2023-09-15T08:43:25Z", "commit_message": "CI: temporarily disable biosnoop.bt test\n\nGitHub Actions runners seem to have updated kernel and the old version\nof `biosnoop.bt` is no longer necessary. Unfortunately, it looks like\nthis is the case for some runners only, so we cannot universally use\nneither the old nor the new variant.\n\nLet's disable the test for now and revisit later when all runners are\nupdated.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d724b52e19a759750d6e82a71d8cadbf3e117461", "commit_date": "2023-09-11T05:01:47Z", "commit_message": "Improve runtime test filtering\n\n- Also check the TEST_FILTER env variable to users can filter when\n  running `sudo make runtime-tests`\n- Use a partial regex instead of exact match\n- Add documentation on how to use it", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "28b8a428d28582d8b9a96bafc07a8fd6bf0a6056", "commit_date": "2023-09-08T03:41:40Z", "commit_message": "Increase timeout for usdt runtime test (#2758)\n\nThis test could take longer due to iterating over all pids on the host.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ea13e0d3b29c6a61840314d0da9f2083e3a9f71e", "commit_date": "2023-09-06T06:50:43Z", "commit_message": "Cleanups following on from nsecs(monotonic) implementation", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3ba0b74e7ae4cb5039de7b01e9b8d4dedfa5956c", "commit_date": "2023-09-06T05:58:44Z", "commit_message": "USDT: Enable targeting all pids/paths on a host\n\nThis utilizes the single wildcard `*` for the binary_path/library_path\nvalue to target all running pids on the host.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6e4318a2005992df121c6d25412c725e1cfb6d1", "commit_date": "2023-09-05T15:31:44Z", "commit_message": "appimage: Trim appimage size (#2749)\n\nThis commit trims the appimage size down to ~140M (down from ~300M)\r\nby excluding unnecessary files.\r\n\r\nThis brings the regression from the semi-static build down to ~3x\r\n(143/46.6).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9da81a4d61c60baa205a6465acabf15bf38c3824", "commit_date": "2023-09-05T10:27:05Z", "commit_message": "[docs] consolidate test documentation", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e32fdb3af87ea9afc571e8df626e9172ef322c3c", "commit_date": "2023-09-04T13:49:28Z", "commit_message": "Support embedded nix builds (#2736)\n\nThis adds support for building bpftrace as an appimage. See the\r\ndocumentation update in nix.md in the commit for usage.\r\n\r\nThis is intended to replace the current semi-static embedded build.\r\nThis approach has both pros and cons over the semi-static embedded build.\r\nFor one, the appimage is actually fully static (as it bundles the\r\nnecesssary libc). So it's more likely to work on more systems.\r\n\r\nThe downside is that the appimage is a ~10x larger binary than the\r\nsemi-static binary. The appimage also requires fuse to work (which most\r\nsystems should support). It's takes ~1s longer to start up which I don't\r\nthink is a huge deal.\r\n\r\nThis closes #2721.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f7ae0c3268417a26baf656086b169396b35de814", "commit_date": "2023-09-04T13:47:26Z", "commit_message": "ci: Cancel previous workflow runs if a new one is started\n\nShould help reduce the amount of redundant jobs in flight. This will\nmake the latest runs complete faster b/c they will not be queued behind\nstale/irrelevant runs.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "529ef55e7fa64f23eb734f984a6d4867eabd071b", "commit_date": "2023-09-04T13:46:58Z", "commit_message": "codeql: Use nix for codeql analysis\n\nThis gives us tightly pinned dependencies. If we change flake.nix:\ncodeql, ci, end developer builds, and appimages are all updated in sync.\nThis is a really nice property.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "420b053730846960f8c6afca3a934a602448251b", "commit_date": "2023-09-01T13:59:27Z", "commit_message": "scripts: create-assets.sh: Copy instead of hard link\n\nBefore, I was getting:\n\n```\n$ ./scripts/create-assets.sh\nUsing '/tmp/tmp.q9BHGxFIRP' as assert dir\nCreating tools archive\nCreating man archive\nCreating bundle\nln: failed to create hard link '/tmp/tmp.q9BHGxFIRP/tmp/bin/bpftrace' => 'bpftrace': Invalid cross-device link\n```\n\nProbably b/c my bpftrace repo is on my root fs and /tmp is on a tmpfs\nmount.\n\nFix by using copy.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d186daddbcdb9135f0730da17ecdba30ddd40225", "commit_date": "2023-09-01T05:35:05Z", "commit_message": "Runtime tests runner: remove debugging messages\n\nWhen adding support for multiple BEFORE clauses via commit f6f041e7\n(\"tests: teach runtime runner about multiple before clauses\"), we left\nsome debugging prints. Remove them as they pollute the tests output.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eb95b6b86c4b65b2d8e6836dc22f4ae6fcf8e32e", "commit_date": "2023-09-01T05:35:05Z", "commit_message": "After on call.skboutput was incorrect", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5262edc07ab80f77db10b288391bbf7339db833f", "commit_date": "2023-09-01T05:35:05Z", "commit_message": "Print output of BEFORE/AFTER on tests fail\n\nIf bpftrace is waiting for the BEFORE/AFTER clause to do something and\nit doesn't do it, it's good to know why.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb6cdc5946c27ef080dafb8204c4b6a70e1169b0", "commit_date": "2023-09-01T05:34:20Z", "commit_message": "Adding -vv help description\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f2d6896789c9d67a094ca1262c66451a40b0a46", "commit_date": "2023-08-31T10:29:15Z", "commit_message": "[man] update variants for USDT\n\nThis is to match the reference_guide.md", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "908ae0d73fc259731a3b9a7617d47e46d7c70ca0", "commit_date": "2023-08-31T10:28:20Z", "commit_message": "Correcting parameters to match expected string of runtime test\n\nPlease refer the github discussion for details.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3d29740108c64ddd573737e5747ab1a59140c0f2", "commit_date": "2023-08-31T05:58:40Z", "commit_message": "iter: Skip structures with '__safe_trusted' suffix\n\nIf kernel >= 6.2, there is a warning with 'bpftrace -l' command:\n\n    $ sudo bpftrace -l | grep iter:\n    WARNING: The kernel contains bpf_iter__task__safe_trusted struct but does\n    not support loading an iterator program against it. Please report this bug.\n    iter:bpf_link\n    iter:bpf_map\n    iter:bpf_map_elem\n    iter:bpf_prog\n    iter:bpf_sk_storage_map\n    iter:cgroup\n    iter:ipv6_route\n    iter:ksym\n    iter:netlink\n    iter:sockmap\n    iter:task\n    iter:task_file\n    iter:task_vma\n    iter:tcp\n    iter:udp\n    iter:unix\n\nkernel commit 6fcd486b3a0a(\"bpf: Refactor RCU enforcement in the verifier.\")\nadd 'struct bpf_iter__task__safe_trusted':\n\n    $ bpftool btf dump file /sys/kernel/btf/vmlinux format c | grep bpf_iter__task\n    struct bpf_iter__task {\n    struct bpf_iter__task_file {\n    struct bpf_iter__task_vma {\n    struct bpf_iter__task__safe_trusted {\n\nThis commit skips structs with '__safe_trusted' suffix.\n\nSigned-off-by: Rong Tao <rongtao@cestc.cn>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8bcf5bf4fe1dc9ee792944a7c37f5cd5badbf2dd", "commit_date": "2023-08-29T11:04:53Z", "commit_message": "test: dev_queue_xmit() made static inline\n\ndev_queue_xmit() is a wrapper for __dev_queue_xmit().\nmodifying kfunc trace to __dev_queue_xmit().\n\nCommit reference in Linux: c526fd8\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "70c25e806b732a7201a09b440ef306bdaa0f0e1e", "commit_date": "2023-08-28T17:15:35Z", "commit_message": "test: updating dependency for builtin & call tests\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f676cc812e77f2332b7edfda5beb1e79b459cc14", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Update CHANGELOG (int <-> int array casting)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "582f05c28e271b06bcfda4521235ef3b770e4f53", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Document casting ints to int arrays\n\nAdd examples of casts to both the Reference guide and manpage.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "627a72595fbf4e114686d213a7d49421d9da4f73", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Support casting integer arrays to integers\n\nIt is only possible to cast the entire array to an integer of the same\nsize. The main purpose is to allow conversion of byte arrays such as\nthose returned by the 'pton' builtin:\n\n    kfunc:tcp_connect\n    {\n        if (args->sk->__sk_common.skc_daddr == (uint32)pton(\"127.0.0.1\"))\n            ...\n    }\n\nSince arrays are internally stored as pointers, the codegen for this\njust reinterprets the pointer to the expected integer size and loads the\ndata as an integer (by a direct load or by an additional proberead).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "77abbc3cc96ab2124007d11328317dcfd8a141d2", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Casting to arrays: auto-determine number of elems\n\nSupport omitting the array size when casting to arrays as it can be\ncomputed automatically in semantic analyser.\n\nE.g. for `(int8[])42`, the array will have 8 elements (since ints are by\ndefault 64-bit).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "450e61b079eb50c977bb03ddfd307f3fa899ec7c", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Support casting integers to integer arrays\n\nThe syntax is the same as for other casts:\n\n    $array = (int8[8])42;\n\nFor now, it is only possible to cast integers to integer arrays. Both\nthe cast value and the target array must have the same size.\n\nThe integer being cast is copied to the BPF stack and the pointer to it\nis then reinterpreted as the target array pointer.\n\nThis, in combination with recently added array comparison, allows to\ncompare values which are stored under different types in kernel.\nE.g., IP addresses are represented with 32-bit int in \"struct sock\" [1]\nbut with byte array in TCP tracepoints [2]. This feature allows to\ncompare them:\n\n    kfunc:tcp_connect\n    {\n        @ = args->sk->__sk_common.skc_daddr;\n    }\n    tracepoint:tcp:tcp_rcv_space_adjust\n    {\n        // map values are always 64-bit so first cast to uint32\n        // and then to the target array\n        if ((uint8[4])(uint32)@ == args->daddr)\n        {\n            ...\n        }\n    }\n\n[1] https://elixir.bootlin.com/linux/v6.4/source/include/net/sock.h#L167\n[2] https://elixir.bootlin.com/linux/v6.4/source/include/trace/events/tcp.h#L64", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "53f51694da554a0ff0636eec0e1d63b232895534", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Parser: refactor simple types\n\nSplit simple types into integer types and builtin types. This is useful\nas it will allow special treatment of integer types and their usage in\nconstructions where builtin types don't make sense (e.g. arrays).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ec1eb1b9ff72e502d781055ec2e3f38eb6e40191", "commit_date": "2023-08-24T21:16:25Z", "commit_message": "Add FUNDING.yml\n\nAs discussed during office hours, it would be useful if we have a way\nfor sponsors to donate money. We may need to pay down some infra costs\nin the near term.\n\nI looked at a few options and it looked like OpenCollective was the most\nstraightforward. They can do fiscal hosting which means they'll deal\nwith all the tax stuff. But in exchange they take 10%. Not too bad (but\nalso not 0%).\n\nThis is the collective: https://opencollective.com/bpftrace", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba258818d57d6c948e4cebe4022c1058904e44a3", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "docs: Update developers.md", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "77de3c69d762a6cebac7c1ddacb16349df25e765", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "scripts: Update update_codegen_tests.sh\n\nUpdate to use nix infra so it matches the CI.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "16f982d3cd886dad6c7080103f2fa695946b7c6e", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: Unbuffer test output\n\nRunning headless in CI seems to cause buffering. While not a big deal\ngenerally speaking, it's kinda annoying when you're debugging CI and\nstaring at the output.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "430dd5b64c7e5a0ea4ce9b9c616fa30590da1813", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "ci: Migrate ci.yml to new nix infra\n\nThis should make it considerably easier to run the CI locally.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f56caa0b655d4ae12965ece8da04987a24708162", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "ci: Add ci.py\n\nThis script will serve as the new entrypoint for the ci.yml workflow.\nIt's intended to replace the current docker setup in favor of a more\ncacheable and more easily reproducible system via the new nix flake\ninfra.\n\nNote that this script is designed to be run locally on basically any\nlinux system _as well_ as in CI.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c72215aa4ebb189ae5e1abefae4bef909dafc98", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: Use /usr/bin/env to find interpreter\n\nThis makes the tests use nix-provided binaries. It's also just more\ncorrect to specify interpreters this way.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f2af079aa992458d04de3038827a89164269fa8", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "nix: Add runtime test dependencies to devshells\n\nThe runtime tests require a few extra packages to be installed. A bunch\nof test cases will `cat`, `tail`, `awk`, etc. at runtime, so the tools\nneed to be present.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "56bac0ddc20003478938ea9dd59d6891a039a314", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "runtime: runner: Propagate PATH\n\nNix does a lot of funny things to PATH, so it's important to propagate\nthat into the test run.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5c7d98e1f739da9a387db53234f9e056c032eabf", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: child: Fix childproc.multi_exec_match\n\nRewrite test to:\n\n* Not throw exceptions on failure (gtest does not like them)\n* Simplify symlinking (no chdir manipulation)\n* And work in nix env (where the PATH was overflowing the 2048 byte\n  buffer)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "33a6ee4d31b7d27f80b59341c26a3fdbee652e68", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: runtime: Delete software_order test\n\nThat test was historically flaky. And it's acting up again. So delete\nit. Make the remaining software probe test use a more reliable event.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c5432c24d227a8e9aaf01fe84e67f1e789326de", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: runtime: Fixup string trunc tests for nix env\n\nDuring this test we can race with other execve's. Some of those paths\nmay be rooted at /nix. We don't actually care about if it's /nix or\n/bin, just that the strings are truncated.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "94bcb5931d3de72a3fba251b33f51bb85a1b5045", "commit_date": "2023-08-23T07:20:57Z", "commit_message": "add notes on invocation mode", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3217b9456a1d52b67ab66260405582bb10d8cba6", "commit_date": "2023-08-22T13:12:06Z", "commit_message": "Reference Guide: Remove duplicate sections", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0fc58ac1ed1f173d796f395f24451cd01c572d4", "commit_date": "2023-08-22T13:12:06Z", "commit_message": "Add access to CLOCK_MONOTONIC with nsecs(monotonic)\n\nThis lets users explicitly request CLOCK_MONOTONIC when it is desired to\nget a timestamp exclusive of suspend time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb389ca34451673619fd1abd66d22e4cf4c41990", "commit_date": "2023-08-22T13:12:06Z", "commit_message": "Tests: Add expected_error option to semantic_analyser::test()\n\nAlso remove some optional parameters to make it easier to understand\nwhich test() overload is being used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46dd1ab76701a6bd3f7b1410335f4e6f229f131a", "commit_date": "2023-08-21T16:13:21Z", "commit_message": "test: codegen: Make kfunc targets determinstic\n\nBefore, codegen tests tried to look at the host's actual tracefs for\navailable_filter_functions. This would silently fail in most developer\nenvs as we don't usually run codegen tests as root. However, in CI, they\nactually ran as root so reads succeeded. This caused difficult-to-debug\nskew.\n\nFix by mocking out the filesystem access so tests are consistent no\nmatter where they are run.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6626dfa9d73540a013611cd1063a518d749a4a59", "commit_date": "2023-08-18T17:23:53Z", "commit_message": "test: codegen: Test both rolled and unrolled codegen\n\nThe previous logic was a little buggy. It looks like the intention was\nto check if the host supports loops and only test the codegen path that\nthe host supports. It's unclear if that logic actually worked, as it\nkinda layered on MockBPFfeature.\n\nIn any case, it's better to test both codegen codepaths where possible.\n\nAlso move both test cases into the same file so they can share the\nprogram definition.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "65427d22b388e0d4fb79f77c2fa6eef4d3f58a32", "commit_date": "2023-08-18T17:23:53Z", "commit_message": "test: codegen: Move MockBPFfeature init out to callers\n\nThis moves MockBPFfeature init out of the low level test() entrypoint\nout to the callers. Since there are relatively few users of the low\nlevel entrypoint, keep the core code simple by moving the init out.\n\nI'd prefer if we avoid the explosion of overloads we have in semantic\nanalyser tests.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0137b3ed2e86e4a345f6ebe9a0ce2d83510e6059", "commit_date": "2023-08-18T17:23:53Z", "commit_message": "test: codegen: Simplify common case test() calls\n\nThe simplified test() interface already sets up the MockBPFtrace.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "08a47afae50530656cfc15888a19d212f646daf8", "commit_date": "2023-08-16T16:46:24Z", "commit_message": "Fixing absolute address test issue across platforms\n\nmapping(using mmap()) to the address 0x10000000 works fine on few arch,\ni.e x86_64. However, on ppc64, this mmap fails, leading to an untriggered\nwatchpoint on 0x10000000. This patch dynamically replaces the allocated\naddress from mmap, causing the watchpoint to be triggered on write at the\ncorrect mapped address.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dabdaa2baad054d1ce66fb5b20ddc808bdf9fa19", "commit_date": "2023-08-16T16:44:32Z", "commit_message": "test: Make tests that create tmpdirs clean up\n\nSome tests weren't cleaning up after themselves. Better to at least\nattempt to cleanup.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b27b07e6c7f6729393d2fa39280aef421a0f79d5", "commit_date": "2023-08-16T16:44:17Z", "commit_message": "Update changelog", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f659c1c91416304a63dd4d3b5b0e4978806ded68", "commit_date": "2023-08-16T16:35:02Z", "commit_message": "tests: Add test childproc.multi_exec_match\n\n    $ sudo ./tests/bpftrace_test --gtest_filter=childproc.multi_exec_match\n    Note: Google Test filter = childproc.multi_exec_match\n    [==========] Running 1 test from 1 test suite.\n    [----------] Global test environment set-up.\n    [----------] 1 test from childproc\n    [ RUN      ] childproc.multi_exec_match\n    [       OK ] childproc.multi_exec_match (10 ms)\n    [----------] 1 test from childproc (10 ms total)\n\n    [----------] Global test environment tear-down\n    [==========] 1 test from 1 test suite ran. (10 ms total)\n    [  PASSED  ] 1 test.\n\nSigned-off-by: Rong Tao <rongtao@cestc.cn>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46e829db895afa4f545d616b507c540c8fcda124", "commit_date": "2023-08-16T16:35:02Z", "commit_message": "child.cpp: validate_cmd: Support symbolic links in environment variables\n\nOn some systems /bin is a symbolic link to /usr/bin (/bin -> /usr/bin), When\nusing the '-c' parameter to specify the executable program in the environment\nvariable, the problem of \"multiple binary files matching\" occurs, for example:\n\n  $ sudo bpftrace -e 'kprobe:do_nanosleep { printf(\"%d sleeping\\n\", pid); }' -c 'sleep 5'\n  ERROR: Failed to fork child: path 'sleep' must refer to a unique binary but matched 2 binaries\n\nDebugging the bpftrace program through gdb can also be verified:\n\n  (gdb) p valid_executable_paths\n  $9 = std::vector of length 2, capacity 2 = {\"/bin/ls\", \"/usr/bin/ls\"}\n\nAnother situation is:\n\n  $ realpath /usr/bin/ping /bin/ping /usr/sbin/ping /sbin/ping\n  /usr/bin/ping\n  /usr/bin/ping\n  /usr/bin/ping\n  /usr/bin/ping\n\n  $ sudo bpftrace -e 'kprobe:do_nanosleep { printf(\"%d sleeping\\n\", pid); }' -c 'ping -c 4 0'\n  ERROR: Failed to fork child: path 'ping' must refer to a unique binary but matched 4 binaries\n\nThis commit fixes this problem. See also v1[0], v2[1].\n\n[0] https://github.com/iovisor/bpftrace/pull/2682\n[1] https://github.com/iovisor/bpftrace/pull/2689\n\nSigned-off-by: Rong Tao <rongtao@cestc.cn>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d4ee0b6f47262d7e5b393ffdf0d6f471fd4c604", "commit_date": "2023-08-13T19:49:25Z", "commit_message": "tests: semantic: Fix semantic_analyser_btf.kfunc\n\nBefore, I was getting:\n\n```\n[ RUN      ] semantic_analyser_btf.kfunc\n/home/dxu/dev/bpftrace/tests/semantic_analyser.cpp:82: Failure\nExpected equality of these values:\n  expected_result\n    Which is: 0\n  semantics.analyse()\n    Which is: 1\n\nInput:\nkfunc:func_1 { @[func] = 1; }\n\nOutput:\nstdin:1:16-22: ERROR: BPF_FUNC_get_func_ip not available for your kernel version\nkfunc:func_1 { @[func] = 1; }\n```\n\ndue to the helper test not being mocked out.\n\nFix by mocking the helper out as being available.\n\nFixes: bf7d0fe2 (\"tests: semantic: Fix semantic_analyser_btf.kfunc\")", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "32c7cae4389fbcc60945fb160344b68471b3ac3b", "commit_date": "2023-08-09T16:22:01Z", "commit_message": "probe builtin with aliased soft-/hardware probes\n\nUsing probe builtin in software/hardware probes specified by alias name\nis not possible b/c ProbeMatcher cannot find the match:\n\n    # bpftrace -e 'software:cpu:1 { print(probe); exit() }'\n    No probes to attach\n\nFix this by adding the aliased name (if exists) to the search list.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eb6611df065c261caac52a2e258c66f447a5b5af", "commit_date": "2023-08-09T16:21:06Z", "commit_message": "Removing unsupported options of subprocess.run()\n\n\"capture_output\" and \"text\" options is supported beyond\npython-3.7, whereas some instances of current CI pipeline\nare using python-3.6 and facing failures. The \"stderr/sdtout\"\noption is supported across python versions.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e9bede1a8dc588d573af9d1d4bae2fb663c126a", "commit_date": "2023-08-09T09:06:27Z", "commit_message": "printf: Fix mismatch between format specifier and argument\n\nInteger arguments to printf-style functions are represented as 64-bit ints,\nboth in generated BPF code [1] and in bpftrace-side printing logic [2].\nTherefore, a common pattern such as `printf(\"%d\", pid)` is buggy -- it uses\nthe conversion specifier for ints to print an int64_t value.\n\nWhile in practice this works as expected on most platforms (the value is\ntruncated to 4 bytes), it's by accident -- it depends on the architecture,\ntoolchain, calling convention, etc. For example, the above breaks on arm\nwith gcc where the compiler emits the following code for PrintableInt:\n\n   0x000d6240 <+8>:     vldr    d7, [r12, #8]    # this->value_\n   [...]\n   0x000d6250 <+24>:    vstr    d7, [sp]\n   0x000d6254 <+28>:    mov     r2, r3           # fmt\n   0x000d6258 <+32>:    bl      0x1e000 <snprintf@plt>\n\n(Note that the first 3 arguments to snprintf are passed via r0-r2, but\nvalue_ is pushed onto the stack; snprintf expects the \"%d\" argument to\nbe in r3, so it ends up printing the value of fmt instead)\n\nThis patch adds an explicit cast to make sure that the argument provided\nto snprintf is consistent with the conversion specifier.\n\n[1] https://github.com/iovisor/bpftrace/blob/34cf5c2b53b82cddc9111055cd499d6e35763f3c/src/ast/passes/codegen_llvm.cpp#L3167\n[2] https://github.com/iovisor/bpftrace/blob/34cf5c2b53b82cddc9111055cd499d6e35763f3c/src/printf.h#L82", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "534bca42bd313e09ae593f41b3cbb46b64959869", "commit_date": "2023-08-07T06:01:40Z", "commit_message": "tools: Remove stale comments about ipv4 limitation\n\nCommit c9dd10f93ba2 (\"[ntop] add support for arrays and IPv6\") added\nipv6 support to the tools, remove the stale comments about only\nsupporting ipv4.\n\nSigned-off-by: Gal Pressman <gal@nvidia.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e010d27b4b5b3c873544a7d16bf864bcf918d665", "commit_date": "2023-08-03T14:30:23Z", "commit_message": "Fixing stack unwind regex for ppc\n\nStack unwinding in x86 skips the test2 function,\nwhereas unwinding on ppc lists function test2.\nThe current regex is not having test2 match-string,\nhence test failure on ppc.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5fcc340ae1a2cc531dc381fb07a1e2c378c4a20a", "commit_date": "2023-08-03T14:29:36Z", "commit_message": "uprobe: improve C++ probes listing\n\nWhen listing probes with the new \":cpp\" prefix, demangle function names.\n\nExample:\n\n    # bpftrace -l 'uprobe:/my/prog:*'\n    uprobe:/my/prog:_Z3funi\n    uprobe:/my/prog:_ZN3Bar3funEv\n    uprobe:/my/prog:_ZN3Foo3funEv\n\n    # bpftrace -l 'uprobe:/my/prog:cpp:*'\n    uprobe:/my/prog:cpp:\"fun(int)\"\n    uprobe:/my/prog:cpp:\"Bar::fun()\"\n    uprobe:/my/prog:cpp:\"Foo::fun()\"\n\nNote: we need to surround the demangled name with quotes as it may\ncontain some symbols which won't be accepted by the attach point parser\n(e.g.  \"::\" or \"()\"). With quotes, the listing entries can be directly\nused as attach points.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0ceaef3cd6333a3cd3239b4ae105099e8e9f4b67", "commit_date": "2023-08-03T14:24:09Z", "commit_message": "Support func builtin for k(ret)func probes\n\nSince [1], kernel has the 'bpf_get_func_ip' helper to get the value of\ninstruction pointer from BPF_PROG_TYPE_TRACING programs. This allows to\nenable the `func` builtin in k(ret)func probes.\n\nAlso adding feature detection for the helper into both `--info` and\nruntime tests.\n\n[1] https://github.com/torvalds/linux/commit/9b99edcae5c80c8fb9f8e7149bae528c9e610a72", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0b3392baa881f501ce684637acbd4136f8a29ed3", "commit_date": "2023-07-26T09:05:12Z", "commit_message": "tests: Only set up dwarf data file once\n\nWe only need to do it once globally since the contents don't change.\n\nAlso delete the datafile after the tests are over and chmod to give\neveryone executable permissions (semantic analysis needs this).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7c2d8005cef826a6457189f1454a632378413337", "commit_date": "2023-07-25T13:31:45Z", "commit_message": "Update CHANGELOG (probe listing and probe builtin)\n\nThe PR allowed listing of software, hardware, interval, and profile\nprobe types. Also fixed using the 'probe' builtin from hardware and\nsoftware probes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4b19d19d5abf9fbdf4c36cc1a3610ba14d3c4bf8", "commit_date": "2023-07-25T13:31:45Z", "commit_message": "Allow listing profile and interval probes\n\nIt is now possible to use wildcards for profile/interval probe listing\nto get the list of all available frequency units:\n\n    # bpftrace -l 'interval:*'\n    interval:hz:\n    interval:ms:\n    interval:s:\n    interval:us:", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "817179075c67d9d55a10661ec44047eab1e4e52a", "commit_date": "2023-07-25T13:31:45Z", "commit_message": "Support 'probe' builtin in hardware/software probe\n\nWhen using the 'probe' builtin, probe is expanded even if the given\nprobe type doesn't support wildcards. This poses problems for hardware\nand software probes as the generated probe name is not correct.\n\nThis commit fixes the problem by using the correct probe name.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "87a112e284a4d8a3c31bfdfa3bb882755c4e8a8a", "commit_date": "2023-07-25T13:31:45Z", "commit_message": "Fix listing software/hardware probes\n\nIn probe matcher, hardware and software probes are handled with the same\ncode as e.g. tracepoints of kfuncs. This is not correct since hardware\nand software probes never define the 'func' field, only the 'target'\nfield. This causes problems with probe listing:\n\n    # bpftrace -lv 'software:*'\n    software:*:\n\nMove handling of these probes to a separate case using only 'target'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "738a7bd179bf56e11d5c61441cc77e6ecc569685", "commit_date": "2023-07-25T12:44:29Z", "commit_message": "Attachpoint parser: improve stoull error messages\n\nThere's a number of probe types that expect a number as one of their\narguments. We use our own parser to convert a string to an integer,\nhowever, when it fails, the error message is not very nice:\n\n    # bpftrace -e 'interval:5:s{ @[comm] = count();}'\n    stdin:1:1-13: ERROR: stoull\n    interval:5:s{ @[comm] = count();}\n\nProvide better messages for all places where stoull/stoll may fail in\nAttachPointParser:\n\n    # bpftrace -e 'interval:5:s{ @[comm] = count();}'\n    stdin:1:1-13: ERROR: stoull\n    invalid rate of interval probe\n    interval:5:s{ @[comm] = count();}", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "91db77c5707c30346035330ea4fb719821254161", "commit_date": "2023-07-24T16:35:02Z", "commit_message": "Decouple kheaders unpacking from BTF support\n\nThis is a partial revert of 17bbcd2b0 (\"kheader: Do not unpack kheaders if\nsystem has BTF\"). Checking if the kernel supports BTF is not sufficient, as\nClangParser may decide to not use the BTF-generated header in case there are\nconflicts with user-defined types[1].\n\nFor example, the following script falls back on kernel headers, which on a\nsystem that relies on CONFIG_IKHEADERS (e.g. Android) produces this error:\n\n  $ sudo bpftrace -\n  struct task_struct {}   // redefinition\n  struct foo { struct task_struct dummy; }\n  BEGIN {}\n  ^D\n  /bpftrace/include/clang_workarounds.h:14:10: fatal error: 'linux/types.h' file not found\n\nThis also unbreaks scripts written for older kernels without BTF support\nthat unconditionally include kernel headers.\n\n[1] https://github.com/iovisor/bpftrace/blob/3c417c8e3792c58a5958e3b1c49958ac063667a8/src/clang_parser.cpp#L765", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "952628379ac647bd22aae711f8aabb2ad2f0e700", "commit_date": "2023-07-24T07:21:28Z", "commit_message": "Fixing runtime tests for ppc\n\nIn ppc, \"nip\" is used for instruction pointer.\nOther fix is general dependency issue.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dd0e6c5a3659420975d539e327cf66ceb58c0f3d", "commit_date": "2023-07-24T05:59:37Z", "commit_message": "Allow '+' in attach point path", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6ae54410db34bb91c572e96e59a246ce7701ef70", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "tests: tools: Find tools directory relative to script\n\nPrevious code assumed cwd was inside build/tests.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff6837590ac78c0ede543edfedaf5f1e7b77a8bc", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "runtime: engine: Do not line buffer subprocesses\n\nLine buffering stdout/stderr does not make much sense as we are only\nreading. IIUC line buffering is really only useful when writing to a\nfile.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "66491792ec9917a170fd47693dfc0758bcfd7732", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "runtime: engine: Use start_new_session instead of os.setsid\n\nThe former was introduced to replace the latter b/c the latter can\ndeadlock. Update for correctness.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "29eb48210989384bdb701e3a03130dab4e50373b", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "runtime: engine: More reliably collect test output\n\nPreviously, we were using `Popen.communicate()` to collect test case\noutput after probe attachment. This meant that if a test case did not\nexplicilty call exit(), then the timer would fire and we could\npotentially lose output b/c\n\n    output += p.communicate()[0]\n\nwould not fully execute and all the data buffered in p.communicate()'s\nimpl would be lost.\n\nA potential fix could be to use in-band timeouts with communicate()'s\ntimeout parameter. But some experimentation has shown that communicate()\nand readline() implementations may not share the same underlying buffer\n(as both impls buffer output from the OS) and could lose data depending\non how much the OS returns to python at a time.\n\nSo change all calls to communicate() to `_io.TextIOWrapper` methods.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "568fb7790ccddc8b09a531891307112a7c661467", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "runtime: engine: Remove PATH manipulation\n\nRemove $PATH manipulation when shelling out. It was added in c7f1aa6d\n(\"Fix field analyser not requesting BTF info for identifiers\") but was\nlater made unnecessary in 27759be0 (\"tests: Add {{BPFTRACE}} runtime\nvariable\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2a9db896994294733a9198cde06feb077adca5cc", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "Update CHANGELOG (symbol demangling)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b0569acafbf2fab109abd68ef91a2151776a84cf", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "Update docs with info on symbol demangling\n\nFor now adds just basic information about demangling and the C++ uprobe\nprefix.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb8efcd16ef5e5385133d0bf5894eb68de98fcb8", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "uprobes: fix false matches for demangled symbols\n\nWhen matching demangled symbols from the binary, we always add a\ntrailing wildcard to the search input b/c the demangled name contains\nalso the argument list (e.g. \"fun(void)\"). This, however, produces false\nmatches as \"fun\" would also match e.g. \"function(void)\".\n\nThis commit takes a different approach. Rather than adding a trailing\nwildcard, remove the argument list from the demangled name that we're\nmatching against, unless the user explicitly specified the '(' character\nin the search input meaning that he wants to match against function\narguments, too.\n\nThis allows to remove addition of the trailing wildcard. At the same\ntime, we remove addition of leading wildcard as it has no effect.\n\nExpand unit tests to cover this situation.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9452ede945165134d716f81fb82b899df1207108", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "uprobes: disable demangling without :cpp prefix\n\nThe previous commit introduced a new part of uprobe specification - the\nlanguage prefix. For now, only C++ prefixes are supported.\n\nThis commits changes the behaviour of uprobes by only allowing symbol\ndemangling when the :cpp prefix is specified. This saves some\ncomputation time and gives users a better control over bpftrace\nbehaviour. In addition, symbol demangling sometimes produces confusing\nresults - demangling support automatically adds leading and trailing\nwildcards, which means that more functions than expected are sometimes\nmatched. Now, this behaviour does not happen for default uprobes.\n\nNote that this is a breaking change b/c it is now required to specify\nthe :cpp prefix to enable symbol demangling (it was always enabled\npreviously).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ca98ab16de7890b38d89fb12830be6854592d0a", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "uprobes: support language probe prefix (for C++)\n\nAdd a new part of probe definition which allows to specify the language\nin which the traced binary is written. This will allow to enable\nlanguage-specific features.\n\nFor now, allow C++ prefix \"cpp\".\nAt this point, specifying the prefix has no effect. In future, giving\none of the above will allow C++ symbol demangling.\n\nThere are now four parts of uprobe specification and some of them are\noptional, which may create tricky situations:\n- 'uprobe:bin:func' attaches to 'bin' and uses no language-specific\n  features,\n- 'uprobe:bin:func ... -p PID' attaches to 'bin' with given PID (if the\n  process runs 'bin') and uses no language-specific features,\n- 'uprobe:cpp:func ... -p PID' attaches to PID and uses C++ features,\n  this one is distinguished from the previous one by using one of the\n  supported language prefixes as the second part of the attachpoint,\n- 'uprobe:func ... -p PID' attaches to PID and uses no language-specific\n  features.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e4558a667eef91887c94389d7df51680b02446bc", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "Fix uprobe symbol resolution\n\nThe BPFtrace::resolve_uname function doesn't search for function symbols\nwhich causes BPFtrace::add_probe to always perform a ProbeMatcher\nsearch, even if the attach target exists in the binary. This is rather\ninefficient so better expand the symbol search to functions, too.\n\nNote that this is a potentially breaking change for binaries combining C\nand C++ symbols. The reason is that if the attachment target precisely\nmatches a symbol name in the binary, the ProbeMatcher search will now be\nskipped and we'll potentially not attach to some mangled C++ functions\nthat we attached to before. This situation should occur very rarely,\nthough.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c89439494f03668af2b2cf25774d97ac0633c416", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "Refactor ProbeMatcher w.r.t. symbol demangling\n\nAdd a new parameter to ProbeMatcher::get_matches_in_stream that allows\nto control whether symbols should be demangled. For now, always set the\nparameter to true.\n\nThe purpose of this is to prepare for an improved handling of symbol\ndemangling where we will only turn it on in certain cases.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3c417c8e3792c58a5958e3b1c49958ac063667a8", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Update CHANGELOG (improved work with args)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2c9cc119eb00d927e095ca57a2990bb36b08ce3a", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Document the args builtin\n\nAdd entry to the reference guide and manpage about the `args` builtin.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e77f6896b1285a6b6eba044e16880c88faa2f44", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "uprobe: support accessing entire args\n\nAllows to pull all arguments of a uprobe from DWARF into a single\nstructure (record) using \"args\". The record can be used as any other\nrecord - printed, stored inside maps/variables, used as a map key, etc.\n\nThis enables constructions like:\n\n    print(args);\n    @[args] = count();\n    @[tid] = args;\n\nThe implementation builds on the fact that probe args are now stored\ninside struct manager under a special \"struct <probename>_args\" type.\nWhen accessing the \"args\" builtin in a uprobe, this builds a new record\n(having the above type) on stack and fills it with probe args (from\nregisters).\n\nOne effect of this is that all uprobe args are always read onto stack,\neven when a single arg is necessary (e.g. \"args.a\" is used). This is a\nbit inefficient but much better fits the current implementation. Since\nthere are at most 6 args, the slowdown should be small.\n\nAlso a difference from other records in bpftrace is that we don't use\nbyte arrays to represent the new record with an LLVM type. The reason is\nthat it is easier to use GEPs with indices to access individual args,\ninstead of using byte offsets inside the new record.\n\nAdds runtime tests for the above constructions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cad1cfb0291cf783181ff4e17e681ef96b80f7a3", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Allow args as map key/value in k(ret)func\n\nSince args is now representing a record containing all function args, it\nmay be used as a map key/value since the it will be proberead and copied\ninto the map. For now, this only works for k(ret)func probes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "92b2b999383b71d6a975169f805a04cd15e210cb", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Allow assigning args to a local var in kfunc\n\nThis was disabled by commit 722c5c73ebdc (\"Error if trying to assign\nargs to a variable in kfunc\") since it was not supported at the time.\nNow, FieldAnalyser supports this so it can be enabled.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5c002da40afd2d750d28e80a69b03347aeb2a65b", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Semantic analyser: fail on accessing empty args\n\nWhen trying to access the 'args' builtin for a probe in which the\narguments cannot be parsed (e.g. are not present in DWARF/BTF), throw an\nerror in semantic analyser (instead of segfaulting in codegen).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5ffa91ea739d679e684e1911fd3787ef3fb488b7", "commit_date": "2023-07-14T09:13:18Z", "commit_message": "Introduce builtin function nsecs(tai) which is nanoseconds of CLOCK_TAI  (#2619)\n\n* add nsecs([MODE]) function\r\n\r\nThe nsecs function is added, and its receiving parameter is a timestamp mode, such as boot, and tai, tai_sw and other support will be added in subsequent patches.\r\n\r\nnsecs() defaults to nanoseconds since system boot, synonymous with nsecs(boot).\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add timestamp mode member to Strftime\r\n\r\nAdd timestamp mode member to Strftime. Use mode to represent the timestamp type of the strftime function, which can be boot or tai (subsequent patches will implement tai)\r\n\r\n- add mode member to Strftime\r\n- remove test cases about nsecs in Parser.call_builtin\r\n- update call_strftime.ll\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* support tai timestamp\r\n\r\nKernel versions 6.1 and above provide the ktime_get_tai_ns helper function. We can get the timestamp through nsecs(tai). And use TimestampMode to solve the problem of wrong results when strftime formats tai timestamp\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* support sw_tai timestamp\r\n\r\nAt present, the kernel versions of most users stay at 4.19 and 5.10, and these kernel versions do not support ktime_get_tai_ns. Thus, we provide sw_tai, sw_tai obtains the approximate tai time through the \"triple vdso sandwich\" method area, and its accuracy is about tens of nanoseconds.\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* docs: fix wrong format of `offsetof` entry\r\n\r\nadd `offsetof` entry into table contents and fix wrong header format of `offsetof`\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add nsecs() guide\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add semantic analyser test for nsecs()\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add codegen test for nsecs()\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add runtime test for nsecs()\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3ddb60bc1d019da6cb91b2127b5272d7f1d6f234", "commit_date": "2023-07-13T21:29:30Z", "commit_message": "cmake: fix linking libbfd\n\nOn some distributions, libbfd is not available as a shared library (e.g.\nopenSUSE [1]). In such a case, libbfd.a must be used and the libraries\nthat it requires must be linked manually, even when bpftrace is linked\ndynamically, otherwise the compilation fails.\n\nThis fixes the above problem by:\n- adding a detection that static libbfd.a is used and in such a case\n  linking necessary libraries even for dynamic builds and\n- expanding the list of necessary libraries to all that may be required:\n  libopcodes, libz, libzstd, libiberty, libsframe.\n\n[1] https://bugzilla.suse.com/show_bug.cgi?id=1162312", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59bf5f0ba3ff0969f9c4c557a75304a069d6c6ad", "commit_date": "2023-07-13T08:50:06Z", "commit_message": "Update INSTALL.md", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "945e558eb7d2eae0fe541ad4603fd90125e78a46", "commit_date": "2023-07-12T16:59:40Z", "commit_message": "arm: Determine target arch at runtime\n\nAs of 9d9cb58c9 (\"Add helper methods to obtain pointer width of traced\ncode\") we're already checking if the kernel is 32-bit, and this can be\nextended to figuring out the list of available registers, the layout of\n`struct pt_regs` etc. dynamically rather than having separate armv7 and\naarch64 implementations selected at compile time.\n\nThis makes it possible to use the same 32-bit build of bpftrace on both\narm and arm64 kernels.\n\nFixes #2654", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "34cf5c2b53b82cddc9111055cd499d6e35763f3c", "commit_date": "2023-07-11T08:11:39Z", "commit_message": "arm: Fix gcc build when using -mthumb\n\nWhen compiling with `-mthumb`, we need to force the compiler to generate ARM\ncode for the two trigger functions for uprobes to work. This is achieved by\nusing the target attribute[1].\n\nWhile this works fine with clang, gcc complains about an invalid conversion\nwhen calling run_special_probe[2]; latest development version (14.0) suggests\nthis is a gcc bug:\n\n  <source>:8:9: internal compiler error: canonical types differ for identical\n      types 'void()' and 'void()'\n\nThis patch adds an explicit cast as a workaround.\n\nReported-by: @daniloegea [3]\n\n[1] https://gcc.gnu.org/onlinedocs/gcc/ARM-Function-Attributes.html#index-target-function-attribute-1\n[2] https://gcc.godbolt.org/z/44b5MjdbT\n[3] https://github.com/iovisor/bpftrace/pull/2360", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e199c7e73da84bff9fe744d1e3402c2b505aa5a2", "commit_date": "2023-07-06T09:08:40Z", "commit_message": "Reduce size of SizedType class\n\n- Store all sizes internally as bits, converting back to bytes as needed\n- Delete unused field num_elements_\n- Shrink StackType::limit\n- Shrink underlying types of enums\n- Reorder fields from largest to smallest (roughly)\n\nBefore:\n  sizeof(SizedType) = 136\n\nAfter:\n  sizeof(SizedType) = 96\n\nSizedType objects are created and copied a lot during compilation, so\nreducing the size should help with performance.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9e4a5b16bd16a105d8bd4cda91db6ed4267182be", "commit_date": "2023-06-26T09:22:50Z", "commit_message": "AttachPointParser: Error handling improvements\n\n- Ensure integer parsing errors end in new lines\n- Parse signed integers when requested (not always unsigned)\n- Early returns from sto[u]ll parsing errors to reduce nesting\n- Ensure non-fatal errors do not get displayed\n\nAttempting to parse a string with stoll can result in a non-fatal error\nwhen parsing uprobes, as they are allowed to accept either an address or\na function name. This stoll error should never be displayed to the user.\n\nPreviously, when the error buffer was not cleared between attachpoints,\nif the next attachpoint had a fatal error then this non-fatal stoll\nerror would also be displayed.\n\nDue to a combination of the now-fixed problems, the error message for\nthe new test case used to be:\n\n  ERROR: Coefficient part of scientific literal is not a valid number: Str: stoulltracepoint probe type requires 2 arguments\n\nNote the missing newline and the non-fatal first error.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b23cda02eb3ab4394b61300a5a014cf14b14b0fc", "commit_date": "2023-06-23T07:01:50Z", "commit_message": "Revert \"Fix one-liners args access\"\n\nThis reverts commit 39d026ecfb229376be6fd708ed937ef2e320a28d.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "39d026ecfb229376be6fd708ed937ef2e320a28d", "commit_date": "2023-06-22T20:53:33Z", "commit_message": "Fix one-liners args access", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "593f5c96cf80e0ee1f60bd8cdebe197388a6f751", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "Update changelog\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "539756d42f321ebae75878d3b0820c46aaf56a8e", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "Fix the problem of panic when running `bpftrace -l iter:`\n\nWhen ap.func is empty, the input parameter tokens of the wildcard_match function will be empty, and a panic will occur when tokens[0] is obtained. Therefore, iter should be similar to kfunc, and avoid ap.func being empty during the semantic analysis stage.\n\n```\nbpftrace -l kfunc:\nstdin:1:1-7: ERROR: kfunc should specify a function\nkfunc:\n~~~~~~\n\nbpftrace -l iter:\nstdin:1:1-6: ERROR: iter should specify a iterator's name\niter:\n~~~~~\n```\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c2dbcbbbe8329ac0d1145c418088a9b7d8a7893", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "support all iters\n\nSupport all iters, this patch mainly modifies the following places:\n\n- Delete the hard code, and get the type of iter by concatenating `bpf_iter__` and the function name\n- Use has_iter to check whether the iter exists\n- add iter tracing function for tests\n- clean up older iter related code\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1caba6b52f825bef338bbb3e7785906b22c05398", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "support to get all iter params\n\nFor each iter, the kernel will have a bpf_iter_$ITER function, so we can get the parameters of iter through bpf_iter_$ITER.\n\nRun `bpftrace -l iter:*` and shows:\n\n```\niter:task\n    struct task_struct * task\niter:task_file\n    struct task_struct * task\n    int fd\n    struct file * file\niter:task_vma\n    struct task_struct * task\n    struct vm_area_struct * vma\n```\n\nThe output after applying this patch is as follows:\n\n```\niter:bpf_map\n    struct bpf_map * map\niter:bpf_map_elem\n    struct bpf_map * map\n    void * key\n    void * value\niter:bpf_prog\n    struct bpf_prog * prog\niter:bpf_sk_storage_map\n    struct bpf_map * map\n    struct sock * sk\n    void * value\niter:ipv6_route\n    struct fib6_info * rt\niter:netlink\n    struct netlink_sock * sk\niter:sockmap\n    struct bpf_map * map\n    void * key\n    struct sock * sk\niter:task\n    struct task_struct * task\niter:task_file\n    struct task_struct * task\n    u32 fd\n    struct file * file\niter:tcp\n    struct sock_common * sk_common\n    uid_t uid\niter:udp\n    struct udp_sock * udp_sk\n    uid_t uid\n    int bucket\n```\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4b8cf6b2fef23a35103a3e7942cb267cbea1987f", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "fix 'bpftrace -l iter:*' printing wrong list\n\nRun bpftrace -l iter:* the output is as follows:\n\n\titer:task\n\titer:task_file\n\titer:task_vma\n\nBut the current kernel does not support 'iter:task_vma'. After applying this patch, run the command again, the output is as follows:\n\n\titer:bpf_map\n\titer:bpf_map_elem\n\titer:bpf_prog\n\titer:bpf_sk_storage_map\n\titer:ipv6_route\n\titer:netlink\n\titer:sockmap\n\titer:task\n\titer:task_file\n\titer:tcp\n\titer:udp\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7b45ce9d2d6a334f57d7f624ebfecf8a84ed1332", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "get all iters from btf\n\nAccording to [1], we can get all iter types supported by the current kernel according to the 'bpf_ter__' prefix\n\n[1]: https://www.kernel.org/doc/html/latest/bpf/bpf_iterators.html#how-to-use-bpf-iterators\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5a592c6bc8c75863f3598ad41fc2c8881bb87938", "commit_date": "2023-06-16T16:39:16Z", "commit_message": "update the helper function list of the bpf.h file\n\nUpdate list of helper functions\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fdd60c453dd814dc72862c817bceaa171002092f", "commit_date": "2023-06-16T16:39:11Z", "commit_message": "Increase the distance of backslashes\n\nIncrease the distance of backslashes, because some helper function names are very long, and the distance of backslashes is no longer able to maintain line alignment, so increase the distance of backslashes\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "960fb8c1eadf671e5d4de4947b56801b241ae444", "commit_date": "2023-06-16T11:12:05Z", "commit_message": "fix kernel cflags for loongarch\n\nThe arch should return loongarch in loongarch64 machine, but it\nreturn loongarch64, because it is loongarch in kernel source tree.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "87ee52395117d865724bd4daec5e8a8152b186f8", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Update CHANGELOG.md\n\nBetter symbol resolution", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b067adf627e81adfdfcbccc3f2d3f66e81d0104a", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Add tests for usym cache preload\n\nNote: test for ASLR enabled is disabled because of race condition,\nsee https://github.com/iovisor/bcc/pull/4319.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e4e4dbc69d008831b28be5592f9e36c27683efb", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Allow user to set user symbol caching type\n\nChange BPFTRACE_CACHE_USER_SYMBOLS values from 0 and 1 to PER_PID,\nPER_PROGRAM, and NONE. The values 0 and 1 are still supported, meaning\nNONE and default (see below), for compatibility.\n\nThe new default is PER_PROGRAM when ASLR is disabled and PER_PID if\nASLR is enabled. NONE option can be used to save memory in case the\nnumber of traced processes is high.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e4ef2f1a82cd5193ccbf3ad9b3f24d7df13fd748", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Mention usym() limitations in manual", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5b20ba90930b92bbe5cba91ea3b4b2935c1781f", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Preload symcache for running processes\n\nWhile attaching a uprobe using symbol resultions, look for running\ninstances of the program targeted by the uprobe and create a BCC symcache\nfor each of them.\n\nThis enables bpftrace to resolve usyms for processes running at the time of\nattaching the probe even when ASLR is on and the process is gone at the time\nwhen the print event fires.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "390f048d9ea73b06f360030598b438636924cec3", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Add ELF-based userspace symbol resolution\n\nIn addition to resolving usyms from the running process, an alternative\nis implemented that reads the program binary via libelf. This is useful\nfor cases when the usym resolution happens after the process exists.\n\nThis approach does not work for dynamically loaded symbols or processes\nwith ASLR enabled, in these cases usym resolution falls back to using\nBCC symcache.\n\nImplementation notes:\n- To access the program binary, a \"probe id\" (distinct from the AST probe\nid) is generated in resource analyzer, and passed via usym/ustack events\ninto the userspace when the associated perf event fires. If the probe\ncontains only one attach point, and therefore one program, this allows\nthe binary to be identified even for exited processes.\n- ustack perf event was changed from pid/stack id packed integer to struct\nto fit the probe id.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5c09d9374d0df6a1a108cea50de7033808f56d9", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Add usym caching by PID\n\nExtend caching usym tables by program (used when ASLR is disabled) with\ncaching by PID, which is used when ASLR is enabled.\n\nWithout ASLR all instances of one program share the same memory layout,\nhence it can be stored once per-program.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "64048acb9c64c13acb927e37a2423e6d42985e8d", "commit_date": "2023-06-06T13:17:36Z", "commit_message": "Fix alignment of byte arrays inside tuples\n\nWhen using types internally represented by byte arrays inside tuples\n(e.g. usym, inet, etc.), LLVM aligns them to 1 byte inside the tuple. We\nmust do the same in our internal type system so that the size of our\ntype matches the size of the type generated by LLVM.\n\nThis also renames the `SizedType::GetAlignment` method to\n`SizedType::GetInTupleAlignment` as it's only used to get alignment of a\ntype when it is used inside a tuple and the old name was confusing.\n\nAdded runtime and codegen tests for a case where bpftrace previously\ncrashed.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d3ffdb965cd71a0a538c673003c3c65920a68fa0", "commit_date": "2023-06-06T05:32:00Z", "commit_message": "docs/tutorial_one_liners_chinese: Fix a chinese typo\n\nSigned-off-by: Rong Tao <rongtao@cestc.cn>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "be2a24acc365a99b799ee60d83ffc6b2d0fdd35a", "commit_date": "2023-06-05T06:29:37Z", "commit_message": "Update INSTALL.md\n\nAdded libffi-devel due to build-libs.sh message.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38bbc2c0886853246b54bbc3de9a3a2bd3cc3a19", "commit_date": "2023-06-05T06:29:37Z", "commit_message": "Update INSTALL.md\n\nUpdate list of dependencies to successfully build on Fedora 38", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59eabbe1f6b2e1f43fa20014e9e84f06a3d260d8", "commit_date": "2023-06-05T05:13:21Z", "commit_message": "Replace args->x by args.x in docs\n\nThe `args` builtin has been transformed from a pointer to a normal structure.\nUpdate the Chinese version of one-liner tutorial to synchronize with its\nEnglish version.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1230b41f4bd8b27b444ed555ecacd0f266b5784f", "commit_date": "2023-06-05T05:13:21Z", "commit_message": "Update tutorial_one_liners_chinese.md\n\nPolish the Chinese version of one-liner tutorial by fixing typos and\nimproving expression.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "446109acdef586fb0f0b5d40196dedb946b613ed", "commit_date": "2023-06-03T03:00:28Z", "commit_message": "Add CHANGELOG entry for #2623", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a20675c14900c0f7fb774c271fbd5f79d714a279", "commit_date": "2023-06-03T02:56:58Z", "commit_message": "Add runtime test for parallel map accessing\n\nSigned-off-by: maokelong <chenjinglong1@huawei.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6edb980285dfbbfed8d8ca920cedd8289d8f96d6", "commit_date": "2023-06-03T02:56:58Z", "commit_message": "Fix crashes caused by improper error handling for bpf_*_elem\n\nbpf_*_elem returns -errno when error occured. These functions will\nreturn -ENOENT(-2) when they failed to find a entry. It's a harmless\nerror that could be found when doing delete and print/zero/clear\noperations on the same map simultaneously. It's not reasonable to\nstop the whole program at this moment.\n\nSigned-off-by: maokelong <chenjinglong1@huawei.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3726c0281ece85c5b7f074ece88091e3b4ccbfe1", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Update CHANGELOG (making `args` a struct)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e73f0d5d4e1a62d2cf542c18b03546b2899edf50", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Replace args->x by args.x in docs and tools\n\nThe `args` builtin has been transformed from a pointer to a normal\nstructure. While dereferencing and using `->` is still possible for\nbackwards compatibility, the canonical way now is to use plain dot\noperator to access individual arguments (e.g. `args.filename`).  Reflect\nthat in documentation (reference guide and tutorial) and tools.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "353146a10c242bab7bc66ae5cf92a46af46b63bf", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Replace `args->` by `args.` in tests\n\nThe `args` builtin has been transformed from a pointer into a normal\nstructure, hence it should now be accessed using the plain dot operator.\nTransform tests to reflect that.\n\nThe access via dereference is still supported for backwards\ncompatibility, so add few tests to check that it works fine (basically\none runtime and one unit test for each probe type that supports args -\ntracepoints, kfuncs, uprobes).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "13c3ca3ff7dd28fb7afa1284a076bbc25e9ffb9d", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Make `args` builtin a structure (not a pointer)\n\nHistorically, `args` has been treated as a pointer as it was closest to\nthe implementation (context of the BPF program). From the user point of\nview, this adds an unnecessary complexity (need to dereference) as the\nvalue of the raw pointer itself is never read.\n\nThis commit changes `args` to a standard structure type. This allows to\naccess the individual arguments with the dot operator (`args.arg`). For\nbackwards compatibility, dereferencing args is still possible, it simply\nhas no effect.\n\nTogether with the previous commit, this allows to print all arguments of\nkfuncs using `print(args)`.\n\nThe commit also takes several existing tests using `args->` and\nduplicates them using `args.`. I was considering to transform all\n`args->` tests to use `args.` but that would break Git history and\ndecouple the tests from the original changes that introduced them.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "731f1d3dc5db3f227365c80edfc1bf185d3a7d19", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Refactor storage of probe args\n\nInstead of using private maps in multiple classes (BPFtrace::ap_args_,\nSemanticAnalyser::ap_args_, FieldAnalyser::ap_args_), store probe args\ninside struct manager under a special type \"struct <probename>_args\".\n\nThis simplifies the code and also allows to treat struct args just like\nany other record type. Thanks to this, it is now possible to print all\nargs of kfuncs. At this point, printing works for kfunc args only b/c\nkfuncs store all args in memory pointed by ctx and the entire args\nstruct can be proberead at once. On the other hand, uprobes store args\nin registers and therefore we'll need to access them individually. Also\nnote that printing now requires a dereference (`print(*args)`) which\nwill be changed in the follow-up commit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f6c13b25b9d8b778e7f120769d586517e49ac6d4", "commit_date": "2023-06-01T05:19:51Z", "commit_message": "Fix resolving username for malformed /etc/passwd\n\nWhen /etc/passwd has malformed or unexpected content (e.g. contains an\nempty line), resolving the username builtin causes segfault due to\nout-of-bounds access to a std::vector. This fixes the issue.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c0198aa4f1a7629e7ba02b5472394ddeffeeb80", "commit_date": "2023-05-26T23:31:36Z", "commit_message": "Fixing runtime test filter option: --filter\n\nThis patch handles following observed issues:\n\n1. Inconsistency with test names, some have double qoutes,\n   whereas others don't. Extra pre-processing is required in\n   runtime bash script for such inconsistent names, before they\n   are supplied as args to python script.\n\n2. Test name nomenclature for \"--filter\" option is missing.\n   Need to manually figure out from code.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a7decf0b89041048081bb8539918d3b5f2c97b09", "commit_date": "2023-05-25T15:41:08Z", "commit_message": "Add documentation for nix build", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8eea8e1351edf2ffc00596bbee0a8a74a9925baf", "commit_date": "2023-05-25T15:41:08Z", "commit_message": "Export matrix of bpftrace builds with different LLVMs", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "da631b213ffb884eb50b451a407ceb7235e59c33", "commit_date": "2023-05-25T15:41:08Z", "commit_message": "Use pinned libbpf/bcc versions", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "181fc37f21cc4dc22e27ce4c88d2482865223302", "commit_date": "2023-05-25T15:41:08Z", "commit_message": "Set up nix flake for builds\n\nThis flake can build bpftrace with all features enabled as well as\nrun all the tests from outside the build environment.\n\nThe runtests.sh script is a bit hacky but I'm not sure we can do better.\nWe have to run the runtime tests at least from a non-nix environment b/c\nthe runtime tests make too many assumptions about the availability of\nvarious binaries.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7d2e0abfd9707f0a7a839aae5c624faed84973df", "commit_date": "2023-05-25T11:36:59Z", "commit_message": "Fix kprobe_offset_module test with correct offset for ppc64\n\nThe instruction size in ppc64 is 4 bytes, but the entry-point\nto the local functions is located at an offset of 8 bytes.\nTherefore, a kprobe can be attached at offsets that are multiples\nof 4 bytes beyond the initial 8-byte offset.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "76e019d844886fa0f33b3c70d88e3ee959a4a3a7", "commit_date": "2023-05-25T07:57:49Z", "commit_message": "Fix runtime tests using the nft tool\n\nSeveral tests use the nft tool to fire probes in a kernel module\n(nf_tables). All the tests have two issues which are fixed by this\ncommit:\n- The command that invokes the traced function is called using the `-c`\n  parameter which does not wait for the probes to attach. The correct\n  way to run the command is via the `AFTER` directive.\n- The created nftables table is deleted in the `AFTER` directive which\n  is not correct. It should be deleted using the `CLEANUP` directive.\n\nThe above issues caused a race condition in the tests (the command is\nexecuted before the probes are attached) which should be now fixed.\n\nIn addition, the probe.kprobe_offset_module_error test now never\nexecutes the command, so no cleanup is necessary (as it would fail).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "923ceccebdad84a231c49c81b290fa1f1adb7e59", "commit_date": "2023-05-25T07:57:49Z", "commit_message": "tests: improve docs for the AFTER directive\n\nThe important property of the directive is that it executes the command\nonly after the probes are attached. Document this property .", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f6f041e777b304d77e53121f32c569de2c3ca599", "commit_date": "2023-05-24T16:12:16Z", "commit_message": "tests: teach runtime runner about multiple before clauses\n\nAs noted in iovisor/bpftrace#2402, usdt flakiness was made better by\n508538a but not fully fixed.\n\nThis commit is what I should have done all along: it allows the test\nrunner to parse and wait for multiple BEFORE clauses and thus ensures\nthe processes have started before the test runs.\n\nThere are two minor changes:\n\n  1. The check for child processes is now `ps --ppid` based to\n     eventually allow parallel process runs in the same environment.\n     That requires to use `ps` from the `procps` package on Alpine as\n     the default BusyBox one doesn't have the `--ppid` option.\n  2. Because of the `ps` usage, the name check is now truncated to 15\n     chars, which will fail if TASK_COMM_LEN is not 16. That looks like\n     a constant in the kernel, so I think we're good.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb1e082a4f9f2b756f813156b58ee2a5af12747e", "commit_date": "2023-05-24T06:53:15Z", "commit_message": "Rawtracepoint probe add a judgment on -EINVAL and provide a reasonable error message\n\nSigned-off-by: Feng Zhou <zhoufeng.zf@bytedance.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0a734286841d728c372c52d294d2265793213530", "commit_date": "2023-05-24T06:53:15Z", "commit_message": "Add testcase for rawtracepoint's wildcard and list show\n\nSigned-off-by: Feng Zhou <zhoufeng.zf@bytedance.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6b3f75e7368c3389928c84f2ac8da2c139233528", "commit_date": "2023-05-24T06:53:15Z", "commit_message": "Rawtracepoint program type support -l and wildcards\n\nSigned-off-by: Feng Zhou <zhoufeng.zf@bytedance.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1bd37ec5ef7772b1a0155cccfaa31020ae42137e", "commit_date": "2023-05-22T21:29:46Z", "commit_message": "Fixing args-type in subprocess.Popen against f4bc83e\n\nAs per subprocess.Popen docs: If shell=True, it is\nrecommended to pass args as string rather than as\na sequence.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71c45f544f1295362243452291cd59874f811189", "commit_date": "2023-05-22T15:13:58Z", "commit_message": "Fix threadsnoop.bt for greater than glibc 2.34", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73dc630e1194f8ddc9aa238f8220c55d60ffdcbe", "commit_date": "2023-05-22T15:05:04Z", "commit_message": "resources: generate std::string_view instead of c strings and lengths", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "26d61f56ebfb5db7ac9d116c5108fd6f1ebaecf3", "commit_date": "2023-05-22T11:58:00Z", "commit_message": "testdata: Rewrite test header generation code\n\nBefore, the old generation could would write temporary data in the\nsource directory. Technically this works, but it was causing issues with\nvmtest, as vmtest was only mounting the build directory read/write. This\nrewrite makes it so all temporary file generation occurs in the build\ndirectory.\n\nFurthermore, this rewrite correctly declares all the input/output\ndependencies so the test headers are only regenerated when absolutely\nnecessary.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad23fc38e92ac6272b2ba23e0efc979c03de3fd3", "commit_date": "2023-05-22T11:50:44Z", "commit_message": "update changelog for ringbuf\n\nSigned-off-by: xh4n3 <xyn1016@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fff6d887d94c12125635bbb634f87797b856ca27", "commit_date": "2023-05-22T11:50:44Z", "commit_message": "update codegen tests for ringbuf\n\nSigned-off-by: xh4n3 <xyn1016@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "67d4bd7c79839ca9563a6be155f0413da519f482", "commit_date": "2023-05-22T11:50:44Z", "commit_message": "support ringbuf\n\nSigned-off-by: xh4n3 <xyn1016@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4bc83e6f0e1deca45dfb7e0d067ab0b500c0f45", "commit_date": "2023-05-22T07:52:06Z", "commit_message": "Adding new directive CLEANUP to test-suite\n\nCLEANUP\tdirective aims to hold the clean-up command to\nclear the resources allocated during test run.\n\nThe command specified in CLEANUP directive will run\nafter the termination of commands from other directives\ni.e. BEFORE/RUN/AFTER.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2353019927351f0808befc5518c912e96c98f69", "commit_date": "2023-05-19T10:22:39Z", "commit_message": "Adding feature dependency in runtime tests\n\nTest cases that depend on 'features' are\nskipped rather than failed.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59140c8f4e280345ce1caea1bef1bed18143d7c5", "commit_date": "2023-05-19T10:21:31Z", "commit_message": "Add codegen test for kretfunc dereferencing\n\nkretfunc is btf-based tracing, when dereferencing, there is no need to call the bpf_probe_read helper function. This test is mainly used to verify kretfunc dereferencing.\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3cfbe643ce04fa97ca4e5094a5984e9cc95c7dec", "commit_date": "2023-05-19T10:21:31Z", "commit_message": "Add codegen test for iter dereferencing\n\niter is btf-based tracing, when dereferencing, there is no need to call the bpf_probe_read helper function. This test is mainly used to verify iter dereferencing.\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7efa0a272517a85ac2e294d0ae4be7de40000f3d", "commit_date": "2023-05-19T10:21:31Z", "commit_message": "Add codegen test for kfunc dereferencing\n\nkfunc is btf-based tracing, when dereferencing, there is no need to call the bpf_probe_read helper function. This test is mainly used to verify kfunc dereferencing.\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c2c3ab96a45b552380ca93171f8a9fbc3fe9aff4", "commit_date": "2023-05-19T10:21:31Z", "commit_message": "Support identifying btf type\n\nk(ret)func and iter are btf-based tracing, which can detect whether dereferencing is safe through btf, so dereferencing does not need to call the helper function bpf_probe_read. This patch mainly modifies the semantic and codegen modules\n\nsemantic:\n- Handle the ctx of iter, mark is_btftype as true\n- Handle the retval of kretfunc, mark is_btftype as true\n- When dealing with ArrayAccess, Unop, FieldAccess, inherit is_btftype attribute\n\ncodegen:\n- If it is a string type, use CREATE_MEMCPY directly to load the data\n- For other types, load data through CreateDatastructElemLoad instead of CreateProbeRead\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31d7a35816fa4993ae2f1208153ce38c632be567", "commit_date": "2023-05-17T14:14:40Z", "commit_message": "Replace FindLibZ with cmake builtin ZLIB\n\nBetter to use standard package location code over our own stuff when\npossible.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a60b171eb288250c3f1d6f065b05d8a87aff3cdd", "commit_date": "2023-05-17T14:14:40Z", "commit_message": "Link binaries against zlib\n\nCommit 1181c12f (\"Parse kernel configuration\") placed an indirect link\ndependency on zlib. This makes linking fail on system with tighter\ncontrols on linking such as nixos.\n\nFix by directly declaring the dependency and directly linking against\nzlib.\n\nThis closes #2598.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4629b3ccb139a95be497f24d55d2ffcbe995d2ca", "commit_date": "2023-09-22T07:34:52Z", "commit_message": "Correct some printf types in runtimes tests", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38b0396036b6ce53baf9c29b96b89320235e6135", "commit_date": "2023-09-22T07:34:52Z", "commit_message": "Add jiffies builtin with bpf_jiffies64", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6b70a3e068f92e7375b8a310223ec56e540b6aa5", "commit_date": "2023-09-19T10:58:10Z", "commit_message": "Add pid and host targeting for uprobes/uretprobes (#2757)\n\nThis allows users to specify a single wildcard in place of the\r\nlibrary_path to either target the whole host or a process's address\r\nspace if a PID is also provided.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "192c87a82174a9bd1f0661a963d381f88d69aef9", "commit_date": "2023-09-19T10:12:54Z", "commit_message": "v0.19.0 release", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12c463e8ff71bb1423243cbc3d23a7c4d59d5b8b", "commit_date": "2023-09-15T08:43:25Z", "commit_message": "ClangParser: improve detection of unknown typedefs\n\nWe are seeing failures of some simple scripts using manual includes:\n\n    # cat script.bt\n    #include <linux/skbuff.h>\n    BEGIN {}\n\n    # bpftrace script.bt\n    [...]\n    /lib/modules/[...]/ibt.h:71:10: error: use of undeclared identifier 'true'\n    [...]\n    /lib/modules/[...]/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n\nLet's improve our parsing of undefined typedefs from Clang diagnostic\nmessages to be able to pull those typedefs from BTF.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "63af82c539ceb5f2d8004b939b95b397f8fabea4", "commit_date": "2023-09-15T08:43:25Z", "commit_message": "CI: temporarily disable biosnoop.bt test\n\nGitHub Actions runners seem to have updated kernel and the old version\nof `biosnoop.bt` is no longer necessary. Unfortunately, it looks like\nthis is the case for some runners only, so we cannot universally use\nneither the old nor the new variant.\n\nLet's disable the test for now and revisit later when all runners are\nupdated.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d724b52e19a759750d6e82a71d8cadbf3e117461", "commit_date": "2023-09-11T05:01:47Z", "commit_message": "Improve runtime test filtering\n\n- Also check the TEST_FILTER env variable to users can filter when\n  running `sudo make runtime-tests`\n- Use a partial regex instead of exact match\n- Add documentation on how to use it", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "28b8a428d28582d8b9a96bafc07a8fd6bf0a6056", "commit_date": "2023-09-08T03:41:40Z", "commit_message": "Increase timeout for usdt runtime test (#2758)\n\nThis test could take longer due to iterating over all pids on the host.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ea13e0d3b29c6a61840314d0da9f2083e3a9f71e", "commit_date": "2023-09-06T06:50:43Z", "commit_message": "Cleanups following on from nsecs(monotonic) implementation", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3ba0b74e7ae4cb5039de7b01e9b8d4dedfa5956c", "commit_date": "2023-09-06T05:58:44Z", "commit_message": "USDT: Enable targeting all pids/paths on a host\n\nThis utilizes the single wildcard `*` for the binary_path/library_path\nvalue to target all running pids on the host.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e6e4318a2005992df121c6d25412c725e1cfb6d1", "commit_date": "2023-09-05T15:31:44Z", "commit_message": "appimage: Trim appimage size (#2749)\n\nThis commit trims the appimage size down to ~140M (down from ~300M)\r\nby excluding unnecessary files.\r\n\r\nThis brings the regression from the semi-static build down to ~3x\r\n(143/46.6).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9da81a4d61c60baa205a6465acabf15bf38c3824", "commit_date": "2023-09-05T10:27:05Z", "commit_message": "[docs] consolidate test documentation", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e32fdb3af87ea9afc571e8df626e9172ef322c3c", "commit_date": "2023-09-04T13:49:28Z", "commit_message": "Support embedded nix builds (#2736)\n\nThis adds support for building bpftrace as an appimage. See the\r\ndocumentation update in nix.md in the commit for usage.\r\n\r\nThis is intended to replace the current semi-static embedded build.\r\nThis approach has both pros and cons over the semi-static embedded build.\r\nFor one, the appimage is actually fully static (as it bundles the\r\nnecesssary libc). So it's more likely to work on more systems.\r\n\r\nThe downside is that the appimage is a ~10x larger binary than the\r\nsemi-static binary. The appimage also requires fuse to work (which most\r\nsystems should support). It's takes ~1s longer to start up which I don't\r\nthink is a huge deal.\r\n\r\nThis closes #2721.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f7ae0c3268417a26baf656086b169396b35de814", "commit_date": "2023-09-04T13:47:26Z", "commit_message": "ci: Cancel previous workflow runs if a new one is started\n\nShould help reduce the amount of redundant jobs in flight. This will\nmake the latest runs complete faster b/c they will not be queued behind\nstale/irrelevant runs.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "529ef55e7fa64f23eb734f984a6d4867eabd071b", "commit_date": "2023-09-04T13:46:58Z", "commit_message": "codeql: Use nix for codeql analysis\n\nThis gives us tightly pinned dependencies. If we change flake.nix:\ncodeql, ci, end developer builds, and appimages are all updated in sync.\nThis is a really nice property.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "420b053730846960f8c6afca3a934a602448251b", "commit_date": "2023-09-01T13:59:27Z", "commit_message": "scripts: create-assets.sh: Copy instead of hard link\n\nBefore, I was getting:\n\n```\n$ ./scripts/create-assets.sh\nUsing '/tmp/tmp.q9BHGxFIRP' as assert dir\nCreating tools archive\nCreating man archive\nCreating bundle\nln: failed to create hard link '/tmp/tmp.q9BHGxFIRP/tmp/bin/bpftrace' => 'bpftrace': Invalid cross-device link\n```\n\nProbably b/c my bpftrace repo is on my root fs and /tmp is on a tmpfs\nmount.\n\nFix by using copy.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d186daddbcdb9135f0730da17ecdba30ddd40225", "commit_date": "2023-09-01T05:35:05Z", "commit_message": "Runtime tests runner: remove debugging messages\n\nWhen adding support for multiple BEFORE clauses via commit f6f041e7\n(\"tests: teach runtime runner about multiple before clauses\"), we left\nsome debugging prints. Remove them as they pollute the tests output.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eb95b6b86c4b65b2d8e6836dc22f4ae6fcf8e32e", "commit_date": "2023-09-01T05:35:05Z", "commit_message": "After on call.skboutput was incorrect", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5262edc07ab80f77db10b288391bbf7339db833f", "commit_date": "2023-09-01T05:35:05Z", "commit_message": "Print output of BEFORE/AFTER on tests fail\n\nIf bpftrace is waiting for the BEFORE/AFTER clause to do something and\nit doesn't do it, it's good to know why.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb6cdc5946c27ef080dafb8204c4b6a70e1169b0", "commit_date": "2023-09-01T05:34:20Z", "commit_message": "Adding -vv help description\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f2d6896789c9d67a094ca1262c66451a40b0a46", "commit_date": "2023-08-31T10:29:15Z", "commit_message": "[man] update variants for USDT\n\nThis is to match the reference_guide.md", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "908ae0d73fc259731a3b9a7617d47e46d7c70ca0", "commit_date": "2023-08-31T10:28:20Z", "commit_message": "Correcting parameters to match expected string of runtime test\n\nPlease refer the github discussion for details.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3d29740108c64ddd573737e5747ab1a59140c0f2", "commit_date": "2023-08-31T05:58:40Z", "commit_message": "iter: Skip structures with '__safe_trusted' suffix\n\nIf kernel >= 6.2, there is a warning with 'bpftrace -l' command:\n\n    $ sudo bpftrace -l | grep iter:\n    WARNING: The kernel contains bpf_iter__task__safe_trusted struct but does\n    not support loading an iterator program against it. Please report this bug.\n    iter:bpf_link\n    iter:bpf_map\n    iter:bpf_map_elem\n    iter:bpf_prog\n    iter:bpf_sk_storage_map\n    iter:cgroup\n    iter:ipv6_route\n    iter:ksym\n    iter:netlink\n    iter:sockmap\n    iter:task\n    iter:task_file\n    iter:task_vma\n    iter:tcp\n    iter:udp\n    iter:unix\n\nkernel commit 6fcd486b3a0a(\"bpf: Refactor RCU enforcement in the verifier.\")\nadd 'struct bpf_iter__task__safe_trusted':\n\n    $ bpftool btf dump file /sys/kernel/btf/vmlinux format c | grep bpf_iter__task\n    struct bpf_iter__task {\n    struct bpf_iter__task_file {\n    struct bpf_iter__task_vma {\n    struct bpf_iter__task__safe_trusted {\n\nThis commit skips structs with '__safe_trusted' suffix.\n\nSigned-off-by: Rong Tao <rongtao@cestc.cn>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8bcf5bf4fe1dc9ee792944a7c37f5cd5badbf2dd", "commit_date": "2023-08-29T11:04:53Z", "commit_message": "test: dev_queue_xmit() made static inline\n\ndev_queue_xmit() is a wrapper for __dev_queue_xmit().\nmodifying kfunc trace to __dev_queue_xmit().\n\nCommit reference in Linux: c526fd8\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "70c25e806b732a7201a09b440ef306bdaa0f0e1e", "commit_date": "2023-08-28T17:15:35Z", "commit_message": "test: updating dependency for builtin & call tests\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f676cc812e77f2332b7edfda5beb1e79b459cc14", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Update CHANGELOG (int <-> int array casting)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "582f05c28e271b06bcfda4521235ef3b770e4f53", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Document casting ints to int arrays\n\nAdd examples of casts to both the Reference guide and manpage.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "627a72595fbf4e114686d213a7d49421d9da4f73", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Support casting integer arrays to integers\n\nIt is only possible to cast the entire array to an integer of the same\nsize. The main purpose is to allow conversion of byte arrays such as\nthose returned by the 'pton' builtin:\n\n    kfunc:tcp_connect\n    {\n        if (args->sk->__sk_common.skc_daddr == (uint32)pton(\"127.0.0.1\"))\n            ...\n    }\n\nSince arrays are internally stored as pointers, the codegen for this\njust reinterprets the pointer to the expected integer size and loads the\ndata as an integer (by a direct load or by an additional proberead).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "77abbc3cc96ab2124007d11328317dcfd8a141d2", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Casting to arrays: auto-determine number of elems\n\nSupport omitting the array size when casting to arrays as it can be\ncomputed automatically in semantic analyser.\n\nE.g. for `(int8[])42`, the array will have 8 elements (since ints are by\ndefault 64-bit).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "450e61b079eb50c977bb03ddfd307f3fa899ec7c", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Support casting integers to integer arrays\n\nThe syntax is the same as for other casts:\n\n    $array = (int8[8])42;\n\nFor now, it is only possible to cast integers to integer arrays. Both\nthe cast value and the target array must have the same size.\n\nThe integer being cast is copied to the BPF stack and the pointer to it\nis then reinterpreted as the target array pointer.\n\nThis, in combination with recently added array comparison, allows to\ncompare values which are stored under different types in kernel.\nE.g., IP addresses are represented with 32-bit int in \"struct sock\" [1]\nbut with byte array in TCP tracepoints [2]. This feature allows to\ncompare them:\n\n    kfunc:tcp_connect\n    {\n        @ = args->sk->__sk_common.skc_daddr;\n    }\n    tracepoint:tcp:tcp_rcv_space_adjust\n    {\n        // map values are always 64-bit so first cast to uint32\n        // and then to the target array\n        if ((uint8[4])(uint32)@ == args->daddr)\n        {\n            ...\n        }\n    }\n\n[1] https://elixir.bootlin.com/linux/v6.4/source/include/net/sock.h#L167\n[2] https://elixir.bootlin.com/linux/v6.4/source/include/trace/events/tcp.h#L64", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "53f51694da554a0ff0636eec0e1d63b232895534", "commit_date": "2023-08-25T13:02:37Z", "commit_message": "Parser: refactor simple types\n\nSplit simple types into integer types and builtin types. This is useful\nas it will allow special treatment of integer types and their usage in\nconstructions where builtin types don't make sense (e.g. arrays).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ec1eb1b9ff72e502d781055ec2e3f38eb6e40191", "commit_date": "2023-08-24T21:16:25Z", "commit_message": "Add FUNDING.yml\n\nAs discussed during office hours, it would be useful if we have a way\nfor sponsors to donate money. We may need to pay down some infra costs\nin the near term.\n\nI looked at a few options and it looked like OpenCollective was the most\nstraightforward. They can do fiscal hosting which means they'll deal\nwith all the tax stuff. But in exchange they take 10%. Not too bad (but\nalso not 0%).\n\nThis is the collective: https://opencollective.com/bpftrace", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba258818d57d6c948e4cebe4022c1058904e44a3", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "docs: Update developers.md", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "77de3c69d762a6cebac7c1ddacb16349df25e765", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "scripts: Update update_codegen_tests.sh\n\nUpdate to use nix infra so it matches the CI.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "16f982d3cd886dad6c7080103f2fa695946b7c6e", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: Unbuffer test output\n\nRunning headless in CI seems to cause buffering. While not a big deal\ngenerally speaking, it's kinda annoying when you're debugging CI and\nstaring at the output.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "430dd5b64c7e5a0ea4ce9b9c616fa30590da1813", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "ci: Migrate ci.yml to new nix infra\n\nThis should make it considerably easier to run the CI locally.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f56caa0b655d4ae12965ece8da04987a24708162", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "ci: Add ci.py\n\nThis script will serve as the new entrypoint for the ci.yml workflow.\nIt's intended to replace the current docker setup in favor of a more\ncacheable and more easily reproducible system via the new nix flake\ninfra.\n\nNote that this script is designed to be run locally on basically any\nlinux system _as well_ as in CI.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c72215aa4ebb189ae5e1abefae4bef909dafc98", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: Use /usr/bin/env to find interpreter\n\nThis makes the tests use nix-provided binaries. It's also just more\ncorrect to specify interpreters this way.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f2af079aa992458d04de3038827a89164269fa8", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "nix: Add runtime test dependencies to devshells\n\nThe runtime tests require a few extra packages to be installed. A bunch\nof test cases will `cat`, `tail`, `awk`, etc. at runtime, so the tools\nneed to be present.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "56bac0ddc20003478938ea9dd59d6891a039a314", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "runtime: runner: Propagate PATH\n\nNix does a lot of funny things to PATH, so it's important to propagate\nthat into the test run.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5c7d98e1f739da9a387db53234f9e056c032eabf", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: child: Fix childproc.multi_exec_match\n\nRewrite test to:\n\n* Not throw exceptions on failure (gtest does not like them)\n* Simplify symlinking (no chdir manipulation)\n* And work in nix env (where the PATH was overflowing the 2048 byte\n  buffer)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "33a6ee4d31b7d27f80b59341c26a3fdbee652e68", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: runtime: Delete software_order test\n\nThat test was historically flaky. And it's acting up again. So delete\nit. Make the remaining software probe test use a more reliable event.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c5432c24d227a8e9aaf01fe84e67f1e789326de", "commit_date": "2023-08-23T18:15:40Z", "commit_message": "tests: runtime: Fixup string trunc tests for nix env\n\nDuring this test we can race with other execve's. Some of those paths\nmay be rooted at /nix. We don't actually care about if it's /nix or\n/bin, just that the strings are truncated.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "94bcb5931d3de72a3fba251b33f51bb85a1b5045", "commit_date": "2023-08-23T07:20:57Z", "commit_message": "add notes on invocation mode", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3217b9456a1d52b67ab66260405582bb10d8cba6", "commit_date": "2023-08-22T13:12:06Z", "commit_message": "Reference Guide: Remove duplicate sections", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0fc58ac1ed1f173d796f395f24451cd01c572d4", "commit_date": "2023-08-22T13:12:06Z", "commit_message": "Add access to CLOCK_MONOTONIC with nsecs(monotonic)\n\nThis lets users explicitly request CLOCK_MONOTONIC when it is desired to\nget a timestamp exclusive of suspend time.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb389ca34451673619fd1abd66d22e4cf4c41990", "commit_date": "2023-08-22T13:12:06Z", "commit_message": "Tests: Add expected_error option to semantic_analyser::test()\n\nAlso remove some optional parameters to make it easier to understand\nwhich test() overload is being used.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46dd1ab76701a6bd3f7b1410335f4e6f229f131a", "commit_date": "2023-08-21T16:13:21Z", "commit_message": "test: codegen: Make kfunc targets determinstic\n\nBefore, codegen tests tried to look at the host's actual tracefs for\navailable_filter_functions. This would silently fail in most developer\nenvs as we don't usually run codegen tests as root. However, in CI, they\nactually ran as root so reads succeeded. This caused difficult-to-debug\nskew.\n\nFix by mocking out the filesystem access so tests are consistent no\nmatter where they are run.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6626dfa9d73540a013611cd1063a518d749a4a59", "commit_date": "2023-08-18T17:23:53Z", "commit_message": "test: codegen: Test both rolled and unrolled codegen\n\nThe previous logic was a little buggy. It looks like the intention was\nto check if the host supports loops and only test the codegen path that\nthe host supports. It's unclear if that logic actually worked, as it\nkinda layered on MockBPFfeature.\n\nIn any case, it's better to test both codegen codepaths where possible.\n\nAlso move both test cases into the same file so they can share the\nprogram definition.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "65427d22b388e0d4fb79f77c2fa6eef4d3f58a32", "commit_date": "2023-08-18T17:23:53Z", "commit_message": "test: codegen: Move MockBPFfeature init out to callers\n\nThis moves MockBPFfeature init out of the low level test() entrypoint\nout to the callers. Since there are relatively few users of the low\nlevel entrypoint, keep the core code simple by moving the init out.\n\nI'd prefer if we avoid the explosion of overloads we have in semantic\nanalyser tests.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0137b3ed2e86e4a345f6ebe9a0ce2d83510e6059", "commit_date": "2023-08-18T17:23:53Z", "commit_message": "test: codegen: Simplify common case test() calls\n\nThe simplified test() interface already sets up the MockBPFtrace.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "08a47afae50530656cfc15888a19d212f646daf8", "commit_date": "2023-08-16T16:46:24Z", "commit_message": "Fixing absolute address test issue across platforms\n\nmapping(using mmap()) to the address 0x10000000 works fine on few arch,\ni.e x86_64. However, on ppc64, this mmap fails, leading to an untriggered\nwatchpoint on 0x10000000. This patch dynamically replaces the allocated\naddress from mmap, causing the watchpoint to be triggered on write at the\ncorrect mapped address.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dabdaa2baad054d1ce66fb5b20ddc808bdf9fa19", "commit_date": "2023-08-16T16:44:32Z", "commit_message": "test: Make tests that create tmpdirs clean up\n\nSome tests weren't cleaning up after themselves. Better to at least\nattempt to cleanup.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b27b07e6c7f6729393d2fa39280aef421a0f79d5", "commit_date": "2023-08-16T16:44:17Z", "commit_message": "Update changelog", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f659c1c91416304a63dd4d3b5b0e4978806ded68", "commit_date": "2023-08-16T16:35:02Z", "commit_message": "tests: Add test childproc.multi_exec_match\n\n    $ sudo ./tests/bpftrace_test --gtest_filter=childproc.multi_exec_match\n    Note: Google Test filter = childproc.multi_exec_match\n    [==========] Running 1 test from 1 test suite.\n    [----------] Global test environment set-up.\n    [----------] 1 test from childproc\n    [ RUN      ] childproc.multi_exec_match\n    [       OK ] childproc.multi_exec_match (10 ms)\n    [----------] 1 test from childproc (10 ms total)\n\n    [----------] Global test environment tear-down\n    [==========] 1 test from 1 test suite ran. (10 ms total)\n    [  PASSED  ] 1 test.\n\nSigned-off-by: Rong Tao <rongtao@cestc.cn>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "46e829db895afa4f545d616b507c540c8fcda124", "commit_date": "2023-08-16T16:35:02Z", "commit_message": "child.cpp: validate_cmd: Support symbolic links in environment variables\n\nOn some systems /bin is a symbolic link to /usr/bin (/bin -> /usr/bin), When\nusing the '-c' parameter to specify the executable program in the environment\nvariable, the problem of \"multiple binary files matching\" occurs, for example:\n\n  $ sudo bpftrace -e 'kprobe:do_nanosleep { printf(\"%d sleeping\\n\", pid); }' -c 'sleep 5'\n  ERROR: Failed to fork child: path 'sleep' must refer to a unique binary but matched 2 binaries\n\nDebugging the bpftrace program through gdb can also be verified:\n\n  (gdb) p valid_executable_paths\n  $9 = std::vector of length 2, capacity 2 = {\"/bin/ls\", \"/usr/bin/ls\"}\n\nAnother situation is:\n\n  $ realpath /usr/bin/ping /bin/ping /usr/sbin/ping /sbin/ping\n  /usr/bin/ping\n  /usr/bin/ping\n  /usr/bin/ping\n  /usr/bin/ping\n\n  $ sudo bpftrace -e 'kprobe:do_nanosleep { printf(\"%d sleeping\\n\", pid); }' -c 'ping -c 4 0'\n  ERROR: Failed to fork child: path 'ping' must refer to a unique binary but matched 4 binaries\n\nThis commit fixes this problem. See also v1[0], v2[1].\n\n[0] https://github.com/iovisor/bpftrace/pull/2682\n[1] https://github.com/iovisor/bpftrace/pull/2689\n\nSigned-off-by: Rong Tao <rongtao@cestc.cn>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d4ee0b6f47262d7e5b393ffdf0d6f471fd4c604", "commit_date": "2023-08-13T19:49:25Z", "commit_message": "tests: semantic: Fix semantic_analyser_btf.kfunc\n\nBefore, I was getting:\n\n```\n[ RUN      ] semantic_analyser_btf.kfunc\n/home/dxu/dev/bpftrace/tests/semantic_analyser.cpp:82: Failure\nExpected equality of these values:\n  expected_result\n    Which is: 0\n  semantics.analyse()\n    Which is: 1\n\nInput:\nkfunc:func_1 { @[func] = 1; }\n\nOutput:\nstdin:1:16-22: ERROR: BPF_FUNC_get_func_ip not available for your kernel version\nkfunc:func_1 { @[func] = 1; }\n```\n\ndue to the helper test not being mocked out.\n\nFix by mocking the helper out as being available.\n\nFixes: bf7d0fe2 (\"tests: semantic: Fix semantic_analyser_btf.kfunc\")", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "32c7cae4389fbcc60945fb160344b68471b3ac3b", "commit_date": "2023-08-09T16:22:01Z", "commit_message": "probe builtin with aliased soft-/hardware probes\n\nUsing probe builtin in software/hardware probes specified by alias name\nis not possible b/c ProbeMatcher cannot find the match:\n\n    # bpftrace -e 'software:cpu:1 { print(probe); exit() }'\n    No probes to attach\n\nFix this by adding the aliased name (if exists) to the search list.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eb6611df065c261caac52a2e258c66f447a5b5af", "commit_date": "2023-08-09T16:21:06Z", "commit_message": "Removing unsupported options of subprocess.run()\n\n\"capture_output\" and \"text\" options is supported beyond\npython-3.7, whereas some instances of current CI pipeline\nare using python-3.6 and facing failures. The \"stderr/sdtout\"\noption is supported across python versions.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e9bede1a8dc588d573af9d1d4bae2fb663c126a", "commit_date": "2023-08-09T09:06:27Z", "commit_message": "printf: Fix mismatch between format specifier and argument\n\nInteger arguments to printf-style functions are represented as 64-bit ints,\nboth in generated BPF code [1] and in bpftrace-side printing logic [2].\nTherefore, a common pattern such as `printf(\"%d\", pid)` is buggy -- it uses\nthe conversion specifier for ints to print an int64_t value.\n\nWhile in practice this works as expected on most platforms (the value is\ntruncated to 4 bytes), it's by accident -- it depends on the architecture,\ntoolchain, calling convention, etc. For example, the above breaks on arm\nwith gcc where the compiler emits the following code for PrintableInt:\n\n   0x000d6240 <+8>:     vldr    d7, [r12, #8]    # this->value_\n   [...]\n   0x000d6250 <+24>:    vstr    d7, [sp]\n   0x000d6254 <+28>:    mov     r2, r3           # fmt\n   0x000d6258 <+32>:    bl      0x1e000 <snprintf@plt>\n\n(Note that the first 3 arguments to snprintf are passed via r0-r2, but\nvalue_ is pushed onto the stack; snprintf expects the \"%d\" argument to\nbe in r3, so it ends up printing the value of fmt instead)\n\nThis patch adds an explicit cast to make sure that the argument provided\nto snprintf is consistent with the conversion specifier.\n\n[1] https://github.com/iovisor/bpftrace/blob/34cf5c2b53b82cddc9111055cd499d6e35763f3c/src/ast/passes/codegen_llvm.cpp#L3167\n[2] https://github.com/iovisor/bpftrace/blob/34cf5c2b53b82cddc9111055cd499d6e35763f3c/src/printf.h#L82", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "534bca42bd313e09ae593f41b3cbb46b64959869", "commit_date": "2023-08-07T06:01:40Z", "commit_message": "tools: Remove stale comments about ipv4 limitation\n\nCommit c9dd10f93ba2 (\"[ntop] add support for arrays and IPv6\") added\nipv6 support to the tools, remove the stale comments about only\nsupporting ipv4.\n\nSigned-off-by: Gal Pressman <gal@nvidia.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e010d27b4b5b3c873544a7d16bf864bcf918d665", "commit_date": "2023-08-03T14:30:23Z", "commit_message": "Fixing stack unwind regex for ppc\n\nStack unwinding in x86 skips the test2 function,\nwhereas unwinding on ppc lists function test2.\nThe current regex is not having test2 match-string,\nhence test failure on ppc.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5fcc340ae1a2cc531dc381fb07a1e2c378c4a20a", "commit_date": "2023-08-03T14:29:36Z", "commit_message": "uprobe: improve C++ probes listing\n\nWhen listing probes with the new \":cpp\" prefix, demangle function names.\n\nExample:\n\n    # bpftrace -l 'uprobe:/my/prog:*'\n    uprobe:/my/prog:_Z3funi\n    uprobe:/my/prog:_ZN3Bar3funEv\n    uprobe:/my/prog:_ZN3Foo3funEv\n\n    # bpftrace -l 'uprobe:/my/prog:cpp:*'\n    uprobe:/my/prog:cpp:\"fun(int)\"\n    uprobe:/my/prog:cpp:\"Bar::fun()\"\n    uprobe:/my/prog:cpp:\"Foo::fun()\"\n\nNote: we need to surround the demangled name with quotes as it may\ncontain some symbols which won't be accepted by the attach point parser\n(e.g.  \"::\" or \"()\"). With quotes, the listing entries can be directly\nused as attach points.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0ceaef3cd6333a3cd3239b4ae105099e8e9f4b67", "commit_date": "2023-08-03T14:24:09Z", "commit_message": "Support func builtin for k(ret)func probes\n\nSince [1], kernel has the 'bpf_get_func_ip' helper to get the value of\ninstruction pointer from BPF_PROG_TYPE_TRACING programs. This allows to\nenable the `func` builtin in k(ret)func probes.\n\nAlso adding feature detection for the helper into both `--info` and\nruntime tests.\n\n[1] https://github.com/torvalds/linux/commit/9b99edcae5c80c8fb9f8e7149bae528c9e610a72", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0b3392baa881f501ce684637acbd4136f8a29ed3", "commit_date": "2023-07-26T09:05:12Z", "commit_message": "tests: Only set up dwarf data file once\n\nWe only need to do it once globally since the contents don't change.\n\nAlso delete the datafile after the tests are over and chmod to give\neveryone executable permissions (semantic analysis needs this).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7c2d8005cef826a6457189f1454a632378413337", "commit_date": "2023-07-25T13:31:45Z", "commit_message": "Update CHANGELOG (probe listing and probe builtin)\n\nThe PR allowed listing of software, hardware, interval, and profile\nprobe types. Also fixed using the 'probe' builtin from hardware and\nsoftware probes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4b19d19d5abf9fbdf4c36cc1a3610ba14d3c4bf8", "commit_date": "2023-07-25T13:31:45Z", "commit_message": "Allow listing profile and interval probes\n\nIt is now possible to use wildcards for profile/interval probe listing\nto get the list of all available frequency units:\n\n    # bpftrace -l 'interval:*'\n    interval:hz:\n    interval:ms:\n    interval:s:\n    interval:us:", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "817179075c67d9d55a10661ec44047eab1e4e52a", "commit_date": "2023-07-25T13:31:45Z", "commit_message": "Support 'probe' builtin in hardware/software probe\n\nWhen using the 'probe' builtin, probe is expanded even if the given\nprobe type doesn't support wildcards. This poses problems for hardware\nand software probes as the generated probe name is not correct.\n\nThis commit fixes the problem by using the correct probe name.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "87a112e284a4d8a3c31bfdfa3bb882755c4e8a8a", "commit_date": "2023-07-25T13:31:45Z", "commit_message": "Fix listing software/hardware probes\n\nIn probe matcher, hardware and software probes are handled with the same\ncode as e.g. tracepoints of kfuncs. This is not correct since hardware\nand software probes never define the 'func' field, only the 'target'\nfield. This causes problems with probe listing:\n\n    # bpftrace -lv 'software:*'\n    software:*:\n\nMove handling of these probes to a separate case using only 'target'.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "738a7bd179bf56e11d5c61441cc77e6ecc569685", "commit_date": "2023-07-25T12:44:29Z", "commit_message": "Attachpoint parser: improve stoull error messages\n\nThere's a number of probe types that expect a number as one of their\narguments. We use our own parser to convert a string to an integer,\nhowever, when it fails, the error message is not very nice:\n\n    # bpftrace -e 'interval:5:s{ @[comm] = count();}'\n    stdin:1:1-13: ERROR: stoull\n    interval:5:s{ @[comm] = count();}\n\nProvide better messages for all places where stoull/stoll may fail in\nAttachPointParser:\n\n    # bpftrace -e 'interval:5:s{ @[comm] = count();}'\n    stdin:1:1-13: ERROR: stoull\n    invalid rate of interval probe\n    interval:5:s{ @[comm] = count();}", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "91db77c5707c30346035330ea4fb719821254161", "commit_date": "2023-07-24T16:35:02Z", "commit_message": "Decouple kheaders unpacking from BTF support\n\nThis is a partial revert of 17bbcd2b0 (\"kheader: Do not unpack kheaders if\nsystem has BTF\"). Checking if the kernel supports BTF is not sufficient, as\nClangParser may decide to not use the BTF-generated header in case there are\nconflicts with user-defined types[1].\n\nFor example, the following script falls back on kernel headers, which on a\nsystem that relies on CONFIG_IKHEADERS (e.g. Android) produces this error:\n\n  $ sudo bpftrace -\n  struct task_struct {}   // redefinition\n  struct foo { struct task_struct dummy; }\n  BEGIN {}\n  ^D\n  /bpftrace/include/clang_workarounds.h:14:10: fatal error: 'linux/types.h' file not found\n\nThis also unbreaks scripts written for older kernels without BTF support\nthat unconditionally include kernel headers.\n\n[1] https://github.com/iovisor/bpftrace/blob/3c417c8e3792c58a5958e3b1c49958ac063667a8/src/clang_parser.cpp#L765", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "952628379ac647bd22aae711f8aabb2ad2f0e700", "commit_date": "2023-07-24T07:21:28Z", "commit_message": "Fixing runtime tests for ppc\n\nIn ppc, \"nip\" is used for instruction pointer.\nOther fix is general dependency issue.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dd0e6c5a3659420975d539e327cf66ceb58c0f3d", "commit_date": "2023-07-24T05:59:37Z", "commit_message": "Allow '+' in attach point path", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6ae54410db34bb91c572e96e59a246ce7701ef70", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "tests: tools: Find tools directory relative to script\n\nPrevious code assumed cwd was inside build/tests.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff6837590ac78c0ede543edfedaf5f1e7b77a8bc", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "runtime: engine: Do not line buffer subprocesses\n\nLine buffering stdout/stderr does not make much sense as we are only\nreading. IIUC line buffering is really only useful when writing to a\nfile.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "66491792ec9917a170fd47693dfc0758bcfd7732", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "runtime: engine: Use start_new_session instead of os.setsid\n\nThe former was introduced to replace the latter b/c the latter can\ndeadlock. Update for correctness.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "29eb48210989384bdb701e3a03130dab4e50373b", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "runtime: engine: More reliably collect test output\n\nPreviously, we were using `Popen.communicate()` to collect test case\noutput after probe attachment. This meant that if a test case did not\nexplicilty call exit(), then the timer would fire and we could\npotentially lose output b/c\n\n    output += p.communicate()[0]\n\nwould not fully execute and all the data buffered in p.communicate()'s\nimpl would be lost.\n\nA potential fix could be to use in-band timeouts with communicate()'s\ntimeout parameter. But some experimentation has shown that communicate()\nand readline() implementations may not share the same underlying buffer\n(as both impls buffer output from the OS) and could lose data depending\non how much the OS returns to python at a time.\n\nSo change all calls to communicate() to `_io.TextIOWrapper` methods.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "568fb7790ccddc8b09a531891307112a7c661467", "commit_date": "2023-07-24T05:49:15Z", "commit_message": "runtime: engine: Remove PATH manipulation\n\nRemove $PATH manipulation when shelling out. It was added in c7f1aa6d\n(\"Fix field analyser not requesting BTF info for identifiers\") but was\nlater made unnecessary in 27759be0 (\"tests: Add {{BPFTRACE}} runtime\nvariable\").", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2a9db896994294733a9198cde06feb077adca5cc", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "Update CHANGELOG (symbol demangling)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b0569acafbf2fab109abd68ef91a2151776a84cf", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "Update docs with info on symbol demangling\n\nFor now adds just basic information about demangling and the C++ uprobe\nprefix.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb8efcd16ef5e5385133d0bf5894eb68de98fcb8", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "uprobes: fix false matches for demangled symbols\n\nWhen matching demangled symbols from the binary, we always add a\ntrailing wildcard to the search input b/c the demangled name contains\nalso the argument list (e.g. \"fun(void)\"). This, however, produces false\nmatches as \"fun\" would also match e.g. \"function(void)\".\n\nThis commit takes a different approach. Rather than adding a trailing\nwildcard, remove the argument list from the demangled name that we're\nmatching against, unless the user explicitly specified the '(' character\nin the search input meaning that he wants to match against function\narguments, too.\n\nThis allows to remove addition of the trailing wildcard. At the same\ntime, we remove addition of leading wildcard as it has no effect.\n\nExpand unit tests to cover this situation.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9452ede945165134d716f81fb82b899df1207108", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "uprobes: disable demangling without :cpp prefix\n\nThe previous commit introduced a new part of uprobe specification - the\nlanguage prefix. For now, only C++ prefixes are supported.\n\nThis commits changes the behaviour of uprobes by only allowing symbol\ndemangling when the :cpp prefix is specified. This saves some\ncomputation time and gives users a better control over bpftrace\nbehaviour. In addition, symbol demangling sometimes produces confusing\nresults - demangling support automatically adds leading and trailing\nwildcards, which means that more functions than expected are sometimes\nmatched. Now, this behaviour does not happen for default uprobes.\n\nNote that this is a breaking change b/c it is now required to specify\nthe :cpp prefix to enable symbol demangling (it was always enabled\npreviously).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ca98ab16de7890b38d89fb12830be6854592d0a", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "uprobes: support language probe prefix (for C++)\n\nAdd a new part of probe definition which allows to specify the language\nin which the traced binary is written. This will allow to enable\nlanguage-specific features.\n\nFor now, allow C++ prefix \"cpp\".\nAt this point, specifying the prefix has no effect. In future, giving\none of the above will allow C++ symbol demangling.\n\nThere are now four parts of uprobe specification and some of them are\noptional, which may create tricky situations:\n- 'uprobe:bin:func' attaches to 'bin' and uses no language-specific\n  features,\n- 'uprobe:bin:func ... -p PID' attaches to 'bin' with given PID (if the\n  process runs 'bin') and uses no language-specific features,\n- 'uprobe:cpp:func ... -p PID' attaches to PID and uses C++ features,\n  this one is distinguished from the previous one by using one of the\n  supported language prefixes as the second part of the attachpoint,\n- 'uprobe:func ... -p PID' attaches to PID and uses no language-specific\n  features.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e4558a667eef91887c94389d7df51680b02446bc", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "Fix uprobe symbol resolution\n\nThe BPFtrace::resolve_uname function doesn't search for function symbols\nwhich causes BPFtrace::add_probe to always perform a ProbeMatcher\nsearch, even if the attach target exists in the binary. This is rather\ninefficient so better expand the symbol search to functions, too.\n\nNote that this is a potentially breaking change for binaries combining C\nand C++ symbols. The reason is that if the attachment target precisely\nmatches a symbol name in the binary, the ProbeMatcher search will now be\nskipped and we'll potentially not attach to some mangled C++ functions\nthat we attached to before. This situation should occur very rarely,\nthough.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c89439494f03668af2b2cf25774d97ac0633c416", "commit_date": "2023-07-20T15:51:41Z", "commit_message": "Refactor ProbeMatcher w.r.t. symbol demangling\n\nAdd a new parameter to ProbeMatcher::get_matches_in_stream that allows\nto control whether symbols should be demangled. For now, always set the\nparameter to true.\n\nThe purpose of this is to prepare for an improved handling of symbol\ndemangling where we will only turn it on in certain cases.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3c417c8e3792c58a5958e3b1c49958ac063667a8", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Update CHANGELOG (improved work with args)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2c9cc119eb00d927e095ca57a2990bb36b08ce3a", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Document the args builtin\n\nAdd entry to the reference guide and manpage about the `args` builtin.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e77f6896b1285a6b6eba044e16880c88faa2f44", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "uprobe: support accessing entire args\n\nAllows to pull all arguments of a uprobe from DWARF into a single\nstructure (record) using \"args\". The record can be used as any other\nrecord - printed, stored inside maps/variables, used as a map key, etc.\n\nThis enables constructions like:\n\n    print(args);\n    @[args] = count();\n    @[tid] = args;\n\nThe implementation builds on the fact that probe args are now stored\ninside struct manager under a special \"struct <probename>_args\" type.\nWhen accessing the \"args\" builtin in a uprobe, this builds a new record\n(having the above type) on stack and fills it with probe args (from\nregisters).\n\nOne effect of this is that all uprobe args are always read onto stack,\neven when a single arg is necessary (e.g. \"args.a\" is used). This is a\nbit inefficient but much better fits the current implementation. Since\nthere are at most 6 args, the slowdown should be small.\n\nAlso a difference from other records in bpftrace is that we don't use\nbyte arrays to represent the new record with an LLVM type. The reason is\nthat it is easier to use GEPs with indices to access individual args,\ninstead of using byte offsets inside the new record.\n\nAdds runtime tests for the above constructions.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cad1cfb0291cf783181ff4e17e681ef96b80f7a3", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Allow args as map key/value in k(ret)func\n\nSince args is now representing a record containing all function args, it\nmay be used as a map key/value since the it will be proberead and copied\ninto the map. For now, this only works for k(ret)func probes.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "92b2b999383b71d6a975169f805a04cd15e210cb", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Allow assigning args to a local var in kfunc\n\nThis was disabled by commit 722c5c73ebdc (\"Error if trying to assign\nargs to a variable in kfunc\") since it was not supported at the time.\nNow, FieldAnalyser supports this so it can be enabled.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5c002da40afd2d750d28e80a69b03347aeb2a65b", "commit_date": "2023-07-18T08:05:19Z", "commit_message": "Semantic analyser: fail on accessing empty args\n\nWhen trying to access the 'args' builtin for a probe in which the\narguments cannot be parsed (e.g. are not present in DWARF/BTF), throw an\nerror in semantic analyser (instead of segfaulting in codegen).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5ffa91ea739d679e684e1911fd3787ef3fb488b7", "commit_date": "2023-07-14T09:13:18Z", "commit_message": "Introduce builtin function nsecs(tai) which is nanoseconds of CLOCK_TAI  (#2619)\n\n* add nsecs([MODE]) function\r\n\r\nThe nsecs function is added, and its receiving parameter is a timestamp mode, such as boot, and tai, tai_sw and other support will be added in subsequent patches.\r\n\r\nnsecs() defaults to nanoseconds since system boot, synonymous with nsecs(boot).\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add timestamp mode member to Strftime\r\n\r\nAdd timestamp mode member to Strftime. Use mode to represent the timestamp type of the strftime function, which can be boot or tai (subsequent patches will implement tai)\r\n\r\n- add mode member to Strftime\r\n- remove test cases about nsecs in Parser.call_builtin\r\n- update call_strftime.ll\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* support tai timestamp\r\n\r\nKernel versions 6.1 and above provide the ktime_get_tai_ns helper function. We can get the timestamp through nsecs(tai). And use TimestampMode to solve the problem of wrong results when strftime formats tai timestamp\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* support sw_tai timestamp\r\n\r\nAt present, the kernel versions of most users stay at 4.19 and 5.10, and these kernel versions do not support ktime_get_tai_ns. Thus, we provide sw_tai, sw_tai obtains the approximate tai time through the \"triple vdso sandwich\" method area, and its accuracy is about tens of nanoseconds.\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* docs: fix wrong format of `offsetof` entry\r\n\r\nadd `offsetof` entry into table contents and fix wrong header format of `offsetof`\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add nsecs() guide\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add semantic analyser test for nsecs()\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add codegen test for nsecs()\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n* add runtime test for nsecs()\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3ddb60bc1d019da6cb91b2127b5272d7f1d6f234", "commit_date": "2023-07-13T21:29:30Z", "commit_message": "cmake: fix linking libbfd\n\nOn some distributions, libbfd is not available as a shared library (e.g.\nopenSUSE [1]). In such a case, libbfd.a must be used and the libraries\nthat it requires must be linked manually, even when bpftrace is linked\ndynamically, otherwise the compilation fails.\n\nThis fixes the above problem by:\n- adding a detection that static libbfd.a is used and in such a case\n  linking necessary libraries even for dynamic builds and\n- expanding the list of necessary libraries to all that may be required:\n  libopcodes, libz, libzstd, libiberty, libsframe.\n\n[1] https://bugzilla.suse.com/show_bug.cgi?id=1162312", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59bf5f0ba3ff0969f9c4c557a75304a069d6c6ad", "commit_date": "2023-07-13T08:50:06Z", "commit_message": "Update INSTALL.md", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "945e558eb7d2eae0fe541ad4603fd90125e78a46", "commit_date": "2023-07-12T16:59:40Z", "commit_message": "arm: Determine target arch at runtime\n\nAs of 9d9cb58c9 (\"Add helper methods to obtain pointer width of traced\ncode\") we're already checking if the kernel is 32-bit, and this can be\nextended to figuring out the list of available registers, the layout of\n`struct pt_regs` etc. dynamically rather than having separate armv7 and\naarch64 implementations selected at compile time.\n\nThis makes it possible to use the same 32-bit build of bpftrace on both\narm and arm64 kernels.\n\nFixes #2654", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "34cf5c2b53b82cddc9111055cd499d6e35763f3c", "commit_date": "2023-07-11T08:11:39Z", "commit_message": "arm: Fix gcc build when using -mthumb\n\nWhen compiling with `-mthumb`, we need to force the compiler to generate ARM\ncode for the two trigger functions for uprobes to work. This is achieved by\nusing the target attribute[1].\n\nWhile this works fine with clang, gcc complains about an invalid conversion\nwhen calling run_special_probe[2]; latest development version (14.0) suggests\nthis is a gcc bug:\n\n  <source>:8:9: internal compiler error: canonical types differ for identical\n      types 'void()' and 'void()'\n\nThis patch adds an explicit cast as a workaround.\n\nReported-by: @daniloegea [3]\n\n[1] https://gcc.gnu.org/onlinedocs/gcc/ARM-Function-Attributes.html#index-target-function-attribute-1\n[2] https://gcc.godbolt.org/z/44b5MjdbT\n[3] https://github.com/iovisor/bpftrace/pull/2360", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e199c7e73da84bff9fe744d1e3402c2b505aa5a2", "commit_date": "2023-07-06T09:08:40Z", "commit_message": "Reduce size of SizedType class\n\n- Store all sizes internally as bits, converting back to bytes as needed\n- Delete unused field num_elements_\n- Shrink StackType::limit\n- Shrink underlying types of enums\n- Reorder fields from largest to smallest (roughly)\n\nBefore:\n  sizeof(SizedType) = 136\n\nAfter:\n  sizeof(SizedType) = 96\n\nSizedType objects are created and copied a lot during compilation, so\nreducing the size should help with performance.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9e4a5b16bd16a105d8bd4cda91db6ed4267182be", "commit_date": "2023-06-26T09:22:50Z", "commit_message": "AttachPointParser: Error handling improvements\n\n- Ensure integer parsing errors end in new lines\n- Parse signed integers when requested (not always unsigned)\n- Early returns from sto[u]ll parsing errors to reduce nesting\n- Ensure non-fatal errors do not get displayed\n\nAttempting to parse a string with stoll can result in a non-fatal error\nwhen parsing uprobes, as they are allowed to accept either an address or\na function name. This stoll error should never be displayed to the user.\n\nPreviously, when the error buffer was not cleared between attachpoints,\nif the next attachpoint had a fatal error then this non-fatal stoll\nerror would also be displayed.\n\nDue to a combination of the now-fixed problems, the error message for\nthe new test case used to be:\n\n  ERROR: Coefficient part of scientific literal is not a valid number: Str: stoulltracepoint probe type requires 2 arguments\n\nNote the missing newline and the non-fatal first error.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b23cda02eb3ab4394b61300a5a014cf14b14b0fc", "commit_date": "2023-06-23T07:01:50Z", "commit_message": "Revert \"Fix one-liners args access\"\n\nThis reverts commit 39d026ecfb229376be6fd708ed937ef2e320a28d.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "39d026ecfb229376be6fd708ed937ef2e320a28d", "commit_date": "2023-06-22T20:53:33Z", "commit_message": "Fix one-liners args access", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "593f5c96cf80e0ee1f60bd8cdebe197388a6f751", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "Update changelog\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "539756d42f321ebae75878d3b0820c46aaf56a8e", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "Fix the problem of panic when running `bpftrace -l iter:`\n\nWhen ap.func is empty, the input parameter tokens of the wildcard_match function will be empty, and a panic will occur when tokens[0] is obtained. Therefore, iter should be similar to kfunc, and avoid ap.func being empty during the semantic analysis stage.\n\n```\nbpftrace -l kfunc:\nstdin:1:1-7: ERROR: kfunc should specify a function\nkfunc:\n~~~~~~\n\nbpftrace -l iter:\nstdin:1:1-6: ERROR: iter should specify a iterator's name\niter:\n~~~~~\n```\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c2dbcbbbe8329ac0d1145c418088a9b7d8a7893", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "support all iters\n\nSupport all iters, this patch mainly modifies the following places:\n\n- Delete the hard code, and get the type of iter by concatenating `bpf_iter__` and the function name\n- Use has_iter to check whether the iter exists\n- add iter tracing function for tests\n- clean up older iter related code\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1caba6b52f825bef338bbb3e7785906b22c05398", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "support to get all iter params\n\nFor each iter, the kernel will have a bpf_iter_$ITER function, so we can get the parameters of iter through bpf_iter_$ITER.\n\nRun `bpftrace -l iter:*` and shows:\n\n```\niter:task\n    struct task_struct * task\niter:task_file\n    struct task_struct * task\n    int fd\n    struct file * file\niter:task_vma\n    struct task_struct * task\n    struct vm_area_struct * vma\n```\n\nThe output after applying this patch is as follows:\n\n```\niter:bpf_map\n    struct bpf_map * map\niter:bpf_map_elem\n    struct bpf_map * map\n    void * key\n    void * value\niter:bpf_prog\n    struct bpf_prog * prog\niter:bpf_sk_storage_map\n    struct bpf_map * map\n    struct sock * sk\n    void * value\niter:ipv6_route\n    struct fib6_info * rt\niter:netlink\n    struct netlink_sock * sk\niter:sockmap\n    struct bpf_map * map\n    void * key\n    struct sock * sk\niter:task\n    struct task_struct * task\niter:task_file\n    struct task_struct * task\n    u32 fd\n    struct file * file\niter:tcp\n    struct sock_common * sk_common\n    uid_t uid\niter:udp\n    struct udp_sock * udp_sk\n    uid_t uid\n    int bucket\n```\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4b8cf6b2fef23a35103a3e7942cb267cbea1987f", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "fix 'bpftrace -l iter:*' printing wrong list\n\nRun bpftrace -l iter:* the output is as follows:\n\n\titer:task\n\titer:task_file\n\titer:task_vma\n\nBut the current kernel does not support 'iter:task_vma'. After applying this patch, run the command again, the output is as follows:\n\n\titer:bpf_map\n\titer:bpf_map_elem\n\titer:bpf_prog\n\titer:bpf_sk_storage_map\n\titer:ipv6_route\n\titer:netlink\n\titer:sockmap\n\titer:task\n\titer:task_file\n\titer:tcp\n\titer:udp\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7b45ce9d2d6a334f57d7f624ebfecf8a84ed1332", "commit_date": "2023-06-20T08:34:41Z", "commit_message": "get all iters from btf\n\nAccording to [1], we can get all iter types supported by the current kernel according to the 'bpf_ter__' prefix\n\n[1]: https://www.kernel.org/doc/html/latest/bpf/bpf_iterators.html#how-to-use-bpf-iterators\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5a592c6bc8c75863f3598ad41fc2c8881bb87938", "commit_date": "2023-06-16T16:39:16Z", "commit_message": "update the helper function list of the bpf.h file\n\nUpdate list of helper functions\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fdd60c453dd814dc72862c817bceaa171002092f", "commit_date": "2023-06-16T16:39:11Z", "commit_message": "Increase the distance of backslashes\n\nIncrease the distance of backslashes, because some helper function names are very long, and the distance of backslashes is no longer able to maintain line alignment, so increase the distance of backslashes\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "960fb8c1eadf671e5d4de4947b56801b241ae444", "commit_date": "2023-06-16T11:12:05Z", "commit_message": "fix kernel cflags for loongarch\n\nThe arch should return loongarch in loongarch64 machine, but it\nreturn loongarch64, because it is loongarch in kernel source tree.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "87ee52395117d865724bd4daec5e8a8152b186f8", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Update CHANGELOG.md\n\nBetter symbol resolution", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b067adf627e81adfdfcbccc3f2d3f66e81d0104a", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Add tests for usym cache preload\n\nNote: test for ASLR enabled is disabled because of race condition,\nsee https://github.com/iovisor/bcc/pull/4319.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e4e4dbc69d008831b28be5592f9e36c27683efb", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Allow user to set user symbol caching type\n\nChange BPFTRACE_CACHE_USER_SYMBOLS values from 0 and 1 to PER_PID,\nPER_PROGRAM, and NONE. The values 0 and 1 are still supported, meaning\nNONE and default (see below), for compatibility.\n\nThe new default is PER_PROGRAM when ASLR is disabled and PER_PID if\nASLR is enabled. NONE option can be used to save memory in case the\nnumber of traced processes is high.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e4ef2f1a82cd5193ccbf3ad9b3f24d7df13fd748", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Mention usym() limitations in manual", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5b20ba90930b92bbe5cba91ea3b4b2935c1781f", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Preload symcache for running processes\n\nWhile attaching a uprobe using symbol resultions, look for running\ninstances of the program targeted by the uprobe and create a BCC symcache\nfor each of them.\n\nThis enables bpftrace to resolve usyms for processes running at the time of\nattaching the probe even when ASLR is on and the process is gone at the time\nwhen the print event fires.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "390f048d9ea73b06f360030598b438636924cec3", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Add ELF-based userspace symbol resolution\n\nIn addition to resolving usyms from the running process, an alternative\nis implemented that reads the program binary via libelf. This is useful\nfor cases when the usym resolution happens after the process exists.\n\nThis approach does not work for dynamically loaded symbols or processes\nwith ASLR enabled, in these cases usym resolution falls back to using\nBCC symcache.\n\nImplementation notes:\n- To access the program binary, a \"probe id\" (distinct from the AST probe\nid) is generated in resource analyzer, and passed via usym/ustack events\ninto the userspace when the associated perf event fires. If the probe\ncontains only one attach point, and therefore one program, this allows\nthe binary to be identified even for exited processes.\n- ustack perf event was changed from pid/stack id packed integer to struct\nto fit the probe id.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5c09d9374d0df6a1a108cea50de7033808f56d9", "commit_date": "2023-06-13T18:33:05Z", "commit_message": "Add usym caching by PID\n\nExtend caching usym tables by program (used when ASLR is disabled) with\ncaching by PID, which is used when ASLR is enabled.\n\nWithout ASLR all instances of one program share the same memory layout,\nhence it can be stored once per-program.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "64048acb9c64c13acb927e37a2423e6d42985e8d", "commit_date": "2023-06-06T13:17:36Z", "commit_message": "Fix alignment of byte arrays inside tuples\n\nWhen using types internally represented by byte arrays inside tuples\n(e.g. usym, inet, etc.), LLVM aligns them to 1 byte inside the tuple. We\nmust do the same in our internal type system so that the size of our\ntype matches the size of the type generated by LLVM.\n\nThis also renames the `SizedType::GetAlignment` method to\n`SizedType::GetInTupleAlignment` as it's only used to get alignment of a\ntype when it is used inside a tuple and the old name was confusing.\n\nAdded runtime and codegen tests for a case where bpftrace previously\ncrashed.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d3ffdb965cd71a0a538c673003c3c65920a68fa0", "commit_date": "2023-06-06T05:32:00Z", "commit_message": "docs/tutorial_one_liners_chinese: Fix a chinese typo\n\nSigned-off-by: Rong Tao <rongtao@cestc.cn>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "be2a24acc365a99b799ee60d83ffc6b2d0fdd35a", "commit_date": "2023-06-05T06:29:37Z", "commit_message": "Update INSTALL.md\n\nAdded libffi-devel due to build-libs.sh message.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38bbc2c0886853246b54bbc3de9a3a2bd3cc3a19", "commit_date": "2023-06-05T06:29:37Z", "commit_message": "Update INSTALL.md\n\nUpdate list of dependencies to successfully build on Fedora 38", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59eabbe1f6b2e1f43fa20014e9e84f06a3d260d8", "commit_date": "2023-06-05T05:13:21Z", "commit_message": "Replace args->x by args.x in docs\n\nThe `args` builtin has been transformed from a pointer to a normal structure.\nUpdate the Chinese version of one-liner tutorial to synchronize with its\nEnglish version.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1230b41f4bd8b27b444ed555ecacd0f266b5784f", "commit_date": "2023-06-05T05:13:21Z", "commit_message": "Update tutorial_one_liners_chinese.md\n\nPolish the Chinese version of one-liner tutorial by fixing typos and\nimproving expression.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "446109acdef586fb0f0b5d40196dedb946b613ed", "commit_date": "2023-06-03T03:00:28Z", "commit_message": "Add CHANGELOG entry for #2623", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a20675c14900c0f7fb774c271fbd5f79d714a279", "commit_date": "2023-06-03T02:56:58Z", "commit_message": "Add runtime test for parallel map accessing\n\nSigned-off-by: maokelong <chenjinglong1@huawei.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6edb980285dfbbfed8d8ca920cedd8289d8f96d6", "commit_date": "2023-06-03T02:56:58Z", "commit_message": "Fix crashes caused by improper error handling for bpf_*_elem\n\nbpf_*_elem returns -errno when error occured. These functions will\nreturn -ENOENT(-2) when they failed to find a entry. It's a harmless\nerror that could be found when doing delete and print/zero/clear\noperations on the same map simultaneously. It's not reasonable to\nstop the whole program at this moment.\n\nSigned-off-by: maokelong <chenjinglong1@huawei.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3726c0281ece85c5b7f074ece88091e3b4ccbfe1", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Update CHANGELOG (making `args` a struct)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e73f0d5d4e1a62d2cf542c18b03546b2899edf50", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Replace args->x by args.x in docs and tools\n\nThe `args` builtin has been transformed from a pointer to a normal\nstructure. While dereferencing and using `->` is still possible for\nbackwards compatibility, the canonical way now is to use plain dot\noperator to access individual arguments (e.g. `args.filename`).  Reflect\nthat in documentation (reference guide and tutorial) and tools.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "353146a10c242bab7bc66ae5cf92a46af46b63bf", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Replace `args->` by `args.` in tests\n\nThe `args` builtin has been transformed from a pointer into a normal\nstructure, hence it should now be accessed using the plain dot operator.\nTransform tests to reflect that.\n\nThe access via dereference is still supported for backwards\ncompatibility, so add few tests to check that it works fine (basically\none runtime and one unit test for each probe type that supports args -\ntracepoints, kfuncs, uprobes).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "13c3ca3ff7dd28fb7afa1284a076bbc25e9ffb9d", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Make `args` builtin a structure (not a pointer)\n\nHistorically, `args` has been treated as a pointer as it was closest to\nthe implementation (context of the BPF program). From the user point of\nview, this adds an unnecessary complexity (need to dereference) as the\nvalue of the raw pointer itself is never read.\n\nThis commit changes `args` to a standard structure type. This allows to\naccess the individual arguments with the dot operator (`args.arg`). For\nbackwards compatibility, dereferencing args is still possible, it simply\nhas no effect.\n\nTogether with the previous commit, this allows to print all arguments of\nkfuncs using `print(args)`.\n\nThe commit also takes several existing tests using `args->` and\nduplicates them using `args.`. I was considering to transform all\n`args->` tests to use `args.` but that would break Git history and\ndecouple the tests from the original changes that introduced them.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "731f1d3dc5db3f227365c80edfc1bf185d3a7d19", "commit_date": "2023-06-02T07:41:38Z", "commit_message": "Refactor storage of probe args\n\nInstead of using private maps in multiple classes (BPFtrace::ap_args_,\nSemanticAnalyser::ap_args_, FieldAnalyser::ap_args_), store probe args\ninside struct manager under a special type \"struct <probename>_args\".\n\nThis simplifies the code and also allows to treat struct args just like\nany other record type. Thanks to this, it is now possible to print all\nargs of kfuncs. At this point, printing works for kfunc args only b/c\nkfuncs store all args in memory pointed by ctx and the entire args\nstruct can be proberead at once. On the other hand, uprobes store args\nin registers and therefore we'll need to access them individually. Also\nnote that printing now requires a dereference (`print(*args)`) which\nwill be changed in the follow-up commit.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f6c13b25b9d8b778e7f120769d586517e49ac6d4", "commit_date": "2023-06-01T05:19:51Z", "commit_message": "Fix resolving username for malformed /etc/passwd\n\nWhen /etc/passwd has malformed or unexpected content (e.g. contains an\nempty line), resolving the username builtin causes segfault due to\nout-of-bounds access to a std::vector. This fixes the issue.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c0198aa4f1a7629e7ba02b5472394ddeffeeb80", "commit_date": "2023-05-26T23:31:36Z", "commit_message": "Fixing runtime test filter option: --filter\n\nThis patch handles following observed issues:\n\n1. Inconsistency with test names, some have double qoutes,\n   whereas others don't. Extra pre-processing is required in\n   runtime bash script for such inconsistent names, before they\n   are supplied as args to python script.\n\n2. Test name nomenclature for \"--filter\" option is missing.\n   Need to manually figure out from code.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a7decf0b89041048081bb8539918d3b5f2c97b09", "commit_date": "2023-05-25T15:41:08Z", "commit_message": "Add documentation for nix build", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8eea8e1351edf2ffc00596bbee0a8a74a9925baf", "commit_date": "2023-05-25T15:41:08Z", "commit_message": "Export matrix of bpftrace builds with different LLVMs", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "da631b213ffb884eb50b451a407ceb7235e59c33", "commit_date": "2023-05-25T15:41:08Z", "commit_message": "Use pinned libbpf/bcc versions", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "181fc37f21cc4dc22e27ce4c88d2482865223302", "commit_date": "2023-05-25T15:41:08Z", "commit_message": "Set up nix flake for builds\n\nThis flake can build bpftrace with all features enabled as well as\nrun all the tests from outside the build environment.\n\nThe runtests.sh script is a bit hacky but I'm not sure we can do better.\nWe have to run the runtime tests at least from a non-nix environment b/c\nthe runtime tests make too many assumptions about the availability of\nvarious binaries.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7d2e0abfd9707f0a7a839aae5c624faed84973df", "commit_date": "2023-05-25T11:36:59Z", "commit_message": "Fix kprobe_offset_module test with correct offset for ppc64\n\nThe instruction size in ppc64 is 4 bytes, but the entry-point\nto the local functions is located at an offset of 8 bytes.\nTherefore, a kprobe can be attached at offsets that are multiples\nof 4 bytes beyond the initial 8-byte offset.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "76e019d844886fa0f33b3c70d88e3ee959a4a3a7", "commit_date": "2023-05-25T07:57:49Z", "commit_message": "Fix runtime tests using the nft tool\n\nSeveral tests use the nft tool to fire probes in a kernel module\n(nf_tables). All the tests have two issues which are fixed by this\ncommit:\n- The command that invokes the traced function is called using the `-c`\n  parameter which does not wait for the probes to attach. The correct\n  way to run the command is via the `AFTER` directive.\n- The created nftables table is deleted in the `AFTER` directive which\n  is not correct. It should be deleted using the `CLEANUP` directive.\n\nThe above issues caused a race condition in the tests (the command is\nexecuted before the probes are attached) which should be now fixed.\n\nIn addition, the probe.kprobe_offset_module_error test now never\nexecutes the command, so no cleanup is necessary (as it would fail).", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "923ceccebdad84a231c49c81b290fa1f1adb7e59", "commit_date": "2023-05-25T07:57:49Z", "commit_message": "tests: improve docs for the AFTER directive\n\nThe important property of the directive is that it executes the command\nonly after the probes are attached. Document this property .", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f6f041e777b304d77e53121f32c569de2c3ca599", "commit_date": "2023-05-24T16:12:16Z", "commit_message": "tests: teach runtime runner about multiple before clauses\n\nAs noted in iovisor/bpftrace#2402, usdt flakiness was made better by\n508538a but not fully fixed.\n\nThis commit is what I should have done all along: it allows the test\nrunner to parse and wait for multiple BEFORE clauses and thus ensures\nthe processes have started before the test runs.\n\nThere are two minor changes:\n\n  1. The check for child processes is now `ps --ppid` based to\n     eventually allow parallel process runs in the same environment.\n     That requires to use `ps` from the `procps` package on Alpine as\n     the default BusyBox one doesn't have the `--ppid` option.\n  2. Because of the `ps` usage, the name check is now truncated to 15\n     chars, which will fail if TASK_COMM_LEN is not 16. That looks like\n     a constant in the kernel, so I think we're good.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb1e082a4f9f2b756f813156b58ee2a5af12747e", "commit_date": "2023-05-24T06:53:15Z", "commit_message": "Rawtracepoint probe add a judgment on -EINVAL and provide a reasonable error message\n\nSigned-off-by: Feng Zhou <zhoufeng.zf@bytedance.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0a734286841d728c372c52d294d2265793213530", "commit_date": "2023-05-24T06:53:15Z", "commit_message": "Add testcase for rawtracepoint's wildcard and list show\n\nSigned-off-by: Feng Zhou <zhoufeng.zf@bytedance.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6b3f75e7368c3389928c84f2ac8da2c139233528", "commit_date": "2023-05-24T06:53:15Z", "commit_message": "Rawtracepoint program type support -l and wildcards\n\nSigned-off-by: Feng Zhou <zhoufeng.zf@bytedance.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1bd37ec5ef7772b1a0155cccfaa31020ae42137e", "commit_date": "2023-05-22T21:29:46Z", "commit_message": "Fixing args-type in subprocess.Popen against f4bc83e\n\nAs per subprocess.Popen docs: If shell=True, it is\nrecommended to pass args as string rather than as\na sequence.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71c45f544f1295362243452291cd59874f811189", "commit_date": "2023-05-22T15:13:58Z", "commit_message": "Fix threadsnoop.bt for greater than glibc 2.34", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73dc630e1194f8ddc9aa238f8220c55d60ffdcbe", "commit_date": "2023-05-22T15:05:04Z", "commit_message": "resources: generate std::string_view instead of c strings and lengths", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "26d61f56ebfb5db7ac9d116c5108fd6f1ebaecf3", "commit_date": "2023-05-22T11:58:00Z", "commit_message": "testdata: Rewrite test header generation code\n\nBefore, the old generation could would write temporary data in the\nsource directory. Technically this works, but it was causing issues with\nvmtest, as vmtest was only mounting the build directory read/write. This\nrewrite makes it so all temporary file generation occurs in the build\ndirectory.\n\nFurthermore, this rewrite correctly declares all the input/output\ndependencies so the test headers are only regenerated when absolutely\nnecessary.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad23fc38e92ac6272b2ba23e0efc979c03de3fd3", "commit_date": "2023-05-22T11:50:44Z", "commit_message": "update changelog for ringbuf\n\nSigned-off-by: xh4n3 <xyn1016@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fff6d887d94c12125635bbb634f87797b856ca27", "commit_date": "2023-05-22T11:50:44Z", "commit_message": "update codegen tests for ringbuf\n\nSigned-off-by: xh4n3 <xyn1016@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "67d4bd7c79839ca9563a6be155f0413da519f482", "commit_date": "2023-05-22T11:50:44Z", "commit_message": "support ringbuf\n\nSigned-off-by: xh4n3 <xyn1016@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4bc83e6f0e1deca45dfb7e0d067ab0b500c0f45", "commit_date": "2023-05-22T07:52:06Z", "commit_message": "Adding new directive CLEANUP to test-suite\n\nCLEANUP\tdirective aims to hold the clean-up command to\nclear the resources allocated during test run.\n\nThe command specified in CLEANUP directive will run\nafter the termination of commands from other directives\ni.e. BEFORE/RUN/AFTER.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2353019927351f0808befc5518c912e96c98f69", "commit_date": "2023-05-19T10:22:39Z", "commit_message": "Adding feature dependency in runtime tests\n\nTest cases that depend on 'features' are\nskipped rather than failed.\n\nSigned-off-by: Abhishek Dubey <adubey@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59140c8f4e280345ce1caea1bef1bed18143d7c5", "commit_date": "2023-05-19T10:21:31Z", "commit_message": "Add codegen test for kretfunc dereferencing\n\nkretfunc is btf-based tracing, when dereferencing, there is no need to call the bpf_probe_read helper function. This test is mainly used to verify kretfunc dereferencing.\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3cfbe643ce04fa97ca4e5094a5984e9cc95c7dec", "commit_date": "2023-05-19T10:21:31Z", "commit_message": "Add codegen test for iter dereferencing\n\niter is btf-based tracing, when dereferencing, there is no need to call the bpf_probe_read helper function. This test is mainly used to verify iter dereferencing.\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7efa0a272517a85ac2e294d0ae4be7de40000f3d", "commit_date": "2023-05-19T10:21:31Z", "commit_message": "Add codegen test for kfunc dereferencing\n\nkfunc is btf-based tracing, when dereferencing, there is no need to call the bpf_probe_read helper function. This test is mainly used to verify kfunc dereferencing.\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c2c3ab96a45b552380ca93171f8a9fbc3fe9aff4", "commit_date": "2023-05-19T10:21:31Z", "commit_message": "Support identifying btf type\n\nk(ret)func and iter are btf-based tracing, which can detect whether dereferencing is safe through btf, so dereferencing does not need to call the helper function bpf_probe_read. This patch mainly modifies the semantic and codegen modules\n\nsemantic:\n- Handle the ctx of iter, mark is_btftype as true\n- Handle the retval of kretfunc, mark is_btftype as true\n- When dealing with ArrayAccess, Unop, FieldAccess, inherit is_btftype attribute\n\ncodegen:\n- If it is a string type, use CREATE_MEMCPY directly to load the data\n- For other types, load data through CreateDatastructElemLoad instead of CreateProbeRead\n\nSigned-off-by: Shuyi Cheng <chengshuyi@linux.alibaba.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31d7a35816fa4993ae2f1208153ce38c632be567", "commit_date": "2023-05-17T14:14:40Z", "commit_message": "Replace FindLibZ with cmake builtin ZLIB\n\nBetter to use standard package location code over our own stuff when\npossible.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a60b171eb288250c3f1d6f065b05d8a87aff3cdd", "commit_date": "2023-05-17T14:14:40Z", "commit_message": "Link binaries against zlib\n\nCommit 1181c12f (\"Parse kernel configuration\") placed an indirect link\ndependency on zlib. This makes linking fail on system with tighter\ncontrols on linking such as nixos.\n\nFix by directly declaring the dependency and directly linking against\nzlib.\n\nThis closes #2598.", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}]}