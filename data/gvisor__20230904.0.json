{"go": [{"commit_oid": "ef3de2a0f7c4f8cedc657ca21376206fd5d14e3c", "commit_date": "2023-10-18T06:27:11Z", "commit_message": "Merge release-20231009.0-47-gd6e83e280 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6e83e2802f91ffdf9b473b5eb05ba70ac07d74c", "commit_date": "2023-10-18T06:20:17Z", "commit_message": "Add nvidia installer tool for installing NVIDIA drivers in buildkite tests.\n\nPiperOrigin-RevId: 574371646", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bac9018cd4ec6b22a72ef5e6aef633049900bafb", "commit_date": "2023-10-17T23:50:38Z", "commit_message": "Merge release-20231009.0-46-g0fd906d7e (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0fd906d7e0793ee586f97524214505928ed32b7c", "commit_date": "2023-10-17T23:44:07Z", "commit_message": "Fix the sandbox memory usage via GetContainerMemoryUsage API.\n\nThe total(sandbox) memory usage using the GetContainerMemoryUsage API will\nreturn incorrect usage when called before calling the API for each individual\ncontainers in the sandbox. This is because the memory usage for the containers\ncgroup is not updated while calculating the total usage. This CL fixes it by\nupdating the usage for every child cgroup, which will return the correct memory\nusage for the parent cgroup.\n\nPiperOrigin-RevId: 574300913", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bae23810676b184e1cd856d0c50210977417dddf", "commit_date": "2023-10-17T21:47:35Z", "commit_message": "Merge release-20231009.0-45-g707ac55a0 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "707ac55a05d7b9332f6f1199849b42306a70ba7c", "commit_date": "2023-10-17T21:40:18Z", "commit_message": "inet: don't reuse names from the abstract socket namespace map\n\n* If a name is in the map, it means there is a socket associated with it. When\n  a socket is destroyed, its name is removed from the map. If we bind another\n  socket to the same name, its destroy will trigger the panic:\n  panic: expected socket to exist at ... in abstract socket namespace\n\n* We use TryIncRef/DecRef to check a socket, DecRef may destroy the socket but\n  it requires to take AbstractSocketNamespace mutex that is already taken.\n\nPiperOrigin-RevId: 574268647", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ed8d6f02bbdb770e966a53ee5f6dffc938d0615e", "commit_date": "2023-10-17T21:33:45Z", "commit_message": "Merge release-20231009.0-44-gdb68112c0 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "db68112c06783248d4630b3077c03de8c1490bca", "commit_date": "2023-10-17T21:25:28Z", "commit_message": "netstack: further optimize checksumming\n\n- Restructure calculateChecksumNoASM() to consistently handle misaligned\n  inputs: special-case inputs less than 8 bytes in size, otherwise align the\n  buffer address to 8 bytes before checksumming in bulk. This avoids\n  significant performance degradation on misaligned inputs due to fallback to\n  unrolledCalculateChecksum().\n\n- Sum up to 64 bytes per loop iteration in calculateChecksumNoASM(), as in\n  unrolledCalculateChecksum(). This significantly improves performance for\n  large inputs.\n\n- Don't plumb carry between blocks in calculateChecksumNoASM(). On x86, this is\n  significantly faster because many instructions clobber the carry flag, so\n  saving it requires extra overhead; on arm64, this has minimal effect on the\n  generated code (the compiler inserts an extra useless copy from the zero\n  register to a temporary).\n\n- Replace the folding of uint64 accumulator to uint16 checksum with a\n  branchless equivalent, which is ~2ns/checksum faster on average due to\n  avoiding an unpredictable loop.\n\n- Fix calculateChecksumNoASM() on big-endian architectures.\n\n- Delete unrolledCalculateChecksum(), which is now unused.\n\nBefore these changes, calculateChecksumAMD64() is approximately twice as fast\nas calculateChecksumNoASM(). After these changes, calculateChecksumNoASM() is\nfaster than calculateChecksumAMD64():\n\n```\ngoos: linux\ngoarch: amd64\npkg: pkg/tcpip/checksum/checksum\ncpu: Intel(R) Xeon(R) CPU @ 2.80GHz\n                           \u2502 checksum_baseline \u2502         checksum_experiment         \u2502\n                           \u2502      sec/op       \u2502   sec/op     vs base                \u2502\nChecksum/checksum_64-48            10.50n \u00b1 0%   10.10n \u00b1 0%   -3.86% (p=0.000 n=10)\nChecksum/checksum_128-48           13.72n \u00b1 0%   12.16n \u00b1 0%  -11.37% (p=0.000 n=10)\nChecksum/checksum_256-48           22.80n \u00b1 0%   16.31n \u00b1 0%  -28.48% (p=0.000 n=10)\nChecksum/checksum_512-48           39.92n \u00b1 0%   24.96n \u00b1 0%  -37.47% (p=0.000 n=10)\nChecksum/checksum_1024-48          81.34n \u00b1 0%   44.26n \u00b1 2%  -45.58% (p=0.000 n=10)\nChecksum/checksum_1500-48         119.70n \u00b1 1%   65.05n \u00b1 2%  -45.65% (p=0.000 n=10)\nChecksum/checksum_2048-48         157.30n \u00b1 0%   86.65n \u00b1 0%  -44.91% (p=0.000 n=10)\nChecksum/checksum_4096-48          309.5n \u00b1 0%   172.4n \u00b1 3%  -44.30% (p=0.000 n=10)\nChecksum/checksum_8192-48          615.0n \u00b1 0%   348.0n \u00b1 0%  -43.42% (p=0.000 n=10)\nChecksum/checksum_16384-48        1222.5n \u00b1 0%   690.8n \u00b1 0%  -43.49% (p=0.000 n=10)\nChecksum/checksum_32767-48         2.447\u00b5 \u00b1 0%   1.381\u00b5 \u00b1 0%  -43.55% (p=0.000 n=10)\nChecksum/checksum_32768-48         2.442\u00b5 \u00b1 0%   1.381\u00b5 \u00b1 0%  -43.48% (p=0.000 n=10)\nChecksum/checksum_65535-48         4.883\u00b5 \u00b1 0%   2.933\u00b5 \u00b1 0%  -39.94% (p=0.000 n=10)\nChecksum/checksum_65536-48         4.877\u00b5 \u00b1 0%   2.935\u00b5 \u00b1 0%  -39.82% (p=0.000 n=10)\ngeomean                            260.6n        161.9n       -37.88%\n```\n\nThus, use calculateChecksumNoASM() on all architectures and rename it to\ncalculateChecksum().\n\n---\n\nNote: As of this writing, calculateChecksumNoASM() is still ~7% slower than an\nequivalently-optimized x86 assembly implementation, for three main reasons:\n\n1. The Go compiler emits separate MOV memory-to-register and ADD/ADC\n   instructions rather than using memory operands for the latter.\n\n2. For statements of the form `buf = buf[1:]`, updating the slice data pointer\n   takes ~5 instructions instead of 1, because the compiler avoids incrementing\n   the pointer if the resulting slice length is 0 (such that the pointer would\n   point outside of the underlying array). This overhead can be avoided by\n   using uintptr and runtime.KeepAlive(), but doing so worsens problem (1):\n   replacing `*(*uint64(unsafe.Pointer(&buf[8])))` with\n   `*(*uint64(unsafe.Pointer(addr+8)))` causes the compiler to split each MOV\n   into LEA + MOV.\n\n3. The faster form of reduce() described in that function is implementable in\n   assembly.\n\nThus, we can add the optimized x86 assembly implementation back if desired.\n\n---\n\n`GOOS=linux GOARCH=mips64 go test -exec qemu-mips64 ./...` fails before this\nCL, since the \"bitslib\" implementation, i.e. calculateChecksumNoASM(), is\nbroken on big-endian architectures. After this CL:\n```\nok      gvisor.dev/gvisor/pkg/tcpip/checksum    125.970s\n```\n\nPiperOrigin-RevId: 574264329", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "57c48a693beafb9087c638e16657c2a409d29b56", "commit_date": "2023-10-17T20:36:29Z", "commit_message": "Merge release-20231009.0-43-g6a25f2ebb (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a25f2ebb2c8d4d317115598babb3f585a4c8515", "commit_date": "2023-10-17T20:15:22Z", "commit_message": "Remove duplicate RandomizeBuffer implementation from socket util.\n\nInstead use the one from test_util, which uses a more random seed for rand_r().\n\nSuggested-by: Jamie Liu <jamieliu@google.com>\nSuggested-by: Andrei Vagin <avagin@google.com>\nPiperOrigin-RevId: 574243850", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c3fb11d81ac617944dcc36eaae28afc475698b6f", "commit_date": "2023-10-17T18:01:06Z", "commit_message": "Merge release-20231009.0-42-g669edba5d (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "669edba5d9f49a8ce8b895825c0306445b5c8939", "commit_date": "2023-10-17T17:54:31Z", "commit_message": "`bpf`: Add benchmark for interpreter speed.\n\nThis is a very hot path, as it is used for packet filtering and all syscalls\nof applications that set a seccomp-bpf filter on themselves.\n\nThis is useful to quantify the benefit of removing its use of interfaces,\nand in the future if anything else can be done to improve it further.\n\nInitial data:\n\n```\n            \u2502   initial   \u2502\n            \u2502   sec/op    \u2502\nInterpreter   26.31n \u00b1 0%\n```\n\nPiperOrigin-RevId: 574201377", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ea501e8e46fa09c78a973e3d660195f6f5158d3", "commit_date": "2023-10-17T02:22:36Z", "commit_message": "Merge release-20231009.0-41-ge69b01c3a (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e69b01c3a8f30967170b3c8f1af7412762068781", "commit_date": "2023-10-17T02:16:26Z", "commit_message": "Add command-line tool to quickly dump the Sentry BPF program.\n\nPiperOrigin-RevId: 573994110", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "15fdd74e5c5d2558317733cdd4fc62764439e6bb", "commit_date": "2023-10-16T20:46:17Z", "commit_message": "Limit SelectAllEvents benchmark to 512 FDs\n\n...since `select` only supports FD values up to 1024 and creating 1024\nevent FDs will result in FD values that are greater than 1024 because\nof the initial set of FDs that exist for most programs (stdin, stdout,\nstderr).\n\nhttps://www.man7.org/linux/man-pages/man2/select.2.html\n\nPiperOrigin-RevId: 573916775", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "942a1b60a8111622ec3b93c82928a0e1b5baa9a8", "commit_date": "2023-10-16T18:07:06Z", "commit_message": "Merge release-20231009.0-39-g2165031c0 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2165031c02a50e3507c50a1ccafa8a51fe44d04a", "commit_date": "2023-10-16T18:00:20Z", "commit_message": "Merge pull request #9524 from avagin:deps\n\nPiperOrigin-RevId: 573864854", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4f3f5d84125db0c511b2e1e44b0fe3c6e7ca6f45", "commit_date": "2023-10-16T17:50:58Z", "commit_message": "Fix sync.SeqCount.ReadOk() on non-x86 architectures.\n\nsync.SeqCount relies on the following memory orderings:\n\n- All stores following BeginWrite() in program order happen after the atomic\n  read-modify-write (RMW) of SeqCount.epoch. In the Go 1.19 memory model, this\n  is implied by atomic loads being acquire-seqcst.\n\n- All stores preceding EndWrite() in program order happen before the RMW of\n  SeqCount.epoch. In the Go 1.19 memory model, this is implied by atomic stores\n  being release-seqcst.\n\n- All loads following BeginRead() in program order happen after the load of\n  SeqCount.epoch. In the Go 1.19 memory model, this is implied by atomic loads\n  being acquire-seqcst.\n\n- All loads preceding ReadOk() in program order happen before the load of\n  SeqCount.epoch. The Go 1.19 memory model does not imply this property.\n\nThe x86 memory model *does* imply this final property, and in practice the\ncurrent Go compiler does not reorder memory accesses around the load of\nSeqCount.epoch, so sync.SeqCount behaves correctly on x86.\nHowever, on ARM64, the instruction that is actually emitted for the atomic load\nfrom SeqCount.epoch is LDAR:\n\n```\ngvisor/pkg/sentry/kernel/kernel.SeqAtomicTryLoadTaskGoroutineSchedInfo():\ngvisor/pkg/sentry/kernel/seqatomic_taskgoroutineschedinfo_unsafe.go:34\n  56371c:       f9400025        ldr     x5, [x1]\n  563720:       f9400426        ldr     x6, [x1, #8]\n  563724:       f9400822        ldr     x2, [x1, #16]\n  563728:       f9400c23        ldr     x3, [x1, #24]\ngvisor/pkg/sentry/kernel/seqatomic_taskgoroutineschedinfo_unsafe.go:36\n  56372c:       d503201f        nop\ngvisor/pkg/sync/sync.(*SeqCount).ReadOk():\ngvisor/pkg/sync/seqcount.go:107\n  563730:       88dffc07        ldar    w7, [x0]\n  563734:       6b0400ff        cmp     w7, w4\n```\n\nLDAR is explicitly documented as not implying the required memory ordering:\nhttps://developer.arm.com/documentation/den0024/latest/Memory-Ordering/Barriers/One-way-barriers\nConsequently, SeqCount.ReadOk() is incorrectly memory-ordered on weakly-ordered\narchitectures. To fix this, we need to introduce an explicit memory fence.\n\nOn ARM64, there is no way to implement the memory fence in question without\nresorting to assembly, so the implementation is straightforward. On x86, we\nintroduce a compiler fence, since future compilers might otherwise reorder\nmemory accesses to after atomic loads; the only apparent way to do so is also\nby using assembly, which unfortunately introduces overhead:\n\n- After the call to sync.MemoryFenceReads(), callers zero XMM15 and reload the\n  runtime.g pointer from %fs:-8, reflecting the switch from ABI0 to\n  ABIInternal. This is a relatively small cost.\n\n- Before the call to sync.MemoryFenceReads(), callers spill all registers to\n  the stack, since ABI0 function calls clobber all registers. The cost of this\n  depends on the state of the caller before the call, and is not reflected in\n  BenchmarkSeqCountReadUncontended (which does not read any protected state\n  between the calls to BeginRead() and ReadOk()).\n\nBoth of these problems are caused by Go assembly functions being restricted to\nABI0. Go provides a way to mark assembly functions as using ABIInternal\ninstead, but restricts its use to functions in package runtime\n(https://github.com/golang/go/issues/44065). runtime.publicationBarrier(),\nwhich is semantically \"sync.MemoryFenceWrites()\", is implemented as a compiler\nfence on x86; defining sync.MemoryFenceReads() as an alias for that function\n(using go:linkname) would mitigate the former problem, but not the latter.\nThus, for simplicity, we define sync.MemoryFenceReads() in (ABI0) assembly, and\nhave no choice but to eat the overhead.\n\n(\"Fence\" and \"barrier\" are often used interchangeably in this context; Linux\nuses \"barrier\" (e.g. `smp_rmb()`), while C++ uses \"fence\" (e.g.\n`std::atomic_memory_fence()`). We choose \"fence\" to reduce ambiguity with\n\"write barriers\", since Go is a GC'd language.)\n\nPiperOrigin-RevId: 573861378", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e059c13fdbc9b023b1ade499e611b1052df99df4", "commit_date": "2023-10-16T15:19:37Z", "commit_message": "Merge release-20231009.0-36-g289dc7ce1 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "289dc7ce1d718b479e2a43282e443c79def0b133", "commit_date": "2023-10-16T15:12:10Z", "commit_message": "Prefer routes with local addr on outgoing NIC only for local traffic\n\nCurrently gVisor's routing logic always prefers routes that use a local\naddress that is assigned to the outgoing interface. This preference is\napplied even for forwarded traffic, where the local address is left\nunspecified on route lookup because the source address of the packet\nbelongs to some other node as opposed to the stack itself. This means\nthat when forwarding incoming traffic, the netstack will prefer routes\nthat go through a NIC with a local address endpoint over those that do\nnot, even if a better route exists.\n\nChange this logic such that the preference for routes with a local\naddress assigned to the outgoing interface only applies for locally-\ngenerated traffic.\n\nPiperOrigin-RevId: 573812452", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb6912c25496742e3188ca2978183e75d2298c16", "commit_date": "2023-10-14T19:40:37Z", "commit_message": "Merge release-20231009.0-35-gfebb0656f (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "febb0656f3472dc87db3314b7c35416074e389cf", "commit_date": "2023-10-14T19:34:40Z", "commit_message": "Revamp shared mount container tests.\n\nAdds testing utilities to run shared mount tests with various --overlay2\nsettings and with different mount types. This should be more useful than\nrunning these tests with various platforms.\n\nPiperOrigin-RevId: 573502277", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb3ec500c3ec20a8a53dd3e23a32b9647c6446bb", "commit_date": "2023-10-14T03:17:42Z", "commit_message": "Merge release-20231009.0-34-g2501d8282 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2501d8282ddfcf67ef29b4e1c677b52b4fac663b", "commit_date": "2023-10-14T03:10:57Z", "commit_message": "Expand the concept of OverlayMedium to GoferMountConf.\n\nThis change expands the notion of \"overlay medium\" to \"gofer mount config\".\n\"Gofer mount\" is used to refer to the collection of rootfs mount + bind mounts.\nThis expansion is useful when we need to convey more information about how each\ngofer mount is set up (apart from whether overlay is enabled and what overlay\nmedium is used).\n\nThis should be synthetic change (no change in behavior).\n\nPiperOrigin-RevId: 573378080", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4a02ce6c68ac6a97053b3b65eb8b58f00eeb9591", "commit_date": "2023-10-13T23:47:10Z", "commit_message": "Merge release-20231009.0-33-g1a5aee553 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a5aee55393806862ba2bc775a1c469e38f01b0e", "commit_date": "2023-10-13T23:38:59Z", "commit_message": "Handle deletion of self-backed filestores for shared mounts.\n\nCurrently shared mounts do not have a file backend, but future changes will\nintroduce it. Shared mounts are owned by the sandbox process and they persist\nfor the entire lifecycle of the sandbox. When containers using them are start,\nthey simply reuse the shared mount's filesystem instance.\n\nDuring the lifecycle of the sandbox, containers using a shared mount can be\nstarted/restarted/destroyed multiple times. So we should only delete the shared\nmount's filestore when the sandbox is being destroyed.\n\nPiperOrigin-RevId: 573347590", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b2a060f12011ddb04ec138ae4df0678d2d577903", "commit_date": "2023-10-13T22:52:15Z", "commit_message": "Merge release-20231009.0-32-g794947868 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "79494786880486b9d1e3186fce86b502a2384322", "commit_date": "2023-10-13T22:45:39Z", "commit_message": "Add an function that returns a mount point for the given path.\n\nPiperOrigin-RevId: 573337009", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "096afee0bf3adb94fc3ab3077ff35a0d902f6525", "commit_date": "2023-10-13T19:20:51Z", "commit_message": "Merge release-20231009.0-31-gff6542a99 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff6542a99e4e872c61a374c025d065252a12068a", "commit_date": "2023-10-13T19:12:59Z", "commit_message": "Merge pull request #9500 from kevinGC:checksumalign\n\nPiperOrigin-RevId: 573287057", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ecb6b2ebe516a677b34e356939fc29841c4b995f", "commit_date": "2023-10-13T17:28:24Z", "commit_message": "Merge release-20231009.0-29-gf3b0a527c (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f3b0a527c2048fe14e1ce438b3f271c677a4fa12", "commit_date": "2023-10-13T17:20:56Z", "commit_message": "inet: allow to create abstract unix sockets in non-root namespaces\n\nPiperOrigin-RevId: 573253619", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c21f11d246f978b46010e99583e3fe580d28226b", "commit_date": "2023-10-13T04:42:33Z", "commit_message": "Describe how to update golang dependencies\n\nSigned-off-by: Andrei Vagin <avagin@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "caecdaace8eb0f838d05e0b004199b40e1ea833f", "commit_date": "2023-10-13T03:57:30Z", "commit_message": "Merge release-20231009.0-28-gc134ec928 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c134ec92830b54a760d37279fc8d1557a197cf5a", "commit_date": "2023-10-13T03:51:11Z", "commit_message": "Merge pull request #9525 from avagin:bazel-update\n\nPiperOrigin-RevId: 573088680", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a74ba8b2c143396259ac52737aedf5a29a267604", "commit_date": "2023-10-13T00:35:58Z", "commit_message": "Merge release-20231009.0-26-g323d0fe7d (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "323d0fe7de521ac5b16f848901d517f251d682fa", "commit_date": "2023-10-13T00:29:41Z", "commit_message": "Merge pull request #9488 from google:dependabot/bundler/images/benchmarks/ruby/sinatra-2.2.3\n\nPiperOrigin-RevId: 573055277", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ffa71b1ee58e4069efbc0ef2d2f653326b3e144d", "commit_date": "2023-10-12T23:10:18Z", "commit_message": "Update dependencies\n\nSigned-off-by: Andrei Vagin <avagin@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "94538f57a0fa6080ba444b78c4fbbdf8be470c2e", "commit_date": "2023-10-12T22:12:03Z", "commit_message": "Merge release-20231009.0-24-gda90797f0 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "da90797f0cb3446f731236dfcc891c30192b48ca", "commit_date": "2023-10-12T22:05:54Z", "commit_message": "Zero `fd_set` in `select_benchmark`\n\nThis is fixing a bug that caused the test to fail on ARM64 when running\nunder Starnix on Fuchsia. https://ci.chromium.org/b/8767565962564011473\nis an example failing run.\n\nPiperOrigin-RevId: 573021699", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "011ba5799b3e83eb3dad72cc30011849617cef96", "commit_date": "2023-10-12T20:18:53Z", "commit_message": "Merge release-20231009.0-23-g23c97a4b9 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "23c97a4b93045b3167335b2ee66a1baafa376944", "commit_date": "2023-10-12T20:12:13Z", "commit_message": "buildkite: Run bazel with the remote cache\n\nPiperOrigin-RevId: 572991580", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d0a51a518ee2517fb1b27ff6528cd7587dfaeb82", "commit_date": "2023-10-12T20:08:53Z", "commit_message": "Merge release-20231009.0-22-g807e59f15 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "807e59f15cfad4f8dab0ad8772e2b318f1570917", "commit_date": "2023-10-12T20:01:07Z", "commit_message": "Add some units tests around lifecycle annotation.\n\nPiperOrigin-RevId: 572986759", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e9cef920a4f8630a7d0959b0c8974f07820be24e", "commit_date": "2023-10-12T19:52:14Z", "commit_message": "Add logging when downgrading the container status during state file load.\n\nShould help debug issue #9383.\n\nPiperOrigin-RevId: 572985021", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e1c727421eab3b2be45b534fb47eb2499f858f58", "commit_date": "2023-10-12T19:49:06Z", "commit_message": "Merge release-20231009.0-20-g24850a4d5 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "24850a4d512e6b7a28f24ccf849f3f2efd8716d6", "commit_date": "2023-10-12T19:42:43Z", "commit_message": "`secbench`: Read stdout before waiting for process.\n\nGo's `command.Cmd.Wait` closes stdout, so this can race with the stdout\nreader goroutine.\n\nPiperOrigin-RevId: 572983626", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a630bc7e835e28c8ad54e71133e5266705d91ec", "commit_date": "2023-10-12T19:27:54Z", "commit_message": "Merge release-20231009.0-19-g3cbedad3d (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3cbedad3dac7655948076bd4ba320edc5f08f255", "commit_date": "2023-10-12T19:21:49Z", "commit_message": "Implement initial support for MS_REMOUNT to change mount flags.\n\nPiperOrigin-RevId: 572978793", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "43326aa1d4c014d599a97f12b22cf4d720c507fc", "commit_date": "2023-10-12T18:25:05Z", "commit_message": "Merge release-20231009.0-18-gbc2da4a0c (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bc2da4a0c3c565cf077f0f16518fcfa5b108e2a5", "commit_date": "2023-10-12T18:17:29Z", "commit_message": "Add internal annotation for nvproxy.\n\nAdd an internal annotation so we can set NVProxy in k8s on a per\nsandbox (pod) basis.\n\nPiperOrigin-RevId: 572960928", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "58bbd4b09d78dec7262e7bd365bdbbe5e5b1e2d0", "commit_date": "2023-10-12T18:07:14Z", "commit_message": "Merge release-20231009.0-17-g3962c7dca (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3962c7dcaf4b15e7c0c11213eb83d281dd71c13c", "commit_date": "2023-10-12T18:00:37Z", "commit_message": "Remove unnecessary RUNTIME_BIN dependency from container-tests target.\n\nThese tests call into runsc API directly, not by invoking runsc binary.\n\nPiperOrigin-RevId: 572955508", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4fcc51bb0c8412701c783921b4651c3f428c044", "commit_date": "2023-10-12T07:52:30Z", "commit_message": "Merge release-20231009.0-16-gc6a583126 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c6a583126e2c2a606b2b6d4bb2a6683d67ffa670", "commit_date": "2023-10-12T07:44:32Z", "commit_message": "socket/unix: Implemented the autobind feature\n\nIf a bind call specifies addrlen as sizeof(sa_family_t) ,then the socket\nis auto-bound to an abstract address. The address consists of a null byte\nfollowed by 5 bytes in the character set [0-9a-f].\n\nPiperOrigin-RevId: 572810162", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "50d0c052be435f91fd97301975017a31b3600ab6", "commit_date": "2023-10-12T04:59:07Z", "commit_message": "netstack: fall back to slower checksum when buffer isn't aligned\n\n- When buffers aren't 64 bit aligned, use the slower unrolled checksum\n  that's safe across different architectures.\n- Remove the copied checksum implementation in checksum_test so we don't\n  have to update both.\n- Play with build tags such that checksum_test tests all checksum\n  implementations, not just the preferred one on that architecture.\n\nFixes #9499.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f9745957e41519bf6ceca9b6d5405eefe25fcaa0", "commit_date": "2023-10-11T23:08:35Z", "commit_message": "Merge release-20231009.0-15-g1f04a514e (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1f04a514e8e8f9ff234743b956291f39d666768f", "commit_date": "2023-10-11T23:02:33Z", "commit_message": "Fix mount promise path resolution.\n\nIt should build a path starting from the task root, not rp.root. This was a\nproblem in the case of reading from /proc/mountinfo before starting the daemon.\nIn this case, the procfs issues a StatAt call through vfs with the rp starting\nat the root of the cloudsql mount. This issued a request to start the daemon\nwith the path \"/\" instead of \"/cloudsql\".\n\nPiperOrigin-RevId: 572713014", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dbd40f983633f652b5723d8f69976f7b2bcd75f6", "commit_date": "2023-10-11T22:24:00Z", "commit_message": "Merge release-20231003.0-55-ga8bc2e146 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a8bc2e1466267d8c5d9da7ddf632bc187286b6a2", "commit_date": "2023-10-11T22:17:54Z", "commit_message": "Fix group id cleanup and tidy up some mount methods.\n\nBefore this we were failing to clean up group IDs properly which could\ncause propagation to loop forever in some rare cases. This change\nalso addresses a couple other small issues:\n\n- In attachTreeLocked we were doing error checks on a VirtualDentry before\n  checking if that vd had been mounted over.\n- In destroy we were checking mnt.parent() without vfs.mountMu locked or\n  checking vfs.mounts.seq.\n\nReported-by: syzbot+78a0d5c373d28623a709@syzkaller.appspotmail.com\nPiperOrigin-RevId: 572700791", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f7bfab20e08ad185f874828161a3d96a169090dd", "commit_date": "2023-10-11T18:42:40Z", "commit_message": "Fix MountNamespaceSlavesNewUserNamespace test.\n\nChanges were proposed by avagin@google.com.\n\nPiperOrigin-RevId: 572638753", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "13055b2f790113d1fd858a03926cb1cddf96917f", "commit_date": "2023-10-10T22:45:47Z", "commit_message": "Merge release-20231003.0-53-g4e5d7ff1a (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4e5d7ff1ab7ebc1b2ebbb6db6e8abb94e693d563", "commit_date": "2023-10-10T22:39:42Z", "commit_message": "`secbench`: Add benchmark for doing an ioctl with `nvproxy` enabled.\n\n`nvproxy` significantly grows the size of the `ioctl` syscall rule.\nThis benchmark allows tracking its efficiency over time.\n\nThis benchmark isn't correctly weighted, maybe it'd be cool to record\nthe ioctls of a typical CUDA workload and weigh this benchmark properly.\n\nPiperOrigin-RevId: 572386211", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "39ce4aedb3d6a2907de685eb31ae560ea721818e", "commit_date": "2023-10-10T21:34:43Z", "commit_message": "Merge release-20231003.0-52-g34c0fe73e (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "34c0fe73ed10913d4295c9e75b8cf357cbe0e154", "commit_date": "2023-10-10T21:28:34Z", "commit_message": "Updating golang's containerd/runc version 1.1.0\n\nThis is required to include the NetworkInterface struct\nadded in go-runc Stats in commit c321e8cd.\n\nhttps://github.com/containerd/go-runc/blob/main/events.go\n\nPiperOrigin-RevId: 572366821", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bf0f5812ca11ca27fb5d7cac181231e9d0fc828c", "commit_date": "2023-10-10T21:17:58Z", "commit_message": "Merge release-20231003.0-51-gf098b9b06 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f098b9b06ec47e76fa04394a6b5d7390abd9ac4d", "commit_date": "2023-10-10T21:11:01Z", "commit_message": "`seccomp`: Make `SyscallRules` map type opaque.\n\nThis wraps the `map[uintptry]SyscallRule` into an unexported field of a struct\nso that it cannot be accessed directly.\n\nThis is helpful for the `runsc` and `fsgofer` seccomp filters which are quite\ncomplex and built across multiple files and multiple functions, where it is\nnot always clear which order they are executed in. By forcing mutations to be\nmore explicit about their intent (especially \"merge with this new rule\" vs\n\"override what happens for this syscall with this new rule\"), we can crash if\nthat intent isn't what's actually happening.\n\nPiperOrigin-RevId: 572361619", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1285cdaa5611980733c5e1c2e6ec46bf02b764f1", "commit_date": "2023-10-10T18:24:53Z", "commit_message": "Merge release-20231003.0-50-g584791a1f (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "584791a1f0a47ef237c6758c36d13261eac77680", "commit_date": "2023-10-10T18:18:34Z", "commit_message": "Add support for Nvidia driver versions after 535.43.02.\n\nNvproxy now supports 535.54.03 and 535.104.05 versions.\nTested on T4 GPU for these versions.\n```\n$ docker run --runtime=runsc --rm --gpus=all nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubi8\n[Vector addition of 50000 elements]\nCopy input data from the host memory to the CUDA device\nCUDA kernel launch with 196 blocks of 256 threads\nCopy output data from the CUDA device to the host memory\nTest PASSED\nDone\n```\n\nPiperOrigin-RevId: 572312006", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae244312b0507ecc4016132f8cbbaa5be44dd051", "commit_date": "2023-10-10T01:00:26Z", "commit_message": "Merge release-20231003.0-49-g71dc79e65 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71dc79e653490ec386ca3f56970b412b6790b2c4", "commit_date": "2023-10-10T00:53:22Z", "commit_message": "`secbench`: Benchmark optimization duration and compression ratio.\n\nCurrent values for the Sentry filters:\n\n```\n              \u2502   current   \u2502\n              \u2502  build-sec  \u2502\nSentrySystrap   13.73m \u00b1 0%\nSentryKVM       16.36m \u00b1 0%\n\n              \u2502      current      \u2502\n              \u2502 compression-ratio \u2502\nSentrySystrap          2.165 \u00b1 0%\nSentryKVM              2.132 \u00b1 0%\n\n              \u2502   current   \u2502\n              \u2502  gen-instr  \u2502\nSentrySystrap   1.288k \u00b1 0%\nSentryKVM       1.373k \u00b1 0%\n\n              \u2502  current   \u2502\n              \u2502 opt-instr  \u2502\nSentrySystrap   595.0 \u00b1 0%\nSentryKVM       644.0 \u00b1 0%\n\n              \u2502   current   \u2502\n              \u2502   opt-sec   \u2502\nSentrySystrap   819.0\u00b5 \u00b1 2%\nSentryKVM       897.0\u00b5 \u00b1 1%\n```\n\nPiperOrigin-RevId: 572089103", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7406953c0a420ce903eec19b39871813affc77e3", "commit_date": "2023-10-10T00:35:15Z", "commit_message": "Merge release-20231003.0-48-g1a680b825 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a680b825b05147e99ff69aafa400798c86289af", "commit_date": "2023-10-10T00:28:41Z", "commit_message": "netstack: rename IncRef() to TryIncRef() to better reflect its behavior\n\nPiperOrigin-RevId: 572084130", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a605b75882c43d25e05fc7a52c9aacdc3a006c03", "commit_date": "2023-10-10T00:15:54Z", "commit_message": "Merge release-20231003.0-47-g1e5df83ed (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e5df83edfeadf4c2a391a9180e79ace763da2c4", "commit_date": "2023-10-10T00:08:52Z", "commit_message": "Make `runsc events` robust against bad data and avoid division by zero.\n\nUpdates #9383\n\nPiperOrigin-RevId: 572079494", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "58401b94ef6eced25322fc6c9e2be8dfe3a0ec19", "commit_date": "2023-10-09T23:28:25Z", "commit_message": "Merge release-20231003.0-46-g19399cd60 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "19399cd60bd45ec7cb072b5adb9997e74d348949", "commit_date": "2023-10-09T23:20:26Z", "commit_message": "netstack: check the value of IncRef() before returning a selected source IP\n\nIt's possible for IncRef() to fail (it's really TryIncRef()), so we have to\ncheck.\n\nPiperOrigin-RevId: 572068691", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4ef772aa54e7fcedacf27fe637ab9a215d0aa438", "commit_date": "2023-10-09T22:57:08Z", "commit_message": "Merge release-20231003.0-45-gb3de4851a (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b3de4851a66fd73cba79396f012ab2a20f8adf3c", "commit_date": "2023-10-09T22:49:17Z", "commit_message": "roll forward cl/558267882\n\nThis change is correct regardless of the rolled-back changes to IP address\nselection.\n\nPiperOrigin-RevId: 572061466", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "16576b147833688fd018350d9b3a60940f687d69", "commit_date": "2023-10-09T18:38:35Z", "commit_message": "Merge release-20231003.0-44-g79da11aa5 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "79da11aa57554a473ea1d20b28ab9cc65fb2ffbf", "commit_date": "2023-10-09T18:31:16Z", "commit_message": "Merge pull request #9485 from btw616:fix-dirents-order\n\nPiperOrigin-RevId: 571993569", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b785296bdac9179320b3d5b3a2e83f533b7c0c1a", "commit_date": "2023-10-09T17:26:56Z", "commit_message": "Merge release-20231003.0-42-g12bc9994b (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12bc9994b427b60befac8bfd6a0c062963dc57e7", "commit_date": "2023-10-09T17:18:13Z", "commit_message": "Introduce select_benchmark\n\nThis benchmark performs similar measurements as epoll_benchmark.\n\nPiperOrigin-RevId: 571972206", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b2504f6402e869f2987b0f8e8cd4175226179af0", "commit_date": "2023-10-08T23:32:40Z", "commit_message": "Merge release-20231003.0-41-g98b368b7f (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "97744978048cc9976b996af494e974a769eb1587", "commit_date": "2023-10-08T23:26:21Z", "commit_message": "Bump sinatra from 2.0.5 to 2.2.3 in /images/benchmarks/ruby\n\nBumps [sinatra](https://github.com/sinatra/sinatra) from 2.0.5 to 2.2.3.\n- [Changelog](https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md)\n- [Commits](https://github.com/sinatra/sinatra/compare/v2.0.5...v2.2.3)\n\n---\nupdated-dependencies:\n- dependency-name: sinatra\n  dependency-type: direct:production\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "98b368b7fa6fdf437739ff4f9e8913c4e3cabb47", "commit_date": "2023-10-08T23:25:27Z", "commit_message": "Merge pull request #9231 from google:dependabot/bundler/images/benchmarks/ruby/rack-2.2.8\n\nPiperOrigin-RevId: 571787867", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "79297dbdb4c664491f531c23d0546c03bbdd0ca9", "commit_date": "2023-10-07T23:24:10Z", "commit_message": "Merge release-20231003.0-39-g85701f569 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85701f569ba84c5598a7fea79dfc24fef13c6b20", "commit_date": "2023-10-07T23:17:05Z", "commit_message": "Merge pull request #9301 from google:dependabot/bundler/images/benchmarks/ruby/puma-5.6.7\n\nPiperOrigin-RevId: 571635215", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "15e4366487c8dd984056fb82028c85eade2048fe", "commit_date": "2023-10-07T13:15:16Z", "commit_message": "erofs: fix wrong assumption on the order of on-disk directory entries\n\nFor each directory, _all_ the on-disk directory entries are _strictly_\nrecorded in alphabetical order. There is no special treatment of \".\" and\n\"..\". Thanks to @hsiangkao for pointing out this bug.\n\nFixes: eca83ac68cda (\"Add initial support for EROFS\")\nReported-by: Gao Xiang <xiang@kernel.org>\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "200a6c5594755a60812e6fa2b6bec3beb7d0d5df", "commit_date": "2023-10-06T23:26:15Z", "commit_message": "Merge release-20231003.0-37-gaddac5f24 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "addac5f2487d85be4de2c93b81b86f1145a4a025", "commit_date": "2023-10-06T23:19:26Z", "commit_message": "Refactor seccomp rules with interfaces rather than disjunctive normal form.\n\nThis replaces the `seccomp.Rule` type with the `seccomp.SyscallRule`\ninterface, which is an abstraction that defines how to match a syscall's\narguments and RIP.\n\nThis has the following benefits:\n\n- The code can verify that rules are self-contained, as the\n  `SyscallRule.Render` contract specifies that the rule must jump to\n  either a \"matched\" or \"not matched\" label, and may not fall through.\n  It uses `ProgramBuilder`'s support for asserting unreachability to\n  enforce this.\n- Rules that match everything are more explicit (no more implicit\n  \"no rules means everything matches\" behavior, instead you have to\n  explicitly specify `seccomp.MatchAll{}`).\n- \"OR\" behavior is explicit (a disjunctive rule is marked as `seccomp.Or`\n  rather than the current implicit meaning of a list of rules).\n- Allows the creation of more sophisticated matching rules that don't work\n  on a per-argument basis. This change does not do any of that yet, it\n  simply refactors existing rules without changing the way they work.\n- Decouples rule-specific rendering code from the larger program generation\n  code (BST, architecture check, etc.).\n\nUnfortunately there is no easy way to split this change into multiple\nsub-changes without introducing additional complexity to support both forms\nof expressing rules, so sorry if this is a large change. But note that it\nis actually net-negative in line count.\n\nDespite the size of this change, please review it carefully, as this is a\nsecurity-sensitive change.\n\nPiperOrigin-RevId: 571459670", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ed187b23735acb0c9e1001e146063bdcd6cced1", "commit_date": "2023-10-06T21:43:49Z", "commit_message": "Merge release-20231003.0-36-g9cb26fd34 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9cb26fd34fcd4278c4d5ca2a4824507bcec7b851", "commit_date": "2023-10-06T21:36:44Z", "commit_message": "netstack: verify stack supports protocol before finding route\n\nNot doing so breaks the assumption of later code that netProto is supported by\nthe stack.\n\nPiperOrigin-RevId: 571436763", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "16dbacbb598fa893da5c5131518e05f1f5210449", "commit_date": "2023-10-06T21:32:17Z", "commit_message": "Merge release-20231003.0-35-gba1c60263 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba1c60263e90d47b641054faed47154e4c65e054", "commit_date": "2023-10-06T21:25:06Z", "commit_message": "Merge pull request #9230 from google:dependabot/npm_and_yarn/images/benchmarks/node/minimist-1.2.8\n\nPiperOrigin-RevId: 571434254", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3f714dbbb1264987849b2e6a3174fe351fc6aeba", "commit_date": "2023-10-06T21:18:42Z", "commit_message": "Merge release-20231003.0-33-g44e0d6d07 (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44e0d6d072460444b0112b770f11f975b9883240", "commit_date": "2023-10-06T21:11:55Z", "commit_message": "Unlock putOldMp before retrying the mount checks in pivot_root.\n\nPiperOrigin-RevId: 571431100", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "30afc0a505bcf9e8fd3cb4d5515a36939094ac7c", "commit_date": "2023-10-06T20:23:34Z", "commit_message": "Merge release-20231003.0-32-gf2f99b5cc (automated)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2f99b5ccf1011d7a8cd1e4429540df4ac7576e8", "commit_date": "2023-10-06T20:14:45Z", "commit_message": "Merge pull request #9308 from btw616:erofs-initial-support\n\nPiperOrigin-RevId: 571416660", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "07b9077bfdcc14d27dd29b378d4fdf7914ebd28c", "commit_date": "2023-10-06T20:03:58Z", "commit_message": "Introduce poll_benchmark\n\nThis benchmark performs similar measurements as epoll_benchmark.\n\nPiperOrigin-RevId: 571414062", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "15cc3fcbbd77101638854d5b575ea234804d7f7c", "commit_date": "2023-10-06T03:27:04Z", "commit_message": "Add RmAllocParamType interface for parameter types of NV_ESC_RM_ALLOC.\n\nRefactor codebase to use this interface, instead of manually copying back and\nforth into various structs.\n\nPiperOrigin-RevId: 571208903", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c24ab8dd80d7351834758b13a5a5349d301e1ba", "commit_date": "2023-10-06T00:27:49Z", "commit_message": "Issue FUSE_FLUSH request during file close.\n\nPiperOrigin-RevId: 571178563", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f3de61deed6a01ac9d7d7d6a64cefc36f66fb59c", "commit_date": "2023-10-06T00:09:36Z", "commit_message": "Handle O_PATH correctly with fchmodat(2) and utimensat(2).\n\n- As an optimization, when path was empty and it was allowed to use empty path,\n  setstatat() was invoking the FD-impl directly, instead of going through the\n  FS-impl, in hopes that open FDs can perform these operations more quickly.\n  However, this optimization breaks fchmodat(AT_EMPTY_PATH) for O_PATH FDs\n  because O_PATH FD-impl rejects SetStat() operation. So disabled this\n  optimization for O_PATH FDs.\n- However, this fix revealed that we were now allowing utimes() operations on\n  O_PATH FDs via utimensat(opathFD, path=NULL). Linux disallows this as\n  mentioned in the patch. So fixed utimes codebase to emulate Linux accurately.\n\nFixes #9453\n\nPiperOrigin-RevId: 571174417", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "41208411847841af2dbe9daa36189b35d191b9b2", "commit_date": "2023-10-05T22:56:37Z", "commit_message": "Enable easy creation of independent profiling metrics.\n\nWhen using conditionally compiled metrics there was only one go_tag to rule them\nall. That's kind of a shame because when profiling something specific it's\nnicer to know that only your metrics that you care about are compiled in and\nmetrics that you don't care about aren't.\n\nThis CL makes it easy to create new profiling go_tags, by abstracting the\nprofiling metric init functions under two builder structs: RealMetricBuilder\nand FakeMetricBuilder; these builder structs are the only things that need\nto change between the metrics-ON or OFF versions of conditional metric files\n(aside from the go_tag controlling conditional compilation of course).\nIdeally having to create these files manually wouldn't be necessary at all,\nand we could use a go_template build rule instead, but that doesn't support\nreplacing go:build tags AFAIK.\n\nPiperOrigin-RevId: 571153131", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dcfe2d169e8954ff319790b814b583ad1f0efe4c", "commit_date": "2023-10-05T20:19:06Z", "commit_message": "`seccomp`: Rename `seccomp.MatchAny` to `seccomp.AnyValue`.\n\nThis reduces the diff on an upcoming refactor which modifies all seccomp\nrules.\n\n`AnyValue` better reflects the fact that the matcher is about matching a\nsingle syscall argument value, as opposed to e.g. a rule that allows a\nsyscall through regardless of its argument.\n\nPiperOrigin-RevId: 571110444", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "598fbe650377baa89de751f6cf5e771dd321e101", "commit_date": "2023-10-05T19:08:15Z", "commit_message": "Implement MS_REC.\n\nPiperOrigin-RevId: 571091808", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9aa05f01e038a361a91c13af898e2936aef57aad", "commit_date": "2023-10-05T18:53:26Z", "commit_message": "BPF program builder: Add support for recording/analyzing fragment outcomes.\n\nThis adds a new `Record` function to `bpf.ProgramBuilder`, which returns a\nfunction to stop recording that returns the \"fragment\" of the program made\nof the instructions that were added between the time `Record` was called and\nthe time the stop function was called.\n\nThis fragment can in turn be interrogated for which `Outcomes` may happen\nfrom executing it: returning a value, jumping to a label, jumping away from\nthe fragment, falling through.\n\nThis is useful while building complex BPF programs with nested rules. By\nrecording instructions added by a possibly-nested set of rules (the final\noutcome of which is to jump to a known set of labels), we can now actually\nverify the assertion that the instructions that were added indeed end up\njumping to one of the expected labels, and nothing else.\n\nThis is useful not just for safety but also optimization purposes. In an\nupcoming refactor to argument matching code, I plan to add a \"value matcher\"\ninterface that renders rules that verify the value of the `A` register. Some\nmatchers may need to modify the `A` register in order to work, but others\ndon't. By checking whether the set of instructions modifies `A` or not, the\nhigher-level code can determine whether or not it needs to add code to reload\nthe value of the `A` register or not before moving on to the next matcher.\n\nPiperOrigin-RevId: 571087694", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "09be6cec5e98985a3776286bdc29c26a979fafaa", "commit_date": "2023-10-05T07:51:48Z", "commit_message": "`bpf`: Use optimizer for seccomp-bpf programs.\n\nThis speeds up:\n\n- The Sentry and the Gofer's seccomp-bpf programs\n- User application seccomp-bpf programs\n- Systrap and ptrace seccomp-bpf rules\n\nSome benchmark results with Postgres:\n\n```\n                                   \u2502    before     \u2502                    opt                    \u2502\n                                   \u2502    sec/op     \u2502    sec/op     vs base                     \u2502\nSentrySystrap/Postgres/futex          88.82n \u00b1  2%   81.29n \u00b1  2%   -8.48% (p=0.000 n=519+510)\nSentrySystrap/Postgres/nanosleep      116.9n \u00b1 19%   115.9n \u00b1 17%        ~ (p=0.859 n=350+317)\nSentrySystrap/Postgres/sendmmsg       88.68n \u00b1  1%   81.56n \u00b1  1%   -8.04% (n=519+510)\nSentrySystrap/Postgres/fstat          24.47n \u00b1  3%   24.31n \u00b1  6%        ~ (p=0.832 n=514+502)\n[...]\nSentrySystrap/Postgres-48             71.00n \u00b1  8%   63.00n \u00b1  6%  -11.27% (p=0.002 n=183+181)\n```\n\nPiperOrigin-RevId: 570931073", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ff4c4593819749623b7b0ead2ca095c4c7a9e89", "commit_date": "2023-10-05T04:48:35Z", "commit_message": "`bpf`: Implement BPF optimizer.\n\nThis performs a few lossless optimizations passes over BPF programs.\n\nThis change does minimal testing and does not test for correctness.\nThe next change incorporates this optimizer in the program builder which *is*\ntested for correctness.\n\nIt is not used anywhere yet, but when putting it on the Sentry filters:\n\n```\n                                   \u2502    before     \u2502                    opt                    \u2502\n                                   \u2502    sec/op     \u2502    sec/op     vs base                     \u2502\nSentrySystrap/Postgres/futex          88.82n \u00b1  2%   81.29n \u00b1  2%   -8.48% (p=0.000 n=519+510)\nSentrySystrap/Postgres/nanosleep      116.9n \u00b1 19%   115.9n \u00b1 17%        ~ (p=0.859 n=350+317)\nSentrySystrap/Postgres/sendmmsg       88.68n \u00b1  1%   81.56n \u00b1  1%   -8.04% (n=519+510)\nSentrySystrap/Postgres/fstat          24.47n \u00b1  3%   24.31n \u00b1  6%        ~ (p=0.832 n=514+502)\n[...]\nSentrySystrap/Postgres-48             71.00n \u00b1  8%   63.00n \u00b1  6%  -11.27% (p=0.002 n=183+181)\n```\n\nPiperOrigin-RevId: 570900358", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cce5b85235bd6d90742b2d5310811efc9284c6bb", "commit_date": "2023-10-05T03:33:43Z", "commit_message": "Add driver versioning support in nvproxy.\n\nThis adds utilities to make it easier to add versioning support in nvproxy.\nThis way we can have different handling of ioctls based on driver versions.\n\nThe largest downside of this solution is the usage of maps instead of switch\nstatements. Switch statements are *way* faster than map accesses. The rationale\nis that most of the latency bound work happens on the GPU for GPU workloads. So\nmicro-optimizations like using switch statements should not be visible.\n\nCo-authored-by: Jamie Liu <jamieliu@google.com>\nPiperOrigin-RevId: 570889581", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d493e93763d029996514d494c944a314b0ef9d4c", "commit_date": "2023-10-05T01:08:58Z", "commit_message": "Implement MS_SLAVE.\n\nThis change implements the MS_SLAVE flag as its described in\nhttps://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt.\nIn the sentry slaves are called followers and masters are called leaders.\n\nPiperOrigin-RevId: 570866579", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e0bdd0d57680d5aa5ac7c6aa1fc03954feb48011", "commit_date": "2023-10-04T22:46:28Z", "commit_message": "Ensure at least page size bytes are read from /dev/{u}random and getrandom(2).\n\nThis undocumented behavior manifests in Linux and some apps depend on it.\nSee drivers/char/random.c:get_random_bytes_user().\n\nFixes #9445\nFixes #4988\n\nPiperOrigin-RevId: 570833447", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c39ecc4eb47a3039c9df959754dc87cf0ba02286", "commit_date": "2023-10-04T22:25:09Z", "commit_message": "The local task in process_vm_read|writev is just the calling task.\n\nWe were using t.ThreadGroup.Leader() as the local task, which led to data races\nreading fields that are owned by the task goroutine. But there's no need to use\nthe Leader, so we just use the calling task everywhere.\n\nPiperOrigin-RevId: 570826256", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cf93d156901b040a50c1baea2cc32b68089bd3e0", "commit_date": "2023-10-04T19:58:14Z", "commit_message": "mount: update root and cwd from cloneMountTree\n\nIn this case, we don't need to enumerate all tree mounts and look up pair\nmounts in the cloned tree.\n\nPiperOrigin-RevId: 570778945", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c6a1db5baec7616983b14ac06e84bee45330a9d3", "commit_date": "2023-10-04T17:52:39Z", "commit_message": "gofer: set nosuid and nodev flags when the root is remounted\n\nThese flags can be locked and mount(MS_BIND|MS_REMOUNT) fails if they are not\nset.\n\nFixes #8921\n\nPiperOrigin-RevId: 570741035", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff6258b2f66a23eac2a9a2cd13d1950832cd40e5", "commit_date": "2023-10-04T16:41:36Z", "commit_message": "Merge pull request #9450 from thundergolfer:jonathon/fix-doc-oct2\n\nPiperOrigin-RevId: 570720356", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e16f83a45c9a8c28a0e6a750d07f99f8d21a1f6b", "commit_date": "2023-10-04T05:26:46Z", "commit_message": "Return part of mount options via the syscall statfs & fstatfs.\n\nPiperOrigin-RevId: 570589224", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "677d11f22fbe194a6d2786a07a7d5295704c0c48", "commit_date": "2023-10-04T01:17:50Z", "commit_message": "Chunkify tmpfs Allocate().\n\nOn machines with really large RAM, the default tmpfs size limit (50% of RAM\nsize) can still be really large. So tmpfs permits really large fallocate\nrequests. In gVisor, there are 2 problems:\n1. Large fallocate(2) may crash the system via watchdog timeout.\n2. fallocate(2) is not interruptible by signal.\n\nIn Linux, fallocate iteratively allocates folios, while checking for\ninterrupts. See mm/shmem.c:shmem_fallocate().\n\nTo solve these problems, this patch changes tmpfs Allocate() to work in\n4 GiB chunks and checks for interrupts between chunks, which also pets the\nwatchdog. We also drop tmpfs.regularFile.dataMu between chunks to prevent other\ngoroutines waiting on dataMu from triggering a watchdog timeout.\n\nNote that this still may not fix watchdog crashes caused by other goroutines\nwaiting on tmpfs.inode.mu during a large fallocate(2).\n\nReported-by: syzbot+269e5666da366a3ef2f6@syzkaller.appspotmail.com\nSuggested-by: Jamie Liu <jamieliu@google.com>\nPiperOrigin-RevId: 570551795", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5dccaad67714a4f522a6341d257d18be0fafbf5a", "commit_date": "2023-10-04T01:04:43Z", "commit_message": "abi/linux: fix TASK_SIZE in case of 5-level paging\n\nOn x86, 5-level paging enables 56-bit userspace virtual address space.\n\nPiperOrigin-RevId: 570549277", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0adbdec504d376f1c68f2dbace18dec9dd23d55c", "commit_date": "2023-10-04T00:30:53Z", "commit_message": "fix: outdated line in debugging.md doc", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b667130795267c0afb784a9bad71a5a74e48fde0", "commit_date": "2023-10-03T22:01:49Z", "commit_message": "Clean up and re-enable process_vm_readv/writev\n\nSome fixes:\n\n* First argument of Task.CopyContext should always be the context.Context\n  derived from the currently running task, because it is used to get a\n  CopyScratchBuffer, which must be from the current task. This solved a bunch\n  of data races.\n\n* Fix logic around which process is remote and which is local. These were\n  getting mixed up.\n\n* Always read iovec structs (local and remote) from the local process's address\n  space, since they are syscall arguments. Only use the remote process address\n  space to read the memory pointed to by the remote iovecs.\n\n* Added ptrace permissions check, per linux.\n\n* Delete unused code from kernel/task_usermem.go\n\n* Rewrote tests so that we read to (write from) a subprocess, rather than the\n  other way around. So we don't need CAP_PTRACE to run the tests.\n\n* Also make tests async-signal-safe after call to fork(). I think this was the\n  source of the flakyness on linux previously.\n\nPiperOrigin-RevId: 570506366", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f5692dd20360d071edd504cb7531eb8500160f7", "commit_date": "2023-10-03T21:34:53Z", "commit_message": "`bpf`: Replace most uses of `linux.BPFInstruction` with `bpf.Instruction`.\n\n`bpf.Instruction` is the same type as `linux.BPFInstruction`, except that it\nuses the BPF instruction-to-string decoder to give a nice human-readable\nstringification.\n\nPiperOrigin-RevId: 570499020", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d5198a863bf446facdb50d48f2dae4a5e05f583", "commit_date": "2023-10-03T18:57:01Z", "commit_message": "Add IsDescendant to FilesystemImpl.\n\nIsDescendant gives the VFS layer an easy way to check if a dentry is a\ndescendant of another, which is important for some mounting procedures.\n\nThis method does not take any locks when accessing the parent, so parent\nfields need to switch to be atomic to avoid data races.\n\nPiperOrigin-RevId: 570454446", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44633287ca35e227a0644e880a9bddfb14c6b6c4", "commit_date": "2023-10-03T17:29:12Z", "commit_message": "Automated rollback of changelist 549837326\n\nPiperOrigin-RevId: 570426281", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "83cfe82ea96851637f20f24de26ca7ea5919e2f3", "commit_date": "2023-10-03T17:26:09Z", "commit_message": "Fix pivot_root to put the old root on the topmost mount stacked at put_old.\n\nPiperOrigin-RevId: 570425445", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "122923b14baccecd65b751f881d1d50700de5706", "commit_date": "2023-10-03T17:16:35Z", "commit_message": "Add mount type check in TestOverlayByMountAnnotation.\n\nThis is to ensure that the mount is displayed as an overlay to the application.\n\nPiperOrigin-RevId: 570422885", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c74f5866cb75bb5c712a69341c282da8e4920e59", "commit_date": "2023-10-03T17:07:40Z", "commit_message": "Fix circular lock that can happen during unlink.\n\nReported-by: syzbot+d93d90350a33fbd2c8b9@syzkaller.appspotmail.com\nPiperOrigin-RevId: 570420492", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e18a826d91d20409ef32cd98c9b0512aadeb93d", "commit_date": "2023-09-27T23:55:49Z", "commit_message": "`stateify`: Add `+stateify identtype` tag for identical type definitions.\n\nThis allows serialization of type definitions identical of stateifiable\nstruct types.\n\nContext: I want to add a `bpf.Instruction` library which is a type definition\nof `linux.BPFInstruction` (but with nicer helper functions), and keep its\nserializability.\n\nSample output for\n\n```go\n// +stateify savable\n// +stateify alias:linux.BPFInstruction\ntype Instruction linux.BPFInstruction\n```\n\n```go\nfunc (ins *Instruction) StateTypeName() string {\n        return \"pkg/bpf.Instruction\"\n}\n\nfunc (ins *Instruction) StateFields() []string {\n        return (*linux.BPFInstruction)(ins).StateFields()\n}\n\n// +checklocksignore\nfunc (ins *Instruction) StateSave(stateSinkObject state.Sink) {\n        (*linux.BPFInstruction)(ins).StateSave(stateSinkObject)\n}\n\n// +checklocksignore\nfunc (ins *Instruction) StateLoad(stateSourceObject state.Source) {\n        (*linux.BPFInstruction)(ins).StateLoad(stateSourceObject)\n}\n```\n\nPiperOrigin-RevId: 568999266", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7594667507d7114e142d8c19810cbfe53088be46", "commit_date": "2023-09-27T00:35:33Z", "commit_message": "Internal change.\n\nPiperOrigin-RevId: 568695436", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "485de2f6a71bace2eca4b9cc9268ad00f167f409", "commit_date": "2023-09-26T02:53:38Z", "commit_message": "test/syscalls: run tests in the single thread mode\n\nIt allows us to avoid side effects on forking new processes.\n\nPiperOrigin-RevId: 568391853", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e81e0c72a70b0ffe31dba1e5b5b3a12e18f21cad", "commit_date": "2023-09-23T07:47:37Z", "commit_message": "Add NV_MEMORY_FABRIC to nvproxy.\n\nFixes #9372\n\nPiperOrigin-RevId: 567816690", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b5dea0ea0972850900b47f63655a3c0f7e033a6d", "commit_date": "2023-09-23T02:51:10Z", "commit_message": "bazel: update bazel_gazelle to v0.33.0\n\nThis has to fix the error:\nexternal/bazel_gazelle/repo/BUILD.bazel:3:11:\n  no such package '@org_golang_x_tools//go/vcs\n\nPiperOrigin-RevId: 567774709", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "853c80007fc42ee037da7901b227ad9732d2a322", "commit_date": "2023-09-22T20:38:04Z", "commit_message": "Add library to benchmark gVisor's `seccomp-bpf` filters.\n\nThe first step to optimizing something is to measure it.\n\nThis creates a `secbench` library which can benchmark the time it takes to\nrun an application \"Profile\", which is a weighted-random set of syscall\nsequences, under a given `seccomp-bpf` filter.\n\nThe `secbench` library runs two subprocesses which run the same set of system\ncalls using this application profile. One of the subprocesses runs with the\nseccomp-bpf filter, and the other one runs without it. The library computes\nthe difference, and reports this duration as the time it takes to run the\nseccomp-bpf filter for that system call. It also reports the overall time it\ntakes to run the weighted-random set of system calls, useful as a general\nmeasure of the overhead that the application will see.\n\nPiperOrigin-RevId: 567704927", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "81b7b4aa14c2f425ce1885aa8185a1f34bbdfd24", "commit_date": "2023-09-22T19:05:49Z", "commit_message": "Merge pull request #9416 from avagin:bazel-update\n\nPiperOrigin-RevId: 567682759", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "de5271b36007f28f113db82b16d03cdb7efa0e5e", "commit_date": "2023-09-22T17:48:35Z", "commit_message": "Fix small data race in mount.\n\nReported-by: syzbot+eaf165c341800b20949c@syzkaller.appspotmail.com\nPiperOrigin-RevId: 567662206", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a277f53f250910d23534a3fc4401840008296f4d", "commit_date": "2023-09-22T17:35:43Z", "commit_message": "Fix atomicOTrunc implementation in fusefs.\n\nIf FUSE connection does not support atomic O_TRUNC and application calls\nopen(O_TRUNC), FUSE should truncate the file *first* (without a file handle)\nand then subsequently open the file with O_TRUNC filtered out.\n\nWe were truncating the file after open(). There were 2 issues with it:\n1. We were using the inode's file handle, which may be invalid at this point\n   because it is donated to the first FD (to save an open(2) RPC I believe)\n   and that FD can close it.\n2. The truncate() was being done with fhOptions.useFh = true. However,\n   sometimes the file handle might be read-only causing truncate to fail.\n\nFixed both issues by moving the truncate above open() and making it not use any\nfile handles.\n\nPiperOrigin-RevId: 567658664", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9794276875d1e8ebadfb6d97760c2847e36ef7b0", "commit_date": "2023-09-22T05:33:21Z", "commit_message": "bazel: update golang to 1.21.1\n\nand update a few other packages.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "19250b87ede7311b70238dcd7329e3096a1b49d5", "commit_date": "2023-09-22T01:54:59Z", "commit_message": "Use the last NVIDIA_VISIBLE_DEVICES value from spec.\n\nAs described in #9401, we should use the last value of NVIDIA_VISIBLE_DEVICES\nfrom the container spec to emulate nvidia-container-runtime-hook correctly.\n\nFixes #9401\n\nPiperOrigin-RevId: 567480580", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fcacbf17c6171bcc3d406bb378b95b7c18dc82ce", "commit_date": "2023-09-22T01:29:12Z", "commit_message": "buildkite: build arm64 docker images on arm64 agents\n\nPiperOrigin-RevId: 567476463", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "05b7c55c13204f3a3b42ccf17e8252015b40353d", "commit_date": "2023-09-21T23:07:04Z", "commit_message": "Do not interpret GPU index as GPU device minor.\n\nThere are 3 ways to identify a GPU device that are relevant:\n1. GPU Index: This is the index of the GPU in PCIe ordering.\n2. GPU Device Minor: This is the minor device number. The GPU device number\n   on the system is 195:minor.\n3. /dev/nvidia#: The GPU can be accessed via the device mounted at this path.\n\nnvproxy incorrectly assumed that all 3 identifiers are the same. In reality,\nonly (2) and (3) are always the same. (1) can differ, as demonstrated in #9389.\n\nSo passthrough the value of `NVIDIA_VISIBLE_DEVICES` to `nvidia-container-cli`\nwhile invoking the `configure` command via the `--devices` flag. The CLI uses\nNVML to figure out the GPU Index -> GPU Device mapping and mounts the right\ndevices into the containers root filesystem at /container/rootfs/dev/. We\nsubsequently scan this directory to *infer* the GPU devices exposed to the\ncontainer. This information in plumbed through various places and appropriate\nvirtualized gVisor devices are created.\n\nAn unintended benefit of this is that identifying GPUs via GPU UUIDs now works!\nEarlier we only accepted GPU index. Now we can just pass through GPU UUID to\nthe CLI and it will deal with it. So `docker run --gpus=\"device=GPU-4e716e7d\"\nworks now.\n\nAlternatives considered:\n1. Parsing `nvidia-container-cli info` output to figure out index -> minor\n   mapping. However, this is a costly operation (as reported in #9215) which\n   can take 2-3 seconds.\n2. Using NVML in runsc via nvidia/go-nvml library. Apart from the downsides of\n   adding another third party dependency, this entails that we duplicate logic\n   from nvidia-container-cli into runsc (mainly logic around\n   src/cli/common.c:select_devices()). This is technical debt and won't age\n   well (will require us to mimic updates to CLI into runsc).\n\nFixes #9389\n\nPiperOrigin-RevId: 567443164", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae1294b4358c10e453b792db1747233abbe6169c", "commit_date": "2023-09-21T18:42:16Z", "commit_message": "Internal change.\n\nPiperOrigin-RevId: 567370524", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f744f443dd7d24ad675fa5c82f3998e624d696fd", "commit_date": "2023-09-21T17:34:27Z", "commit_message": "Check before attempting to mount an anon mountpoint.\n\nReported-by: syzbot+9575c881cd3f35eea483@syzkaller.appspotmail.com\nPiperOrigin-RevId: 567349098", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "97f276fb2aecc8975634234ca9b11cf2f0e1e479", "commit_date": "2023-09-21T17:23:03Z", "commit_message": "Merge pull request #9409 from btw616:misc-cleanups\n\nPiperOrigin-RevId: 567345635", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "222147462633e9ef5a34af89d5cc6050c81b0367", "commit_date": "2023-09-21T17:06:10Z", "commit_message": "Merge pull request #9406 from avagin:systrap-pdeathsig\n\nPiperOrigin-RevId: 567339130", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "944d4185e4bdc4f07a255bc848c66d00f9da1938", "commit_date": "2023-09-21T05:23:40Z", "commit_message": "Minor filesystem cleanups\n\n- Update the remaining platform.File references in comments and\n  documentation. platform.File has been moved in memmap by commit\n  f347a578b79c (\"Move platform.File in memmap\").\n\n- Remove redundant bit operations in statTo in tmpfs. STATX_SIZE and\n  STATX_BLOCKS has been set at the beginning of the function, there\n  is no need to do it again for regular files.\n\n- Change \"\\tmp\" to \"/tmp\" in pathname, as '\\' is not a valid path\n  delimiter in Linux. \"/tmp\" looks better.\n\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "814eaf3b77ef695ffd00b83a9db7e1ae6d494d1e", "commit_date": "2023-09-21T03:19:36Z", "commit_message": "systrap: set PDEATHSIG right after forking a sysmsg thread\n\ncontainer_test:TestGoferExits fails by timeout, because there are some\nsysmsg threads survived sandbox process death. When we fork a new sysmsg\nthread, it is traced with PTRACE_O_EXITKILL, so we need to set PDEATHSIG\nbefore detaching from it.\n\nSigned-off-by: Andrei Vagin <avagin@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1531147bf2e9b63f9bb068d808582c1ab5cc022d", "commit_date": "2023-09-20T20:06:08Z", "commit_message": "Automated rollback of changelist 564000728\n\nPiperOrigin-RevId: 567054388", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1c8e91d04c692978b50c1bad48f7c41193fa0922", "commit_date": "2023-09-20T19:58:03Z", "commit_message": "fs/overlay: create the \"work\" directory in `workdir`\n\nLinux creates the \"work\" directory in `workdir`.  Docker calls chown on it and\nfails if it doesn't exist.\n\nPiperOrigin-RevId: 567053404", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "02f70b5df083b640c427290ba2229bcdfe486ad9", "commit_date": "2023-09-20T19:38:39Z", "commit_message": "Implement a subset of `keyctl(2)` and `keyrings(7)` for better Docker support.\n\nThe intention of this change is to cover a sufficient surface to accommodate\nthe use of running Docker within gVisor, rather than a full implementation.\n\nThis implements the following features:\n\n  - Keys as a first-class concept in the kernel.\n  - Tracking keys in user namespaces.\n  - Task session keyrings: possession, inheritance.\n  - Key permission enforcement.\n  - The following `keyctl(2)` operations:\n    - `KEYCTL_GET_KEYRING_ID`\n    - `KEYCTL_DESCRIBE`\n    - `KEYCTL_JOIN_SESSION_KEYRING`\n    - `KEYCTL_SETPERM`\n\nNotably, this does not implement:\n\n  - The ability to actually add any keys other than the session keyring\n    (which does not hold any cryptographic key data).\n  - Other special keyrings (thread keyring, process keyring, user session\n    keyring, etc.).\n  - Lots of `keyctl(2)` operations.\n  - Key expiration.\n  - Key garbage collection. Keys live until their user namespace is destroyed.\n    However, each user namespace is limited to 200 keys, so memory growth is\n    bounded.\n  - `add_key(2)`\n  - `request_key(2)`\n\n... However, this makes design choices that seem odd given the limited scope\nof this change, but make sense when taking into account the desire to\neventually accommodate them in the future. For example, there are many\n`switch` statements with only one option for session keyrings, which would get\nmore options when adding support for other special keyrings. Similarly, the\nsignature of `PossessedKeys` takes in all 3 special \"possessed\" keyrings, but\ncurrently only ever gets the session keyring as non-nil.\n\nPiperOrigin-RevId: 567047896", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "81a42184e191be69f1624ee3481e66049e40da12", "commit_date": "2023-09-20T18:41:32Z", "commit_message": "Reorder nvidia driver versions.\n\nPiperOrigin-RevId: 567031594", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "539a8464f35e16892b31df860fc9c2a798af68d1", "commit_date": "2023-09-20T17:39:20Z", "commit_message": "Qualify NVIDIA 525.125.06 driver version.\n\nDriver version has been qualified on GKE w/ nvidia's basic workload\nand pytorch benchmarks.\n\nPiperOrigin-RevId: 567009651", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4cd842b20a3ce91952f85c4ef6910b0e87917c65", "commit_date": "2023-09-19T21:51:59Z", "commit_message": "Automated rollback of changelist 557941259\n\nPiperOrigin-RevId: 566749598", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "640ec03f92ade885c2ee3b4829039dd08f9adf43", "commit_date": "2023-09-19T21:10:52Z", "commit_message": "Fix mount table corruption.\n\nBefore this, mount propagation could cause multiple mounts to have the same\nparent and mountpoint, violating the mountTable contract. Now, when there's\nan existing mount at a propagation point, it's added as a child of the new\nmount.\n\nPiperOrigin-RevId: 566738099", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "949461f2b3624329b4c02744e10c631dabd53eaa", "commit_date": "2023-09-19T20:46:56Z", "commit_message": "Automated rollback of changelist 558922801\n\nPiperOrigin-RevId: 566731014", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "181a57866ad0fab5f50e139e789a19314e7e8eaa", "commit_date": "2023-09-19T19:37:33Z", "commit_message": "Add ABI for `keyctl(2)`.\n\nPiperOrigin-RevId: 566711348", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "50c62321fdd077c3cad9c420cf2776047ffa89a7", "commit_date": "2023-09-19T19:14:19Z", "commit_message": "KVM: Remove `_` prefix from KVM `ioctl` constants.\n\nThis is useful to be able to refer to them from external packages, such as\nto represent the `ioctl(2)` syscall profile that the Sentry has with the\nKVM platform.\n\nPiperOrigin-RevId: 566705114", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8675708cb8356da419398863e9f997b5cc437bf0", "commit_date": "2023-09-19T17:48:35Z", "commit_message": "Handle arbitrarily large Fuse Dirent Namelen.\n\nIf FUSEDirent.Namelen is larger than the remaining payload size, then the\ndirent is probably invalid. We should skip it.\n\nPiperOrigin-RevId: 566678679", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8a7617aed21c3d17d8a2570d7e22cf27c2692e17", "commit_date": "2023-09-18T23:46:52Z", "commit_message": "Move pytorch benchmark to GPU directory.\n\nThe pytorch image is huge, about 7-8 GB. This doesn't\nneed to be downloaded with the other benchmark images. Move\nit to a GPU directory to speed up benchmark runs.\n\nPiperOrigin-RevId: 566449296", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "313485846896a73bb39d985a221b1aa46e85dc8a", "commit_date": "2023-09-16T03:02:41Z", "commit_message": "Tweaks to containerd tests and helpers.\n\nPiperOrigin-RevId: 565839195", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d81768d4c8d29d2a2e0880f615d04e1dd79c88c7", "commit_date": "2023-09-16T02:44:22Z", "commit_message": "Remove peer credential check from control server.\n\nThe peer credential check worked by querying the peer's UID using SO_PEERCRED.\nHowever, when sandbox is configured with custom UID/GID mappings, which it is\nin the following situations:\n1. When not using directfs, sandbox has a mapping of only `65534:65534:1`. So\n   all other non-65534 UIDs are unmmaped.\n2. When using directfs with userns-remap. The sandbox has the same UID/GID\n   mapping as the container.\n\nIn these cases, when the root user tries to connect, the host root user is not\nmapped. Unmapped IDs are translated to overflowuid/gid, which happens to\ndefault to 65534. This leads to unexpected results:\n- Without directfs, this check allows any connection, because sandbox is also\n  running as nobody/65534.\n- In the directfs+userns-remap case, all connections are denied.\n\nThis check doesn't really enforce anything. Hence remove it.\n\nThe real enforcement mechanism is the file mode of the unix domain socket over\nwhich the connection happens. The socket file's mode depends on umask, which\ndefaults to 022. Hence only the user which creates the sandbox via\n`runsc create` has write permission on this socket. So only the sandbox creator\nor root can connect to the sandbox, as intended.\n\nFixes #9356\n\nPiperOrigin-RevId: 565836818", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5ff1e908156acadf98e2473c349f879ff54ec7e7", "commit_date": "2023-09-15T21:58:29Z", "commit_message": "Add state:\"nosave\" annotation to nvproxy.objsMu.\n\nWith this, checkpoint command succeeds on nvproxy containers.\n\nUpdates #9363.\n\nPiperOrigin-RevId: 565786118", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "36b9b19daca9e7d723388132e787e3010aa30711", "commit_date": "2023-09-15T20:13:26Z", "commit_message": "Do not use abstract sockets for control server.\n\nAny user can connect to an abstract socket. See \"Abstract sockets\" section in\nunix(7). Filesystem UDS requires write permission to connect to. Hence, file\nmode is used to protect the server.\n\nPiperOrigin-RevId: 565759783", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8c40c16ba80e487c1fc6d24f539f33b902e8aca4", "commit_date": "2023-09-15T18:41:00Z", "commit_message": "Exempt proposal issues from being closed as stale.\n\nProposals usually have more longevity and contain interesting ideas.\nAlso clean up \"new feature\" and \"enhancement\" from the list. Those labels don't\nexist in gVisor repo.\n\nPiperOrigin-RevId: 565735357", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d353f07ba5bb62d0b58ba741e3f6d88774c35a79", "commit_date": "2023-09-15T18:19:57Z", "commit_message": "Merge pull request #9381 from testwill:typo\n\nPiperOrigin-RevId: 565729064", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a99bf4a8ad59d17cd039837dc5da2f88f86cd50c", "commit_date": "2023-09-15T06:47:10Z", "commit_message": "fix: successfully typo", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b192bf37363f5ad18a533cb19448a32326613316", "commit_date": "2023-09-15T03:56:26Z", "commit_message": "Handle large control socket paths.\n\nUDS connect and bind fail when the socket path being used is more than 107 in\nlength. Shorten the path using procfs: \"/proc/self/fd/{parentFD}/{sockName)\"\n\nThis avoids falling back to using abstract sockets in some instances.\n\nSuggested-by: Andrei Vagin <avagin@google.com>\nPiperOrigin-RevId: 565557006", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e01d4387d2e4af562201ba93c8e93074836ae130", "commit_date": "2023-09-15T00:26:31Z", "commit_message": "Merge pull request #9377 from milantracy:codeqlstatus\n\nPiperOrigin-RevId: 565522379", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "29d82338fc2a5a19b99f28f2622439d31bd4b8fb", "commit_date": "2023-09-14T22:34:53Z", "commit_message": "Enhance stale action with more labels and a smaller close window.\n\nThe action also ignores a few more labels.\n\nPiperOrigin-RevId: 565494794", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f7da79cbce2a608a225ab5e056f710347ff0262", "commit_date": "2023-09-14T22:30:55Z", "commit_message": "Add CodeQL status badge for its visibility.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73f4b821a1696a215590417549fbea03fe07a8f5", "commit_date": "2023-09-14T21:53:26Z", "commit_message": "Change namespace cloning so that it clones mounts depth-first.\n\nThis saves on allocations.\n\nThis change is a subset of the changes in cl/563529897 and cl/563752003.\nCommitting this change in more discrete parts will help narrow down the\ncauses of b/299603749.\n\nPiperOrigin-RevId: 565484026", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c0a9bb7b3ab6514323b52e81a5bd52210bbed490", "commit_date": "2023-09-14T20:25:12Z", "commit_message": "Additionally expect the custom tos/tclass in TOS_TCLASS_EXPECT_DEFAULT case.\n\nPiperOrigin-RevId: 565458888", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad68fe1d68c5ab7adcb85aec313dc48f2f4080a7", "commit_date": "2023-09-14T18:04:00Z", "commit_message": "images: use gcr.io/syzkaller/syzbot as the base for syzkaller images\n\ngcr.io/syzkaller/env isn't built for ARM64.\n\nPiperOrigin-RevId: 565419016", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3dda3741d8eb531b9f284e4d70d86c952bce94c8", "commit_date": "2023-09-13T19:01:52Z", "commit_message": "Fix CodeQL so that it does not fail the github check.\n\nPiperOrigin-RevId: 565119657", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9117572ae02ffe41efd7ea51e64d4a4f413b88e1", "commit_date": "2023-09-13T17:25:05Z", "commit_message": "Add \"type: enhancement\" to labels protected from the stale action.\n\nPiperOrigin-RevId: 565089338", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b86d06d7e51b1e70c2c627e04c5300fa035fcd81", "commit_date": "2023-09-13T00:37:50Z", "commit_message": "Merge pull request #9215 from ekzhang:ekzhang/perf-nvidia-cli-info\n\nPiperOrigin-RevId: 564882593", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "94500414c9170f00d4351339bfd87683e02674f3", "commit_date": "2023-09-12T18:41:11Z", "commit_message": "Merge pull request #9359 from milantracy:codeqlconfig\n\nPiperOrigin-RevId: 564786128", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1910a4577f0183bf444660985f30dc78ef3a74ca", "commit_date": "2023-09-12T18:29:05Z", "commit_message": "cgroupfs: do not return errors from strconv.ParseInt() to write()\n\nArbitrary errors are not convertible to errnos for syscall return and cause the\nsentry to panic.\n\nPiperOrigin-RevId: 564782206", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6d06f309ed5d76dc4c085ab88166f8f5a6161b04", "commit_date": "2023-09-12T17:23:03Z", "commit_message": "Increase stale action ops per run.\n\nRight now we're capped at 30, but have 569 open issues and 192 open PRs.\n\nPiperOrigin-RevId: 564760282", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8758e992c5ca892be1830534a62cc85298061016", "commit_date": "2023-09-11T19:51:18Z", "commit_message": "perf: Remove call to nvidia-container-cli info\n\nThis call is repeated on every container startup sequence, but it is expensive, consistently taking between 2-3 seconds to run each time. This adds a significant amount of startup latency to every container. From `strace` output, the main issue appears to be a call to `openat(AT_FDCWD, \"/dev/nvidia0\", O_RDWR|O_CLOEXEC)`. The first time this is called, it creates a new open device file descriptor and blocks for 2 seconds while doing so. This was measured on a `g4dn.2xlarge` instance on AWS, running a Tesla T4 GPU.\n\nFor comparison, the `nvidia-container-prestart-hook` for runc also runs `nvidia-container-cli` during container boot, but it only calls it once for the `configure` command. gVisor appears to call it twice, once for `info` and then for `configure`.\n\nBy removing the `info` call, or at least only running it when the GPU device files are not already present on the host, GPU container startups can be 2-3 seconds faster.\n\nDoes this sound reasonable? I'm not actually familiar with why the `/dev/nvidia0` file takes 2-3 seconds to open, or why GPU device files need to be explicitly loaded. But I tested the change, and gVisor nvproxy still works.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8f2bb6d21ba55b13d6356cb78d7039b2b0dfe51", "commit_date": "2023-09-11T19:01:06Z", "commit_message": "Don't build tensorflow image on ARM.\n\nThe upload image test is failing due to the tensorflow image not being\nsupported on ARM.\n\nPiperOrigin-RevId: 564458336", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1afe6d14e767dd359840b29a55fb849b5a2efb74", "commit_date": "2023-09-11T18:41:47Z", "commit_message": "Add initial CodeQL config for gVisor.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb4410f44e3291f7aa34a2655cd683cac7d149cb", "commit_date": "2023-09-09T13:50:38Z", "commit_message": "Rollback 6ceceae9385c and 206e88db3653.\n\nSyzkaller is reporting crashes relating to changes made by these commits.\nRolling back for now. Should be rolled forward with fix.\n\nReported-by: syzbot+9868746b8b0f679da548@syzkaller.appspotmail.com\nPiperOrigin-RevId: 564000728", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "717539fbd78ae05798fa00712556ec15a55b7156", "commit_date": "2023-09-08T20:57:42Z", "commit_message": "Return user_mss if user_mss is set and socket is unconnected.\n\nHas the same effect as Linux commit 34dfde4ad87b (\"tcp: Return user_mss for\nTCP_MAXSEG in CLOSE/LISTEN state if user_mss set\").\n\nUpdated test to accept both values (default and user set) so test works on\nnewer and older kernels.\n\nPiperOrigin-RevId: 563844012", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad275a100e58195f8e4f441befba3327be51ff04", "commit_date": "2023-09-07T23:28:00Z", "commit_message": "Fix debug builds.\n\nThis change also adds instructions for using a debugger with syscall tests.\n\nFixes #9039\n\nPiperOrigin-RevId: 563576842", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "206e88db3653b4de668a5a4f51406fc6967150df", "commit_date": "2023-09-07T20:37:20Z", "commit_message": "Fix cwd/root update method during namespace cloning.\n\nThe previous implementation incorrectly assumed order would be preserved\nin the map.\n\nReported-by: syzbot+da2bc2bee99641f22de4@syzkaller.appspotmail.com\nPiperOrigin-RevId: 563529897", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "27d7936e933a89c0b55c20966a13ffb40ad2abca", "commit_date": "2023-09-07T17:08:15Z", "commit_message": "Fix github workflow test.\n\nPiperOrigin-RevId: 563466164", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c215e67a50f8f6f4d51072318571e0ab54562bc8", "commit_date": "2023-09-07T00:27:02Z", "commit_message": "Let devices cgroup add/remove rules via devices.allow and devices.deny.\n\nPiperOrigin-RevId: 563261158", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6ceceae9385c44d639a2aebc78bf3b4a8e970e05", "commit_date": "2023-09-06T22:43:02Z", "commit_message": "Abstract mount tree cloning into its own mount method.\n\nWhen copying a mount tree, new child mounts are added to a mount's\npending list. Each of these mounts has its pending mountpoint already set\nwith setKey. Eventually this method will be used to enable recursive binds.\n\nPiperOrigin-RevId: 563236298", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2319f958fc930d0a0980e094928bc233976b8992", "commit_date": "2023-09-06T21:58:03Z", "commit_message": "Automated rollback of changelist 536743330\n\nPiperOrigin-RevId: 563224104", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8aee177900da1a2a59f7cc6ca79d688677394008", "commit_date": "2023-09-06T21:06:31Z", "commit_message": "Add more justification about why shared mount propagation is not allowed.\n\nUpdates #9324\n\nPiperOrigin-RevId: 563208592", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4146284b601b8e7c551bf172c5fc1f2c7cb972c5", "commit_date": "2023-09-06T20:58:08Z", "commit_message": "Merge pull request #9339 from kevinGC:tcsetsf2\n\nPiperOrigin-RevId: 563207341", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0230a371c23bd4d750e7e60e0e4bf7223ef7087f", "commit_date": "2023-09-06T20:29:19Z", "commit_message": "Merge pull request #9336 from thundergolfer:jonathon/dev-pts-eof-handling\n\nPiperOrigin-RevId: 563199056", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e550bfbd052ddbec0ab214aa1991fad711cf013b", "commit_date": "2023-09-06T20:13:19Z", "commit_message": "Have lgetxattr return ENODATA.\n\nIt is a workaround to lgetxattr/lsetxattr working with security.capacity when running docker in gvisor.\n\nPiperOrigin-RevId: 563194162", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f22d854395ff29a377c5f4fb5100635b9856bb4e", "commit_date": "2023-09-06T19:30:10Z", "commit_message": "Merge pull request #9327 from kevinGC:benchmarkxdp\n\nPiperOrigin-RevId: 563182220", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d30c39364daa7c6b5cca3af7fd9b5935409a6f30", "commit_date": "2023-09-06T17:54:41Z", "commit_message": "Split the ring implementation into its own package.\n\nThe ring data structure's requires it's own implementation of Entry. With\nthe new version you can more easily be part of multiple rings at once. Also,\na user who wants to use ilist probably doesn't need ring as well, so it makes\nsense to separate the two.\n\nPiperOrigin-RevId: 563151782", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c584a1a435d616ec91a58d5cdba892b6bb000128", "commit_date": "2023-09-06T17:05:13Z", "commit_message": "Add a github workflow that marks issues and PRs as stale.\n\nPiperOrigin-RevId: 563136967", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c227d185a4c513aa71eff950506a257d7f95ec8a", "commit_date": "2023-09-06T02:15:45Z", "commit_message": "Emit SentryTcpListenEvent when the application listens on a tcp port.\n\nPiperOrigin-RevId: 562957239", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8c399a0930387c98aeebe073ead309bffbccf01", "commit_date": "2023-09-06T01:18:18Z", "commit_message": "Fix EOF (^D) handling in devpts (partially addr #9333)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e0029cc0ff4b85479177a82e13809b6501809272", "commit_date": "2023-09-05T22:51:21Z", "commit_message": "A few fixes to run tests on 6.2+ kernels\n\n* disable broken socket_inet_loopback test // Lucas Manning\n* disable lseek tests on anon inodes. They have been broken by\ncommit e7478158e1378325907edfdd960eca98a1be405b\nDate:   Wed Jun 29 15:06:57 2022 +0200\n    fs: clear or set FMODE_LSEEK based on llseek function\n\n* don't check memory.kmem.limit_in_bytes, it has been deprecated and dropped:\ncommit 86327e8eb94c52eca4f93cfece2e29d1bf52acbf\nDate:   Tue Jul 4 13:52:40 2023 +0200\n    memcg: drop kmem.limit_in_bytes\ncommit 58056f77502f3567b760c9a8fc8d2e9081515b2d\nDate:   Fri Nov 5 13:37:44 2021 -0700\n    memcg, kmem: further deprecate kmem.limit_in_bytes\ncommit 0158115f702b0ba208ab0b5adf44cae99b3ebcc7\nDate:   Mon Sep 23 15:37:22 2019 -0700\n    memcg, kmem: deprecate kmem.limit_in_bytes\nPiperOrigin-RevId: 562915457", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7928ff6f0c5ce47b3a9a4e0773ca68a5df6d7c93", "commit_date": "2023-09-05T16:53:50Z", "commit_message": "tty: enable `TCSETSF`\n\nWhile there is a difference between flavors of this ioctl (`TCSETS`,\n`TCSETSF`, `TCSETSW`), in practice it seems not to matter. We should let\nusers call `TCSETSF` and can implement those differences if necessary.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}], "master": [{"commit_oid": "d6e83e2802f91ffdf9b473b5eb05ba70ac07d74c", "commit_date": "2023-10-18T06:20:17Z", "commit_message": "Add nvidia installer tool for installing NVIDIA drivers in buildkite tests.\n\nPiperOrigin-RevId: 574371646", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0fd906d7e0793ee586f97524214505928ed32b7c", "commit_date": "2023-10-17T23:44:07Z", "commit_message": "Fix the sandbox memory usage via GetContainerMemoryUsage API.\n\nThe total(sandbox) memory usage using the GetContainerMemoryUsage API will\nreturn incorrect usage when called before calling the API for each individual\ncontainers in the sandbox. This is because the memory usage for the containers\ncgroup is not updated while calculating the total usage. This CL fixes it by\nupdating the usage for every child cgroup, which will return the correct memory\nusage for the parent cgroup.\n\nPiperOrigin-RevId: 574300913", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "707ac55a05d7b9332f6f1199849b42306a70ba7c", "commit_date": "2023-10-17T21:40:18Z", "commit_message": "inet: don't reuse names from the abstract socket namespace map\n\n* If a name is in the map, it means there is a socket associated with it. When\n  a socket is destroyed, its name is removed from the map. If we bind another\n  socket to the same name, its destroy will trigger the panic:\n  panic: expected socket to exist at ... in abstract socket namespace\n\n* We use TryIncRef/DecRef to check a socket, DecRef may destroy the socket but\n  it requires to take AbstractSocketNamespace mutex that is already taken.\n\nPiperOrigin-RevId: 574268647", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "db68112c06783248d4630b3077c03de8c1490bca", "commit_date": "2023-10-17T21:25:28Z", "commit_message": "netstack: further optimize checksumming\n\n- Restructure calculateChecksumNoASM() to consistently handle misaligned\n  inputs: special-case inputs less than 8 bytes in size, otherwise align the\n  buffer address to 8 bytes before checksumming in bulk. This avoids\n  significant performance degradation on misaligned inputs due to fallback to\n  unrolledCalculateChecksum().\n\n- Sum up to 64 bytes per loop iteration in calculateChecksumNoASM(), as in\n  unrolledCalculateChecksum(). This significantly improves performance for\n  large inputs.\n\n- Don't plumb carry between blocks in calculateChecksumNoASM(). On x86, this is\n  significantly faster because many instructions clobber the carry flag, so\n  saving it requires extra overhead; on arm64, this has minimal effect on the\n  generated code (the compiler inserts an extra useless copy from the zero\n  register to a temporary).\n\n- Replace the folding of uint64 accumulator to uint16 checksum with a\n  branchless equivalent, which is ~2ns/checksum faster on average due to\n  avoiding an unpredictable loop.\n\n- Fix calculateChecksumNoASM() on big-endian architectures.\n\n- Delete unrolledCalculateChecksum(), which is now unused.\n\nBefore these changes, calculateChecksumAMD64() is approximately twice as fast\nas calculateChecksumNoASM(). After these changes, calculateChecksumNoASM() is\nfaster than calculateChecksumAMD64():\n\n```\ngoos: linux\ngoarch: amd64\npkg: pkg/tcpip/checksum/checksum\ncpu: Intel(R) Xeon(R) CPU @ 2.80GHz\n                           \u2502 checksum_baseline \u2502         checksum_experiment         \u2502\n                           \u2502      sec/op       \u2502   sec/op     vs base                \u2502\nChecksum/checksum_64-48            10.50n \u00b1 0%   10.10n \u00b1 0%   -3.86% (p=0.000 n=10)\nChecksum/checksum_128-48           13.72n \u00b1 0%   12.16n \u00b1 0%  -11.37% (p=0.000 n=10)\nChecksum/checksum_256-48           22.80n \u00b1 0%   16.31n \u00b1 0%  -28.48% (p=0.000 n=10)\nChecksum/checksum_512-48           39.92n \u00b1 0%   24.96n \u00b1 0%  -37.47% (p=0.000 n=10)\nChecksum/checksum_1024-48          81.34n \u00b1 0%   44.26n \u00b1 2%  -45.58% (p=0.000 n=10)\nChecksum/checksum_1500-48         119.70n \u00b1 1%   65.05n \u00b1 2%  -45.65% (p=0.000 n=10)\nChecksum/checksum_2048-48         157.30n \u00b1 0%   86.65n \u00b1 0%  -44.91% (p=0.000 n=10)\nChecksum/checksum_4096-48          309.5n \u00b1 0%   172.4n \u00b1 3%  -44.30% (p=0.000 n=10)\nChecksum/checksum_8192-48          615.0n \u00b1 0%   348.0n \u00b1 0%  -43.42% (p=0.000 n=10)\nChecksum/checksum_16384-48        1222.5n \u00b1 0%   690.8n \u00b1 0%  -43.49% (p=0.000 n=10)\nChecksum/checksum_32767-48         2.447\u00b5 \u00b1 0%   1.381\u00b5 \u00b1 0%  -43.55% (p=0.000 n=10)\nChecksum/checksum_32768-48         2.442\u00b5 \u00b1 0%   1.381\u00b5 \u00b1 0%  -43.48% (p=0.000 n=10)\nChecksum/checksum_65535-48         4.883\u00b5 \u00b1 0%   2.933\u00b5 \u00b1 0%  -39.94% (p=0.000 n=10)\nChecksum/checksum_65536-48         4.877\u00b5 \u00b1 0%   2.935\u00b5 \u00b1 0%  -39.82% (p=0.000 n=10)\ngeomean                            260.6n        161.9n       -37.88%\n```\n\nThus, use calculateChecksumNoASM() on all architectures and rename it to\ncalculateChecksum().\n\n---\n\nNote: As of this writing, calculateChecksumNoASM() is still ~7% slower than an\nequivalently-optimized x86 assembly implementation, for three main reasons:\n\n1. The Go compiler emits separate MOV memory-to-register and ADD/ADC\n   instructions rather than using memory operands for the latter.\n\n2. For statements of the form `buf = buf[1:]`, updating the slice data pointer\n   takes ~5 instructions instead of 1, because the compiler avoids incrementing\n   the pointer if the resulting slice length is 0 (such that the pointer would\n   point outside of the underlying array). This overhead can be avoided by\n   using uintptr and runtime.KeepAlive(), but doing so worsens problem (1):\n   replacing `*(*uint64(unsafe.Pointer(&buf[8])))` with\n   `*(*uint64(unsafe.Pointer(addr+8)))` causes the compiler to split each MOV\n   into LEA + MOV.\n\n3. The faster form of reduce() described in that function is implementable in\n   assembly.\n\nThus, we can add the optimized x86 assembly implementation back if desired.\n\n---\n\n`GOOS=linux GOARCH=mips64 go test -exec qemu-mips64 ./...` fails before this\nCL, since the \"bitslib\" implementation, i.e. calculateChecksumNoASM(), is\nbroken on big-endian architectures. After this CL:\n```\nok      gvisor.dev/gvisor/pkg/tcpip/checksum    125.970s\n```\n\nPiperOrigin-RevId: 574264329", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a25f2ebb2c8d4d317115598babb3f585a4c8515", "commit_date": "2023-10-17T20:15:22Z", "commit_message": "Remove duplicate RandomizeBuffer implementation from socket util.\n\nInstead use the one from test_util, which uses a more random seed for rand_r().\n\nSuggested-by: Jamie Liu <jamieliu@google.com>\nSuggested-by: Andrei Vagin <avagin@google.com>\nPiperOrigin-RevId: 574243850", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "669edba5d9f49a8ce8b895825c0306445b5c8939", "commit_date": "2023-10-17T17:54:31Z", "commit_message": "`bpf`: Add benchmark for interpreter speed.\n\nThis is a very hot path, as it is used for packet filtering and all syscalls\nof applications that set a seccomp-bpf filter on themselves.\n\nThis is useful to quantify the benefit of removing its use of interfaces,\nand in the future if anything else can be done to improve it further.\n\nInitial data:\n\n```\n            \u2502   initial   \u2502\n            \u2502   sec/op    \u2502\nInterpreter   26.31n \u00b1 0%\n```\n\nPiperOrigin-RevId: 574201377", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e69b01c3a8f30967170b3c8f1af7412762068781", "commit_date": "2023-10-17T02:16:26Z", "commit_message": "Add command-line tool to quickly dump the Sentry BPF program.\n\nPiperOrigin-RevId: 573994110", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "15fdd74e5c5d2558317733cdd4fc62764439e6bb", "commit_date": "2023-10-16T20:46:17Z", "commit_message": "Limit SelectAllEvents benchmark to 512 FDs\n\n...since `select` only supports FD values up to 1024 and creating 1024\nevent FDs will result in FD values that are greater than 1024 because\nof the initial set of FDs that exist for most programs (stdin, stdout,\nstderr).\n\nhttps://www.man7.org/linux/man-pages/man2/select.2.html\n\nPiperOrigin-RevId: 573916775", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2165031c02a50e3507c50a1ccafa8a51fe44d04a", "commit_date": "2023-10-16T18:00:20Z", "commit_message": "Merge pull request #9524 from avagin:deps\n\nPiperOrigin-RevId: 573864854", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4f3f5d84125db0c511b2e1e44b0fe3c6e7ca6f45", "commit_date": "2023-10-16T17:50:58Z", "commit_message": "Fix sync.SeqCount.ReadOk() on non-x86 architectures.\n\nsync.SeqCount relies on the following memory orderings:\n\n- All stores following BeginWrite() in program order happen after the atomic\n  read-modify-write (RMW) of SeqCount.epoch. In the Go 1.19 memory model, this\n  is implied by atomic loads being acquire-seqcst.\n\n- All stores preceding EndWrite() in program order happen before the RMW of\n  SeqCount.epoch. In the Go 1.19 memory model, this is implied by atomic stores\n  being release-seqcst.\n\n- All loads following BeginRead() in program order happen after the load of\n  SeqCount.epoch. In the Go 1.19 memory model, this is implied by atomic loads\n  being acquire-seqcst.\n\n- All loads preceding ReadOk() in program order happen before the load of\n  SeqCount.epoch. The Go 1.19 memory model does not imply this property.\n\nThe x86 memory model *does* imply this final property, and in practice the\ncurrent Go compiler does not reorder memory accesses around the load of\nSeqCount.epoch, so sync.SeqCount behaves correctly on x86.\nHowever, on ARM64, the instruction that is actually emitted for the atomic load\nfrom SeqCount.epoch is LDAR:\n\n```\ngvisor/pkg/sentry/kernel/kernel.SeqAtomicTryLoadTaskGoroutineSchedInfo():\ngvisor/pkg/sentry/kernel/seqatomic_taskgoroutineschedinfo_unsafe.go:34\n  56371c:       f9400025        ldr     x5, [x1]\n  563720:       f9400426        ldr     x6, [x1, #8]\n  563724:       f9400822        ldr     x2, [x1, #16]\n  563728:       f9400c23        ldr     x3, [x1, #24]\ngvisor/pkg/sentry/kernel/seqatomic_taskgoroutineschedinfo_unsafe.go:36\n  56372c:       d503201f        nop\ngvisor/pkg/sync/sync.(*SeqCount).ReadOk():\ngvisor/pkg/sync/seqcount.go:107\n  563730:       88dffc07        ldar    w7, [x0]\n  563734:       6b0400ff        cmp     w7, w4\n```\n\nLDAR is explicitly documented as not implying the required memory ordering:\nhttps://developer.arm.com/documentation/den0024/latest/Memory-Ordering/Barriers/One-way-barriers\nConsequently, SeqCount.ReadOk() is incorrectly memory-ordered on weakly-ordered\narchitectures. To fix this, we need to introduce an explicit memory fence.\n\nOn ARM64, there is no way to implement the memory fence in question without\nresorting to assembly, so the implementation is straightforward. On x86, we\nintroduce a compiler fence, since future compilers might otherwise reorder\nmemory accesses to after atomic loads; the only apparent way to do so is also\nby using assembly, which unfortunately introduces overhead:\n\n- After the call to sync.MemoryFenceReads(), callers zero XMM15 and reload the\n  runtime.g pointer from %fs:-8, reflecting the switch from ABI0 to\n  ABIInternal. This is a relatively small cost.\n\n- Before the call to sync.MemoryFenceReads(), callers spill all registers to\n  the stack, since ABI0 function calls clobber all registers. The cost of this\n  depends on the state of the caller before the call, and is not reflected in\n  BenchmarkSeqCountReadUncontended (which does not read any protected state\n  between the calls to BeginRead() and ReadOk()).\n\nBoth of these problems are caused by Go assembly functions being restricted to\nABI0. Go provides a way to mark assembly functions as using ABIInternal\ninstead, but restricts its use to functions in package runtime\n(https://github.com/golang/go/issues/44065). runtime.publicationBarrier(),\nwhich is semantically \"sync.MemoryFenceWrites()\", is implemented as a compiler\nfence on x86; defining sync.MemoryFenceReads() as an alias for that function\n(using go:linkname) would mitigate the former problem, but not the latter.\nThus, for simplicity, we define sync.MemoryFenceReads() in (ABI0) assembly, and\nhave no choice but to eat the overhead.\n\n(\"Fence\" and \"barrier\" are often used interchangeably in this context; Linux\nuses \"barrier\" (e.g. `smp_rmb()`), while C++ uses \"fence\" (e.g.\n`std::atomic_memory_fence()`). We choose \"fence\" to reduce ambiguity with\n\"write barriers\", since Go is a GC'd language.)\n\nPiperOrigin-RevId: 573861378", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "289dc7ce1d718b479e2a43282e443c79def0b133", "commit_date": "2023-10-16T15:12:10Z", "commit_message": "Prefer routes with local addr on outgoing NIC only for local traffic\n\nCurrently gVisor's routing logic always prefers routes that use a local\naddress that is assigned to the outgoing interface. This preference is\napplied even for forwarded traffic, where the local address is left\nunspecified on route lookup because the source address of the packet\nbelongs to some other node as opposed to the stack itself. This means\nthat when forwarding incoming traffic, the netstack will prefer routes\nthat go through a NIC with a local address endpoint over those that do\nnot, even if a better route exists.\n\nChange this logic such that the preference for routes with a local\naddress assigned to the outgoing interface only applies for locally-\ngenerated traffic.\n\nPiperOrigin-RevId: 573812452", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "febb0656f3472dc87db3314b7c35416074e389cf", "commit_date": "2023-10-14T19:34:40Z", "commit_message": "Revamp shared mount container tests.\n\nAdds testing utilities to run shared mount tests with various --overlay2\nsettings and with different mount types. This should be more useful than\nrunning these tests with various platforms.\n\nPiperOrigin-RevId: 573502277", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2501d8282ddfcf67ef29b4e1c677b52b4fac663b", "commit_date": "2023-10-14T03:10:57Z", "commit_message": "Expand the concept of OverlayMedium to GoferMountConf.\n\nThis change expands the notion of \"overlay medium\" to \"gofer mount config\".\n\"Gofer mount\" is used to refer to the collection of rootfs mount + bind mounts.\nThis expansion is useful when we need to convey more information about how each\ngofer mount is set up (apart from whether overlay is enabled and what overlay\nmedium is used).\n\nThis should be synthetic change (no change in behavior).\n\nPiperOrigin-RevId: 573378080", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a5aee55393806862ba2bc775a1c469e38f01b0e", "commit_date": "2023-10-13T23:38:59Z", "commit_message": "Handle deletion of self-backed filestores for shared mounts.\n\nCurrently shared mounts do not have a file backend, but future changes will\nintroduce it. Shared mounts are owned by the sandbox process and they persist\nfor the entire lifecycle of the sandbox. When containers using them are start,\nthey simply reuse the shared mount's filesystem instance.\n\nDuring the lifecycle of the sandbox, containers using a shared mount can be\nstarted/restarted/destroyed multiple times. So we should only delete the shared\nmount's filestore when the sandbox is being destroyed.\n\nPiperOrigin-RevId: 573347590", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "79494786880486b9d1e3186fce86b502a2384322", "commit_date": "2023-10-13T22:45:39Z", "commit_message": "Add an function that returns a mount point for the given path.\n\nPiperOrigin-RevId: 573337009", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff6542a99e4e872c61a374c025d065252a12068a", "commit_date": "2023-10-13T19:12:59Z", "commit_message": "Merge pull request #9500 from kevinGC:checksumalign\n\nPiperOrigin-RevId: 573287057", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f3b0a527c2048fe14e1ce438b3f271c677a4fa12", "commit_date": "2023-10-13T17:20:56Z", "commit_message": "inet: allow to create abstract unix sockets in non-root namespaces\n\nPiperOrigin-RevId: 573253619", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c21f11d246f978b46010e99583e3fe580d28226b", "commit_date": "2023-10-13T04:42:33Z", "commit_message": "Describe how to update golang dependencies\n\nSigned-off-by: Andrei Vagin <avagin@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c134ec92830b54a760d37279fc8d1557a197cf5a", "commit_date": "2023-10-13T03:51:11Z", "commit_message": "Merge pull request #9525 from avagin:bazel-update\n\nPiperOrigin-RevId: 573088680", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "323d0fe7de521ac5b16f848901d517f251d682fa", "commit_date": "2023-10-13T00:29:41Z", "commit_message": "Merge pull request #9488 from google:dependabot/bundler/images/benchmarks/ruby/sinatra-2.2.3\n\nPiperOrigin-RevId: 573055277", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ffa71b1ee58e4069efbc0ef2d2f653326b3e144d", "commit_date": "2023-10-12T23:10:18Z", "commit_message": "Update dependencies\n\nSigned-off-by: Andrei Vagin <avagin@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "da90797f0cb3446f731236dfcc891c30192b48ca", "commit_date": "2023-10-12T22:05:54Z", "commit_message": "Zero `fd_set` in `select_benchmark`\n\nThis is fixing a bug that caused the test to fail on ARM64 when running\nunder Starnix on Fuchsia. https://ci.chromium.org/b/8767565962564011473\nis an example failing run.\n\nPiperOrigin-RevId: 573021699", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "23c97a4b93045b3167335b2ee66a1baafa376944", "commit_date": "2023-10-12T20:12:13Z", "commit_message": "buildkite: Run bazel with the remote cache\n\nPiperOrigin-RevId: 572991580", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "807e59f15cfad4f8dab0ad8772e2b318f1570917", "commit_date": "2023-10-12T20:01:07Z", "commit_message": "Add some units tests around lifecycle annotation.\n\nPiperOrigin-RevId: 572986759", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e9cef920a4f8630a7d0959b0c8974f07820be24e", "commit_date": "2023-10-12T19:52:14Z", "commit_message": "Add logging when downgrading the container status during state file load.\n\nShould help debug issue #9383.\n\nPiperOrigin-RevId: 572985021", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "24850a4d512e6b7a28f24ccf849f3f2efd8716d6", "commit_date": "2023-10-12T19:42:43Z", "commit_message": "`secbench`: Read stdout before waiting for process.\n\nGo's `command.Cmd.Wait` closes stdout, so this can race with the stdout\nreader goroutine.\n\nPiperOrigin-RevId: 572983626", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3cbedad3dac7655948076bd4ba320edc5f08f255", "commit_date": "2023-10-12T19:21:49Z", "commit_message": "Implement initial support for MS_REMOUNT to change mount flags.\n\nPiperOrigin-RevId: 572978793", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bc2da4a0c3c565cf077f0f16518fcfa5b108e2a5", "commit_date": "2023-10-12T18:17:29Z", "commit_message": "Add internal annotation for nvproxy.\n\nAdd an internal annotation so we can set NVProxy in k8s on a per\nsandbox (pod) basis.\n\nPiperOrigin-RevId: 572960928", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3962c7dcaf4b15e7c0c11213eb83d281dd71c13c", "commit_date": "2023-10-12T18:00:37Z", "commit_message": "Remove unnecessary RUNTIME_BIN dependency from container-tests target.\n\nThese tests call into runsc API directly, not by invoking runsc binary.\n\nPiperOrigin-RevId: 572955508", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c6a583126e2c2a606b2b6d4bb2a6683d67ffa670", "commit_date": "2023-10-12T07:44:32Z", "commit_message": "socket/unix: Implemented the autobind feature\n\nIf a bind call specifies addrlen as sizeof(sa_family_t) ,then the socket\nis auto-bound to an abstract address. The address consists of a null byte\nfollowed by 5 bytes in the character set [0-9a-f].\n\nPiperOrigin-RevId: 572810162", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "50d0c052be435f91fd97301975017a31b3600ab6", "commit_date": "2023-10-12T04:59:07Z", "commit_message": "netstack: fall back to slower checksum when buffer isn't aligned\n\n- When buffers aren't 64 bit aligned, use the slower unrolled checksum\n  that's safe across different architectures.\n- Remove the copied checksum implementation in checksum_test so we don't\n  have to update both.\n- Play with build tags such that checksum_test tests all checksum\n  implementations, not just the preferred one on that architecture.\n\nFixes #9499.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1f04a514e8e8f9ff234743b956291f39d666768f", "commit_date": "2023-10-11T23:02:33Z", "commit_message": "Fix mount promise path resolution.\n\nIt should build a path starting from the task root, not rp.root. This was a\nproblem in the case of reading from /proc/mountinfo before starting the daemon.\nIn this case, the procfs issues a StatAt call through vfs with the rp starting\nat the root of the cloudsql mount. This issued a request to start the daemon\nwith the path \"/\" instead of \"/cloudsql\".\n\nPiperOrigin-RevId: 572713014", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a8bc2e1466267d8c5d9da7ddf632bc187286b6a2", "commit_date": "2023-10-11T22:17:54Z", "commit_message": "Fix group id cleanup and tidy up some mount methods.\n\nBefore this we were failing to clean up group IDs properly which could\ncause propagation to loop forever in some rare cases. This change\nalso addresses a couple other small issues:\n\n- In attachTreeLocked we were doing error checks on a VirtualDentry before\n  checking if that vd had been mounted over.\n- In destroy we were checking mnt.parent() without vfs.mountMu locked or\n  checking vfs.mounts.seq.\n\nReported-by: syzbot+78a0d5c373d28623a709@syzkaller.appspotmail.com\nPiperOrigin-RevId: 572700791", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f7bfab20e08ad185f874828161a3d96a169090dd", "commit_date": "2023-10-11T18:42:40Z", "commit_message": "Fix MountNamespaceSlavesNewUserNamespace test.\n\nChanges were proposed by avagin@google.com.\n\nPiperOrigin-RevId: 572638753", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4e5d7ff1ab7ebc1b2ebbb6db6e8abb94e693d563", "commit_date": "2023-10-10T22:39:42Z", "commit_message": "`secbench`: Add benchmark for doing an ioctl with `nvproxy` enabled.\n\n`nvproxy` significantly grows the size of the `ioctl` syscall rule.\nThis benchmark allows tracking its efficiency over time.\n\nThis benchmark isn't correctly weighted, maybe it'd be cool to record\nthe ioctls of a typical CUDA workload and weigh this benchmark properly.\n\nPiperOrigin-RevId: 572386211", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "34c0fe73ed10913d4295c9e75b8cf357cbe0e154", "commit_date": "2023-10-10T21:28:34Z", "commit_message": "Updating golang's containerd/runc version 1.1.0\n\nThis is required to include the NetworkInterface struct\nadded in go-runc Stats in commit c321e8cd.\n\nhttps://github.com/containerd/go-runc/blob/main/events.go\n\nPiperOrigin-RevId: 572366821", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f098b9b06ec47e76fa04394a6b5d7390abd9ac4d", "commit_date": "2023-10-10T21:11:01Z", "commit_message": "`seccomp`: Make `SyscallRules` map type opaque.\n\nThis wraps the `map[uintptry]SyscallRule` into an unexported field of a struct\nso that it cannot be accessed directly.\n\nThis is helpful for the `runsc` and `fsgofer` seccomp filters which are quite\ncomplex and built across multiple files and multiple functions, where it is\nnot always clear which order they are executed in. By forcing mutations to be\nmore explicit about their intent (especially \"merge with this new rule\" vs\n\"override what happens for this syscall with this new rule\"), we can crash if\nthat intent isn't what's actually happening.\n\nPiperOrigin-RevId: 572361619", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "584791a1f0a47ef237c6758c36d13261eac77680", "commit_date": "2023-10-10T18:18:34Z", "commit_message": "Add support for Nvidia driver versions after 535.43.02.\n\nNvproxy now supports 535.54.03 and 535.104.05 versions.\nTested on T4 GPU for these versions.\n```\n$ docker run --runtime=runsc --rm --gpus=all nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubi8\n[Vector addition of 50000 elements]\nCopy input data from the host memory to the CUDA device\nCUDA kernel launch with 196 blocks of 256 threads\nCopy output data from the CUDA device to the host memory\nTest PASSED\nDone\n```\n\nPiperOrigin-RevId: 572312006", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71dc79e653490ec386ca3f56970b412b6790b2c4", "commit_date": "2023-10-10T00:53:22Z", "commit_message": "`secbench`: Benchmark optimization duration and compression ratio.\n\nCurrent values for the Sentry filters:\n\n```\n              \u2502   current   \u2502\n              \u2502  build-sec  \u2502\nSentrySystrap   13.73m \u00b1 0%\nSentryKVM       16.36m \u00b1 0%\n\n              \u2502      current      \u2502\n              \u2502 compression-ratio \u2502\nSentrySystrap          2.165 \u00b1 0%\nSentryKVM              2.132 \u00b1 0%\n\n              \u2502   current   \u2502\n              \u2502  gen-instr  \u2502\nSentrySystrap   1.288k \u00b1 0%\nSentryKVM       1.373k \u00b1 0%\n\n              \u2502  current   \u2502\n              \u2502 opt-instr  \u2502\nSentrySystrap   595.0 \u00b1 0%\nSentryKVM       644.0 \u00b1 0%\n\n              \u2502   current   \u2502\n              \u2502   opt-sec   \u2502\nSentrySystrap   819.0\u00b5 \u00b1 2%\nSentryKVM       897.0\u00b5 \u00b1 1%\n```\n\nPiperOrigin-RevId: 572089103", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a680b825b05147e99ff69aafa400798c86289af", "commit_date": "2023-10-10T00:28:41Z", "commit_message": "netstack: rename IncRef() to TryIncRef() to better reflect its behavior\n\nPiperOrigin-RevId: 572084130", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e5df83edfeadf4c2a391a9180e79ace763da2c4", "commit_date": "2023-10-10T00:08:52Z", "commit_message": "Make `runsc events` robust against bad data and avoid division by zero.\n\nUpdates #9383\n\nPiperOrigin-RevId: 572079494", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "19399cd60bd45ec7cb072b5adb9997e74d348949", "commit_date": "2023-10-09T23:20:26Z", "commit_message": "netstack: check the value of IncRef() before returning a selected source IP\n\nIt's possible for IncRef() to fail (it's really TryIncRef()), so we have to\ncheck.\n\nPiperOrigin-RevId: 572068691", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b3de4851a66fd73cba79396f012ab2a20f8adf3c", "commit_date": "2023-10-09T22:49:17Z", "commit_message": "roll forward cl/558267882\n\nThis change is correct regardless of the rolled-back changes to IP address\nselection.\n\nPiperOrigin-RevId: 572061466", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "79da11aa57554a473ea1d20b28ab9cc65fb2ffbf", "commit_date": "2023-10-09T18:31:16Z", "commit_message": "Merge pull request #9485 from btw616:fix-dirents-order\n\nPiperOrigin-RevId: 571993569", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12bc9994b427b60befac8bfd6a0c062963dc57e7", "commit_date": "2023-10-09T17:18:13Z", "commit_message": "Introduce select_benchmark\n\nThis benchmark performs similar measurements as epoll_benchmark.\n\nPiperOrigin-RevId: 571972206", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "97744978048cc9976b996af494e974a769eb1587", "commit_date": "2023-10-08T23:26:21Z", "commit_message": "Bump sinatra from 2.0.5 to 2.2.3 in /images/benchmarks/ruby\n\nBumps [sinatra](https://github.com/sinatra/sinatra) from 2.0.5 to 2.2.3.\n- [Changelog](https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md)\n- [Commits](https://github.com/sinatra/sinatra/compare/v2.0.5...v2.2.3)\n\n---\nupdated-dependencies:\n- dependency-name: sinatra\n  dependency-type: direct:production\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "98b368b7fa6fdf437739ff4f9e8913c4e3cabb47", "commit_date": "2023-10-08T23:25:27Z", "commit_message": "Merge pull request #9231 from google:dependabot/bundler/images/benchmarks/ruby/rack-2.2.8\n\nPiperOrigin-RevId: 571787867", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85701f569ba84c5598a7fea79dfc24fef13c6b20", "commit_date": "2023-10-07T23:17:05Z", "commit_message": "Merge pull request #9301 from google:dependabot/bundler/images/benchmarks/ruby/puma-5.6.7\n\nPiperOrigin-RevId: 571635215", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "15e4366487c8dd984056fb82028c85eade2048fe", "commit_date": "2023-10-07T13:15:16Z", "commit_message": "erofs: fix wrong assumption on the order of on-disk directory entries\n\nFor each directory, _all_ the on-disk directory entries are _strictly_\nrecorded in alphabetical order. There is no special treatment of \".\" and\n\"..\". Thanks to @hsiangkao for pointing out this bug.\n\nFixes: eca83ac68cda (\"Add initial support for EROFS\")\nReported-by: Gao Xiang <xiang@kernel.org>\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "addac5f2487d85be4de2c93b81b86f1145a4a025", "commit_date": "2023-10-06T23:19:26Z", "commit_message": "Refactor seccomp rules with interfaces rather than disjunctive normal form.\n\nThis replaces the `seccomp.Rule` type with the `seccomp.SyscallRule`\ninterface, which is an abstraction that defines how to match a syscall's\narguments and RIP.\n\nThis has the following benefits:\n\n- The code can verify that rules are self-contained, as the\n  `SyscallRule.Render` contract specifies that the rule must jump to\n  either a \"matched\" or \"not matched\" label, and may not fall through.\n  It uses `ProgramBuilder`'s support for asserting unreachability to\n  enforce this.\n- Rules that match everything are more explicit (no more implicit\n  \"no rules means everything matches\" behavior, instead you have to\n  explicitly specify `seccomp.MatchAll{}`).\n- \"OR\" behavior is explicit (a disjunctive rule is marked as `seccomp.Or`\n  rather than the current implicit meaning of a list of rules).\n- Allows the creation of more sophisticated matching rules that don't work\n  on a per-argument basis. This change does not do any of that yet, it\n  simply refactors existing rules without changing the way they work.\n- Decouples rule-specific rendering code from the larger program generation\n  code (BST, architecture check, etc.).\n\nUnfortunately there is no easy way to split this change into multiple\nsub-changes without introducing additional complexity to support both forms\nof expressing rules, so sorry if this is a large change. But note that it\nis actually net-negative in line count.\n\nDespite the size of this change, please review it carefully, as this is a\nsecurity-sensitive change.\n\nPiperOrigin-RevId: 571459670", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9cb26fd34fcd4278c4d5ca2a4824507bcec7b851", "commit_date": "2023-10-06T21:36:44Z", "commit_message": "netstack: verify stack supports protocol before finding route\n\nNot doing so breaks the assumption of later code that netProto is supported by\nthe stack.\n\nPiperOrigin-RevId: 571436763", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba1c60263e90d47b641054faed47154e4c65e054", "commit_date": "2023-10-06T21:25:06Z", "commit_message": "Merge pull request #9230 from google:dependabot/npm_and_yarn/images/benchmarks/node/minimist-1.2.8\n\nPiperOrigin-RevId: 571434254", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44e0d6d072460444b0112b770f11f975b9883240", "commit_date": "2023-10-06T21:11:55Z", "commit_message": "Unlock putOldMp before retrying the mount checks in pivot_root.\n\nPiperOrigin-RevId: 571431100", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2f99b5ccf1011d7a8cd1e4429540df4ac7576e8", "commit_date": "2023-10-06T20:14:45Z", "commit_message": "Merge pull request #9308 from btw616:erofs-initial-support\n\nPiperOrigin-RevId: 571416660", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "07b9077bfdcc14d27dd29b378d4fdf7914ebd28c", "commit_date": "2023-10-06T20:03:58Z", "commit_message": "Introduce poll_benchmark\n\nThis benchmark performs similar measurements as epoll_benchmark.\n\nPiperOrigin-RevId: 571414062", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "15cc3fcbbd77101638854d5b575ea234804d7f7c", "commit_date": "2023-10-06T03:27:04Z", "commit_message": "Add RmAllocParamType interface for parameter types of NV_ESC_RM_ALLOC.\n\nRefactor codebase to use this interface, instead of manually copying back and\nforth into various structs.\n\nPiperOrigin-RevId: 571208903", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c24ab8dd80d7351834758b13a5a5349d301e1ba", "commit_date": "2023-10-06T00:27:49Z", "commit_message": "Issue FUSE_FLUSH request during file close.\n\nPiperOrigin-RevId: 571178563", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f3de61deed6a01ac9d7d7d6a64cefc36f66fb59c", "commit_date": "2023-10-06T00:09:36Z", "commit_message": "Handle O_PATH correctly with fchmodat(2) and utimensat(2).\n\n- As an optimization, when path was empty and it was allowed to use empty path,\n  setstatat() was invoking the FD-impl directly, instead of going through the\n  FS-impl, in hopes that open FDs can perform these operations more quickly.\n  However, this optimization breaks fchmodat(AT_EMPTY_PATH) for O_PATH FDs\n  because O_PATH FD-impl rejects SetStat() operation. So disabled this\n  optimization for O_PATH FDs.\n- However, this fix revealed that we were now allowing utimes() operations on\n  O_PATH FDs via utimensat(opathFD, path=NULL). Linux disallows this as\n  mentioned in the patch. So fixed utimes codebase to emulate Linux accurately.\n\nFixes #9453\n\nPiperOrigin-RevId: 571174417", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "41208411847841af2dbe9daa36189b35d191b9b2", "commit_date": "2023-10-05T22:56:37Z", "commit_message": "Enable easy creation of independent profiling metrics.\n\nWhen using conditionally compiled metrics there was only one go_tag to rule them\nall. That's kind of a shame because when profiling something specific it's\nnicer to know that only your metrics that you care about are compiled in and\nmetrics that you don't care about aren't.\n\nThis CL makes it easy to create new profiling go_tags, by abstracting the\nprofiling metric init functions under two builder structs: RealMetricBuilder\nand FakeMetricBuilder; these builder structs are the only things that need\nto change between the metrics-ON or OFF versions of conditional metric files\n(aside from the go_tag controlling conditional compilation of course).\nIdeally having to create these files manually wouldn't be necessary at all,\nand we could use a go_template build rule instead, but that doesn't support\nreplacing go:build tags AFAIK.\n\nPiperOrigin-RevId: 571153131", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dcfe2d169e8954ff319790b814b583ad1f0efe4c", "commit_date": "2023-10-05T20:19:06Z", "commit_message": "`seccomp`: Rename `seccomp.MatchAny` to `seccomp.AnyValue`.\n\nThis reduces the diff on an upcoming refactor which modifies all seccomp\nrules.\n\n`AnyValue` better reflects the fact that the matcher is about matching a\nsingle syscall argument value, as opposed to e.g. a rule that allows a\nsyscall through regardless of its argument.\n\nPiperOrigin-RevId: 571110444", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "598fbe650377baa89de751f6cf5e771dd321e101", "commit_date": "2023-10-05T19:08:15Z", "commit_message": "Implement MS_REC.\n\nPiperOrigin-RevId: 571091808", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9aa05f01e038a361a91c13af898e2936aef57aad", "commit_date": "2023-10-05T18:53:26Z", "commit_message": "BPF program builder: Add support for recording/analyzing fragment outcomes.\n\nThis adds a new `Record` function to `bpf.ProgramBuilder`, which returns a\nfunction to stop recording that returns the \"fragment\" of the program made\nof the instructions that were added between the time `Record` was called and\nthe time the stop function was called.\n\nThis fragment can in turn be interrogated for which `Outcomes` may happen\nfrom executing it: returning a value, jumping to a label, jumping away from\nthe fragment, falling through.\n\nThis is useful while building complex BPF programs with nested rules. By\nrecording instructions added by a possibly-nested set of rules (the final\noutcome of which is to jump to a known set of labels), we can now actually\nverify the assertion that the instructions that were added indeed end up\njumping to one of the expected labels, and nothing else.\n\nThis is useful not just for safety but also optimization purposes. In an\nupcoming refactor to argument matching code, I plan to add a \"value matcher\"\ninterface that renders rules that verify the value of the `A` register. Some\nmatchers may need to modify the `A` register in order to work, but others\ndon't. By checking whether the set of instructions modifies `A` or not, the\nhigher-level code can determine whether or not it needs to add code to reload\nthe value of the `A` register or not before moving on to the next matcher.\n\nPiperOrigin-RevId: 571087694", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2f01e3fb90108604e3dfa73df405c792f95e1aab", "commit_date": "2023-10-05T17:00:30Z", "commit_message": "Add an EROFS test in container tests\n\nThis patch adds an EROFS test which checks that the checksums we get\nfrom the target directory in container are identical with the ones\ngot from the source directory that we used to create the EROFS images.\n\nerofs-utils is also added to the default image and will be used to\nbuild the EROFS images during the test.\n\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "09be6cec5e98985a3776286bdc29c26a979fafaa", "commit_date": "2023-10-05T07:51:48Z", "commit_message": "`bpf`: Use optimizer for seccomp-bpf programs.\n\nThis speeds up:\n\n- The Sentry and the Gofer's seccomp-bpf programs\n- User application seccomp-bpf programs\n- Systrap and ptrace seccomp-bpf rules\n\nSome benchmark results with Postgres:\n\n```\n                                   \u2502    before     \u2502                    opt                    \u2502\n                                   \u2502    sec/op     \u2502    sec/op     vs base                     \u2502\nSentrySystrap/Postgres/futex          88.82n \u00b1  2%   81.29n \u00b1  2%   -8.48% (p=0.000 n=519+510)\nSentrySystrap/Postgres/nanosleep      116.9n \u00b1 19%   115.9n \u00b1 17%        ~ (p=0.859 n=350+317)\nSentrySystrap/Postgres/sendmmsg       88.68n \u00b1  1%   81.56n \u00b1  1%   -8.04% (n=519+510)\nSentrySystrap/Postgres/fstat          24.47n \u00b1  3%   24.31n \u00b1  6%        ~ (p=0.832 n=514+502)\n[...]\nSentrySystrap/Postgres-48             71.00n \u00b1  8%   63.00n \u00b1  6%  -11.27% (p=0.002 n=183+181)\n```\n\nPiperOrigin-RevId: 570931073", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ff4c4593819749623b7b0ead2ca095c4c7a9e89", "commit_date": "2023-10-05T04:48:35Z", "commit_message": "`bpf`: Implement BPF optimizer.\n\nThis performs a few lossless optimizations passes over BPF programs.\n\nThis change does minimal testing and does not test for correctness.\nThe next change incorporates this optimizer in the program builder which *is*\ntested for correctness.\n\nIt is not used anywhere yet, but when putting it on the Sentry filters:\n\n```\n                                   \u2502    before     \u2502                    opt                    \u2502\n                                   \u2502    sec/op     \u2502    sec/op     vs base                     \u2502\nSentrySystrap/Postgres/futex          88.82n \u00b1  2%   81.29n \u00b1  2%   -8.48% (p=0.000 n=519+510)\nSentrySystrap/Postgres/nanosleep      116.9n \u00b1 19%   115.9n \u00b1 17%        ~ (p=0.859 n=350+317)\nSentrySystrap/Postgres/sendmmsg       88.68n \u00b1  1%   81.56n \u00b1  1%   -8.04% (n=519+510)\nSentrySystrap/Postgres/fstat          24.47n \u00b1  3%   24.31n \u00b1  6%        ~ (p=0.832 n=514+502)\n[...]\nSentrySystrap/Postgres-48             71.00n \u00b1  8%   63.00n \u00b1  6%  -11.27% (p=0.002 n=183+181)\n```\n\nPiperOrigin-RevId: 570900358", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cce5b85235bd6d90742b2d5310811efc9284c6bb", "commit_date": "2023-10-05T03:33:43Z", "commit_message": "Add driver versioning support in nvproxy.\n\nThis adds utilities to make it easier to add versioning support in nvproxy.\nThis way we can have different handling of ioctls based on driver versions.\n\nThe largest downside of this solution is the usage of maps instead of switch\nstatements. Switch statements are *way* faster than map accesses. The rationale\nis that most of the latency bound work happens on the GPU for GPU workloads. So\nmicro-optimizations like using switch statements should not be visible.\n\nCo-authored-by: Jamie Liu <jamieliu@google.com>\nPiperOrigin-RevId: 570889581", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d493e93763d029996514d494c944a314b0ef9d4c", "commit_date": "2023-10-05T01:08:58Z", "commit_message": "Implement MS_SLAVE.\n\nThis change implements the MS_SLAVE flag as its described in\nhttps://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt.\nIn the sentry slaves are called followers and masters are called leaders.\n\nPiperOrigin-RevId: 570866579", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e0bdd0d57680d5aa5ac7c6aa1fc03954feb48011", "commit_date": "2023-10-04T22:46:28Z", "commit_message": "Ensure at least page size bytes are read from /dev/{u}random and getrandom(2).\n\nThis undocumented behavior manifests in Linux and some apps depend on it.\nSee drivers/char/random.c:get_random_bytes_user().\n\nFixes #9445\nFixes #4988\n\nPiperOrigin-RevId: 570833447", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c39ecc4eb47a3039c9df959754dc87cf0ba02286", "commit_date": "2023-10-04T22:25:09Z", "commit_message": "The local task in process_vm_read|writev is just the calling task.\n\nWe were using t.ThreadGroup.Leader() as the local task, which led to data races\nreading fields that are owned by the task goroutine. But there's no need to use\nthe Leader, so we just use the calling task everywhere.\n\nPiperOrigin-RevId: 570826256", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cf93d156901b040a50c1baea2cc32b68089bd3e0", "commit_date": "2023-10-04T19:58:14Z", "commit_message": "mount: update root and cwd from cloneMountTree\n\nIn this case, we don't need to enumerate all tree mounts and look up pair\nmounts in the cloned tree.\n\nPiperOrigin-RevId: 570778945", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c6a1db5baec7616983b14ac06e84bee45330a9d3", "commit_date": "2023-10-04T17:52:39Z", "commit_message": "gofer: set nosuid and nodev flags when the root is remounted\n\nThese flags can be locked and mount(MS_BIND|MS_REMOUNT) fails if they are not\nset.\n\nFixes #8921\n\nPiperOrigin-RevId: 570741035", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff6258b2f66a23eac2a9a2cd13d1950832cd40e5", "commit_date": "2023-10-04T16:41:36Z", "commit_message": "Merge pull request #9450 from thundergolfer:jonathon/fix-doc-oct2\n\nPiperOrigin-RevId: 570720356", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8246598313a51a3c16664eebcaaa7e57a35afdbc", "commit_date": "2023-10-04T10:15:39Z", "commit_message": "runsc/debug: add an option to mount a specified filesystem\n\nA new option, --mount fstype:source:destination, is added to the\ndebug command which allows us to mount filesystems for debug purposes.\nCurrently only EROFS is supported.\n\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eca83ac68cdac5846b3836f3e77c0a7e399491b5", "commit_date": "2023-10-04T10:15:30Z", "commit_message": "Add initial support for EROFS\n\nThis patch adds initial support for EROFS [1]. Below is a brief\nsummary of the supported features.\n\nBoth inode formats are supported:\n\n- compact format (32 bytes);\n- extended format (64 bytes);\n\nBelow data layouts are supported:\n\n- flat file data without data inline (no extent);\n- flat file data with tail packing data inline (no extent);\n\nBelow file types are supported:\n\n- directory;\n- regular file;\n- symlink;\n\nSpecial files (e.g. fifo) can be listed, but cannot be accessed.\n\nWith this patch, sentry will be able to mount the EROFS image\ncreated with below command and access the files on it.\n\n mkfs.erofs -E noinline_data <IMAGE FILE> <SOURCE DIRECTORY>\n\n[1] https://docs.kernel.org/filesystems/erofs.html\n\nUpdates #8956\n\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e16f83a45c9a8c28a0e6a750d07f99f8d21a1f6b", "commit_date": "2023-10-04T05:26:46Z", "commit_message": "Return part of mount options via the syscall statfs & fstatfs.\n\nPiperOrigin-RevId: 570589224", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "677d11f22fbe194a6d2786a07a7d5295704c0c48", "commit_date": "2023-10-04T01:17:50Z", "commit_message": "Chunkify tmpfs Allocate().\n\nOn machines with really large RAM, the default tmpfs size limit (50% of RAM\nsize) can still be really large. So tmpfs permits really large fallocate\nrequests. In gVisor, there are 2 problems:\n1. Large fallocate(2) may crash the system via watchdog timeout.\n2. fallocate(2) is not interruptible by signal.\n\nIn Linux, fallocate iteratively allocates folios, while checking for\ninterrupts. See mm/shmem.c:shmem_fallocate().\n\nTo solve these problems, this patch changes tmpfs Allocate() to work in\n4 GiB chunks and checks for interrupts between chunks, which also pets the\nwatchdog. We also drop tmpfs.regularFile.dataMu between chunks to prevent other\ngoroutines waiting on dataMu from triggering a watchdog timeout.\n\nNote that this still may not fix watchdog crashes caused by other goroutines\nwaiting on tmpfs.inode.mu during a large fallocate(2).\n\nReported-by: syzbot+269e5666da366a3ef2f6@syzkaller.appspotmail.com\nSuggested-by: Jamie Liu <jamieliu@google.com>\nPiperOrigin-RevId: 570551795", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5dccaad67714a4f522a6341d257d18be0fafbf5a", "commit_date": "2023-10-04T01:04:43Z", "commit_message": "abi/linux: fix TASK_SIZE in case of 5-level paging\n\nOn x86, 5-level paging enables 56-bit userspace virtual address space.\n\nPiperOrigin-RevId: 570549277", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0adbdec504d376f1c68f2dbace18dec9dd23d55c", "commit_date": "2023-10-04T00:30:53Z", "commit_message": "fix: outdated line in debugging.md doc", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b667130795267c0afb784a9bad71a5a74e48fde0", "commit_date": "2023-10-03T22:01:49Z", "commit_message": "Clean up and re-enable process_vm_readv/writev\n\nSome fixes:\n\n* First argument of Task.CopyContext should always be the context.Context\n  derived from the currently running task, because it is used to get a\n  CopyScratchBuffer, which must be from the current task. This solved a bunch\n  of data races.\n\n* Fix logic around which process is remote and which is local. These were\n  getting mixed up.\n\n* Always read iovec structs (local and remote) from the local process's address\n  space, since they are syscall arguments. Only use the remote process address\n  space to read the memory pointed to by the remote iovecs.\n\n* Added ptrace permissions check, per linux.\n\n* Delete unused code from kernel/task_usermem.go\n\n* Rewrote tests so that we read to (write from) a subprocess, rather than the\n  other way around. So we don't need CAP_PTRACE to run the tests.\n\n* Also make tests async-signal-safe after call to fork(). I think this was the\n  source of the flakyness on linux previously.\n\nPiperOrigin-RevId: 570506366", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f5692dd20360d071edd504cb7531eb8500160f7", "commit_date": "2023-10-03T21:34:53Z", "commit_message": "`bpf`: Replace most uses of `linux.BPFInstruction` with `bpf.Instruction`.\n\n`bpf.Instruction` is the same type as `linux.BPFInstruction`, except that it\nuses the BPF instruction-to-string decoder to give a nice human-readable\nstringification.\n\nPiperOrigin-RevId: 570499020", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d5198a863bf446facdb50d48f2dae4a5e05f583", "commit_date": "2023-10-03T18:57:01Z", "commit_message": "Add IsDescendant to FilesystemImpl.\n\nIsDescendant gives the VFS layer an easy way to check if a dentry is a\ndescendant of another, which is important for some mounting procedures.\n\nThis method does not take any locks when accessing the parent, so parent\nfields need to switch to be atomic to avoid data races.\n\nPiperOrigin-RevId: 570454446", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44633287ca35e227a0644e880a9bddfb14c6b6c4", "commit_date": "2023-10-03T17:29:12Z", "commit_message": "Automated rollback of changelist 549837326\n\nPiperOrigin-RevId: 570426281", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "83cfe82ea96851637f20f24de26ca7ea5919e2f3", "commit_date": "2023-10-03T17:26:09Z", "commit_message": "Fix pivot_root to put the old root on the topmost mount stacked at put_old.\n\nPiperOrigin-RevId: 570425445", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "122923b14baccecd65b751f881d1d50700de5706", "commit_date": "2023-10-03T17:16:35Z", "commit_message": "Add mount type check in TestOverlayByMountAnnotation.\n\nThis is to ensure that the mount is displayed as an overlay to the application.\n\nPiperOrigin-RevId: 570422885", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c74f5866cb75bb5c712a69341c282da8e4920e59", "commit_date": "2023-10-03T17:07:40Z", "commit_message": "Fix circular lock that can happen during unlink.\n\nReported-by: syzbot+d93d90350a33fbd2c8b9@syzkaller.appspotmail.com\nPiperOrigin-RevId: 570420492", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e18a826d91d20409ef32cd98c9b0512aadeb93d", "commit_date": "2023-09-27T23:55:49Z", "commit_message": "`stateify`: Add `+stateify identtype` tag for identical type definitions.\n\nThis allows serialization of type definitions identical of stateifiable\nstruct types.\n\nContext: I want to add a `bpf.Instruction` library which is a type definition\nof `linux.BPFInstruction` (but with nicer helper functions), and keep its\nserializability.\n\nSample output for\n\n```go\n// +stateify savable\n// +stateify alias:linux.BPFInstruction\ntype Instruction linux.BPFInstruction\n```\n\n```go\nfunc (ins *Instruction) StateTypeName() string {\n        return \"pkg/bpf.Instruction\"\n}\n\nfunc (ins *Instruction) StateFields() []string {\n        return (*linux.BPFInstruction)(ins).StateFields()\n}\n\n// +checklocksignore\nfunc (ins *Instruction) StateSave(stateSinkObject state.Sink) {\n        (*linux.BPFInstruction)(ins).StateSave(stateSinkObject)\n}\n\n// +checklocksignore\nfunc (ins *Instruction) StateLoad(stateSourceObject state.Source) {\n        (*linux.BPFInstruction)(ins).StateLoad(stateSourceObject)\n}\n```\n\nPiperOrigin-RevId: 568999266", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7594667507d7114e142d8c19810cbfe53088be46", "commit_date": "2023-09-27T00:35:33Z", "commit_message": "Internal change.\n\nPiperOrigin-RevId: 568695436", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "485de2f6a71bace2eca4b9cc9268ad00f167f409", "commit_date": "2023-09-26T02:53:38Z", "commit_message": "test/syscalls: run tests in the single thread mode\n\nIt allows us to avoid side effects on forking new processes.\n\nPiperOrigin-RevId: 568391853", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e81e0c72a70b0ffe31dba1e5b5b3a12e18f21cad", "commit_date": "2023-09-23T07:47:37Z", "commit_message": "Add NV_MEMORY_FABRIC to nvproxy.\n\nFixes #9372\n\nPiperOrigin-RevId: 567816690", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b5dea0ea0972850900b47f63655a3c0f7e033a6d", "commit_date": "2023-09-23T02:51:10Z", "commit_message": "bazel: update bazel_gazelle to v0.33.0\n\nThis has to fix the error:\nexternal/bazel_gazelle/repo/BUILD.bazel:3:11:\n  no such package '@org_golang_x_tools//go/vcs\n\nPiperOrigin-RevId: 567774709", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "853c80007fc42ee037da7901b227ad9732d2a322", "commit_date": "2023-09-22T20:38:04Z", "commit_message": "Add library to benchmark gVisor's `seccomp-bpf` filters.\n\nThe first step to optimizing something is to measure it.\n\nThis creates a `secbench` library which can benchmark the time it takes to\nrun an application \"Profile\", which is a weighted-random set of syscall\nsequences, under a given `seccomp-bpf` filter.\n\nThe `secbench` library runs two subprocesses which run the same set of system\ncalls using this application profile. One of the subprocesses runs with the\nseccomp-bpf filter, and the other one runs without it. The library computes\nthe difference, and reports this duration as the time it takes to run the\nseccomp-bpf filter for that system call. It also reports the overall time it\ntakes to run the weighted-random set of system calls, useful as a general\nmeasure of the overhead that the application will see.\n\nPiperOrigin-RevId: 567704927", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "81b7b4aa14c2f425ce1885aa8185a1f34bbdfd24", "commit_date": "2023-09-22T19:05:49Z", "commit_message": "Merge pull request #9416 from avagin:bazel-update\n\nPiperOrigin-RevId: 567682759", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "de5271b36007f28f113db82b16d03cdb7efa0e5e", "commit_date": "2023-09-22T17:48:35Z", "commit_message": "Fix small data race in mount.\n\nReported-by: syzbot+eaf165c341800b20949c@syzkaller.appspotmail.com\nPiperOrigin-RevId: 567662206", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a277f53f250910d23534a3fc4401840008296f4d", "commit_date": "2023-09-22T17:35:43Z", "commit_message": "Fix atomicOTrunc implementation in fusefs.\n\nIf FUSE connection does not support atomic O_TRUNC and application calls\nopen(O_TRUNC), FUSE should truncate the file *first* (without a file handle)\nand then subsequently open the file with O_TRUNC filtered out.\n\nWe were truncating the file after open(). There were 2 issues with it:\n1. We were using the inode's file handle, which may be invalid at this point\n   because it is donated to the first FD (to save an open(2) RPC I believe)\n   and that FD can close it.\n2. The truncate() was being done with fhOptions.useFh = true. However,\n   sometimes the file handle might be read-only causing truncate to fail.\n\nFixed both issues by moving the truncate above open() and making it not use any\nfile handles.\n\nPiperOrigin-RevId: 567658664", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9794276875d1e8ebadfb6d97760c2847e36ef7b0", "commit_date": "2023-09-22T05:33:21Z", "commit_message": "bazel: update golang to 1.21.1\n\nand update a few other packages.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "19250b87ede7311b70238dcd7329e3096a1b49d5", "commit_date": "2023-09-22T01:54:59Z", "commit_message": "Use the last NVIDIA_VISIBLE_DEVICES value from spec.\n\nAs described in #9401, we should use the last value of NVIDIA_VISIBLE_DEVICES\nfrom the container spec to emulate nvidia-container-runtime-hook correctly.\n\nFixes #9401\n\nPiperOrigin-RevId: 567480580", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fcacbf17c6171bcc3d406bb378b95b7c18dc82ce", "commit_date": "2023-09-22T01:29:12Z", "commit_message": "buildkite: build arm64 docker images on arm64 agents\n\nPiperOrigin-RevId: 567476463", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "05b7c55c13204f3a3b42ccf17e8252015b40353d", "commit_date": "2023-09-21T23:07:04Z", "commit_message": "Do not interpret GPU index as GPU device minor.\n\nThere are 3 ways to identify a GPU device that are relevant:\n1. GPU Index: This is the index of the GPU in PCIe ordering.\n2. GPU Device Minor: This is the minor device number. The GPU device number\n   on the system is 195:minor.\n3. /dev/nvidia#: The GPU can be accessed via the device mounted at this path.\n\nnvproxy incorrectly assumed that all 3 identifiers are the same. In reality,\nonly (2) and (3) are always the same. (1) can differ, as demonstrated in #9389.\n\nSo passthrough the value of `NVIDIA_VISIBLE_DEVICES` to `nvidia-container-cli`\nwhile invoking the `configure` command via the `--devices` flag. The CLI uses\nNVML to figure out the GPU Index -> GPU Device mapping and mounts the right\ndevices into the containers root filesystem at /container/rootfs/dev/. We\nsubsequently scan this directory to *infer* the GPU devices exposed to the\ncontainer. This information in plumbed through various places and appropriate\nvirtualized gVisor devices are created.\n\nAn unintended benefit of this is that identifying GPUs via GPU UUIDs now works!\nEarlier we only accepted GPU index. Now we can just pass through GPU UUID to\nthe CLI and it will deal with it. So `docker run --gpus=\"device=GPU-4e716e7d\"\nworks now.\n\nAlternatives considered:\n1. Parsing `nvidia-container-cli info` output to figure out index -> minor\n   mapping. However, this is a costly operation (as reported in #9215) which\n   can take 2-3 seconds.\n2. Using NVML in runsc via nvidia/go-nvml library. Apart from the downsides of\n   adding another third party dependency, this entails that we duplicate logic\n   from nvidia-container-cli into runsc (mainly logic around\n   src/cli/common.c:select_devices()). This is technical debt and won't age\n   well (will require us to mimic updates to CLI into runsc).\n\nFixes #9389\n\nPiperOrigin-RevId: 567443164", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae1294b4358c10e453b792db1747233abbe6169c", "commit_date": "2023-09-21T18:42:16Z", "commit_message": "Internal change.\n\nPiperOrigin-RevId: 567370524", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f744f443dd7d24ad675fa5c82f3998e624d696fd", "commit_date": "2023-09-21T17:34:27Z", "commit_message": "Check before attempting to mount an anon mountpoint.\n\nReported-by: syzbot+9575c881cd3f35eea483@syzkaller.appspotmail.com\nPiperOrigin-RevId: 567349098", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "97f276fb2aecc8975634234ca9b11cf2f0e1e479", "commit_date": "2023-09-21T17:23:03Z", "commit_message": "Merge pull request #9409 from btw616:misc-cleanups\n\nPiperOrigin-RevId: 567345635", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "222147462633e9ef5a34af89d5cc6050c81b0367", "commit_date": "2023-09-21T17:06:10Z", "commit_message": "Merge pull request #9406 from avagin:systrap-pdeathsig\n\nPiperOrigin-RevId: 567339130", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "944d4185e4bdc4f07a255bc848c66d00f9da1938", "commit_date": "2023-09-21T05:23:40Z", "commit_message": "Minor filesystem cleanups\n\n- Update the remaining platform.File references in comments and\n  documentation. platform.File has been moved in memmap by commit\n  f347a578b79c (\"Move platform.File in memmap\").\n\n- Remove redundant bit operations in statTo in tmpfs. STATX_SIZE and\n  STATX_BLOCKS has been set at the beginning of the function, there\n  is no need to do it again for regular files.\n\n- Change \"\\tmp\" to \"/tmp\" in pathname, as '\\' is not a valid path\n  delimiter in Linux. \"/tmp\" looks better.\n\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "814eaf3b77ef695ffd00b83a9db7e1ae6d494d1e", "commit_date": "2023-09-21T03:19:36Z", "commit_message": "systrap: set PDEATHSIG right after forking a sysmsg thread\n\ncontainer_test:TestGoferExits fails by timeout, because there are some\nsysmsg threads survived sandbox process death. When we fork a new sysmsg\nthread, it is traced with PTRACE_O_EXITKILL, so we need to set PDEATHSIG\nbefore detaching from it.\n\nSigned-off-by: Andrei Vagin <avagin@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1531147bf2e9b63f9bb068d808582c1ab5cc022d", "commit_date": "2023-09-20T20:06:08Z", "commit_message": "Automated rollback of changelist 564000728\n\nPiperOrigin-RevId: 567054388", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1c8e91d04c692978b50c1bad48f7c41193fa0922", "commit_date": "2023-09-20T19:58:03Z", "commit_message": "fs/overlay: create the \"work\" directory in `workdir`\n\nLinux creates the \"work\" directory in `workdir`.  Docker calls chown on it and\nfails if it doesn't exist.\n\nPiperOrigin-RevId: 567053404", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "02f70b5df083b640c427290ba2229bcdfe486ad9", "commit_date": "2023-09-20T19:38:39Z", "commit_message": "Implement a subset of `keyctl(2)` and `keyrings(7)` for better Docker support.\n\nThe intention of this change is to cover a sufficient surface to accommodate\nthe use of running Docker within gVisor, rather than a full implementation.\n\nThis implements the following features:\n\n  - Keys as a first-class concept in the kernel.\n  - Tracking keys in user namespaces.\n  - Task session keyrings: possession, inheritance.\n  - Key permission enforcement.\n  - The following `keyctl(2)` operations:\n    - `KEYCTL_GET_KEYRING_ID`\n    - `KEYCTL_DESCRIBE`\n    - `KEYCTL_JOIN_SESSION_KEYRING`\n    - `KEYCTL_SETPERM`\n\nNotably, this does not implement:\n\n  - The ability to actually add any keys other than the session keyring\n    (which does not hold any cryptographic key data).\n  - Other special keyrings (thread keyring, process keyring, user session\n    keyring, etc.).\n  - Lots of `keyctl(2)` operations.\n  - Key expiration.\n  - Key garbage collection. Keys live until their user namespace is destroyed.\n    However, each user namespace is limited to 200 keys, so memory growth is\n    bounded.\n  - `add_key(2)`\n  - `request_key(2)`\n\n... However, this makes design choices that seem odd given the limited scope\nof this change, but make sense when taking into account the desire to\neventually accommodate them in the future. For example, there are many\n`switch` statements with only one option for session keyrings, which would get\nmore options when adding support for other special keyrings. Similarly, the\nsignature of `PossessedKeys` takes in all 3 special \"possessed\" keyrings, but\ncurrently only ever gets the session keyring as non-nil.\n\nPiperOrigin-RevId: 567047896", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "81a42184e191be69f1624ee3481e66049e40da12", "commit_date": "2023-09-20T18:41:32Z", "commit_message": "Reorder nvidia driver versions.\n\nPiperOrigin-RevId: 567031594", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "539a8464f35e16892b31df860fc9c2a798af68d1", "commit_date": "2023-09-20T17:39:20Z", "commit_message": "Qualify NVIDIA 525.125.06 driver version.\n\nDriver version has been qualified on GKE w/ nvidia's basic workload\nand pytorch benchmarks.\n\nPiperOrigin-RevId: 567009651", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4cd842b20a3ce91952f85c4ef6910b0e87917c65", "commit_date": "2023-09-19T21:51:59Z", "commit_message": "Automated rollback of changelist 557941259\n\nPiperOrigin-RevId: 566749598", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "640ec03f92ade885c2ee3b4829039dd08f9adf43", "commit_date": "2023-09-19T21:10:52Z", "commit_message": "Fix mount table corruption.\n\nBefore this, mount propagation could cause multiple mounts to have the same\nparent and mountpoint, violating the mountTable contract. Now, when there's\nan existing mount at a propagation point, it's added as a child of the new\nmount.\n\nPiperOrigin-RevId: 566738099", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "949461f2b3624329b4c02744e10c631dabd53eaa", "commit_date": "2023-09-19T20:46:56Z", "commit_message": "Automated rollback of changelist 558922801\n\nPiperOrigin-RevId: 566731014", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "181a57866ad0fab5f50e139e789a19314e7e8eaa", "commit_date": "2023-09-19T19:37:33Z", "commit_message": "Add ABI for `keyctl(2)`.\n\nPiperOrigin-RevId: 566711348", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "50c62321fdd077c3cad9c420cf2776047ffa89a7", "commit_date": "2023-09-19T19:14:19Z", "commit_message": "KVM: Remove `_` prefix from KVM `ioctl` constants.\n\nThis is useful to be able to refer to them from external packages, such as\nto represent the `ioctl(2)` syscall profile that the Sentry has with the\nKVM platform.\n\nPiperOrigin-RevId: 566705114", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8675708cb8356da419398863e9f997b5cc437bf0", "commit_date": "2023-09-19T17:48:35Z", "commit_message": "Handle arbitrarily large Fuse Dirent Namelen.\n\nIf FUSEDirent.Namelen is larger than the remaining payload size, then the\ndirent is probably invalid. We should skip it.\n\nPiperOrigin-RevId: 566678679", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8a7617aed21c3d17d8a2570d7e22cf27c2692e17", "commit_date": "2023-09-18T23:46:52Z", "commit_message": "Move pytorch benchmark to GPU directory.\n\nThe pytorch image is huge, about 7-8 GB. This doesn't\nneed to be downloaded with the other benchmark images. Move\nit to a GPU directory to speed up benchmark runs.\n\nPiperOrigin-RevId: 566449296", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "313485846896a73bb39d985a221b1aa46e85dc8a", "commit_date": "2023-09-16T03:02:41Z", "commit_message": "Tweaks to containerd tests and helpers.\n\nPiperOrigin-RevId: 565839195", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d81768d4c8d29d2a2e0880f615d04e1dd79c88c7", "commit_date": "2023-09-16T02:44:22Z", "commit_message": "Remove peer credential check from control server.\n\nThe peer credential check worked by querying the peer's UID using SO_PEERCRED.\nHowever, when sandbox is configured with custom UID/GID mappings, which it is\nin the following situations:\n1. When not using directfs, sandbox has a mapping of only `65534:65534:1`. So\n   all other non-65534 UIDs are unmmaped.\n2. When using directfs with userns-remap. The sandbox has the same UID/GID\n   mapping as the container.\n\nIn these cases, when the root user tries to connect, the host root user is not\nmapped. Unmapped IDs are translated to overflowuid/gid, which happens to\ndefault to 65534. This leads to unexpected results:\n- Without directfs, this check allows any connection, because sandbox is also\n  running as nobody/65534.\n- In the directfs+userns-remap case, all connections are denied.\n\nThis check doesn't really enforce anything. Hence remove it.\n\nThe real enforcement mechanism is the file mode of the unix domain socket over\nwhich the connection happens. The socket file's mode depends on umask, which\ndefaults to 022. Hence only the user which creates the sandbox via\n`runsc create` has write permission on this socket. So only the sandbox creator\nor root can connect to the sandbox, as intended.\n\nFixes #9356\n\nPiperOrigin-RevId: 565836818", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5ff1e908156acadf98e2473c349f879ff54ec7e7", "commit_date": "2023-09-15T21:58:29Z", "commit_message": "Add state:\"nosave\" annotation to nvproxy.objsMu.\n\nWith this, checkpoint command succeeds on nvproxy containers.\n\nUpdates #9363.\n\nPiperOrigin-RevId: 565786118", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "36b9b19daca9e7d723388132e787e3010aa30711", "commit_date": "2023-09-15T20:13:26Z", "commit_message": "Do not use abstract sockets for control server.\n\nAny user can connect to an abstract socket. See \"Abstract sockets\" section in\nunix(7). Filesystem UDS requires write permission to connect to. Hence, file\nmode is used to protect the server.\n\nPiperOrigin-RevId: 565759783", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8c40c16ba80e487c1fc6d24f539f33b902e8aca4", "commit_date": "2023-09-15T18:41:00Z", "commit_message": "Exempt proposal issues from being closed as stale.\n\nProposals usually have more longevity and contain interesting ideas.\nAlso clean up \"new feature\" and \"enhancement\" from the list. Those labels don't\nexist in gVisor repo.\n\nPiperOrigin-RevId: 565735357", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d353f07ba5bb62d0b58ba741e3f6d88774c35a79", "commit_date": "2023-09-15T18:19:57Z", "commit_message": "Merge pull request #9381 from testwill:typo\n\nPiperOrigin-RevId: 565729064", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a99bf4a8ad59d17cd039837dc5da2f88f86cd50c", "commit_date": "2023-09-15T06:47:10Z", "commit_message": "fix: successfully typo", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b192bf37363f5ad18a533cb19448a32326613316", "commit_date": "2023-09-15T03:56:26Z", "commit_message": "Handle large control socket paths.\n\nUDS connect and bind fail when the socket path being used is more than 107 in\nlength. Shorten the path using procfs: \"/proc/self/fd/{parentFD}/{sockName)\"\n\nThis avoids falling back to using abstract sockets in some instances.\n\nSuggested-by: Andrei Vagin <avagin@google.com>\nPiperOrigin-RevId: 565557006", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e01d4387d2e4af562201ba93c8e93074836ae130", "commit_date": "2023-09-15T00:26:31Z", "commit_message": "Merge pull request #9377 from milantracy:codeqlstatus\n\nPiperOrigin-RevId: 565522379", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "29d82338fc2a5a19b99f28f2622439d31bd4b8fb", "commit_date": "2023-09-14T22:34:53Z", "commit_message": "Enhance stale action with more labels and a smaller close window.\n\nThe action also ignores a few more labels.\n\nPiperOrigin-RevId: 565494794", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f7da79cbce2a608a225ab5e056f710347ff0262", "commit_date": "2023-09-14T22:30:55Z", "commit_message": "Add CodeQL status badge for its visibility.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73f4b821a1696a215590417549fbea03fe07a8f5", "commit_date": "2023-09-14T21:53:26Z", "commit_message": "Change namespace cloning so that it clones mounts depth-first.\n\nThis saves on allocations.\n\nThis change is a subset of the changes in cl/563529897 and cl/563752003.\nCommitting this change in more discrete parts will help narrow down the\ncauses of b/299603749.\n\nPiperOrigin-RevId: 565484026", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c0a9bb7b3ab6514323b52e81a5bd52210bbed490", "commit_date": "2023-09-14T20:25:12Z", "commit_message": "Additionally expect the custom tos/tclass in TOS_TCLASS_EXPECT_DEFAULT case.\n\nPiperOrigin-RevId: 565458888", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad68fe1d68c5ab7adcb85aec313dc48f2f4080a7", "commit_date": "2023-09-14T18:04:00Z", "commit_message": "images: use gcr.io/syzkaller/syzbot as the base for syzkaller images\n\ngcr.io/syzkaller/env isn't built for ARM64.\n\nPiperOrigin-RevId: 565419016", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3dda3741d8eb531b9f284e4d70d86c952bce94c8", "commit_date": "2023-09-13T19:01:52Z", "commit_message": "Fix CodeQL so that it does not fail the github check.\n\nPiperOrigin-RevId: 565119657", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9117572ae02ffe41efd7ea51e64d4a4f413b88e1", "commit_date": "2023-09-13T17:25:05Z", "commit_message": "Add \"type: enhancement\" to labels protected from the stale action.\n\nPiperOrigin-RevId: 565089338", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b86d06d7e51b1e70c2c627e04c5300fa035fcd81", "commit_date": "2023-09-13T00:37:50Z", "commit_message": "Merge pull request #9215 from ekzhang:ekzhang/perf-nvidia-cli-info\n\nPiperOrigin-RevId: 564882593", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "94500414c9170f00d4351339bfd87683e02674f3", "commit_date": "2023-09-12T18:41:11Z", "commit_message": "Merge pull request #9359 from milantracy:codeqlconfig\n\nPiperOrigin-RevId: 564786128", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1910a4577f0183bf444660985f30dc78ef3a74ca", "commit_date": "2023-09-12T18:29:05Z", "commit_message": "cgroupfs: do not return errors from strconv.ParseInt() to write()\n\nArbitrary errors are not convertible to errnos for syscall return and cause the\nsentry to panic.\n\nPiperOrigin-RevId: 564782206", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6d06f309ed5d76dc4c085ab88166f8f5a6161b04", "commit_date": "2023-09-12T17:23:03Z", "commit_message": "Increase stale action ops per run.\n\nRight now we're capped at 30, but have 569 open issues and 192 open PRs.\n\nPiperOrigin-RevId: 564760282", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8758e992c5ca892be1830534a62cc85298061016", "commit_date": "2023-09-11T19:51:18Z", "commit_message": "perf: Remove call to nvidia-container-cli info\n\nThis call is repeated on every container startup sequence, but it is expensive, consistently taking between 2-3 seconds to run each time. This adds a significant amount of startup latency to every container. From `strace` output, the main issue appears to be a call to `openat(AT_FDCWD, \"/dev/nvidia0\", O_RDWR|O_CLOEXEC)`. The first time this is called, it creates a new open device file descriptor and blocks for 2 seconds while doing so. This was measured on a `g4dn.2xlarge` instance on AWS, running a Tesla T4 GPU.\n\nFor comparison, the `nvidia-container-prestart-hook` for runc also runs `nvidia-container-cli` during container boot, but it only calls it once for the `configure` command. gVisor appears to call it twice, once for `info` and then for `configure`.\n\nBy removing the `info` call, or at least only running it when the GPU device files are not already present on the host, GPU container startups can be 2-3 seconds faster.\n\nDoes this sound reasonable? I'm not actually familiar with why the `/dev/nvidia0` file takes 2-3 seconds to open, or why GPU device files need to be explicitly loaded. But I tested the change, and gVisor nvproxy still works.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8f2bb6d21ba55b13d6356cb78d7039b2b0dfe51", "commit_date": "2023-09-11T19:01:06Z", "commit_message": "Don't build tensorflow image on ARM.\n\nThe upload image test is failing due to the tensorflow image not being\nsupported on ARM.\n\nPiperOrigin-RevId: 564458336", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1afe6d14e767dd359840b29a55fb849b5a2efb74", "commit_date": "2023-09-11T18:41:47Z", "commit_message": "Add initial CodeQL config for gVisor.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb4410f44e3291f7aa34a2655cd683cac7d149cb", "commit_date": "2023-09-09T13:50:38Z", "commit_message": "Rollback 6ceceae9385c and 206e88db3653.\n\nSyzkaller is reporting crashes relating to changes made by these commits.\nRolling back for now. Should be rolled forward with fix.\n\nReported-by: syzbot+9868746b8b0f679da548@syzkaller.appspotmail.com\nPiperOrigin-RevId: 564000728", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "717539fbd78ae05798fa00712556ec15a55b7156", "commit_date": "2023-09-08T20:57:42Z", "commit_message": "Return user_mss if user_mss is set and socket is unconnected.\n\nHas the same effect as Linux commit 34dfde4ad87b (\"tcp: Return user_mss for\nTCP_MAXSEG in CLOSE/LISTEN state if user_mss set\").\n\nUpdated test to accept both values (default and user set) so test works on\nnewer and older kernels.\n\nPiperOrigin-RevId: 563844012", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad275a100e58195f8e4f441befba3327be51ff04", "commit_date": "2023-09-07T23:28:00Z", "commit_message": "Fix debug builds.\n\nThis change also adds instructions for using a debugger with syscall tests.\n\nFixes #9039\n\nPiperOrigin-RevId: 563576842", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "206e88db3653b4de668a5a4f51406fc6967150df", "commit_date": "2023-09-07T20:37:20Z", "commit_message": "Fix cwd/root update method during namespace cloning.\n\nThe previous implementation incorrectly assumed order would be preserved\nin the map.\n\nReported-by: syzbot+da2bc2bee99641f22de4@syzkaller.appspotmail.com\nPiperOrigin-RevId: 563529897", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "27d7936e933a89c0b55c20966a13ffb40ad2abca", "commit_date": "2023-09-07T17:08:15Z", "commit_message": "Fix github workflow test.\n\nPiperOrigin-RevId: 563466164", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c215e67a50f8f6f4d51072318571e0ab54562bc8", "commit_date": "2023-09-07T00:27:02Z", "commit_message": "Let devices cgroup add/remove rules via devices.allow and devices.deny.\n\nPiperOrigin-RevId: 563261158", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6ceceae9385c44d639a2aebc78bf3b4a8e970e05", "commit_date": "2023-09-06T22:43:02Z", "commit_message": "Abstract mount tree cloning into its own mount method.\n\nWhen copying a mount tree, new child mounts are added to a mount's\npending list. Each of these mounts has its pending mountpoint already set\nwith setKey. Eventually this method will be used to enable recursive binds.\n\nPiperOrigin-RevId: 563236298", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2319f958fc930d0a0980e094928bc233976b8992", "commit_date": "2023-09-06T21:58:03Z", "commit_message": "Automated rollback of changelist 536743330\n\nPiperOrigin-RevId: 563224104", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8aee177900da1a2a59f7cc6ca79d688677394008", "commit_date": "2023-09-06T21:06:31Z", "commit_message": "Add more justification about why shared mount propagation is not allowed.\n\nUpdates #9324\n\nPiperOrigin-RevId: 563208592", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4146284b601b8e7c551bf172c5fc1f2c7cb972c5", "commit_date": "2023-09-06T20:58:08Z", "commit_message": "Merge pull request #9339 from kevinGC:tcsetsf2\n\nPiperOrigin-RevId: 563207341", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0230a371c23bd4d750e7e60e0e4bf7223ef7087f", "commit_date": "2023-09-06T20:29:19Z", "commit_message": "Merge pull request #9336 from thundergolfer:jonathon/dev-pts-eof-handling\n\nPiperOrigin-RevId: 563199056", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e550bfbd052ddbec0ab214aa1991fad711cf013b", "commit_date": "2023-09-06T20:13:19Z", "commit_message": "Have lgetxattr return ENODATA.\n\nIt is a workaround to lgetxattr/lsetxattr working with security.capacity when running docker in gvisor.\n\nPiperOrigin-RevId: 563194162", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f22d854395ff29a377c5f4fb5100635b9856bb4e", "commit_date": "2023-09-06T19:30:10Z", "commit_message": "Merge pull request #9327 from kevinGC:benchmarkxdp\n\nPiperOrigin-RevId: 563182220", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d30c39364daa7c6b5cca3af7fd9b5935409a6f30", "commit_date": "2023-09-06T17:54:41Z", "commit_message": "Split the ring implementation into its own package.\n\nThe ring data structure's requires it's own implementation of Entry. With\nthe new version you can more easily be part of multiple rings at once. Also,\na user who wants to use ilist probably doesn't need ring as well, so it makes\nsense to separate the two.\n\nPiperOrigin-RevId: 563151782", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c584a1a435d616ec91a58d5cdba892b6bb000128", "commit_date": "2023-09-06T17:05:13Z", "commit_message": "Add a github workflow that marks issues and PRs as stale.\n\nPiperOrigin-RevId: 563136967", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c227d185a4c513aa71eff950506a257d7f95ec8a", "commit_date": "2023-09-06T02:15:45Z", "commit_message": "Emit SentryTcpListenEvent when the application listens on a tcp port.\n\nPiperOrigin-RevId: 562957239", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8c399a0930387c98aeebe073ead309bffbccf01", "commit_date": "2023-09-06T01:18:18Z", "commit_message": "Fix EOF (^D) handling in devpts (partially addr #9333)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e0029cc0ff4b85479177a82e13809b6501809272", "commit_date": "2023-09-05T22:51:21Z", "commit_message": "A few fixes to run tests on 6.2+ kernels\n\n* disable broken socket_inet_loopback test // Lucas Manning\n* disable lseek tests on anon inodes. They have been broken by\ncommit e7478158e1378325907edfdd960eca98a1be405b\nDate:   Wed Jun 29 15:06:57 2022 +0200\n    fs: clear or set FMODE_LSEEK based on llseek function\n\n* don't check memory.kmem.limit_in_bytes, it has been deprecated and dropped:\ncommit 86327e8eb94c52eca4f93cfece2e29d1bf52acbf\nDate:   Tue Jul 4 13:52:40 2023 +0200\n    memcg: drop kmem.limit_in_bytes\ncommit 58056f77502f3567b760c9a8fc8d2e9081515b2d\nDate:   Fri Nov 5 13:37:44 2021 -0700\n    memcg, kmem: further deprecate kmem.limit_in_bytes\ncommit 0158115f702b0ba208ab0b5adf44cae99b3ebcc7\nDate:   Mon Sep 23 15:37:22 2019 -0700\n    memcg, kmem: deprecate kmem.limit_in_bytes\nPiperOrigin-RevId: 562915457", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7928ff6f0c5ce47b3a9a4e0773ca68a5df6d7c93", "commit_date": "2023-09-05T16:53:50Z", "commit_message": "tty: enable `TCSETSF`\n\nWhile there is a difference between flavors of this ioctl (`TCSETS`,\n`TCSETSF`, `TCSETSW`), in practice it seems not to matter. We should let\nusers call `TCSETSF` and can implement those differences if necessary.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a9134c2f04b2e21ce0cfc5b33633ce573aa9429", "commit_date": "2023-08-31T18:09:15Z", "commit_message": "netstack: benchmark xdp endpoint\n\nThis just swaps out the fdbased endpoint for an XDP one. Some related\nchanges in here:\n\n- Moved the AF_XDP BPF program into its own Go package so it can be\n  shared.\n- Added a flag to tcp_benchmark to disable user namespaces. This helps\n  when running as root, which is required to install BPF programs.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}], "test/avagin/dev": [{"commit_oid": "4996e8b0cbcfbdf5eaafcc219ffae860e0de6da4", "commit_date": "2023-10-12T06:39:35Z", "commit_message": "buildkite: run bazel with a remote cache", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f7bfab20e08ad185f874828161a3d96a169090dd", "commit_date": "2023-10-11T18:42:40Z", "commit_message": "Fix MountNamespaceSlavesNewUserNamespace test.\n\nChanges were proposed by avagin@google.com.\n\nPiperOrigin-RevId: 572638753", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4e5d7ff1ab7ebc1b2ebbb6db6e8abb94e693d563", "commit_date": "2023-10-10T22:39:42Z", "commit_message": "`secbench`: Add benchmark for doing an ioctl with `nvproxy` enabled.\n\n`nvproxy` significantly grows the size of the `ioctl` syscall rule.\nThis benchmark allows tracking its efficiency over time.\n\nThis benchmark isn't correctly weighted, maybe it'd be cool to record\nthe ioctls of a typical CUDA workload and weigh this benchmark properly.\n\nPiperOrigin-RevId: 572386211", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "34c0fe73ed10913d4295c9e75b8cf357cbe0e154", "commit_date": "2023-10-10T21:28:34Z", "commit_message": "Updating golang's containerd/runc version 1.1.0\n\nThis is required to include the NetworkInterface struct\nadded in go-runc Stats in commit c321e8cd.\n\nhttps://github.com/containerd/go-runc/blob/main/events.go\n\nPiperOrigin-RevId: 572366821", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f098b9b06ec47e76fa04394a6b5d7390abd9ac4d", "commit_date": "2023-10-10T21:11:01Z", "commit_message": "`seccomp`: Make `SyscallRules` map type opaque.\n\nThis wraps the `map[uintptry]SyscallRule` into an unexported field of a struct\nso that it cannot be accessed directly.\n\nThis is helpful for the `runsc` and `fsgofer` seccomp filters which are quite\ncomplex and built across multiple files and multiple functions, where it is\nnot always clear which order they are executed in. By forcing mutations to be\nmore explicit about their intent (especially \"merge with this new rule\" vs\n\"override what happens for this syscall with this new rule\"), we can crash if\nthat intent isn't what's actually happening.\n\nPiperOrigin-RevId: 572361619", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "584791a1f0a47ef237c6758c36d13261eac77680", "commit_date": "2023-10-10T18:18:34Z", "commit_message": "Add support for Nvidia driver versions after 535.43.02.\n\nNvproxy now supports 535.54.03 and 535.104.05 versions.\nTested on T4 GPU for these versions.\n```\n$ docker run --runtime=runsc --rm --gpus=all nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubi8\n[Vector addition of 50000 elements]\nCopy input data from the host memory to the CUDA device\nCUDA kernel launch with 196 blocks of 256 threads\nCopy output data from the CUDA device to the host memory\nTest PASSED\nDone\n```\n\nPiperOrigin-RevId: 572312006", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71dc79e653490ec386ca3f56970b412b6790b2c4", "commit_date": "2023-10-10T00:53:22Z", "commit_message": "`secbench`: Benchmark optimization duration and compression ratio.\n\nCurrent values for the Sentry filters:\n\n```\n              \u2502   current   \u2502\n              \u2502  build-sec  \u2502\nSentrySystrap   13.73m \u00b1 0%\nSentryKVM       16.36m \u00b1 0%\n\n              \u2502      current      \u2502\n              \u2502 compression-ratio \u2502\nSentrySystrap          2.165 \u00b1 0%\nSentryKVM              2.132 \u00b1 0%\n\n              \u2502   current   \u2502\n              \u2502  gen-instr  \u2502\nSentrySystrap   1.288k \u00b1 0%\nSentryKVM       1.373k \u00b1 0%\n\n              \u2502  current   \u2502\n              \u2502 opt-instr  \u2502\nSentrySystrap   595.0 \u00b1 0%\nSentryKVM       644.0 \u00b1 0%\n\n              \u2502   current   \u2502\n              \u2502   opt-sec   \u2502\nSentrySystrap   819.0\u00b5 \u00b1 2%\nSentryKVM       897.0\u00b5 \u00b1 1%\n```\n\nPiperOrigin-RevId: 572089103", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a680b825b05147e99ff69aafa400798c86289af", "commit_date": "2023-10-10T00:28:41Z", "commit_message": "netstack: rename IncRef() to TryIncRef() to better reflect its behavior\n\nPiperOrigin-RevId: 572084130", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e5df83edfeadf4c2a391a9180e79ace763da2c4", "commit_date": "2023-10-10T00:08:52Z", "commit_message": "Make `runsc events` robust against bad data and avoid division by zero.\n\nUpdates #9383\n\nPiperOrigin-RevId: 572079494", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "19399cd60bd45ec7cb072b5adb9997e74d348949", "commit_date": "2023-10-09T23:20:26Z", "commit_message": "netstack: check the value of IncRef() before returning a selected source IP\n\nIt's possible for IncRef() to fail (it's really TryIncRef()), so we have to\ncheck.\n\nPiperOrigin-RevId: 572068691", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b3de4851a66fd73cba79396f012ab2a20f8adf3c", "commit_date": "2023-10-09T22:49:17Z", "commit_message": "roll forward cl/558267882\n\nThis change is correct regardless of the rolled-back changes to IP address\nselection.\n\nPiperOrigin-RevId: 572061466", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "79da11aa57554a473ea1d20b28ab9cc65fb2ffbf", "commit_date": "2023-10-09T18:31:16Z", "commit_message": "Merge pull request #9485 from btw616:fix-dirents-order\n\nPiperOrigin-RevId: 571993569", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12bc9994b427b60befac8bfd6a0c062963dc57e7", "commit_date": "2023-10-09T17:18:13Z", "commit_message": "Introduce select_benchmark\n\nThis benchmark performs similar measurements as epoll_benchmark.\n\nPiperOrigin-RevId: 571972206", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "98b368b7fa6fdf437739ff4f9e8913c4e3cabb47", "commit_date": "2023-10-08T23:25:27Z", "commit_message": "Merge pull request #9231 from google:dependabot/bundler/images/benchmarks/ruby/rack-2.2.8\n\nPiperOrigin-RevId: 571787867", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85701f569ba84c5598a7fea79dfc24fef13c6b20", "commit_date": "2023-10-07T23:17:05Z", "commit_message": "Merge pull request #9301 from google:dependabot/bundler/images/benchmarks/ruby/puma-5.6.7\n\nPiperOrigin-RevId: 571635215", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "15e4366487c8dd984056fb82028c85eade2048fe", "commit_date": "2023-10-07T13:15:16Z", "commit_message": "erofs: fix wrong assumption on the order of on-disk directory entries\n\nFor each directory, _all_ the on-disk directory entries are _strictly_\nrecorded in alphabetical order. There is no special treatment of \".\" and\n\"..\". Thanks to @hsiangkao for pointing out this bug.\n\nFixes: eca83ac68cda (\"Add initial support for EROFS\")\nReported-by: Gao Xiang <xiang@kernel.org>\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "addac5f2487d85be4de2c93b81b86f1145a4a025", "commit_date": "2023-10-06T23:19:26Z", "commit_message": "Refactor seccomp rules with interfaces rather than disjunctive normal form.\n\nThis replaces the `seccomp.Rule` type with the `seccomp.SyscallRule`\ninterface, which is an abstraction that defines how to match a syscall's\narguments and RIP.\n\nThis has the following benefits:\n\n- The code can verify that rules are self-contained, as the\n  `SyscallRule.Render` contract specifies that the rule must jump to\n  either a \"matched\" or \"not matched\" label, and may not fall through.\n  It uses `ProgramBuilder`'s support for asserting unreachability to\n  enforce this.\n- Rules that match everything are more explicit (no more implicit\n  \"no rules means everything matches\" behavior, instead you have to\n  explicitly specify `seccomp.MatchAll{}`).\n- \"OR\" behavior is explicit (a disjunctive rule is marked as `seccomp.Or`\n  rather than the current implicit meaning of a list of rules).\n- Allows the creation of more sophisticated matching rules that don't work\n  on a per-argument basis. This change does not do any of that yet, it\n  simply refactors existing rules without changing the way they work.\n- Decouples rule-specific rendering code from the larger program generation\n  code (BST, architecture check, etc.).\n\nUnfortunately there is no easy way to split this change into multiple\nsub-changes without introducing additional complexity to support both forms\nof expressing rules, so sorry if this is a large change. But note that it\nis actually net-negative in line count.\n\nDespite the size of this change, please review it carefully, as this is a\nsecurity-sensitive change.\n\nPiperOrigin-RevId: 571459670", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9cb26fd34fcd4278c4d5ca2a4824507bcec7b851", "commit_date": "2023-10-06T21:36:44Z", "commit_message": "netstack: verify stack supports protocol before finding route\n\nNot doing so breaks the assumption of later code that netProto is supported by\nthe stack.\n\nPiperOrigin-RevId: 571436763", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba1c60263e90d47b641054faed47154e4c65e054", "commit_date": "2023-10-06T21:25:06Z", "commit_message": "Merge pull request #9230 from google:dependabot/npm_and_yarn/images/benchmarks/node/minimist-1.2.8\n\nPiperOrigin-RevId: 571434254", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44e0d6d072460444b0112b770f11f975b9883240", "commit_date": "2023-10-06T21:11:55Z", "commit_message": "Unlock putOldMp before retrying the mount checks in pivot_root.\n\nPiperOrigin-RevId: 571431100", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2f99b5ccf1011d7a8cd1e4429540df4ac7576e8", "commit_date": "2023-10-06T20:14:45Z", "commit_message": "Merge pull request #9308 from btw616:erofs-initial-support\n\nPiperOrigin-RevId: 571416660", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "07b9077bfdcc14d27dd29b378d4fdf7914ebd28c", "commit_date": "2023-10-06T20:03:58Z", "commit_message": "Introduce poll_benchmark\n\nThis benchmark performs similar measurements as epoll_benchmark.\n\nPiperOrigin-RevId: 571414062", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "15cc3fcbbd77101638854d5b575ea234804d7f7c", "commit_date": "2023-10-06T03:27:04Z", "commit_message": "Add RmAllocParamType interface for parameter types of NV_ESC_RM_ALLOC.\n\nRefactor codebase to use this interface, instead of manually copying back and\nforth into various structs.\n\nPiperOrigin-RevId: 571208903", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c24ab8dd80d7351834758b13a5a5349d301e1ba", "commit_date": "2023-10-06T00:27:49Z", "commit_message": "Issue FUSE_FLUSH request during file close.\n\nPiperOrigin-RevId: 571178563", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f3de61deed6a01ac9d7d7d6a64cefc36f66fb59c", "commit_date": "2023-10-06T00:09:36Z", "commit_message": "Handle O_PATH correctly with fchmodat(2) and utimensat(2).\n\n- As an optimization, when path was empty and it was allowed to use empty path,\n  setstatat() was invoking the FD-impl directly, instead of going through the\n  FS-impl, in hopes that open FDs can perform these operations more quickly.\n  However, this optimization breaks fchmodat(AT_EMPTY_PATH) for O_PATH FDs\n  because O_PATH FD-impl rejects SetStat() operation. So disabled this\n  optimization for O_PATH FDs.\n- However, this fix revealed that we were now allowing utimes() operations on\n  O_PATH FDs via utimensat(opathFD, path=NULL). Linux disallows this as\n  mentioned in the patch. So fixed utimes codebase to emulate Linux accurately.\n\nFixes #9453\n\nPiperOrigin-RevId: 571174417", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "41208411847841af2dbe9daa36189b35d191b9b2", "commit_date": "2023-10-05T22:56:37Z", "commit_message": "Enable easy creation of independent profiling metrics.\n\nWhen using conditionally compiled metrics there was only one go_tag to rule them\nall. That's kind of a shame because when profiling something specific it's\nnicer to know that only your metrics that you care about are compiled in and\nmetrics that you don't care about aren't.\n\nThis CL makes it easy to create new profiling go_tags, by abstracting the\nprofiling metric init functions under two builder structs: RealMetricBuilder\nand FakeMetricBuilder; these builder structs are the only things that need\nto change between the metrics-ON or OFF versions of conditional metric files\n(aside from the go_tag controlling conditional compilation of course).\nIdeally having to create these files manually wouldn't be necessary at all,\nand we could use a go_template build rule instead, but that doesn't support\nreplacing go:build tags AFAIK.\n\nPiperOrigin-RevId: 571153131", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dcfe2d169e8954ff319790b814b583ad1f0efe4c", "commit_date": "2023-10-05T20:19:06Z", "commit_message": "`seccomp`: Rename `seccomp.MatchAny` to `seccomp.AnyValue`.\n\nThis reduces the diff on an upcoming refactor which modifies all seccomp\nrules.\n\n`AnyValue` better reflects the fact that the matcher is about matching a\nsingle syscall argument value, as opposed to e.g. a rule that allows a\nsyscall through regardless of its argument.\n\nPiperOrigin-RevId: 571110444", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "598fbe650377baa89de751f6cf5e771dd321e101", "commit_date": "2023-10-05T19:08:15Z", "commit_message": "Implement MS_REC.\n\nPiperOrigin-RevId: 571091808", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9aa05f01e038a361a91c13af898e2936aef57aad", "commit_date": "2023-10-05T18:53:26Z", "commit_message": "BPF program builder: Add support for recording/analyzing fragment outcomes.\n\nThis adds a new `Record` function to `bpf.ProgramBuilder`, which returns a\nfunction to stop recording that returns the \"fragment\" of the program made\nof the instructions that were added between the time `Record` was called and\nthe time the stop function was called.\n\nThis fragment can in turn be interrogated for which `Outcomes` may happen\nfrom executing it: returning a value, jumping to a label, jumping away from\nthe fragment, falling through.\n\nThis is useful while building complex BPF programs with nested rules. By\nrecording instructions added by a possibly-nested set of rules (the final\noutcome of which is to jump to a known set of labels), we can now actually\nverify the assertion that the instructions that were added indeed end up\njumping to one of the expected labels, and nothing else.\n\nThis is useful not just for safety but also optimization purposes. In an\nupcoming refactor to argument matching code, I plan to add a \"value matcher\"\ninterface that renders rules that verify the value of the `A` register. Some\nmatchers may need to modify the `A` register in order to work, but others\ndon't. By checking whether the set of instructions modifies `A` or not, the\nhigher-level code can determine whether or not it needs to add code to reload\nthe value of the `A` register or not before moving on to the next matcher.\n\nPiperOrigin-RevId: 571087694", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2f01e3fb90108604e3dfa73df405c792f95e1aab", "commit_date": "2023-10-05T17:00:30Z", "commit_message": "Add an EROFS test in container tests\n\nThis patch adds an EROFS test which checks that the checksums we get\nfrom the target directory in container are identical with the ones\ngot from the source directory that we used to create the EROFS images.\n\nerofs-utils is also added to the default image and will be used to\nbuild the EROFS images during the test.\n\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "09be6cec5e98985a3776286bdc29c26a979fafaa", "commit_date": "2023-10-05T07:51:48Z", "commit_message": "`bpf`: Use optimizer for seccomp-bpf programs.\n\nThis speeds up:\n\n- The Sentry and the Gofer's seccomp-bpf programs\n- User application seccomp-bpf programs\n- Systrap and ptrace seccomp-bpf rules\n\nSome benchmark results with Postgres:\n\n```\n                                   \u2502    before     \u2502                    opt                    \u2502\n                                   \u2502    sec/op     \u2502    sec/op     vs base                     \u2502\nSentrySystrap/Postgres/futex          88.82n \u00b1  2%   81.29n \u00b1  2%   -8.48% (p=0.000 n=519+510)\nSentrySystrap/Postgres/nanosleep      116.9n \u00b1 19%   115.9n \u00b1 17%        ~ (p=0.859 n=350+317)\nSentrySystrap/Postgres/sendmmsg       88.68n \u00b1  1%   81.56n \u00b1  1%   -8.04% (n=519+510)\nSentrySystrap/Postgres/fstat          24.47n \u00b1  3%   24.31n \u00b1  6%        ~ (p=0.832 n=514+502)\n[...]\nSentrySystrap/Postgres-48             71.00n \u00b1  8%   63.00n \u00b1  6%  -11.27% (p=0.002 n=183+181)\n```\n\nPiperOrigin-RevId: 570931073", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ff4c4593819749623b7b0ead2ca095c4c7a9e89", "commit_date": "2023-10-05T04:48:35Z", "commit_message": "`bpf`: Implement BPF optimizer.\n\nThis performs a few lossless optimizations passes over BPF programs.\n\nThis change does minimal testing and does not test for correctness.\nThe next change incorporates this optimizer in the program builder which *is*\ntested for correctness.\n\nIt is not used anywhere yet, but when putting it on the Sentry filters:\n\n```\n                                   \u2502    before     \u2502                    opt                    \u2502\n                                   \u2502    sec/op     \u2502    sec/op     vs base                     \u2502\nSentrySystrap/Postgres/futex          88.82n \u00b1  2%   81.29n \u00b1  2%   -8.48% (p=0.000 n=519+510)\nSentrySystrap/Postgres/nanosleep      116.9n \u00b1 19%   115.9n \u00b1 17%        ~ (p=0.859 n=350+317)\nSentrySystrap/Postgres/sendmmsg       88.68n \u00b1  1%   81.56n \u00b1  1%   -8.04% (n=519+510)\nSentrySystrap/Postgres/fstat          24.47n \u00b1  3%   24.31n \u00b1  6%        ~ (p=0.832 n=514+502)\n[...]\nSentrySystrap/Postgres-48             71.00n \u00b1  8%   63.00n \u00b1  6%  -11.27% (p=0.002 n=183+181)\n```\n\nPiperOrigin-RevId: 570900358", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cce5b85235bd6d90742b2d5310811efc9284c6bb", "commit_date": "2023-10-05T03:33:43Z", "commit_message": "Add driver versioning support in nvproxy.\n\nThis adds utilities to make it easier to add versioning support in nvproxy.\nThis way we can have different handling of ioctls based on driver versions.\n\nThe largest downside of this solution is the usage of maps instead of switch\nstatements. Switch statements are *way* faster than map accesses. The rationale\nis that most of the latency bound work happens on the GPU for GPU workloads. So\nmicro-optimizations like using switch statements should not be visible.\n\nCo-authored-by: Jamie Liu <jamieliu@google.com>\nPiperOrigin-RevId: 570889581", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d493e93763d029996514d494c944a314b0ef9d4c", "commit_date": "2023-10-05T01:08:58Z", "commit_message": "Implement MS_SLAVE.\n\nThis change implements the MS_SLAVE flag as its described in\nhttps://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt.\nIn the sentry slaves are called followers and masters are called leaders.\n\nPiperOrigin-RevId: 570866579", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e0bdd0d57680d5aa5ac7c6aa1fc03954feb48011", "commit_date": "2023-10-04T22:46:28Z", "commit_message": "Ensure at least page size bytes are read from /dev/{u}random and getrandom(2).\n\nThis undocumented behavior manifests in Linux and some apps depend on it.\nSee drivers/char/random.c:get_random_bytes_user().\n\nFixes #9445\nFixes #4988\n\nPiperOrigin-RevId: 570833447", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c39ecc4eb47a3039c9df959754dc87cf0ba02286", "commit_date": "2023-10-04T22:25:09Z", "commit_message": "The local task in process_vm_read|writev is just the calling task.\n\nWe were using t.ThreadGroup.Leader() as the local task, which led to data races\nreading fields that are owned by the task goroutine. But there's no need to use\nthe Leader, so we just use the calling task everywhere.\n\nPiperOrigin-RevId: 570826256", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cf93d156901b040a50c1baea2cc32b68089bd3e0", "commit_date": "2023-10-04T19:58:14Z", "commit_message": "mount: update root and cwd from cloneMountTree\n\nIn this case, we don't need to enumerate all tree mounts and look up pair\nmounts in the cloned tree.\n\nPiperOrigin-RevId: 570778945", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c6a1db5baec7616983b14ac06e84bee45330a9d3", "commit_date": "2023-10-04T17:52:39Z", "commit_message": "gofer: set nosuid and nodev flags when the root is remounted\n\nThese flags can be locked and mount(MS_BIND|MS_REMOUNT) fails if they are not\nset.\n\nFixes #8921\n\nPiperOrigin-RevId: 570741035", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff6258b2f66a23eac2a9a2cd13d1950832cd40e5", "commit_date": "2023-10-04T16:41:36Z", "commit_message": "Merge pull request #9450 from thundergolfer:jonathon/fix-doc-oct2\n\nPiperOrigin-RevId: 570720356", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8246598313a51a3c16664eebcaaa7e57a35afdbc", "commit_date": "2023-10-04T10:15:39Z", "commit_message": "runsc/debug: add an option to mount a specified filesystem\n\nA new option, --mount fstype:source:destination, is added to the\ndebug command which allows us to mount filesystems for debug purposes.\nCurrently only EROFS is supported.\n\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eca83ac68cdac5846b3836f3e77c0a7e399491b5", "commit_date": "2023-10-04T10:15:30Z", "commit_message": "Add initial support for EROFS\n\nThis patch adds initial support for EROFS [1]. Below is a brief\nsummary of the supported features.\n\nBoth inode formats are supported:\n\n- compact format (32 bytes);\n- extended format (64 bytes);\n\nBelow data layouts are supported:\n\n- flat file data without data inline (no extent);\n- flat file data with tail packing data inline (no extent);\n\nBelow file types are supported:\n\n- directory;\n- regular file;\n- symlink;\n\nSpecial files (e.g. fifo) can be listed, but cannot be accessed.\n\nWith this patch, sentry will be able to mount the EROFS image\ncreated with below command and access the files on it.\n\n mkfs.erofs -E noinline_data <IMAGE FILE> <SOURCE DIRECTORY>\n\n[1] https://docs.kernel.org/filesystems/erofs.html\n\nUpdates #8956\n\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e16f83a45c9a8c28a0e6a750d07f99f8d21a1f6b", "commit_date": "2023-10-04T05:26:46Z", "commit_message": "Return part of mount options via the syscall statfs & fstatfs.\n\nPiperOrigin-RevId: 570589224", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "677d11f22fbe194a6d2786a07a7d5295704c0c48", "commit_date": "2023-10-04T01:17:50Z", "commit_message": "Chunkify tmpfs Allocate().\n\nOn machines with really large RAM, the default tmpfs size limit (50% of RAM\nsize) can still be really large. So tmpfs permits really large fallocate\nrequests. In gVisor, there are 2 problems:\n1. Large fallocate(2) may crash the system via watchdog timeout.\n2. fallocate(2) is not interruptible by signal.\n\nIn Linux, fallocate iteratively allocates folios, while checking for\ninterrupts. See mm/shmem.c:shmem_fallocate().\n\nTo solve these problems, this patch changes tmpfs Allocate() to work in\n4 GiB chunks and checks for interrupts between chunks, which also pets the\nwatchdog. We also drop tmpfs.regularFile.dataMu between chunks to prevent other\ngoroutines waiting on dataMu from triggering a watchdog timeout.\n\nNote that this still may not fix watchdog crashes caused by other goroutines\nwaiting on tmpfs.inode.mu during a large fallocate(2).\n\nReported-by: syzbot+269e5666da366a3ef2f6@syzkaller.appspotmail.com\nSuggested-by: Jamie Liu <jamieliu@google.com>\nPiperOrigin-RevId: 570551795", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5dccaad67714a4f522a6341d257d18be0fafbf5a", "commit_date": "2023-10-04T01:04:43Z", "commit_message": "abi/linux: fix TASK_SIZE in case of 5-level paging\n\nOn x86, 5-level paging enables 56-bit userspace virtual address space.\n\nPiperOrigin-RevId: 570549277", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0adbdec504d376f1c68f2dbace18dec9dd23d55c", "commit_date": "2023-10-04T00:30:53Z", "commit_message": "fix: outdated line in debugging.md doc", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b667130795267c0afb784a9bad71a5a74e48fde0", "commit_date": "2023-10-03T22:01:49Z", "commit_message": "Clean up and re-enable process_vm_readv/writev\n\nSome fixes:\n\n* First argument of Task.CopyContext should always be the context.Context\n  derived from the currently running task, because it is used to get a\n  CopyScratchBuffer, which must be from the current task. This solved a bunch\n  of data races.\n\n* Fix logic around which process is remote and which is local. These were\n  getting mixed up.\n\n* Always read iovec structs (local and remote) from the local process's address\n  space, since they are syscall arguments. Only use the remote process address\n  space to read the memory pointed to by the remote iovecs.\n\n* Added ptrace permissions check, per linux.\n\n* Delete unused code from kernel/task_usermem.go\n\n* Rewrote tests so that we read to (write from) a subprocess, rather than the\n  other way around. So we don't need CAP_PTRACE to run the tests.\n\n* Also make tests async-signal-safe after call to fork(). I think this was the\n  source of the flakyness on linux previously.\n\nPiperOrigin-RevId: 570506366", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f5692dd20360d071edd504cb7531eb8500160f7", "commit_date": "2023-10-03T21:34:53Z", "commit_message": "`bpf`: Replace most uses of `linux.BPFInstruction` with `bpf.Instruction`.\n\n`bpf.Instruction` is the same type as `linux.BPFInstruction`, except that it\nuses the BPF instruction-to-string decoder to give a nice human-readable\nstringification.\n\nPiperOrigin-RevId: 570499020", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d5198a863bf446facdb50d48f2dae4a5e05f583", "commit_date": "2023-10-03T18:57:01Z", "commit_message": "Add IsDescendant to FilesystemImpl.\n\nIsDescendant gives the VFS layer an easy way to check if a dentry is a\ndescendant of another, which is important for some mounting procedures.\n\nThis method does not take any locks when accessing the parent, so parent\nfields need to switch to be atomic to avoid data races.\n\nPiperOrigin-RevId: 570454446", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44633287ca35e227a0644e880a9bddfb14c6b6c4", "commit_date": "2023-10-03T17:29:12Z", "commit_message": "Automated rollback of changelist 549837326\n\nPiperOrigin-RevId: 570426281", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "83cfe82ea96851637f20f24de26ca7ea5919e2f3", "commit_date": "2023-10-03T17:26:09Z", "commit_message": "Fix pivot_root to put the old root on the topmost mount stacked at put_old.\n\nPiperOrigin-RevId: 570425445", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "122923b14baccecd65b751f881d1d50700de5706", "commit_date": "2023-10-03T17:16:35Z", "commit_message": "Add mount type check in TestOverlayByMountAnnotation.\n\nThis is to ensure that the mount is displayed as an overlay to the application.\n\nPiperOrigin-RevId: 570422885", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c74f5866cb75bb5c712a69341c282da8e4920e59", "commit_date": "2023-10-03T17:07:40Z", "commit_message": "Fix circular lock that can happen during unlink.\n\nReported-by: syzbot+d93d90350a33fbd2c8b9@syzkaller.appspotmail.com\nPiperOrigin-RevId: 570420492", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e18a826d91d20409ef32cd98c9b0512aadeb93d", "commit_date": "2023-09-27T23:55:49Z", "commit_message": "`stateify`: Add `+stateify identtype` tag for identical type definitions.\n\nThis allows serialization of type definitions identical of stateifiable\nstruct types.\n\nContext: I want to add a `bpf.Instruction` library which is a type definition\nof `linux.BPFInstruction` (but with nicer helper functions), and keep its\nserializability.\n\nSample output for\n\n```go\n// +stateify savable\n// +stateify alias:linux.BPFInstruction\ntype Instruction linux.BPFInstruction\n```\n\n```go\nfunc (ins *Instruction) StateTypeName() string {\n        return \"pkg/bpf.Instruction\"\n}\n\nfunc (ins *Instruction) StateFields() []string {\n        return (*linux.BPFInstruction)(ins).StateFields()\n}\n\n// +checklocksignore\nfunc (ins *Instruction) StateSave(stateSinkObject state.Sink) {\n        (*linux.BPFInstruction)(ins).StateSave(stateSinkObject)\n}\n\n// +checklocksignore\nfunc (ins *Instruction) StateLoad(stateSourceObject state.Source) {\n        (*linux.BPFInstruction)(ins).StateLoad(stateSourceObject)\n}\n```\n\nPiperOrigin-RevId: 568999266", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7594667507d7114e142d8c19810cbfe53088be46", "commit_date": "2023-09-27T00:35:33Z", "commit_message": "Internal change.\n\nPiperOrigin-RevId: 568695436", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "485de2f6a71bace2eca4b9cc9268ad00f167f409", "commit_date": "2023-09-26T02:53:38Z", "commit_message": "test/syscalls: run tests in the single thread mode\n\nIt allows us to avoid side effects on forking new processes.\n\nPiperOrigin-RevId: 568391853", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e81e0c72a70b0ffe31dba1e5b5b3a12e18f21cad", "commit_date": "2023-09-23T07:47:37Z", "commit_message": "Add NV_MEMORY_FABRIC to nvproxy.\n\nFixes #9372\n\nPiperOrigin-RevId: 567816690", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b5dea0ea0972850900b47f63655a3c0f7e033a6d", "commit_date": "2023-09-23T02:51:10Z", "commit_message": "bazel: update bazel_gazelle to v0.33.0\n\nThis has to fix the error:\nexternal/bazel_gazelle/repo/BUILD.bazel:3:11:\n  no such package '@org_golang_x_tools//go/vcs\n\nPiperOrigin-RevId: 567774709", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "853c80007fc42ee037da7901b227ad9732d2a322", "commit_date": "2023-09-22T20:38:04Z", "commit_message": "Add library to benchmark gVisor's `seccomp-bpf` filters.\n\nThe first step to optimizing something is to measure it.\n\nThis creates a `secbench` library which can benchmark the time it takes to\nrun an application \"Profile\", which is a weighted-random set of syscall\nsequences, under a given `seccomp-bpf` filter.\n\nThe `secbench` library runs two subprocesses which run the same set of system\ncalls using this application profile. One of the subprocesses runs with the\nseccomp-bpf filter, and the other one runs without it. The library computes\nthe difference, and reports this duration as the time it takes to run the\nseccomp-bpf filter for that system call. It also reports the overall time it\ntakes to run the weighted-random set of system calls, useful as a general\nmeasure of the overhead that the application will see.\n\nPiperOrigin-RevId: 567704927", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "81b7b4aa14c2f425ce1885aa8185a1f34bbdfd24", "commit_date": "2023-09-22T19:05:49Z", "commit_message": "Merge pull request #9416 from avagin:bazel-update\n\nPiperOrigin-RevId: 567682759", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "de5271b36007f28f113db82b16d03cdb7efa0e5e", "commit_date": "2023-09-22T17:48:35Z", "commit_message": "Fix small data race in mount.\n\nReported-by: syzbot+eaf165c341800b20949c@syzkaller.appspotmail.com\nPiperOrigin-RevId: 567662206", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a277f53f250910d23534a3fc4401840008296f4d", "commit_date": "2023-09-22T17:35:43Z", "commit_message": "Fix atomicOTrunc implementation in fusefs.\n\nIf FUSE connection does not support atomic O_TRUNC and application calls\nopen(O_TRUNC), FUSE should truncate the file *first* (without a file handle)\nand then subsequently open the file with O_TRUNC filtered out.\n\nWe were truncating the file after open(). There were 2 issues with it:\n1. We were using the inode's file handle, which may be invalid at this point\n   because it is donated to the first FD (to save an open(2) RPC I believe)\n   and that FD can close it.\n2. The truncate() was being done with fhOptions.useFh = true. However,\n   sometimes the file handle might be read-only causing truncate to fail.\n\nFixed both issues by moving the truncate above open() and making it not use any\nfile handles.\n\nPiperOrigin-RevId: 567658664", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9794276875d1e8ebadfb6d97760c2847e36ef7b0", "commit_date": "2023-09-22T05:33:21Z", "commit_message": "bazel: update golang to 1.21.1\n\nand update a few other packages.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "19250b87ede7311b70238dcd7329e3096a1b49d5", "commit_date": "2023-09-22T01:54:59Z", "commit_message": "Use the last NVIDIA_VISIBLE_DEVICES value from spec.\n\nAs described in #9401, we should use the last value of NVIDIA_VISIBLE_DEVICES\nfrom the container spec to emulate nvidia-container-runtime-hook correctly.\n\nFixes #9401\n\nPiperOrigin-RevId: 567480580", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fcacbf17c6171bcc3d406bb378b95b7c18dc82ce", "commit_date": "2023-09-22T01:29:12Z", "commit_message": "buildkite: build arm64 docker images on arm64 agents\n\nPiperOrigin-RevId: 567476463", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "05b7c55c13204f3a3b42ccf17e8252015b40353d", "commit_date": "2023-09-21T23:07:04Z", "commit_message": "Do not interpret GPU index as GPU device minor.\n\nThere are 3 ways to identify a GPU device that are relevant:\n1. GPU Index: This is the index of the GPU in PCIe ordering.\n2. GPU Device Minor: This is the minor device number. The GPU device number\n   on the system is 195:minor.\n3. /dev/nvidia#: The GPU can be accessed via the device mounted at this path.\n\nnvproxy incorrectly assumed that all 3 identifiers are the same. In reality,\nonly (2) and (3) are always the same. (1) can differ, as demonstrated in #9389.\n\nSo passthrough the value of `NVIDIA_VISIBLE_DEVICES` to `nvidia-container-cli`\nwhile invoking the `configure` command via the `--devices` flag. The CLI uses\nNVML to figure out the GPU Index -> GPU Device mapping and mounts the right\ndevices into the containers root filesystem at /container/rootfs/dev/. We\nsubsequently scan this directory to *infer* the GPU devices exposed to the\ncontainer. This information in plumbed through various places and appropriate\nvirtualized gVisor devices are created.\n\nAn unintended benefit of this is that identifying GPUs via GPU UUIDs now works!\nEarlier we only accepted GPU index. Now we can just pass through GPU UUID to\nthe CLI and it will deal with it. So `docker run --gpus=\"device=GPU-4e716e7d\"\nworks now.\n\nAlternatives considered:\n1. Parsing `nvidia-container-cli info` output to figure out index -> minor\n   mapping. However, this is a costly operation (as reported in #9215) which\n   can take 2-3 seconds.\n2. Using NVML in runsc via nvidia/go-nvml library. Apart from the downsides of\n   adding another third party dependency, this entails that we duplicate logic\n   from nvidia-container-cli into runsc (mainly logic around\n   src/cli/common.c:select_devices()). This is technical debt and won't age\n   well (will require us to mimic updates to CLI into runsc).\n\nFixes #9389\n\nPiperOrigin-RevId: 567443164", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae1294b4358c10e453b792db1747233abbe6169c", "commit_date": "2023-09-21T18:42:16Z", "commit_message": "Internal change.\n\nPiperOrigin-RevId: 567370524", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f744f443dd7d24ad675fa5c82f3998e624d696fd", "commit_date": "2023-09-21T17:34:27Z", "commit_message": "Check before attempting to mount an anon mountpoint.\n\nReported-by: syzbot+9575c881cd3f35eea483@syzkaller.appspotmail.com\nPiperOrigin-RevId: 567349098", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "97f276fb2aecc8975634234ca9b11cf2f0e1e479", "commit_date": "2023-09-21T17:23:03Z", "commit_message": "Merge pull request #9409 from btw616:misc-cleanups\n\nPiperOrigin-RevId: 567345635", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "222147462633e9ef5a34af89d5cc6050c81b0367", "commit_date": "2023-09-21T17:06:10Z", "commit_message": "Merge pull request #9406 from avagin:systrap-pdeathsig\n\nPiperOrigin-RevId: 567339130", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "944d4185e4bdc4f07a255bc848c66d00f9da1938", "commit_date": "2023-09-21T05:23:40Z", "commit_message": "Minor filesystem cleanups\n\n- Update the remaining platform.File references in comments and\n  documentation. platform.File has been moved in memmap by commit\n  f347a578b79c (\"Move platform.File in memmap\").\n\n- Remove redundant bit operations in statTo in tmpfs. STATX_SIZE and\n  STATX_BLOCKS has been set at the beginning of the function, there\n  is no need to do it again for regular files.\n\n- Change \"\\tmp\" to \"/tmp\" in pathname, as '\\' is not a valid path\n  delimiter in Linux. \"/tmp\" looks better.\n\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "814eaf3b77ef695ffd00b83a9db7e1ae6d494d1e", "commit_date": "2023-09-21T03:19:36Z", "commit_message": "systrap: set PDEATHSIG right after forking a sysmsg thread\n\ncontainer_test:TestGoferExits fails by timeout, because there are some\nsysmsg threads survived sandbox process death. When we fork a new sysmsg\nthread, it is traced with PTRACE_O_EXITKILL, so we need to set PDEATHSIG\nbefore detaching from it.\n\nSigned-off-by: Andrei Vagin <avagin@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1531147bf2e9b63f9bb068d808582c1ab5cc022d", "commit_date": "2023-09-20T20:06:08Z", "commit_message": "Automated rollback of changelist 564000728\n\nPiperOrigin-RevId: 567054388", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1c8e91d04c692978b50c1bad48f7c41193fa0922", "commit_date": "2023-09-20T19:58:03Z", "commit_message": "fs/overlay: create the \"work\" directory in `workdir`\n\nLinux creates the \"work\" directory in `workdir`.  Docker calls chown on it and\nfails if it doesn't exist.\n\nPiperOrigin-RevId: 567053404", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "02f70b5df083b640c427290ba2229bcdfe486ad9", "commit_date": "2023-09-20T19:38:39Z", "commit_message": "Implement a subset of `keyctl(2)` and `keyrings(7)` for better Docker support.\n\nThe intention of this change is to cover a sufficient surface to accommodate\nthe use of running Docker within gVisor, rather than a full implementation.\n\nThis implements the following features:\n\n  - Keys as a first-class concept in the kernel.\n  - Tracking keys in user namespaces.\n  - Task session keyrings: possession, inheritance.\n  - Key permission enforcement.\n  - The following `keyctl(2)` operations:\n    - `KEYCTL_GET_KEYRING_ID`\n    - `KEYCTL_DESCRIBE`\n    - `KEYCTL_JOIN_SESSION_KEYRING`\n    - `KEYCTL_SETPERM`\n\nNotably, this does not implement:\n\n  - The ability to actually add any keys other than the session keyring\n    (which does not hold any cryptographic key data).\n  - Other special keyrings (thread keyring, process keyring, user session\n    keyring, etc.).\n  - Lots of `keyctl(2)` operations.\n  - Key expiration.\n  - Key garbage collection. Keys live until their user namespace is destroyed.\n    However, each user namespace is limited to 200 keys, so memory growth is\n    bounded.\n  - `add_key(2)`\n  - `request_key(2)`\n\n... However, this makes design choices that seem odd given the limited scope\nof this change, but make sense when taking into account the desire to\neventually accommodate them in the future. For example, there are many\n`switch` statements with only one option for session keyrings, which would get\nmore options when adding support for other special keyrings. Similarly, the\nsignature of `PossessedKeys` takes in all 3 special \"possessed\" keyrings, but\ncurrently only ever gets the session keyring as non-nil.\n\nPiperOrigin-RevId: 567047896", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "81a42184e191be69f1624ee3481e66049e40da12", "commit_date": "2023-09-20T18:41:32Z", "commit_message": "Reorder nvidia driver versions.\n\nPiperOrigin-RevId: 567031594", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "539a8464f35e16892b31df860fc9c2a798af68d1", "commit_date": "2023-09-20T17:39:20Z", "commit_message": "Qualify NVIDIA 525.125.06 driver version.\n\nDriver version has been qualified on GKE w/ nvidia's basic workload\nand pytorch benchmarks.\n\nPiperOrigin-RevId: 567009651", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4cd842b20a3ce91952f85c4ef6910b0e87917c65", "commit_date": "2023-09-19T21:51:59Z", "commit_message": "Automated rollback of changelist 557941259\n\nPiperOrigin-RevId: 566749598", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "640ec03f92ade885c2ee3b4829039dd08f9adf43", "commit_date": "2023-09-19T21:10:52Z", "commit_message": "Fix mount table corruption.\n\nBefore this, mount propagation could cause multiple mounts to have the same\nparent and mountpoint, violating the mountTable contract. Now, when there's\nan existing mount at a propagation point, it's added as a child of the new\nmount.\n\nPiperOrigin-RevId: 566738099", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "949461f2b3624329b4c02744e10c631dabd53eaa", "commit_date": "2023-09-19T20:46:56Z", "commit_message": "Automated rollback of changelist 558922801\n\nPiperOrigin-RevId: 566731014", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "181a57866ad0fab5f50e139e789a19314e7e8eaa", "commit_date": "2023-09-19T19:37:33Z", "commit_message": "Add ABI for `keyctl(2)`.\n\nPiperOrigin-RevId: 566711348", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "50c62321fdd077c3cad9c420cf2776047ffa89a7", "commit_date": "2023-09-19T19:14:19Z", "commit_message": "KVM: Remove `_` prefix from KVM `ioctl` constants.\n\nThis is useful to be able to refer to them from external packages, such as\nto represent the `ioctl(2)` syscall profile that the Sentry has with the\nKVM platform.\n\nPiperOrigin-RevId: 566705114", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8675708cb8356da419398863e9f997b5cc437bf0", "commit_date": "2023-09-19T17:48:35Z", "commit_message": "Handle arbitrarily large Fuse Dirent Namelen.\n\nIf FUSEDirent.Namelen is larger than the remaining payload size, then the\ndirent is probably invalid. We should skip it.\n\nPiperOrigin-RevId: 566678679", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8a7617aed21c3d17d8a2570d7e22cf27c2692e17", "commit_date": "2023-09-18T23:46:52Z", "commit_message": "Move pytorch benchmark to GPU directory.\n\nThe pytorch image is huge, about 7-8 GB. This doesn't\nneed to be downloaded with the other benchmark images. Move\nit to a GPU directory to speed up benchmark runs.\n\nPiperOrigin-RevId: 566449296", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "313485846896a73bb39d985a221b1aa46e85dc8a", "commit_date": "2023-09-16T03:02:41Z", "commit_message": "Tweaks to containerd tests and helpers.\n\nPiperOrigin-RevId: 565839195", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d81768d4c8d29d2a2e0880f615d04e1dd79c88c7", "commit_date": "2023-09-16T02:44:22Z", "commit_message": "Remove peer credential check from control server.\n\nThe peer credential check worked by querying the peer's UID using SO_PEERCRED.\nHowever, when sandbox is configured with custom UID/GID mappings, which it is\nin the following situations:\n1. When not using directfs, sandbox has a mapping of only `65534:65534:1`. So\n   all other non-65534 UIDs are unmmaped.\n2. When using directfs with userns-remap. The sandbox has the same UID/GID\n   mapping as the container.\n\nIn these cases, when the root user tries to connect, the host root user is not\nmapped. Unmapped IDs are translated to overflowuid/gid, which happens to\ndefault to 65534. This leads to unexpected results:\n- Without directfs, this check allows any connection, because sandbox is also\n  running as nobody/65534.\n- In the directfs+userns-remap case, all connections are denied.\n\nThis check doesn't really enforce anything. Hence remove it.\n\nThe real enforcement mechanism is the file mode of the unix domain socket over\nwhich the connection happens. The socket file's mode depends on umask, which\ndefaults to 022. Hence only the user which creates the sandbox via\n`runsc create` has write permission on this socket. So only the sandbox creator\nor root can connect to the sandbox, as intended.\n\nFixes #9356\n\nPiperOrigin-RevId: 565836818", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5ff1e908156acadf98e2473c349f879ff54ec7e7", "commit_date": "2023-09-15T21:58:29Z", "commit_message": "Add state:\"nosave\" annotation to nvproxy.objsMu.\n\nWith this, checkpoint command succeeds on nvproxy containers.\n\nUpdates #9363.\n\nPiperOrigin-RevId: 565786118", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "36b9b19daca9e7d723388132e787e3010aa30711", "commit_date": "2023-09-15T20:13:26Z", "commit_message": "Do not use abstract sockets for control server.\n\nAny user can connect to an abstract socket. See \"Abstract sockets\" section in\nunix(7). Filesystem UDS requires write permission to connect to. Hence, file\nmode is used to protect the server.\n\nPiperOrigin-RevId: 565759783", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8c40c16ba80e487c1fc6d24f539f33b902e8aca4", "commit_date": "2023-09-15T18:41:00Z", "commit_message": "Exempt proposal issues from being closed as stale.\n\nProposals usually have more longevity and contain interesting ideas.\nAlso clean up \"new feature\" and \"enhancement\" from the list. Those labels don't\nexist in gVisor repo.\n\nPiperOrigin-RevId: 565735357", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d353f07ba5bb62d0b58ba741e3f6d88774c35a79", "commit_date": "2023-09-15T18:19:57Z", "commit_message": "Merge pull request #9381 from testwill:typo\n\nPiperOrigin-RevId: 565729064", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a99bf4a8ad59d17cd039837dc5da2f88f86cd50c", "commit_date": "2023-09-15T06:47:10Z", "commit_message": "fix: successfully typo", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b192bf37363f5ad18a533cb19448a32326613316", "commit_date": "2023-09-15T03:56:26Z", "commit_message": "Handle large control socket paths.\n\nUDS connect and bind fail when the socket path being used is more than 107 in\nlength. Shorten the path using procfs: \"/proc/self/fd/{parentFD}/{sockName)\"\n\nThis avoids falling back to using abstract sockets in some instances.\n\nSuggested-by: Andrei Vagin <avagin@google.com>\nPiperOrigin-RevId: 565557006", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e01d4387d2e4af562201ba93c8e93074836ae130", "commit_date": "2023-09-15T00:26:31Z", "commit_message": "Merge pull request #9377 from milantracy:codeqlstatus\n\nPiperOrigin-RevId: 565522379", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "29d82338fc2a5a19b99f28f2622439d31bd4b8fb", "commit_date": "2023-09-14T22:34:53Z", "commit_message": "Enhance stale action with more labels and a smaller close window.\n\nThe action also ignores a few more labels.\n\nPiperOrigin-RevId: 565494794", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f7da79cbce2a608a225ab5e056f710347ff0262", "commit_date": "2023-09-14T22:30:55Z", "commit_message": "Add CodeQL status badge for its visibility.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73f4b821a1696a215590417549fbea03fe07a8f5", "commit_date": "2023-09-14T21:53:26Z", "commit_message": "Change namespace cloning so that it clones mounts depth-first.\n\nThis saves on allocations.\n\nThis change is a subset of the changes in cl/563529897 and cl/563752003.\nCommitting this change in more discrete parts will help narrow down the\ncauses of b/299603749.\n\nPiperOrigin-RevId: 565484026", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c0a9bb7b3ab6514323b52e81a5bd52210bbed490", "commit_date": "2023-09-14T20:25:12Z", "commit_message": "Additionally expect the custom tos/tclass in TOS_TCLASS_EXPECT_DEFAULT case.\n\nPiperOrigin-RevId: 565458888", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad68fe1d68c5ab7adcb85aec313dc48f2f4080a7", "commit_date": "2023-09-14T18:04:00Z", "commit_message": "images: use gcr.io/syzkaller/syzbot as the base for syzkaller images\n\ngcr.io/syzkaller/env isn't built for ARM64.\n\nPiperOrigin-RevId: 565419016", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3dda3741d8eb531b9f284e4d70d86c952bce94c8", "commit_date": "2023-09-13T19:01:52Z", "commit_message": "Fix CodeQL so that it does not fail the github check.\n\nPiperOrigin-RevId: 565119657", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9117572ae02ffe41efd7ea51e64d4a4f413b88e1", "commit_date": "2023-09-13T17:25:05Z", "commit_message": "Add \"type: enhancement\" to labels protected from the stale action.\n\nPiperOrigin-RevId: 565089338", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b86d06d7e51b1e70c2c627e04c5300fa035fcd81", "commit_date": "2023-09-13T00:37:50Z", "commit_message": "Merge pull request #9215 from ekzhang:ekzhang/perf-nvidia-cli-info\n\nPiperOrigin-RevId: 564882593", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "94500414c9170f00d4351339bfd87683e02674f3", "commit_date": "2023-09-12T18:41:11Z", "commit_message": "Merge pull request #9359 from milantracy:codeqlconfig\n\nPiperOrigin-RevId: 564786128", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1910a4577f0183bf444660985f30dc78ef3a74ca", "commit_date": "2023-09-12T18:29:05Z", "commit_message": "cgroupfs: do not return errors from strconv.ParseInt() to write()\n\nArbitrary errors are not convertible to errnos for syscall return and cause the\nsentry to panic.\n\nPiperOrigin-RevId: 564782206", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6d06f309ed5d76dc4c085ab88166f8f5a6161b04", "commit_date": "2023-09-12T17:23:03Z", "commit_message": "Increase stale action ops per run.\n\nRight now we're capped at 30, but have 569 open issues and 192 open PRs.\n\nPiperOrigin-RevId: 564760282", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8758e992c5ca892be1830534a62cc85298061016", "commit_date": "2023-09-11T19:51:18Z", "commit_message": "perf: Remove call to nvidia-container-cli info\n\nThis call is repeated on every container startup sequence, but it is expensive, consistently taking between 2-3 seconds to run each time. This adds a significant amount of startup latency to every container. From `strace` output, the main issue appears to be a call to `openat(AT_FDCWD, \"/dev/nvidia0\", O_RDWR|O_CLOEXEC)`. The first time this is called, it creates a new open device file descriptor and blocks for 2 seconds while doing so. This was measured on a `g4dn.2xlarge` instance on AWS, running a Tesla T4 GPU.\n\nFor comparison, the `nvidia-container-prestart-hook` for runc also runs `nvidia-container-cli` during container boot, but it only calls it once for the `configure` command. gVisor appears to call it twice, once for `info` and then for `configure`.\n\nBy removing the `info` call, or at least only running it when the GPU device files are not already present on the host, GPU container startups can be 2-3 seconds faster.\n\nDoes this sound reasonable? I'm not actually familiar with why the `/dev/nvidia0` file takes 2-3 seconds to open, or why GPU device files need to be explicitly loaded. But I tested the change, and gVisor nvproxy still works.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8f2bb6d21ba55b13d6356cb78d7039b2b0dfe51", "commit_date": "2023-09-11T19:01:06Z", "commit_message": "Don't build tensorflow image on ARM.\n\nThe upload image test is failing due to the tensorflow image not being\nsupported on ARM.\n\nPiperOrigin-RevId: 564458336", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1afe6d14e767dd359840b29a55fb849b5a2efb74", "commit_date": "2023-09-11T18:41:47Z", "commit_message": "Add initial CodeQL config for gVisor.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb4410f44e3291f7aa34a2655cd683cac7d149cb", "commit_date": "2023-09-09T13:50:38Z", "commit_message": "Rollback 6ceceae9385c and 206e88db3653.\n\nSyzkaller is reporting crashes relating to changes made by these commits.\nRolling back for now. Should be rolled forward with fix.\n\nReported-by: syzbot+9868746b8b0f679da548@syzkaller.appspotmail.com\nPiperOrigin-RevId: 564000728", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "717539fbd78ae05798fa00712556ec15a55b7156", "commit_date": "2023-09-08T20:57:42Z", "commit_message": "Return user_mss if user_mss is set and socket is unconnected.\n\nHas the same effect as Linux commit 34dfde4ad87b (\"tcp: Return user_mss for\nTCP_MAXSEG in CLOSE/LISTEN state if user_mss set\").\n\nUpdated test to accept both values (default and user set) so test works on\nnewer and older kernels.\n\nPiperOrigin-RevId: 563844012", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad275a100e58195f8e4f441befba3327be51ff04", "commit_date": "2023-09-07T23:28:00Z", "commit_message": "Fix debug builds.\n\nThis change also adds instructions for using a debugger with syscall tests.\n\nFixes #9039\n\nPiperOrigin-RevId: 563576842", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "206e88db3653b4de668a5a4f51406fc6967150df", "commit_date": "2023-09-07T20:37:20Z", "commit_message": "Fix cwd/root update method during namespace cloning.\n\nThe previous implementation incorrectly assumed order would be preserved\nin the map.\n\nReported-by: syzbot+da2bc2bee99641f22de4@syzkaller.appspotmail.com\nPiperOrigin-RevId: 563529897", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "27d7936e933a89c0b55c20966a13ffb40ad2abca", "commit_date": "2023-09-07T17:08:15Z", "commit_message": "Fix github workflow test.\n\nPiperOrigin-RevId: 563466164", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c215e67a50f8f6f4d51072318571e0ab54562bc8", "commit_date": "2023-09-07T00:27:02Z", "commit_message": "Let devices cgroup add/remove rules via devices.allow and devices.deny.\n\nPiperOrigin-RevId: 563261158", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6ceceae9385c44d639a2aebc78bf3b4a8e970e05", "commit_date": "2023-09-06T22:43:02Z", "commit_message": "Abstract mount tree cloning into its own mount method.\n\nWhen copying a mount tree, new child mounts are added to a mount's\npending list. Each of these mounts has its pending mountpoint already set\nwith setKey. Eventually this method will be used to enable recursive binds.\n\nPiperOrigin-RevId: 563236298", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2319f958fc930d0a0980e094928bc233976b8992", "commit_date": "2023-09-06T21:58:03Z", "commit_message": "Automated rollback of changelist 536743330\n\nPiperOrigin-RevId: 563224104", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8aee177900da1a2a59f7cc6ca79d688677394008", "commit_date": "2023-09-06T21:06:31Z", "commit_message": "Add more justification about why shared mount propagation is not allowed.\n\nUpdates #9324\n\nPiperOrigin-RevId: 563208592", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4146284b601b8e7c551bf172c5fc1f2c7cb972c5", "commit_date": "2023-09-06T20:58:08Z", "commit_message": "Merge pull request #9339 from kevinGC:tcsetsf2\n\nPiperOrigin-RevId: 563207341", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0230a371c23bd4d750e7e60e0e4bf7223ef7087f", "commit_date": "2023-09-06T20:29:19Z", "commit_message": "Merge pull request #9336 from thundergolfer:jonathon/dev-pts-eof-handling\n\nPiperOrigin-RevId: 563199056", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e550bfbd052ddbec0ab214aa1991fad711cf013b", "commit_date": "2023-09-06T20:13:19Z", "commit_message": "Have lgetxattr return ENODATA.\n\nIt is a workaround to lgetxattr/lsetxattr working with security.capacity when running docker in gvisor.\n\nPiperOrigin-RevId: 563194162", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f22d854395ff29a377c5f4fb5100635b9856bb4e", "commit_date": "2023-09-06T19:30:10Z", "commit_message": "Merge pull request #9327 from kevinGC:benchmarkxdp\n\nPiperOrigin-RevId: 563182220", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d30c39364daa7c6b5cca3af7fd9b5935409a6f30", "commit_date": "2023-09-06T17:54:41Z", "commit_message": "Split the ring implementation into its own package.\n\nThe ring data structure's requires it's own implementation of Entry. With\nthe new version you can more easily be part of multiple rings at once. Also,\na user who wants to use ilist probably doesn't need ring as well, so it makes\nsense to separate the two.\n\nPiperOrigin-RevId: 563151782", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c584a1a435d616ec91a58d5cdba892b6bb000128", "commit_date": "2023-09-06T17:05:13Z", "commit_message": "Add a github workflow that marks issues and PRs as stale.\n\nPiperOrigin-RevId: 563136967", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c227d185a4c513aa71eff950506a257d7f95ec8a", "commit_date": "2023-09-06T02:15:45Z", "commit_message": "Emit SentryTcpListenEvent when the application listens on a tcp port.\n\nPiperOrigin-RevId: 562957239", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8c399a0930387c98aeebe073ead309bffbccf01", "commit_date": "2023-09-06T01:18:18Z", "commit_message": "Fix EOF (^D) handling in devpts (partially addr #9333)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e0029cc0ff4b85479177a82e13809b6501809272", "commit_date": "2023-09-05T22:51:21Z", "commit_message": "A few fixes to run tests on 6.2+ kernels\n\n* disable broken socket_inet_loopback test // Lucas Manning\n* disable lseek tests on anon inodes. They have been broken by\ncommit e7478158e1378325907edfdd960eca98a1be405b\nDate:   Wed Jun 29 15:06:57 2022 +0200\n    fs: clear or set FMODE_LSEEK based on llseek function\n\n* don't check memory.kmem.limit_in_bytes, it has been deprecated and dropped:\ncommit 86327e8eb94c52eca4f93cfece2e29d1bf52acbf\nDate:   Tue Jul 4 13:52:40 2023 +0200\n    memcg: drop kmem.limit_in_bytes\ncommit 58056f77502f3567b760c9a8fc8d2e9081515b2d\nDate:   Fri Nov 5 13:37:44 2021 -0700\n    memcg, kmem: further deprecate kmem.limit_in_bytes\ncommit 0158115f702b0ba208ab0b5adf44cae99b3ebcc7\nDate:   Mon Sep 23 15:37:22 2019 -0700\n    memcg, kmem: deprecate kmem.limit_in_bytes\nPiperOrigin-RevId: 562915457", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7928ff6f0c5ce47b3a9a4e0773ca68a5df6d7c93", "commit_date": "2023-09-05T16:53:50Z", "commit_message": "tty: enable `TCSETSF`\n\nWhile there is a difference between flavors of this ioctl (`TCSETS`,\n`TCSETSF`, `TCSETSW`), in practice it seems not to matter. We should let\nusers call `TCSETSF` and can implement those differences if necessary.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a9134c2f04b2e21ce0cfc5b33633ce573aa9429", "commit_date": "2023-08-31T18:09:15Z", "commit_message": "netstack: benchmark xdp endpoint\n\nThis just swaps out the fdbased endpoint for an XDP one. Some related\nchanges in here:\n\n- Moved the AF_XDP BPF program into its own Go package so it can be\n  shared.\n- Added a flag to tcp_benchmark to disable user namespaces. This helps\n  when running as root, which is required to install BPF programs.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}], "dependabot/npm_and_yarn/images/benchmarks/node/qs-and-express-6.11.0": [{"commit_oid": "214c5971c568a86050c3fcc3ae20c5ac3c82a7d6", "commit_date": "2023-10-08T23:26:23Z", "commit_message": "Bump qs and express in /images/benchmarks/node\n\nBumps [qs](https://github.com/ljharb/qs) to 6.11.0 and updates ancestor dependency [express](https://github.com/expressjs/express). These dependencies need to be updated together.\n\n\nUpdates `qs` from 6.7.0 to 6.11.0\n- [Changelog](https://github.com/ljharb/qs/blob/main/CHANGELOG.md)\n- [Commits](https://github.com/ljharb/qs/compare/v6.7.0...v6.11.0)\n\nUpdates `express` from 4.17.1 to 4.18.2\n- [Release notes](https://github.com/expressjs/express/releases)\n- [Changelog](https://github.com/expressjs/express/blob/master/History.md)\n- [Commits](https://github.com/expressjs/express/compare/4.17.1...4.18.2)\n\n---\nupdated-dependencies:\n- dependency-name: qs\n  dependency-type: indirect\n- dependency-name: express\n  dependency-type: direct:production\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "98b368b7fa6fdf437739ff4f9e8913c4e3cabb47", "commit_date": "2023-10-08T23:25:27Z", "commit_message": "Merge pull request #9231 from google:dependabot/bundler/images/benchmarks/ruby/rack-2.2.8\n\nPiperOrigin-RevId: 571787867", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85701f569ba84c5598a7fea79dfc24fef13c6b20", "commit_date": "2023-10-07T23:17:05Z", "commit_message": "Merge pull request #9301 from google:dependabot/bundler/images/benchmarks/ruby/puma-5.6.7\n\nPiperOrigin-RevId: 571635215", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "addac5f2487d85be4de2c93b81b86f1145a4a025", "commit_date": "2023-10-06T23:19:26Z", "commit_message": "Refactor seccomp rules with interfaces rather than disjunctive normal form.\n\nThis replaces the `seccomp.Rule` type with the `seccomp.SyscallRule`\ninterface, which is an abstraction that defines how to match a syscall's\narguments and RIP.\n\nThis has the following benefits:\n\n- The code can verify that rules are self-contained, as the\n  `SyscallRule.Render` contract specifies that the rule must jump to\n  either a \"matched\" or \"not matched\" label, and may not fall through.\n  It uses `ProgramBuilder`'s support for asserting unreachability to\n  enforce this.\n- Rules that match everything are more explicit (no more implicit\n  \"no rules means everything matches\" behavior, instead you have to\n  explicitly specify `seccomp.MatchAll{}`).\n- \"OR\" behavior is explicit (a disjunctive rule is marked as `seccomp.Or`\n  rather than the current implicit meaning of a list of rules).\n- Allows the creation of more sophisticated matching rules that don't work\n  on a per-argument basis. This change does not do any of that yet, it\n  simply refactors existing rules without changing the way they work.\n- Decouples rule-specific rendering code from the larger program generation\n  code (BST, architecture check, etc.).\n\nUnfortunately there is no easy way to split this change into multiple\nsub-changes without introducing additional complexity to support both forms\nof expressing rules, so sorry if this is a large change. But note that it\nis actually net-negative in line count.\n\nDespite the size of this change, please review it carefully, as this is a\nsecurity-sensitive change.\n\nPiperOrigin-RevId: 571459670", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9cb26fd34fcd4278c4d5ca2a4824507bcec7b851", "commit_date": "2023-10-06T21:36:44Z", "commit_message": "netstack: verify stack supports protocol before finding route\n\nNot doing so breaks the assumption of later code that netProto is supported by\nthe stack.\n\nPiperOrigin-RevId: 571436763", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba1c60263e90d47b641054faed47154e4c65e054", "commit_date": "2023-10-06T21:25:06Z", "commit_message": "Merge pull request #9230 from google:dependabot/npm_and_yarn/images/benchmarks/node/minimist-1.2.8\n\nPiperOrigin-RevId: 571434254", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44e0d6d072460444b0112b770f11f975b9883240", "commit_date": "2023-10-06T21:11:55Z", "commit_message": "Unlock putOldMp before retrying the mount checks in pivot_root.\n\nPiperOrigin-RevId: 571431100", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2f99b5ccf1011d7a8cd1e4429540df4ac7576e8", "commit_date": "2023-10-06T20:14:45Z", "commit_message": "Merge pull request #9308 from btw616:erofs-initial-support\n\nPiperOrigin-RevId: 571416660", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "07b9077bfdcc14d27dd29b378d4fdf7914ebd28c", "commit_date": "2023-10-06T20:03:58Z", "commit_message": "Introduce poll_benchmark\n\nThis benchmark performs similar measurements as epoll_benchmark.\n\nPiperOrigin-RevId: 571414062", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "15cc3fcbbd77101638854d5b575ea234804d7f7c", "commit_date": "2023-10-06T03:27:04Z", "commit_message": "Add RmAllocParamType interface for parameter types of NV_ESC_RM_ALLOC.\n\nRefactor codebase to use this interface, instead of manually copying back and\nforth into various structs.\n\nPiperOrigin-RevId: 571208903", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c24ab8dd80d7351834758b13a5a5349d301e1ba", "commit_date": "2023-10-06T00:27:49Z", "commit_message": "Issue FUSE_FLUSH request during file close.\n\nPiperOrigin-RevId: 571178563", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f3de61deed6a01ac9d7d7d6a64cefc36f66fb59c", "commit_date": "2023-10-06T00:09:36Z", "commit_message": "Handle O_PATH correctly with fchmodat(2) and utimensat(2).\n\n- As an optimization, when path was empty and it was allowed to use empty path,\n  setstatat() was invoking the FD-impl directly, instead of going through the\n  FS-impl, in hopes that open FDs can perform these operations more quickly.\n  However, this optimization breaks fchmodat(AT_EMPTY_PATH) for O_PATH FDs\n  because O_PATH FD-impl rejects SetStat() operation. So disabled this\n  optimization for O_PATH FDs.\n- However, this fix revealed that we were now allowing utimes() operations on\n  O_PATH FDs via utimensat(opathFD, path=NULL). Linux disallows this as\n  mentioned in the patch. So fixed utimes codebase to emulate Linux accurately.\n\nFixes #9453\n\nPiperOrigin-RevId: 571174417", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "41208411847841af2dbe9daa36189b35d191b9b2", "commit_date": "2023-10-05T22:56:37Z", "commit_message": "Enable easy creation of independent profiling metrics.\n\nWhen using conditionally compiled metrics there was only one go_tag to rule them\nall. That's kind of a shame because when profiling something specific it's\nnicer to know that only your metrics that you care about are compiled in and\nmetrics that you don't care about aren't.\n\nThis CL makes it easy to create new profiling go_tags, by abstracting the\nprofiling metric init functions under two builder structs: RealMetricBuilder\nand FakeMetricBuilder; these builder structs are the only things that need\nto change between the metrics-ON or OFF versions of conditional metric files\n(aside from the go_tag controlling conditional compilation of course).\nIdeally having to create these files manually wouldn't be necessary at all,\nand we could use a go_template build rule instead, but that doesn't support\nreplacing go:build tags AFAIK.\n\nPiperOrigin-RevId: 571153131", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dcfe2d169e8954ff319790b814b583ad1f0efe4c", "commit_date": "2023-10-05T20:19:06Z", "commit_message": "`seccomp`: Rename `seccomp.MatchAny` to `seccomp.AnyValue`.\n\nThis reduces the diff on an upcoming refactor which modifies all seccomp\nrules.\n\n`AnyValue` better reflects the fact that the matcher is about matching a\nsingle syscall argument value, as opposed to e.g. a rule that allows a\nsyscall through regardless of its argument.\n\nPiperOrigin-RevId: 571110444", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "598fbe650377baa89de751f6cf5e771dd321e101", "commit_date": "2023-10-05T19:08:15Z", "commit_message": "Implement MS_REC.\n\nPiperOrigin-RevId: 571091808", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9aa05f01e038a361a91c13af898e2936aef57aad", "commit_date": "2023-10-05T18:53:26Z", "commit_message": "BPF program builder: Add support for recording/analyzing fragment outcomes.\n\nThis adds a new `Record` function to `bpf.ProgramBuilder`, which returns a\nfunction to stop recording that returns the \"fragment\" of the program made\nof the instructions that were added between the time `Record` was called and\nthe time the stop function was called.\n\nThis fragment can in turn be interrogated for which `Outcomes` may happen\nfrom executing it: returning a value, jumping to a label, jumping away from\nthe fragment, falling through.\n\nThis is useful while building complex BPF programs with nested rules. By\nrecording instructions added by a possibly-nested set of rules (the final\noutcome of which is to jump to a known set of labels), we can now actually\nverify the assertion that the instructions that were added indeed end up\njumping to one of the expected labels, and nothing else.\n\nThis is useful not just for safety but also optimization purposes. In an\nupcoming refactor to argument matching code, I plan to add a \"value matcher\"\ninterface that renders rules that verify the value of the `A` register. Some\nmatchers may need to modify the `A` register in order to work, but others\ndon't. By checking whether the set of instructions modifies `A` or not, the\nhigher-level code can determine whether or not it needs to add code to reload\nthe value of the `A` register or not before moving on to the next matcher.\n\nPiperOrigin-RevId: 571087694", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2f01e3fb90108604e3dfa73df405c792f95e1aab", "commit_date": "2023-10-05T17:00:30Z", "commit_message": "Add an EROFS test in container tests\n\nThis patch adds an EROFS test which checks that the checksums we get\nfrom the target directory in container are identical with the ones\ngot from the source directory that we used to create the EROFS images.\n\nerofs-utils is also added to the default image and will be used to\nbuild the EROFS images during the test.\n\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "09be6cec5e98985a3776286bdc29c26a979fafaa", "commit_date": "2023-10-05T07:51:48Z", "commit_message": "`bpf`: Use optimizer for seccomp-bpf programs.\n\nThis speeds up:\n\n- The Sentry and the Gofer's seccomp-bpf programs\n- User application seccomp-bpf programs\n- Systrap and ptrace seccomp-bpf rules\n\nSome benchmark results with Postgres:\n\n```\n                                   \u2502    before     \u2502                    opt                    \u2502\n                                   \u2502    sec/op     \u2502    sec/op     vs base                     \u2502\nSentrySystrap/Postgres/futex          88.82n \u00b1  2%   81.29n \u00b1  2%   -8.48% (p=0.000 n=519+510)\nSentrySystrap/Postgres/nanosleep      116.9n \u00b1 19%   115.9n \u00b1 17%        ~ (p=0.859 n=350+317)\nSentrySystrap/Postgres/sendmmsg       88.68n \u00b1  1%   81.56n \u00b1  1%   -8.04% (n=519+510)\nSentrySystrap/Postgres/fstat          24.47n \u00b1  3%   24.31n \u00b1  6%        ~ (p=0.832 n=514+502)\n[...]\nSentrySystrap/Postgres-48             71.00n \u00b1  8%   63.00n \u00b1  6%  -11.27% (p=0.002 n=183+181)\n```\n\nPiperOrigin-RevId: 570931073", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9ff4c4593819749623b7b0ead2ca095c4c7a9e89", "commit_date": "2023-10-05T04:48:35Z", "commit_message": "`bpf`: Implement BPF optimizer.\n\nThis performs a few lossless optimizations passes over BPF programs.\n\nThis change does minimal testing and does not test for correctness.\nThe next change incorporates this optimizer in the program builder which *is*\ntested for correctness.\n\nIt is not used anywhere yet, but when putting it on the Sentry filters:\n\n```\n                                   \u2502    before     \u2502                    opt                    \u2502\n                                   \u2502    sec/op     \u2502    sec/op     vs base                     \u2502\nSentrySystrap/Postgres/futex          88.82n \u00b1  2%   81.29n \u00b1  2%   -8.48% (p=0.000 n=519+510)\nSentrySystrap/Postgres/nanosleep      116.9n \u00b1 19%   115.9n \u00b1 17%        ~ (p=0.859 n=350+317)\nSentrySystrap/Postgres/sendmmsg       88.68n \u00b1  1%   81.56n \u00b1  1%   -8.04% (n=519+510)\nSentrySystrap/Postgres/fstat          24.47n \u00b1  3%   24.31n \u00b1  6%        ~ (p=0.832 n=514+502)\n[...]\nSentrySystrap/Postgres-48             71.00n \u00b1  8%   63.00n \u00b1  6%  -11.27% (p=0.002 n=183+181)\n```\n\nPiperOrigin-RevId: 570900358", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cce5b85235bd6d90742b2d5310811efc9284c6bb", "commit_date": "2023-10-05T03:33:43Z", "commit_message": "Add driver versioning support in nvproxy.\n\nThis adds utilities to make it easier to add versioning support in nvproxy.\nThis way we can have different handling of ioctls based on driver versions.\n\nThe largest downside of this solution is the usage of maps instead of switch\nstatements. Switch statements are *way* faster than map accesses. The rationale\nis that most of the latency bound work happens on the GPU for GPU workloads. So\nmicro-optimizations like using switch statements should not be visible.\n\nCo-authored-by: Jamie Liu <jamieliu@google.com>\nPiperOrigin-RevId: 570889581", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d493e93763d029996514d494c944a314b0ef9d4c", "commit_date": "2023-10-05T01:08:58Z", "commit_message": "Implement MS_SLAVE.\n\nThis change implements the MS_SLAVE flag as its described in\nhttps://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt.\nIn the sentry slaves are called followers and masters are called leaders.\n\nPiperOrigin-RevId: 570866579", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e0bdd0d57680d5aa5ac7c6aa1fc03954feb48011", "commit_date": "2023-10-04T22:46:28Z", "commit_message": "Ensure at least page size bytes are read from /dev/{u}random and getrandom(2).\n\nThis undocumented behavior manifests in Linux and some apps depend on it.\nSee drivers/char/random.c:get_random_bytes_user().\n\nFixes #9445\nFixes #4988\n\nPiperOrigin-RevId: 570833447", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c39ecc4eb47a3039c9df959754dc87cf0ba02286", "commit_date": "2023-10-04T22:25:09Z", "commit_message": "The local task in process_vm_read|writev is just the calling task.\n\nWe were using t.ThreadGroup.Leader() as the local task, which led to data races\nreading fields that are owned by the task goroutine. But there's no need to use\nthe Leader, so we just use the calling task everywhere.\n\nPiperOrigin-RevId: 570826256", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cf93d156901b040a50c1baea2cc32b68089bd3e0", "commit_date": "2023-10-04T19:58:14Z", "commit_message": "mount: update root and cwd from cloneMountTree\n\nIn this case, we don't need to enumerate all tree mounts and look up pair\nmounts in the cloned tree.\n\nPiperOrigin-RevId: 570778945", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c6a1db5baec7616983b14ac06e84bee45330a9d3", "commit_date": "2023-10-04T17:52:39Z", "commit_message": "gofer: set nosuid and nodev flags when the root is remounted\n\nThese flags can be locked and mount(MS_BIND|MS_REMOUNT) fails if they are not\nset.\n\nFixes #8921\n\nPiperOrigin-RevId: 570741035", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff6258b2f66a23eac2a9a2cd13d1950832cd40e5", "commit_date": "2023-10-04T16:41:36Z", "commit_message": "Merge pull request #9450 from thundergolfer:jonathon/fix-doc-oct2\n\nPiperOrigin-RevId: 570720356", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8246598313a51a3c16664eebcaaa7e57a35afdbc", "commit_date": "2023-10-04T10:15:39Z", "commit_message": "runsc/debug: add an option to mount a specified filesystem\n\nA new option, --mount fstype:source:destination, is added to the\ndebug command which allows us to mount filesystems for debug purposes.\nCurrently only EROFS is supported.\n\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eca83ac68cdac5846b3836f3e77c0a7e399491b5", "commit_date": "2023-10-04T10:15:30Z", "commit_message": "Add initial support for EROFS\n\nThis patch adds initial support for EROFS [1]. Below is a brief\nsummary of the supported features.\n\nBoth inode formats are supported:\n\n- compact format (32 bytes);\n- extended format (64 bytes);\n\nBelow data layouts are supported:\n\n- flat file data without data inline (no extent);\n- flat file data with tail packing data inline (no extent);\n\nBelow file types are supported:\n\n- directory;\n- regular file;\n- symlink;\n\nSpecial files (e.g. fifo) can be listed, but cannot be accessed.\n\nWith this patch, sentry will be able to mount the EROFS image\ncreated with below command and access the files on it.\n\n mkfs.erofs -E noinline_data <IMAGE FILE> <SOURCE DIRECTORY>\n\n[1] https://docs.kernel.org/filesystems/erofs.html\n\nUpdates #8956\n\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e16f83a45c9a8c28a0e6a750d07f99f8d21a1f6b", "commit_date": "2023-10-04T05:26:46Z", "commit_message": "Return part of mount options via the syscall statfs & fstatfs.\n\nPiperOrigin-RevId: 570589224", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "677d11f22fbe194a6d2786a07a7d5295704c0c48", "commit_date": "2023-10-04T01:17:50Z", "commit_message": "Chunkify tmpfs Allocate().\n\nOn machines with really large RAM, the default tmpfs size limit (50% of RAM\nsize) can still be really large. So tmpfs permits really large fallocate\nrequests. In gVisor, there are 2 problems:\n1. Large fallocate(2) may crash the system via watchdog timeout.\n2. fallocate(2) is not interruptible by signal.\n\nIn Linux, fallocate iteratively allocates folios, while checking for\ninterrupts. See mm/shmem.c:shmem_fallocate().\n\nTo solve these problems, this patch changes tmpfs Allocate() to work in\n4 GiB chunks and checks for interrupts between chunks, which also pets the\nwatchdog. We also drop tmpfs.regularFile.dataMu between chunks to prevent other\ngoroutines waiting on dataMu from triggering a watchdog timeout.\n\nNote that this still may not fix watchdog crashes caused by other goroutines\nwaiting on tmpfs.inode.mu during a large fallocate(2).\n\nReported-by: syzbot+269e5666da366a3ef2f6@syzkaller.appspotmail.com\nSuggested-by: Jamie Liu <jamieliu@google.com>\nPiperOrigin-RevId: 570551795", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5dccaad67714a4f522a6341d257d18be0fafbf5a", "commit_date": "2023-10-04T01:04:43Z", "commit_message": "abi/linux: fix TASK_SIZE in case of 5-level paging\n\nOn x86, 5-level paging enables 56-bit userspace virtual address space.\n\nPiperOrigin-RevId: 570549277", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0adbdec504d376f1c68f2dbace18dec9dd23d55c", "commit_date": "2023-10-04T00:30:53Z", "commit_message": "fix: outdated line in debugging.md doc", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b667130795267c0afb784a9bad71a5a74e48fde0", "commit_date": "2023-10-03T22:01:49Z", "commit_message": "Clean up and re-enable process_vm_readv/writev\n\nSome fixes:\n\n* First argument of Task.CopyContext should always be the context.Context\n  derived from the currently running task, because it is used to get a\n  CopyScratchBuffer, which must be from the current task. This solved a bunch\n  of data races.\n\n* Fix logic around which process is remote and which is local. These were\n  getting mixed up.\n\n* Always read iovec structs (local and remote) from the local process's address\n  space, since they are syscall arguments. Only use the remote process address\n  space to read the memory pointed to by the remote iovecs.\n\n* Added ptrace permissions check, per linux.\n\n* Delete unused code from kernel/task_usermem.go\n\n* Rewrote tests so that we read to (write from) a subprocess, rather than the\n  other way around. So we don't need CAP_PTRACE to run the tests.\n\n* Also make tests async-signal-safe after call to fork(). I think this was the\n  source of the flakyness on linux previously.\n\nPiperOrigin-RevId: 570506366", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f5692dd20360d071edd504cb7531eb8500160f7", "commit_date": "2023-10-03T21:34:53Z", "commit_message": "`bpf`: Replace most uses of `linux.BPFInstruction` with `bpf.Instruction`.\n\n`bpf.Instruction` is the same type as `linux.BPFInstruction`, except that it\nuses the BPF instruction-to-string decoder to give a nice human-readable\nstringification.\n\nPiperOrigin-RevId: 570499020", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9d5198a863bf446facdb50d48f2dae4a5e05f583", "commit_date": "2023-10-03T18:57:01Z", "commit_message": "Add IsDescendant to FilesystemImpl.\n\nIsDescendant gives the VFS layer an easy way to check if a dentry is a\ndescendant of another, which is important for some mounting procedures.\n\nThis method does not take any locks when accessing the parent, so parent\nfields need to switch to be atomic to avoid data races.\n\nPiperOrigin-RevId: 570454446", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44633287ca35e227a0644e880a9bddfb14c6b6c4", "commit_date": "2023-10-03T17:29:12Z", "commit_message": "Automated rollback of changelist 549837326\n\nPiperOrigin-RevId: 570426281", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "83cfe82ea96851637f20f24de26ca7ea5919e2f3", "commit_date": "2023-10-03T17:26:09Z", "commit_message": "Fix pivot_root to put the old root on the topmost mount stacked at put_old.\n\nPiperOrigin-RevId: 570425445", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "122923b14baccecd65b751f881d1d50700de5706", "commit_date": "2023-10-03T17:16:35Z", "commit_message": "Add mount type check in TestOverlayByMountAnnotation.\n\nThis is to ensure that the mount is displayed as an overlay to the application.\n\nPiperOrigin-RevId: 570422885", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c74f5866cb75bb5c712a69341c282da8e4920e59", "commit_date": "2023-10-03T17:07:40Z", "commit_message": "Fix circular lock that can happen during unlink.\n\nReported-by: syzbot+d93d90350a33fbd2c8b9@syzkaller.appspotmail.com\nPiperOrigin-RevId: 570420492", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e18a826d91d20409ef32cd98c9b0512aadeb93d", "commit_date": "2023-09-27T23:55:49Z", "commit_message": "`stateify`: Add `+stateify identtype` tag for identical type definitions.\n\nThis allows serialization of type definitions identical of stateifiable\nstruct types.\n\nContext: I want to add a `bpf.Instruction` library which is a type definition\nof `linux.BPFInstruction` (but with nicer helper functions), and keep its\nserializability.\n\nSample output for\n\n```go\n// +stateify savable\n// +stateify alias:linux.BPFInstruction\ntype Instruction linux.BPFInstruction\n```\n\n```go\nfunc (ins *Instruction) StateTypeName() string {\n        return \"pkg/bpf.Instruction\"\n}\n\nfunc (ins *Instruction) StateFields() []string {\n        return (*linux.BPFInstruction)(ins).StateFields()\n}\n\n// +checklocksignore\nfunc (ins *Instruction) StateSave(stateSinkObject state.Sink) {\n        (*linux.BPFInstruction)(ins).StateSave(stateSinkObject)\n}\n\n// +checklocksignore\nfunc (ins *Instruction) StateLoad(stateSourceObject state.Source) {\n        (*linux.BPFInstruction)(ins).StateLoad(stateSourceObject)\n}\n```\n\nPiperOrigin-RevId: 568999266", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7594667507d7114e142d8c19810cbfe53088be46", "commit_date": "2023-09-27T00:35:33Z", "commit_message": "Internal change.\n\nPiperOrigin-RevId: 568695436", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "485de2f6a71bace2eca4b9cc9268ad00f167f409", "commit_date": "2023-09-26T02:53:38Z", "commit_message": "test/syscalls: run tests in the single thread mode\n\nIt allows us to avoid side effects on forking new processes.\n\nPiperOrigin-RevId: 568391853", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e81e0c72a70b0ffe31dba1e5b5b3a12e18f21cad", "commit_date": "2023-09-23T07:47:37Z", "commit_message": "Add NV_MEMORY_FABRIC to nvproxy.\n\nFixes #9372\n\nPiperOrigin-RevId: 567816690", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b5dea0ea0972850900b47f63655a3c0f7e033a6d", "commit_date": "2023-09-23T02:51:10Z", "commit_message": "bazel: update bazel_gazelle to v0.33.0\n\nThis has to fix the error:\nexternal/bazel_gazelle/repo/BUILD.bazel:3:11:\n  no such package '@org_golang_x_tools//go/vcs\n\nPiperOrigin-RevId: 567774709", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "853c80007fc42ee037da7901b227ad9732d2a322", "commit_date": "2023-09-22T20:38:04Z", "commit_message": "Add library to benchmark gVisor's `seccomp-bpf` filters.\n\nThe first step to optimizing something is to measure it.\n\nThis creates a `secbench` library which can benchmark the time it takes to\nrun an application \"Profile\", which is a weighted-random set of syscall\nsequences, under a given `seccomp-bpf` filter.\n\nThe `secbench` library runs two subprocesses which run the same set of system\ncalls using this application profile. One of the subprocesses runs with the\nseccomp-bpf filter, and the other one runs without it. The library computes\nthe difference, and reports this duration as the time it takes to run the\nseccomp-bpf filter for that system call. It also reports the overall time it\ntakes to run the weighted-random set of system calls, useful as a general\nmeasure of the overhead that the application will see.\n\nPiperOrigin-RevId: 567704927", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "81b7b4aa14c2f425ce1885aa8185a1f34bbdfd24", "commit_date": "2023-09-22T19:05:49Z", "commit_message": "Merge pull request #9416 from avagin:bazel-update\n\nPiperOrigin-RevId: 567682759", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "de5271b36007f28f113db82b16d03cdb7efa0e5e", "commit_date": "2023-09-22T17:48:35Z", "commit_message": "Fix small data race in mount.\n\nReported-by: syzbot+eaf165c341800b20949c@syzkaller.appspotmail.com\nPiperOrigin-RevId: 567662206", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a277f53f250910d23534a3fc4401840008296f4d", "commit_date": "2023-09-22T17:35:43Z", "commit_message": "Fix atomicOTrunc implementation in fusefs.\n\nIf FUSE connection does not support atomic O_TRUNC and application calls\nopen(O_TRUNC), FUSE should truncate the file *first* (without a file handle)\nand then subsequently open the file with O_TRUNC filtered out.\n\nWe were truncating the file after open(). There were 2 issues with it:\n1. We were using the inode's file handle, which may be invalid at this point\n   because it is donated to the first FD (to save an open(2) RPC I believe)\n   and that FD can close it.\n2. The truncate() was being done with fhOptions.useFh = true. However,\n   sometimes the file handle might be read-only causing truncate to fail.\n\nFixed both issues by moving the truncate above open() and making it not use any\nfile handles.\n\nPiperOrigin-RevId: 567658664", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9794276875d1e8ebadfb6d97760c2847e36ef7b0", "commit_date": "2023-09-22T05:33:21Z", "commit_message": "bazel: update golang to 1.21.1\n\nand update a few other packages.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "19250b87ede7311b70238dcd7329e3096a1b49d5", "commit_date": "2023-09-22T01:54:59Z", "commit_message": "Use the last NVIDIA_VISIBLE_DEVICES value from spec.\n\nAs described in #9401, we should use the last value of NVIDIA_VISIBLE_DEVICES\nfrom the container spec to emulate nvidia-container-runtime-hook correctly.\n\nFixes #9401\n\nPiperOrigin-RevId: 567480580", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fcacbf17c6171bcc3d406bb378b95b7c18dc82ce", "commit_date": "2023-09-22T01:29:12Z", "commit_message": "buildkite: build arm64 docker images on arm64 agents\n\nPiperOrigin-RevId: 567476463", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "05b7c55c13204f3a3b42ccf17e8252015b40353d", "commit_date": "2023-09-21T23:07:04Z", "commit_message": "Do not interpret GPU index as GPU device minor.\n\nThere are 3 ways to identify a GPU device that are relevant:\n1. GPU Index: This is the index of the GPU in PCIe ordering.\n2. GPU Device Minor: This is the minor device number. The GPU device number\n   on the system is 195:minor.\n3. /dev/nvidia#: The GPU can be accessed via the device mounted at this path.\n\nnvproxy incorrectly assumed that all 3 identifiers are the same. In reality,\nonly (2) and (3) are always the same. (1) can differ, as demonstrated in #9389.\n\nSo passthrough the value of `NVIDIA_VISIBLE_DEVICES` to `nvidia-container-cli`\nwhile invoking the `configure` command via the `--devices` flag. The CLI uses\nNVML to figure out the GPU Index -> GPU Device mapping and mounts the right\ndevices into the containers root filesystem at /container/rootfs/dev/. We\nsubsequently scan this directory to *infer* the GPU devices exposed to the\ncontainer. This information in plumbed through various places and appropriate\nvirtualized gVisor devices are created.\n\nAn unintended benefit of this is that identifying GPUs via GPU UUIDs now works!\nEarlier we only accepted GPU index. Now we can just pass through GPU UUID to\nthe CLI and it will deal with it. So `docker run --gpus=\"device=GPU-4e716e7d\"\nworks now.\n\nAlternatives considered:\n1. Parsing `nvidia-container-cli info` output to figure out index -> minor\n   mapping. However, this is a costly operation (as reported in #9215) which\n   can take 2-3 seconds.\n2. Using NVML in runsc via nvidia/go-nvml library. Apart from the downsides of\n   adding another third party dependency, this entails that we duplicate logic\n   from nvidia-container-cli into runsc (mainly logic around\n   src/cli/common.c:select_devices()). This is technical debt and won't age\n   well (will require us to mimic updates to CLI into runsc).\n\nFixes #9389\n\nPiperOrigin-RevId: 567443164", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae1294b4358c10e453b792db1747233abbe6169c", "commit_date": "2023-09-21T18:42:16Z", "commit_message": "Internal change.\n\nPiperOrigin-RevId: 567370524", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f744f443dd7d24ad675fa5c82f3998e624d696fd", "commit_date": "2023-09-21T17:34:27Z", "commit_message": "Check before attempting to mount an anon mountpoint.\n\nReported-by: syzbot+9575c881cd3f35eea483@syzkaller.appspotmail.com\nPiperOrigin-RevId: 567349098", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "97f276fb2aecc8975634234ca9b11cf2f0e1e479", "commit_date": "2023-09-21T17:23:03Z", "commit_message": "Merge pull request #9409 from btw616:misc-cleanups\n\nPiperOrigin-RevId: 567345635", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "222147462633e9ef5a34af89d5cc6050c81b0367", "commit_date": "2023-09-21T17:06:10Z", "commit_message": "Merge pull request #9406 from avagin:systrap-pdeathsig\n\nPiperOrigin-RevId: 567339130", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "944d4185e4bdc4f07a255bc848c66d00f9da1938", "commit_date": "2023-09-21T05:23:40Z", "commit_message": "Minor filesystem cleanups\n\n- Update the remaining platform.File references in comments and\n  documentation. platform.File has been moved in memmap by commit\n  f347a578b79c (\"Move platform.File in memmap\").\n\n- Remove redundant bit operations in statTo in tmpfs. STATX_SIZE and\n  STATX_BLOCKS has been set at the beginning of the function, there\n  is no need to do it again for regular files.\n\n- Change \"\\tmp\" to \"/tmp\" in pathname, as '\\' is not a valid path\n  delimiter in Linux. \"/tmp\" looks better.\n\nSigned-off-by: Tiwei Bie <tiwei.btw@antgroup.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "814eaf3b77ef695ffd00b83a9db7e1ae6d494d1e", "commit_date": "2023-09-21T03:19:36Z", "commit_message": "systrap: set PDEATHSIG right after forking a sysmsg thread\n\ncontainer_test:TestGoferExits fails by timeout, because there are some\nsysmsg threads survived sandbox process death. When we fork a new sysmsg\nthread, it is traced with PTRACE_O_EXITKILL, so we need to set PDEATHSIG\nbefore detaching from it.\n\nSigned-off-by: Andrei Vagin <avagin@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1531147bf2e9b63f9bb068d808582c1ab5cc022d", "commit_date": "2023-09-20T20:06:08Z", "commit_message": "Automated rollback of changelist 564000728\n\nPiperOrigin-RevId: 567054388", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1c8e91d04c692978b50c1bad48f7c41193fa0922", "commit_date": "2023-09-20T19:58:03Z", "commit_message": "fs/overlay: create the \"work\" directory in `workdir`\n\nLinux creates the \"work\" directory in `workdir`.  Docker calls chown on it and\nfails if it doesn't exist.\n\nPiperOrigin-RevId: 567053404", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "02f70b5df083b640c427290ba2229bcdfe486ad9", "commit_date": "2023-09-20T19:38:39Z", "commit_message": "Implement a subset of `keyctl(2)` and `keyrings(7)` for better Docker support.\n\nThe intention of this change is to cover a sufficient surface to accommodate\nthe use of running Docker within gVisor, rather than a full implementation.\n\nThis implements the following features:\n\n  - Keys as a first-class concept in the kernel.\n  - Tracking keys in user namespaces.\n  - Task session keyrings: possession, inheritance.\n  - Key permission enforcement.\n  - The following `keyctl(2)` operations:\n    - `KEYCTL_GET_KEYRING_ID`\n    - `KEYCTL_DESCRIBE`\n    - `KEYCTL_JOIN_SESSION_KEYRING`\n    - `KEYCTL_SETPERM`\n\nNotably, this does not implement:\n\n  - The ability to actually add any keys other than the session keyring\n    (which does not hold any cryptographic key data).\n  - Other special keyrings (thread keyring, process keyring, user session\n    keyring, etc.).\n  - Lots of `keyctl(2)` operations.\n  - Key expiration.\n  - Key garbage collection. Keys live until their user namespace is destroyed.\n    However, each user namespace is limited to 200 keys, so memory growth is\n    bounded.\n  - `add_key(2)`\n  - `request_key(2)`\n\n... However, this makes design choices that seem odd given the limited scope\nof this change, but make sense when taking into account the desire to\neventually accommodate them in the future. For example, there are many\n`switch` statements with only one option for session keyrings, which would get\nmore options when adding support for other special keyrings. Similarly, the\nsignature of `PossessedKeys` takes in all 3 special \"possessed\" keyrings, but\ncurrently only ever gets the session keyring as non-nil.\n\nPiperOrigin-RevId: 567047896", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "81a42184e191be69f1624ee3481e66049e40da12", "commit_date": "2023-09-20T18:41:32Z", "commit_message": "Reorder nvidia driver versions.\n\nPiperOrigin-RevId: 567031594", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "539a8464f35e16892b31df860fc9c2a798af68d1", "commit_date": "2023-09-20T17:39:20Z", "commit_message": "Qualify NVIDIA 525.125.06 driver version.\n\nDriver version has been qualified on GKE w/ nvidia's basic workload\nand pytorch benchmarks.\n\nPiperOrigin-RevId: 567009651", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4cd842b20a3ce91952f85c4ef6910b0e87917c65", "commit_date": "2023-09-19T21:51:59Z", "commit_message": "Automated rollback of changelist 557941259\n\nPiperOrigin-RevId: 566749598", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "640ec03f92ade885c2ee3b4829039dd08f9adf43", "commit_date": "2023-09-19T21:10:52Z", "commit_message": "Fix mount table corruption.\n\nBefore this, mount propagation could cause multiple mounts to have the same\nparent and mountpoint, violating the mountTable contract. Now, when there's\nan existing mount at a propagation point, it's added as a child of the new\nmount.\n\nPiperOrigin-RevId: 566738099", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "949461f2b3624329b4c02744e10c631dabd53eaa", "commit_date": "2023-09-19T20:46:56Z", "commit_message": "Automated rollback of changelist 558922801\n\nPiperOrigin-RevId: 566731014", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "181a57866ad0fab5f50e139e789a19314e7e8eaa", "commit_date": "2023-09-19T19:37:33Z", "commit_message": "Add ABI for `keyctl(2)`.\n\nPiperOrigin-RevId: 566711348", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "50c62321fdd077c3cad9c420cf2776047ffa89a7", "commit_date": "2023-09-19T19:14:19Z", "commit_message": "KVM: Remove `_` prefix from KVM `ioctl` constants.\n\nThis is useful to be able to refer to them from external packages, such as\nto represent the `ioctl(2)` syscall profile that the Sentry has with the\nKVM platform.\n\nPiperOrigin-RevId: 566705114", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8675708cb8356da419398863e9f997b5cc437bf0", "commit_date": "2023-09-19T17:48:35Z", "commit_message": "Handle arbitrarily large Fuse Dirent Namelen.\n\nIf FUSEDirent.Namelen is larger than the remaining payload size, then the\ndirent is probably invalid. We should skip it.\n\nPiperOrigin-RevId: 566678679", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8a7617aed21c3d17d8a2570d7e22cf27c2692e17", "commit_date": "2023-09-18T23:46:52Z", "commit_message": "Move pytorch benchmark to GPU directory.\n\nThe pytorch image is huge, about 7-8 GB. This doesn't\nneed to be downloaded with the other benchmark images. Move\nit to a GPU directory to speed up benchmark runs.\n\nPiperOrigin-RevId: 566449296", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "313485846896a73bb39d985a221b1aa46e85dc8a", "commit_date": "2023-09-16T03:02:41Z", "commit_message": "Tweaks to containerd tests and helpers.\n\nPiperOrigin-RevId: 565839195", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d81768d4c8d29d2a2e0880f615d04e1dd79c88c7", "commit_date": "2023-09-16T02:44:22Z", "commit_message": "Remove peer credential check from control server.\n\nThe peer credential check worked by querying the peer's UID using SO_PEERCRED.\nHowever, when sandbox is configured with custom UID/GID mappings, which it is\nin the following situations:\n1. When not using directfs, sandbox has a mapping of only `65534:65534:1`. So\n   all other non-65534 UIDs are unmmaped.\n2. When using directfs with userns-remap. The sandbox has the same UID/GID\n   mapping as the container.\n\nIn these cases, when the root user tries to connect, the host root user is not\nmapped. Unmapped IDs are translated to overflowuid/gid, which happens to\ndefault to 65534. This leads to unexpected results:\n- Without directfs, this check allows any connection, because sandbox is also\n  running as nobody/65534.\n- In the directfs+userns-remap case, all connections are denied.\n\nThis check doesn't really enforce anything. Hence remove it.\n\nThe real enforcement mechanism is the file mode of the unix domain socket over\nwhich the connection happens. The socket file's mode depends on umask, which\ndefaults to 022. Hence only the user which creates the sandbox via\n`runsc create` has write permission on this socket. So only the sandbox creator\nor root can connect to the sandbox, as intended.\n\nFixes #9356\n\nPiperOrigin-RevId: 565836818", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5ff1e908156acadf98e2473c349f879ff54ec7e7", "commit_date": "2023-09-15T21:58:29Z", "commit_message": "Add state:\"nosave\" annotation to nvproxy.objsMu.\n\nWith this, checkpoint command succeeds on nvproxy containers.\n\nUpdates #9363.\n\nPiperOrigin-RevId: 565786118", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "36b9b19daca9e7d723388132e787e3010aa30711", "commit_date": "2023-09-15T20:13:26Z", "commit_message": "Do not use abstract sockets for control server.\n\nAny user can connect to an abstract socket. See \"Abstract sockets\" section in\nunix(7). Filesystem UDS requires write permission to connect to. Hence, file\nmode is used to protect the server.\n\nPiperOrigin-RevId: 565759783", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8c40c16ba80e487c1fc6d24f539f33b902e8aca4", "commit_date": "2023-09-15T18:41:00Z", "commit_message": "Exempt proposal issues from being closed as stale.\n\nProposals usually have more longevity and contain interesting ideas.\nAlso clean up \"new feature\" and \"enhancement\" from the list. Those labels don't\nexist in gVisor repo.\n\nPiperOrigin-RevId: 565735357", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d353f07ba5bb62d0b58ba741e3f6d88774c35a79", "commit_date": "2023-09-15T18:19:57Z", "commit_message": "Merge pull request #9381 from testwill:typo\n\nPiperOrigin-RevId: 565729064", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a99bf4a8ad59d17cd039837dc5da2f88f86cd50c", "commit_date": "2023-09-15T06:47:10Z", "commit_message": "fix: successfully typo", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b192bf37363f5ad18a533cb19448a32326613316", "commit_date": "2023-09-15T03:56:26Z", "commit_message": "Handle large control socket paths.\n\nUDS connect and bind fail when the socket path being used is more than 107 in\nlength. Shorten the path using procfs: \"/proc/self/fd/{parentFD}/{sockName)\"\n\nThis avoids falling back to using abstract sockets in some instances.\n\nSuggested-by: Andrei Vagin <avagin@google.com>\nPiperOrigin-RevId: 565557006", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e01d4387d2e4af562201ba93c8e93074836ae130", "commit_date": "2023-09-15T00:26:31Z", "commit_message": "Merge pull request #9377 from milantracy:codeqlstatus\n\nPiperOrigin-RevId: 565522379", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "29d82338fc2a5a19b99f28f2622439d31bd4b8fb", "commit_date": "2023-09-14T22:34:53Z", "commit_message": "Enhance stale action with more labels and a smaller close window.\n\nThe action also ignores a few more labels.\n\nPiperOrigin-RevId: 565494794", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8f7da79cbce2a608a225ab5e056f710347ff0262", "commit_date": "2023-09-14T22:30:55Z", "commit_message": "Add CodeQL status badge for its visibility.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "73f4b821a1696a215590417549fbea03fe07a8f5", "commit_date": "2023-09-14T21:53:26Z", "commit_message": "Change namespace cloning so that it clones mounts depth-first.\n\nThis saves on allocations.\n\nThis change is a subset of the changes in cl/563529897 and cl/563752003.\nCommitting this change in more discrete parts will help narrow down the\ncauses of b/299603749.\n\nPiperOrigin-RevId: 565484026", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c0a9bb7b3ab6514323b52e81a5bd52210bbed490", "commit_date": "2023-09-14T20:25:12Z", "commit_message": "Additionally expect the custom tos/tclass in TOS_TCLASS_EXPECT_DEFAULT case.\n\nPiperOrigin-RevId: 565458888", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad68fe1d68c5ab7adcb85aec313dc48f2f4080a7", "commit_date": "2023-09-14T18:04:00Z", "commit_message": "images: use gcr.io/syzkaller/syzbot as the base for syzkaller images\n\ngcr.io/syzkaller/env isn't built for ARM64.\n\nPiperOrigin-RevId: 565419016", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3dda3741d8eb531b9f284e4d70d86c952bce94c8", "commit_date": "2023-09-13T19:01:52Z", "commit_message": "Fix CodeQL so that it does not fail the github check.\n\nPiperOrigin-RevId: 565119657", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9117572ae02ffe41efd7ea51e64d4a4f413b88e1", "commit_date": "2023-09-13T17:25:05Z", "commit_message": "Add \"type: enhancement\" to labels protected from the stale action.\n\nPiperOrigin-RevId: 565089338", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b86d06d7e51b1e70c2c627e04c5300fa035fcd81", "commit_date": "2023-09-13T00:37:50Z", "commit_message": "Merge pull request #9215 from ekzhang:ekzhang/perf-nvidia-cli-info\n\nPiperOrigin-RevId: 564882593", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "94500414c9170f00d4351339bfd87683e02674f3", "commit_date": "2023-09-12T18:41:11Z", "commit_message": "Merge pull request #9359 from milantracy:codeqlconfig\n\nPiperOrigin-RevId: 564786128", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1910a4577f0183bf444660985f30dc78ef3a74ca", "commit_date": "2023-09-12T18:29:05Z", "commit_message": "cgroupfs: do not return errors from strconv.ParseInt() to write()\n\nArbitrary errors are not convertible to errnos for syscall return and cause the\nsentry to panic.\n\nPiperOrigin-RevId: 564782206", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6d06f309ed5d76dc4c085ab88166f8f5a6161b04", "commit_date": "2023-09-12T17:23:03Z", "commit_message": "Increase stale action ops per run.\n\nRight now we're capped at 30, but have 569 open issues and 192 open PRs.\n\nPiperOrigin-RevId: 564760282", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8758e992c5ca892be1830534a62cc85298061016", "commit_date": "2023-09-11T19:51:18Z", "commit_message": "perf: Remove call to nvidia-container-cli info\n\nThis call is repeated on every container startup sequence, but it is expensive, consistently taking between 2-3 seconds to run each time. This adds a significant amount of startup latency to every container. From `strace` output, the main issue appears to be a call to `openat(AT_FDCWD, \"/dev/nvidia0\", O_RDWR|O_CLOEXEC)`. The first time this is called, it creates a new open device file descriptor and blocks for 2 seconds while doing so. This was measured on a `g4dn.2xlarge` instance on AWS, running a Tesla T4 GPU.\n\nFor comparison, the `nvidia-container-prestart-hook` for runc also runs `nvidia-container-cli` during container boot, but it only calls it once for the `configure` command. gVisor appears to call it twice, once for `info` and then for `configure`.\n\nBy removing the `info` call, or at least only running it when the GPU device files are not already present on the host, GPU container startups can be 2-3 seconds faster.\n\nDoes this sound reasonable? I'm not actually familiar with why the `/dev/nvidia0` file takes 2-3 seconds to open, or why GPU device files need to be explicitly loaded. But I tested the change, and gVisor nvproxy still works.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8f2bb6d21ba55b13d6356cb78d7039b2b0dfe51", "commit_date": "2023-09-11T19:01:06Z", "commit_message": "Don't build tensorflow image on ARM.\n\nThe upload image test is failing due to the tensorflow image not being\nsupported on ARM.\n\nPiperOrigin-RevId: 564458336", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1afe6d14e767dd359840b29a55fb849b5a2efb74", "commit_date": "2023-09-11T18:41:47Z", "commit_message": "Add initial CodeQL config for gVisor.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb4410f44e3291f7aa34a2655cd683cac7d149cb", "commit_date": "2023-09-09T13:50:38Z", "commit_message": "Rollback 6ceceae9385c and 206e88db3653.\n\nSyzkaller is reporting crashes relating to changes made by these commits.\nRolling back for now. Should be rolled forward with fix.\n\nReported-by: syzbot+9868746b8b0f679da548@syzkaller.appspotmail.com\nPiperOrigin-RevId: 564000728", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "717539fbd78ae05798fa00712556ec15a55b7156", "commit_date": "2023-09-08T20:57:42Z", "commit_message": "Return user_mss if user_mss is set and socket is unconnected.\n\nHas the same effect as Linux commit 34dfde4ad87b (\"tcp: Return user_mss for\nTCP_MAXSEG in CLOSE/LISTEN state if user_mss set\").\n\nUpdated test to accept both values (default and user set) so test works on\nnewer and older kernels.\n\nPiperOrigin-RevId: 563844012", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad275a100e58195f8e4f441befba3327be51ff04", "commit_date": "2023-09-07T23:28:00Z", "commit_message": "Fix debug builds.\n\nThis change also adds instructions for using a debugger with syscall tests.\n\nFixes #9039\n\nPiperOrigin-RevId: 563576842", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "206e88db3653b4de668a5a4f51406fc6967150df", "commit_date": "2023-09-07T20:37:20Z", "commit_message": "Fix cwd/root update method during namespace cloning.\n\nThe previous implementation incorrectly assumed order would be preserved\nin the map.\n\nReported-by: syzbot+da2bc2bee99641f22de4@syzkaller.appspotmail.com\nPiperOrigin-RevId: 563529897", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "27d7936e933a89c0b55c20966a13ffb40ad2abca", "commit_date": "2023-09-07T17:08:15Z", "commit_message": "Fix github workflow test.\n\nPiperOrigin-RevId: 563466164", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c215e67a50f8f6f4d51072318571e0ab54562bc8", "commit_date": "2023-09-07T00:27:02Z", "commit_message": "Let devices cgroup add/remove rules via devices.allow and devices.deny.\n\nPiperOrigin-RevId: 563261158", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6ceceae9385c44d639a2aebc78bf3b4a8e970e05", "commit_date": "2023-09-06T22:43:02Z", "commit_message": "Abstract mount tree cloning into its own mount method.\n\nWhen copying a mount tree, new child mounts are added to a mount's\npending list. Each of these mounts has its pending mountpoint already set\nwith setKey. Eventually this method will be used to enable recursive binds.\n\nPiperOrigin-RevId: 563236298", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2319f958fc930d0a0980e094928bc233976b8992", "commit_date": "2023-09-06T21:58:03Z", "commit_message": "Automated rollback of changelist 536743330\n\nPiperOrigin-RevId: 563224104", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8aee177900da1a2a59f7cc6ca79d688677394008", "commit_date": "2023-09-06T21:06:31Z", "commit_message": "Add more justification about why shared mount propagation is not allowed.\n\nUpdates #9324\n\nPiperOrigin-RevId: 563208592", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4146284b601b8e7c551bf172c5fc1f2c7cb972c5", "commit_date": "2023-09-06T20:58:08Z", "commit_message": "Merge pull request #9339 from kevinGC:tcsetsf2\n\nPiperOrigin-RevId: 563207341", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0230a371c23bd4d750e7e60e0e4bf7223ef7087f", "commit_date": "2023-09-06T20:29:19Z", "commit_message": "Merge pull request #9336 from thundergolfer:jonathon/dev-pts-eof-handling\n\nPiperOrigin-RevId: 563199056", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e550bfbd052ddbec0ab214aa1991fad711cf013b", "commit_date": "2023-09-06T20:13:19Z", "commit_message": "Have lgetxattr return ENODATA.\n\nIt is a workaround to lgetxattr/lsetxattr working with security.capacity when running docker in gvisor.\n\nPiperOrigin-RevId: 563194162", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f22d854395ff29a377c5f4fb5100635b9856bb4e", "commit_date": "2023-09-06T19:30:10Z", "commit_message": "Merge pull request #9327 from kevinGC:benchmarkxdp\n\nPiperOrigin-RevId: 563182220", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d30c39364daa7c6b5cca3af7fd9b5935409a6f30", "commit_date": "2023-09-06T17:54:41Z", "commit_message": "Split the ring implementation into its own package.\n\nThe ring data structure's requires it's own implementation of Entry. With\nthe new version you can more easily be part of multiple rings at once. Also,\na user who wants to use ilist probably doesn't need ring as well, so it makes\nsense to separate the two.\n\nPiperOrigin-RevId: 563151782", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c584a1a435d616ec91a58d5cdba892b6bb000128", "commit_date": "2023-09-06T17:05:13Z", "commit_message": "Add a github workflow that marks issues and PRs as stale.\n\nPiperOrigin-RevId: 563136967", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c227d185a4c513aa71eff950506a257d7f95ec8a", "commit_date": "2023-09-06T02:15:45Z", "commit_message": "Emit SentryTcpListenEvent when the application listens on a tcp port.\n\nPiperOrigin-RevId: 562957239", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8c399a0930387c98aeebe073ead309bffbccf01", "commit_date": "2023-09-06T01:18:18Z", "commit_message": "Fix EOF (^D) handling in devpts (partially addr #9333)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e0029cc0ff4b85479177a82e13809b6501809272", "commit_date": "2023-09-05T22:51:21Z", "commit_message": "A few fixes to run tests on 6.2+ kernels\n\n* disable broken socket_inet_loopback test // Lucas Manning\n* disable lseek tests on anon inodes. They have been broken by\ncommit e7478158e1378325907edfdd960eca98a1be405b\nDate:   Wed Jun 29 15:06:57 2022 +0200\n    fs: clear or set FMODE_LSEEK based on llseek function\n\n* don't check memory.kmem.limit_in_bytes, it has been deprecated and dropped:\ncommit 86327e8eb94c52eca4f93cfece2e29d1bf52acbf\nDate:   Tue Jul 4 13:52:40 2023 +0200\n    memcg: drop kmem.limit_in_bytes\ncommit 58056f77502f3567b760c9a8fc8d2e9081515b2d\nDate:   Fri Nov 5 13:37:44 2021 -0700\n    memcg, kmem: further deprecate kmem.limit_in_bytes\ncommit 0158115f702b0ba208ab0b5adf44cae99b3ebcc7\nDate:   Mon Sep 23 15:37:22 2019 -0700\n    memcg, kmem: deprecate kmem.limit_in_bytes\nPiperOrigin-RevId: 562915457", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7928ff6f0c5ce47b3a9a4e0773ca68a5df6d7c93", "commit_date": "2023-09-05T16:53:50Z", "commit_message": "tty: enable `TCSETSF`\n\nWhile there is a difference between flavors of this ioctl (`TCSETS`,\n`TCSETSF`, `TCSETSW`), in practice it seems not to matter. We should let\nusers call `TCSETSF` and can implement those differences if necessary.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a9134c2f04b2e21ce0cfc5b33633ce573aa9429", "commit_date": "2023-08-31T18:09:15Z", "commit_message": "netstack: benchmark xdp endpoint\n\nThis just swaps out the fdbased endpoint for an XDP one. Some related\nchanges in here:\n\n- Moved the AF_XDP BPF program into its own Go package so it can be\n  shared.\n- Added a flag to tcp_benchmark to disable user namespaces. This helps\n  when running as root, which is required to install BPF programs.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}]}