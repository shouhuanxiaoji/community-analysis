{"master": [{"commit_oid": "ac097d6cb15726fa34f2d4ec5edc94aad58e0d0d", "commit_date": "2023-10-18T04:44:37Z", "commit_message": "diskdump: add hook for additional checks on prstatus notes validity\n\nUpstream crash reports these warnings on PowerPC64:\n\n    WARNING: cpu 0 invalid NT_PRSTATUS note (n_type != NT_PRSTATUS)\n    ...\n\nApart from these warnings, register values are also invalid.\n\nThis warning was found in the commit:\n\n    commit db8c030857b4 (\"diskdump/netdump: fix segmentation fault\n    caused by failure of stopping CPUs\")\n\nWith above commit, crash checks whether 'crash_notes' is initialised,\nbefore mapping PRSTATUS notes.\n\nBut some architectures such as PowerPC64, in fadump case\n(firmware-assisted dump), don't populate 'crash_notes' since the\nregisters are already stored in the cpu notes in the vmcore.\n\nInstead of checking 'crash_notes' for all architectures, introduce\na machdep hook ('is_cpu_prstatus_valid'), for architectures to\ndecide validity checks for PRSTATUS notes.\n\nA default hook ('diskdump_is_cpu_prstatus_valid') has also been provided\nfor all architectures other than PowerPC64, which checks if 'crash_notes'\nfor a given cpu is valid, maintaining the current behaviour.\n\nPowerPC64 doesn't utilize 'crash_notes' to get register values, so no\nadditional checks are required.\n\nFixes: db8c030857b4 (\"diskdump/netdump: fix segmentation fault caused by failure of stopping CPUs\")\nSigned-off-by: Aditya Gupta <adityag@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e758aaa0fd8199e21a2d4d04b486bc873bd788b", "commit_date": "2023-10-10T06:54:22Z", "commit_message": "Make \"clear\" external command runnable without \"!\" and alias-able\n\nMake the \"clear\" external command runnable without an exclamation point\n(\"!\") for convenient.  Additionally, make it acceptable as a command\nstring for alias exceptionally in external commands.\n\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "578fc08b825515eab0991445076dfb92743864f2", "commit_date": "2023-10-10T04:35:33Z", "commit_message": "memory_driver: Support overriding kernel directory\n\nSupport compiling the module against a different kernel version than the\ncurrently running one by allowing to set either KVER or KDIR variables\non the make commandline.\n\nAlso modernize the makefile slightly and make use of the kernel's\n'clean' target to ensure to remove all generated files.\n\nSigned-off-by: Mathias Krause <minipli@grsecurity.net>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1cfd513ea9c87039b70ffe70acc93ad3f38e49b7", "commit_date": "2023-10-10T04:35:33Z", "commit_message": "memory_driver: Use designated initializer for 'crash_dev'\n\nInstead of using positional initialization, use the more modern\ndesignated initializer style, as already used for 'crash_fops'.\n\nThis makes the member initialization not only less ambiguous but also\nallows structure layout randomization of the underlying type (as done in\ngrsecurity).\n\nSigned-off-by: Mathias Krause <minipli@grsecurity.net>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3c44056efef20ccfff4ada7ee494b04d31d0f086", "commit_date": "2023-10-10T04:35:33Z", "commit_message": "memory_driver: Ensure PWD points to the current directory\n\nBuilding crash.ko broke in commit 74ac92971241 (\"Support for multiple\njobs to build crash\"), as PWD won't be updated on recursive calls to\n'make' and will still point to the upper directory.\n\nThis leads to the 'all' target trying to build modules in the top level\ndirectory -- where there are none.\n\nFix that by updating PWD to the current directory.\n\nFixes: 74ac92971241 (\"Support for multiple jobs to build crash\")\nReported-by: Lianbo Jiang <lijiang@redhat.com>\nSigned-off-by: Mathias Krause <minipli@grsecurity.net>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c9a732d0f6abe8c63f19fee5233544633dfd309f", "commit_date": "2023-09-28T08:47:24Z", "commit_message": "arm64: Fix \"vtop\" command to display swap information on Linux 5.19 and later\n\nKernel commit 570ef363509b (\"arm64/pgtable: support\n__HAVE_ARCH_PTE_SWP_EXCLUSIVE\"), which is contained in Linux 5.19 and\nlater kernels, changed the format of swap entries on arm64.  Without the\npatch, the \"vtop\" command cannot display swap information.\n\nBefore:\n  crash> vtop 70504000\n  VIRTUAL     PHYSICAL\n  70504000    (not mapped)\n\n  PAGE DIRECTORY: ffffff80f265c000\n     PGD: ffffff80f265c008 => 800000141537003\n     PMD: ffffff8101537c10 => 800000141538003\n     PTE: ffffff8101538820 => 12bc3e04\n\n    PTE     vtop: cannot determine swap location\n\nAfter:\n  crash> vtop 70504000\n  VIRTUAL     PHYSICAL\n  70504000    (not mapped)\n\n  PAGE DIRECTORY: ffffff80f265c000\n     PGD: ffffff80f265c008 => 800000141537003\n     PMD: ffffff8101537c10 => 800000141538003\n     PTE: ffffff8101538820 => 12bc3e04\n\n    PTE                     SWAP                  OFFSET\n  12bc3e04  /first_stage_ramdisk/dev/block/zram0  1227838\n\n        VMA           START       END     FLAGS FILE\n  ffffff80dfe7b578   70504000   707bd000 100073\n\n  SWAP: /first_stage_ramdisk/dev/block/zram0  OFFSET: 1227838\n\nSigned-off-by: chenguanyou <chenguanyou@xiaomi.com>\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a9291fc1bf61309c74078f757f58c47ff887da10", "commit_date": "2023-09-27T07:17:20Z", "commit_message": "ppc64: do page traversal if vmemmap_list not populated\n\nCurrently 'crash-tool' fails on vmcore collected on upstream kernel on\nPowerPC64 with the error:\n\n    crash: invalid kernel virtual address: 0  type: \"first list entry\n\nPresently the address translation for vmemmap addresses is done using\nthe vmemmap_list. But with the below commit in Linux 6.6-rc1,\nvmemmap_list can be empty, in case of Radix MMU on PowerPC64.\n\n    368a0590d954: (powerpc/book3s64/vmemmap: switch radix to use a\n    different vmemmap handling function)\n\nIn case vmemmap_list is empty, then it's head is NULL, which crash tries\nto access and fails due to accessing NULL.\n\nInstead of depending on 'vmemmap_list' for address translation for\nvmemmap addresses, do a kernel pagetable walk to get the physical\naddress associated with given virtual address.\n\nTested-by: Sachin Sant <sachinp@linux.ibm.com>\nReviewed-by: Hari Bathini <hbathini@linux.ibm.com>\nSigned-off-by: Aditya Gupta <adityag@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "27f3ccd6c296099206a337c2913f370afcddf1ad", "commit_date": "2023-09-20T07:51:06Z", "commit_message": "In verify_version() don't require specific syment type values for linux_banner symbol to get its address\n\nverify_version() in kernel.c gets a struct syment for linux_banner using\nsymbol_search() and uses the value member of the result as the address\nof linux_banner in some cases based on the type member's value in the\nsame struct syment. A small number of coredumps with an unhandled type\n('B' or 'b') for linux_banner result in the address of linux_banner\nbeing loaded from the actual linux_banner data. This fails because the\nfirst ulong of the linux_banner ASCII text is treated as a dumped kernel\naddress and attempting to access that in the core fails.\n\nBased on a suggestion from Kazu, continue to get the struct syment for\nlinux_banner using symbol_search(). Also use get_symbol_type() for\nlinux_banner and use the result of that to decide where to get the\nlinux_banner address from, disregarding the syment type member. If\nget_symbol_type() reports a TYPE_CODE_ARRAY (and by default with a\nwarning) use the syment value member as the linux_banner address. If\nget_symbol_type() reports a TYPE_CODE_PTR read the address of\nlinux_banner using get_symbol_data().\n\nThe else block doesn't strictly require braced content for a single\nswitch statement but braces are included to match style of locally\nsimilar cases.\n\nSigned-off-by: David Mair <dmair@suse.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3253e5ac87c67dd7742e2b2bd9d912f21c1d2711", "commit_date": "2023-08-25T08:01:31Z", "commit_message": "Fix \"ps/vm\" commands to display the memory usage for exiting tasks\n\nWhen a task is exiting, usually kernel marks its flags as 'PF_EXITING',\nbut even so, sometimes the mm_struct has not been freed, it might still\nbe valid. For such tasks, the \"ps/vm\" commands won't display the memory\nusage. For example:\n\n  crash> ps 47070\n        PID    PPID  CPU       TASK        ST  %MEM      VSZ      RSS  COMM\n      47070       1   0  ffff9ba7c4910000  UN   0.0        0        0  ra_ris.parse\n  crash> vm 47070\n  PID: 47070    TASK: ffff9ba7c4910000  CPU: 0    COMMAND: \"ra_ris.parse\"\n         MM               PGD          RSS    TOTAL_VM\n         0                 0            0k       0k\n\nThis is a corner case, but it has already occurred in actual production\nenvironments. Given that, let's allow the \"ps/vm\" commands to try to\ndisplay the memory usage for this case. Note that it does not guarantee\nthat it can work well at any time, which still depends on how far the\nmm_struct deconstruction has proceeded.\n\nWith the patch:\n  crash> ps 47070\n        PID    PPID  CPU       TASK        ST  %MEM      VSZ      RSS  COMM\n      47070       1   0  ffff9ba7c4910000  UN  90.8 38461228 31426444  ra_ris.parse\n  crash> vm 47070\n  PID: 47070    TASK: ffff9ba7c4910000  CPU: 0    COMMAND: \"ra_ris.parse\"\n         MM               PGD          RSS    TOTAL_VM\n  ffff9bad6e873840  ffff9baee0544000  31426444k  38461228k\n        VMA           START       END     FLAGS FILE\n  ffff9bafdbe1d6c8     400000     8c5000 8000875 /data1/rishome/ra_cu_cn_412/sbin/ra_ris.parse\n  ...\n\nReported-by: Buland Kumar Singh <bsingh@redhat.com>\nSigned-off-by: Lianbo Jiang <lijiang@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1aa93cd33fa11f9d9bc9dc7e6a698d690fdd1bb3", "commit_date": "2023-08-21T00:39:19Z", "commit_message": "RISCV64: Add KASLR support\n\nThis patch adds KASLR support for Crash to analyze KASLR-ed vmcore\nsince RISC-V Linux is already sufficiently prepared for KASLR [1].\n\nWith this patch, even if the Crash '--kaslr' option is not set or Linux\nCONFIG_RANDOMIZE_BASE is not configured, the 'derive_kaslr_offset()'\nfunction will always work\u00a0to calculate 'kt->relocate' which serves to\nupdate the kernel virtual address.\n\nTesting in Qemu rv64 virt, kernel log outputed the kernel offset:\n\n  [  121.214447] SMP: stopping secondary CPUs\n  [  121.215445] Kernel Offset: 0x37c00000 from 0xffffffff80000000\n  [  121.216312] Starting crashdump kernel...\n  [  121.216585] Will call new kernel at 94800000 from hart id 0\n  [  121.216834] FDT image at 9c7fd000\n  [  121.216982] Bye...\n\nRunning crash with '-d 1' option and without '--kaslr' option,\nwe get the right 'kt->relocate' and kernel link addr:\n\n  $ ../crash/crash -d 1 vmlinux vmcore_kaslr_0815\n  ...\n  KASLR:\n    _stext from vmlinux: ffffffff80002000\n    _stext from vmcoreinfo: ffffffffb7c02000\n    relocate: 37c00000 (892MB)\n  vmemmap : 0xff1c000000000000 - 0xff20000000000000\n  vmalloc : 0xff20000000000000 - 0xff60000000000000\n  mudules : 0xffffffff3952f000 - 0xffffffffb7c00000\n  lowmem  : 0xff60000000000000 -\n  kernel link addr        : 0xffffffffb7c00000\n  ...\n        KERNEL: /home/song/9_linux/linux/00_rv_kaslr/vmlinux\n      DUMPFILE: /tmp/hello/vmcore_kaslr_0815\n          CPUS: 2\n          DATE: Tue Aug 15 16:36:15 CST 2023\n        UPTIME: 00:02:01\n  LOAD AVERAGE: 0.40, 0.23, 0.09\n         TASKS: 63\n      NODENAME: stage4.fedoraproject.org\n       RELEASE: 6.5.0-rc3-00008-gad18dee423ac\n       VERSION: #17 SMP Tue Aug 15 14:41:12 CST 2023\n       MACHINE: riscv64  (unknown Mhz)\n        MEMORY: 511.8 MB\n         PANIC: \"Kernel panic - not syncing: sysrq triggered crash\"\n           PID: 160\n       COMMAND: \"bash\"\n          TASK: ff6000000152bac0  [THREAD_INFO: ff6000000152bac0]\n           CPU: 1\n         STATE: TASK_RUNNING (PANIC)\n  crash>\n\n[1]: https://lore.kernel.org/linux-riscv/20230722123850.634544-1-alexghiti@rivosinc.com/\n\nSigned-off-by: Song Shuai <suagrfillet@gmail.com>\nReviewed-by: Guo Ren <guoren@kernel.org>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f774fe0f59b45596e5165eb008845b3534f650d0", "commit_date": "2023-08-18T02:00:12Z", "commit_message": "deduplicate kernel_version open-coded parser\n\nThe code that parses kernel version from OSRELEASE/UTSRELEASE strings\nand populates the global kernel table is duplicated across the codebase\nfor no good reason. This commit consolidates all the duplicated parsing\ncode into a single method to remove the unnecessary duplicated code.\n\nSigned-off-by: Rafael Aquini <aquini@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eeaed479a438891fca96977cd64ae1166fddd38e", "commit_date": "2023-08-17T00:19:03Z", "commit_message": "Fix \"kmem -s|-S\" not working properly when CONFIG_SLAB_FREELIST_HARDENED is enabled\n\nCurrently, crash-utility still depends on detecting the kernel version,\nor the asm instruction 'bswap' on x86_64/x86 architectures to decide how\nto deal with the freelist ptr obfuscation, when kernel option\nCONFIG_SLAB_FREELIST_HARDENED is enabled.\n\nAs you known, the bit diffusion for freelist ptr obfuscation has\nexperienced the changes several times on the kernel side, For most\ndistributions, usually they might backport these kernel patches from\nupstream, especially for the old kernel, the 'kmem -s|-S' will fail with\nan error \"invalid freepointer\", which can be observed on ppc64le and\nS390x architectures, etc. That is really not friendly.\n\nGiven that, let's fix the above issues this time, and it won't rely\non the linux version number or asm instruction 'bswap' to decide how to\ndereference the freelist ptr.\n\nReported-by: Lucas Oakley <soakley@redhat.com>\nSigned-off-by: Lianbo Jiang <lijiang@redhat.com>\nAcked-by: Rafael Aquini <aquini@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bc145861bfeb8b20b77309cb477359e9d46680d6", "commit_date": "2023-08-17T00:19:03Z", "commit_message": "Revert \"Fix \"kmem -s|-S\" not working properly on RHEL8.6 and later\"\n\nThis reverts commit 9253b40a0ecb2d365f89f0a5ebc28a01735c1d24.\n\nThe commit 9253b40a0ecb only handles the current issue on x86_64/x86\narchitectures. Furthermore the freelist_ptr_bswap_x86() depends on\ndisassembling a static symbol which might not be available, depending on\nhow the compiler decides to optimize the code, that is to say, the\ncompiler might generate different code eventually.\n\nMore importantly, a subsequent patch can cover the current issue on\nvarious architectures. Given that, revert the commit.\n\nSigned-off-by: Lianbo Jiang <lijiang@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff963b795b3f93b9d1a3cc5ec0212ebca545259f", "commit_date": "2023-08-16T00:17:40Z", "commit_message": "RISCV64: Use va_kernel_pa_offset in VTOP()\n\nSince RISC-V Linux v6.4, the commit 3335068f8721 (\"riscv: Use\nPUD/P4D/PGD pages for the linear mapping\") changes phys_ram_base from\nthe physical start of the kernel to the actual start of the DRAM.\n\nThe Crash's VTOP() still uses phys_ram_base and kernel_map.virt_addr\nto translate kernel virtual address, that made Crash boot failed with\nLinux v6.4 and later version.\n\nLet Linux export kernel_map.va_kernel_pa_offset in v6.5 and backported\nv6.4.0 stable, so Crash can use \"va_kernel_pa_offset\" to translate the\nkernel virtual address in VTOP() correctly.\n\nSigned-off-by: Song Shuai <suagrfillet@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "69f38d777450c3fe4f089eaa403434815eecdbd7", "commit_date": "2023-08-15T07:53:26Z", "commit_message": "Fix \"ps/vm\" commands to display correct memory usage\n\nKernel commit eca56ff906bd (\"mm, shmem: add internal shmem resident\nmemory accounting\") added shmem resident memory accounting and it's\ntallied up into the mm_rss_stat counter.\n\nAs a result, the \"ps/vm\" commands miss the shmem pages count and fail to\nshow correct memory usage when a process uses an anonymous shared memory\nregion.\n\nWithout the patch:\n  crash> ps 2150\n        PID    PPID  CPU       TASK        ST  %MEM      VSZ      RSS  COMM\n       2150    2105  14  ffff8fba86d74d40  IN   0.0 10488392      444  mmap_test\n                                                                  ^^^\n\nLet's count the shmem pages together with regular files and anonymous\npages.\n\nWith the patch:\n  crash> ps 2150\n        PID    PPID  CPU       TASK        ST  %MEM      VSZ      RSS  COMM\n       2150    2105  14  ffff8fba86d74d40  IN  20.8 10488392  3659008  mmap_test\n\nReported-by: Buland Kumar Singh <bsingh@redhat.com>\nSigned-off-by: Lianbo Jiang <lijiang@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "558aecc98987e54b122a09ce0d3c3484b034277f", "commit_date": "2023-08-03T04:30:45Z", "commit_message": "Fix \"foreach\" command with \"DE\" state to display only expected tasks\n\nCurrently, the \"foreach DE ps -m\" command may display \"DE\" as well as\n\"ZO\" state tasks as below:\n\n  crash> foreach DE ps -m\n  ...\n  [0 00:00:00.040] [ZO]  PID: 11458    TASK: ffff91c75680d280  CPU: 7    COMMAND: \"ora_w01o_p01mci\"\n  [0 00:00:00.044] [ZO]  PID: 49118    TASK: ffff91c7bf3e8000  CPU: 19   COMMAND: \"oracle_49118_p0\"\n  [0 00:00:00.050] [ZO]  PID: 28748    TASK: ffff91a7cbde3180  CPU: 2    COMMAND: \"ora_imr0_p01sci\"\n  [0 00:00:00.050] [DE]  PID: 28405    TASK: ffff91a7c8eb0000  CPU: 27   COMMAND: \"ora_vktm_p01sci\"\n  [0 00:00:00.051] [ZO]  PID: 31716    TASK: ffff91a7f7192100  CPU: 6    COMMAND: \"ora_p001_p01sci\"\n  ...\n\nThat is not expected behavior, the \"foreach\" command needs to handle\nsuch cases. Let's add a check to determine if the task state identifier\nis specified and the specified identifier is equal to the actual task\nstate identifier, so that it can filter out the unspecified state\ntasks.\n\nWith the patch:\n  crash> foreach DE ps -m\n  [0 00:00:00.050] [DE]  PID: 28405    TASK: ffff91a7c8eb0000  CPU: 27   COMMAND: \"ora_vktm_p01sci\"\n  crash>\n\nSigned-off-by: Lianbo Jiang <lijiang@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c74f375e0ef7cd9b593fa1d73c47505822c8f2a0", "commit_date": "2023-07-24T23:54:34Z", "commit_message": "Fix get_linux_banner_from_vmlinux() for vmlinux without \".rodata\" symbol\n\nAs written in the previous patch, some recent kernels do not have the\n\".rodata\" symbol.  As a result, the get_linux_banner_from_vmlinux()\nreturns FALSE and the slower fallback routine is used.\n\nUse \"__start_rodata\" symbol if the \".rodata\" symbol is not available.\n\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aa5763800d614ff6080fd1909517a3939c250e86", "commit_date": "2023-07-24T08:01:47Z", "commit_message": "Fix warning about kernel version inconsistency during crash startup\n\nCurrently, the symbol \".rodata\" may not be found in some vmlinux, and\nthe strings command will still be used to get the linux banner string,\nbut this gets two strings as below:\n\n  # strings vmlinux | grep \"Linux version\"\n  Linux version 6.5.0-0.rc2.17.fc39.x86_64 ... GNU ld version 2.40-9.fc39) # SMP PREEMPT_DYNAMIC\n  Linux version 6.5.0-0.rc2.17.fc39.x86_64 ... GNU ld version 2.40-9.fc39) #1 SMP PREEMPT_DYNAMIC Mon Jul 17 14:57:35 UTC 2023\n\nIn the verify_namelist(), the while-loop will only determine if the\nfirst linux banner string above matches and break the loop. But actually\nthe second string above is correct one. Eventually, crash starts up with\nthe following warning:\n\n  # ./crash -s vmlinux vmcore\n  WARNING: kernel version inconsistency between vmlinux and dumpfile\n\n  # ./crash -s\n  WARNING: kernel version inconsistency between vmlinux and live memory\n\nLet's always try to match the correct one, otherwise still prints a\nwarning as before.\n\nSigned-off-by: Lianbo Jiang <lijiang@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0b59524624b83d634b3fa8ab4ab3acf9ccce9df", "commit_date": "2023-07-13T00:14:06Z", "commit_message": "Fix segmentation fault by \"tree -s\" option with Maple Tree\n\nWithout the patch, do_mt_entry() can call dump_struct_members_for_tree()\nwith a NULL entry, and parse_for_member_extended() will cause a\nsegmentation fault during strncpy().\n\nThis is caused by \"tree -t maple -s struct.member.member\" style multiple\nlevel member access:\n\n  crash> tree -t maple -s irq_desc.irq_data.irq  sparse_irqs\n  ffff936980188400\n    irq_data.irq = 0,\n  ffff93698018be00\n    irq_data.irq = 1,\n  ...\n  ffff936980f38e00\n    irq_data.irq = 19,\n  Segmentation fault (core dumped)\n\n  (gdb) bt\n  #0  0x00007faaf8e51635 in __strncpy_avx2 () from /lib64/libc.so.6\n  #1  0x00000000005e5927 in parse_for_member_extended (dm=dm@entry=0x7ffcb9e6d860, ...\n  #2  0x0000000000603c45 in dump_struct_member (s=s@entry=0x128cde0 <shared_bufs+1024> ...\n  #3  0x0000000000513cf5 in dump_struct_members_for_tree (td=td@entry=0x7ffcb9e6eeb0, ...\n  #4  0x0000000000651f15 in do_mt_entry (entry=0, min=min@entry=20, max=max@entry=119, ...\n  ...\n\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38d35bd1423ccafd0b8be0744155ce59ef3034ff", "commit_date": "2023-07-13T00:11:51Z", "commit_message": "Fix \"irq [-a|-s]\" options on Linux 6.5-rc1 and later\n\nKernel commit 721255b982 (\"genirq: Use a maple tree for interrupt\ndescriptor management\"), which is contained in Linux 6.5-rc1 and later\nkernels, replaced irq_desc_tree with a maple tree sparse_irqs.\n\nWithout the patch, \"irq [-a|-s]\" options fail with an error, e.g. the\nfollowing on x86_64, on kernels configured with CONFIG_SPARSE_IRQ=y.\n\n  crash> irq\n  irq: x86_64_dump_irq: irq_desc[] or irq_desc_tree do not exist?\n\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d17d51a92a3a1c1cce1e646c38fe52ca99406cf9", "commit_date": "2023-07-13T00:11:51Z", "commit_message": "Exclude zero entries from do_maple_tree() return value\n\nWhile the return value of do_radix_tree() and do_xarray() does not\ncontain NULL entries, do_maple_tree()'s one contains NULL entries.\n\nMake this behavior consistent with the previous tree functions to make\nreplacement easier, especially for the following patch.\n\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b76e116c50ffc228ebc08eb8de35019320679257", "commit_date": "2023-07-11T23:45:32Z", "commit_message": "vmware: Improve output when we fail to read vmware 'vmsn' file\n\nToday if crash fails to read some structure in a vmware 'vmsn' file,\nit will throw an \"No such file or directory\" message.  Such a generic\nmessage does not give any clue as to the problem, but instead sounds\nlike the file may not exist when it does, for example:\n  $ crash ./vmcore.vmsn  ./vmlinux\n\n  crash 8.0.3\n  ...\n\n  crash: vmw: Failed to read './vmcore.vmsn': [Error 2] No such file or directory\n\n  crash: ./vmcore.vmsn: initialization failed\n\n  $ ls -l ./vmcore.vmsn\n  -rwxrwxrwx. 7 myuser mygroup 12128999 Jul  4 07:21 ./vmcore.vmsn\n\nImprove the above error message so we at least know which portion\nof the file crash had difficulty reading.  After this patch, the\nabove error looks like:\n  crash: vmw: Failed to read 'cptgroupdesc' from file './vmcore.vmsn': [Error 2] No such file or directory\n\nSigned-off-by: Dave Wysochanski <dwysocha@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6d0be1316aa3666895c0a8a0d3c98c235ec03bd4", "commit_date": "2023-07-10T04:17:19Z", "commit_message": "Fix \"irq -a\" option on Linux 6.0 and later\n\nKernel commit f0dd891dd5a1d (\"lib/cpumask: move some one-line wrappers\nto header file\"), which is contained in Linux 6.0 and later kernels,\ninlined alloc_cpumask_var() function.  As a result, the \"irq -a\" option\nfails to determine that cpumask_var_t is a pointer, and displays wrong\nCPU affinity for IRQs:\n\n  crash> irq -a\n  IRQ NAME                 AFFINITY\n    1 i8042                3\n    4 ttyS0\n    8 rtc0\n    9 acpi                 3\n   12 i8042                3\n  ...\n\nUse alloc_cpumask_var_node() function symbol instead to fix it.\n\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4ee56105881d7bb1da1e668ac5bb47a4e0846676", "commit_date": "2023-07-05T06:46:57Z", "commit_message": "Fix compilation error due to new strlcpy function that glibc added\n\nThe crash-utility has its own strlcpy(), but recently the latest glibc\nhas also implemented the strlcpy function, which is derived from\nOpenBSD.  Eventually this caused the following compilation error:\n\n  # make -j8 lzo\n  ...\n  In file included from global_data.c:18:\n  defs.h:5556:8: error: conflicting types for \u2018strlcpy\u2019; have \u2018size_t(char *, char *, size_t)\u2019 {aka \u2018long unsigned int(char *, char *, long unsigned int)\u2019}\n   5556 | size_t strlcpy(char *, char *, size_t);\n        |        ^~~~~~~\n  In file included from memory.c:19:\n  defs.h:5556:8: error: conflicting types for \u2018strlcpy\u2019; have \u2018size_t(char *, char *, size_t)\u2019 {aka \u2018long unsigned int(char *, char *, long unsigned int)\u2019}\n   5556 | size_t strlcpy(char *, char *, size_t);\n        |        ^~~~~~~\n  ...\n\nTo fix the issue, let's declare the strlcpy() as a weak function and\nkeep the same parameter types as the glibc function has.\n\nRelated glibc commits:\n454a20c8756c (\"Implement strlcpy and strlcat [BZ #178]\")\nd2fda60e7c40 (\"manual: Manual update for strlcat, strlcpy, wcslcat, wclscpy\")\n388ae538ddcb (\"hurd: Add strlcpy, strlcat, wcslcpy, wcslcat to libc.abilist\")\n\nSigned-off-by: Lianbo Jiang <lijiang@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88580068b7dd96bf679c82bdc05e146968ade10c", "commit_date": "2023-07-03T04:57:07Z", "commit_message": "Fix failure of gathering task table on Linux 6.5-rc1 and later\n\nKernel commit b69f0aeb0689 (\"pid: Replace struct pid 1-element array\nwith flex-array\") changed pid.numbers[1] to pid.numbers[].  With this,\nthe size of struct pid does not contain the size of struct upid:\n\n  (gdb) ptype /o struct pid\n  /* offset    |  size */  type = struct pid {\n  /*    0      |     4 */    refcount_t count;\n  ...\n  /*   96      |     0 */    struct upid numbers[];\n      ^^^^          ^^^\n                             /* total size (bytes):   96 */\n                           }                         ^^^^\n\nAs a result, in refresh_xarray_task_table(), crash does not read the\ndata of pid.numbers[0].ns and cannot gather the task table correctly.\n\n  $ crash vmlinux vmcore\n  ...\n  WARNING: active task ffff936992ad0000 on cpu 1 not found in PID hash\n  ...\n  crash> ps -S\n    RU: 9\n  crash>\n\nIncrease the size of reading struct pid by SIZE(upid) in this case.\n\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7750e61fdb2a083f26156a5338aa2ebe26447f3f", "commit_date": "2023-06-26T01:15:50Z", "commit_message": "Support module memory layout change on Linux 6.4\n\nSupport module memory layout change on Linux 6.4 by kernel commit\nac3b43283923 (\"module: replace module_layout with module_memory\") [1].\nWithout the patch, crash cannot even start a session with an error\nmessage like this:\n\n  crash: invalid structure member offset: module_core_size\n         FILE: kernel.c  LINE: 3787  FUNCTION: module_init()\n\n[1] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=ac3b43283923\n\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8b24b2025fb4ae9bd6102bb054bd23987c35387e", "commit_date": "2023-06-22T00:10:31Z", "commit_message": "ppc64: Remove redundant PTE checks\n\nRemove redundant checks for PTE (Page Table Entry) because those\nconditions are already covered.\n\n        if (!(pte & _PAGE_PRESENT)) {\n                ...\n                return FALSE;\n        }\n\n        if (!pte)\n                return FALSE;\n\nThe second pte check is redundant because it holds true only when pte is\n0. If pte is 0 then (!(pte & _PAGE_PRESENT)) is true and it will return\nfalse. So there is no need for one more pte check.\n\nSigned-off-by: Likhitha Korrapati <likhitha@linux.ibm.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c8cd9b5dcf48221e5f75fc5850bb4719d77acce", "commit_date": "2023-06-15T01:38:46Z", "commit_message": "arm64: Fix again segfault in arm64_is_kernel_exception_frame() when corrupt stack pointer address is given\n\nThis is the second trial from the commit\n9868ebc8e648e5791764a51567a23efae7170d9b that was reverted at the\nprevious commit.\n\nAs described in the previous commit, result of STACK_OFFSET_TYPE() can\nbe an address out of bt->stackbuf and hence the address needs to be\nchecked prior to being referred to as an pt_regs object.\n\nSo, to fix the issue, let's check if stkptr points to within the range\nof the kernel stack first.\n\n[ kh: added a warning at Lianbo's suggestion ]\n\nSigned-off-by: HATAYAMA Daisuke <d.hatayama@fujitsu.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "91a76958e4a8a9fb67ac61166ff36e8dc961b3b9", "commit_date": "2023-06-15T01:38:46Z", "commit_message": "Revert \"Fix segfault in arm64_is_kernel_exception_frame() when corrupt stack pointer address is given\"\n\nThis reverts commit 9868ebc8e648e5791764a51567a23efae7170d9b.\n\nThe commit 9868ebc8e648e5791764a51567a23efae7170d9b causes the issue\nthat bt command fails to show backtraces for the tasks that is running\nin the user mode at the moment of the kernel panic as follows:\n\n  crash> bt 1734\n  PID: 1734     TASK: ffff000000392200  CPU: 4     COMMAND: \"insmod\"\n  bt: invalid stack pointer is given\n\nThe root cause is that while the commit added a sanity check into\nSTACK_OFFSET_TYPE() to validate if a given candidate address of any\ninterrupt or exception frame is contained within the range of the\ncorresponding kernel stack, the premise that the STACK_OFFSET_TYPE()\nshould not return out-of-the-buffer address, is wrong.\n\nReexamining the relevant surrounding part of the backtracing code, it\nlooks to me now that the STACK_OFFSET_TYPE() is originally expected to\nreturn an out-of-the-buffer address, like the address of the top of\nthe corresponding kernel stack, e.g. at here:\n\n  static int\n  arm64_in_kdump_text(struct bt_info *bt, struct arm64_stackframe *frame)\n  {\n  ...\n          if (bt->flags & BT_USER_SPACE)\n                  start = (ulong *)&bt->stackbuf[(ulong)(STACK_OFFSET_TYPE(bt->stacktop))];\n          else {\n\nNote that the above bt 1734 aborts here.\n\nHence, the current implementation policy around STACK_OFFSET_TYPE()\nlooks that the caller side is responsible for understanding the fact\nin advance and for avoiding making buffer overrun carefully.\n\nTo fix this issue, revert the commit.\n\nSigned-off-by: HATAYAMA Daisuke <d.hatayama@fujitsu.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ec1e61b33a705b8be8d116a541c7b076b0429deb", "commit_date": "2023-06-13T00:54:59Z", "commit_message": "Fix invalid structure size error during crash startup on ppc64\n\nThe crash utility will fail to start session on ppc64 with the following\nerror:\n\n  # crash vmlinux vmcore -s\n\n  crash: invalid structure size: note_buf\n         FILE: diskdump.c  LINE: 121  FUNCTION: have_crash_notes()\n\n  [./crash] error trace: 101859ac => 10291798 => 10291450 => 10266038\n\n    10266038: SIZE_verify+156\n    10291450: have_crash_notes+308\n    10291798: map_cpus_to_prstatus_kdump_cmprs+448\n    101859ac: task_init+11980\n\nThe reason is that the size of note_buf is not initialized before using\nSIZE(note_buf) in the have_crash_notes() on some architectures including\nppc64.  Let's initialize it in task_init() to fix this issue.\n\nFixes: db8c030857b4 (\"diskdump/netdump: fix segmentation fault caused by failure of stopping CPUs\")\nSigned-off-by: Lianbo Jiang <lijiang@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "77d8621876c1c6a3a25b91e464ba588a542485fb", "commit_date": "2023-06-05T04:31:36Z", "commit_message": "x86_64: Fix \"bt\" command printing stale entries on Linux 6.4 and later\n\nKernel commit fb799447ae29 (\"x86,objtool: Split UNWIND_HINT_EMPTY in\ntwo\"), which is contained in Linux 6.4 and later kernels, changed\nORC_TYPE_CALL macro from 0 to 2.  As a result, the \"bt\" command cannot\nuse ORC entries, and can display stale entries in a call trace.\n\n  crash> bt 1\n  PID: 1        TASK: ffff93cd06294180  CPU: 51   COMMAND: \"systemd\"\n   #0 [ffffb72bc00cbc98] __schedule at ffffffff86e52aae\n   #1 [ffffb72bc00cbd00] schedule at ffffffff86e52f6a\n   #2 [ffffb72bc00cbd18] schedule_hrtimeout_range_clock at ffffffff86e58ef5\n   #3 [ffffb72bc00cbd88] ep_poll at ffffffff8669624d\n   #4 [ffffb72bc00cbe28] do_epoll_wait at ffffffff86696371\n   #5 [ffffb72bc00cbe30] do_timerfd_settime at ffffffff8669902b        <<\n   #6 [ffffb72bc00cbe60] __x64_sys_epoll_wait at ffffffff86696bf0\n   #7 [ffffb72bc00cbeb0] do_syscall_64 at ffffffff86e3feb9\n   #8 [ffffb72bc00cbee0] __task_pid_nr_ns at ffffffff863330d7          <<\n   #9 [ffffb72bc00cbf08] syscall_exit_to_user_mode at ffffffff86e466b2 << stale entries\n  #10 [ffffb72bc00cbf18] do_syscall_64 at ffffffff86e3fec9             <<\n  #11 [ffffb72bc00cbf50] entry_SYSCALL_64_after_hwframe at ffffffff870000aa\n\nAlso, kernel commit ffb1b4a41016 added a member to struct orc_entry.\nAlthough this does not affect the crash's unwinder, its debugging\ninformation can be displayed incorrectly.\n\nTo fix these,\n(1) introduce \"kernel_orc_entry_6_4\" structure corresponding to 6.4 and\n    abstruction layer \"orc_entry\" structure in crash,\n(2) switch ORC_TYPE_CALL to 2 or 0 with kernel's orc_entry structure.\n\nRelated orc_entry history:\n v4.14 39358a033b2e introduced struct orc_entry\n v4.19 d31a580266ee added orc_entry.end member\n v6.3  ffb1b4a41016 added orc_entry.signal member\n v6.4  fb799447ae29 removed end member and changed type member to 3 bits\n\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8527bbff71cbdfd90a67d5cec4a1d94156e6bf13", "commit_date": "2023-06-05T04:21:34Z", "commit_message": "Output prompt when stdin is not a TTY\n\nWhen stdin is not a TTY, prompt (\"crash> \") won't be displayed. If\nanother process interact with crash with piped stdin/stdout, it will not\nget the prompt as a delimiter.\n\nCompared to other debugger like gdb, crash seems intended to give a\nprompt in this case in the beginning of process_command_line(). It\nchecks if pc->flags does NOT have any of\nREADLINE|SILENT|CMDLINE_IFILE|RCHOME_IFILE|RCLOCAL_IFILE, a\nprompt should be printed. The check will never be true since READLINE is\nset in setup_environment() unconditionally.\n\nIt makes more sense to change the READLINE flag in the check to TTY\ninstead. Besides this change, the prompt in process_command_line() should\nonly be print when it's not in the middle of processing the input file\nrecovering from a previous FATAL command, because the prompt will be\ndisplayed by the exec_input_file().\n\nAdditionally, when stdin is not TTY, repeat the command line from user\nafter prompt, which can give more context.\n\nThe prompt and command line can be opt out by using the silent (-s) flag.\n\nSigned-off-by: Hsin-Yi Wang <hsinyi@chromium.org>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9868ebc8e648e5791764a51567a23efae7170d9b", "commit_date": "2023-06-01T02:27:39Z", "commit_message": "Fix segfault in arm64_is_kernel_exception_frame() when corrupt stack pointer address is given\n\nDue to the corrupted mapping fixed by the previous commit,\narm64_is_kernel_exception_frame() can receive invalid stack pointer\naddress via the 2nd argument; different NT_PRSTATUS contains different\ntask's stack pointer address. However, macro STACK_OFFSET_TYPE() never\nchecks if a given address is within the range of the kernel stack of\nthe corresponding task and hence can result in referring to outside of\nbt->stackbuf.\n\n\tstatic int\n\tarm64_is_kernel_exception_frame(struct bt_info *bt, ulong stkptr)\n\t{\n\t\t\tstruct arm64_pt_regs *regs;\n\t\tstruct machine_specific *ms = machdep->machspec;\n\n\t\t\tregs = (struct arm64_pt_regs *)&bt->stackbuf[(ulong)(STACK_OFFSET_TYPE(stkptr))];\n\n\t=>\tif (INSTACK(regs->sp, bt) && INSTACK(regs->regs[29], bt) &&\n\t\t\t!(regs->pstate & (0xffffffff00000000ULL | PSR_MODE32_BIT)) &&\n\t\t\tis_kernel_text(regs->pc) &&\n\t\t\tis_kernel_text(regs->regs[30] | ms->CONFIG_ARM64_KERNELPACMASK)) {\n\nTo fix this issue, check if the given stack pointer address points to\nthe range of the kernel stack of the corresponding task, and abort if\nit turns out to be invalid.\n\nAlthough the corrupted mapping has already been fixed, this fix is\nstill needed because corrupt stack pointer address can still be passed\nhere from different reasons. Consider, for example, that data on the\nkernel stack can be modified abnormally due to any kernel bugs or\nhardware issues.\n\nSigned-off-by: HATAYAMA Daisuke <d.hatayama@fujitsu.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "db8c030857b4e318728c51c20da687906c109d0d", "commit_date": "2023-06-01T02:27:25Z", "commit_message": "diskdump/netdump: fix segmentation fault caused by failure of stopping CPUs\n\nThere's no NMI on ARM. Hence, stopping the non-panicking CPUs from the\npanicking CPU via IPI can fail easily if interrupts are being masked\nin those moment. Moreover, crash_notes are not initialized for such\nunstopped CPUs and the corresponding NT_PRSTATUS notes are not\nattached to vmcore. However, crash utility never takes it\nconsideration such uninitialized crash_notes and then ends with\nmapping different NT_PRSTATUS to actually unstopped CPUs. This corrupt\nmapping can result crash utility into segmentation fault in the\noperations where register values in NT_PRSTATUS notes are used.\n\nFor example:\n\n    crash> bt 1408\n    PID: 1408     TASK: ffff000003e22200  CPU: 2    COMMAND: \"repro\"\n    Segmentation fault (core dumped)\n\n    crash> help -D\n    diskdump_data:\n\t\t      filename: 127.0.0.1-2023-05-26-02:21:27/vmcore-ld1\n\t\t\t     flags: 46 (KDUMP_CMPRS_LOCAL|ERROR_EXCLUDED|LZO_SUPPORTED)\n    ...snip...\n\t\t       notes_buf: 1815df0\n      num_vmcoredd_notes: 0\n      num_prstatus_notes: 5\n\t\t\t    notes[0]: 1815df0 (NT_PRSTATUS)\n\t\t\t\t\t      si.signo: 0  si.code: 0  si.errno: 0\n    ...snip...\n\t\t\t\t\t      PSTATE: 80400005   FPVALID: 00000000\n\t\t\t    notes[4]: 1808f10 (NT_PRSTATUS)\n    Segmentation fault (core dumped)\n\nTo fix this issue, let's map NT_PRSTATUS to some CPU only if the\ncorresponding crash_notes is checked to be initialized.\n\n[ kh: moved existence check for crash_notes out of the loop ]\n\nSigned-off-by: HATAYAMA Daisuke <d.hatayama@fujitsu.com>\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a0eceb041dfa248d66f9f9a455106184b7823bec", "commit_date": "2023-05-30T08:07:16Z", "commit_message": "arm64/x86_64: Enhance \"vtop\" command to show zero_pfn information\n\nEnhance the \"vtop\" command to show \"ZERO PAGE\" information when PTE or\nPMD has attached to {huge_}zero_pfn.  For example:\n\n  crash> vtop -c 13674 ffff8917e000\n  VIRTUAL     PHYSICAL\n  ffff8917e000  836e71000\n\n  PAGE DIRECTORY: ffff000802f8d000\n     PGD: ffff000802f8dff8 => 884e29003\n     PUD: ffff000844e29ff0 => 884e93003\n     PMD: ffff000844e93240 => 840413003\n     PTE: ffff000800413bf0 => 160000836e71fc3\n    PAGE: 836e71000  (ZERO PAGE)\n  ...\n\nHugepage case:\n  crash> vtop -c 14538 ffff95800000\n  VIRTUAL     PHYSICAL\n  ffff95800000  910c00000\n\n  PAGE DIRECTORY: ffff000801fa0000\n     PGD: ffff000801fa0ff8 => 884f53003\n     PUD: ffff000844f53ff0 => 8426cb003\n     PMD: ffff0008026cb560 => 60000910c00fc1\n    PAGE: 910c00000  (2MB, ZERO PAGE)\n  ...\n\nNote that\n1. support displaying zero page only for THP (except for 1G THP)\n2. do not support hugetlb cases.\n\nSigned-off-by: Rongwei Wang <rongwei.wang@linux.alibaba.com>\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "342cf340ed0386880fe2a3115d6bef32eabb511b", "commit_date": "2023-05-18T08:07:05Z", "commit_message": "Fix \"kmem -v\" option displaying no regions on Linux 6.3 and later\n\nKernel commit 869176a09606 (\"mm/vmalloc.c: add flags to mark vm_map_ram\narea\"), which is contained in Linux 6.3 and later, added \"flags\" member\nto struct vmap_area.  This was the revival of the \"flags\" member as\nkernel commit 688fcbfc06e4 had eliminated it before.\n\nAs a result, crash started to use the old procedure using the member and\ndisplays no vmalloc'd regions, because it does not have the same flag\nvalue as the old one.\n\n  crash> kmem -v\n     VMAP_AREA         VM_STRUCT                 ADDRESS RANGE                SIZE\n  crash>\n\nTo fix this, also check if vmap_area.purge_list exists, which was\nintroduced with the flags and removed later, to determine that the flags\nmember is the old one.\n\nRelated vmap_area history:\n v2.6.28 db64fe02258f introduced vmap_area with flags and purge_list\n v5.4    688fcbfc06e4 removed flags\n v5.11   96e2db456135 removed purge_list\n v6.3    869176a09606 added flags again\n\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "58c1816521c2e6bece3d69256b1866c9df8d93aa", "commit_date": "2023-05-16T05:57:41Z", "commit_message": "Fix failure of \"dev -d|-D\" options on Linux 6.4 and later kernels\n\nKernel commit 2df418cf4b72 (\"driver core: class: remove subsystem\nprivate pointer from struct class\"), which is contained in Linux 6.4 and\nlater kernels, removed the class.p member for struct subsys_private.  As\na result, the \"dev -d|-D\" options fail with the following error.\n\n  dev: invalid structure member offset: class_p\n       FILE: dev.c  LINE: 4689  FUNCTION: init_iter()\n\nSearch the class_kset list for the subsys_private of block class to fix\nthis.\n\nAs a preparation, introduce get_subsys_private() function, which is\nabstracted from the same search procedure in init_memory_block().\n\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "040a56e9f9d0df15a2f8161ed3a0a907d70dda03", "commit_date": "2023-05-15T04:40:23Z", "commit_message": "Fix kernel version macros for revision numbers over 255\n\nThe current comparison macros for kernel version shift minor number only\n8 bits.  This can cause an unexpected result on kernels with revision\nnumber over 255, e.g. Linux 4.14.314.\n\nIn fact, on Linux 4.14.314 for x86_64 without CONFIG_RANDOMIZE_BASE=y\n(KASLR), the following condition became false in x86_64_init().\n\n    ((THIS_KERNEL_VERSION >= LINUX(4,14,84)) &&\n     (THIS_KERNEL_VERSION < LINUX(4,15,0)))\n\nAs a result, crash used a wrong hard-coded value for PAGE_OFFSET and\nfailed to start a session with the following seek error.\n\n  crash: seek error: physical address: 200e000  type: \"pud page\"\n\nShift the major and minor number by 24 and 16 bits respectively to fix\nthis issue.\n\nReported-by: Luiz Capitulino <luizcap@amazon.com>\nTested-by: Luiz Capitulino <luizcap@amazon.com>\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2505a65ff54719567646b2775db17dc0419940d1", "commit_date": "2023-04-27T01:11:35Z", "commit_message": "Mark start of 8.0.4 development phase with version 8.0.3++\n\nSigned-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}]}