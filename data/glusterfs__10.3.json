{"release-10": [{"commit_oid": "8830f22b2428dbec7bf610341d91d748057236f1", "commit_date": "2023-06-23T12:37:29Z", "commit_message": "Revert \"posix: posix xlator does not respects storage.reserve value (#3637)\" (#4180)\n\nAfter upgrade on 10.3 and release-11 the gluster is throwing\r\nENOSPC error. To fix the original issue we have not received any\r\nreproducer so i have decided to revert the patch.\r\n\r\nThis reverts commit 9621e3e94c05f579e1615e66eacd701e7a797adf.\r\n\r\n> Fixes: #3636\r\n> Change-Id: Ief1f8a486699895d040bd467c121a33ce2a79acd\r\n> Signed-off-by: Mohit Agrawal <moagrawa@redhat.com>\r\n> (Reviwed on upstream link\r\nhttps://github.com/gluster/glusterfs/pull/4179)\r\n\r\nFixes: #3636\r\nChange-Id: Ief1f8a486699895d040bd467c121a33ce2a79acd\r\n\r\nSigned-off-by: Mohit Agrawal <moagrawa@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "225d9e9492469643d78cc5aa5608da51f9291563", "commit_date": "2023-05-24T06:01:01Z", "commit_message": "socket: fix error not supported for ipv6 (#4154)\n\nWhen glusterfs is complied with --with-ipv6-default option it results\r\nin warning operation not supported when glusterd started, which is\r\nfixed here.\r\n\r\n> Fixes: #3701\r\n> Change-Id: I5221431309311da3008f41db77fb0e48ff448746\r\n> Signed-off-by: Mohit Agrawal <moagrawa@redhat.com>\r\n> (Reviwed on upstream https://github.com/gluster/glusterfs/pull/4150)\r\n> (Cherry picked from commit 36c58ca71865a685e21db2a85a74453a79facc8c)\r\n\r\nFixes: #3701\r\nChange-Id: I5221431309311da3008f41db77fb0e48ff448746\r\n\r\nSigned-off-by: Mohit Agrawal <moagrawa@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1806d64310627e4f7c945a631a33d977114ce6fd", "commit_date": "2023-04-06T08:42:25Z", "commit_message": "Add GlusterFS 10.4 release notes (#4101)\n\n* Add GlusterFS 10.4 release notes\r\n\r\nUpdates: #4100\r\nSigned-off-by: Shwetha K Acharya <sacharya@redhat.com>\r\nCo-authored-by: Xavi Hernandez <xhernandez@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e4f4a20684c7dd37e7359e87f5069c381f9ff67a", "commit_date": "2023-04-05T06:40:16Z", "commit_message": "snapview-server: mark the end of the directory (#4050)\n\nSeveral Gluster components expect that op_errno is set to ENOENT when\r\nthere are no more entries in a directory being read.\r\n\r\nPreviously, snapview-server returned EINVAL in this case, causing an\r\ninfinite loop in some cases.\r\n\r\nUpdates: #4029\r\n\r\nSigned-off-by: Xavi Hernandez <xhernandez@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "34e1b5cc7090afc5802998fe4ca483c639129e61", "commit_date": "2023-04-04T14:52:25Z", "commit_message": "tests: update tests to match current devel branch (#4089)\n\nMany fixes have been applied to many tests in devel branch. This patch\r\nbackports all these fixes to release-10 branch.\r\n\r\nUpdates: #4020\r\n\r\nSigned-off-by: Xavi Hernandez <xhernandez@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e0f740ca974fc756db488c5d72b38db0ac5bd0ec", "commit_date": "2023-04-04T05:48:36Z", "commit_message": "snapview-server: make timestamps stable (#4075)\n\nIn the previous implementation, when the mtime, ctime and atime of an\r\nsnapshot virtual directory was requested, the returned time was the\r\ncurrent time.\r\n\r\nApparently, the old versions of kernel's nfs client did ignore this\r\nchange during a readdir operation. However, newer versions are checking\r\nit and retrying the whole readdir operation when these times differ from\r\nthe previous request (I guess that it assumes that the directory\r\ncontents have been changed and tries to get the new contents). This\r\ncauses a long delay or even an infinite loop.\r\n\r\nThe optimal change would be to keep the time of modification and changes\r\nin the inode context of the virtual directories to always return stable\r\nand consistent data, but this requires a significant amount of changes.\r\n\r\nFor now, just return a constant value for these specific entries.\r\n\r\nFixes: #4071\r\n\r\nSigned-off-by: Xavi Hernandez <xhernandez@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2e975916119ce4867fe49208030532118de32bb1", "commit_date": "2023-04-04T05:36:24Z", "commit_message": "core: fix potential deadlock in gf_print_trace (#3914)\n\nIt is unsafe when entering the signal handler\r\ngf_print_trace with setting logger as gf_logger_syslog.\r\nThe fatal reason is that syslog will be called to print trace.\r\nHowever, non-reentrant function 'malloc' is involved in such a procedure.\r\n\r\nSolution:  Skip print when logger is set as gf_logger_syslog.\r\n> Change-Id: Ica454d01c7aebaad5a1412e7b19c533567fe486c\r\n> Fixes: #3882\r\n> Signed-off-by: ChenJinhao chen.jinhao@zte.com.cn\r\n> (Cherry picked from commit 0639931bfd265eda02970ea22282637da6ca80f8)\r\n> (Reviewed on upstream link https://github.com/gluster/glusterfs/pull/3898)\r\n\r\nChange-Id: Ica454d01c7aebaad5a1412e7b19c533567fe486c\r\nFixes: #3882\r\n\r\nSigned-off-by: Mohit Agrawal <moagrawa@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "11129e0029500f5f76a973e33b7c49b3c3fde811", "commit_date": "2023-03-31T08:19:24Z", "commit_message": "glusterd: generate unique names in /tmp (#4077)\n\nGlusterd generates some files inside /tmp. In general that shouldn't be\r\na problem. However during the regression test run, some tests start\r\nseveral glusterd instances in the same machine. When this happens,\r\nthere's a chance that two processes try to update the same file at the\r\nsame time, causing errors and spurious test failures.\r\n\r\nThis patch forces that the filename generated in /tmp is different for\r\neach process, avoiding this problem.\r\n\r\nUpdates: #4020\r\n\r\nSigned-off-by: Xavi Hernandez <xhernandez@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3d507a2ca57cbad9f35b2fc4e5cc1303c812d8bc", "commit_date": "2023-03-30T07:56:05Z", "commit_message": "test: ./tests/bugs/posix/bug-1651445.t is failing while running test suite (#3696) (#3771)\n\nThe ./tests/bugs/posix/bug-1651445.t is getting failed continuously\r\nwhile running test suite. The test case is failing after reaching a\r\nsituation while brick is throwing an ENOSPC error and after cleanup, as the\r\ntest case is trying to create a file it is failing. The file creation is\r\nfailing because the flag (disk_space_full) is reset after every 5s by\r\na thread posix_ctx_disk_thread_proc.\r\n\r\nThe test case is failing also in centos-8 because LVM reserved more\r\nspace in centos-8 as compare to centos-7\r\n\r\nSolution: 1) After cleanup data wait for 5s to reset the flag. Earlier\r\n             the test case did the same but it was changed by the patch(#3637).\r\n          2) Change the overwrite condition in posix_writev.\r\n          3) In case of centos-8 call 2nd dd command with low block size.\r\n\r\n>Fixes: #3695\r\n>Signed-off-by: Mohit Agrawal <moagrawa@redhat.com>\r\n\r\nChange-Id: Ifa0310ba9266651557e29480f5ea476016726e41\r\n\r\nSigned-off-by: Shwetha K Acharya <sacharya@redhat.com>\r\nCo-authored-by: mohit84 <moagrawa@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0cbf51a9827af0e3a35f5cfa823bfa39740bbc58", "commit_date": "2023-03-30T07:32:19Z", "commit_message": "fuse: Resolve asan bug in during receive event notification (#4024)\n\nThe fuse xlator notify function tries to assign data object to graph\r\nobject without checking an event. In case of upcall event data object\r\nrepresents upcall object so during access of graph object the process\r\ncrashed for asan build.\r\n\r\nSolution: Access the graph->id only while an event is associated\r\nspecifically to fuse xlator\r\n\r\n> Fixes: #3954\r\n> Change-Id: I6b2869256b26d22163879737dcf163510d1cd8bf\r\n> Signed-off-by: Mohit Agrawal moagrawa@redhat.com\r\n> (Reviewed on upstream link #4019)\r\n\r\nFixes: #3954\r\nChange-Id: I6b2869256b26d22163879737dcf163510d1cd8bf", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "21381797d743b75aab47209f2500bb3007710f56", "commit_date": "2023-03-29T05:40:50Z", "commit_message": "posix-aio: fix iocb contents for writev (#4037)\n\nThe structure defined for iocb for user-space contains a union with a\r\nvector based substructure that seems created to pass iovec-based\r\noperations to the kernel. However this structure is not supported by the\r\nkernel and the library doesn't translate it.\r\n\r\nIn little-endian architectures, this structure is binary compatible with\r\nthe one expected by the kernel, but this is not true for big-endian\r\narchitectures.\r\n\r\nTo avoid this problem, instead of using the iovec-based substructure,\r\nthe common structure is used to also pass the vectors.\r\n\r\nFixes: #4031\r\n\r\nSigned-off-by: Xavi Hernandez <xhernandez@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7d5f9eb132b08b0b32c94316803eb9cf9f32f900", "commit_date": "2023-03-28T12:14:20Z", "commit_message": "afr: fix size of stack-allocated array (#4054)\n\nOne array allocated using alloca() was not using the right size,\r\ncorrupting adjacent memory when the array was used.\r\n\r\nAlso updated the related tests since they were not working correctly.\r\nThe test tried to pass some data through a variable that was created in\r\na child subshell, so the variable was empty in the parent.\r\n\r\nTo implement the same functionality but supporting passing data between\r\nsubshells, a new test command has been created: TEST_WITHIN.\r\n\r\nIt works like TEST but if the test is not successful, it waits for some\r\ntime before marking the test as bad. Once the test succeeds, whatever\r\ndata the test has returned during its execution will be available in the\r\nvariable TEST_OUTPUT.\r\n\r\nFixes: #4042\r\n\r\nSigned-off-by: Xavi Hernandez <xhernandez@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1cd35434f22df2528040aae417c5823a48e750d7", "commit_date": "2023-03-27T13:38:14Z", "commit_message": "posix: fix directory gfid handle if a rename fails (#4052)\n\n* posix: fix directory gfid handle if a rename fails\r\n\r\nWhen a directory is renamed to a non-empty existing directory, the\r\nrename will fail. However, the gfid handle of the old directory was\r\nremoved before attempting the rename, at it was not restored in case of\r\nfailure.\r\n\r\nThis patch only removes the gfid handle once the rename has succeeded.\r\n\r\nFixes: #2752\r\n\r\nSigned-off-by: Xavi Hernandez <xhernandez@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "87432778bb0f103c8ea1bdb358228e94e65ade72", "commit_date": "2023-03-27T13:36:45Z", "commit_message": "configure: force 'char' type to be signed (#4039)\n\nOn some systems, the 'char' type is interpreted as an unsigned char.\r\nThis may cause some issues as Gluster code assumes that 'char' is\r\nsigned.\r\n\r\nThis patch adds the '-fsigned-char' option during compilation to make\r\nsure it works as expected.\r\n\r\nUpdates: #1000\r\n\r\nSigned-off-by: Xavi Hernandez <xhernandez@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c267f1a6ea283fe49b4b9aa887dcc26314cad7eb", "commit_date": "2023-03-27T13:34:35Z", "commit_message": "nfs: fix ACL encoding for big-endian archs (#4041)\n\nEncoding and decoding ACLs from binary data in gNFS was done without\r\ntaking into account the endianess of the machine.\r\n\r\n* Also Fix FreeBSD include issue\r\n\r\nUpdates: #4020\r\n\r\nSigned-off-by: Xavi Hernandez <xhernandez@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2222522e296523d071b2a37cfba735cb8b5d6c29", "commit_date": "2023-03-20T15:03:13Z", "commit_message": "bug-1650403.t: increase timemout\n\nThis tests creates 5 volums and enbales and disables self-heal 50 time\nfor each one. Each enable/disable operation takes around 1 second, so\nthe total time this will take is around 5 * 50 * 2 = 500 seconds.\n\nThe script timeout is set to 500 seconds, which is too close to the\nrequired time, causing a lot of spurious failures.\n\nUpdates: #4020\nSigned-off-by: Xavi Hernandez <xhernandez@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f060ba80a092d2d07af5ca4f298dcfb9561fd62b", "commit_date": "2023-03-19T14:47:00Z", "commit_message": "hashfn: fix inconsistencies on big-endian architectures (#4014)\n\nThe computation of the SuperFashHash function did assume that the code\r\nwas run on a little-endian machine, causing a different result when it's\r\nrun on a big-endian machine.\r\n\r\nThis patch explicitly accesses the memory using little-endian mode to\r\nkeep backwards compatibility but to produce the same result on\r\nbig-endian architectures.\r\n\r\nFixes: #3345\r\n\r\nSigned-off-by: Xavi Hernandez <xhernandez@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4f51c1c868115ce38b46c5f8393c7f04ca8df015", "commit_date": "2023-03-19T14:46:21Z", "commit_message": "xdr: fix stack overflow when processing glx_dir(p)list structures (#4013)\n\nThe glx_dirlist and glx_dirplist XDR structures are defined as a linked\r\nlist of objects. When rpcgen generates code to encode and decode these\r\nstructures, it does so by implementing a simple recursive function.\r\n\r\nWhen the list of entries to encode is large, the recursive call could\r\ncause a stack overflow.\r\n\r\nThe best way to fix this is by transforming the linked list into a\r\nvariable length array in the XDR definition. However this would break\r\nbackward compatibility, making this change impossible to backport to\r\nolder releases.\r\n\r\nThis fix uses a hack by implementing custom encoding/decoding functions\r\nthat don't use recursivity and ignores the ones generated by rpcgen.\r\n\r\nFixes: #3346\r\n\r\nSigned-off-by: Xavi Hernandez <xhernandez@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2b13a69b36ff9ddcea2f40e93dc6e3cf3aff6920", "commit_date": "2023-01-24T06:48:31Z", "commit_message": "mem-pool: fix memory corruption in debug builds (#3923)\n\n* mem-pool.c: improve invalidate() function\r\n\r\n1. Reduce padding of the invalid struct (from 40 bytes to 32 bytes)\r\n2. Reduce no. of calls to memcpy()\r\n\r\nThis changes slightly the way the memory is invalidated, but I hope now memcpy() calls are all aligned.\r\n\r\nChange-Id: I236a478d61b0e41bb01cdd90bd94a155ae40ef19\r\nUpdates: #1000\r\nSigned-off-by: Yaniv Kaul <ykaul@redhat.com>\r\n\r\n* memory accounting - reduce code in non DEBUG build\r\n\r\n- gf_mem_update_acct_info() is not needed when not in DEBUG mode\r\n- re-order variables in the structure according to access pattern\r\n- Turn xlator_mem_acct_unref() into xlator_mem_acct_destroy() and call it only when refcnt euqals 0 - which is quite rare.\r\n\r\nChange-Id: I5fcae603da943320bfbe5596a9403b1d91dfccd2\r\nUpdates: #3855\r\nSigned-off-by: Yaniv Kaul <ykaul@redhat.com>\r\n\r\n* caa_unlikely/likely for some common validations\r\n\r\nWhile it would have been better to remove redundant validations,\r\na start would be to decorate them with caa_likely/unlikely as a hint\r\nto the compiler (and the reader) about the probability of an 'if' statement.\r\n\r\nChange-Id: Icc743d45ef5737665e5dffe008b525a168a8867b\r\nSigned-off-by: Yaniv Kaul <ykaul@redhat.com>\r\n\r\n* mem-pool: fix memory corruption in debug builds\r\n\r\nIn debug builds, all dynamically allocated memory blocks of the same\r\ntype are kept in a list to quickly identify them if necessary. This\r\nlist is updated inside a critical region protected by a mutex.\r\n\r\nWhen a memory block is resized using realloc(), there's a chance that\r\nthe returned pointer has been moved to another memory address. If this\r\nhappens, the list was updated to point to the new location. However,\r\nthe resize and the list update are not atomic, which means that a\r\nremoval or modification of a memory block adjacent (in the list) to\r\nthe resized one, will see the pointer to the old memory address, which\r\nis not valid anymore.\r\n\r\nThis causes a use-after-free issue that corrupts memory.\r\n\r\nThis patch removes the memory block from the list before resizing it\r\nto avoid issues with concurrent list accesses. Once the resize is\r\ncomplete, the memory block is re-added to the list.\r\n\r\nFixes: #3659\r\nChange-Id: I64730998414b9d3695947d73ba993fad340a6582\r\nSigned-off-by: Xavi Hernandez <xhernandez@redhat.com>\r\n\r\nSigned-off-by: Yaniv Kaul <ykaul@redhat.com>\r\nSigned-off-by: Xavi Hernandez <xhernandez@redhat.com>\r\nCo-authored-by: Yaniv Kaul <ykaul@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "90af4d22cea721a0768c79ff0f1fcae3b50f8641", "commit_date": "2022-11-15T13:55:04Z", "commit_message": "io-stat: xlator Segmentation fault (#3904)\n\nThe process is getting crashed during call ios_bump_stats in cbk code path.\r\nAfter checked the code it seems the process is getting crashed because the\r\nios_stat_head list is destroyed by the function ios_destroy_top_stats\r\nwithout taking a list mutex while receive a clear profile event from the\r\nclient. If at the same time a process is trying to access the list\r\nit can be crash.\r\n\r\nSolution: Destroy the ios_stat under the list mutex.\r\n> Change-Id: I1b4d56517fa405eb84da7fffca61e15530652204\r\n> Fixes: #3901\r\n> Signed-off-by: Mohit Agrawal moagrawa@redhat.com\r\n> (Cherry picked from commit 3e874d0b50f474f90861b58d391b17a0a7c6e343)\r\n> (Reviewed on upstream link https://github.com/gluster/glusterfs/pull/3902)\r\n\r\nChange-Id: I1b4d56517fa405eb84da7fffca61e15530652204\r\nFixes: #3901\r\nSigned-off-by: Mohit Agrawal <moagrawa@redhat.com>\r\n\r\nSigned-off-by: Mohit Agrawal <moagrawa@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1ed25f589657e70d392fa8760feacc821dbc5cf5", "commit_date": "2022-11-07T05:50:15Z", "commit_message": "api: Use opendir for directories in glfs_open and glfs_h_open (#3894)\n\nIn addition to files glfs_open() and glfs_h_open() are capable of\r\nhandling directory opens. But there are various other components like\r\nDHT and probably other client xlators which are tightly coupled to work\r\nwith directory opens using just opendir. One such example is the case\r\nwhere fsetxattr() is called with a file descriptor opened for the\r\ndirectory using glfs_open() or glfs_h_open() resulting in EBADFD.\r\n\r\nTherefore we make a differentiation within these APIs to correctly call\r\nsyncop_open() or syncop_opendir() for file and directory entries\r\nrespectively to avoid any possible file descriptor errors.\r\n\r\nCredits: Xavi Hernandez <xhernandez@redhat.com>\r\nSigned-off-by: Anoop C S <anoopcs@cryptolab.net>\r\n\r\nSigned-off-by: Anoop C S <anoopcs@cryptolab.net>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7c5316111a11249e259378b982fc5193b2daac92", "commit_date": "2022-09-27T06:57:52Z", "commit_message": "posix: posix xlator does not respects storage.reserve value (#3637) (#3805)\n\n* posix: posix xlator does not respects storage.reserve value\r\n\r\nIn a small storage environment (brick_root is < 100G) the\r\nPOSIX xlator does not respect the storage.reserve value.The flag value\r\nis set after every 5s basis and so in that window if the client has\r\ngenerated the data the posix xlator does not validate storage.reserve\r\nspacee check and allow client to consume the brick space unless the\r\nflag has not been set by a posixctxres thread.\r\n\r\nSolution: Before doing any writev for an external client check\r\n          the current free storage space with writev buffer and if\r\n          it has surpassed the limit return ENOSPC. The priv->write_value\r\n          parameter has been updated during call unlink\r\n          and truncate fop also to use the correct value.\r\n\r\n>Fixes: #3636\r\n>Change-Id: I7e174553c22893dd44438f48406e895e13b5db5e\r\n>Signed-off-by: Mohit Agrawal <moagrawa@redhat.com>\r\n\r\n* posix: Resolve reviewer comments\r\n\r\n>Fixes: #3636\r\n>Change-Id: I569b8e5d96f138204d25e9753a92cb19135bd584\r\n>Signed-off-by: Mohit Agrawal <moagrawa@redhat.com>\r\n\r\n* posix: Calculate file written size based on (pre|post)op\r\n       block size difference to avoid overwrite cases.\r\n\r\n>Fixes: #3636\r\n>Signed-off-by: Mohit Agrawal <moagrawa@redhat.com>\r\n\r\nChange-Id: I87efee72e9cdbd1a20df30b07a6e2587ce0675a6\r\nSigned-off-by: Shwetha K Acharya <sacharya@redhat.com>\r\n\r\nSigned-off-by: Shwetha K Acharya <sacharya@redhat.com>\r\nCo-authored-by: mohit84 <moagrawa@redhat.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}]}