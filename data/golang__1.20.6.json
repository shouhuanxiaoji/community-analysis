{"release-branch.go1.20": [{"commit_oid": "d48639094b3a2275092fff43cd5deb1694f7e9e0", "commit_date": "2023-10-12T22:37:08Z", "commit_message": "[release-branch.go1.20] cmd/link: split text sections for arm 32-bit\n\nThis CL is a roll-forward (tweaked slightly) of CL 467715, which\nturned on text section splitting for GOARCH=arm. The intent is to\navoid recurrent problems with external linking where there is a\ndisagreement between the Go linker and the external linker over\nwhether a given branch will reach. In the past our approach has been\nto tweak the reachability calculations slightly to try to work around\npotential linker problems, but this hasn't proven to be very robust;\nsection splitting seems to offer a better long term fix.\n\nUpdates #58425.\nFixes #63316.\n\nChange-Id: I7372d41abce84097906a3d0805b6b9c486f345d6\nReviewed-on: https://go-review.googlesource.com/c/go/+/531795\nReviewed-by: Cherry Mui <cherryyz@google.com>\nRun-TryBot: Than McIntosh <thanm@google.com>\nTryBot-Result: Gopher Robot <gobot@golang.org>\n(cherry picked from commit 1e690409206ff97330b5a91517d453fc5129bab2)\nReviewed-on: https://go-review.googlesource.com/c/go/+/532097\nAuto-Submit: Dmitri Shuralyov <dmitshur@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c8fdffb790f96480cf678b9dcde657ee462b23fa", "commit_date": "2023-10-10T19:19:46Z", "commit_message": "[release-branch.go1.20] all: tidy dependency versioning after release\n\nDone with:\n\ngo get golang.org/x/net@internal-branch.go1.20-vendor\ngo mod tidy\ngo mod vendor\ngo generate net/http  # zero diff since CL 534255 already did this\n\nFor #63417.\nFor #63426.\nFor CVE-2023-39325.\n\nChange-Id: Ib258e0d8165760a1082e02c2f4c5ce7d2a3c3c90\nReviewed-on: https://go-review.googlesource.com/c/go/+/534297\nAuto-Submit: Dmitri Shuralyov <dmitshur@google.com>\nReviewed-by: Dmitri Shuralyov <dmitshur@google.com>\nReviewed-by: Michael Pratt <mpratt@google.com>\nTryBot-Bypass: Dmitri Shuralyov <dmitshur@golang.org>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8042fd87f37a725e34407994c9a11aaf95f5af45", "commit_date": "2023-10-10T16:26:21Z", "commit_message": "[release-branch.go1.20] go1.20.10\n\nChange-Id: I328fce7b2411092a066ee32dd77f18ec5744e707\nReviewed-on: https://go-review.googlesource.com/c/go/+/534336\nReviewed-by: Dmitri Shuralyov <dmitshur@google.com>\nCommit-Queue: Gopher Robot <gobot@golang.org>\nReviewed-by: Heschi Kreinick <heschi@google.com>\nAuto-Submit: Gopher Robot <gobot@golang.org>\nTryBot-Bypass: Dmitri Shuralyov <dmitshur@google.com>\nReviewed-by: Michael Pratt <mpratt@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e175f27f58aa7b9cd4d79607ae65d2cd5baaee68", "commit_date": "2023-10-10T16:18:02Z", "commit_message": "[release-branch.go1.20] net/http: regenerate h2_bundle.go\n\nPull in a security fix from x/net/http2:\nhttp2: limit maximum handler goroutines to MaxConcurrentStreamso\n\nFor #63417\nFixes #63426\nFixes CVE-2023-39325\n\nChange-Id: I6e32397323cd9b4114c990fcc9d19557a7f5f619\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/2047401\nReviewed-by: Tatiana Bradley <tatianabradley@google.com>\nTryBot-Result: Security TryBots <security-trybots@go-security-trybots.iam.gserviceaccount.com>\nRun-TryBot: Damien Neil <dneil@google.com>\nReviewed-by: Ian Cottrell <iancottrell@google.com>\nReviewed-on: https://go-review.googlesource.com/c/go/+/534255\nReviewed-by: Dmitri Shuralyov <dmitshur@google.com>\nReviewed-by: Damien Neil <dneil@google.com>\nTryBot-Bypass: Dmitri Shuralyov <dmitshur@google.com>\nReviewed-by: Michael Pratt <mpratt@google.com>\nAuto-Submit: Dmitri Shuralyov <dmitshur@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "68f9a6e2addc828246992e66e79c6a51a32d1d71", "commit_date": "2023-10-05T19:28:06Z", "commit_message": "[release-branch.go1.20] go1.20.9\n\nChange-Id: Ic4eedc3dc193c335784b5a86214ea2e655e631a7\nReviewed-on: https://go-review.googlesource.com/c/go/+/533237\nReviewed-by: Dmitri Shuralyov <dmitshur@google.com>\nReviewed-by: Michael Pratt <mpratt@google.com>\nTryBot-Bypass: Michael Pratt <mpratt@google.com>\nAuto-Submit: Gopher Robot <gobot@golang.org>\nReviewed-by: Than McIntosh <thanm@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "31d5b604ac0adb58aec4870ac1b974c08312fd49", "commit_date": "2023-10-05T18:31:32Z", "commit_message": "[release-branch.go1.20] cmd/compile: use absolute file name in isCgo check\n\nFor #23672\nUpdates #63211\nFixes #63213\nFixes CVE-2023-39323\n\nChange-Id: I4586a69e1b2560036afec29d53e53cf25e6c7352\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/2032884\nReviewed-by: Matthew Dempsky <mdempsky@google.com>\nReviewed-by: Roland Shoemaker <bracewell@google.com>\n(cherry picked from commit 9b19e751918dd218035811b1ef83a8c2693b864a)\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/2037629\nReviewed-by: Tatiana Bradley <tatianabradley@google.com>\nRun-TryBot: Roland Shoemaker <bracewell@google.com>\nReviewed-by: Damien Neil <dneil@google.com>\nReviewed-on: https://go-review.googlesource.com/c/go/+/533195\nAuto-Submit: Michael Pratt <mpratt@google.com>\nReviewed-by: Ian Lance Taylor <iant@google.com>\nTryBot-Bypass: Michael Pratt <mpratt@google.com>\nReviewed-by: Than McIntosh <thanm@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "83dce45959669a3b090d6701605a7ba408a10587", "commit_date": "2023-09-21T22:22:16Z", "commit_message": "[release-branch.go1.20] cmd/link: suppress -bind_at_load deprecation warning for ld-prime\n\nld-prime emits a deprecation warning for -bind_at_load. The flag\nis needed for plugins to not deadlock (#38824) when linking with\nolder darwin linker. It is supposedly not needed with newer linker\nwhen chained fixups are used. For now, we always pass it, and\nsuppress the warning.\n\nUpdates #61229.\nFor #62597.\n\nChange-Id: I4b8a6f864a460c40dc38adbb533f664f7fd5343c\nReviewed-on: https://go-review.googlesource.com/c/go/+/508696\nReviewed-by: Than McIntosh <thanm@google.com>\nTryBot-Result: Gopher Robot <gobot@golang.org>\nRun-TryBot: Cherry Mui <cherryyz@google.com>\n(cherry picked from commit 040dbf9c181a0e3ea9f7bd3ebe3f75acdc878aaf)\nReviewed-on: https://go-review.googlesource.com/c/go/+/527798", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "08c544db98da4292edfc5da7ceca17808fd41168", "commit_date": "2023-09-21T22:20:27Z", "commit_message": "[release-branch.go1.20] cmd/link: disable DWARF by default in c-shared mode on darwin\n\n[This is a (manual) backport of CL 527415 to Go 1.20.]\n\nCurrently, linking a Go c-shared object with C code using Apple's\nnew linker, it fails with\n\n% cc a.c go.so\nld: segment '__DWARF' filesize exceeds vmsize in 'go.so'\n\nApple's new linker has more checks for unmapped segments. It is\nvery hard to make it accept a Mach-O shared object with an\nadditional DWARF segment.\n\nWe may want to stop combinding DWARF into the shared object (see\nalso #62577). For now, disable DWARF by default in c-shared mode\non darwin.\n\nUpdates #61229.\nFor #62597.\n\nChange-Id: I313349f71296d6d7025db28469593825ce9f1866\nReviewed-on: https://go-review.googlesource.com/c/go/+/527819\nTryBot-Result: Gopher Robot <gobot@golang.org>\nReviewed-by: Than McIntosh <thanm@google.com>\nRun-TryBot: Cherry Mui <cherryyz@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "071f03a8e59fc404a823e547fa566983c60f1f07", "commit_date": "2023-09-21T22:20:16Z", "commit_message": "[release-branch.go1.20] cmd/link: force old Apple linker in plugin mode\n\nThere are some bugs in Apple's new linker that probably will not\nbe fixed when Xcode 15 is released (some time soon). We fix/work\naround them but it is too much to backport them all. Force old\nApple linker to work around.\n\nUpdates #61229.\nFor #62597.\n\nChange-Id: Ia5941918e882b22b4dbc41c74764d19d413d0b56\nReviewed-on: https://go-review.googlesource.com/c/go/+/527818\nRun-TryBot: Cherry Mui <cherryyz@google.com>\nTryBot-Result: Gopher Robot <gobot@golang.org>\nReviewed-by: Than McIntosh <thanm@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5b851804329aa547dafa278a0c35dd62298d651", "commit_date": "2023-09-06T15:31:47Z", "commit_message": "[release-branch.go1.20] go1.20.8\n\nChange-Id: Iac628daa970d01c5958839fcf668106e93bce8b0\nReviewed-on: https://go-review.googlesource.com/c/go/+/526037\nReviewed-by: Joedian Reid <joedian@golang.org>\nTryBot-Result: Gopher Robot <gobot@golang.org>\nAuto-Submit: Gopher Robot <gobot@golang.org>\nRun-TryBot: Cherry Mui <cherryyz@google.com>\nReviewed-by: Cherry Mui <cherryyz@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2070531d2f53df88e312edace6c8dfc9686ab2f5", "commit_date": "2023-09-06T14:22:36Z", "commit_message": "[release-branch.go1.20] html/template: properly handle special tags within the script context\n\nThe HTML specification has incredibly complex rules for how to handle\n\"<!--\", \"<script\", and \"</script\" when they appear within literals in\nthe script context. Rather than attempting to apply these restrictions\n(which require a significantly more complex state machine) we apply\nthe workaround suggested in section 4.12.1.3 of the HTML specification [1].\n\nMore precisely, when \"<!--\", \"<script\", and \"</script\" appear within\nliterals (strings and regular expressions, ignoring comments since we\nalready elide their content) we replace the \"<\" with \"\\x3C\". This avoids\nthe unintuitive behavior that using these tags within literals can cause,\nby simply preventing the rendered content from triggering it. This may\nbreak some correct usages of these tags, but on balance is more likely\nto prevent XSS attacks where users are unknowingly either closing or not\nclosing the script blocks where they think they are.\n\nThanks to Takeshi Kaneko (GMO Cybersecurity by Ierae, Inc.) for\nreporting this issue.\n\nFixes #62197\nFixes #62397\nFixes CVE-2023-39319\n\n[1] https://html.spec.whatwg.org/#restrictions-for-contents-of-script-elements\n\nChange-Id: Iab57b0532694827e3eddf57a7497ba1fab1746dc\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/1976594\nReviewed-by: Dmitri Shuralyov <dmitshur@google.com>\nReviewed-by: Tatiana Bradley <tatianabradley@google.com>\nReviewed-by: Damien Neil <dneil@google.com>\nRun-TryBot: Roland Shoemaker <bracewell@google.com>\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/2014621\nTryBot-Result: Security TryBots <security-trybots@go-security-trybots.iam.gserviceaccount.com>\nReviewed-on: https://go-review.googlesource.com/c/go/+/526099\nTryBot-Result: Gopher Robot <gobot@golang.org>\nRun-TryBot: Cherry Mui <cherryyz@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "023b542edf38e2a1f87fcefb9f75ff2f99401b4c", "commit_date": "2023-09-06T14:22:29Z", "commit_message": "[release-branch.go1.20] html/template: support HTML-like comments in script contexts\n\nPer Appendix B.1.1 of the ECMAScript specification, support HTML-like\ncomments in script contexts. Also per section 12.5, support hashbang\ncomments. This brings our parsing in-line with how browsers treat these\ncomment types.\n\nThanks to Takeshi Kaneko (GMO Cybersecurity by Ierae, Inc.) for\nreporting this issue.\n\nFixes #62196\nFixes #62395\nFixes CVE-2023-39318\n\nChange-Id: Id512702c5de3ae46cf648e268cb10e1eb392a181\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/1976593\nRun-TryBot: Roland Shoemaker <bracewell@google.com>\nReviewed-by: Tatiana Bradley <tatianabradley@google.com>\nReviewed-by: Damien Neil <dneil@google.com>\nReviewed-by: Dmitri Shuralyov <dmitshur@google.com>\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/2014620\nReviewed-on: https://go-review.googlesource.com/c/go/+/526098\nRun-TryBot: Cherry Mui <cherryyz@google.com>\nTryBot-Result: Gopher Robot <gobot@golang.org>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "612da32fb5e9c1e9641cd55dc269518426057ea9", "commit_date": "2023-08-24T21:11:06Z", "commit_message": "[release-branch.go1.20] cmd/compile: in expandCalls, move all arg marshalling into call block\n\nFor aggregate-typed arguments passed to a call, expandCalls\ndecomposed them into parts in the same block where the value\nwas created.  This is not necessarily the call block, and in\nthe case where stores are involved, can change the memory\nleaving that block, and getting that right is problematic.\n\nInstead, do all the expanding in the same block as the call,\nwhich avoids the problems of (1) not being able to reorder\nloads/stores across a block boundary to conform to memory\norder and (2) (incorrectly, not) exposing the new memory to\nconsumers in other blocks.  Putting it all in the same block\nas the call allows reordering, and the call creates its own\nnew memory (which is already dealt with correctly).\n\nFixes #62056.\nUpdates #61992.\n\nChange-Id: Icc7918f0d2dd3c480cc7f496cdcd78edeca7f297\nReviewed-on: https://go-review.googlesource.com/c/go/+/519276\nReviewed-by: Keith Randall <khr@google.com>\nRun-TryBot: David Chase <drchase@google.com>\nReviewed-by: Keith Randall <khr@golang.org>\nTryBot-Result: Gopher Robot <gobot@golang.org>\n(cherry picked from commit e72ecc6a6becab9ca895c0108047db4723394296)\nReviewed-on: https://go-review.googlesource.com/c/go/+/520059", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0b8768dbcf74bddedc32febd36732beb690b8aa", "commit_date": "2023-08-23T17:53:16Z", "commit_message": "[release-branch.go1.20] path/filepath: don't drop .. elements when cleaning invalid Windows paths\n\nFix a bug where Clean could improperly drop .. elements from a\npath on Windows, when the path contains elements containing a ':'.\n\nFor example, Clean(\"a/../b:/../../c\") now correctly returns \"..\\c\"\nrather than \"c\".\n\nFor #61866.\nFixes #61867.\n\nChange-Id: I97b0238953c183b2ce19ca89c14f26700008ea72\nReviewed-on: https://go-review.googlesource.com/c/go/+/517216\nRun-TryBot: Damien Neil <dneil@google.com>\nReviewed-by: Bryan Mills <bcmills@google.com>\nTryBot-Result: Gopher Robot <gobot@golang.org>\nReviewed-by: Quim Muntal <quimmuntal@gmail.com>\n(cherry picked from commit 6e43407931ee4acc204620a9fae59c7903164901)\nReviewed-on: https://go-review.googlesource.com/c/go/+/519636\nReviewed-by: Dmitri Shuralyov <dmitshur@google.com>\nRun-TryBot: Dmitri Shuralyov <dmitshur@golang.org>\nReviewed-by: Damien Neil <dneil@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b4636682759ea7cd7a8ed480e4f98f401127306f", "commit_date": "2023-08-17T21:10:05Z", "commit_message": "[release-branch.go1.20] runtime: profiling on Darwin cannot use blocking reads\n\nOn Darwin (and assume also on iOS but not sure), notetsleepg\ncannot be called in a signal-handling context.  Avoid this\nby disabling block reads on Darwin.\n\nAn alternate approach was to add \"sigNote\" with a pipe-based\nimplementation on Darwin, but that ultimately would have required\nat least one more linkname between runtime and syscall to avoid\nracing with fork and opening the pipe, so, not.\n\nFixes #62018.\nUpdates #61768.\n\nChange-Id: I0e8dd4abf9a606a3ff73fc37c3bd75f55924e07e\nReviewed-on: https://go-review.googlesource.com/c/go/+/518836\nRun-TryBot: David Chase <drchase@google.com>\nTryBot-Result: Gopher Robot <gobot@golang.org>\nReviewed-by: Michael Knyszek <mknyszek@google.com>\n(cherry picked from commit c6ee8e31e3e7b01da54d241ae5a8eed350ab0e9f)\nReviewed-on: https://go-review.googlesource.com/c/go/+/518677\nAuto-Submit: Dmitri Shuralyov <dmitshur@google.com>\nReviewed-by: Austin Clements <austin@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "974a3c9af7943a2c994d713c410bcadd7dca77b4", "commit_date": "2023-08-17T21:06:30Z", "commit_message": "[release-branch.go1.20] go/types, types2: don't panic during interface completion\n\nIt should be possible for the importer to construct an invalid\ninterface, as would have been produced by type checking.\n\nUpdates #61737\nFixes #61744\n\nChange-Id: I72e063f4f1a6205d273a623acce2ec08c34c3cc2\nReviewed-on: https://go-review.googlesource.com/c/go/+/515555\nReviewed-by: Robert Griesemer <gri@google.com>\nAuto-Submit: Robert Findley <rfindley@google.com>\nReviewed-by: Olif Oftimis <oftimisolif@gmail.com>\nRun-TryBot: Robert Findley <rfindley@google.com>\nTryBot-Result: Gopher Robot <gobot@golang.org>\n(cherry picked from commit d2ee7821d357a4e4948b9a6251e82b4ced9a1eae)\nReviewed-on: https://go-review.googlesource.com/c/go/+/515638\nAuto-Submit: Dmitri Shuralyov <dmitshur@google.com>\nReviewed-by: Dmitri Shuralyov <dmitshur@golang.org>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "14e3c7338d9914295a25ba6b741063083b6b54db", "commit_date": "2023-08-17T20:58:04Z", "commit_message": "[release-branch.go1.20] cmd/api: rename api.go to main_test.go\n\nThis makes cmd/api no longer an importable package.\nIn CL 453258 I forgot that there was no direct prohibition\non importing packages from cmd - we just rely on the\nfact that cmd/* is all package main and everything else\nis cmd/internal.\n\nFixes #62069.\nFixes #62070.\n\nChange-Id: Ifed738d333b40663f85eca8f83025fcea5df89a9\nReviewed-on: https://go-review.googlesource.com/c/go/+/520038\nReviewed-by: Bryan Mills <bcmills@google.com>\nRun-TryBot: Russ Cox <rsc@golang.org>\nTryBot-Result: Gopher Robot <gobot@golang.org>\nReviewed-on: https://go-review.googlesource.com/c/go/+/520060\nAuto-Submit: Dmitri Shuralyov <dmitshur@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "095cfba86be8db249ada8605fa31764fd4ce9241", "commit_date": "2023-08-16T17:16:34Z", "commit_message": "[release-branch.go1.20] crypto/tls: add GODEBUG to control max RSA key size\n\nAdd a new GODEBUG setting, tlsmaxrsasize, which allows controlling the\nmaximum RSA key size we will accept during TLS handshakes.\n\nFixes #61966\n\nChange-Id: I52f060be132014d219f4cd438f59990011a35c96\nReviewed-on: https://go-review.googlesource.com/c/go/+/517495\nAuto-Submit: Roland Shoemaker <roland@golang.org>\nReviewed-by: Russ Cox <rsc@golang.org>\nRun-TryBot: Roland Shoemaker <roland@golang.org>\nTryBot-Result: Gopher Robot <gobot@golang.org>\nReviewed-on: https://go-review.googlesource.com/c/go/+/518555\nAuto-Submit: Dmitri Shuralyov <dmitshur@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1a91bb94b07a4583df61179faf009b1120eaf93e", "commit_date": "2023-08-14T22:05:13Z", "commit_message": "[release-branch.go1.20] cmd/go: do not index std as a module in modcache\n\nWe do not index std as a whole module ever.\n\nWhen working in the main Go repo, files in package change often,\nso we don't want to pay the cost of reindexing all of std when what\nwe really need is just to reindex strings. Per-package indexing\nworks better for that case.\n\nWhen using a released Go toolchain, we don't have to worry about\nthe whole module changing, but if we switch to whole-module indexing\nat that point, we have the potential for bugs that only happen in\nreleased toolchains. Probably not worth the risk.\n\nFor similar reasons, we don't index the current work module as\na whole module (individual packages are changing), so we use the heuristic\nthat we only do whole-module indexing in the module cache.\n\nThe new toolchain modules live in the module cache, though, and\nour heuristic was causing whole-module indexing for them.\nAs predicted, enabling whole-module indexing for std when it's\ncompletely untested does in fact lead to bugs (a very minor one).\n\nThis CL turns off whole-module indexing for std even when it is\nin the module cache, to bring toolchain module behavior back in\nline with the other ways to run toolchains.\n\nUpdates #57001.\nFor #61873.\n\nChange-Id: I5012dc713f566846eb4b2848facc7f75bc956eb9\nReviewed-on: https://go-review.googlesource.com/c/go/+/504119\nTryBot-Result: Gopher Robot <gobot@golang.org>\nReviewed-by: Bryan Mills <bcmills@google.com>\nAuto-Submit: Russ Cox <rsc@golang.org>\nRun-TryBot: Russ Cox <rsc@golang.org>\n(cherry picked from commit a7b179370124c0114036b98a14f3f17cf76c122d)\nReviewed-on: https://go-review.googlesource.com/c/go/+/518415\nReviewed-by: Russ Cox <rsc@golang.org>\nRun-TryBot: Bryan Mills <bcmills@google.com>\nAuto-Submit: Dmitri Shuralyov <dmitshur@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ede3e278ae8df8ce1beec4b251dbaa68b8d2ad48", "commit_date": "2023-08-14T21:56:57Z", "commit_message": "[release-branch.go1.20] net/http: permit requests with invalid Host headers\n\nHistorically, the Transport has silently truncated invalid\nHost headers at the first '/' or ' ' character. CL 506996 changed\nthis behavior to reject invalid Host headers entirely.\nUnfortunately, Docker appears to rely on the previous behavior.\n\nWhen sending a HTTP/1 request with an invalid Host, send an empty\nHost header. This is safer than truncation: If you care about the\nHost, then you should get the one you set; if you don't care,\nthen an empty Host should be fine.\n\nContinue to fully validate Host headers sent to a proxy,\nsince proxies generally can't productively forward requests\nwithout a Host.\n\nFor #60374\nFixes #61431\nFixes #61826\n\nChange-Id: If170c7dd860aa20eb58fe32990fc93af832742b6\nReviewed-on: https://go-review.googlesource.com/c/go/+/511155\nTryBot-Result: Gopher Robot <gobot@golang.org>\nReviewed-by: Roland Shoemaker <roland@golang.org>\nRun-TryBot: Damien Neil <dneil@google.com>\n(cherry picked from commit b9153f6ef338baee5fe02a867c8fbc83a8b29dd1)\nReviewed-on: https://go-review.googlesource.com/c/go/+/518756\nAuto-Submit: Dmitri Shuralyov <dmitshur@google.com>\nReviewed-by: Russ Cox <rsc@golang.org>\nRun-TryBot: Roland Shoemaker <roland@golang.org>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "201f8b40dceb7a821fd9958b2061c33d436d107b", "commit_date": "2023-08-11T17:11:34Z", "commit_message": "[release-branch.go1.20] cmd/go: refuse to build Go 1.22 code\n\nWith #60078 accepted, we expect Go 1.22 will have different\nfor loop semantics than Go 1.20 did. Once Go 1.22 is released,\nGo 1.20 will be unsupported, but add a check anyway, just to\nhelp catch some mistakes and usage of old Go toolchains\nbeyond their end-of-support.\n\nNote that Go 1.20 can keep being used indefinitely with pre-Go 1.22 code.\nThis change only makes it refuse to build code that says it needs\nGo 1.22 semantics, because Go 1.20 does not provide those.\n\nFor #60078.\n\nChange-Id: I75118d6fbd0cc08a6bc309aca54c389a255ba7dc\nReviewed-on: https://go-review.googlesource.com/c/go/+/518675\nReviewed-by: Bryan Mills <bcmills@google.com>\nRun-TryBot: Russ Cox <rsc@golang.org>\nTryBot-Result: Gopher Robot <gobot@golang.org>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "adb775e309dea43157e931835e920ac9e7769abe", "commit_date": "2023-08-01T19:34:15Z", "commit_message": "[release-branch.go1.20] go1.20.7\n\nChange-Id: I5138f0e0b686f7c28c120f464b66736f43048e46\nReviewed-on: https://go-review.googlesource.com/c/go/+/514936\nRun-TryBot: Gopher Robot <gobot@golang.org>\nAuto-Submit: Gopher Robot <gobot@golang.org>\nReviewed-by: Matthew Dempsky <mdempsky@google.com>\nTryBot-Result: Gopher Robot <gobot@golang.org>\nReviewed-by: David Chase <drchase@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "659f2a22076713bd2500adc82e026b6a746d8ba1", "commit_date": "2023-08-01T19:03:48Z", "commit_message": "[release-branch.go1.20] crypto/tls: restrict RSA keys in certificates to <= 8192 bits\n\nExtremely large RSA keys in certificate chains can cause a client/server\nto expend significant CPU time verifying signatures. Limit this by\nrestricting the size of RSA keys transmitted during handshakes to <=\n8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only\nthree certificates in circulation with keys larger than this, and all\nthree appear to be test certificates that are not actively deployed. It\nis possible there are larger keys in use in private PKIs, but we target\nthe web PKI, so causing breakage here in the interests of increasing the\ndefault safety of users of crypto/tls seems reasonable.\n\nThanks to Mateusz Poliwczak for reporting this issue.\n\nUpdates #61460\nFixes #61580\nFixes CVE-2023-29409\n\nChange-Id: Ie35038515a649199a36a12fc2c5df3af855dca6c\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/1912161\nReviewed-by: Damien Neil <dneil@google.com>\nReviewed-by: Tatiana Bradley <tatianabradley@google.com>\nRun-TryBot: Roland Shoemaker <bracewell@google.com>\n(cherry picked from commit d865c715d92887361e4bd5596e19e513f27781b7)\nReviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/1965747\nTryBot-Result: Security TryBots <security-trybots@go-security-trybots.iam.gserviceaccount.com>\nReviewed-on: https://go-review.googlesource.com/c/go/+/514900\nRun-TryBot: David Chase <drchase@google.com>\nReviewed-by: Matthew Dempsky <mdempsky@google.com>\nTryBot-Result: Gopher Robot <gobot@golang.org>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "10d85fa0f6218704f7d9f3fccbab3952c064eddc", "commit_date": "2023-07-26T16:23:04Z", "commit_message": "[release-branch.go1.20] cmd/asm, cmd/internal/obj: generate proper atomic ops for riscv64\n\nGo's memory model closely follows the approach C++ concurrency memory\nmodel (https://go.dev/ref/mem) and Go atomic \"has the same semantics as C++'s\nsequentially consistent atomics\".\n\nMeanwhile according to RISCV manual A.6 \"Mappings from C/C++ primitives to RISC-V primitives\".\nC/C++ atomic operations (memory_order_acq_rel) should be map to \"amo<op>.{w|d}.aqrl\"\nLR/SC (memory_order_acq_rel) should map to \"lr.{w|d}.aq; <op>; sc.{w|d}.rl\"\n\ngoos: linux\ngoarch: riscv64\npkg: runtime/internal/atomic\n                \u2502 atomic.old.bench \u2502          atomic.new.bench           \u2502\n                \u2502      sec/op      \u2502   sec/op     vs base                \u2502\nAtomicLoad64-4         4.216n \u00b1 1%   4.202n \u00b1 0%        ~ (p=0.127 n=10)\nAtomicStore64-4        5.040n \u00b1 0%   6.718n \u00b1 0%  +33.30% (p=0.000 n=10)\nAtomicLoad-4           4.217n \u00b1 0%   4.213n \u00b1 0%        ~ (p=0.145 n=10)\nAtomicStore-4          5.040n \u00b1 0%   6.718n \u00b1 0%  +33.30% (p=0.000 n=10)\nAnd8-4                 9.237n \u00b1 0%   9.240n \u00b1 0%        ~ (p=0.582 n=10)\nAnd-4                  5.878n \u00b1 0%   6.719n \u00b1 0%  +14.31% (p=0.000 n=10)\nAnd8Parallel-4         28.44n \u00b1 0%   28.46n \u00b1 0%   +0.07% (p=0.000 n=10)\nAndParallel-4          28.40n \u00b1 0%   28.43n \u00b1 0%   +0.11% (p=0.000 n=10)\nOr8-4                  8.399n \u00b1 0%   8.398n \u00b1 0%        ~ (p=0.357 n=10)\nOr-4                   5.879n \u00b1 0%   6.718n \u00b1 0%  +14.27% (p=0.000 n=10)\nOr8Parallel-4          28.43n \u00b1 0%   28.45n \u00b1 0%   +0.09% (p=0.000 n=10)\nOrParallel-4           28.40n \u00b1 0%   28.43n \u00b1 0%   +0.11% (p=0.000 n=10)\nXadd-4                 30.05n \u00b1 0%   30.10n \u00b1 0%   +0.18% (p=0.000 n=10)\nXadd64-4               30.05n \u00b1 0%   30.09n \u00b1 0%   +0.12% (p=0.000 n=10)\nCas-4                  60.48n \u00b1 0%   61.13n \u00b1 0%   +1.08% (p=0.000 n=10)\nCas64-4                62.28n \u00b1 0%   62.34n \u00b1 0%        ~ (p=0.810 n=10)\nXchg-4                 30.05n \u00b1 0%   30.09n \u00b1 0%   +0.15% (p=0.000 n=10)\nXchg64-4               30.05n \u00b1 0%   30.09n \u00b1 0%   +0.13% (p=0.000 n=10)\ngeomean                15.42n        16.17n        +4.89%\n\nFixes #61471\n\nChange-Id: I97b5325db50467eeec36fb079bded7b09a32330f\nReviewed-on: https://go-review.googlesource.com/c/go/+/508715\nReviewed-by: Austin Clements <austin@google.com>\nReviewed-by: Joel Sing <joel@sing.id.au>\nRun-TryBot: M Zhuo <mzh@golangcn.org>\nReviewed-by: Cherry Mui <cherryyz@google.com>\nReviewed-by: Bryan Mills <bcmills@google.com>\nTryBot-Result: Gopher Robot <gobot@golang.org>\n(cherry picked from commit 890b96f7abd8ba5b2243959d9b49c212a0fc4d78)\nReviewed-on: https://go-review.googlesource.com/c/go/+/511515\nAuto-Submit: Matthew Dempsky <mdempsky@google.com>\nReviewed-by: Heschi Kreinick <heschi@google.com>\nReviewed-by: Matthew Dempsky <mdempsky@google.com>\nReviewed-by: M Zhuo <mzh@golangcn.org>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bd3a1f24e79d064f957d5b7cb5aaf93313a8069c", "commit_date": "2023-07-19T20:35:36Z", "commit_message": "[release-branch.go1.20] net: tolerate permission errors in interface tests\n\nOn our linux-arm64 builders, we're getting permission errors despite\nrunning as root. Detect those errors and skip the test.\n\nFor #61414.\nFixes #61449\n\nChange-Id: I5d7c45789337bee3860b19335bbb9eb884c48986\nReviewed-on: https://go-review.googlesource.com/c/go/+/510737\nAuto-Submit: Heschi Kreinick <heschi@google.com>\nRun-TryBot: Heschi Kreinick <heschi@google.com>\nReviewed-by: Ian Lance Taylor <iant@google.com>\nTryBot-Result: Gopher Robot <gobot@golang.org>\n(cherry picked from commit 8e1ec1cb9385414a7d6b664d8ace6bc9468cc500)\nReviewed-on: https://go-review.googlesource.com/c/go/+/511137\nReviewed-by: Dmitri Shuralyov <dmitshur@golang.org>\nReviewed-by: Dmitri Shuralyov <dmitshur@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6211a024b491f3df6bf3eab11dd50259525b8713", "commit_date": "2023-07-19T19:10:08Z", "commit_message": "[release-branch.go1.20] cmd/compile: on PPC64, fix sign/zero extension when masking\n\n(ANDCCconst [y] (MOV.*reg x)) should only be merged when zero\nextending. Otherwise, sign bits are lost on negative values.\n\n(ANDCCconst [0xFF] (MOVBreg x)) should be simplified to a zero\nextension of x. Likewise for the MOVHreg variant.\n\nFixes #61320\n\nChange-Id: I04e4fd7dc6a826e870681f37506620d48393698b\nReviewed-on: https://go-review.googlesource.com/c/go/+/508775\nTryBot-Result: Gopher Robot <gobot@golang.org>\nRun-TryBot: Paul Murphy <murp@ibm.com>\nReviewed-by: Bryan Mills <bcmills@google.com>\nReviewed-by: Cherry Mui <cherryyz@google.com>\nReviewed-on: https://go-review.googlesource.com/c/go/+/509195\nAuto-Submit: Heschi Kreinick <heschi@google.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}]}