{"7.0": [{"commit_oid": "49dbedb1d58f6efe5981b56c71ed1d42c29dc785", "commit_date": "2023-09-06T17:55:58Z", "commit_message": "Redis 7.0.13", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f14d3279212e1b262869b6160db87d6f117cff5", "commit_date": "2023-09-06T17:55:58Z", "commit_message": "Fix sort_ro get-keys function return wrong key number (#12522)\n\nBefore\uff1a\n```\n127.0.0.1:6379> command getkeys sort_ro key\n(empty array)\n127.0.0.1:6379>\n```\nAfter:\n```\n127.0.0.1:6379> command getkeys sort_ro key\n1) \"key\"\n127.0.0.1:6379>\n```\n\n(cherry picked from commit b59f53efb31b36d0a307809f5d33bf66d66a4447)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4d67bb6afa0da93c061ed1dc07af71f70c732b63", "commit_date": "2023-09-06T17:55:58Z", "commit_message": "do not call handleClientsBlockedOnKeys inside yielding command (#12459)\n\nFix the assertion when a busy script (timeout) signal ready keys (like LPUSH),\nand then an arbitrary client's `allow-busy` command steps into `handleClientsBlockedOnKeys`\ntry wake up clients blocked on keys (like BLPOP).\n\nReproduction process:\n1. start a redis with aof\n    `./redis-server --appendonly yes`\n2. exec blpop\n    `127.0.0.1:6379> blpop a 0`\n3. use another client call a busy script and this script push the blocked key\n    `127.0.0.1:6379> eval \"redis.call('lpush','a','b') while(1) do end\" 0`\n4. user a new client call an allow-busy command like auth\n    `127.0.0.1:6379> auth a`\n\nBTW, this issue also break the atomicity of script.\n\nThis bug has been around for many years, the old versions only have the\natomic problem, only 7.0/7.2 has the assertion problem.\n\nCo-authored-by: Oran Agra <oran@redislabs.com>\n(cherry picked from commit 8226f39fb200a6a2d6f57d027ffc55319fb85d92)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "37599fe75ad70e4a50844fe85c0a414a52708cf2", "commit_date": "2023-09-06T17:55:58Z", "commit_message": "Ensure that the function load timeout is disabled during loading from RDB/AOF and on replicas. (#12451)\n\nWhen loading a function from either RDB/AOF or a replica, it is essential not to\nfail on timeout errors. The loading time may vary due to various factors, such as\nhardware specifications or the system's workload during the loading process.\nOnce a function has been successfully loaded, it should be allowed to load from\npersistence or on replicas without encountering a timeout failure.\n\nTo maintain a clear separation between the engine and Redis internals, the\nimplementation refrains from directly checking the state of Redis within the\nengine itself. Instead, the engine receives the desired timeout as part of the\nlibrary creation and duly respects this timeout value. If Redis wishes to disable\nany timeout, it can simply send a value of 0.\n\n(cherry picked from commit 2ee1bbb53baea26b442d602b0b3335176170736d)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ea1bc6f62327c44f8e438b21d6042ae46670096c", "commit_date": "2023-09-06T17:55:58Z", "commit_message": "Process loss of slot ownership in cluster bus (#12344)\n\nProcess loss of slot ownership in cluster bus\n\nWhen a node no longer owns a slot, it clears the bit corresponding\nto the slot in the cluster bus messages. The receiving nodes\ncurrently don't record the fact that the sender stopped claiming\na slot until some other node in the cluster starts claiming the slot.\nThis can cause a slot to go missing during slot migration when subjected\nto inopportune race with addition of new shards or a failover.\nThis fix forces the receiving nodes to process the loss of ownership\nto avoid spreading wrong information.\n\n(cherry picked from commit 1190f25ca7644e5cdea0b5c8c88e07daaccc36aa)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}, {"commit_oid": "646069a90080000ebf7e3be6838138a7664154d9", "commit_date": "2023-09-06T17:55:58Z", "commit_message": "Skip test for sdsRemoveFreeSpace when mem_allocator is not jemalloc (#11878)\n\nTest `trim on SET with big value` (introduced from #11817) fails under mac m1 with libc mem_allocator.\nThe reason is that malloc(33000) will allocate 65536 bytes(>42000).\nThis test still passes under ubuntu with libc mem_allocator.\n\n```\n*** [err]: trim on SET with big value in tests/unit/type/string.tcl\nExpected [r memory usage key] < 42000 (context: type source line 471 file /Users/iospack/data/redis_fork/tests/unit/type/string.tcl cmd {assert {[r memory usage key] < 42000}} proc ::test)\n```\n\nsimple test under mac m1 with libc mem_allocator:\n```c\nvoid *p = zmalloc(33000);\nprintf(\"malloc size: %zu\\n\", zmalloc_size(p));\n\n# output\nmalloc size: 65536\n```\n\n(cherry picked from commit 3fba3ccd96b066d10401f1f9b65293d59d14082c)", "commit_author": "", "message_analysis": {"glm6b_2": [], "manual": [], "noob_engine": []}}]}