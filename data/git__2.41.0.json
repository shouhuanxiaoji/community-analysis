{"maint": [{"commit_oid": "43c8a30d150ecede9709c1f2527c8fba92c65f40", "commit_date": "2023-08-21T16:34:58Z", "commit_message": "Git 2.42\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "915e51b74eda1649b1066d191a0b47cdfbb63249", "commit_date": "2023-08-21T16:27:44Z", "commit_message": "Merge branch 'jk/function-pointer-mismatches-fix' (early part)\n\nFix a minor regression that some compiler might notice.\n\n* 'jk/function-pointer-mismatches-fix' (early part):\n  fsck: use enum object_type for fsck_walk callback", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5a50dd7edac36c4c2853690cd2c8e84127e29613", "commit_date": "2023-08-21T15:43:46Z", "commit_message": "Merge tag 'l10n-2.42.0-rnd2' of https://github.com/git-l10n/git-po\n\nl10n-2.42.0-rnd2\n\n* tag 'l10n-2.42.0-rnd2' of https://github.com/git-l10n/git-po:\n  l10n: zh_TW.po: Git 2.42\n  l10n: zh_CN: 2.42.0 round 2\n  l10n: zh_CN: v2.42.0 round 1\n  l10n: Update German translation\n  l10n: Update Catalan translation\n  l10n: tr: git 2.42.0\n  l10n: fr v2.42.0 rnd 2\n  l10n: fr v2.42.0 rnd 1\n  l10n: sv.po: Update Swedish translation 5549t0f0u\n  l10n: uk: update translation (2.42.0)\n  l10n: po-id for 2.42 (round 1)\n  l10n: ru.po: update Russian translation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1f87c2148b025a9c664e64db17205783ef2991c", "commit_date": "2023-08-20T23:05:38Z", "commit_message": "Merge branch 'po-id' of github.com:bagasme/git-po\n\n* 'po-id' of github.com:bagasme/git-po:\n  l10n: po-id for 2.42 (round 1)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e2dff212aaef6d1babf9735d2a2f583e517362a", "commit_date": "2023-08-20T14:01:37Z", "commit_message": "l10n: zh_TW.po: Git 2.42\n\nCo-authored-by: Lumynous <lumynou5.tw@gmail.com>\nSigned-off-by: Yi-Jyun Pan <pan93412@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bbeddee5d36dfa3fab16ccd0b78dcdcf66c3a99", "commit_date": "2023-08-20T04:17:32Z", "commit_message": "fsck: use enum object_type for fsck_walk callback\n\nWe switched the function interface for fsck callbacks in a1aad71601\n(fsck.h: use \"enum object_type\" instead of \"int\", 2021-03-28). However,\nwe accidentally flipped the type back to \"int\" as part of 0b4e9013f1\n(fsck: mark unused parameters in various fsck callbacks, 2023-07-03).\nThe mistake happened because that commit was written before a1aad71601\nand rebased forward, and I screwed up while resolving the conflict.\n\nCuriously, the compiler does not warn about this mismatch, at least not\nwhen using gcc and clang on Linux (nor in any of our CI environments).\nBased on 28abf260a5 (builtin/fsck.c: don't conflate \"int\" and \"enum\" in\ncallback, 2021-06-01), I'd guess that this would cause the AIX xlc\ncompiler to complain. I noticed because clang-18's UBSan now identifies\nmis-matched function calls at runtime, and does complain of this case\nwhen running the test suite.\n\nI'm not entirely clear on whether this mismatch is a problem in\npractice. Compilers are certainly free to make enums smaller than \"int\"\nif they don't need the bits, but I suspect that they have to promote\nback to int for function calls (though I didn't dig in the standard, and\nI won't be surprised if I'm simply wrong and the real-world impact would\ndepend on the ABI).\n\nRegardless, switching it back to enum is obviously the right thing to do\nhere; the switch to \"int\" was simply a mistake.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3cf978718f7ae720c7f743085e20abe48bd99b27", "commit_date": "2023-08-19T13:09:31Z", "commit_message": "Merge branch 'l10n-de-2.42' of github.com:ralfth/git\n\n* 'l10n-de-2.42' of github.com:ralfth/git:\n  l10n: Update German translation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6fb0e532d522c278ad15b6e55f5467f2f6d8d477", "commit_date": "2023-08-19T13:08:22Z", "commit_message": "Merge branch 'catalan' of github.com:Softcatala/git-po\n\n* 'catalan' of github.com:Softcatala/git-po:\n  l10n: Update Catalan translation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d731a52e4dc7b6b429339bf47382d0b68fe01018", "commit_date": "2023-08-19T13:07:47Z", "commit_message": "Merge branch 'update-uk-l10n' of github.com:arkid15r/git-ukrainian-l10n\n\n* 'update-uk-l10n' of github.com:arkid15r/git-ukrainian-l10n:\n  l10n: uk: update translation (2.42.0)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c04e26683f8fbeff8c934794006fa64ab6aaead7", "commit_date": "2023-08-19T13:07:03Z", "commit_message": "Merge branch 'tl/zh_CN_2.42.0_rnd1' of github.com:dyrone/git\n\n* 'tl/zh_CN_2.42.0_rnd1' of github.com:dyrone/git:\n  l10n: zh_CN: 2.42.0 round 2\n  l10n: zh_CN: v2.42.0 round 1", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7fdd36c22bd1ef4ae90dc3e7df1f560e2f06334a", "commit_date": "2023-08-19T13:05:00Z", "commit_message": "Merge branch 'master' of github.com:nafmo/git-l10n-sv\n\n* 'master' of github.com:nafmo/git-l10n-sv:\n  l10n: sv.po: Update Swedish translation 5549t0f0u", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d0d403b8bc33b677e667f68d662ad7b6d2b191d8", "commit_date": "2023-08-19T13:04:09Z", "commit_message": "Merge branch 'l10n-tr' of github.com:bitigchi/git-po\n\n* 'l10n-tr' of github.com:bitigchi/git-po:\n  l10n: tr: git 2.42.0", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9441efe212bcf46a7695035a0c14e03c792c95c6", "commit_date": "2023-08-18T11:30:03Z", "commit_message": "l10n: zh_CN: 2.42.0 round 2\n\nSigned-off-by: Teng Long <dyroneteng@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb9c8863346dc4894c51654f24b2f4fa44d358e7", "commit_date": "2023-08-18T11:29:01Z", "commit_message": "l10n: zh_CN: v2.42.0 round 1\n\nSigned-off-by: Teng Long <dyroneteng@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f9972720e9a405e4f6924a7cde0ed5880687f4d0", "commit_date": "2023-08-17T22:50:05Z", "commit_message": "Merge branch 'ps/revision-stdin-with-options'\n\nTypofix to documentation added during this cycle.\n\n* ps/revision-stdin-with-options:\n  rev-list-options: fix typo in `--stdin` documentation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "62ce3dcd676f24f3acbc69a4029f2a2f5cd75dc0", "commit_date": "2023-08-17T22:50:05Z", "commit_message": "Merge branch 'sa/doc-ls-remote'\n\nMark-up fix to documentation added during this cycle.\n\n* sa/doc-ls-remote:\n  show-ref doc: fix carets in monospace", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa43131a0990e264eca652fed3351fcb9a99e7f8", "commit_date": "2023-08-17T22:50:05Z", "commit_message": "Merge branch 'tl/notes-separator'\n\nTypo/grammofix to documentation added during this cycle.\n\n* tl/notes-separator:\n  notes doc: tidy up `--no-stripspace` paragraph\n  notes doc: split up run-on sentences", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a1d7c65007727565d75e2535d3e03f5f6c694864", "commit_date": "2023-08-17T15:00:36Z", "commit_message": "l10n: Update German translation\n\nSigned-off-by: Ralf Thielow <ralf.thielow@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c81f1a167659ce0634fdd1dcdb43c2697b546151", "commit_date": "2023-08-16T18:42:54Z", "commit_message": "rev-list-options: fix typo in `--stdin` documentation\n\nWith `--stdin`, we read *from* standard input, not *for*.\n\nSigned-off-by: Martin \u00c5gren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "18c4aac0dd33eca76607b54d347932d6ec655056", "commit_date": "2023-08-16T18:40:10Z", "commit_message": "show-ref doc: fix carets in monospace\n\nWhen commit 00bf685975 (show-ref doc: update for internal consistency,\n2023-05-19) switched from double quotes to backticks around our {caret}\nmacro, we started rendering \"{caret}\" literally. Fix this by replacing\nby a \"^\" character.\n\nSigned-off-by: Martin \u00c5gren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a6e1ad80bdf5d09cb484e77cc4bfffdd9a15bdf", "commit_date": "2023-08-16T18:37:25Z", "commit_message": "notes doc: tidy up `--no-stripspace` paragraph\n\nWhere we document the `--no-stripspace` option, remove a superfluous\n\"For\" to fix the grammar. Mark option names and command names using\n`backticks` to set them in monospace.\n\nSigned-off-by: Martin \u00c5gren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "95b6ae9d747ed52912dec95fe397b11f0a5383ec", "commit_date": "2023-08-16T18:36:36Z", "commit_message": "notes doc: split up run-on sentences\n\nWhen commit c4e2aa7d45 (notes.c: introduce \"--[no-]stripspace\" option,\n2023-05-27) mentioned the new `--no-stripspace` in the documentation for\n`-m` and `-F`, it created run-on sentences. It also used slightly\ndifferent language in the two sections for no apparent reason. Split the\nsentences in two to improve readability, and while touching the two\nsites, make them more similar.\n\nSigned-off-by: Martin \u00c5gren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8a7795b7ae5389e74fdd386a934cb16b05c9e4d", "commit_date": "2023-08-16T16:25:02Z", "commit_message": "l10n: Update Catalan translation\n\nSigned-off-by: Jordi Mas <jmas@softcatala.org>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d9dec13dde48c37d3c65305b3f8e5e4199a632bd", "commit_date": "2023-08-16T11:40:44Z", "commit_message": "l10n: tr: git 2.42.0\n\nSigned-off-by: Emir SARI <emir_sari@icloud.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "87afb88801a89267e5cfe36c9f3923279dfc464b", "commit_date": "2023-08-16T09:50:23Z", "commit_message": "l10n: fr v2.42.0 rnd 2\n\nSigned-off-by: Jean-No\u00ebl Avila <jn.avila@free.fr>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f846e08312d0e3d7eeda106f63eaf131e8af0c2c", "commit_date": "2023-08-16T09:48:16Z", "commit_message": "l10n: fr v2.42.0 rnd 1\n\nSigned-off-by: Jean-No\u00ebl Avila <jn.avila@free.fr>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b90a4a25e630cf40ed295e82f58306a309bbf76d", "commit_date": "2023-08-16T06:42:51Z", "commit_message": "l10n: sv.po: Update Swedish translation 5549t0f0u\n\nSigned-off-by: Peter Krefting <peter@softwolves.pp.se>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5bf602fc3bc2159762bbce19d7c7a587c1386743", "commit_date": "2023-08-16T01:55:13Z", "commit_message": "l10n: uk: update translation (2.42.0)\n\nCo-authored-by: Kate Golovanova <kate@kgthreads.com>\nSigned-off-by: Arkadii Yakovets <ark@cho.red>\nSigned-off-by: Kate Golovanova <kate@kgthreads.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "62a26b36bd9bf76feb6940e2bee732bd62b429f8", "commit_date": "2023-08-15T23:24:56Z", "commit_message": "Merge branch 'master' of github.com:git/git\n\n* 'master' of github.com:git/git: (34 commits)\n  Git 2.42-rc2\n  t4053: avoid writing to unopened pipe\n  t4053: avoid race when killing background processes\n  Git 2.42-rc1\n  git maintenance: avoid console window in scheduled tasks on Windows\n  win32: add a helper to run `git.exe` without a foreground window\n  t9001: remove excessive GIT_SEND_EMAIL_NOTTY=1\n  mv: handle lstat() failure correctly\n  parse-options: disallow negating OPTION_SET_INT 0\n  repack: free geometry struct\n  send-email: avoid creating more than one Term::ReadLine object\n  send-email: drop FakeTerm hack\n  t0040: declare non-tab indentation to be okay in this script\n  advice: handle \"rebase\" in error_resolve_conflict()\n  A few more topics before -rc1\n  mailmap: change primary address for Glen Choo\n  gitignore: ignore clangd .cache directory\n  docs: update when `git bisect visualize` uses `gitk`\n  compat/mingw: implement a native locate_in_PATH()\n  run-command: conditionally define locate_in_PATH()\n  ...", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f1ed9d7dc0e49dc1a044941d821c9d2342313c26", "commit_date": "2023-08-15T17:20:02Z", "commit_message": "Git 2.42-rc2\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f9fe84b5a2a4055fdc2d272e3593c3f91db41626", "commit_date": "2023-08-15T17:19:47Z", "commit_message": "Merge branch 'pw/diff-no-index-from-named-pipes'\n\nTest updates.\n\n* pw/diff-no-index-from-named-pipes:\n  t4053: avoid writing to unopened pipe\n  t4053: avoid race when killing background processes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e12aaa7ceb83c9229b392079ed9e38c36e82b81", "commit_date": "2023-08-15T17:19:47Z", "commit_message": "Merge branch 'st/mv-lstat-fix'\n\nCorrect use of lstat() that assumed a failing call would not\nclobber the statbuf.\n\n* st/mv-lstat-fix:\n  mv: handle lstat() failure correctly", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cecd6a5ffce2c35f18e8ac537c9e2f71ac99932b", "commit_date": "2023-08-15T17:19:47Z", "commit_message": "Merge branch 'jc/send-email-pre-process-fix'\n\nTest fix.\n\n* jc/send-email-pre-process-fix:\n  t9001: remove excessive GIT_SEND_EMAIL_NOTTY=1", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "32f4fa8d3be86a00188aa4c4af1cd375e25e4558", "commit_date": "2023-08-15T17:19:47Z", "commit_message": "Merge branch 'ds/maintenance-on-windows-fix'\n\nWindows updates.\n\n* ds/maintenance-on-windows-fix:\n  git maintenance: avoid console window in scheduled tasks on Windows\n  win32: add a helper to run `git.exe` without a foreground window", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc6bba66bc1de0296b7e452499b0ccd8e4c65b18", "commit_date": "2023-08-14T20:26:41Z", "commit_message": "Merge branch 'js/allow-t4000-to-be-indented-with-spaces'\n\nFile attribute update.\n\n* js/allow-t4000-to-be-indented-with-spaces:\n  t0040: declare non-tab indentation to be okay in this script", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc71d024adbb000e692cbd06cb1a3195514ec771", "commit_date": "2023-08-14T20:26:41Z", "commit_message": "Merge branch 'jk/send-email-with-new-readline'\n\nAdjust to newer Term::ReadLine to prevent it from breaking\nthe interactive prompt code in send-email.\n\n* jk/send-email-with-new-readline:\n  send-email: avoid creating more than one Term::ReadLine object\n  send-email: drop FakeTerm hack", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6df312ad31e6b40e93ea2b1b6b1dc452db7cc0a1", "commit_date": "2023-08-14T20:26:40Z", "commit_message": "Merge branch 'jk/repack-leakfix'\n\nLeakfix.\n\n* jk/repack-leakfix:\n  repack: free geometry struct", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aea6c0531cc97af2054455dcf4f39bd904dafb50", "commit_date": "2023-08-14T20:26:40Z", "commit_message": "Merge branch 'rs/parse-opt-forbid-set-int-0-without-noneg'\n\nDeveloper support to detect meaningless combination of options.\n\n* rs/parse-opt-forbid-set-int-0-without-noneg:\n  parse-options: disallow negating OPTION_SET_INT 0", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f12cb5052d83f5477f7311ccf00b4249dc6d500b", "commit_date": "2023-08-14T20:26:40Z", "commit_message": "Merge branch 'ob/rebase-conflict-advice-i18n-fix'\n\ni18n coverage improvement and avoidance of sentence lego.\n\n* ob/rebase-conflict-advice-i18n-fix:\n  advice: handle \"rebase\" in error_resolve_conflict()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5cb1e3f093986815945b85e61de112b8e3ccdd6", "commit_date": "2023-08-13T23:30:36Z", "commit_message": "t4053: avoid writing to unopened pipe\n\nThis fixes an occasional hang I see when running t4053 with\n--verbose-log using dash.\n\nCommit 1e3f26542a (diff --no-index: support reading from named pipes,\n2023-07-05) added a test that \"diff --no-index\" will complain when\ncomparing a named pipe and a directory. The minimum we need to test this\nis to mkfifo the pipe, and then run \"git diff --no-index pipe some_dir\".\nBut the test does one thing more: it spawns a background shell process\nthat opens the pipe for writing, like this:\n\n        {\n                (>pipe) &\n        } &&\n\nThis extra writer _could_ be useful if Git misbehaves and tries to open\nthe pipe for reading. Without the writer, Git would block indefinitely\nand the test would never end. But since we do not have such a bug, Git\ndoes not open the pipe and it is the writing process which will block\nindefinitely, since there are no readers. The test addresses this by\nrunning \"kill $!\" in a test_when_finished block. Since the writer should\nbe blocking forever, this kill command will reliably find it waiting.\n\nHowever, this seems to be somewhat racy, in that the writing process\nsometimes hangs around even after the \"kill\". In a normal run of the\ntest script without options, this doesn't have any effect; the\nmain test script completes anyway. But with --verbose-log, we spawn a\n\"tee\" process that reads the script output, and it won't end until all\ndescriptors pointing to its input pipe are closed. And the background\nprocess that is hanging around still has its stderr, etc, pointed into\nthat pipe.\n\nYou can reproduce the situation like this:\n\n  cd t\n  ./t4053-diff-no-index.sh --verbose-log --stress\n\nLet that run for a few minutes, and then you'll find that some of the\nruns have hung. For example, at 11:53, I ran:\n\n  $ ps xk start o pid,start,command | grep tee | head\n   713459 11:48:06 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-9.out\n   713527 11:48:06 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-15.out\n   719434 11:48:07 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-1.out\n   728117 11:48:08 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-5.out\n   738738 11:48:09 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-31.out\n   739457 11:48:09 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-27.out\n   744432 11:48:10 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-21.out\n   744471 11:48:10 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-29.out\n   761961 11:48:12 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-0.out\n   812299 11:48:19 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-8.out\n\nAll of these have been hung for several minutes. We can investigate one\nand see that it's waiting to get EOF on its input:\n\n  $ strace -p 713459\n  strace: Process 713459 attached\n  read(0,\n  ^C\n\nWho else has that descriptor open?\n\n  $ lsof -a -p 713459 -d 0 +E\n  COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME\n  tee     713459 peff    0r  FIFO   0,13      0t0 3943636 pipe 719203,sh,5w 719203,sh,7w 719203,sh,12w 719203,sh,13w\n  sh      719203 peff    5w  FIFO   0,13      0t0 3943636 pipe 713459,tee,0r 719203,sh,7w 719203,sh,12w 719203,sh,13w\n  sh      719203 peff    7w  FIFO   0,13      0t0 3943636 pipe 713459,tee,0r 719203,sh,5w 719203,sh,12w 719203,sh,13w\n  sh      719203 peff   12w  FIFO   0,13      0t0 3943636 pipe 713459,tee,0r 719203,sh,5w 719203,sh,7w 719203,sh,13w\n  sh      719203 peff   13w  FIFO   0,13      0t0 3943636 pipe 713459,tee,0r 719203,sh,5w 719203,sh,7w 719203,sh,12w\n\nIt's a shell, presumably a subshell spawned by the main script. Though\nit may seem odd, having the same descriptor open several times is not\nunreasonable (they're all basically the original stdout/stderr of the\nscript that has been copied). And they should all close when the process\nexits. So what's it doing? Curiously, it will exit as soon as we strace\nit:\n\n  $ strace -s 64 -p 719203\n  strace: Process 719203 attached\n  openat(AT_FDCWD, \"pipe\", O_WRONLY|O_CREAT|O_TRUNC, 0666) = -1 ENOENT (No such file or directory)\n  write(2, \"./t4053-diff-no-index.sh: 7: eval: \", 35) = 35\n  write(2, \"cannot create pipe: Directory nonexistent\", 41) = 41\n  write(2, \"\\n\", 1)                       = 1\n  exit_group(2)                           = ?\n  +++ exited with 2 +++\n\nI think what happens is this:\n\n  - it is blocking in the openat() call for the pipe, as we expect (so\n    this is definitely the backgrounded subshell mentioned above)\n\n  - strace sends signals (probably STOP/CONT); those cause the kernel to\n    stop blocking, but libc will restart the system call automatically\n\n  - by this time, the \"pipe\" fifo is gone, so we'll actually try to\n    create a regular file. But of course the surrounding directory is\n    gone, too! So we get ENOENT, and then exit as normal.\n\nSo the blocking is something we expect to happen. But what we didn't\nexpect is for the process to still exist at all! It should have been\nkilled earlier when the parent process called \"kill\", but it wasn't. And\nwe can't catch the race at this point, because it happened much earlier.\n\nOne can guess, though, that there is some race with the shell setting up\nthe signal handling in the backgrounded subshell, and possibly blocking\nor ignoring signals at the time that the \"kill\" is received.  Curiously,\nthe race does not seem to happen if I use \"bash\" instead of \"dash\", so\npresumably bash's setup here is more atomic.\n\nOne fix might be to try killing the subshell more aggressively, either\nusing SIGKILL, or looping on kill/wait. But that seems complex and\nlikely to introduce new problems/races. Instead, we can observe that the\nwriter is not needed at all. Git will notice the pipe via stat() before\nit is ever opened. So we can simply drop the writer subshell entirely.\n\nIf we ever changed Git to open the path and fstat() it, this would\nresult in the test hanging. But we're not likely to do that. After all,\nwe have to stat() paths to see if they are openable at all (e.g., it\ncould be a directory), so this seems like a low risk. And anybody who\ndoes make such a change will immediately see the issue, as Git would\nhang consistently.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "231e86c10c674235cf28447a8486f7955d5f4dd9", "commit_date": "2023-08-10T16:16:27Z", "commit_message": "t4053: avoid race when killing background processes\n\nThe test 'diff --no-index reads from pipes' starts a couple of\nbackground processes that write to the pipes that are passed to \"diff\n--no-index\". If the test passes then we expect these processes to exit\nas all their output will have been read. However if the test fails\nthen we want to make sure they do not hang about on the users machine\nand the test remembers they should be killed by calling\n\n      test_when_finished  \"! kill $!\"\n\nafter each background process is created. Unfortunately there is a\nrace where test_when_finished may run before the background process\nexits even when all its output has been read resulting in the kill\ncommand succeeding which causes the test to fail. Fix this by ignoring\nthe exit status of the kill command. If the diff is successful we\ncould instead wait for the background process to exit and check their\nstatus but that feels like it is testing the platform's printf\nimplementation rather than git's code.\n\nReported-by: Jeff King <peff@peff.net>\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fac96dfbb1c24369ba7d37a5affd8adfe6c650fd", "commit_date": "2023-08-09T23:18:16Z", "commit_message": "Git 2.42-rc1\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8c53ff91282861d4efe5d807129a55e193e6451", "commit_date": "2023-08-09T23:18:16Z", "commit_message": "Merge branch 'pw/rebase-skip-commit-message-fix'\n\n\"git rebase -i\" with a series of squash/fixup, when one of the\nsteps stopped in conflicts and ended up getting skipped, did not\nhandle the accumulated commit log messages, which has been\ncorrected.\n\n* pw/rebase-skip-commit-message-fix:\n  rebase --skip: fix commit message clean up when skipping squash", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8cdd5e713d7ba54b9d26ac997408bb745ab55088", "commit_date": "2023-08-09T23:18:16Z", "commit_message": "Merge branch 'ma/locate-in-path-for-windows'\n\n\"git bisect visualize\" stopped running \"gitk\" on Git for Windows\nwhen the command was reimplemented in C around Git 2.34 timeframe.\nThis has been corrected.\n\n* ma/locate-in-path-for-windows:\n  docs: update when `git bisect visualize` uses `gitk`\n  compat/mingw: implement a native locate_in_PATH()\n  run-command: conditionally define locate_in_PATH()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b6e2a0c0b30dccd050706354eaa64a9e8ed900e5", "commit_date": "2023-08-09T23:18:15Z", "commit_message": "Merge branch 'bc/ignore-clangd-cache'\n\n.gitignore update.\n\n* bc/ignore-clangd-cache:\n  gitignore: ignore clangd .cache directory", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cf07e53bae8492fc6ee8a8d394e2fba858daa0a4", "commit_date": "2023-08-09T23:18:15Z", "commit_message": "Merge branch 'bc/ident-dot-is-no-longer-crud-letter'\n\nExclude \".\" from the set of characters to be removed from the\nbeginning and the end of the human-readable name.\n\n* bc/ident-dot-is-no-longer-crud-letter:\n  ident: don't consider '.' a crud", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "889c94d2a0f4041c8237044db1d7ffd0190a2e0f", "commit_date": "2023-08-09T23:18:15Z", "commit_message": "Merge branch 'ew/hash-with-openssl-evp'\n\nAdjust to OpenSSL 3+, which deprecates its SHA-1 functions based on\nits traditional API, by using its EVP API instead.\n\n* ew/hash-with-openssl-evp:\n  avoid SHA-1 functions deprecated in OpenSSL 3+\n  sha256: avoid functions deprecated in OpenSSL 3+", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0050f8e401a70b1eda9e7358b04e6d6ef3d64ab1", "commit_date": "2023-08-09T20:58:15Z", "commit_message": "git maintenance: avoid console window in scheduled tasks on Windows\n\nWe just introduced a helper to avoid showing a console window when the\nscheduled task runs `git.exe`. Let's actually use it.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Derrick Stolee <dstolee@microsoft.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4b8a2717bb5ea6b787e0037174dcbf53ccf4985c", "commit_date": "2023-08-09T20:58:13Z", "commit_message": "win32: add a helper to run `git.exe` without a foreground window\n\nOn Windows, there are two kinds of executables, console ones and\nnon-console ones. Git's executables are all console ones.\n\nWhen launching the former e.g. in a scheduled task, a CMD window pops\nup. This is not what we want for the tasks installed via the `git\nmaintenance` command.\n\nTo work around this, let's introduce `headless-git.exe`, which is a\nnon-console program that does _not_ pop up any window. All it does is to\nre-launch `git.exe`, suppressing that console window, passing through\nall command-line arguments as-are.\n\nHelped-by: Carlo Marcelo Arenas Bel\u00f3n <carenas@gmail.com>\nHelped-by: Yuyi Wang <Strawberry_Str@hotmail.com>\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Derrick Stolee <dstolee@microsoft.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b3dcd24b8a186093cd821697b191080b8d53915b", "commit_date": "2023-08-09T19:44:07Z", "commit_message": "t9001: remove excessive GIT_SEND_EMAIL_NOTTY=1\n\nThis was added by 3ece9bf0f9 (send-email: clear the $message_id after\nvalidation, 2023-05-17) for no apparent reason, as this is required only\nin cases when git's stdin is (must be) redirected, which isn't the case\nhere.\n\nSigned-off-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "72695d8214791161a943086e894874b4fd71ba9f", "commit_date": "2023-08-09T18:46:12Z", "commit_message": "mv: handle lstat() failure correctly\n\nWhen moving a directory onto another with `git mv` various checks are\nperformed. One of of these validates that the destination is not existing.\n\nWhen calling `lstat` on the destination path and it fails as the path\ndoesn't exist, some environments seem to overwrite the passed  in\n`stat` memory nonetheless (I observed this issue on debian 12 of x86_64,\nrunning on OrbStack on ARM, emulated with Rosetta).\n\nThis would affect the code that followed as it would still acccess a now\nmodified `st` structure, which now seems to contain uninitialized memory.\n`S_ISDIR(st_dir_mode)` would then typically return false causing the code\nto run into a bad case.\n\nThe fix avoids overwriting the existing `st` structure, providing an\nalternative that exists only for that purpose.\n\nNote that this patch minimizes complexity instead of stack-frame size.\n\nSigned-off-by: Sebastian Thiel <sebastian.thiel@icloud.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3284b93862b0aaea9d8e708f0aabd53e3e94409e", "commit_date": "2023-08-08T23:55:07Z", "commit_message": "parse-options: disallow negating OPTION_SET_INT 0\n\nAn option of type OPTION_SET_INT can be defined to set its variable to\nzero.  It's negated variant will do the same, though, which is\nconfusing.  Several such options were fixed by disabling negation,\nchanging the value to set or using a different option type:\n\n991c552916 (ls-tree: fix --no-full-name, 2023-07-18)\ne12cb98e1e (branch: reject \"--no-all\" and \"--no-remotes\" early, 2023-07-18)\n68cbb20e73 (show-branch: reject --[no-](topo|date)-order, 2023-07-19)\n3821eb6c3d (reset: reject --no-(mixed|soft|hard|merge|keep) option, 2023-07-19)\n36f76d2a25 (pack-objects: fix --no-quiet, 2023-07-21)\n3a5f308741 (pack-objects: fix --no-keep-true-parents, 2023-07-21)\nc95ae3ff9c (describe: fix --no-exact-match, 2023-07-21)\nd089a06421 (bundle: use OPT_PASSTHRU_ARGV, 2023-07-29)\n\nCheck for such options that allow negation in parse_options_check() and\nreport them to find future cases quicker.\n\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cb888bb6991bb10bddedf9ddc9651ec25da6137d", "commit_date": "2023-08-08T23:49:10Z", "commit_message": "repack: free geometry struct\n\nWhen the program is ending, we call clear_pack_geometry() to free any\nresources in the pack_geometry struct. But the struct itself is\nallocated on the heap, and leak-checkers will complain about the\nresulting small leak.\n\nThis one was marked by Coverity as a \"new\" leak, though it has existed\nsince 0fabafd0b9 (builtin/repack.c: add '--geometric' option,\n2021-02-22). This might be because recent unrelated changes in the file\nconfused it about what is new and what is not. But regardless, it is\nworth addressing.\n\nWe can fix it easily by free-ing the struct. We'll convert our \"clear\"\nfunction to \"free\", since the allocation happens in the matching init()\nfunction (though since there is only one call to each, and the struct is\nlocal to this file, it's mostly academic).\n\nAnother option would be to put the struct on the stack rather than the\nheap. However, this gets tricky, as we check the pointer against NULL in\nseveral places to decide whether we're in geometric mode.\n\nSigned-off-by: Jeff King <peff@peff.net>\nAcked-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c016726c2deb84bcc6a7418efad92ef0562a8af3", "commit_date": "2023-08-08T23:48:17Z", "commit_message": "send-email: avoid creating more than one Term::ReadLine object\n\nEvery time git-send-email calls its ask() function to prompt the user,\nwe call term(), which instantiates a new Term::ReadLine object. But in\nv1.46 of Term::ReadLine::Gnu (which provides the Term::ReadLine\ninterface on some platforms), its constructor refuses to create a second\ninstance[1]. So on systems with that version of the module, most\ngit-send-email instances will fail (as we usually prompt for both \"to\"\nand \"in-reply-to\" unless the user provided them on the command line).\n\nWe can fix this by keeping a single instance variable and returning it\nfor each call to term(). In perl 5.10 and up, we could do that with a\n\"state\" variable. But since we only require 5.008, we'll do it the\nold-fashioned way, with a lexical \"my\" in its own scope.\n\nNote that the tests in t9001 detect this problem as-is, since the\nfailure mode is for the program to die. But let's also beef up the\n\"Prompting works\" test to check that it correctly handles multiple\ninputs (if we had chosen to keep our FakeTerm hack in the previous\ncommit, then the failure mode would be incorrectly ignoring prompts\nafter the first).\n\n[1] For discussion of why multiple instances are forbidden, see:\n    https://github.com/hirooih/perl-trg/issues/16\n\nSigned-off-by: Jeff King <peff@peff.net>\nAcked-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dfd46bae92ec25d71e7c8a2887e9508aaf211ee8", "commit_date": "2023-08-08T23:48:15Z", "commit_message": "send-email: drop FakeTerm hack\n\nBack in 280242d1cc (send-email: do not barf when Term::ReadLine does not\nlike your terminal, 2006-07-02), we added a fallback for when\nTerm::ReadLine's constructor failed: we'd have a FakeTerm object\ninstead, which would then die if anybody actually tried to call\nreadline() on it. Since we instantiated the $term variable at program\nstartup, we needed this workaround to let the program run in modes when\nwe did not prompt the user.\n\nBut later, in f4dc9432fd (send-email: lazily load modules for a big\nspeedup, 2021-05-28), we started loading Term::ReadLine lazily only when\nask() is called. So at that point we know we're trying to prompt the\nuser, and we can just die if ReadLine instantiation fails, rather than\nmaking this fake object to lazily delay showing the error.\n\nThis should be OK even if there is no tty (e.g., we're in a cron job),\nbecause Term::ReadLine will return a stub object in that case whose \"IN\"\nand \"OUT\" functions return undef. And since 5906f54e47 (send-email:\ndon't attempt to prompt if tty is closed, 2009-03-31), we check for that\ncase and skip prompting.\n\nAnd we can be sure that FakeTerm was not kicking in for such a\nsituation, because it has actually been broken since that commit! It\ndoes not define \"IN\" or \"OUT\" methods, so perl would barf with an error.\nIf FakeTerm was in use, we were neither honoring what 5906f54e47 tried\nto do, nor producing the readable message that 280242d1cc intended.\n\nSo we're better off just dropping FakeTerm entirely, and letting the\nerror reported by constructing Term::ReadLine through.\n\nSigned-off-by: Jeff King <peff@peff.net>\nAcked-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12009a182b51c1dd1f8020a3d88a1813e0af5f33", "commit_date": "2023-08-08T23:47:26Z", "commit_message": "t0040: declare non-tab indentation to be okay in this script\n\nBy necessity, this script needs to verify that certain Git output\nmatches expectations, including text indented with spaces instead of\ntabs.\n\nMost recently, such a check was introduced in 448abbba6347 (short help:\nallow multi-line opthelp, 2023-07-18) which is reported by `git diff\n--check 448abbba6347^!` as having whitespace issues.\n\nLet's not complain about this because it is intentional.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nAcked-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff29a61cbbc83f0948606df37dbc734436b62c17", "commit_date": "2023-08-07T20:21:00Z", "commit_message": "advice: handle \"rebase\" in error_resolve_conflict()\n\nThis makes sure that we get a properly translated message rather than\ninserting the command (which we failed to translate) into a generic\nfallback message.\n\nThe function is called indirectly via die_resolve_conflict() with fixed\nstrings, and directly with the string obtained via action_name(), which\nin turn returns a string from a fixed set. Hence we know that the now\ncovered set of strings is exhausitive, and will therefore BUG() out when\nencountering an unexpected string. We also know that all covered strings\nare actually used.\n\nArguably, the above suggests that it would be cleaner to pass the\ncommand as an enum in the first place, but that's left for another time.\n\nSigned-off-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a82fb66fed250e16d3010c75404503bea3f0ab61", "commit_date": "2023-08-07T18:58:17Z", "commit_message": "A few more topics before -rc1\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1221e94bd0ad7f5734cdbfe1ebc5b922bea106fa", "commit_date": "2023-08-07T18:58:17Z", "commit_message": "mailmap: change primary address for Glen Choo\n\nGlen will lose access to his work email soon.\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b2797581d0b362059be6e7bed9be98e5cda44e4b", "commit_date": "2023-08-07T18:57:18Z", "commit_message": "Merge branch 'ew/sha256-gcrypt-leak-fixes'\n\nLeakfixes.\n\n* ew/sha256-gcrypt-leak-fixes:\n  sha256/gcrypt: die on gcry_md_open failures\n  sha256/gcrypt: fix memory leak with SHA-256 repos\n  sha256/gcrypt: fix build with SANITIZE=leak", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a04cef9fd74df0af3f406102897fc265ff53dc1b", "commit_date": "2023-08-07T18:57:18Z", "commit_message": "Merge branch 'rs/bundle-parseopt-cleanup'\n\nCode clean-up.\n\n* rs/bundle-parseopt-cleanup:\n  bundle: use OPT_PASSTHRU_ARGV", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e48d9c78cc00805660b83ac809188d0c413e4c46", "commit_date": "2023-08-07T18:57:18Z", "commit_message": "Merge branch 'am/doc-sha256'\n\nTone down the warning on SHA-256 repositories being an experimental\ncuriosity.  We do not have support for them to interoperate with\ntraditional SHA-1 repositories, but at this point, we do not plan\nto make breaking changes to SHA-256 repositories and there is no\nlonger need for such a strongly phrased warning.\n\n* am/doc-sha256:\n  doc: sha256 is no longer experimental", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dee27be9056c05067b6dba3fc5805f311f03ce67", "commit_date": "2023-08-07T18:57:18Z", "commit_message": "Merge branch 'tb/commit-graph-tests'\n\nTest updates.\n\n* tb/commit-graph-tests:\n  t/lib-commit-graph.sh: avoid sub-shell in `graph_git_behavior()`\n  t5328: avoid top-level directory changes\n  t5318: avoid top-level directory changes\n  t/lib-commit-graph.sh: avoid directory change in `graph_git_behavior()`\n  t/lib-commit-graph.sh: allow `graph_read_expect()` in sub-directories", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e600568929c3c7fdda62843412585489d091111d", "commit_date": "2023-08-06T12:41:06Z", "commit_message": "l10n: po-id for 2.42 (round 1)\n\nUpdate following components:\n\n* commit-graph.c\n* diff-no-index.c\n* builtin/notes.c\n* builtin/pack-refs.c\n* builtin/worktree.c\n\nSigned-off-by: Bagas Sanjaya <bagasdotme@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "450f2c9e3e461e4785643730f9c82eb9a64faddd", "commit_date": "2023-08-05T15:26:39Z", "commit_message": "Merge branch 'russian-l10n' of https://github.com/DJm00n/git-po-ru\n\n* 'russian-l10n' of https://github.com/DJm00n/git-po-ru:\n  l10n: ru.po: update Russian translation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a5c01603b397f7f99b013a1334e0792d70be641c", "commit_date": "2023-08-04T17:56:51Z", "commit_message": "gitignore: ignore clangd .cache directory\n\nIn at least some versions of clangd, including version 15 in Ubuntu\n23.04, a directory, .cache, is written in the root of the repository\nwith index information about the files in the repository.  Since clangd\nis the most common language server protocol (LSP) implementation for C,\nand we already support it using the GENERATE_COMPILATION_DATABASE flags\nto make it functional, it's likely many users are using or will want to\nuse it.\n\nAs a result, ignore the \".cache\" directory to help avoid users\naccidentally committing the data.\n\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac83bc5054c2ac489166072334b4147ce6d0fccb", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Git 2.42-rc0\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "65e25ae52298e9f1a8c7d94fd0ddffaf30cd944e", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'jc/branch-in-use-error-message'\n\n\"git branch -f X\" to repoint the branch X said that X was \"checked\nout\" in another worktree, even when branch X was not and instead\nbeing bisected or rebased.  The message was reworded to say the\nbranch was \"in use\".\n\n* jc/branch-in-use-error-message:\n  branch: update the message to refuse touching a branch in-use", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4a7c24c094cff87a4b5a02550b321591d847ca0", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'hy/blame-in-bare-with-contents'\n\n\"git blame --contents=file\" has been taught to work in a bare\nrepository.\n\n* hy/blame-in-bare-with-contents:\n  blame: allow --contents to work with bare repo", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f9712d75e6389866efbe6ad918dc9773a8a880ad", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'jc/parse-options-short-help'\n\nCommand line parser fix, and a small parse-options API update.\n\n* jc/parse-options-short-help:\n  short help: allow a gap smaller than USAGE_GAP\n  remote: simplify \"remote add --tags\" help text\n  short help: allow multi-line opthelp", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "23b20fff3ab28b31678d23e67de328ac24801f18", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'jc/doc-sent-patch-now-what'\n\nProcess document update.\n\n* jc/doc-sent-patch-now-what:\n  MyFirstContribution: refrain from self-iterating too much", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "840affcb8ddfa78e4988c276f98773e40ccba4f4", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'la/doc-choose-starting-point-fixup'\n\nClarify how to pick a starting point for a new topic in the\nSubmittingPatches document.\n\n* la/doc-choose-starting-point-fixup:\n  SubmittingPatches: use of older maintenance tracks is an exception\n  SubmittingPatches: explain why 'next' and above are inappropriate base\n  SubmittingPatches: choice of base for fixing an older maintenance track", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a53e8a64884dffb23ea416687ae8fbdaf332641a", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'pv/doc-submodule-update-settings'\n\nRewrite the description of giving a custom command to the\nsubmodule.<name>.update configuration variable.\n\n* pv/doc-submodule-update-settings:\n  doc: highlight that .gitmodules does not support !command", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4d060018467d5a8d05349294baad426d5407414d", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'ja/worktree-orphan-fix'\n\nFix tests with unportable regex patterns.\n\n* ja/worktree-orphan-fix:\n  t2400: rewrite regex to avoid unintentional PCRE\n  builtin/worktree.c: convert tab in advice to space\n  t2400: drop no-op `--sq` from rev-parse call", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3365e2675e5ac95e0a44665966e8cfbb9433456e", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'jc/retire-get-sha1-hex'\n\nThe implementation of \"get_sha1_hex()\" that reads a hexadecimal\nstring that spells a full object name has been extended to cope\nwith any hash function used in the repository, but the \"sha1\" in\nits name survived.  Rename it to get_hash_hex(), a name that is\nmore consistent within its friends like get_hash_hex_algop().\n\n* jc/retire-get-sha1-hex:\n  hex: retire get_sha1_hex()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dd68b57fc404e9117385879460a63a25f8b3c354", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'la/doc-choose-starting-point'\n\nClarify how to choose the starting point for a new topic in\ndeveloper guidance document.\n\n* la/doc-choose-starting-point:\n  SubmittingPatches: simplify guidance for choosing a starting point\n  SubmittingPatches: emphasize need to communicate non-default starting points\n  SubmittingPatches: de-emphasize branches as starting points\n  SubmittingPatches: discuss subsystems separately from git.git\n  SubmittingPatches: reword awkward phrasing", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fff1594fa77372ea7a51f6b445267f23fdbf3089", "commit_date": "2023-08-04T16:47:10Z", "commit_message": "docs: update when `git bisect visualize` uses `gitk`\n\nThis check has involved more environment variables than just `DISPLAY` since\n508e84a790 (bisect view: check for MinGW32 and MacOSX in addition to X11,\n2008-02-14), so let's update the documentation accordingly.\n\nSigned-off-by: Matthias A\u00dfhauer <mha1993@live.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bf46a9f62159ced3a84ab8bc9ba151778414bd6", "commit_date": "2023-08-04T04:21:10Z", "commit_message": "compat/mingw: implement a native locate_in_PATH()\n\nsince 5e1f28d (bisect--helper: reimplement `bisect_visualize()` shell\n function in C, 2021-09-13) `git bisect visualize` uses exists_in_PATH()\nto check wether it should call `gitk`, but exists_in_PATH() relies on\nlocate_in_PATH() which currently only understands POSIX-ish PATH variables\n(a list of paths, separated by colons) on native Windows executables\nwe encounter Windows PATH variables (a list of paths that often contain\ndrive letters (and thus colons), separated by semicolons). Luckily we do\nalready have a function that can lookup executables on windows PATHs:\npath_lookup(). Implement a small replacement for the existing\nlocate_in_PATH() based on path_lookup().\n\nReported-by: Louis Strous <Louis.Strous@intellimagic.com>\nSigned-off-by: Matthias A\u00dfhauer <mha1993@live.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb532b534547d0a6b203baaf2f3379d987f611b9", "commit_date": "2023-08-04T04:21:07Z", "commit_message": "run-command: conditionally define locate_in_PATH()\n\nThis commit doesn't change any behaviour by itself, but allows us to easily\ndefine compat replacements for locate_in_PATH(). It prepares us for the next\ncommit that adds a native Windows implementation of locate_in_PATH().\n\nSigned-off-by: Matthias A\u00dfhauer <mha1993@live.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6ce7afe16384b741f1ee4c5f310fa4a9f66348ba", "commit_date": "2023-08-03T20:42:54Z", "commit_message": "rebase --skip: fix commit message clean up when skipping squash\n\nDuring a series of \"fixup\" and/or \"squash\" commands, the interactive\nrebase accumulates a commit message from all the commits that are being\nsquashed together. If one of the commits has conflicts when it is picked\nand the user chooses to skip that commit then we need to remove that\ncommit's message from accumulated messages.  To do this 15ef69314d5\n(rebase --skip: clean up commit message after a failed fixup/squash,\n2018-04-27) updated commit_staged_changes() to reset the accumulated\nmessage to the commit message of HEAD (which does not contain the\nmessage from the skipped commit) when the last command was \"fixup\" or\n\"squash\" and there are no staged changes. Unfortunately the code to do\nthis contains two bugs.\n\n(1) If parse_head() fails we pass an invalid pointer to\n    unuse_commit_buffer().\n\n(2) The reconstructed message uses the entire commit buffer from HEAD\n    including the headers, rather than just the commit message.\n\nThe first issue is fixed by splitting up the \"if\" condition into several\nstatements each with its own error handling. The second issue is fixed\nby finding the start of the commit message within the commit buffer\nusing find_commit_subject().\n\nThe existing test added by 15ef69314d5 is modified to show the effect of\nthis bug.  The bug is triggered when skipping the first command in the\nchain (as the test does before this commit) but the effect is hidden\nbecause opts->current_fixup_count is set to zero which leads\nupdate_squash_messages() to recreate the squash message file from\nscratch overwriting the bad message created by\ncommit_staged_changes(). The test is also updated to explicitly check\nthe commit messages rather than relying on grep to ensure they do not\ncontain any stray commit headers.\n\nTo check the commit message the function test_commit_message() is moved\nfrom t3437-rebase-fixup-options.sh to test-lib.sh. As the function is\nnow publicly available it is updated to provide better error detection\nand avoid overwriting the commonly used files \"actual\" and \"expect\".\nSupport for reading the expected commit message from stdin is also\nadded.\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1c04cb0744d2acdcaebc77b0e78c47efbba67fd5", "commit_date": "2023-08-02T16:50:52Z", "commit_message": "ident: don't consider '.' a crud\n\nWhen we process a user's name (as in user.name), we strip all\nleading and trailing crud from it.  Right now, we consider a dot\na crud character, and strip it off.\n\nHowever, this is unsuitable for many personal names because humans\nfrequently have abbreviated suffixes, such as \"Jr.\" or \"Sr.\" at the end\nof their names, and this corrupts them.  Some other users may wish to\nuse an abbreviated name or initial, which will pose a problem especially\nin cultures that write the family name first, followed by the personal\nname.\n\nSince the current approach causes lots of practical problems, let's\navoid it by no longer considering a dot to be crud.\n\nNote that \".\" in the name forces the entire name to be quoted to\nplease mailers, but stripping \".\" only at the beginning and the end\ndoes not help a name with \".\" in the middle (like \"brian m. carlson\")\nso this change will not make it much worse.  A name like \"Given\nFamily, Jr.\" that did not have to be quoted now would need to be, in\norder to be placed on the e-mail headers, though.\n\nThis is based on a weather-balloon patch by Jeff King sent in Aug 2021\nhttps://lore.kernel.org/git/YSKm8Q8nyTavQaox@coredump.intra.peff.net/\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0a5129563ebe720330fdc8f5c6843d27641137", "commit_date": "2023-08-02T16:37:52Z", "commit_message": "The eighteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "955c2b1c6ad736a685fcb7cab1c079a9c7cc18c8", "commit_date": "2023-08-02T16:37:52Z", "commit_message": "Documentation/RelNotes/2.42.0.txt: typofix\n\nFix a typo introduced in aa9166bcc0 (The ninth batch, 2023-07-08).\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "70e5c5ddddadc7f15f64f812ae511eab83ca0040", "commit_date": "2023-08-02T16:37:24Z", "commit_message": "Merge branch 'ks/ref-filter-describe'\n\n\"git branch --list --format=<format>\" and friends are taught\na new \"%(describe)\" placeholder.\n\n* ks/ref-filter-describe:\n  ref-filter: add new \"describe\" atom\n  ref-filter: add multiple-option parsing functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8bfb359844cf51aedaf0d28486d4ce9867ccb46c", "commit_date": "2023-08-02T16:37:24Z", "commit_message": "Merge branch 'ah/sequencer-rewrite-todo-fix'\n\nWhen the user edits \"rebase -i\" todo file so that it starts with a\n\"fixup\", which would make it invalid, the command truncated the\nrest of the file before giving an error and returning the control\nback to the user.  Stop truncating to make it easier to correct\nsuch a malformed todo file.\n\n* ah/sequencer-rewrite-todo-fix:\n  sequencer: finish parsing the todo list despite an invalid first line", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "52d9dc20e1ddd5ac6b9e9113983b2f8d6977e6b0", "commit_date": "2023-08-02T16:37:23Z", "commit_message": "Merge branch 'bb/use-trace2-counters-for-fsync-stats'\n\nInstead of inventing a custom counter variables for debugging,\nuse existing trace2 facility in the fsync customization codepath.\n\n* bb/use-trace2-counters-for-fsync-stats:\n  wrapper: use trace2 counters to collect fsync stats", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "99acb0fa54775a383cab70a6e662e45180dee3f0", "commit_date": "2023-08-02T16:37:23Z", "commit_message": "Merge branch 'ah/autoconf-fixes'\n\n\"./configure --with-expat=no\" did not work as a way to refuse use\nof the expat library on a system with the library installed, which\nhas been corrected.\n\n* ah/autoconf-fixes:\n  configure.ac: always save NO_ICONV to config.status\n  configure.ac: don't overwrite NO_CURL option\n  configure.ac: don't overwrite NO_EXPAT option", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fea92e4cac30b1204ecc8dfd53675bbdd68611e0", "commit_date": "2023-08-02T16:37:23Z", "commit_message": "Merge branch 'jc/tree-walk-drop-base-offset'\n\nCode simplification.\n\n* jc/tree-walk-drop-base-offset:\n  tree-walk: drop unused base_offset from do_match()\n  tree-walk: lose base_offset that is never used in tree_entry_interesting", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bda9c12073e786e2ffa2c3ec479c7fe098d49999", "commit_date": "2023-08-01T15:34:56Z", "commit_message": "avoid SHA-1 functions deprecated in OpenSSL 3+\n\nOpenSSL 3+ deprecates the SHA1_Init, SHA1_Update, and SHA1_Final\nfunctions, leading to errors when building with `DEVELOPER=1'.\n\nUse the newer EVP_* API with OpenSSL 3+ (only) despite being more\nerror-prone and less efficient due to heap allocations.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e440ea0aba0660f356a3e5b9fc366d5d6960847", "commit_date": "2023-08-01T15:34:54Z", "commit_message": "sha256: avoid functions deprecated in OpenSSL 3+\n\nOpenSSL 3+ deprecates the SHA256_Init, SHA256_Update, and SHA256_Final\nfunctions, leading to errors when building with `DEVELOPER=1'.\n\nUse the newer EVP_* API with OpenSSL 3+ despite being more\nerror-prone and less efficient due to heap allocations.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e42eb0e9ae44f65c360cd95ce28e84496ad8247", "commit_date": "2023-07-31T16:11:04Z", "commit_message": "doc: sha256 is no longer experimental\n\nRemove scary wording that basically stops people using sha256\nrepositories not because of interoperability issues with sha1\nrepositories, but from fear that their work will suddenly become\nincompatible in some future version of git.\n\nWe should be clear that currently sha256 repositories will not work with\nsha1 repositories but stop the scary words.\n\nSigned-off-by: Adam Majer <adamm@zombino.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "823839bda1a72c54fe8ac025fb70dd3403c11f46", "commit_date": "2023-07-31T15:57:24Z", "commit_message": "sha256/gcrypt: die on gcry_md_open failures\n\n`gcry_md_open' allocates memory and must (like all allocation\nfunctions) be checked for failure.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8b608f3fb84388bb1b6da70feb62e20a19390cb6", "commit_date": "2023-07-31T15:57:15Z", "commit_message": "sha256/gcrypt: fix memory leak with SHA-256 repos\n\n`gcry_md_open' needs to be paired with `gcry_md_close' to ensure\nresources are released.  Since our internal APIs don't have\nseparate close/release callbacks, sticking it into the finalization\ncallback seems appropriate.\n\nBuilding with SANITIZE=leak and running `git fsck' on a SHA-256\nrepository no longer reports leaks.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b4b85e41a74eaf61dfb490004541622e63df092b", "commit_date": "2023-07-31T15:56:54Z", "commit_message": "sha256/gcrypt: fix build with SANITIZE=leak\n\nNon-static functions cause `undefined reference' errors when\nbuilding with `SANITIZE=leak' due to the lack of prototypes.\nMark all these functions as `static inline' as we do in\nsha256/nettle.h to avoid the need to maintain prototypes.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d089a06421c86d120f50f05020ca6b833b068dcb", "commit_date": "2023-07-31T15:33:53Z", "commit_message": "bundle: use OPT_PASSTHRU_ARGV\n\n\"git bundle\" passes the progress control options to \"git pack-objects\"\nby parsing and then recreating them explicitly.  Simplify that process\nby using OPT_PASSTHRU_ARGV instead.\n\nThis also fixes --no-quiet, which has been doing the same as --quiet\nsince its introduction by 79862b6b77 (bundle-create: progress output\ncontrol, 2019-11-10) because it had been defined using OPT_SET_INT with\na value of 0, which sets 0 when negated as well.\n\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ee48e70a829d1fa2da82f14787051ad8e7c45b71", "commit_date": "2023-07-28T16:45:22Z", "commit_message": "The seventeenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ddcb8fd8b94c066406c2a4f41e04122cb2a742ad", "commit_date": "2023-07-28T16:45:22Z", "commit_message": "Merge branch 'rs/pack-objects-parseopt-fix'\n\nCommand line parser fix.\n\n* rs/pack-objects-parseopt-fix:\n  pack-objects: fix --no-quiet\n  pack-objects: fix --no-keep-true-parents", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3085f949bf4aafe04dac7441308bb769ccf9c351", "commit_date": "2023-07-28T16:45:21Z", "commit_message": "Merge branch 'rs/describe-parseopt-fix'\n\nCommand line parser fix.\n\n* rs/describe-parseopt-fix:\n  describe: fix --no-exact-match", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c8a33b44c5a56c7b2c7778506acdc71e5365ec1f", "commit_date": "2023-07-28T16:45:21Z", "commit_message": "Merge branch 'bb/trace2-comment-fix'\n\nIn-code comment fix.\n\n* bb/trace2-comment-fix:\n  trace2: fix a comment", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "010447cf098f7407008f2940b4fefa5351477044", "commit_date": "2023-07-28T00:44:07Z", "commit_message": "MyFirstContribution: refrain from self-iterating too much\n\nFinding mistakes in and improving your own patches is a good idea,\nbut doing so too quickly is being inconsiderate to reviewers who\nhave just seen the initial iteration and taking their time to review\nit.  Encourage new developers to perform such a self review before\nthey send out their patches, not after.  After sending a patch that\nthey immediately found mistakes in, they are welcome to comment on\nthem, mentioning what and how they plan to improve them in an\nupdated version, before sending out their updates.\n\nHelped-by: Torsten B\u00f6gershausen <tboegi@web.de>\nHelped-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}], "master": [{"commit_oid": "a9ecda2788e229afc9b611acaa26d0d9d4da53ed", "commit_date": "2023-10-13T21:18:29Z", "commit_message": "The eighteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2920971a7fd345eeaa72feae554030850e06aeec", "commit_date": "2023-10-13T21:18:28Z", "commit_message": "Merge branch 'jk/decoration-and-other-leak-fixes'\n\nLeakfix.\n\n* jk/decoration-and-other-leak-fixes:\n  daemon: free listen_addr before returning\n  revision: clear decoration structs during release_revisions()\n  decorate: add clear_decoration() function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "09dcbb486d964b59222136dd1668023098658eda", "commit_date": "2023-10-13T21:18:28Z", "commit_message": "Merge branch 'ar/diff-index-merge-base-fix'\n\n\"git diff --merge-base X other args...\" insisted that X must be a\ncommit and errored out when given an annotated tag that peels to a\ncommit, but we only need it to be a committish.  This has been\ncorrected.\n\n* ar/diff-index-merge-base-fix:\n  diff: fix --merge-base with annotated tags", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b32f5b6b34a2062e94d546c923e3bcb97aba4a16", "commit_date": "2023-10-13T21:18:28Z", "commit_message": "Merge branch 'js/submodule-fix-misuse-of-path-and-name'\n\nIn .gitmodules files, submodules are keyed by their names, and the\npath to the submodule whose name is $name is specified by the\nsubmodule.$name.path variable.  There were a few codepaths that\nmixed the name and path up when consulting the submodule database,\nwhich have been corrected.  It took long for these bugs to be found\nas the name of a submodule initially is the same as its path, and\nthe problem does not surface until it is moved to a different path,\nwhich apparently happens very rarely.\n\n* js/submodule-fix-misuse-of-path-and-name:\n  t7420: test that we correctly handle renamed submodules\n  t7419: test that we correctly handle renamed submodules\n  t7419, t7420: use test_cmp_config instead of grepping .gitmodules\n  t7419: actually test the branch switching\n  submodule--helper: return error from set-url when modifying failed\n  submodule--helper: use submodule_from_path in set-{url,branch}", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a45eddec40b7fd0b9a86ccd0e889a785829d55d7", "commit_date": "2023-10-13T21:18:28Z", "commit_message": "Merge branch 'jk/commit-graph-leak-fixes'\n\nLeakfix.\n\n* jk/commit-graph-leak-fixes:\n  commit-graph: clear oidset after finishing write\n  commit-graph: free write-context base_graph_name during cleanup\n  commit-graph: free write-context entries before overwriting\n  commit-graph: free graph struct that was not added to chain\n  commit-graph: delay base_graph assignment in add_graph_to_chain()\n  commit-graph: free all elements of graph chain\n  commit-graph: move slab-clearing to close_commit_graph()\n  merge: free result of repo_get_merge_bases()\n  commit-reach: free temporary list in get_octopus_merge_bases()\n  t6700: mark test as leak-free", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c75e91499ba78278418b76f85964642a18af449c", "commit_date": "2023-10-13T21:18:27Z", "commit_message": "Merge branch 'la/trailer-test-and-doc-updates'\n\nTest coverage for trailers has been improved.\n\n* la/trailer-test-and-doc-updates:\n  trailer doc: <token> is a <key> or <keyAlias>, not both\n  trailer doc: separator within key suppresses default separator\n  trailer doc: emphasize the effect of configuration variables\n  trailer --unfold help: prefer \"reformat\" over \"join\"\n  trailer --parse docs: add explanation for its usefulness\n  trailer --only-input: prefer \"configuration variables\" over \"rules\"\n  trailer --parse help: expose aliased options\n  trailer --no-divider help: describe usual \"---\" meaning\n  trailer: trailer location is a place, not an action\n  trailer doc: narrow down scope of --where and related flags\n  trailer: add tests to check defaulting behavior with --no-* flags\n  trailer test description: this tests --where=after, not --where=before\n  trailer tests: make test cases self-contained", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e56b9edf228928fed72578bb7a4e6a35b47c551c", "commit_date": "2023-10-13T21:18:27Z", "commit_message": "Merge branch 'ds/mailmap-entry-update'\n\nUpdate mailmap entry for Derrick.\n\n* ds/mailmap-entry-update:\n  mailmap: change primary address for Derrick Stolee", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59167d7d09fd7a1d64aa1d5be73bc484f6621894", "commit_date": "2023-10-12T19:18:27Z", "commit_message": "The seventeenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4ae4c705775132ff7f782966d20fc2dac1795691", "commit_date": "2023-10-12T19:18:27Z", "commit_message": "Merge branch 'js/ci-coverity'\n\nGitHub CI workflow has learned to trigger Coverity check.\n\n* js/ci-coverity:\n  coverity: detect and report when the token or project is incorrect\n  coverity: allow running on macOS\n  coverity: support building on Windows\n  coverity: allow overriding the Coverity project\n  coverity: cache the Coverity Build Tool\n  ci: add a GitHub workflow to submit Coverity scans", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c70e7a3cfd403fb6d669d3be8fbe3d530d3d8329", "commit_date": "2023-10-12T19:18:26Z", "commit_message": "Merge branch 'jm/git-status-submodule-states-docfix'\n\nDocfix.\n\n* jm/git-status-submodule-states-docfix:\n  git-status.txt: fix minor asciidoc format issue", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6e47cfcffc19a5a9cd5a04b0f81e26c123ba8ca8", "commit_date": "2023-10-12T19:18:26Z", "commit_message": "Merge branch 'rs/parse-opt-ctx-cleanup'\n\nCode clean-up.\n\n* rs/parse-opt-ctx-cleanup:\n  parse-options: drop unused parse_opt_ctx_t member", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6e5457d8c7332c279e1482c442922f954af5f8f2", "commit_date": "2023-10-12T17:59:36Z", "commit_message": "mailmap: change primary address for Derrick Stolee\n\nThe previous primary address is no longer valid.\n\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aab89be2eb6ca51eefeb8c8066f673f447058856", "commit_date": "2023-10-10T18:39:15Z", "commit_message": "The sixteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1fdedb7c7d60f48dcfab875f9f2027ae2d1b777c", "commit_date": "2023-10-10T18:39:15Z", "commit_message": "Merge branch 'cc/repack-sift-filtered-objects-to-separate-pack'\n\n\"git repack\" machinery learns to pay attention to the \"--filter=\"\noption.\n\n* cc/repack-sift-filtered-objects-to-separate-pack:\n  gc: add `gc.repackFilterTo` config option\n  repack: implement `--filter-to` for storing filtered out objects\n  gc: add `gc.repackFilter` config option\n  repack: add `--filter=<filter-spec>` option\n  pack-bitmap-write: rebuild using new bitmap when remapping\n  repack: refactor finding pack prefix\n  repack: refactor finishing pack-objects command\n  t/helper: add 'find-pack' test-tool\n  pack-objects: allow `--filter` without `--stdout`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "afb0d0880abb56d8084f1fac704e17f82d491bc9", "commit_date": "2023-10-10T18:39:14Z", "commit_message": "Merge branch 'ds/init-diffstat-width'\n\nCode clean-up.\n\n* ds/init-diffstat-width:\n  diff --stat: set the width defaults in a helper function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a7a2d10421b735944f376f1de53b437bfbb93e88", "commit_date": "2023-10-10T18:39:14Z", "commit_message": "Merge branch 'cw/prelim-cleanup'\n\nShuffle some bits across headers and sources to prepare for\nlibification effort.\n\n* cw/prelim-cleanup:\n  parse: separate out parsing functions from config.h\n  config: correct bad boolean env value error message\n  wrapper: reduce scope of remove_or_warn()\n  hex-ll: separate out non-hash-algo functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3df51ea0a5ef88b801ab30ca28f159b898183926", "commit_date": "2023-10-10T18:39:14Z", "commit_message": "Merge branch 'eb/limit-bulk-checkin-to-blobs'\n\nThe \"streaming\" interface used for bulk-checkin codepath has been\nnarrowed to take only blob objects for now, with no real loss of\nfunctionality.\n\n* eb/limit-bulk-checkin-to-blobs:\n  bulk-checkin: only support blobs in index_bulk_checkin", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "badf2fe1c31f939cac5ea229bba8de273af132d9", "commit_date": "2023-10-05T21:54:58Z", "commit_message": "daemon: free listen_addr before returning\n\nWe build up a string list of listen addresses from the command-line\narguments, but never free it. This causes t5811 to complain of a leak\n(though curiously it seems to do so only when compiled with gcc, not\nwith clang).\n\nTo handle this correctly, we have to do a little refactoring:\n\n  - there are two exit points from the main function, depending on\n    whether we are entering the main loop or serving a single client\n    (since rather than a traditional fork model, we re-exec ourselves\n    with the extra \"--serve\" argument to accommodate Windows).\n\n    We don't need --listen at all in the --serve case, of course, but it\n    is passed along by the parent daemon, which simply copies all of the\n    command-line options it got.\n\n  - we just \"return serve()\" to run the main loop, giving us no chance\n    to do any cleanup\n\nSo let's use a \"ret\" variable to store the return code, and give\nourselves a single exit point at the end. That gives us one place to do\ncleanup.\n\nNote that this code also uses the \"use a no-dup string-list, but\nallocate strings we add to it\" trick, meaning string_list_clear() will\nnot realize it should free them. We can fix this by switching to a \"dup\"\nstring-list, but using the \"append_nodup\" function to add to it (this is\npreferable to tweaking the strdup_strings flag before clearing, as it\nputs all the subtle memory-ownership code together).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8ef8da484272587c5c30810e5fcb03b4048a1221", "commit_date": "2023-10-05T21:54:57Z", "commit_message": "revision: clear decoration structs during release_revisions()\n\nThe point of release_revisions() is to free memory associated with the\nrev_info struct, but we have several \"struct decoration\" members that\nare left untouched. Since the previous commit introduced a function to\ndo that, we can just call it.\n\nWe do have to provide some specialized callbacks to map the void\npointers onto real ones (the alternative would be casting the existing\nfunction pointers; this generally works because \"void *\" is usually\ninterchangeable with a struct pointer, but it is technically forbidden\nby the standard).\n\nSince the line-log code does not expose the type it stores in the\ndecoration (nor of course the function to free it), I put this behind a\ngeneric line_log_free() entry point. It's possible we may need to add\nmore line-log specific bits anyway (running t4211 shows a number of\nother leaks in the line-log code).\n\nWhile this doubtless cleans up many leaks triggered by the test suite,\nthe only script which becomes leak-free is t4217, as it does very little\nbeyond a simple traversal (its existing leak was from the use of\n--children, which is now fixed).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "771868243cf0b6f7edcec6e672d20faa4e9b50be", "commit_date": "2023-10-05T21:54:55Z", "commit_message": "decorate: add clear_decoration() function\n\nThere's not currently any way to free the resources associated with a\ndecoration struct. As a result, we have several memory leaks which\ncannot easily be plugged.\n\nLet's add a \"clear\" function and make use of it in the example code of\nt9004. This removes the only leak from that script, so we can mark it as\npassing the leak sanitizer.\n\nCuriously this leak is found only when running SANITIZE=leak with clang,\nbut not with gcc.  But it is a bog-standard leak: we allocate some\nmemory in a local variable struct, and then exit main() without\nreleasing it. I'm not sure why gcc doesn't find it. After this\npatch, both compilers report it as leak-free.\n\nNote that the clear function takes a callback to free the individual\nentries. That's not needed for our example (which is just decorating\nwith ints), but will be for real callers.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3349520e1a1ffd268347ec0ebb720830428f872e", "commit_date": "2023-10-05T18:45:46Z", "commit_message": "coverity: detect and report when the token or project is incorrect\n\nWhen trying to obtain the MD5 of the Coverity Scan Tool (in order to\ndecide whether a cached version can be used or a new version has to be\ndownloaded), it is possible to get a 401 (Authorization required) due to\neither an incorrect token, or even more likely due to an incorrect\nCoverity project name.\n\nSeeing an authorization failure that is caused by an incorrect project\nname was somewhat surprising to me when developing the Coverity\nworkflow, as I found such a failure suggestive of an incorrect token\ninstead.\n\nSo let's provide a helpful error message about that specifically when\nencountering authentication issues.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a06386e314565108ad56a9bdb8f7b80ac52fb69", "commit_date": "2023-10-04T20:29:09Z", "commit_message": "The fifteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "64b2419cccdc8b104f3d31981d6623e1829f6a23", "commit_date": "2023-10-04T20:28:53Z", "commit_message": "Merge branch 'bb/unicode-width-table-15'\n\nThe display width table for unicode characters has been updated for\nUnicode 15.1\n\n* bb/unicode-width-table-15:\n  unicode: update the width tables to Unicode 15.1", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba7d57b8e56305fb4dad2108d59b09c73bffaff4", "commit_date": "2023-10-04T20:28:53Z", "commit_message": "Merge branch 'xz/commit-title-soft-limit-doc'\n\nDoc tweak.\n\n* xz/commit-title-soft-limit-doc:\n  doc: correct the 50 characters soft limit", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c3c00206739afc1016277d5a670d377bef85e69b", "commit_date": "2023-10-04T20:28:53Z", "commit_message": "Merge branch 'jk/commit-graph-verify-fix'\n\nVarious fixes to \"git commit-graph verify\".\n\n* jk/commit-graph-verify-fix:\n  commit-graph: report incomplete chains during verification\n  commit-graph: tighten chain size check\n  commit-graph: detect read errors when verifying graph chain\n  t5324: harmonize sha1/sha256 graph chain corruption\n  commit-graph: check mixed generation validation when loading chain file\n  commit-graph: factor out chain opening function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42b495e9c59f0634f535bbba074d6f75543235a5", "commit_date": "2023-10-04T20:28:53Z", "commit_message": "Merge branch 'ks/ref-filter-mailmap'\n\n\"git for-each-ref\" and friends learn to apply mailmap to authorname\nand other fields.\n\n* ks/ref-filter-mailmap:\n  ref-filter: add mailmap support\n  t/t6300: introduce test_bad_atom\n  t/t6300: cleanup test_atom", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "30291891865b928cfff11735f758ecdd646d7510", "commit_date": "2023-10-04T20:28:52Z", "commit_message": "Merge branch 'ps/revision-cmdline-stdin-not'\n\n\"git rev-list --stdin\" learned to take non-revisions (like \"--not\")\nrecently from the standard input, but the way such a \"--not\" was\nhandled was quite confusing, which has been rethought.  This is\npotentially a change that breaks backward compatibility.\n\n* ps/revision-cmdline-stdin-not:\n  revision: make pseudo-opt flags read via stdin behave consistently", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "641307d3b6b5d2ab1c499c20df47354f64f8c5dc", "commit_date": "2023-10-04T16:55:26Z", "commit_message": "git-status.txt: fix minor asciidoc format issue\n\nThe list of additional XY values for submodules in short format\nisn't formatted consistently with the rest of the document.\nFormat as list for consistency.\n\nSigned-off-by: Javier Mora <cousteaulecommandant@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bd1c20ccd70d7452566bbc56ca2cf1fbb73d747c", "commit_date": "2023-10-03T22:32:37Z", "commit_message": "t7420: test that we correctly handle renamed submodules\n\nCreate a second submodule with a name that differs from its path. Test\nthat calling set-url modifies the correct .gitmodules entries. Make sure\nwe don't create a section named after the path instead of the name.\n\nSigned-off-by: Jan Alexander Steffens (heftig) <heftig@archlinux.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "32bff3675e6b4dc5ae93f0777e5da709f6576275", "commit_date": "2023-10-03T22:32:34Z", "commit_message": "t7419: test that we correctly handle renamed submodules\n\nAdd the submodule again with an explicitly different name and path. Test\nthat calling set-branch modifies the correct .gitmodules entries. Make\nsure we don't create a section named after the path instead of the name.\n\nSigned-off-by: Jan Alexander Steffens (heftig) <heftig@archlinux.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5fc880632d5e9ef6fd40a5ef9b5e01d61cdc320a", "commit_date": "2023-10-03T22:32:31Z", "commit_message": "t7419, t7420: use test_cmp_config instead of grepping .gitmodules\n\nWe have a test function to verify config files. Use it as it's more\nprecise.\n\nSigned-off-by: Jan Alexander Steffens (heftig) <heftig@archlinux.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b027fb07848bdfd84abdf1d6af2cf5d9e4592ffc", "commit_date": "2023-10-03T22:32:27Z", "commit_message": "t7419: actually test the branch switching\n\nThe submodule repo the test set up had the 'topic' branch checked out,\nmeaning the repo's default branch (HEAD) is the 'topic' branch.\n\nThe following tests then pretended to switch between the default branch\nand the 'topic' branch. This was papered over by continually adding\ncommits to the 'topic' branch and checking if the submodule gets updated\nto this new commit.\n\nReturn the submodule repo to the 'main' branch after setup so we can\nactually test the switching behavior.\n\nSigned-off-by: Jan Alexander Steffens (heftig) <heftig@archlinux.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "387c122131a9f8e4a67122d53955133d099b64a7", "commit_date": "2023-10-03T22:30:43Z", "commit_message": "submodule--helper: return error from set-url when modifying failed\n\nset-branch will return an error when setting the config fails so I don't\nsee why set-url shouldn't. Also skip the sync in this case.\n\nSigned-off-by: Jan Alexander Steffens (heftig) <heftig@archlinux.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6327085aa027b7d5936912bed596a3cf86953439", "commit_date": "2023-10-03T22:30:42Z", "commit_message": "submodule--helper: use submodule_from_path in set-{url,branch}\n\nThe commands need a path to a submodule but treated it as the name when\nmodifying the .gitmodules file, leading to confusion when a submodule's\nname does not match its path.\n\nBecause calling submodule_from_path initializes the submodule cache, we\nneed to manually trigger a reread before syncing, as the cache is\nmissing the config change we just made.\n\nSigned-off-by: Jan Alexander Steffens (heftig) <heftig@archlinux.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "da09e7af68247519e2b19fc8dff113896c39ac3c", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "commit-graph: clear oidset after finishing write\n\nIn graph_write() we store commits in an oidset, but never clean it up,\nleaking the contents. We should clear it in the cleanup section.\n\nThe oidset comes from 6830c36077 (commit-graph.h: replace 'commit_hex'\nwith 'commits', 2020-04-13), but it was just replacing a string_list\nthat was also leaked. Curiously, we fixed the leak of some adjacent\nvariables in commit fa8953cb40 (builtin/commit-graph.c: extract\n'read_one_commit()', 2020-05-18), but the oidset wasn't included for\nsome reason.\n\nIn combination with the preceding commits, this lets us mark t5324 as\nleak-free.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d9c84c6d67e3418bade00af7bcb5f72d7c656164", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "commit-graph: free write-context base_graph_name during cleanup\n\nCommit 6c622f9f0b (commit-graph: write commit-graph chains, 2019-06-18)\nadded a base_graph_name string to the write_commit_graph_context struct.\nBut the end-of-function cleanup forgot to free it, causing a leak.\n\nThis (presumably in combination with the preceding leak-fixes) lets us\nmark t5328 as leak-free.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "274bfa7f28fea96fafa114f2508ebef53735d7b6", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "commit-graph: free write-context entries before overwriting\n\nWhen writing a split graph file, we replace the final element of the\ncommit_graph_hash_after and commit_graph_filenames_after arrays. But\nsince these are allocated strings, we need to free them before\noverwriting to avoid leaking the old string.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1d94abfe1eedb3f0a9de74ba59483ef8f10b352c", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "commit-graph: free graph struct that was not added to chain\n\nWhen reading the graph chain file, we open (and allocate) each\nindividual slice it mentions and then add them to a linked-list chain.\nBut if adding to the chain fails (e.g., because the base-graph chunk it\ncontains didn't match what we expected), we leave the function without\nfreeing the graph struct that caused the failure, leaking it.\n\nWe can fix it by calling free_graph_commit().\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "991d549f74862d07a38a077f34c0deaf65607c74", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "commit-graph: delay base_graph assignment in add_graph_to_chain()\n\nWhen adding a graph to a chain, we do some consistency checks and then\nif everything looks good, set g->base_graph to add a link to the chain.\nBut when we added a new consistency check in 209250ef38 (commit-graph.c:\nprevent overflow in add_graph_to_chain(), 2023-07-12), it comes _after_\nwe've already set g->base_graph. So we might return failure, even though\nwe actually added to the chain.\n\nThis hasn't caused a bug yet, because after failing to add to the chain,\nwe discard the failed graph struct completely, leaking it. But in order\nto fix that, it's important that the struct be in a consistent and\npredictable state after the failure.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "09a75abba4eabab3f2cc4474e5d2db3a33a3a682", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "commit-graph: free all elements of graph chain\n\nWhen running \"commit-graph verify\", we call free_commit_graph(). That's\nsufficient for the case of a single graph file, but if we loaded a chain\nof split graph files, they form a linked list via the base_graph\npointers. We need to free all of them, or we leak all but the first\nstruct.\n\nWe can make this work by teaching free_commit_graph() to walk the\nbase_graph pointers and free each element. This in turn lets us simplify\nclose_commit_graph(), which does the same thing by recursion (we cannot\njust use close_commit_graph() in \"commit-graph verify\", as the function\ntakes a pointer to an object store, and the verify command creates a\nsingle one-off graph struct).\n\nWhile indenting the code in free_commit_graph() for the loop, I noticed\nthat setting g->data to NULL is rather pointless, as we free the struct\na few lines later. So I cleaned that up while we're here.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac6d45d11f24921ead899c74569b717a7895f4a5", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "commit-graph: move slab-clearing to close_commit_graph()\n\nWhen closing and freeing a commit-graph, the main entry point is\nclose_commit_graph(), which then uses close_commit_graph_one() to\nrecurse through the base_graph links and free each one.\n\nCommit 957ba814bf (commit-graph: when closing the graph, also release\nthe slab, 2021-09-08) put the call to clear the slab into the recursive\nfunction, but this is pointless: there's only a single global slab\nvariable. It works OK in practice because clearing the slab is\nidempotent, but it makes the code harder to reason about and refactor.\n\nMove it into the parent function so it's only called once (and there are\nno other direct callers of the recursive close_commit_graph_one(), so we\nare not hurting them).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "716a6b2c3a54779e1e6f115a5950511d019f4d17", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "merge: free result of repo_get_merge_bases()\n\nWe call repo_get_merge_bases(), which allocates a commit_list, but never\nfree the result, causing a leak.\n\nThe obvious solution is to free it, but we need to look at the contents\nof the first item to decide whether to leave the loop. One option is to\nfree it in both code paths. But since the commit that the list points to\nis longer-lived than the list itself, we can just dereference it\nimmediately, free the list, and then continue with the existing logic.\nThis is about the same amount of code, but keeps the list management all\nin one place.\n\nThis lets us mark a number of merge-related test scripts as leak-free.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ec97ad120caad0c7366a19a6680d37e2b8c5107c", "commit_date": "2023-10-03T21:28:23Z", "commit_message": "commit-reach: free temporary list in get_octopus_merge_bases()\n\nWe loop over the set of commits to merge, and for each one compute the\nmerge base against the existing set of merge base candidates we've\nfound. Then we replace the candidate set with a simple assignment of the\nlist head, leaking the old list. We should free it first before\nassignment.\n\nThis makes t5521 leak-free, so mark it as such.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "be4b578c69e0ac1d974ebc9163ff5793a018da8e", "commit_date": "2023-10-03T21:28:23Z", "commit_message": "t6700: mark test as leak-free\n\nThis test has never leaked since it was added. Let's annotate it to make\nsure it stays that way (and to reduce noise when looking for other\nleak-free scripts after we fix some leaks).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4cbb32c278f95ac8546eccf9aa10b6243030152", "commit_date": "2023-10-03T20:15:03Z", "commit_message": "parse-options: drop unused parse_opt_ctx_t member\n\n5c387428f1 (parse-options: don't emit \"ambiguous option\" for aliases,\n2019-04-29) added \"updated_options\" to struct parse_opt_ctx_t, but it\nhas never been used.  Remove it.\n\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9b96046b9239589756cde8fbcbafe05ac7ec4611", "commit_date": "2023-10-02T21:54:31Z", "commit_message": "gc: add `gc.repackFilterTo` config option\n\nA previous commit implemented the `gc.repackFilter` config option\nto specify a filter that should be used by `git gc` when\nperforming repacks.\n\nAnother previous commit has implemented\n`git repack --filter-to=<dir>` to specify the location of the\npackfile containing filtered out objects when using a filter.\n\nLet's implement the `gc.repackFilterTo` config option to specify\nthat location in the config when `gc.repackFilter` is used.\n\nNow when `git gc` will perform a repack with a <dir> configured\nthrough this option and not empty, the repack process will be\npassed a corresponding `--filter-to=<dir>` argument.\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71c5aec1f54eba5a2856f72d85823af64e5deb34", "commit_date": "2023-10-02T21:54:31Z", "commit_message": "repack: implement `--filter-to` for storing filtered out objects\n\nA previous commit has implemented `git repack --filter=<filter-spec>` to\nallow users to filter out some objects from the main pack and move them\ninto a new different pack.\n\nIt would be nice if this new different pack could be created in a\ndifferent directory than the regular pack. This would make it possible\nto move large blobs into a pack on a different kind of storage, for\nexample cheaper storage.\n\nEven in a different directory, this pack can be accessible if, for\nexample, the Git alternates mechanism is used to point to it. In fact\nnot using the Git alternates mechanism can corrupt a repo as the\ngenerated pack containing the filtered objects might not be accessible\nfrom the repo any more. So setting up the Git alternates mechanism\nshould be done before using this feature if the user wants the repo to\nbe fully usable while this feature is used.\n\nIn some cases, like when a repo has just been cloned or when there is no\nother activity in the repo, it's Ok to setup the Git alternates\nmechanism afterwards though. It's also Ok to just inspect the generated\npackfile containing the filtered objects and then just move it into the\n'.git/objects/pack/' directory manually. That's why it's not necessary\nfor this command to check that the Git alternates mechanism has been\nalready setup.\n\nWhile at it, as an example to show that `--filter` and `--filter-to`\nwork well with other options, let's also add a test to check that these\noptions work well with `--max-pack-size`.\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1cd43a9ed96831b983fada37a71daacb6be373dc", "commit_date": "2023-10-02T21:54:30Z", "commit_message": "gc: add `gc.repackFilter` config option\n\nA previous commit has implemented `git repack --filter=<filter-spec>` to\nallow users to filter out some objects from the main pack and move them\ninto a new different pack.\n\nUsers might want to perform such a cleanup regularly at the same time as\nthey perform other repacks and cleanups, so as part of `git gc`.\n\nLet's allow them to configure a <filter-spec> for that purpose using a\nnew gc.repackFilter config option.\n\nNow when `git gc` will perform a repack with a <filter-spec> configured\nthrough this option and not empty, the repack process will be passed a\ncorresponding `--filter=<filter-spec>` argument.\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "48a9b67b4301083d0820e90afef208ed1436298f", "commit_date": "2023-10-02T21:54:30Z", "commit_message": "repack: add `--filter=<filter-spec>` option\n\nThis new option puts the objects specified by `<filter-spec>` into a\nseparate packfile.\n\nThis could be useful if, for example, some blobs take up a lot of\nprecious space on fast storage while they are rarely accessed. It could\nmake sense to move them into a separate cheaper, though slower, storage.\n\nIt's possible to find which new packfile contains the filtered out\nobjects using one of the following:\n\n  - `git verify-pack -v ...`,\n  - `test-tool find-pack ...`, which a previous commit added,\n  - `--filter-to=<dir>`, which a following commit will add to specify\n    where the pack containing the filtered out objects will be.\n\nThis feature is implemented by running `git pack-objects` twice in a\nrow. The first command is run with `--filter=<filter-spec>`, using the\nspecified filter. It packs objects while omitting the objects specified\nby the filter. Then another `git pack-objects` command is launched using\n`--stdin-packs`. We pass it all the previously existing packs into its\nstdin, so that it will pack all the objects in the previously existing\npacks. But we also pass into its stdin, the pack created by the previous\n`git pack-objects --filter=<filter-spec>` command as well as the kept\npacks, all prefixed with '^', so that the objects in these packs will be\nomitted from the resulting pack. The result is that only the objects\nfiltered out by the first `git pack-objects` command are in the pack\nresulting from the second `git pack-objects` command.\n\nAs the interactions with kept packs are a bit tricky, a few related\ntests are added.\n\nHelped-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: John Cai <johncai86@gmail.com>\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e4747ec8b5558e7106146fd37501649f577bcfa", "commit_date": "2023-10-02T21:54:30Z", "commit_message": "pack-bitmap-write: rebuild using new bitmap when remapping\n\n`git repack` is about to learn a new `--filter=<filter-spec>` option and\nwe will want to check that this option is incompatible with\n`--write-bitmap-index`.\n\nUnfortunately it appears that a test like:\n\ntest_expect_success '--filter fails with --write-bitmap-index' '\n       test_must_fail \\\n               env GIT_TEST_MULTI_PACK_INDEX_WRITE_BITMAP=0 \\\n               git -C bare.git repack -a -d --write-bitmap-index --filter=blob:none\n'\n\nsometimes fail because when rebuilding bitmaps, it appears that we are\nreusing existing bitmap information. So instead of detecting that some\nobjects are missing and erroring out as it should, the\n`git repack --write-bitmap-index --filter=...` command succeeds.\n\nLet's fix that by making sure we rebuild bitmaps using new bitmaps\ninstead of existing ones.\n\nHelped-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "be315e9a3fe070af60821f01c2bc508457d2c1b2", "commit_date": "2023-10-02T21:54:30Z", "commit_message": "repack: refactor finding pack prefix\n\nCreate a new find_pack_prefix() to refactor code that handles finding\nthe pack prefix from the packtmp and packdir global variables, as we are\ngoing to need this feature again in following commit.\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff8504e4ec5628edddb67f989256b7f2aea6c45d", "commit_date": "2023-10-02T21:54:29Z", "commit_message": "repack: refactor finishing pack-objects command\n\nCreate a new finish_pack_objects_cmd() to refactor duplicated code\nthat handles reading the packfile names from the output of a\n`git pack-objects` command and putting it into a string_list, as well as\ncalling finish_command().\n\nWhile at it, beautify a code comment a bit in the new function.\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "66589f89ab8bf19f79fa9e9ec156bce43ed70e53", "commit_date": "2023-10-02T21:54:29Z", "commit_message": "t/helper: add 'find-pack' test-tool\n\nIn a following commit, we will make it possible to separate objects in\ndifferent packfiles depending on a filter.\n\nTo make sure that the right objects are in the right packs, let's add a\nnew test-tool that can display which packfile(s) a given object is in.\n\nLet's also make it possible to check if a given object is in the\nexpected number of packfiles with a `--check-count <n>` option.\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6cfcabfb9f60369f6fb4d24465a7c98b1d90b34b", "commit_date": "2023-10-02T21:54:29Z", "commit_message": "pack-objects: allow `--filter` without `--stdout`\n\n9535ce7337 (pack-objects: add list-objects filtering, 2017-11-21)\ntaught `git pack-objects` to use `--filter`, but required the use of\n`--stdout` since a partial clone mechanism was not yet in place to\nhandle missing objects. Since then, changes like 9e27beaa23\n(promisor-remote: implement promisor_remote_get_direct(), 2019-06-25)\nand others added support to dynamically fetch objects that were missing.\n\nEven without a promisor remote, filtering out objects can also be useful\nif we can put the filtered out objects in a separate pack, and in this\ncase it also makes sense for pack-objects to write the packfile directly\nto an actual file rather than on stdout.\n\nRemove the `--stdout` requirement when using `--filter`, so that in a\nfollow-up commit, repack can pass `--filter` to pack-objects to omit\ncertain objects from the resulting packfile.\n\nSigned-off-by: John Cai <johncai86@gmail.com>\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4adceb5a299164aad1ef9794cdcbdb232ab10299", "commit_date": "2023-10-02T18:55:42Z", "commit_message": "diff: fix --merge-base with annotated tags\n\nChecking early for OBJ_COMMIT excludes other objects that can be\nresolved to commits, like annotated tags.  If we remove it, annotated\ntags will be resolved and handled just fine by\nlookup_commit_reference(), and if we are given something that can't be\nresolved to a commit, we'll still get a useful error message, e.g.:\n\n> error: object 21ab162211ac3ef13c37603ca88b27e9c7e0d40b is a tree, not a commit\n> fatal: no merge base found\n\nSigned-off-by: Alyssa Ross <hi@alyssa.is>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d0e8084c65cbf949038ae4cc344ac2c2efd77415", "commit_date": "2023-10-02T18:20:00Z", "commit_message": "The fourteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4a0bcc832a276b68f910729dee698bc6050ef0cc", "commit_date": "2023-10-02T18:20:00Z", "commit_message": "Merge branch 'js/doc-status-with-submodules-mark-up-fix'\n\nDocfix.\n\n* js/doc-status-with-submodules-mark-up-fix:\n  Documentation/git-status: add missing line breaks", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5bb67fb7ab035ef399d019440f184aee3608f3e7", "commit_date": "2023-10-02T18:20:00Z", "commit_message": "Merge branch 'jc/unresolve-removal'\n\n\"checkout --merge -- path\" and \"update-index --unresolve path\" did\nnot resurrect conflicted state that was resolved to remove path,\nbut now they do.\n\n* jc/unresolve-removal:\n  checkout: allow \"checkout -m path\" to unmerge removed paths\n  checkout/restore: add basic tests for --merge\n  checkout/restore: refuse unmerging paths unless checking out of the index\n  update-index: remove stale fallback code for \"--unresolve\"\n  update-index: use unmerge_index_entry() to support removal\n  resolve-undo: allow resurrecting conflicted state that resolved to deletion\n  update-index: do not read HEAD and MERGE_HEAD unconditionally", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4ca7a3fd26d0c6214f46f2413c5ba8ed346fea1a", "commit_date": "2023-09-29T22:46:06Z", "commit_message": "diff --stat: set the width defaults in a helper function\n\nExtract the commonly used initialization of the --stat-width=<width>,\n--stat-name-width=<width> and --stat-graph-with=<width> parameters to their\ninternal default values into a helper function, to avoid repeating the same\ninitialization code in a few places.\n\nAdd a couple of tests to additionally cover existing configuration options\ndiff.statNameWidth=<width> and diff.statGraphWidth=<width> when used by\ngit-merge to generate --stat outputs.  This closes the gap that existed\npreviously in the --stat tests, and reduces the chances for having any\nregressions introduced by this commit.\n\nWhile there, perform a small bunch of minor wording tweaks in the improved\nunit test, to improve its test-level consistency a bit.\n\nSigned-off-by: Dragan Simic <dsimic@manjaro.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1bda751739d90e1a94b47397676bcb8eebf16d5", "commit_date": "2023-09-29T22:14:57Z", "commit_message": "parse: separate out parsing functions from config.h\n\nThe files config.{h,c} contain functions that have to do with parsing,\nbut not config.\n\nIn order to further reduce all-in-one headers, separate out functions in\nconfig.c that do not operate on config into its own file, parse.h,\nand update the include directives in the .c files that need only such\nfunctions accordingly.\n\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Jonathan Tan <jonathantanmy@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e16be13cfaf1102340c7816d14cec2009a864faf", "commit_date": "2023-09-29T22:14:56Z", "commit_message": "config: correct bad boolean env value error message\n\nAn incorrectly defined boolean environment value would result in the\nfollowing error message:\n\nbad boolean config value '%s' for '%s'\n\nThis is a misnomer since environment value != config value. Instead of\ncalling git_config_bool() to parse the environment value, mimic the\nfunctionality inside of git_config_bool() but with the correct error\nmessage.\n\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "afd2a1d5f1fc371fe1fda0ed07e0f2f27100fbab", "commit_date": "2023-09-29T22:14:56Z", "commit_message": "wrapper: reduce scope of remove_or_warn()\n\nremove_or_warn() is only used by entry.c and apply.c, but it is\ncurrently declared and defined in wrapper.{h,c}, so it has a scope much\ngreater than it needs. This needlessly large scope also causes wrapper.c\nto need to include object.h, when this file is largely unconcerned with\nGit objects.\n\nMove remove_or_warn() to entry.{h,c}. The file apply.c still has access\nto it, since it already includes entry.h for another reason.\n\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Jonathan Tan <jonathantanmy@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d88e8106e892109f4f4b13312dd026d0a7fcfeec", "commit_date": "2023-09-29T22:14:56Z", "commit_message": "hex-ll: separate out non-hash-algo functions\n\nIn order to further reduce all-in-one headers, separate out functions in\nhex.h that do not operate on object hashes into its own file, hex-ll.h,\nand update the include directives in the .c files that need only such\nfunctions accordingly.\n\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Jonathan Tan <jonathantanmy@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "493f4622739e9b64f24b465b21aa85870dd9dc09", "commit_date": "2023-09-29T16:04:16Z", "commit_message": "The thirteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a03cc4ba1dd8eca619fb46e0fa3cba8b393e1652", "commit_date": "2023-09-29T16:04:16Z", "commit_message": "Merge branch 'ob/am-msgfix'\n\nThe parameters to generate an error message have been corrected.\n\n* ob/am-msgfix:\n  am: fix error message in parse_opt_show_current_patch()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a4eebfadf2da24ba63c9027c1d28e0a9514ed1bd", "commit_date": "2023-09-29T16:04:16Z", "commit_message": "Merge branch 'jk/test-pass-ubsan-options-to-http-test'\n\nUBSAN options were not propagated through the test framework to git\nrun via the httpd, unlike ASAN options, which has been corrected.\n\n* jk/test-pass-ubsan-options-to-http-test:\n  test-lib: set UBSAN_OPTIONS to match ASan", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d15f92e3791d481ae244cb1436da06fe89479641", "commit_date": "2023-09-29T16:04:15Z", "commit_message": "Merge branch 'jc/alias-completion'\n\nThe command line completion script (in contrib/) can be told to\ncomplete aliases by including \": git <cmd> ;\" in the alias to tell\nit that the alias should be completed similar to how \"git <cmd>\" is\ncompleted.  The parsing code for the alias as been loosened to\nallow ';' without an extra space before it.\n\n* jc/alias-completion:\n  completion: loosen and document the requirement around completing alias", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e076f3a23f0b6a8c56389b7ad672602853a91e57", "commit_date": "2023-09-29T16:04:15Z", "commit_message": "Merge branch 'hy/doc-show-is-like-log-not-diff-tree'\n\nDoc update.\n\n* hy/doc-show-is-like-log-not-diff-tree:\n  show doc: redirect user to git log manual instead of git diff-tree", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5cd3f68add3cf24c322f925a5ca05a278bc6c027", "commit_date": "2023-09-29T16:04:15Z", "commit_message": "Merge branch 'kh/range-diff-notes'\n\n\"git range-diff --notes=foo\" compared \"log --notes=foo --notes\" of\nthe two ranges, instead of using just the specified notes tree.\n\n* kh/range-diff-notes:\n  range-diff: treat notes like `log`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0b493d2986ab2664a35a87db04154c795f74d3fd", "commit_date": "2023-09-29T16:04:15Z", "commit_message": "Merge branch 'ds/stat-name-width-configuration'\n\n\"git diff\" learned diff.statNameWidth configuration variable, to\ngive the default width for the name part in the \"--stat\" output.\n\n* ds/stat-name-width-configuration:\n  diff --stat: add config option to limit filename width", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2affeb3cb57ec7124dc37743ace17a46921f8ce0", "commit_date": "2023-09-29T16:04:14Z", "commit_message": "Merge branch 'jk/fsmonitor-unused-parameter'\n\nUnused parameters in fsmonitor related code paths have been marked\nas such.\n\n* jk/fsmonitor-unused-parameter:\n  run-command: mark unused parameters in start_bg_wait callbacks\n  fsmonitor: mark unused hashmap callback parameters\n  fsmonitor/darwin: mark unused parameters in system callback\n  fsmonitor: mark unused parameters in stub functions\n  fsmonitor/win32: mark unused parameter in fsm_os__incompatible()\n  fsmonitor: mark some maybe-unused parameters\n  fsmonitor/win32: drop unused parameters\n  fsmonitor: prefer repo_git_path() to git_pathdup()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2b04c3ce59ee9605c4a193c00c9cc92b384cd1cd", "commit_date": "2023-09-29T16:04:14Z", "commit_message": "Merge branch 'ml/git-gui-exec-path-fix'\n\nFix recent regression in Git-GUI that fails to run hook scripts at\nall.\n\n* ml/git-gui-exec-path-fix:\n  git-gui - use git-hook, honor core.hooksPath\n  git-gui - re-enable use of hook scripts", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c2c349a15c0430a2ef9f858d69d095a00693379c", "commit_date": "2023-09-28T17:49:23Z", "commit_message": "doc: correct the 50 characters soft limit\n\nThe soft limit of the first line of the commit message should be\n\"no more than 50 characters\" or \"50 characters or less\", but not\n\"less than 50 character\".\n\nSigned-off-by: \u8c22\u81f4\u90a6 (XIE Zhibang) <Yeking@Red54.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f259197eea0a3acc48f46748778f33c935476cb", "commit_date": "2023-09-28T14:00:43Z", "commit_message": "commit-graph: report incomplete chains during verification\n\nThe load_commit_graph_chain_fd_st() function will stop loading chains\nwhen it sees an error. But if it has loaded any graph slice at all, it\nwill return it. This is a good thing for normal use (we use what data we\ncan, and this is just an optimization). But it's a bad thing for\n\"commit-graph verify\", which should be careful about finding any\nirregularities. We do complain to stderr with a warning(), but the\nverify command still exits with a successful return code.\n\nThe new tests here cover corruption of both the base and tip slices of\nthe chain. The corruption of the base file already works (it is the\nfirst file we look at, so when we see the error we return NULL). The\n\"tip\" case is what is fixed by this patch (it complains to stderr but\nstill returns the base slice).\n\nLikewise the existing tests for corruption of the commit-graph-chain\nfile itself need to be updated. We already exited non-zero correctly for\nthe \"base\" case, but the \"tip\" case can now do so, too.\n\nNote that this also causes us to adjust a test later in the file that\nsimilarly corrupts a tip (though confusingly the test script calls this\n\"base\"). It checks stderr but erroneously expects the whole \"verify\"\ncommand to exit with a successful code.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7754a565e2e78e4163dbf597bba5fc729cc3bbc7", "commit_date": "2023-09-28T14:00:43Z", "commit_message": "commit-graph: tighten chain size check\n\nWhen we open a commit-graph-chain file, if it's smaller than a single\nentry, we just quietly treat that as ENOENT. That make some sense if the\nfile is truly zero bytes, but it means that \"commit-graph verify\" will\nquietly ignore a file that contains garbage if that garbage happens to\nbe short.\n\nInstead, let's only simulate ENOENT when the file is truly empty, and\notherwise return EINVAL. The normal graph-loading routines don't care,\nbut \"commit-graph verify\" will notice and complain about the difference.\n\nIt's not entirely clear to me that the 0-is-ENOENT case actually happens\nin real life, so we could perhaps just eliminate this special-case\naltogether. But this is how we've always behaved, so I'm preserving it\nin the name of backwards compatibility (though again, it really only\nmatters for \"verify\", as the regular routines are happy to load what\nthey can).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "47d06bb010867cd122f732be93e55a797371570c", "commit_date": "2023-09-28T14:00:43Z", "commit_message": "commit-graph: detect read errors when verifying graph chain\n\nBecause it's OK to not have a graph file at all, the graph_verify()\nfunction needs to tell the difference between a missing file and a real\nerror.  So when loading a traditional graph file, we call\nopen_commit_graph() separately from load_commit_graph_chain_fd_st(), and\ndon't complain if the first one fails with ENOENT.\n\nWhen the function learned about chain files in 3da4b609bb (commit-graph:\nverify chains with --shallow mode, 2019-06-18), we couldn't be as\ncareful, since the only way to load a chain was with\nread_commit_graph_one(), which did both the open/load as a single unit.\nSo we'll miss errors in chain files we load, thinking instead that there\nwas just no chain file at all.\n\nNote that we do still report some of these problems to stderr, as the\nloading function calls error() and warning(). But we'd exit with a\nsuccessful exit code, which is wrong.\n\nWe can fix that by using the recently split open/load functions for\nchains. That lets us treat the chain file just like a single file with\nrespect to error handling here.\n\nAn existing test (from 3da4b609bb) shows off the problem; we were\nexpecting \"commit-graph verify\" to report success, but that makes no\nsense. We did not even verify the contents of the graph data, because we\ncouldn't load it! I don't think this was an intentional exception, but\nrather just the test covering what happened to occur.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2d45710c5d1dc20db0d6c856e9e711dd6a19e18f", "commit_date": "2023-09-28T14:00:43Z", "commit_message": "t5324: harmonize sha1/sha256 graph chain corruption\n\nIn t5324.20, we corrupt a hex character 60 bytes into the graph chain\nfile. Since the file consists of two hash identifiers, one per line, the\ncorruption differs between sha1 and sha256. In a sha1 repository, the\ncorruption is on the second line, and in a sha256 repository, it is on\nthe first.\n\nWe should of course detect the problem with either line. But as the next\nfew patches will show (and fix), that is not the case (in fact, we\ncurrently do not exit non-zero for either line!). And while at the end\nof our series we'll catch all errors, our intermediate states will have\ndiffering behavior between the two hashes.\n\nLet's make sure we test corruption of both the first and second lines,\nand do so consistently with either hash by choosing offsets which are\nalways in the first hash (30 bytes) or in the second (70).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8298b54317772ca28fec2673f59a8c2048552ae6", "commit_date": "2023-09-28T14:00:43Z", "commit_message": "commit-graph: check mixed generation validation when loading chain file\n\nIn read_commit_graph_one(), we call validate_mixed_generation_chain()\nafter loading the graph. Even though we don't check the return value,\nthis has the side effect of clearing the read_generation_data flag,\nwhich is important when working with mixed generation numbers.\n\nBut doing this in load_commit_graph_chain_fd_st() makes more sense:\n\n  1. We are calling it even when we did not load a chain at all, which\n     is pointless (you cannot have mixed generations in a single file).\n\n  2. For now, all callers load the graph via read_commit_graph_one().\n     But the point of factoring out the open/load in the previous commit\n     was to let \"commit-graph verify\" call them separately. So it needs\n     to trigger this function as part of the load.\n\n     Without this patch, the mixed-generation tests in t5324 would start\n     failing on \"git commit-graph verify\" calls, once we switch to using\n     a separate open/load call there.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ed76b4eb25f03f3bec6abad219d4dda651fc30f", "commit_date": "2023-09-28T14:00:43Z", "commit_message": "commit-graph: factor out chain opening function\n\nThe load_commit_graph_chain() function opens the chain file and all of\nthe slices of graph that it points to. If there is no chain file (which\nis a totally normal condition), we return NULL. But if we run into\nerrors with the chain file or loading the actual graph data, we also\nreturn NULL, and the caller cannot tell the difference.\n\nThe caller can check for ENOENT for the unremarkable \"no such file\"\ncase. But I'm hesitant to assume that the rest of the function would\nnever accidentally set errno to ENOENT itself, since it is opening the\nslice files (and that would mean the caller fails to notice a real\nerror).\n\nSo let's break this into two functions: one to open the file, and one to\nactually load it. This matches the interface we provide for the\nnon-chain graph file, which will also come in handy in a moment when we\nfix some bugs in the \"git commit-graph verify\" code.\n\nSome notes:\n\n  - I've kept the \"1 is good, 0 is bad\" return convention (and the weird\n    \"fd\" out-parameter) used by the matching open_commit_graph()\n    function and other parts of the commit-graph code. This is unlike\n    most of the rest of Git (which would just return the fd, with -1 for\n    error), but it makes sense to stay consistent with the adjacent bits\n    of the API here.\n\n  - The existing chain loading function will quietly return if the file\n    is too small to hold a single entry. I've retained that behavior\n    (and explicitly set ENOENT in the opener function) for now, under\n    the notion that it's probably valid (though I'd imagine unusual) to\n    have an empty chain file.\n\nThere are two small behavior changes here, but I think both are strictly\npositive:\n\n  1. The original blindly did a stat() before checking if fopen()\n     succeeded, meaning we were making a pointless extra stat call.\n\n  2. We now use fstat() to check the file size. The previous code using\n     a regular stat() on the pathname meant we could technically race\n     with somebody updating the chain file, and end up with a size that\n     does not match what we just opened with fopen(). I doubt anybody\n     ever hit this in practice, but it may have caused an out-of-bounds\n     read.\n\nWe'll retain the load_commit_graph_chain() function which does both the\nopen and reading steps (most existing callers do not care about seeing\nerrors anyway, since loading commit-graphs is optimistic).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9eb5419799f08402ee3bd185c2d2c50ded669b06", "commit_date": "2023-09-26T17:17:56Z", "commit_message": "bulk-checkin: only support blobs in index_bulk_checkin\n\nAs the code is written today index_bulk_checkin only accepts blobs.\nRemove the enum object_type parameter and rename index_bulk_checkin to\nindex_blob_bulk_checkin, index_stream to index_blob_stream,\ndeflate_to_pack to deflate_blob_to_pack, stream_to_pack to\nstream_blob_to_pack, to make this explicit.\n\nNot supporting commits, tags, or trees has no downside as it is not\ncurrently supported now, and commits, tags, and trees being smaller by\ndesign do not have the problem that the problem that index_bulk_checkin\nwas built to solve.\n\nBefore we start adding code to support the hash function transition\nsupporting additional objects types in index_bulk_checkin has no real\nadditional cost, just an extra function parameter to know what the\nobject type is.  Once we begin the hash function transition this is not\nthe case.\n\nThe hash function transition document specifies that a repository with\ncompatObjectFormat enabled will compute and store both the SHA-1 and\nSHA-256 hash of every object in the repository.\n\nWhat makes this a challenge is that it is not just an additional hash\nover the same object.  Instead the hash function transition document\nspecifies that the compatibility hash (specified with\ncompatObjectFormat) be computed over the equivalent object that another\ngit repository whose storage hash (specified with objectFormat) would\nstore.  When comparing equivalent repositories built with different\nstorage hash functions, the oids embedded in objects used to refer to\nother objects differ and the location of signatures within objects\ndiffer.\n\nAs blob objects have neither oids referring to other objects nor stored\nsignatures their storage hash and their compatibility hash are computed\nover the same object.\n\nThe other kinds of objects: trees, commits, and tags, all store oids\nreferring to other objects.  Signatures are stored in commit and tag\nobjects.  As oids and the tags to store signatures are not the same size\nin repositories built with different storage hashes the size of the\nequivalent objects are also different.\n\nA version of index_bulk_checkin that supports more than just blobs when\ncomputing both the SHA-1 and the SHA-256 of every object added would\nneed a different, and more expensive structure.  The structure is more\nexpensive because it would be required to temporarily buffering the\nequivalent object the compatibility hash needs to be computed over.\n\nA temporary object is needed, because before a hash over an object can\ncomputed it's object header needs to be computed.  One of the members of\nthe object header is the entire size of the object.  To know the size of\nan equivalent object an entire pass over the original object needs to be\nmade, as trees, commits, and tags are composed of a variable number of\nvariable sized pieces.  Unfortunately there is no formula to compute the\nsize of an equivalent object from just the size of the original object.\n\nAvoid all of those future complications by limiting index_bulk_checkin\nto only work on blobs.\n\nInspired-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "872976c37ef6314d0480e8487a97ad5910d31148", "commit_date": "2023-09-25T23:17:28Z", "commit_message": "unicode: update the width tables to Unicode 15.1\n\nUnicode 15.1 has been announced on 2023-09-12 [0], so update the\ncharacter width tables to the new version.\n\n[0] http://blog.unicode.org/2023/09/announcing-unicode-standard-version-151.html\n\nSigned-off-by: Beat Bolli <dev+git@drbeat.li>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a3d2e83a17d6ab9c50d14cfdff9f70a69de5c4c4", "commit_date": "2023-09-25T21:52:34Z", "commit_message": "ref-filter: add mailmap support\n\nAdd mailmap support to ref-filter formats which are similar in\npretty. This support is such that the following pretty placeholders are\nequivalent to the new ref-filter atoms:\n\n\t%aN = authorname:mailmap\n\t%cN = committername:mailmap\n\n\t%aE = authoremail:mailmap\n\t%aL = authoremail:mailmap,localpart\n\t%cE = committeremail:mailmap\n\t%cL = committeremail:mailmap,localpart\n\nAdditionally, mailmap can also be used with \":trim\" option for email by\ndoing something like \"authoremail:mailmap,trim\".\n\nThe above also applies for the \"tagger\" atom, that is,\n\"taggername:mailmap\", \"taggeremail:mailmap\", \"taggeremail:mailmap,trim\"\nand \"taggername:mailmap,localpart\".\n\nThe functionality of \":trim\" and \":localpart\" remains the same. That is,\n\":trim\" gives the email, but without the angle brackets and \":localpart\"\ngives the part of the email before the '@' character (if such a\ncharacter is not found then we directly grab everything between the\nangle brackets).\n\nMentored-by: Christian Couder <christian.couder@gmail.com>\nMentored-by: Hariom Verma <hariom18599@gmail.com>\nSigned-off-by: Kousik Sanagavarapu <five231003@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0144f0de77edc96c6cd72ab9d50a68fc4c9c092e", "commit_date": "2023-09-25T21:52:33Z", "commit_message": "t/t6300: introduce test_bad_atom\n\nIntroduce a new function \"test_bad_atom\", which is similar to\n\"test_atom()\" but should be used to check whether the correct error\nmessage is shown on stderr.\n\nLike \"test_atom\", the new function takes three arguments. The three\narguments specify the ref, the format and the expected error message\nrespectively, with an optional fourth argument for tweaking\n\"test_expect_*\" (which is by default \"success\").\n\nMentored-by: Christian Couder <christian.couder@gmail.com>\nMentored-by: Hariom Verma <hariom18599@gmail.com>\nSigned-off-by: Kousik Sanagavarapu <five231003@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "04830eb762c83609a63805716daedb36014f6b6c", "commit_date": "2023-09-25T21:52:33Z", "commit_message": "t/t6300: cleanup test_atom\n\nPreviously, when the executable part of \"test_expect_{success,failure}\"\n(inside \"test_atom\") got \"eval\"ed, it would have been syntactically\nincorrect if the second argument ($2, which is the format) to \"test_atom\"\nwere enclosed in single quotes because the $variables would get\ninterpolated even before the arguments to \"test_expect_{success,failure}\"\nare formed.\n\nSo fix this and also some style issues along the way.\n\nHelped-by: Junio C Hamano <gitster@pobox.com>\nMentored-by: Christian Couder <christian.couder@gmail.com>\nMentored-by: Hariom Verma <hariom18599@gmail.com>\nSigned-off-by: Kousik Sanagavarapu <five231003@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c13d2adf8b4e5e364224b97c3ec6cbe29a7f23ed", "commit_date": "2023-09-25T17:12:49Z", "commit_message": "coverity: allow running on macOS\n\nFor completeness' sake, let's add support for submitting macOS builds to\nCoverity Scan.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d3c3ffa6249adce1f007ac43374cb540524fe767", "commit_date": "2023-09-25T17:12:49Z", "commit_message": "coverity: support building on Windows\n\nBy adding the repository variable `ENABLE_COVERITY_SCAN_ON_OS` with a\nvalue, say, `[\"windows-latest\"]`, this GitHub workflow now runs on\nWindows, allowing to analyze Windows-specific issues.\n\nThis allows, say, the Git for Windows fork to submit Windows builds to\nCoverity Scan instead of Linux builds.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7bc49e8f553c0f76cccd142c33715ee8f1b15811", "commit_date": "2023-09-25T17:12:49Z", "commit_message": "coverity: allow overriding the Coverity project\n\nBy default, the builds are submitted to the `git` project at\nhttps://scan.coverity.com/projects/git.\n\nThe Git for Windows project would like to use this workflow, too,\nthough, and needs the builds to be submitted to the `git-for-windows`\nCoverity project.\n\nTo that end, allow configuring the Coverity project name via the\nrepository variable, you guessed it, `COVERITY_PROJECT`. The default if\nthat variable is not configured or has an empty value is still `git`.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "002e5e9ad163f30e1664a2bf37e45097c8ab6be5", "commit_date": "2023-09-25T17:12:48Z", "commit_message": "coverity: cache the Coverity Build Tool\n\nIt would add a 1GB+ download for every run, better cache it.\n\nThis is inspired by the GitHub Action `vapier/coverity-scan-action`,\nhowever, it uses the finer-grained `restore`/`save` method to be able to\ncache the Coverity Build Tool even if an unrelated step in the GitHub\nworkflow fails later on.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a56b6230d0b1901c01e355320c7afdbf5a6ae01b", "commit_date": "2023-09-25T17:12:48Z", "commit_message": "ci: add a GitHub workflow to submit Coverity scans\n\nCoverity is a static analysis tool that detects and generates reports on\nvarious security and code quality issues.\n\nIt is particularly useful when diagnosing memory safety issues which may\nbe used as part of exploiting a security vulnerability.\n\nCoverity's website provides a service that accepts \"builds\" (which\ncontains the object files generated during a standard build as well as a\ndatabase generated by Coverity's scan tool).\n\nLet's add a GitHub workflow to automate all of this. To avoid running it\nwithout appropriate Coverity configuration (e.g. the token required to\nuse Coverity's services), the job only runs when the repository variable\n\"ENABLE_COVERITY_SCAN_FOR_BRANCHES\" has been configured accordingly (see\nhttps://docs.github.com/en/actions/learn-github-actions/variables for\ndetails how to configure repository variables): It is expected to be a\nvalid JSON array of branch strings, e.g. `[\"main\", \"next\"]`.\n\nIn addition, this workflow requires two repository secrets:\n\n- COVERITY_SCAN_EMAIL: the email to send the report to, and\n\n- COVERITY_SCAN_TOKEN: the Coverity token (look in the Project Settings\n  tab of your Coverity project).\n\nNote: The initial version of this patch used\n`vapier/coverity-scan-action` to benefit from that Action's caching of\nthe Coverity tool, which is rather large. Sadly, that Action only\nsupports Linux, and we want to have the option of building on Windows,\ntoo. Besides, in the meantime Coverity requires `cov-configure` to be\nrunantime, and that Action was not adjusted accordingly, i.e. it seems\nnot to be maintained actively. Therefore it would seem prudent to\nimplement the steps manually instead of using that Action.\n\nInitial-patch-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f97c8b1e00297570a390789be84513f435d5ea52", "commit_date": "2023-09-25T16:59:04Z", "commit_message": "revision: make pseudo-opt flags read via stdin behave consistently\n\nWhen reading revisions from stdin via git-rev-list(1)'s `--stdin` option\nthen these revisions never honor flags like `--not` which have been\npassed on the command line. Thus, an invocation like e.g. `git rev-list\n--all --not --stdin` will not treat all revisions read from stdin as\nuninteresting. While this behaviour may be surprising to a user, it's\nbeen this way ever since it has been introduced via 42cabc341c4 (Teach\nrev-list an option to read revs from the standard input., 2006-09-05).\n\nWith that said, in c40f0b7877 (revision: handle pseudo-opts in `--stdin`\nmode, 2023-06-15) we have introduced a new mode to read pseudo opts from\nstandard input where this behaviour is a lot more confusing. If you pass\n`--not` via stdin, it will:\n\n    - Influence subsequent revisions or pseudo-options passed on the\n      command line.\n\n    - Influence pseudo-options passed via standard input.\n\n    - _Not_ influence normal revisions passed via standard input.\n\nThis behaviour is extremely inconsistent and bound to cause confusion.\n\nWhile it would be nice to retroactively change the behaviour for how\n`--not` and `--stdin` behave together, chances are quite high that this\nwould break existing scripts that expect the current behaviour that has\nbeen around for many years by now. This is thus not really a viable\noption to explore to fix the inconsistency.\n\nInstead, we change the behaviour of how pseudo-opts read via standard\ninput influence the flags such that the effect is fully localized. With\nthis change, when reading `--not` via standard input, it will:\n\n    - _Not_ influence subsequent revisions or pseudo-options passed on\n      the command line, which is a change in behaviour.\n\n    - Influence pseudo-options passed via standard input.\n\n    - Influence normal revisions passed via standard input, which is a\n      change in behaviour.\n\nThus, all flags read via standard input are fully self-contained to that\nstandard input, only.\n\nWhile this is a breaking change as well, the behaviour has only been\nrecently introduced with Git v2.42.0. Furthermore, the current behaviour\ncan be regarded as a simple bug. With that in mind it feels like the\nright thing to retroactively change it and make the behaviour sane.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nReported-by: Christian Couder <christian.couder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bcb6cae2966cc407ca1afc77413b3ef11103c175", "commit_date": "2023-09-23T00:01:37Z", "commit_message": "The twelfth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa7a594daca938802bcd226713539e6a7f403095", "commit_date": "2023-09-23T00:01:37Z", "commit_message": "Merge branch 'tb/send-email-extract-valid-address-error-message-fix'\n\nAn error message given by \"git send-email\" when given a malformed\naddress did not give correct information, which has been corrected.\n\n* tb/send-email-extract-valid-address-error-message-fix:\n  git-send-email.perl: avoid printing undef when validating addresses", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8ed1eee410a353ccf8217d1ef63b8eca8465a892", "commit_date": "2023-09-23T00:01:37Z", "commit_message": "Merge branch 'ch/clean-docfix'\n\nTypofix.\n\n* ch/clean-docfix:\n  git-clean doc: fix \"without do cleaning\" typo", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b4628577033146a318518ce1f1bf97e6a2f7a25", "commit_date": "2023-09-23T00:01:37Z", "commit_message": "Merge branch 'eg/config-type-path-docfix'\n\nTypofix.\n\n* eg/config-type-path-docfix:\n  git-config: fix misworded --type=path explanation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7a90d1eb4d40dbddd0a88a925cf1d4de4462d69f", "commit_date": "2023-09-23T00:01:36Z", "commit_message": "Merge branch 'jk/redact-h2h3-headers-fix'\n\nHTTP Header redaction code has been adjusted for a newer version of\ncURL library that shows its traces differently from earlier\nversions.\n\n* jk/redact-h2h3-headers-fix:\n  http: update curl http/2 info matching for curl 8.3.0\n  http: factor out matching of curl http/2 trace lines", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb6e6e06d5b7de6aacae6268712f3733d51cb38e", "commit_date": "2023-09-23T00:01:36Z", "commit_message": "Merge branch 'jk/ort-unused-parameter-cleanups'\n\nCode clean-up.\n\n* jk/ort-unused-parameter-cleanups:\n  merge-ort: lowercase a few error messages\n  merge-ort: drop unused \"opt\" parameter from merge_check_renames_reusable()\n  merge-ort: drop unused parameters from detect_and_process_renames()\n  merge-ort: stop passing \"opt\" to read_oid_strbuf()\n  merge-ort: drop custom err() function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5c0f9933ece11cf194cf33d7322aa798eb6375c3", "commit_date": "2023-09-23T00:01:36Z", "commit_message": "Merge branch 'tb/repack-existing-packs-cleanup'\n\nThe code to keep track of existing packs in the repository while\nrepacking has been refactored.\n\n* tb/repack-existing-packs-cleanup:\n  builtin/repack.c: extract common cruft pack loop\n  builtin/repack.c: avoid directly inspecting \"util\"\n  builtin/repack.c: store existing cruft packs separately\n  builtin/repack.c: extract `has_existing_non_kept_packs()`\n  builtin/repack.c: extract redundant pack cleanup for existing packs\n  builtin/repack.c: extract redundant pack cleanup for --geometric\n  builtin/repack.c: extract marking packs for deletion\n  builtin/repack.c: extract structure to store existing packs", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a8bb340f2d73636ab739fbe457943e00b322376", "commit_date": "2023-09-23T00:01:36Z", "commit_message": "Merge branch 'la/trailer-cleanups'\n\nCode clean-up.\n\nKeep only the first three clean-ups, and discard the rest to be replaced later.\ncf. <owly1qetjqo1.fsf@fine.c.googlers.com>\ncf. <owlyzg1dsswr.fsf@fine.c.googlers.com>\n\n* la/trailer-cleanups:\n  trailer: split process_command_line_args into separate functions\n  trailer: split process_input_file into separate pieces\n  trailer: separate public from internal portion of trailer_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38a15f4755f257ca89535b73e0f267ea4df7d17f", "commit_date": "2023-09-22T22:27:51Z", "commit_message": "Documentation/git-status: add missing line breaks\n\nSigned-off-by: Josh Soref <jsoref@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "252d693797912ddb2684733160170f0408b73274", "commit_date": "2023-09-21T21:10:36Z", "commit_message": "test-lib: set UBSAN_OPTIONS to match ASan\n\nFor a long time we have used ASAN_OPTIONS to set abort_on_error. This is\nimportant because we want to notice detected problems even in programs\nwhich are expected to fail. But we never did the same for UBSAN_OPTIONS.\nThis means that our UBSan test suite runs might silently miss some\ncases.\n\nIt also causes a more visible effect, which is that t4058 complains\nabout unexpected \"fixes\" (and this is how I noticed the issue):\n\n  $ make SANITIZE=undefined CC=gcc && (cd t && ./t4058-*)\n  ...\n  ok 8 - git read-tree does not segfault # TODO known breakage vanished\n  ok 9 - reset --hard does not segfault # TODO known breakage vanished\n  ok 10 - git diff HEAD does not segfault # TODO known breakage vanished\n\nThe tests themselves aren't that interesting. We have a known bug where\nthese programs segfault, and they do when compiled without sanitizers.\nWith UBSan, when the test runs:\n\n  test_might_fail git read-tree --reset base\n\nit gets:\n\n  cache-tree.c:935:9: runtime error: member access within misaligned address 0x5a5a5a5a5a5a5a5a for type 'struct cache_entry', which requires 8 byte alignment\n\nSo that's garbage memory which would _usually_ cause us to segfault, but\nUBSan catches it and complains first about the alignment. That makes\nsense, but the weird thing is that UBSan then exits instead of aborting,\nso our test_might_fail call considers that an acceptable outcome and the\ntest \"passes\".\n\nCuriously, this historically seems to have aborted, because I've run\n\"make test\" with UBSan many times (and so did our CI) and we never saw\nthe problem. Even more curiously, I see an abort if I use clang with\nASan and UBSan together, like:\n\n  # this aborts!\n  make SANITIZE=undefined,address CC=clang\n\nBut not with just UBSan, and not with both when used with gcc:\n\n  # none of these do\n  make SANITIZE=undefined CC=gcc\n  make SANITIZE=undefined CC=clang\n  make SANITIZE=undefined,address CC=gcc\n\nLikewise moving to older versions of gcc (I tried gcc-11 and gcc-12 on\nmy Debian system) doesn't abort. Nor does moving around in Git's\nhistory. Neither this test nor the relevant code have been touched in a\nwhile, and going back to v2.41.0 produces the same outcome (even though\nmany UBSan CI runs have passed in the meantime).\n\nSo _something_ changed on my system (and likely will soon on other\npeople's, since this is stock Debian unstable), but I didn't track\nit further. I don't know why it ever aborted in the past, but we\ndefinitely should be explicit here and tell UBSan what we want to\nhappen.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "43c8a30d150ecede9709c1f2527c8fba92c65f40", "commit_date": "2023-08-21T16:34:58Z", "commit_message": "Git 2.42\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "915e51b74eda1649b1066d191a0b47cdfbb63249", "commit_date": "2023-08-21T16:27:44Z", "commit_message": "Merge branch 'jk/function-pointer-mismatches-fix' (early part)\n\nFix a minor regression that some compiler might notice.\n\n* 'jk/function-pointer-mismatches-fix' (early part):\n  fsck: use enum object_type for fsck_walk callback", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5a50dd7edac36c4c2853690cd2c8e84127e29613", "commit_date": "2023-08-21T15:43:46Z", "commit_message": "Merge tag 'l10n-2.42.0-rnd2' of https://github.com/git-l10n/git-po\n\nl10n-2.42.0-rnd2\n\n* tag 'l10n-2.42.0-rnd2' of https://github.com/git-l10n/git-po:\n  l10n: zh_TW.po: Git 2.42\n  l10n: zh_CN: 2.42.0 round 2\n  l10n: zh_CN: v2.42.0 round 1\n  l10n: Update German translation\n  l10n: Update Catalan translation\n  l10n: tr: git 2.42.0\n  l10n: fr v2.42.0 rnd 2\n  l10n: fr v2.42.0 rnd 1\n  l10n: sv.po: Update Swedish translation 5549t0f0u\n  l10n: uk: update translation (2.42.0)\n  l10n: po-id for 2.42 (round 1)\n  l10n: ru.po: update Russian translation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1f87c2148b025a9c664e64db17205783ef2991c", "commit_date": "2023-08-20T23:05:38Z", "commit_message": "Merge branch 'po-id' of github.com:bagasme/git-po\n\n* 'po-id' of github.com:bagasme/git-po:\n  l10n: po-id for 2.42 (round 1)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e2dff212aaef6d1babf9735d2a2f583e517362a", "commit_date": "2023-08-20T14:01:37Z", "commit_message": "l10n: zh_TW.po: Git 2.42\n\nCo-authored-by: Lumynous <lumynou5.tw@gmail.com>\nSigned-off-by: Yi-Jyun Pan <pan93412@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bbeddee5d36dfa3fab16ccd0b78dcdcf66c3a99", "commit_date": "2023-08-20T04:17:32Z", "commit_message": "fsck: use enum object_type for fsck_walk callback\n\nWe switched the function interface for fsck callbacks in a1aad71601\n(fsck.h: use \"enum object_type\" instead of \"int\", 2021-03-28). However,\nwe accidentally flipped the type back to \"int\" as part of 0b4e9013f1\n(fsck: mark unused parameters in various fsck callbacks, 2023-07-03).\nThe mistake happened because that commit was written before a1aad71601\nand rebased forward, and I screwed up while resolving the conflict.\n\nCuriously, the compiler does not warn about this mismatch, at least not\nwhen using gcc and clang on Linux (nor in any of our CI environments).\nBased on 28abf260a5 (builtin/fsck.c: don't conflate \"int\" and \"enum\" in\ncallback, 2021-06-01), I'd guess that this would cause the AIX xlc\ncompiler to complain. I noticed because clang-18's UBSan now identifies\nmis-matched function calls at runtime, and does complain of this case\nwhen running the test suite.\n\nI'm not entirely clear on whether this mismatch is a problem in\npractice. Compilers are certainly free to make enums smaller than \"int\"\nif they don't need the bits, but I suspect that they have to promote\nback to int for function calls (though I didn't dig in the standard, and\nI won't be surprised if I'm simply wrong and the real-world impact would\ndepend on the ABI).\n\nRegardless, switching it back to enum is obviously the right thing to do\nhere; the switch to \"int\" was simply a mistake.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3cf978718f7ae720c7f743085e20abe48bd99b27", "commit_date": "2023-08-19T13:09:31Z", "commit_message": "Merge branch 'l10n-de-2.42' of github.com:ralfth/git\n\n* 'l10n-de-2.42' of github.com:ralfth/git:\n  l10n: Update German translation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6fb0e532d522c278ad15b6e55f5467f2f6d8d477", "commit_date": "2023-08-19T13:08:22Z", "commit_message": "Merge branch 'catalan' of github.com:Softcatala/git-po\n\n* 'catalan' of github.com:Softcatala/git-po:\n  l10n: Update Catalan translation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d731a52e4dc7b6b429339bf47382d0b68fe01018", "commit_date": "2023-08-19T13:07:47Z", "commit_message": "Merge branch 'update-uk-l10n' of github.com:arkid15r/git-ukrainian-l10n\n\n* 'update-uk-l10n' of github.com:arkid15r/git-ukrainian-l10n:\n  l10n: uk: update translation (2.42.0)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c04e26683f8fbeff8c934794006fa64ab6aaead7", "commit_date": "2023-08-19T13:07:03Z", "commit_message": "Merge branch 'tl/zh_CN_2.42.0_rnd1' of github.com:dyrone/git\n\n* 'tl/zh_CN_2.42.0_rnd1' of github.com:dyrone/git:\n  l10n: zh_CN: 2.42.0 round 2\n  l10n: zh_CN: v2.42.0 round 1", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7fdd36c22bd1ef4ae90dc3e7df1f560e2f06334a", "commit_date": "2023-08-19T13:05:00Z", "commit_message": "Merge branch 'master' of github.com:nafmo/git-l10n-sv\n\n* 'master' of github.com:nafmo/git-l10n-sv:\n  l10n: sv.po: Update Swedish translation 5549t0f0u", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d0d403b8bc33b677e667f68d662ad7b6d2b191d8", "commit_date": "2023-08-19T13:04:09Z", "commit_message": "Merge branch 'l10n-tr' of github.com:bitigchi/git-po\n\n* 'l10n-tr' of github.com:bitigchi/git-po:\n  l10n: tr: git 2.42.0", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9441efe212bcf46a7695035a0c14e03c792c95c6", "commit_date": "2023-08-18T11:30:03Z", "commit_message": "l10n: zh_CN: 2.42.0 round 2\n\nSigned-off-by: Teng Long <dyroneteng@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb9c8863346dc4894c51654f24b2f4fa44d358e7", "commit_date": "2023-08-18T11:29:01Z", "commit_message": "l10n: zh_CN: v2.42.0 round 1\n\nSigned-off-by: Teng Long <dyroneteng@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f9972720e9a405e4f6924a7cde0ed5880687f4d0", "commit_date": "2023-08-17T22:50:05Z", "commit_message": "Merge branch 'ps/revision-stdin-with-options'\n\nTypofix to documentation added during this cycle.\n\n* ps/revision-stdin-with-options:\n  rev-list-options: fix typo in `--stdin` documentation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "62ce3dcd676f24f3acbc69a4029f2a2f5cd75dc0", "commit_date": "2023-08-17T22:50:05Z", "commit_message": "Merge branch 'sa/doc-ls-remote'\n\nMark-up fix to documentation added during this cycle.\n\n* sa/doc-ls-remote:\n  show-ref doc: fix carets in monospace", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa43131a0990e264eca652fed3351fcb9a99e7f8", "commit_date": "2023-08-17T22:50:05Z", "commit_message": "Merge branch 'tl/notes-separator'\n\nTypo/grammofix to documentation added during this cycle.\n\n* tl/notes-separator:\n  notes doc: tidy up `--no-stripspace` paragraph\n  notes doc: split up run-on sentences", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a1d7c65007727565d75e2535d3e03f5f6c694864", "commit_date": "2023-08-17T15:00:36Z", "commit_message": "l10n: Update German translation\n\nSigned-off-by: Ralf Thielow <ralf.thielow@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c81f1a167659ce0634fdd1dcdb43c2697b546151", "commit_date": "2023-08-16T18:42:54Z", "commit_message": "rev-list-options: fix typo in `--stdin` documentation\n\nWith `--stdin`, we read *from* standard input, not *for*.\n\nSigned-off-by: Martin \u00c5gren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "18c4aac0dd33eca76607b54d347932d6ec655056", "commit_date": "2023-08-16T18:40:10Z", "commit_message": "show-ref doc: fix carets in monospace\n\nWhen commit 00bf685975 (show-ref doc: update for internal consistency,\n2023-05-19) switched from double quotes to backticks around our {caret}\nmacro, we started rendering \"{caret}\" literally. Fix this by replacing\nby a \"^\" character.\n\nSigned-off-by: Martin \u00c5gren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a6e1ad80bdf5d09cb484e77cc4bfffdd9a15bdf", "commit_date": "2023-08-16T18:37:25Z", "commit_message": "notes doc: tidy up `--no-stripspace` paragraph\n\nWhere we document the `--no-stripspace` option, remove a superfluous\n\"For\" to fix the grammar. Mark option names and command names using\n`backticks` to set them in monospace.\n\nSigned-off-by: Martin \u00c5gren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "95b6ae9d747ed52912dec95fe397b11f0a5383ec", "commit_date": "2023-08-16T18:36:36Z", "commit_message": "notes doc: split up run-on sentences\n\nWhen commit c4e2aa7d45 (notes.c: introduce \"--[no-]stripspace\" option,\n2023-05-27) mentioned the new `--no-stripspace` in the documentation for\n`-m` and `-F`, it created run-on sentences. It also used slightly\ndifferent language in the two sections for no apparent reason. Split the\nsentences in two to improve readability, and while touching the two\nsites, make them more similar.\n\nSigned-off-by: Martin \u00c5gren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8a7795b7ae5389e74fdd386a934cb16b05c9e4d", "commit_date": "2023-08-16T16:25:02Z", "commit_message": "l10n: Update Catalan translation\n\nSigned-off-by: Jordi Mas <jmas@softcatala.org>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d9dec13dde48c37d3c65305b3f8e5e4199a632bd", "commit_date": "2023-08-16T11:40:44Z", "commit_message": "l10n: tr: git 2.42.0\n\nSigned-off-by: Emir SARI <emir_sari@icloud.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "87afb88801a89267e5cfe36c9f3923279dfc464b", "commit_date": "2023-08-16T09:50:23Z", "commit_message": "l10n: fr v2.42.0 rnd 2\n\nSigned-off-by: Jean-No\u00ebl Avila <jn.avila@free.fr>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f846e08312d0e3d7eeda106f63eaf131e8af0c2c", "commit_date": "2023-08-16T09:48:16Z", "commit_message": "l10n: fr v2.42.0 rnd 1\n\nSigned-off-by: Jean-No\u00ebl Avila <jn.avila@free.fr>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b90a4a25e630cf40ed295e82f58306a309bbf76d", "commit_date": "2023-08-16T06:42:51Z", "commit_message": "l10n: sv.po: Update Swedish translation 5549t0f0u\n\nSigned-off-by: Peter Krefting <peter@softwolves.pp.se>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5bf602fc3bc2159762bbce19d7c7a587c1386743", "commit_date": "2023-08-16T01:55:13Z", "commit_message": "l10n: uk: update translation (2.42.0)\n\nCo-authored-by: Kate Golovanova <kate@kgthreads.com>\nSigned-off-by: Arkadii Yakovets <ark@cho.red>\nSigned-off-by: Kate Golovanova <kate@kgthreads.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "62a26b36bd9bf76feb6940e2bee732bd62b429f8", "commit_date": "2023-08-15T23:24:56Z", "commit_message": "Merge branch 'master' of github.com:git/git\n\n* 'master' of github.com:git/git: (34 commits)\n  Git 2.42-rc2\n  t4053: avoid writing to unopened pipe\n  t4053: avoid race when killing background processes\n  Git 2.42-rc1\n  git maintenance: avoid console window in scheduled tasks on Windows\n  win32: add a helper to run `git.exe` without a foreground window\n  t9001: remove excessive GIT_SEND_EMAIL_NOTTY=1\n  mv: handle lstat() failure correctly\n  parse-options: disallow negating OPTION_SET_INT 0\n  repack: free geometry struct\n  send-email: avoid creating more than one Term::ReadLine object\n  send-email: drop FakeTerm hack\n  t0040: declare non-tab indentation to be okay in this script\n  advice: handle \"rebase\" in error_resolve_conflict()\n  A few more topics before -rc1\n  mailmap: change primary address for Glen Choo\n  gitignore: ignore clangd .cache directory\n  docs: update when `git bisect visualize` uses `gitk`\n  compat/mingw: implement a native locate_in_PATH()\n  run-command: conditionally define locate_in_PATH()\n  ...", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f1ed9d7dc0e49dc1a044941d821c9d2342313c26", "commit_date": "2023-08-15T17:20:02Z", "commit_message": "Git 2.42-rc2\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f9fe84b5a2a4055fdc2d272e3593c3f91db41626", "commit_date": "2023-08-15T17:19:47Z", "commit_message": "Merge branch 'pw/diff-no-index-from-named-pipes'\n\nTest updates.\n\n* pw/diff-no-index-from-named-pipes:\n  t4053: avoid writing to unopened pipe\n  t4053: avoid race when killing background processes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e12aaa7ceb83c9229b392079ed9e38c36e82b81", "commit_date": "2023-08-15T17:19:47Z", "commit_message": "Merge branch 'st/mv-lstat-fix'\n\nCorrect use of lstat() that assumed a failing call would not\nclobber the statbuf.\n\n* st/mv-lstat-fix:\n  mv: handle lstat() failure correctly", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cecd6a5ffce2c35f18e8ac537c9e2f71ac99932b", "commit_date": "2023-08-15T17:19:47Z", "commit_message": "Merge branch 'jc/send-email-pre-process-fix'\n\nTest fix.\n\n* jc/send-email-pre-process-fix:\n  t9001: remove excessive GIT_SEND_EMAIL_NOTTY=1", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "32f4fa8d3be86a00188aa4c4af1cd375e25e4558", "commit_date": "2023-08-15T17:19:47Z", "commit_message": "Merge branch 'ds/maintenance-on-windows-fix'\n\nWindows updates.\n\n* ds/maintenance-on-windows-fix:\n  git maintenance: avoid console window in scheduled tasks on Windows\n  win32: add a helper to run `git.exe` without a foreground window", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc6bba66bc1de0296b7e452499b0ccd8e4c65b18", "commit_date": "2023-08-14T20:26:41Z", "commit_message": "Merge branch 'js/allow-t4000-to-be-indented-with-spaces'\n\nFile attribute update.\n\n* js/allow-t4000-to-be-indented-with-spaces:\n  t0040: declare non-tab indentation to be okay in this script", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc71d024adbb000e692cbd06cb1a3195514ec771", "commit_date": "2023-08-14T20:26:41Z", "commit_message": "Merge branch 'jk/send-email-with-new-readline'\n\nAdjust to newer Term::ReadLine to prevent it from breaking\nthe interactive prompt code in send-email.\n\n* jk/send-email-with-new-readline:\n  send-email: avoid creating more than one Term::ReadLine object\n  send-email: drop FakeTerm hack", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6df312ad31e6b40e93ea2b1b6b1dc452db7cc0a1", "commit_date": "2023-08-14T20:26:40Z", "commit_message": "Merge branch 'jk/repack-leakfix'\n\nLeakfix.\n\n* jk/repack-leakfix:\n  repack: free geometry struct", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aea6c0531cc97af2054455dcf4f39bd904dafb50", "commit_date": "2023-08-14T20:26:40Z", "commit_message": "Merge branch 'rs/parse-opt-forbid-set-int-0-without-noneg'\n\nDeveloper support to detect meaningless combination of options.\n\n* rs/parse-opt-forbid-set-int-0-without-noneg:\n  parse-options: disallow negating OPTION_SET_INT 0", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f12cb5052d83f5477f7311ccf00b4249dc6d500b", "commit_date": "2023-08-14T20:26:40Z", "commit_message": "Merge branch 'ob/rebase-conflict-advice-i18n-fix'\n\ni18n coverage improvement and avoidance of sentence lego.\n\n* ob/rebase-conflict-advice-i18n-fix:\n  advice: handle \"rebase\" in error_resolve_conflict()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5cb1e3f093986815945b85e61de112b8e3ccdd6", "commit_date": "2023-08-13T23:30:36Z", "commit_message": "t4053: avoid writing to unopened pipe\n\nThis fixes an occasional hang I see when running t4053 with\n--verbose-log using dash.\n\nCommit 1e3f26542a (diff --no-index: support reading from named pipes,\n2023-07-05) added a test that \"diff --no-index\" will complain when\ncomparing a named pipe and a directory. The minimum we need to test this\nis to mkfifo the pipe, and then run \"git diff --no-index pipe some_dir\".\nBut the test does one thing more: it spawns a background shell process\nthat opens the pipe for writing, like this:\n\n        {\n                (>pipe) &\n        } &&\n\nThis extra writer _could_ be useful if Git misbehaves and tries to open\nthe pipe for reading. Without the writer, Git would block indefinitely\nand the test would never end. But since we do not have such a bug, Git\ndoes not open the pipe and it is the writing process which will block\nindefinitely, since there are no readers. The test addresses this by\nrunning \"kill $!\" in a test_when_finished block. Since the writer should\nbe blocking forever, this kill command will reliably find it waiting.\n\nHowever, this seems to be somewhat racy, in that the writing process\nsometimes hangs around even after the \"kill\". In a normal run of the\ntest script without options, this doesn't have any effect; the\nmain test script completes anyway. But with --verbose-log, we spawn a\n\"tee\" process that reads the script output, and it won't end until all\ndescriptors pointing to its input pipe are closed. And the background\nprocess that is hanging around still has its stderr, etc, pointed into\nthat pipe.\n\nYou can reproduce the situation like this:\n\n  cd t\n  ./t4053-diff-no-index.sh --verbose-log --stress\n\nLet that run for a few minutes, and then you'll find that some of the\nruns have hung. For example, at 11:53, I ran:\n\n  $ ps xk start o pid,start,command | grep tee | head\n   713459 11:48:06 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-9.out\n   713527 11:48:06 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-15.out\n   719434 11:48:07 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-1.out\n   728117 11:48:08 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-5.out\n   738738 11:48:09 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-31.out\n   739457 11:48:09 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-27.out\n   744432 11:48:10 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-21.out\n   744471 11:48:10 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-29.out\n   761961 11:48:12 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-0.out\n   812299 11:48:19 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-8.out\n\nAll of these have been hung for several minutes. We can investigate one\nand see that it's waiting to get EOF on its input:\n\n  $ strace -p 713459\n  strace: Process 713459 attached\n  read(0,\n  ^C\n\nWho else has that descriptor open?\n\n  $ lsof -a -p 713459 -d 0 +E\n  COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME\n  tee     713459 peff    0r  FIFO   0,13      0t0 3943636 pipe 719203,sh,5w 719203,sh,7w 719203,sh,12w 719203,sh,13w\n  sh      719203 peff    5w  FIFO   0,13      0t0 3943636 pipe 713459,tee,0r 719203,sh,7w 719203,sh,12w 719203,sh,13w\n  sh      719203 peff    7w  FIFO   0,13      0t0 3943636 pipe 713459,tee,0r 719203,sh,5w 719203,sh,12w 719203,sh,13w\n  sh      719203 peff   12w  FIFO   0,13      0t0 3943636 pipe 713459,tee,0r 719203,sh,5w 719203,sh,7w 719203,sh,13w\n  sh      719203 peff   13w  FIFO   0,13      0t0 3943636 pipe 713459,tee,0r 719203,sh,5w 719203,sh,7w 719203,sh,12w\n\nIt's a shell, presumably a subshell spawned by the main script. Though\nit may seem odd, having the same descriptor open several times is not\nunreasonable (they're all basically the original stdout/stderr of the\nscript that has been copied). And they should all close when the process\nexits. So what's it doing? Curiously, it will exit as soon as we strace\nit:\n\n  $ strace -s 64 -p 719203\n  strace: Process 719203 attached\n  openat(AT_FDCWD, \"pipe\", O_WRONLY|O_CREAT|O_TRUNC, 0666) = -1 ENOENT (No such file or directory)\n  write(2, \"./t4053-diff-no-index.sh: 7: eval: \", 35) = 35\n  write(2, \"cannot create pipe: Directory nonexistent\", 41) = 41\n  write(2, \"\\n\", 1)                       = 1\n  exit_group(2)                           = ?\n  +++ exited with 2 +++\n\nI think what happens is this:\n\n  - it is blocking in the openat() call for the pipe, as we expect (so\n    this is definitely the backgrounded subshell mentioned above)\n\n  - strace sends signals (probably STOP/CONT); those cause the kernel to\n    stop blocking, but libc will restart the system call automatically\n\n  - by this time, the \"pipe\" fifo is gone, so we'll actually try to\n    create a regular file. But of course the surrounding directory is\n    gone, too! So we get ENOENT, and then exit as normal.\n\nSo the blocking is something we expect to happen. But what we didn't\nexpect is for the process to still exist at all! It should have been\nkilled earlier when the parent process called \"kill\", but it wasn't. And\nwe can't catch the race at this point, because it happened much earlier.\n\nOne can guess, though, that there is some race with the shell setting up\nthe signal handling in the backgrounded subshell, and possibly blocking\nor ignoring signals at the time that the \"kill\" is received.  Curiously,\nthe race does not seem to happen if I use \"bash\" instead of \"dash\", so\npresumably bash's setup here is more atomic.\n\nOne fix might be to try killing the subshell more aggressively, either\nusing SIGKILL, or looping on kill/wait. But that seems complex and\nlikely to introduce new problems/races. Instead, we can observe that the\nwriter is not needed at all. Git will notice the pipe via stat() before\nit is ever opened. So we can simply drop the writer subshell entirely.\n\nIf we ever changed Git to open the path and fstat() it, this would\nresult in the test hanging. But we're not likely to do that. After all,\nwe have to stat() paths to see if they are openable at all (e.g., it\ncould be a directory), so this seems like a low risk. And anybody who\ndoes make such a change will immediately see the issue, as Git would\nhang consistently.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "231e86c10c674235cf28447a8486f7955d5f4dd9", "commit_date": "2023-08-10T16:16:27Z", "commit_message": "t4053: avoid race when killing background processes\n\nThe test 'diff --no-index reads from pipes' starts a couple of\nbackground processes that write to the pipes that are passed to \"diff\n--no-index\". If the test passes then we expect these processes to exit\nas all their output will have been read. However if the test fails\nthen we want to make sure they do not hang about on the users machine\nand the test remembers they should be killed by calling\n\n      test_when_finished  \"! kill $!\"\n\nafter each background process is created. Unfortunately there is a\nrace where test_when_finished may run before the background process\nexits even when all its output has been read resulting in the kill\ncommand succeeding which causes the test to fail. Fix this by ignoring\nthe exit status of the kill command. If the diff is successful we\ncould instead wait for the background process to exit and check their\nstatus but that feels like it is testing the platform's printf\nimplementation rather than git's code.\n\nReported-by: Jeff King <peff@peff.net>\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fac96dfbb1c24369ba7d37a5affd8adfe6c650fd", "commit_date": "2023-08-09T23:18:16Z", "commit_message": "Git 2.42-rc1\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8c53ff91282861d4efe5d807129a55e193e6451", "commit_date": "2023-08-09T23:18:16Z", "commit_message": "Merge branch 'pw/rebase-skip-commit-message-fix'\n\n\"git rebase -i\" with a series of squash/fixup, when one of the\nsteps stopped in conflicts and ended up getting skipped, did not\nhandle the accumulated commit log messages, which has been\ncorrected.\n\n* pw/rebase-skip-commit-message-fix:\n  rebase --skip: fix commit message clean up when skipping squash", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8cdd5e713d7ba54b9d26ac997408bb745ab55088", "commit_date": "2023-08-09T23:18:16Z", "commit_message": "Merge branch 'ma/locate-in-path-for-windows'\n\n\"git bisect visualize\" stopped running \"gitk\" on Git for Windows\nwhen the command was reimplemented in C around Git 2.34 timeframe.\nThis has been corrected.\n\n* ma/locate-in-path-for-windows:\n  docs: update when `git bisect visualize` uses `gitk`\n  compat/mingw: implement a native locate_in_PATH()\n  run-command: conditionally define locate_in_PATH()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b6e2a0c0b30dccd050706354eaa64a9e8ed900e5", "commit_date": "2023-08-09T23:18:15Z", "commit_message": "Merge branch 'bc/ignore-clangd-cache'\n\n.gitignore update.\n\n* bc/ignore-clangd-cache:\n  gitignore: ignore clangd .cache directory", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cf07e53bae8492fc6ee8a8d394e2fba858daa0a4", "commit_date": "2023-08-09T23:18:15Z", "commit_message": "Merge branch 'bc/ident-dot-is-no-longer-crud-letter'\n\nExclude \".\" from the set of characters to be removed from the\nbeginning and the end of the human-readable name.\n\n* bc/ident-dot-is-no-longer-crud-letter:\n  ident: don't consider '.' a crud", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "889c94d2a0f4041c8237044db1d7ffd0190a2e0f", "commit_date": "2023-08-09T23:18:15Z", "commit_message": "Merge branch 'ew/hash-with-openssl-evp'\n\nAdjust to OpenSSL 3+, which deprecates its SHA-1 functions based on\nits traditional API, by using its EVP API instead.\n\n* ew/hash-with-openssl-evp:\n  avoid SHA-1 functions deprecated in OpenSSL 3+\n  sha256: avoid functions deprecated in OpenSSL 3+", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0050f8e401a70b1eda9e7358b04e6d6ef3d64ab1", "commit_date": "2023-08-09T20:58:15Z", "commit_message": "git maintenance: avoid console window in scheduled tasks on Windows\n\nWe just introduced a helper to avoid showing a console window when the\nscheduled task runs `git.exe`. Let's actually use it.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Derrick Stolee <dstolee@microsoft.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4b8a2717bb5ea6b787e0037174dcbf53ccf4985c", "commit_date": "2023-08-09T20:58:13Z", "commit_message": "win32: add a helper to run `git.exe` without a foreground window\n\nOn Windows, there are two kinds of executables, console ones and\nnon-console ones. Git's executables are all console ones.\n\nWhen launching the former e.g. in a scheduled task, a CMD window pops\nup. This is not what we want for the tasks installed via the `git\nmaintenance` command.\n\nTo work around this, let's introduce `headless-git.exe`, which is a\nnon-console program that does _not_ pop up any window. All it does is to\nre-launch `git.exe`, suppressing that console window, passing through\nall command-line arguments as-are.\n\nHelped-by: Carlo Marcelo Arenas Bel\u00f3n <carenas@gmail.com>\nHelped-by: Yuyi Wang <Strawberry_Str@hotmail.com>\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Derrick Stolee <dstolee@microsoft.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b3dcd24b8a186093cd821697b191080b8d53915b", "commit_date": "2023-08-09T19:44:07Z", "commit_message": "t9001: remove excessive GIT_SEND_EMAIL_NOTTY=1\n\nThis was added by 3ece9bf0f9 (send-email: clear the $message_id after\nvalidation, 2023-05-17) for no apparent reason, as this is required only\nin cases when git's stdin is (must be) redirected, which isn't the case\nhere.\n\nSigned-off-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "72695d8214791161a943086e894874b4fd71ba9f", "commit_date": "2023-08-09T18:46:12Z", "commit_message": "mv: handle lstat() failure correctly\n\nWhen moving a directory onto another with `git mv` various checks are\nperformed. One of of these validates that the destination is not existing.\n\nWhen calling `lstat` on the destination path and it fails as the path\ndoesn't exist, some environments seem to overwrite the passed  in\n`stat` memory nonetheless (I observed this issue on debian 12 of x86_64,\nrunning on OrbStack on ARM, emulated with Rosetta).\n\nThis would affect the code that followed as it would still acccess a now\nmodified `st` structure, which now seems to contain uninitialized memory.\n`S_ISDIR(st_dir_mode)` would then typically return false causing the code\nto run into a bad case.\n\nThe fix avoids overwriting the existing `st` structure, providing an\nalternative that exists only for that purpose.\n\nNote that this patch minimizes complexity instead of stack-frame size.\n\nSigned-off-by: Sebastian Thiel <sebastian.thiel@icloud.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3284b93862b0aaea9d8e708f0aabd53e3e94409e", "commit_date": "2023-08-08T23:55:07Z", "commit_message": "parse-options: disallow negating OPTION_SET_INT 0\n\nAn option of type OPTION_SET_INT can be defined to set its variable to\nzero.  It's negated variant will do the same, though, which is\nconfusing.  Several such options were fixed by disabling negation,\nchanging the value to set or using a different option type:\n\n991c552916 (ls-tree: fix --no-full-name, 2023-07-18)\ne12cb98e1e (branch: reject \"--no-all\" and \"--no-remotes\" early, 2023-07-18)\n68cbb20e73 (show-branch: reject --[no-](topo|date)-order, 2023-07-19)\n3821eb6c3d (reset: reject --no-(mixed|soft|hard|merge|keep) option, 2023-07-19)\n36f76d2a25 (pack-objects: fix --no-quiet, 2023-07-21)\n3a5f308741 (pack-objects: fix --no-keep-true-parents, 2023-07-21)\nc95ae3ff9c (describe: fix --no-exact-match, 2023-07-21)\nd089a06421 (bundle: use OPT_PASSTHRU_ARGV, 2023-07-29)\n\nCheck for such options that allow negation in parse_options_check() and\nreport them to find future cases quicker.\n\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cb888bb6991bb10bddedf9ddc9651ec25da6137d", "commit_date": "2023-08-08T23:49:10Z", "commit_message": "repack: free geometry struct\n\nWhen the program is ending, we call clear_pack_geometry() to free any\nresources in the pack_geometry struct. But the struct itself is\nallocated on the heap, and leak-checkers will complain about the\nresulting small leak.\n\nThis one was marked by Coverity as a \"new\" leak, though it has existed\nsince 0fabafd0b9 (builtin/repack.c: add '--geometric' option,\n2021-02-22). This might be because recent unrelated changes in the file\nconfused it about what is new and what is not. But regardless, it is\nworth addressing.\n\nWe can fix it easily by free-ing the struct. We'll convert our \"clear\"\nfunction to \"free\", since the allocation happens in the matching init()\nfunction (though since there is only one call to each, and the struct is\nlocal to this file, it's mostly academic).\n\nAnother option would be to put the struct on the stack rather than the\nheap. However, this gets tricky, as we check the pointer against NULL in\nseveral places to decide whether we're in geometric mode.\n\nSigned-off-by: Jeff King <peff@peff.net>\nAcked-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c016726c2deb84bcc6a7418efad92ef0562a8af3", "commit_date": "2023-08-08T23:48:17Z", "commit_message": "send-email: avoid creating more than one Term::ReadLine object\n\nEvery time git-send-email calls its ask() function to prompt the user,\nwe call term(), which instantiates a new Term::ReadLine object. But in\nv1.46 of Term::ReadLine::Gnu (which provides the Term::ReadLine\ninterface on some platforms), its constructor refuses to create a second\ninstance[1]. So on systems with that version of the module, most\ngit-send-email instances will fail (as we usually prompt for both \"to\"\nand \"in-reply-to\" unless the user provided them on the command line).\n\nWe can fix this by keeping a single instance variable and returning it\nfor each call to term(). In perl 5.10 and up, we could do that with a\n\"state\" variable. But since we only require 5.008, we'll do it the\nold-fashioned way, with a lexical \"my\" in its own scope.\n\nNote that the tests in t9001 detect this problem as-is, since the\nfailure mode is for the program to die. But let's also beef up the\n\"Prompting works\" test to check that it correctly handles multiple\ninputs (if we had chosen to keep our FakeTerm hack in the previous\ncommit, then the failure mode would be incorrectly ignoring prompts\nafter the first).\n\n[1] For discussion of why multiple instances are forbidden, see:\n    https://github.com/hirooih/perl-trg/issues/16\n\nSigned-off-by: Jeff King <peff@peff.net>\nAcked-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dfd46bae92ec25d71e7c8a2887e9508aaf211ee8", "commit_date": "2023-08-08T23:48:15Z", "commit_message": "send-email: drop FakeTerm hack\n\nBack in 280242d1cc (send-email: do not barf when Term::ReadLine does not\nlike your terminal, 2006-07-02), we added a fallback for when\nTerm::ReadLine's constructor failed: we'd have a FakeTerm object\ninstead, which would then die if anybody actually tried to call\nreadline() on it. Since we instantiated the $term variable at program\nstartup, we needed this workaround to let the program run in modes when\nwe did not prompt the user.\n\nBut later, in f4dc9432fd (send-email: lazily load modules for a big\nspeedup, 2021-05-28), we started loading Term::ReadLine lazily only when\nask() is called. So at that point we know we're trying to prompt the\nuser, and we can just die if ReadLine instantiation fails, rather than\nmaking this fake object to lazily delay showing the error.\n\nThis should be OK even if there is no tty (e.g., we're in a cron job),\nbecause Term::ReadLine will return a stub object in that case whose \"IN\"\nand \"OUT\" functions return undef. And since 5906f54e47 (send-email:\ndon't attempt to prompt if tty is closed, 2009-03-31), we check for that\ncase and skip prompting.\n\nAnd we can be sure that FakeTerm was not kicking in for such a\nsituation, because it has actually been broken since that commit! It\ndoes not define \"IN\" or \"OUT\" methods, so perl would barf with an error.\nIf FakeTerm was in use, we were neither honoring what 5906f54e47 tried\nto do, nor producing the readable message that 280242d1cc intended.\n\nSo we're better off just dropping FakeTerm entirely, and letting the\nerror reported by constructing Term::ReadLine through.\n\nSigned-off-by: Jeff King <peff@peff.net>\nAcked-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12009a182b51c1dd1f8020a3d88a1813e0af5f33", "commit_date": "2023-08-08T23:47:26Z", "commit_message": "t0040: declare non-tab indentation to be okay in this script\n\nBy necessity, this script needs to verify that certain Git output\nmatches expectations, including text indented with spaces instead of\ntabs.\n\nMost recently, such a check was introduced in 448abbba6347 (short help:\nallow multi-line opthelp, 2023-07-18) which is reported by `git diff\n--check 448abbba6347^!` as having whitespace issues.\n\nLet's not complain about this because it is intentional.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nAcked-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff29a61cbbc83f0948606df37dbc734436b62c17", "commit_date": "2023-08-07T20:21:00Z", "commit_message": "advice: handle \"rebase\" in error_resolve_conflict()\n\nThis makes sure that we get a properly translated message rather than\ninserting the command (which we failed to translate) into a generic\nfallback message.\n\nThe function is called indirectly via die_resolve_conflict() with fixed\nstrings, and directly with the string obtained via action_name(), which\nin turn returns a string from a fixed set. Hence we know that the now\ncovered set of strings is exhausitive, and will therefore BUG() out when\nencountering an unexpected string. We also know that all covered strings\nare actually used.\n\nArguably, the above suggests that it would be cleaner to pass the\ncommand as an enum in the first place, but that's left for another time.\n\nSigned-off-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a82fb66fed250e16d3010c75404503bea3f0ab61", "commit_date": "2023-08-07T18:58:17Z", "commit_message": "A few more topics before -rc1\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1221e94bd0ad7f5734cdbfe1ebc5b922bea106fa", "commit_date": "2023-08-07T18:58:17Z", "commit_message": "mailmap: change primary address for Glen Choo\n\nGlen will lose access to his work email soon.\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b2797581d0b362059be6e7bed9be98e5cda44e4b", "commit_date": "2023-08-07T18:57:18Z", "commit_message": "Merge branch 'ew/sha256-gcrypt-leak-fixes'\n\nLeakfixes.\n\n* ew/sha256-gcrypt-leak-fixes:\n  sha256/gcrypt: die on gcry_md_open failures\n  sha256/gcrypt: fix memory leak with SHA-256 repos\n  sha256/gcrypt: fix build with SANITIZE=leak", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a04cef9fd74df0af3f406102897fc265ff53dc1b", "commit_date": "2023-08-07T18:57:18Z", "commit_message": "Merge branch 'rs/bundle-parseopt-cleanup'\n\nCode clean-up.\n\n* rs/bundle-parseopt-cleanup:\n  bundle: use OPT_PASSTHRU_ARGV", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e48d9c78cc00805660b83ac809188d0c413e4c46", "commit_date": "2023-08-07T18:57:18Z", "commit_message": "Merge branch 'am/doc-sha256'\n\nTone down the warning on SHA-256 repositories being an experimental\ncuriosity.  We do not have support for them to interoperate with\ntraditional SHA-1 repositories, but at this point, we do not plan\nto make breaking changes to SHA-256 repositories and there is no\nlonger need for such a strongly phrased warning.\n\n* am/doc-sha256:\n  doc: sha256 is no longer experimental", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dee27be9056c05067b6dba3fc5805f311f03ce67", "commit_date": "2023-08-07T18:57:18Z", "commit_message": "Merge branch 'tb/commit-graph-tests'\n\nTest updates.\n\n* tb/commit-graph-tests:\n  t/lib-commit-graph.sh: avoid sub-shell in `graph_git_behavior()`\n  t5328: avoid top-level directory changes\n  t5318: avoid top-level directory changes\n  t/lib-commit-graph.sh: avoid directory change in `graph_git_behavior()`\n  t/lib-commit-graph.sh: allow `graph_read_expect()` in sub-directories", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e600568929c3c7fdda62843412585489d091111d", "commit_date": "2023-08-06T12:41:06Z", "commit_message": "l10n: po-id for 2.42 (round 1)\n\nUpdate following components:\n\n* commit-graph.c\n* diff-no-index.c\n* builtin/notes.c\n* builtin/pack-refs.c\n* builtin/worktree.c\n\nSigned-off-by: Bagas Sanjaya <bagasdotme@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "450f2c9e3e461e4785643730f9c82eb9a64faddd", "commit_date": "2023-08-05T15:26:39Z", "commit_message": "Merge branch 'russian-l10n' of https://github.com/DJm00n/git-po-ru\n\n* 'russian-l10n' of https://github.com/DJm00n/git-po-ru:\n  l10n: ru.po: update Russian translation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a5c01603b397f7f99b013a1334e0792d70be641c", "commit_date": "2023-08-04T17:56:51Z", "commit_message": "gitignore: ignore clangd .cache directory\n\nIn at least some versions of clangd, including version 15 in Ubuntu\n23.04, a directory, .cache, is written in the root of the repository\nwith index information about the files in the repository.  Since clangd\nis the most common language server protocol (LSP) implementation for C,\nand we already support it using the GENERATE_COMPILATION_DATABASE flags\nto make it functional, it's likely many users are using or will want to\nuse it.\n\nAs a result, ignore the \".cache\" directory to help avoid users\naccidentally committing the data.\n\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac83bc5054c2ac489166072334b4147ce6d0fccb", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Git 2.42-rc0\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "65e25ae52298e9f1a8c7d94fd0ddffaf30cd944e", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'jc/branch-in-use-error-message'\n\n\"git branch -f X\" to repoint the branch X said that X was \"checked\nout\" in another worktree, even when branch X was not and instead\nbeing bisected or rebased.  The message was reworded to say the\nbranch was \"in use\".\n\n* jc/branch-in-use-error-message:\n  branch: update the message to refuse touching a branch in-use", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4a7c24c094cff87a4b5a02550b321591d847ca0", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'hy/blame-in-bare-with-contents'\n\n\"git blame --contents=file\" has been taught to work in a bare\nrepository.\n\n* hy/blame-in-bare-with-contents:\n  blame: allow --contents to work with bare repo", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f9712d75e6389866efbe6ad918dc9773a8a880ad", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'jc/parse-options-short-help'\n\nCommand line parser fix, and a small parse-options API update.\n\n* jc/parse-options-short-help:\n  short help: allow a gap smaller than USAGE_GAP\n  remote: simplify \"remote add --tags\" help text\n  short help: allow multi-line opthelp", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "23b20fff3ab28b31678d23e67de328ac24801f18", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'jc/doc-sent-patch-now-what'\n\nProcess document update.\n\n* jc/doc-sent-patch-now-what:\n  MyFirstContribution: refrain from self-iterating too much", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "840affcb8ddfa78e4988c276f98773e40ccba4f4", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'la/doc-choose-starting-point-fixup'\n\nClarify how to pick a starting point for a new topic in the\nSubmittingPatches document.\n\n* la/doc-choose-starting-point-fixup:\n  SubmittingPatches: use of older maintenance tracks is an exception\n  SubmittingPatches: explain why 'next' and above are inappropriate base\n  SubmittingPatches: choice of base for fixing an older maintenance track", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a53e8a64884dffb23ea416687ae8fbdaf332641a", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'pv/doc-submodule-update-settings'\n\nRewrite the description of giving a custom command to the\nsubmodule.<name>.update configuration variable.\n\n* pv/doc-submodule-update-settings:\n  doc: highlight that .gitmodules does not support !command", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4d060018467d5a8d05349294baad426d5407414d", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'ja/worktree-orphan-fix'\n\nFix tests with unportable regex patterns.\n\n* ja/worktree-orphan-fix:\n  t2400: rewrite regex to avoid unintentional PCRE\n  builtin/worktree.c: convert tab in advice to space\n  t2400: drop no-op `--sq` from rev-parse call", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3365e2675e5ac95e0a44665966e8cfbb9433456e", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'jc/retire-get-sha1-hex'\n\nThe implementation of \"get_sha1_hex()\" that reads a hexadecimal\nstring that spells a full object name has been extended to cope\nwith any hash function used in the repository, but the \"sha1\" in\nits name survived.  Rename it to get_hash_hex(), a name that is\nmore consistent within its friends like get_hash_hex_algop().\n\n* jc/retire-get-sha1-hex:\n  hex: retire get_sha1_hex()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dd68b57fc404e9117385879460a63a25f8b3c354", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'la/doc-choose-starting-point'\n\nClarify how to choose the starting point for a new topic in\ndeveloper guidance document.\n\n* la/doc-choose-starting-point:\n  SubmittingPatches: simplify guidance for choosing a starting point\n  SubmittingPatches: emphasize need to communicate non-default starting points\n  SubmittingPatches: de-emphasize branches as starting points\n  SubmittingPatches: discuss subsystems separately from git.git\n  SubmittingPatches: reword awkward phrasing", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fff1594fa77372ea7a51f6b445267f23fdbf3089", "commit_date": "2023-08-04T16:47:10Z", "commit_message": "docs: update when `git bisect visualize` uses `gitk`\n\nThis check has involved more environment variables than just `DISPLAY` since\n508e84a790 (bisect view: check for MinGW32 and MacOSX in addition to X11,\n2008-02-14), so let's update the documentation accordingly.\n\nSigned-off-by: Matthias A\u00dfhauer <mha1993@live.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bf46a9f62159ced3a84ab8bc9ba151778414bd6", "commit_date": "2023-08-04T04:21:10Z", "commit_message": "compat/mingw: implement a native locate_in_PATH()\n\nsince 5e1f28d (bisect--helper: reimplement `bisect_visualize()` shell\n function in C, 2021-09-13) `git bisect visualize` uses exists_in_PATH()\nto check wether it should call `gitk`, but exists_in_PATH() relies on\nlocate_in_PATH() which currently only understands POSIX-ish PATH variables\n(a list of paths, separated by colons) on native Windows executables\nwe encounter Windows PATH variables (a list of paths that often contain\ndrive letters (and thus colons), separated by semicolons). Luckily we do\nalready have a function that can lookup executables on windows PATHs:\npath_lookup(). Implement a small replacement for the existing\nlocate_in_PATH() based on path_lookup().\n\nReported-by: Louis Strous <Louis.Strous@intellimagic.com>\nSigned-off-by: Matthias A\u00dfhauer <mha1993@live.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb532b534547d0a6b203baaf2f3379d987f611b9", "commit_date": "2023-08-04T04:21:07Z", "commit_message": "run-command: conditionally define locate_in_PATH()\n\nThis commit doesn't change any behaviour by itself, but allows us to easily\ndefine compat replacements for locate_in_PATH(). It prepares us for the next\ncommit that adds a native Windows implementation of locate_in_PATH().\n\nSigned-off-by: Matthias A\u00dfhauer <mha1993@live.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6ce7afe16384b741f1ee4c5f310fa4a9f66348ba", "commit_date": "2023-08-03T20:42:54Z", "commit_message": "rebase --skip: fix commit message clean up when skipping squash\n\nDuring a series of \"fixup\" and/or \"squash\" commands, the interactive\nrebase accumulates a commit message from all the commits that are being\nsquashed together. If one of the commits has conflicts when it is picked\nand the user chooses to skip that commit then we need to remove that\ncommit's message from accumulated messages.  To do this 15ef69314d5\n(rebase --skip: clean up commit message after a failed fixup/squash,\n2018-04-27) updated commit_staged_changes() to reset the accumulated\nmessage to the commit message of HEAD (which does not contain the\nmessage from the skipped commit) when the last command was \"fixup\" or\n\"squash\" and there are no staged changes. Unfortunately the code to do\nthis contains two bugs.\n\n(1) If parse_head() fails we pass an invalid pointer to\n    unuse_commit_buffer().\n\n(2) The reconstructed message uses the entire commit buffer from HEAD\n    including the headers, rather than just the commit message.\n\nThe first issue is fixed by splitting up the \"if\" condition into several\nstatements each with its own error handling. The second issue is fixed\nby finding the start of the commit message within the commit buffer\nusing find_commit_subject().\n\nThe existing test added by 15ef69314d5 is modified to show the effect of\nthis bug.  The bug is triggered when skipping the first command in the\nchain (as the test does before this commit) but the effect is hidden\nbecause opts->current_fixup_count is set to zero which leads\nupdate_squash_messages() to recreate the squash message file from\nscratch overwriting the bad message created by\ncommit_staged_changes(). The test is also updated to explicitly check\nthe commit messages rather than relying on grep to ensure they do not\ncontain any stray commit headers.\n\nTo check the commit message the function test_commit_message() is moved\nfrom t3437-rebase-fixup-options.sh to test-lib.sh. As the function is\nnow publicly available it is updated to provide better error detection\nand avoid overwriting the commonly used files \"actual\" and \"expect\".\nSupport for reading the expected commit message from stdin is also\nadded.\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1c04cb0744d2acdcaebc77b0e78c47efbba67fd5", "commit_date": "2023-08-02T16:50:52Z", "commit_message": "ident: don't consider '.' a crud\n\nWhen we process a user's name (as in user.name), we strip all\nleading and trailing crud from it.  Right now, we consider a dot\na crud character, and strip it off.\n\nHowever, this is unsuitable for many personal names because humans\nfrequently have abbreviated suffixes, such as \"Jr.\" or \"Sr.\" at the end\nof their names, and this corrupts them.  Some other users may wish to\nuse an abbreviated name or initial, which will pose a problem especially\nin cultures that write the family name first, followed by the personal\nname.\n\nSince the current approach causes lots of practical problems, let's\navoid it by no longer considering a dot to be crud.\n\nNote that \".\" in the name forces the entire name to be quoted to\nplease mailers, but stripping \".\" only at the beginning and the end\ndoes not help a name with \".\" in the middle (like \"brian m. carlson\")\nso this change will not make it much worse.  A name like \"Given\nFamily, Jr.\" that did not have to be quoted now would need to be, in\norder to be placed on the e-mail headers, though.\n\nThis is based on a weather-balloon patch by Jeff King sent in Aug 2021\nhttps://lore.kernel.org/git/YSKm8Q8nyTavQaox@coredump.intra.peff.net/\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0a5129563ebe720330fdc8f5c6843d27641137", "commit_date": "2023-08-02T16:37:52Z", "commit_message": "The eighteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "955c2b1c6ad736a685fcb7cab1c079a9c7cc18c8", "commit_date": "2023-08-02T16:37:52Z", "commit_message": "Documentation/RelNotes/2.42.0.txt: typofix\n\nFix a typo introduced in aa9166bcc0 (The ninth batch, 2023-07-08).\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "70e5c5ddddadc7f15f64f812ae511eab83ca0040", "commit_date": "2023-08-02T16:37:24Z", "commit_message": "Merge branch 'ks/ref-filter-describe'\n\n\"git branch --list --format=<format>\" and friends are taught\na new \"%(describe)\" placeholder.\n\n* ks/ref-filter-describe:\n  ref-filter: add new \"describe\" atom\n  ref-filter: add multiple-option parsing functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8bfb359844cf51aedaf0d28486d4ce9867ccb46c", "commit_date": "2023-08-02T16:37:24Z", "commit_message": "Merge branch 'ah/sequencer-rewrite-todo-fix'\n\nWhen the user edits \"rebase -i\" todo file so that it starts with a\n\"fixup\", which would make it invalid, the command truncated the\nrest of the file before giving an error and returning the control\nback to the user.  Stop truncating to make it easier to correct\nsuch a malformed todo file.\n\n* ah/sequencer-rewrite-todo-fix:\n  sequencer: finish parsing the todo list despite an invalid first line", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "52d9dc20e1ddd5ac6b9e9113983b2f8d6977e6b0", "commit_date": "2023-08-02T16:37:23Z", "commit_message": "Merge branch 'bb/use-trace2-counters-for-fsync-stats'\n\nInstead of inventing a custom counter variables for debugging,\nuse existing trace2 facility in the fsync customization codepath.\n\n* bb/use-trace2-counters-for-fsync-stats:\n  wrapper: use trace2 counters to collect fsync stats", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "99acb0fa54775a383cab70a6e662e45180dee3f0", "commit_date": "2023-08-02T16:37:23Z", "commit_message": "Merge branch 'ah/autoconf-fixes'\n\n\"./configure --with-expat=no\" did not work as a way to refuse use\nof the expat library on a system with the library installed, which\nhas been corrected.\n\n* ah/autoconf-fixes:\n  configure.ac: always save NO_ICONV to config.status\n  configure.ac: don't overwrite NO_CURL option\n  configure.ac: don't overwrite NO_EXPAT option", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fea92e4cac30b1204ecc8dfd53675bbdd68611e0", "commit_date": "2023-08-02T16:37:23Z", "commit_message": "Merge branch 'jc/tree-walk-drop-base-offset'\n\nCode simplification.\n\n* jc/tree-walk-drop-base-offset:\n  tree-walk: drop unused base_offset from do_match()\n  tree-walk: lose base_offset that is never used in tree_entry_interesting", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bda9c12073e786e2ffa2c3ec479c7fe098d49999", "commit_date": "2023-08-01T15:34:56Z", "commit_message": "avoid SHA-1 functions deprecated in OpenSSL 3+\n\nOpenSSL 3+ deprecates the SHA1_Init, SHA1_Update, and SHA1_Final\nfunctions, leading to errors when building with `DEVELOPER=1'.\n\nUse the newer EVP_* API with OpenSSL 3+ (only) despite being more\nerror-prone and less efficient due to heap allocations.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e440ea0aba0660f356a3e5b9fc366d5d6960847", "commit_date": "2023-08-01T15:34:54Z", "commit_message": "sha256: avoid functions deprecated in OpenSSL 3+\n\nOpenSSL 3+ deprecates the SHA256_Init, SHA256_Update, and SHA256_Final\nfunctions, leading to errors when building with `DEVELOPER=1'.\n\nUse the newer EVP_* API with OpenSSL 3+ despite being more\nerror-prone and less efficient due to heap allocations.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e42eb0e9ae44f65c360cd95ce28e84496ad8247", "commit_date": "2023-07-31T16:11:04Z", "commit_message": "doc: sha256 is no longer experimental\n\nRemove scary wording that basically stops people using sha256\nrepositories not because of interoperability issues with sha1\nrepositories, but from fear that their work will suddenly become\nincompatible in some future version of git.\n\nWe should be clear that currently sha256 repositories will not work with\nsha1 repositories but stop the scary words.\n\nSigned-off-by: Adam Majer <adamm@zombino.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "823839bda1a72c54fe8ac025fb70dd3403c11f46", "commit_date": "2023-07-31T15:57:24Z", "commit_message": "sha256/gcrypt: die on gcry_md_open failures\n\n`gcry_md_open' allocates memory and must (like all allocation\nfunctions) be checked for failure.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8b608f3fb84388bb1b6da70feb62e20a19390cb6", "commit_date": "2023-07-31T15:57:15Z", "commit_message": "sha256/gcrypt: fix memory leak with SHA-256 repos\n\n`gcry_md_open' needs to be paired with `gcry_md_close' to ensure\nresources are released.  Since our internal APIs don't have\nseparate close/release callbacks, sticking it into the finalization\ncallback seems appropriate.\n\nBuilding with SANITIZE=leak and running `git fsck' on a SHA-256\nrepository no longer reports leaks.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b4b85e41a74eaf61dfb490004541622e63df092b", "commit_date": "2023-07-31T15:56:54Z", "commit_message": "sha256/gcrypt: fix build with SANITIZE=leak\n\nNon-static functions cause `undefined reference' errors when\nbuilding with `SANITIZE=leak' due to the lack of prototypes.\nMark all these functions as `static inline' as we do in\nsha256/nettle.h to avoid the need to maintain prototypes.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d089a06421c86d120f50f05020ca6b833b068dcb", "commit_date": "2023-07-31T15:33:53Z", "commit_message": "bundle: use OPT_PASSTHRU_ARGV\n\n\"git bundle\" passes the progress control options to \"git pack-objects\"\nby parsing and then recreating them explicitly.  Simplify that process\nby using OPT_PASSTHRU_ARGV instead.\n\nThis also fixes --no-quiet, which has been doing the same as --quiet\nsince its introduction by 79862b6b77 (bundle-create: progress output\ncontrol, 2019-11-10) because it had been defined using OPT_SET_INT with\na value of 0, which sets 0 when negated as well.\n\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ee48e70a829d1fa2da82f14787051ad8e7c45b71", "commit_date": "2023-07-28T16:45:22Z", "commit_message": "The seventeenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ddcb8fd8b94c066406c2a4f41e04122cb2a742ad", "commit_date": "2023-07-28T16:45:22Z", "commit_message": "Merge branch 'rs/pack-objects-parseopt-fix'\n\nCommand line parser fix.\n\n* rs/pack-objects-parseopt-fix:\n  pack-objects: fix --no-quiet\n  pack-objects: fix --no-keep-true-parents", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3085f949bf4aafe04dac7441308bb769ccf9c351", "commit_date": "2023-07-28T16:45:21Z", "commit_message": "Merge branch 'rs/describe-parseopt-fix'\n\nCommand line parser fix.\n\n* rs/describe-parseopt-fix:\n  describe: fix --no-exact-match", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c8a33b44c5a56c7b2c7778506acdc71e5365ec1f", "commit_date": "2023-07-28T16:45:21Z", "commit_message": "Merge branch 'bb/trace2-comment-fix'\n\nIn-code comment fix.\n\n* bb/trace2-comment-fix:\n  trace2: fix a comment", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "010447cf098f7407008f2940b4fefa5351477044", "commit_date": "2023-07-28T00:44:07Z", "commit_message": "MyFirstContribution: refrain from self-iterating too much\n\nFinding mistakes in and improving your own patches is a good idea,\nbut doing so too quickly is being inconsiderate to reviewers who\nhave just seen the initial iteration and taking their time to review\nit.  Encourage new developers to perform such a self review before\nthey send out their patches, not after.  After sending a patch that\nthey immediately found mistakes in, they are welcome to comment on\nthem, mentioning what and how they plan to improve them in an\nupdated version, before sending out their updates.\n\nHelped-by: Torsten B\u00f6gershausen <tboegi@web.de>\nHelped-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}], "next": [{"commit_oid": "1e3cdeb4277043d24c0e469bbfe91d1fc270d252", "commit_date": "2023-10-17T20:59:51Z", "commit_message": "Merge branch 'en/docfixes' into next\n\nDocumentation typo and grammo fixes.\n\n* en/docfixes: (25 commits)\n  documentation: add missing parenthesis\n  documentation: add missing quotes\n  documentation: add missing fullstops\n  documentation: add some commas where they are helpful\n  documentation: fix whitespace issues\n  documentation: fix capitalization\n  documentation: fix punctuation\n  documentation: use clearer prepositions\n  documentation: add missing hyphens\n  documentation: remove unnecessary hyphens\n  documentation: add missing article\n  documentation: fix choice of article\n  documentation: whitespace is already generally plural\n  documentation: fix singular vs. plural\n  documentation: fix verb vs. noun\n  documentation: fix adjective vs. noun\n  documentation: fix verb tense\n  documentation: employ consistent verb tense for a list\n  documentation: fix subject/verb agreement\n  documentation: remove extraneous words\n  ...", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c60962dfee19255d64ac76a3d36b1ac86c456827", "commit_date": "2023-10-16T17:25:30Z", "commit_message": "Merge branch 'bc/racy-4gb-files' into next\n\nThe index file has room only for lower 32-bit of the file size in\nthe cached stat information, which means cached stat information\nwill have 0 in its sd_size member for a file whose size is multiple\nof 4GiB.  This is mistaken for a racily clean path.  Avoid it by\nstoring a bogus sd_size value instead for such files.\n\n* bc/racy-4gb-files:\n  Prevent git from rehashing 4GiB files\n  t: add a test helper to truncate files", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e26db5731543e2389168b6d625518663c29245ec", "commit_date": "2023-10-16T17:25:30Z", "commit_message": "Merge branch 'jc/fail-stash-to-store-non-stash' into next\n\nFeeding \"git stash store\" with a random commit that was not created\nby \"git stash create\" now errors out.\n\n* jc/fail-stash-to-store-non-stash:\n  stash: be careful what we store", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71b5e296252b672a84ecf032e8089053cf323480", "commit_date": "2023-10-16T17:25:29Z", "commit_message": "Merge branch 'so/diff-merges-dd' into next\n\n\"git log\" and friends learned \"--dd\" that is a short-hand for\n\"--diff-merges=first-parent -p\".\n\n* so/diff-merges-dd:\n  completion: complete '--dd'\n  diff-merges: introduce '--dd' option\n  diff-merges: improve --diff-merges documentation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "68c9e37980c583b776430107004a4573171ebf95", "commit_date": "2023-10-16T17:25:29Z", "commit_message": "Merge branch 'jk/chunk-bounds' into next\n\nThe codepaths that read \"chunk\" formatted files have been corrected\nto pay attention to the chunk size and notice broken files.\n\n* jk/chunk-bounds:\n  t5319: make corrupted large-offset test more robust", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7538f9d89b001be33a1b682b5cf207c4ba8fd8c5", "commit_date": "2023-10-14T17:17:25Z", "commit_message": "t5319: make corrupted large-offset test more robust\n\nThe test t5319.88 (\"reader bounds-checks large offset table\") can fail\nintermittently. The failure mode looks like this:\n\n  1. An earlier test sets up \"objects64\", a directory that can be used\n     to produce a midx with a corrupted large-offsets table. To get the\n     large offsets, it corrupts the normal \".idx\" file to have a fake\n     large offset, and then builds a midx from that.\n\n     That midx now has a large offset table, which is what we want. But\n     we also have a .idx on disk that has a corrupted entry. We'll call\n     the object with the corrupted large-offset \"X\".\n\n  2. In t5319.88, we further corrupt the midx by reducing the size of\n     the large-offset chunk (because our goal is to make sure we do not\n     do an out-of-bounds read on it).\n\n  3. We then enumerate all of the objects with \"cat-file --batch-check\n     --batch-all-objects\", expecting to see a complaint when we try to\n     show object X. We use --batch-all-objects because our objects64\n     repo doesn't actually have any refs (but if we check them all, one\n     of them will be the failing one). The default batch-check format\n     includes %(objecttype) and %(objectsize), both of which require us\n     to access the actual pack data (and thus requires looking at the\n     offset).\n\n  4a. Usually, this succeeds. We try to output object X, do a lookup via\n      the midx for the type/size lookup, and run into the corrupt\n      large-offset table.\n\n  4b. But sometimes we hit a different error. If another object points\n      to X as a delta base, then trying to find the type of that object\n      requires walking the delta chain to the base entry (since only the\n      base has the concrete type; deltas themselves are either OFS_DELTA\n      or REF_DELTA).\n\n      Normally this would not require separate offset lookups at all, as\n      deltas are usually stored as OFS_DELTA, specifying the relative\n      offset to the base. But the corrupt idx created in step 1 is done\n      directly with \"git pack-objects\" and does not pass the\n      --delta-base-offset option, meaning we have REF_DELTA entries!\n      Those do have to consult an index to find the location of the base\n      object, and they use the pack .idx to do this. The same pack .idx\n      that we know is corrupted from step 1!\n\n      Git does notice the error, but it does so by seeing the corrupt\n      .idx file, not the corrupt midx file, and the error it reports is\n      different, causing the test to fail.\n\nThe set of objects created in the test is deterministic. But the delta\nselection seems not to be (which is not too surprising, as it is\nmulti-threaded). I have seen the failure in Windows CI but haven't\nreproduced it locally (not even with --stress). Re-running a failed\nWindows CI job tends to work. But when I download and examine the trash\ndirectory from a failed run, it shows a different set of deltas than I\nget locally. But the exact source of non-determinism isn't that\nimportant; our test should be robust against any order.\n\nThere are a few options to fix this:\n\n  a. It would be OK for the \"objects64\" setup to \"unbreak\" the .idx file\n     after generating the midx. But then it would be hard for subsequent\n     tests to reuse it, since it is the corrupted idx that forces the\n     midx to have a large offset table.\n\n  b. The \"objects64\" setup could use --delta-base-offset. This would fix\n     our problem, but earlier tests have many hard-coded offsets. Using\n     OFS_DELTA would change the locations of objects in the pack (this\n     might even be OK because I think most of the offsets are within the\n     .idx file, but it seems brittle and I'm afraid to touch it).\n\n  c. Our cat-file output is in oid order by default. Since we store\n     bases before deltas, if we went in pack order (using the\n     \"--unordered\" flag), we'd always see our corrupt X before any delta\n     which depends on it. But using \"--unordered\" means we skip the midx\n     entirely. That makes sense, since it is just enumerating all of\n     the packs, using the offsets found in their .idx files directly.\n     So it doesn't work for our test.\n\n  d. We could ask directly about object X, rather than enumerating all\n     of them. But that requires further hard-coding of the oid (both\n     sha1 and sha256) of object X. I'd prefer not to introduce more\n     brittleness.\n\n  e. We can use a --batch-check format that looks at the pack data, but\n     doesn't have to chase deltas. The problem in this case is\n     %(objecttype), which has to walk to the base. But %(objectsize)\n     does not; we can get the value directly from the delta itself.\n     Another option would be %(deltabase), where we report the REF_DELTA\n     name but don't look at its data.\n\nI've gone with option (e) here. It's kind of subtle, but it's simple and\nhas no side effects.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e4580a1d7b1178eb1559367d74fe1eac208e14bb", "commit_date": "2023-10-13T21:19:58Z", "commit_message": "Sync with 'master'", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a9ecda2788e229afc9b611acaa26d0d9d4da53ed", "commit_date": "2023-10-13T21:18:29Z", "commit_message": "The eighteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2920971a7fd345eeaa72feae554030850e06aeec", "commit_date": "2023-10-13T21:18:28Z", "commit_message": "Merge branch 'jk/decoration-and-other-leak-fixes'\n\nLeakfix.\n\n* jk/decoration-and-other-leak-fixes:\n  daemon: free listen_addr before returning\n  revision: clear decoration structs during release_revisions()\n  decorate: add clear_decoration() function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "09dcbb486d964b59222136dd1668023098658eda", "commit_date": "2023-10-13T21:18:28Z", "commit_message": "Merge branch 'ar/diff-index-merge-base-fix'\n\n\"git diff --merge-base X other args...\" insisted that X must be a\ncommit and errored out when given an annotated tag that peels to a\ncommit, but we only need it to be a committish.  This has been\ncorrected.\n\n* ar/diff-index-merge-base-fix:\n  diff: fix --merge-base with annotated tags", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b32f5b6b34a2062e94d546c923e3bcb97aba4a16", "commit_date": "2023-10-13T21:18:28Z", "commit_message": "Merge branch 'js/submodule-fix-misuse-of-path-and-name'\n\nIn .gitmodules files, submodules are keyed by their names, and the\npath to the submodule whose name is $name is specified by the\nsubmodule.$name.path variable.  There were a few codepaths that\nmixed the name and path up when consulting the submodule database,\nwhich have been corrected.  It took long for these bugs to be found\nas the name of a submodule initially is the same as its path, and\nthe problem does not surface until it is moved to a different path,\nwhich apparently happens very rarely.\n\n* js/submodule-fix-misuse-of-path-and-name:\n  t7420: test that we correctly handle renamed submodules\n  t7419: test that we correctly handle renamed submodules\n  t7419, t7420: use test_cmp_config instead of grepping .gitmodules\n  t7419: actually test the branch switching\n  submodule--helper: return error from set-url when modifying failed\n  submodule--helper: use submodule_from_path in set-{url,branch}", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a45eddec40b7fd0b9a86ccd0e889a785829d55d7", "commit_date": "2023-10-13T21:18:28Z", "commit_message": "Merge branch 'jk/commit-graph-leak-fixes'\n\nLeakfix.\n\n* jk/commit-graph-leak-fixes:\n  commit-graph: clear oidset after finishing write\n  commit-graph: free write-context base_graph_name during cleanup\n  commit-graph: free write-context entries before overwriting\n  commit-graph: free graph struct that was not added to chain\n  commit-graph: delay base_graph assignment in add_graph_to_chain()\n  commit-graph: free all elements of graph chain\n  commit-graph: move slab-clearing to close_commit_graph()\n  merge: free result of repo_get_merge_bases()\n  commit-reach: free temporary list in get_octopus_merge_bases()\n  t6700: mark test as leak-free", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c75e91499ba78278418b76f85964642a18af449c", "commit_date": "2023-10-13T21:18:27Z", "commit_message": "Merge branch 'la/trailer-test-and-doc-updates'\n\nTest coverage for trailers has been improved.\n\n* la/trailer-test-and-doc-updates:\n  trailer doc: <token> is a <key> or <keyAlias>, not both\n  trailer doc: separator within key suppresses default separator\n  trailer doc: emphasize the effect of configuration variables\n  trailer --unfold help: prefer \"reformat\" over \"join\"\n  trailer --parse docs: add explanation for its usefulness\n  trailer --only-input: prefer \"configuration variables\" over \"rules\"\n  trailer --parse help: expose aliased options\n  trailer --no-divider help: describe usual \"---\" meaning\n  trailer: trailer location is a place, not an action\n  trailer doc: narrow down scope of --where and related flags\n  trailer: add tests to check defaulting behavior with --no-* flags\n  trailer test description: this tests --where=after, not --where=before\n  trailer tests: make test cases self-contained", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e56b9edf228928fed72578bb7a4e6a35b47c551c", "commit_date": "2023-10-13T21:18:27Z", "commit_message": "Merge branch 'ds/mailmap-entry-update'\n\nUpdate mailmap entry for Derrick.\n\n* ds/mailmap-entry-update:\n  mailmap: change primary address for Derrick Stolee", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5143ac07b17e2b025865378fce24cc11ac7bf8b1", "commit_date": "2023-10-13T20:33:35Z", "commit_message": "Prevent git from rehashing 4GiB files\n\nThe index stores file sizes using a uint32_t. This causes any file\nthat is a multiple of 2^32 to have a cached file size of zero.\nZero is a special value used by racily clean. This causes git to\nrehash every file that is a multiple of 2^32 every time git status\nor git commit is run.\n\nThis patch mitigates the problem by making all files that are a\nmultiple of 2^32 appear to have a size of 1<<31 instead of zero.\n\nThe value of 1<<31 is chosen to keep it as far away from zero\nas possible to help prevent things getting mixed up with unpatched\nversions of git.\n\nAn example would be to have a 2^32 sized file in the index of\npatched git. Patched git would save the file as 2^31 in the cache.\nAn unpatched git would very much see the file has changed in size\nand force it to rehash the file, which is safe. The file would\nhave to grow or shrink by exactly 2^31 and retain all of its\nctime, mtime, and other attributes for old git to not notice\nthe change.\n\nThis patch does not change the behavior of any file that is not\nan exact multiple of 2^32.\n\nSigned-off-by: Jason D. Hatton <jhatton@globalfinishing.com>\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "678eb55f5da174fce21f686f0073d56904c081c9", "commit_date": "2023-10-13T20:33:35Z", "commit_message": "t: add a test helper to truncate files\n\nIn a future commit, we're going to work with some large files which will\nbe at least 4 GiB in size.  To take advantage of the sparseness\nfunctionality on most Unix systems and avoid running the system out of\ndisk, it would be convenient to use truncate(2) to simply create a\nsparse file of sufficient size.\n\nHowever, the GNU truncate(1) utility isn't portable, so let's write a\ntiny test helper that does the work for us.\n\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aed0368e0ec22719bf8aa6dece549de780395f82", "commit_date": "2023-10-12T19:19:16Z", "commit_message": "Sync with 'master'", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "501b960e8c955544a1c89086dcf901c1de5b5491", "commit_date": "2023-10-12T19:19:08Z", "commit_message": "Merge branch 'ps/rewritten-is-per-worktree-doc' into next\n\nDoc update.\n\n* ps/rewritten-is-per-worktree-doc:\n  doc/git-worktree: mention \"refs/rewritten\" as per-worktree refs", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3cbb4c22681c073d7c6a7ee972bf67f0b69ea1c9", "commit_date": "2023-10-12T19:19:08Z", "commit_message": "Merge branch 'ak/pretty-decorate-more-fix' into next\n\nUnlike \"git log --pretty=%D\", \"git log --pretty=\"%(decorate)\" did\nnot auto-initialize the decoration subsystem, which has been\ncorrected.\n\n* ak/pretty-decorate-more-fix:\n  pretty: fix ref filtering for %(decorate) formats", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "99e2f83855abc097983308f5f24088f28b4cae8f", "commit_date": "2023-10-12T19:19:08Z", "commit_message": "Merge branch 'vd/loose-ref-iteration-optimization' into next\n\nThe code to iterate over loose references have been optimized to\nreduce the number of lstat() system calls.\n\n* vd/loose-ref-iteration-optimization:\n  files-backend.c: avoid stat in 'loose_fill_ref_dir'\n  dir.[ch]: add 'follow_symlink' arg to 'get_dtype'\n  dir.[ch]: expose 'get_dtype'\n  ref-cache.c: fix prefix matching in ref iteration", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9b873601df350f80c37a3b9b44020a47641e2e1c", "commit_date": "2023-10-12T19:19:07Z", "commit_message": "Merge branch 'ty/merge-tree-strategy-options' into next\n\n\"git merge-tree\" learned to take strategy backend specific options\nvia the \"-X\" option, like \"git merge\" does.\n\n* ty/merge-tree-strategy-options:\n  merge: introduce {copy|clear}_merge_options()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3de300ac6299d7d2c55e6f724b9ab3f00d39f221", "commit_date": "2023-10-12T19:19:06Z", "commit_message": "Merge branch 'ds/mailmap-entry-update' into next\n\n* ds/mailmap-entry-update:\n  mailmap: change primary address for Derrick Stolee", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59167d7d09fd7a1d64aa1d5be73bc484f6621894", "commit_date": "2023-10-12T19:18:27Z", "commit_message": "The seventeenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4ae4c705775132ff7f782966d20fc2dac1795691", "commit_date": "2023-10-12T19:18:27Z", "commit_message": "Merge branch 'js/ci-coverity'\n\nGitHub CI workflow has learned to trigger Coverity check.\n\n* js/ci-coverity:\n  coverity: detect and report when the token or project is incorrect\n  coverity: allow running on macOS\n  coverity: support building on Windows\n  coverity: allow overriding the Coverity project\n  coverity: cache the Coverity Build Tool\n  ci: add a GitHub workflow to submit Coverity scans", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c70e7a3cfd403fb6d669d3be8fbe3d530d3d8329", "commit_date": "2023-10-12T19:18:26Z", "commit_message": "Merge branch 'jm/git-status-submodule-states-docfix'\n\nDocfix.\n\n* jm/git-status-submodule-states-docfix:\n  git-status.txt: fix minor asciidoc format issue", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6e47cfcffc19a5a9cd5a04b0f81e26c123ba8ca8", "commit_date": "2023-10-12T19:18:26Z", "commit_message": "Merge branch 'rs/parse-opt-ctx-cleanup'\n\nCode clean-up.\n\n* rs/parse-opt-ctx-cleanup:\n  parse-options: drop unused parse_opt_ctx_t member", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6e5457d8c7332c279e1482c442922f954af5f8f2", "commit_date": "2023-10-12T17:59:36Z", "commit_message": "mailmap: change primary address for Derrick Stolee\n\nThe previous primary address is no longer valid.\n\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d9b6634589d5c59b49fd2fc41953469173a40ff5", "commit_date": "2023-10-11T23:27:30Z", "commit_message": "stash: be careful what we store\n\n\"git stash store\" is meant to store what \"git stash create\"\nproduces, as these two are implementation details of the end-user\nfacing \"git stash save\" command.  Even though it is clearly\ndocumented as such, users would try silly things like \"git stash\nstore HEAD\" to render their stash unusable.\n\nWorse yet, because \"git stash drop\" does not allow such a stash\nentry to be removed, \"git stash clear\" would be the only way to\nrecover from such a mishap.  Reuse the logic that allows \"drop\" to\nrefrain from working on such a stash entry to teach \"store\" to avoid\nstoring an object that is not a stash entry in the first place.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b182658e3ed412e21a472db42ebc37130cee68e0", "commit_date": "2023-10-11T20:37:47Z", "commit_message": "merge: introduce {copy|clear}_merge_options()\n\nWhen mostly the same set of options are to be used to perform\nmultiple merges, one instance of the merge_options structure may\nwant to be created and used by copying from the same template\ninstance.  We saw such a use recently in \"git merge-tree\".\n\nLet's make the pattern official by introducing copy_merge_options()\nas a supported way to make a copy of the structure, and also give\nclear_merge_options() to release any resources held by a copied\ninstance.  Currently we only make a shallow copy, so the former is a\nmere structure assignment while the latter is a no-op, but this may\nchange in the future as the members of merge_options structure\nevolve.\n\nSuggested-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "989b7e0362472e4b4bd6a089ca4d4971fbf74bb7", "commit_date": "2023-10-10T18:41:34Z", "commit_message": "Sync with 'master'", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "21139603cebd66226776d6ffa7e2cda585b9be30", "commit_date": "2023-10-10T18:41:24Z", "commit_message": "Merge branch 'jk/chunk-bounds' into next\n\nThe codepaths that read \"chunk\" formatted files have been corrected\nto pay attention to the chunk size and notice broken files.\n\n* jk/chunk-bounds:\n  chunk-format: drop pair_chunk_unsafe()\n  commit-graph: detect out-of-order BIDX offsets\n  commit-graph: check bounds when accessing BIDX chunk\n  commit-graph: check bounds when accessing BDAT chunk\n  commit-graph: bounds-check generation overflow chunk\n  commit-graph: check size of generations chunk\n  commit-graph: bounds-check base graphs chunk\n  commit-graph: detect out-of-bounds extra-edges pointers\n  commit-graph: check size of commit data chunk\n  midx: check size of revindex chunk\n  midx: bounds-check large offset chunk\n  midx: check size of object offset chunk\n  midx: enforce chunk alignment on reading\n  midx: check size of pack names chunk\n  commit-graph: check consistency of fanout table\n  midx: check size of oid lookup chunk\n  commit-graph: check size of oid fanout chunk\n  midx: stop ignoring malformed oid fanout chunk\n  t: add library for munging chunk-format files\n  chunk-format: note that pair_chunk() is unsafe", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b139b87502988de17ade23d2c925d9ec96417a5e", "commit_date": "2023-10-10T18:41:24Z", "commit_message": "Merge branch 'jc/merge-ort-attr-index-fix' into next\n\nFix \"git merge-tree\" to stop segfaulting when the --attr-source\noption is used.\n\n* jc/merge-ort-attr-index-fix:\n  merge-ort: initialize repo in index state", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6719ba7bd43a9a605ca94fc88c991b307075f390", "commit_date": "2023-10-10T18:41:24Z", "commit_message": "Merge branch 'sn/cat-file-doc-update' into next\n\n\"git cat-file\" documentation updates.\n\n* sn/cat-file-doc-update:\n  doc/cat-file: make synopsis and description less confusing", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0bf3d9ed51ed440e6605e33bad21e998d17ac1ff", "commit_date": "2023-10-10T18:41:23Z", "commit_message": "Merge branch 'xz/commit-title-soft-limit-doc' into next\n\nDoc update.\n\n* xz/commit-title-soft-limit-doc:\n  doc: correct the 50 characters soft limit (+)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aab89be2eb6ca51eefeb8c8066f673f447058856", "commit_date": "2023-10-10T18:39:15Z", "commit_message": "The sixteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1fdedb7c7d60f48dcfab875f9f2027ae2d1b777c", "commit_date": "2023-10-10T18:39:15Z", "commit_message": "Merge branch 'cc/repack-sift-filtered-objects-to-separate-pack'\n\n\"git repack\" machinery learns to pay attention to the \"--filter=\"\noption.\n\n* cc/repack-sift-filtered-objects-to-separate-pack:\n  gc: add `gc.repackFilterTo` config option\n  repack: implement `--filter-to` for storing filtered out objects\n  gc: add `gc.repackFilter` config option\n  repack: add `--filter=<filter-spec>` option\n  pack-bitmap-write: rebuild using new bitmap when remapping\n  repack: refactor finding pack prefix\n  repack: refactor finishing pack-objects command\n  t/helper: add 'find-pack' test-tool\n  pack-objects: allow `--filter` without `--stdout`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "afb0d0880abb56d8084f1fac704e17f82d491bc9", "commit_date": "2023-10-10T18:39:14Z", "commit_message": "Merge branch 'ds/init-diffstat-width'\n\nCode clean-up.\n\n* ds/init-diffstat-width:\n  diff --stat: set the width defaults in a helper function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a7a2d10421b735944f376f1de53b437bfbb93e88", "commit_date": "2023-10-10T18:39:14Z", "commit_message": "Merge branch 'cw/prelim-cleanup'\n\nShuffle some bits across headers and sources to prepare for\nlibification effort.\n\n* cw/prelim-cleanup:\n  parse: separate out parsing functions from config.h\n  config: correct bad boolean env value error message\n  wrapper: reduce scope of remove_or_warn()\n  hex-ll: separate out non-hash-algo functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3df51ea0a5ef88b801ab30ca28f159b898183926", "commit_date": "2023-10-10T18:39:14Z", "commit_message": "Merge branch 'eb/limit-bulk-checkin-to-blobs'\n\nThe \"streaming\" interface used for bulk-checkin codepath has been\nnarrowed to take only blob objects for now, with no real loss of\nfunctionality.\n\n* eb/limit-bulk-checkin-to-blobs:\n  bulk-checkin: only support blobs in index_bulk_checkin", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8b3aa36f5a7a0c923bc4a28ff19caae78644ae08", "commit_date": "2023-10-10T16:23:16Z", "commit_message": "doc/git-worktree: mention \"refs/rewritten\" as per-worktree refs\n\nSome references are special in the context of worktrees as they are\nconsidered to be per-worktree instead of shared across all of the\nworktrees. Most importantly, this includes \"refs/worktree/\" that have\nexplicitly been designed such that users can create per-woorktree refs.\nBut there are also special references that have an associated meaning\nlike \"refs/bisect/\", which is used to track state of git-bisect(1).\n\nThese special per-worktree references are documented in git-worktree(1),\nbut one instance is missing. In a9be29c9817 (sequencer: make refs\ngenerated by the `label` command worktree-local, 2018-04-25), we have\nconverted \"refs/rewritten/\" to be a per-worktree reference as well.\nThese references are used by our sequencer infrastructure to generate\nlabels for rebased commits. So in order to allow for multiple concurrent\nrebases to happen in different worktrees, these references need to be\ntracked per worktree.\n\nWe forgot to update our documentation to mention these new per-worktree\nreferences, which is fixed by this patch.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ca06f0fe5d8f3e93da1486b880f0e94f1c11238a", "commit_date": "2023-10-09T22:55:02Z", "commit_message": "chunk-format: drop pair_chunk_unsafe()\n\nThere are no callers left, and we don't want anybody to add new ones (they\nshould use the not-unsafe version instead). So let's drop the function.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12192a9db9beb3c45dd5064f34d1fcdc71f6a062", "commit_date": "2023-10-09T22:55:02Z", "commit_message": "commit-graph: detect out-of-order BIDX offsets\n\nThe BIDX chunk tells us the offsets at which each commit's Bloom filters\ncan be found in the BDAT chunk. We compute the length of each filter by\nchecking the offsets of neighbors and subtracting them.\n\nIf the offsets are out of order, then we'll get a negative length, which\nwe then store as a very large unsigned value. This can cause us to read\nout-of-bounds memory, as we access the hash data modulo \"filter->len *\nBITS_PER_WORD\".\n\nWe can easily detect this case when loading the individual filters.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "581e0f8b189b5b3d50aae16be09941ab6fccf335", "commit_date": "2023-10-09T22:55:01Z", "commit_message": "commit-graph: check bounds when accessing BIDX chunk\n\nWe load the bloom_filter_indexes chunk using pair_chunk(), so we have no\nidea how big it is. This can lead to out-of-bounds reads if it is\nsmaller than expected, since we index it based on the number of commits\nfound elsewhere in the graph file.\n\nWe can check the chunk size up front, like we do for CDAT and other\nchunks with one fixed-size record per commit.\n\nThe test case demonstrates the problem. It actually won't segfault,\nbecause we end up reading random data from the follow-on chunk (BDAT in\nthis case), and the bounds checks added in the previous patch complain.\nBut this is by no means assured, and you can craft a commit-graph file\nwith BIDX at the end (or a smaller BDAT) that does segfault.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "920f400e919c7c51f81adc6989cdd52630220783", "commit_date": "2023-10-09T22:55:01Z", "commit_message": "commit-graph: check bounds when accessing BDAT chunk\n\nWhen loading Bloom filters from a commit-graph file, we use the offset\nvalues in the BIDX chunk to index into the memory mapped for the BDAT\nchunk. But since we don't record how big the BDAT chunk is, we just\ntrust that the BIDX offsets won't cause us to read outside of the chunk\nmemory. A corrupted or malicious commit-graph file will cause us to\nsegfault (in practice this isn't a very interesting attack, since\ncommit-graph files are local-only, and the worst case is an\nout-of-bounds read).\n\nWe can't fix this by checking the chunk size during parsing, since the\ndata in the BDAT chunk doesn't have a fixed size (that's why we need the\nBIDX in the first place). So we'll fix it in two parts:\n\n  1. Record the BDAT chunk size during parsing, and then later check\n     that the BIDX offsets we look up are within bounds.\n\n  2. Because the offsets are relative to the end of the BDAT header, we\n     must also make sure that the BDAT chunk is at least as large as the\n     expected header size. Otherwise, we overflow when trying to move\n     past the header, even for an offset of \"0\". We can check this\n     early, during the parsing stage.\n\nThe error messages are rather verbose, but since this is not something\nyou'd expect to see outside of severe bugs or corruption, it makes sense\nto err on the side of too many details. Sadly we can't mention the\nfilename during the chunk-parsing stage, as we haven't set g->filename\nat this point, nor passed it down through the stack.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ee6a7924124b2a9030da55c94a27829e410b3b64", "commit_date": "2023-10-09T22:55:01Z", "commit_message": "commit-graph: bounds-check generation overflow chunk\n\nIf the generation entry in a commit-graph doesn't fit, we instead insert\nan offset into a generation overflow chunk. But since we don't record\nthe size of the chunk, we may read outside the chunk if the offset we\nfind on disk is malicious or corrupted.\n\nWe can't check the size of the chunk up-front; it will vary based on how\nmany entries need overflow. So instead, we'll do a bounds-check before\naccessing the chunk memory. Unfortunately there is no error-return from\nthis function, so we'll just have to die(), which is what it does for\nother forms of corruption.\n\nAs with other cases, we can drop the st_mult() call, since we know our\nbounds-checked value will fit within a size_t.\n\nBefore this patch, the test here actually \"works\" because we read\ngarbage data from the next chunk. And since that garbage data happens\nnot to provide a generation number which changes the output, it appears\nto work. We could construct a case that actually segfaults or produces\nwrong output, but it would be a bit tricky. For our purposes its\nsufficient to check that we've detected the bounds error.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4a3c34662bc56a0e2369635536ac2ee1e79d8f56", "commit_date": "2023-10-09T22:55:01Z", "commit_message": "commit-graph: check size of generations chunk\n\nWe neither check nor record the size of the generations chunk we parse\nfrom a commit-graph file. This should have one uint32_t for each commit\nin the file; if it is smaller (due to corruption, etc), we may read\noutside the mapped memory.\n\nThe included test segfaults without this patch, as it shrinks the size\nconsiderably (and the chunk is near the end of the file, so we read off\nthe end of the array rather than accidentally reading another chunk).\n\nWe can fix this by checking the size up front (like we do for other\nfixed-size chunks, like CDAT).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6cf61d0db55291c3b8406a6ba8f20fdfb9a4a344", "commit_date": "2023-10-09T22:55:01Z", "commit_message": "commit-graph: bounds-check base graphs chunk\n\nWhen we are loading a commit-graph chain, we check that each slice of the\nchain points to the appropriate set of base graphs via its BASE chunk.\nBut since we don't record the size of the chunk, we may access\nout-of-bounds memory if the file is corrupted.\n\nSince we know the number of entries we expect to find (based on the\nposition within the commit-graph-chain file), we can just check the size\nup front.\n\nIn theory this would also let us drop the st_mult() call a few lines\nlater when we actually access the memory, since we know that the\ncomputed offset will fit in a size_t. But because the operands\n\"g->hash_len\" and \"n\" have types \"unsigned char\" and \"int\", we'd have to\ncast to size_t first. Leaving the st_mult() does that cast, and makes it\nmore obvious that we don't have an overflow problem.\n\nNote that the test does not actually segfault before this patch, since\nit just reads garbage from the chunk after BASE (and indeed, it even\nrejects the file because that garbage does not have the expected hash\nvalue). You could construct a file with BASE at the end that did\nsegfault, but corrupting the existing one is easy, and we can check\nstderr for the expected message.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9622610e55c7d4f81a924387947884b2ac268934", "commit_date": "2023-10-09T22:55:01Z", "commit_message": "commit-graph: detect out-of-bounds extra-edges pointers\n\nIf an entry in a commit-graph file has more than 2 parents, the\nfixed-size parent fields instead point to an offset within an \"extra\nedges\" chunk. We blindly follow these, assuming that the chunk is\npresent and sufficiently large; this can lead to an out-of-bounds read\nfor a corrupt or malicious file.\n\nWe can fix this by recording the size of the chunk and adding a\nbounds-check in fill_commit_in_graph(). There are a few tricky bits:\n\n  1. We'll switch from working with a pointer to an offset. This makes\n     some corner cases just fall out naturally:\n\n      a. If we did not find an EDGE chunk at all, our size will\n         correctly be zero (so everything is \"out of bounds\").\n\n      b. Comparing \"size / 4\" lets us make sure we have at least 4 bytes\n         to read, and we never compute a pointer more than one element\n         past the end of the array (computing a larger pointer is\n         probably OK in practice, but is technically undefined\n         behavior).\n\n      c. The current code casts to \"uint32_t *\". Replacing it with an\n         offset avoids any comparison between different types of pointer\n         (since the chunk is stored as \"unsigned char *\").\n\n  2. This is the first case in which fill_commit_in_graph() may return\n     anything but success. We need to make sure to roll back the\n     \"parsed\" flag (and any parents we might have added before running\n     out of buffer) so that the caller can cleanly fall back to\n     loading the commit object itself.\n\n     It's a little non-trivial to do this, and we might benefit from\n     factoring it out. But we can wait on that until we actually see a\n     second case where we return an error.\n\nAs a bonus, this lets us drop the st_mult() call. Since we've already\ndone a bounds check, we know there won't be any integer overflow (it\nwould imply our buffer is larger than a size_t can hold).\n\nThe included test does not actually segfault before this patch (though\nyou could construct a case where it does). Instead, it reads garbage\nfrom the next chunk which results in it complaining about a bogus parent\nid. This is sufficient for our needs, though (we care that the fallback\nsucceeds, and that stderr mentions the out-of-bounds read).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b72df612afc12b46ea003732d739d7d746871773", "commit_date": "2023-10-09T22:55:01Z", "commit_message": "commit-graph: check size of commit data chunk\n\nWe expect a commit-graph file to have a fixed-size data record for each\ncommit in the file (and we know the number of commits to expct from the\nsize of the lookup table). If we encounter a file where this is too\nsmall, we'll look past the end of the chunk (and possibly even off the\nmapped memory).\n\nWe can fix this by checking the size up front when we record the\npointer.\n\nThe included test doesn't segfault, since it ends up reading bytes\nfrom another chunk. But it produces nonsense results, since the values\nit reads are garbage. Our test notices this by comparing the output to a\nnon-corrupted run of the same command (and of course we also check that\nthe expected error is printed to stderr).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c0fe9b2da5610bd4ff62d7871dfbbfa0247c7949", "commit_date": "2023-10-09T22:55:01Z", "commit_message": "midx: check size of revindex chunk\n\nWhen we load a revindex from disk, we check the size of the file\ncompared to the number of objects we expect it to have. But when we use\na RIDX chunk stored directly in the midx, we just access the memory\ndirectly. This can lead to out-of-bounds memory access for a corrupted\nor malicious multi-pack-index file.\n\nWe can catch this by recording the RIDX chunk size, and then checking it\nagainst the expected size when we \"load\" the revindex. Note that this\ncheck is much simpler than the one that load_revindex_from_disk() does,\nbecause we just have the data array with no header (so we do not need\nto account for the header size, and nor do we need to bother validating\nthe header values).\n\nThe test confirms both that we catch this case, and that we continue the\nprocess (the revindex is required to use the midx bitmaps, but we\nfallback to a non-bitmap traversal).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2abd56e9b2195c8111ff5d16efafabc5bccba92b", "commit_date": "2023-10-09T22:55:01Z", "commit_message": "midx: bounds-check large offset chunk\n\nWhen we see a large offset bit in the regular midx offset table, we\nuse the entry as an index into a separate large offset table (just like\na pack idx does). But we don't bounds-check the access to that large\noffset table (nor even record its size when we parse the chunk!).\n\nThe equivalent code for a regular pack idx is in check_pack_index_ptr().\nBut things are a bit simpler here because of the chunked format: we can\njust check our array index directly.\n\nAs a bonus, we can get rid of the st_mult() here. If our array\nbounds-check is successful, then we know that the result will fit in a\nsize_t (and the bounds check uses a division to avoid overflow\nentirely).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0924869b4e27ff9db63e2d85b892244e058fecc3", "commit_date": "2023-10-09T22:55:01Z", "commit_message": "midx: check size of object offset chunk\n\nThe object offset chunk has one fixed-size entry for each object in the\nmidx. But since we don't check its size, we may access out-of-bounds\nmemory if we see a corrupt or malicious midx file.\n\nSine the entries are fixed-size, the total length can be known up-front,\nand we can just check it while parsing the chunk (this is similar to\nwhat we do when opening pack idx files, which contain a similar offset\ntable).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c9b9fefc13ccce7ed248488c982d1da38b0905c7", "commit_date": "2023-10-09T22:55:01Z", "commit_message": "midx: enforce chunk alignment on reading\n\nThe midx reader assumes chunks are aligned to a 4-byte boundary: we\ntreat the fanout chunk as an array of uint32_t, indexing it to feed the\nresults to ntohl(). Without aligning the chunks, we may violate the\nCPU's alignment constraints. Though many platforms allow this, some do\nnot. And certanily UBSan will complain, since it is undefined behavior.\n\nEven though most chunks are naturally 4-byte-aligned (because they are\nstoring uint32_t or larger types), PNAM is not. It stores NUL-terminated\npack names, so you can have a valid chunk with any length. The writing\nside handles this by 4-byte-aligning the chunk, introducing a few extra\nNULs as necessary. But since we don't check this on the reading side, we\nmay end up with a misaligned fanout and trigger the undefined behavior.\n\nWe have two options here:\n\n  1. Swap out ntohl(fanout[i]) for get_be32(fanout+i) everywhere. The\n     latter handles alignment itself. It's possible that it's slightly\n     slower (though in practice I'm not sure how true that is,\n     especially for these code paths which then go on to do a binary\n     search).\n\n  2. Enforce the alignment when reading the chunks. This is easy to do,\n     since the table-of-contents reader can check it in one spot.\n\nI went with the second option here, just because it places less burden\non maintenance going forward (it is OK to continue using ntohl), and we\nknow it can't have any performance impact on the actual reads.\n\nThe commit-graph code uses the same chunk API. It's usually also 4-byte\naligned, but some chunks are not (like Bloom filter BDAT chunks). So\nwe'll pass \"1\" here to allow any alignment. It doesn't suffer from the\nsame problem as midx with its fanout because the fanout chunk is always\nthe first (and the rest of the format dictates that the first chunk will\nstart aligned).\n\nThe new test shows the effect on a midx with a misaligned PNAM chunk.\nNote that the midx-reading code treats chunk-toc errors as soft, falling\nback to the non-midx path rather than calling die(), as we do for other\nparsing errors. Arguably we should make all of these behave the same,\nbut that's out of scope for this patch. For now the test just expects\nthe fallback behavior.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "72a9a08283f1b56598d4af5efb8cd178d4150323", "commit_date": "2023-10-09T22:55:01Z", "commit_message": "midx: check size of pack names chunk\n\nWe parse the pack-name chunk as a series of NUL-terminated strings. But\nsince we don't look at the chunk size, there's nothing to guarantee that\nwe don't parse off the end of the chunk (or even off the end of the\nmapped file).\n\nWe can record the length, and then as we parse make sure that we never\nwalk past it.\n\nThe new test exercises the case, though note that it does not actually\nsegfault before this patch. It hits a NUL byte somewhere in one of the\nother chunks, and comes up with a garbage pack name. You could construct\none that reads out-of-bounds (e.g., a PNAM chunk at the end of file),\nbut this case is simple and sufficient to check that we detect the\nproblem.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4169d8964523198ca89f507824c07b70ba833732", "commit_date": "2023-10-09T22:55:00Z", "commit_message": "commit-graph: check consistency of fanout table\n\nWe use bsearch_hash() to look up items in the oid index of a\ncommit-graph. It also has a fanout table to reduce the initial range in\nwhich we'll search. But since the fanout comes from the on-disk file, a\ncorrupted or malicious file can cause us to look outside of the\nallocated index memory.\n\nOne solution here would be to pass the total table size to\nbsearch_hash(), which could then bounds check the values it reads from\nthe fanout. But there's an inexpensive up-front check we can do, and\nit's the same one used by the midx and pack idx code (both of which\nlikewise have fanout tables and use bsearch_hash(), but are not affected\nby this bug):\n\n  1. We can check the value of the final fanout entry against the size\n     of the table we got from the index chunk. These must always match,\n     since the fanout is just slicing up the index.\n\n       As a side note, the midx and pack idx code compute it the other\n       way around: they use the final fanout value as the object count, and\n       check the index size against it. Either is valid; if they\n       disagree we cannot know which is wrong (a corrupted fanout value,\n       or a too-small table of oids).\n\n  2. We can quickly scan the fanout table to make sure it is\n     monotonically increasing. If it is, then we know that every value\n     is less than or equal to the final value, and therefore less than\n     or equal to the table size.\n\n     It would also be sufficient to just check that each fanout value is\n     smaller than the final one, but the midx and pack idx code both do\n     a full monotonicity check. It's the same cost, and it catches some\n     other corruptions (though not all; the checks done by \"commit-graph\n     verify\" are more complete but more expensive, and our goal here is\n     to be fast and memory-safe).\n\nThere are two new tests. One just checks the final fanout value (this is\nthe mirror image of the \"too small oid lookup\" case added for the midx\nin the previous commit; it's flipped here because commit-graph considers\nthe oid lookup chunk to be the source of truth).\n\nThe other actually creates a fanout with many out-of-bounds entries, and\nprior to this patch, it does cause the segfault you'd expect. But note\nthat the error is not \"your fanout entry is out-of-bounds\", but rather\n\"fanout value out of order\". That's because we leave the final fanout\nvalue in place (to get past the table size check), making the index\nnon-monotonic (the second-to-last entry is big, but the last one must\nremain small to match the actual table).\n\nWe need adjustments to a few existing tests, as well:\n\n  - an earlier test in t5318 corrupts the fanout and runs \"commit-graph\n    verify\". Its message is now changed, since we catch the problem\n    earlier (during the load step, rather than the careful validation\n    step).\n\n  - in t5324, we test that \"commit-graph verify --shallow\" does not do\n    expensive verification on the base file of the chain. But the\n    corruption it uses (munging a byte at offset 1000) happens to be in\n    the middle of the fanout table. And now we detect that problem in\n    the cheaper checks that are performed for every part of the graph.\n    We'll push this back to offset 1500, which is only caught by the\n    more expensive checksum validation.\n\n    Likewise, there's a later test in t5324 which munges an offset 100\n    bytes into a file (also in the fanout table) that is referenced by\n    an alternates file. So we now find that corruption during the load\n    step, rather than the verification step. At the very least we need\n    to change the error message (like the case above in t5318). But it\n    is probably good to make sure we handle all parts of the\n    verification even for alternate graph files. So let's likewise\n    corrupt byte 1500 and make sure we found the invalid checksum.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc926567ede1f82799ef49dd54aa37b4497a5453", "commit_date": "2023-10-09T22:55:00Z", "commit_message": "midx: check size of oid lookup chunk\n\nWhen reading an on-disk multi-pack-index, we take the number of objects\nin the midx from the final value of the fanout table. But we just\nblindly assume that the chunk containing the actual oid entries is the\ncorrect size. This can lead to us reading out-of-bounds memory if the\nlookup chunk is too small (or if the fanout is corrupted; when they\ndon't agree we cannot tell which one is wrong).\n\nNote that we bump the assignment of m->num_objects into the fanout\nparser callback, so that it's set when we parse the lookup table\n(otherwise we'd have to manually record the lookup table size and check\nit later).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "52e2e8d43dbae8c05b68efd60cde2aacf3a23890", "commit_date": "2023-10-09T22:55:00Z", "commit_message": "commit-graph: check size of oid fanout chunk\n\nWe load the oid fanout chunk with pair_chunk(), which means we never see\nthe size of the chunk. We just assume the on-disk file uses the\nappropriate size, and if it's too small we'll access random memory.\n\nIt's easy to check this up-front; the fanout always consists of 256\nuint32's, since it is a fanout of the first byte of the hash pointing\ninto the oid index. These parameters can't be changed without\nintroducing a new chunk type.\n\nThis matches the similar check in the midx OIDF chunk (but note that\nrather than checking for the error immediately, the graph code just\nleaves parts of the struct NULL and checks for required fields later).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e3c9600397bde3dcd2f628ff1eec098f79f79b67", "commit_date": "2023-10-09T22:55:00Z", "commit_message": "midx: stop ignoring malformed oid fanout chunk\n\nWhen we load the oid-fanout chunk, our callback checks that its size is\nreasonable and returns an error if not. However, the caller only checks\nour return value against CHUNK_NOT_FOUND, so we end up ignoring the\nerror completely! Using a too-small fanout table means we end up\naccessing random memory for the fanout and segfault.\n\nWe can fix this by checking for any non-zero return value, rather than\njust CHUNK_NOT_FOUND, and adjusting our error message to cover both\ncases. We could handle each error code individually, but there's not\nmuch point for such a rare case. The extra message produced in the\ncallback makes it clear what is going on.\n\nThe same pattern is used in the adjacent code. Those cases are actually\nOK for now because they do not use a custom callback, so the only error\nthey can get is CHUNK_NOT_FOUND. But let's convert them, as this is an\naccident waiting to happen (especially as we convert some of them away\nfrom pair_chunk). The error messages are more verbose, but it should be\nrare for a user to see these anyway.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "86b008ee61ccf800f613d7de382bd9e3b6bbaa6f", "commit_date": "2023-10-09T22:55:00Z", "commit_message": "t: add library for munging chunk-format files\n\nWhen testing corruption of files using the chunk format (like\ncommit-graphs and midx files), it's helpful to be able to modify bytes\nin specific chunks. This requires being able both to read the\ntable-of-contents (to find the chunk to modify) but also to adjust it\n(to account for size changes in the offsets of subsequent chunks).\n\nWe have some tests already which corrupt chunk files, but they have some\ndownsides:\n\n  1. They are very brittle, as they manually compute the expected size\n     of a particular instance of the file (e.g., see the definitions\n     starting with NUM_OBJECTS in t5319).\n\n  2. Because they rely on manual offsets and don't read the\n     table-of-contents, they're limited to overwriting bytes. But there\n     are many interesting corruptions that involve changing the sizes of\n     chunks (especially smaller-than-expected ones).\n\nThis patch adds a perl script which makes such corruptions easy. We'll\nuse it in subsequent patches.\n\nNote that we could get by with just a big \"perl -e\" inside the helper\nfunction. I chose to put it in a separate script for two reasons. One,\nso we don't have to worry about the extra layer of shell quoting. And\ntwo, the script is kind of big, and running the tests with \"-x\" would\nrepeatedly dump it into the log output.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "570b8b883617df2acfedab88b9f5af0b50c821cd", "commit_date": "2023-10-09T22:55:00Z", "commit_message": "chunk-format: note that pair_chunk() is unsafe\n\nThe pair_chunk() function is provided as an easy helper for parsing\nchunks that just want a pointer to a set of bytes. But every caller has\na hidden bug: because we return only the pointer without the matching\nchunk size, the callers have no clue how many bytes they are allowed to\nlook at. And as a result, they may read off the end of the mmap'd data\nwhen the on-disk file does not match their expectations.\n\nSince chunk files are typically used for local-repository data like\ncommit-graph files and midx's, the security implications here are pretty\nmild. The worst that can happen is that you hand somebody a corrupted\nrepository tarball, and running Git on it does an out-of-bounds read and\ncrashes. So it's worth being more defensive, but we don't need to drop\neverything and fix every caller immediately.\n\nI noticed the problem because the pair_chunk_fn() callback does not look\nat its chunk_size argument, and wanted to annotate it to silence\n-Wunused-parameter. We could do that now, but we'd lose the hint that\nthis code should be audited and fixed.\n\nSo instead, let's set ourselves up for going down that path:\n\n  1. Provide a pair_chunk() function that does return the size, which\n     prepares us for fixing these cases.\n\n  2. Rename the existing function to pair_chunk_unsafe(). That gives us\n     an easy way to grep for cases which still need to be fixed, and the\n     name should cause anybody adding new calls to think twice before\n     using it.\n\nThere are no callers of the \"safe\" version yet, but we'll add some in\nsubsequent patches.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2cdb796101be2feb47a57760b3b0057ad71402bf", "commit_date": "2023-10-09T22:53:14Z", "commit_message": "files-backend.c: avoid stat in 'loose_fill_ref_dir'\n\nModify the 'readdir' loop in 'loose_fill_ref_dir' to, rather than 'stat' a\nfile to determine whether it is a directory or not, use 'get_dtype'.\n\nCurrently, the loop uses 'stat' to determine whether each dirent is a\ndirectory itself or not in order to construct the appropriate ref cache\nentry. If 'stat' fails (returning a negative value), the dirent is silently\nskipped; otherwise, 'S_ISDIR(st.st_mode)' is used to check whether the entry\nis a directory.\n\nOn platforms that include an entry's d_type in in the 'dirent' struct, this\nextra 'stat' check is redundant. We can use the 'get_dtype' method to\nextract this information on platforms that support it (i.e. where\nNO_D_TYPE_IN_DIRENT is unset), and derive it with 'stat' on platforms that\ndon't. Because 'stat' is an expensive call, this confers a\nmodest-but-noticeable performance improvement when iterating over large\nnumbers of refs (approximately 20% speedup in 'git for-each-ref' in a 30k\nref repo).\n\nUnlike other existing usage of 'get_dtype', the 'follow_symlinks' arg is set\nto 1 to replicate the existing handling of symlink dirents. This\nunfortunately requires calling 'stat' on the associated entry regardless of\nplatform, but symlinks in the loose ref store are highly unlikely since\nthey'd need to be created manually by a user.\n\nNote that this patch also changes the condition for skipping creation of a\nref entry from \"when 'stat' fails\" to \"when the d_type is anything other\nthan DT_REG or DT_DIR\". If a dirent's d_type is DT_UNKNOWN (either because\nthe platform doesn't support d_type in dirents or some other reason) or\nDT_LNK, 'get_dtype' will try to derive the underlying type with 'stat'. If\nthe 'stat' fails, the d_type will remain 'DT_UNKNOWN' and dirent will be\nskipped. However, it will also be skipped if it is any other valid d_type\n(e.g. DT_FIFO for named pipes, DT_LNK for a nested symlink). Git does not\nhandle these properly anyway, so we can safely constrain accepted types to\ndirectories and regular files.\n\nSigned-off-by: Victoria Dye <vdye@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aa79636fe70247a19648d73e52a7774536100567", "commit_date": "2023-10-09T22:53:13Z", "commit_message": "dir.[ch]: add 'follow_symlink' arg to 'get_dtype'\n\nAdd a 'follow_symlink' boolean option to 'get_type()'. If 'follow_symlink'\nis enabled, DT_LNK (in addition to DT_UNKNOWN) d_types triggers the\nstat-based d_type resolution, using 'stat' instead of 'lstat' to get the\ntype of the followed symlink. Note that symlinks are not followed\nrecursively, so a symlink pointing to another symlink will still resolve to\nDT_LNK.\n\nUpdate callers in 'diagnose.c' to specify 'follow_symlink = 0' to preserve\ncurrent behavior.\n\nSigned-off-by: Victoria Dye <vdye@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6dc10043338bbb29ffd7f8fc431f37b0fed08ae6", "commit_date": "2023-10-09T22:53:13Z", "commit_message": "dir.[ch]: expose 'get_dtype'\n\nMove 'get_dtype()' from 'diagnose.c' to 'dir.c' and add its declaration to\n'dir.h' so that it is accessible to callers in other files. The function and\nits documentation are moved verbatim except for a small addition to the\ndescription clarifying what the 'path' arg represents.\n\nSigned-off-by: Victoria Dye <vdye@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5305474ec4650755f2c0437c004cabfb1c60cf6a", "commit_date": "2023-10-09T22:53:13Z", "commit_message": "ref-cache.c: fix prefix matching in ref iteration\n\nUpdate 'cache_ref_iterator_advance' to skip over refs that are not matched\nby the given prefix.\n\nCurrently, a ref entry is considered \"matched\" if the entry name is fully\ncontained within the prefix:\n\n* prefix: \"refs/heads/v1\"\n* entry: \"refs/heads/v1.0\"\n\nOR if the prefix is fully contained in the entry name:\n\n* prefix: \"refs/heads/v1.0\"\n* entry: \"refs/heads/v1\"\n\nThe first case is always correct, but the second is only correct if the ref\ncache entry is a directory, for example:\n\n* prefix: \"refs/heads/example\"\n* entry: \"refs/heads/\"\n\nModify the logic in 'cache_ref_iterator_advance' to reflect these\nexpectations:\n\n1. If 'overlaps_prefix' returns 'PREFIX_EXCLUDES_DIR', then the prefix and\n   ref cache entry do not overlap at all. Skip this entry.\n2. If 'overlaps_prefix' returns 'PREFIX_WITHIN_DIR', then the prefix matches\n   inside this entry if it is a directory. Skip if the entry is not a\n   directory, otherwise iterate over it.\n3. Otherwise, 'overlaps_prefix' returned 'PREFIX_CONTAINS_DIR', indicating\n   that the cache entry (directory or not) is fully contained by or equal to\n   the prefix. Iterate over this entry.\n\nNote that condition 2 relies on the names of directory entries having the\nappropriate trailing slash. The existing function documentation of\n'create_dir_entry' explicitly calls out the trailing slash requirement, so\nthis is a safe assumption to make.\n\nThis bug generally doesn't have any user-facing impact, since it requires:\n\n1. using a non-empty prefix without a trailing slash in an iteration like\n   'for_each_fullref_in',\n2. the callback to said iteration not reapplying the original filter (as\n   for-each-ref does) to ensure unmatched refs are skipped, and\n3. the repository having one or more refs that match part of, but not all\n   of, the prefix.\n\nHowever, there are some niche scenarios that meet those criteria\n(specifically, 'rev-parse --bisect' and '(log|show|shortlog) --bisect'). Add\ntests covering those cases to demonstrate the fix in this patch.\n\nSigned-off-by: Victoria Dye <vdye@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e95bafc52f095b33b5a283179e08a44279c293d0", "commit_date": "2023-10-09T21:42:02Z", "commit_message": "merge-ort: initialize repo in index state\n\ninitialize_attr_index() does not initialize the repo member of\nattr_index. Starting in 44451a2e5e (attr: teach \"--attr-source=<tree>\"\nglobal option to \"git\", 2023-05-06), this became a problem because\nistate->repo gets passed down the call chain starting in\ngit_check_attr(). This gets passed all the way down to\nreplace_refs_enabled(), which segfaults when accessing r->gitdir.\n\nFix this by initializing the repository in the index state.\n\nSigned-off-by: John Cai <johncai86@gmail.com>\nHelped-by: Christian Couder <christian.couder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "38f039e8805d5bb71231803f231b5041ef24e397", "commit_date": "2023-10-09T21:21:26Z", "commit_message": "Merge branch 'tb/repack-max-cruft-size' into next\n\n\"git repack\" learned \"--max-cruft-size\" to prevent cruft packs from\ngrowing without bounds.\n\n* tb/repack-max-cruft-size:\n  repack: free existing_cruft array after use", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7c446ac7903555356d66e24dca5e370f0e1158bc", "commit_date": "2023-10-09T19:47:29Z", "commit_message": "completion: complete '--dd'\n\n'--dd' only makes sense for 'git log' and 'git show', so add it to\n__git_log_show_options which is referenced in the completion for these\ntwo commands.\n\nSigned-off-by: Sergey Organov <sorganov@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c8e5cb065802e96c5aa5dd25936d9780c5734182", "commit_date": "2023-10-09T19:47:29Z", "commit_message": "diff-merges: introduce '--dd' option\n\nThis option provides a shortcut to request diff with respect to first\nparent for any kind of commit, universally. It's implemented as pure\nsynonym for \"--diff-merges=first-parent --patch\".\n\nGives user quick and universal way to see what changes, exactly, were\nbrought to a branch by merges as well as by regular commits.\n\nSigned-off-by: Sergey Organov <sorganov@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "be3820c60cc82e0ded1d3f3dcc19fbd59ce56aa2", "commit_date": "2023-10-09T19:47:29Z", "commit_message": "diff-merges: improve --diff-merges documentation\n\n* Put descriptions of convenience shortcuts first, so they are the\n  first things reader observes rather than lengthy detailed stuff.\n\n* Get rid of very long line containing all the --diff-merges formats\n  by replacing them with <format>, and putting each supported format\n  on its own line.\n\nSigned-off-by: Sergey Organov <sorganov@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cebfaaa33332f26e40b99322b7d26f72a2ddcabb", "commit_date": "2023-10-09T19:46:33Z", "commit_message": "doc/cat-file: make synopsis and description less confusing\n\nThe DESCRIPTION's \"first form\" is actually the 1st, 2nd, 3rd and 5th\nform in SYNOPSIS, the \"second form\" is the 4th one.\n\nInterestingly, this state of affairs was introduced in\n97fe7250753b (cat-file docs: fix SYNOPSIS and \"-h\" output, 2021-12-28)\nwith the claim of \"Now the two will match again.\" (\"the two\" being\nDESCRIPTION and SYNOPSIS)...\n\nThe description also suffers from other correctness and clarity issues,\ne.g., the \"first form\" paragraph discusses -p, -s and -t, but leaves out\n-e, which is included in the corresponding SYNOPSIS section; the second\nparagraph mentions <format>, which doesn't occur in SYNOPSIS at all, and\nof the three batch options, really only describes the behavior of\n--batch-check.  Also the mention of \"drivers\" seems an implementation\ndetail not adding much clarity in a short summary (and isn't expanded\nupon in the rest of the man page, either).\n\nRather than trying to maintain one-to-one (or N-to-M) correspondence\nbetween the DESCRIPTION and SYNOPSIS forms, creating duplication and\nproviding opportunities for error, shorten the former into a concise\nsummary describing the two general modes of operation: batch and\nnon-batch, leaving details to the subsequent manual sections.\n\nWhile here, fix a grammar error in the description of -e and make the\nfollowing further minor improvements:\n\n  NAME:\n    shorten (\"content or type and size\" isn't the whole story; say\n    \"details\" and leave the actual details to later sections)\n\n  SYNOPSIS and --help:\n    move the (--textconv | --filters) form before --batch, closer\n    to the other non-batch forms\n\nSigned-off-by: \u0160t\u011bp\u00e1n N\u011bmec <stepnem@smrk.net>\nAcked-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1627e6b4e4b41d25443cc9abf5b09f58153d6f09", "commit_date": "2023-10-09T19:07:26Z", "commit_message": "doc: correct the 50 characters soft limit (+)\n\nThe soft limit of the first line of the commit message should be\n\"no more than 50 characters\" or \"50 characters or less\", but not\n\"less than 50 character\".\n\nThis is an addition to commit c2c349a15c (doc: correct the 50 characters\nsoft limit, 2023-09-28).\n\nSigned-off-by: \u8c22\u81f4\u90a6 (XIE Zhibang) <Yeking@Red54.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5fbcdb2082ab5e154133048547c8f60c418b875c", "commit_date": "2023-10-09T19:06:47Z", "commit_message": "documentation: add missing parenthesis\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "798cddfa513cec8084c9db2f7ba807dc1c9b3d44", "commit_date": "2023-10-09T19:06:47Z", "commit_message": "documentation: add missing quotes\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "845c6ca90e806ac402cd9f1c981844531176475f", "commit_date": "2023-10-09T19:06:47Z", "commit_message": "documentation: add missing fullstops\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4d542687fcea27c6cce9a79415ad8cb1a817697c", "commit_date": "2023-10-09T19:06:44Z", "commit_message": "documentation: add some commas where they are helpful\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42bdb80a084f1405f2e57394146c977ad4f3b75a", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: fix whitespace issues\n\nGet rid of extraneous whitespace, replace tab-after-fullstop with\nspace, etc.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2150b6fb473fe965edc5bbdbcf3b264bdfe544db", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: fix capitalization\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4e1851a291f550b16b16f0b265b5b15976b8533", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: fix punctuation\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a9fd289cc81a3bb69eb2b4e11db27509e0eb515", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: use clearer prepositions\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0cac690e1ac5e26ecf2dba0c53ac3824425446b5", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: add missing hyphens\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f22fdf33aff48def873eed9f5d30abf9fc0d8700", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: remove unnecessary hyphens\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0a4f051f9318c3dd9db69c4bebecdc6d160a5fc6", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: add missing article\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3771d002571f6fc796ff3f54e9d5b875826e62ed", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: fix choice of article\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "03b3431e6a36d9a529f49d938168043b463ca24b", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: whitespace is already generally plural\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6cc668c0abd65415a461c6dddfefffaaeb1d5adc", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: fix singular vs. plural\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "401a4e257e6be731f7dd230b399800a1d79415d0", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: fix verb vs. noun\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "af181e4dbd130cafc90a8d452dc76aaf8efabb14", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: fix adjective vs. noun\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5676b04a44935752314483182114069ecabe230a", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: fix verb tense\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7f7e6bbe06719aa4c6276d5ddf230ba8d6a4d57a", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: employ consistent verb tense for a list\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce14cc0b00098201f967346955804abd774174ea", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: fix subject/verb agreement\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "859a6d6045e338a337cb7499100b1fa31c367fbf", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: remove extraneous words\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89363522424a27b2e43c74a7965566d943cbdba4", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: add missing words\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dbe33c5ad02aa9a6141abccf0821b49c46df2891", "commit_date": "2023-10-09T19:06:29Z", "commit_message": "documentation: fix apostrophe usage\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "384f7d17d2f0d0ca689d8dda16f752c75a8ac634", "commit_date": "2023-10-09T19:06:24Z", "commit_message": "documentation: fix typos\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "82e81edf718302c20c37b17a69a768bc36837a72", "commit_date": "2023-10-09T19:04:21Z", "commit_message": "documentation: fix small error\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cf6cac20059123d6ec3f867bb3692df62db52cf9", "commit_date": "2023-10-09T19:04:21Z", "commit_message": "documentation: wording improvements\n\nDiff best viewed with --color-diff.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2b09d16abac5c0cf389098a58f113f2053357dee", "commit_date": "2023-10-09T18:25:13Z", "commit_message": "pretty: fix ref filtering for %(decorate) formats\n\nMark pretty formats containing \"%(decorate\" as requiring decoration in\nuserformat_find_requirements(), same as \"%d\" and \"%D\".\n\nWithout this, cmd_log_init_finish() didn't invoke load_ref_decorations()\nwith the decoration_filter it puts together, and hence filtering options\nsuch as --decorate-refs were quietly ignored.\n\nAmend one of the %(decorate) checks in t4205-log-pretty-formats.sh to\ntest this.\n\nSigned-off-by: Andy Koppe <andy.koppe@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c1b754d0597be83439ecc8de2a59a90f35cd4040", "commit_date": "2023-10-09T17:27:34Z", "commit_message": "repack: free existing_cruft array after use\n\nWe allocate an array of packed_git pointers so that we can sort the list\nof cruft packs, but we never free the array, causing a small leak. Note\nthat we don't need to free the packed_git structs themselves; they're\nowned by the repository object.\n\nSigned-off-by: Jeff King <peff@peff.net>\nAcked-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5fc05c94dcc1fa9e0ac97428e887ec52d78ec652", "commit_date": "2023-10-06T22:51:21Z", "commit_message": "Merge branch 'jk/decoration-and-other-leak-fixes' into next\n\nLeakfixes.\n\n* jk/decoration-and-other-leak-fixes:\n  daemon: free listen_addr before returning\n  revision: clear decoration structs during release_revisions()\n  decorate: add clear_decoration() function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0ff4dfc0e1bafc6c070b763631679c40a5a79393", "commit_date": "2023-10-06T22:51:21Z", "commit_message": "Merge branch 'ar/diff-index-merge-base-fix' into next\n\n\"git diff --merge-base X other args...\" insisted that X must be a\ncommit and errored out when given an annotated tag that peels to a\ncommit, but we only need it to be a committish.  This has been\ncorrected.\n\n* ar/diff-index-merge-base-fix:\n  diff: fix --merge-base with annotated tags", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1054b6e7526dd72f861f0528c5df4e12b9ca2ce8", "commit_date": "2023-10-06T22:51:21Z", "commit_message": "Merge branch 'js/submodule-fix-misuse-of-path-and-name' into next\n\nIn .gitmodules files, submodules are keyed by their names, and the\npath to the submodule whose name is $name is specified by the\nsubmodule.$name.path variable.  There were a few codepaths that\nmixed the name and path up when consulting the submodule database,\nwhich have been corrected.  It took long for these bugs to be found\nas the name of a submodule initially is the same as its path, and\nthe problem does not surface until it is moved to a different path,\nwhich apparently happens very rarely.\n\n* js/submodule-fix-misuse-of-path-and-name:\n  t7420: test that we correctly handle renamed submodules\n  t7419: test that we correctly handle renamed submodules\n  t7419, t7420: use test_cmp_config instead of grepping .gitmodules\n  t7419: actually test the branch switching\n  submodule--helper: return error from set-url when modifying failed\n  submodule--helper: use submodule_from_path in set-{url,branch}", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b3ca6df3b91ea456cfd255f6dc7c27f7b0be7b6e", "commit_date": "2023-10-06T22:51:21Z", "commit_message": "Merge branch 'tb/repack-max-cruft-size' into next\n\n\"git repack\" learned \"--max-cruft-size\" to prevent cruft packs from\ngrowing without bounds.\n\n* tb/repack-max-cruft-size:\n  builtin/repack.c: avoid making cruft packs preferred\n  builtin/repack.c: implement support for `--max-cruft-size`\n  builtin/repack.c: parse `--max-pack-size` with OPT_MAGNITUDE\n  t7700: split cruft-related tests to t7704", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5d202ef8b9d8920e543a6ececdc975279aa6639c", "commit_date": "2023-10-06T22:51:20Z", "commit_message": "Merge branch 'jk/commit-graph-leak-fixes' into next\n\nLeakfix.\n\n* jk/commit-graph-leak-fixes:\n  commit-graph: clear oidset after finishing write\n  commit-graph: free write-context base_graph_name during cleanup\n  commit-graph: free write-context entries before overwriting\n  commit-graph: free graph struct that was not added to chain\n  commit-graph: delay base_graph assignment in add_graph_to_chain()\n  commit-graph: free all elements of graph chain\n  commit-graph: move slab-clearing to close_commit_graph()\n  merge: free result of repo_get_merge_bases()\n  commit-reach: free temporary list in get_octopus_merge_bases()\n  t6700: mark test as leak-free", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "69fef35819a3d27fab06e79b25128ff3eb064c7d", "commit_date": "2023-10-06T22:51:20Z", "commit_message": "Merge branch 'la/trailer-test-and-doc-updates' into next\n\nTest coverage for trailers has been improved.\n\n* la/trailer-test-and-doc-updates:\n  trailer doc: <token> is a <key> or <keyAlias>, not both\n  trailer doc: separator within key suppresses default separator\n  trailer doc: emphasize the effect of configuration variables\n  trailer --unfold help: prefer \"reformat\" over \"join\"\n  trailer --parse docs: add explanation for its usefulness\n  trailer --only-input: prefer \"configuration variables\" over \"rules\"\n  trailer --parse help: expose aliased options\n  trailer --no-divider help: describe usual \"---\" meaning\n  trailer: trailer location is a place, not an action\n  trailer doc: narrow down scope of --where and related flags\n  trailer: add tests to check defaulting behavior with --no-* flags\n  trailer test description: this tests --where=after, not --where=before\n  trailer tests: make test cases self-contained", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "253788f0d1f17f0ee0bc79ea6503ec728d8e9905", "commit_date": "2023-10-05T21:56:03Z", "commit_message": "Merge branch 'js/ci-coverity' into next\n\nGitHub CI workflow has learned to trigger Coverity check.\n\n* js/ci-coverity:\n  coverity: detect and report when the token or project is incorrect\n  coverity: allow running on macOS\n  coverity: support building on Windows\n  coverity: allow overriding the Coverity project\n  coverity: cache the Coverity Build Tool\n  ci: add a GitHub workflow to submit Coverity scans", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3c1e2c2113842b8462803ef8c9aca596eacfd3af", "commit_date": "2023-10-05T20:26:11Z", "commit_message": "builtin/repack.c: avoid making cruft packs preferred\n\nWhen doing a `--geometric` repack, we make sure that the preferred pack\n(if writing a MIDX) is the largest pack that we *didn't* repack. That\nhas the effect of keeping the preferred pack in sync with the pack\ncontaining a majority of the repository's reachable objects.\n\nBut if the repository happens to double in size, we'll repack\neverything. Here we don't specify any `--preferred-pack`, and instead\nlet the MIDX code choose.\n\nIn the past, that worked fine, since there would only be one pack to\nchoose from: the one we just wrote. But it's no longer necessarily the\ncase that there is one pack to choose from. It's possible that the\nrepository also has a cruft pack, too.\n\nIf the cruft pack happens to come earlier in lexical order (and has an\nearlier mtime than any non-cruft pack), we'll pick that pack as\npreferred. This makes it impossible to reuse chunks of the reachable\npack verbatim from pack-objects, so is sub-optimal.\n\nLuckily, this is a somewhat rare circumstance to be in, since we would\nhave to repack the entire repository during a `--geometric` repack, and\nthe cruft pack would have to sort ahead of the pack we just created.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "37dc6d81042ac41437163264e7a29d3bf50c8d90", "commit_date": "2023-10-05T20:26:11Z", "commit_message": "builtin/repack.c: implement support for `--max-cruft-size`\n\nCruft packs are an alternative mechanism for storing a collection of\nunreachable objects whose mtimes are recent enough to avoid being\npruned out of the repository.\n\nWhen cruft packs were first introduced back in b757353676\n(builtin/pack-objects.c: --cruft without expiration, 2022-05-20) and\na7d493833f (builtin/pack-objects.c: --cruft with expiration,\n2022-05-20), the recommended workflow consisted of:\n\n  - Repacking periodically, either by packing anything loose in the\n    repository (via `git repack -d`) or producing a geometric sequence\n    of packs (via `git repack --geometric=<d> -d`).\n\n  - Every so often, splitting the repository into two packs, one cruft\n    to store the unreachable objects, and another non-cruft pack to\n    store the reachable objects.\n\nRepositories may (out of band with the above) choose periodically to\nprune out some unreachable objects which have aged out of the grace\nperiod by generating a pack with `--cruft-expiration=<approxidate>`.\n\nThis allowed repositories to maintain relatively few packs on average,\nand quarantine unreachable objects together in a cruft pack, avoiding\nthe pitfalls of holding unreachable objects as loose while they age out\n(for more, see some of the details in 3d89a8c118\n(Documentation/technical: add cruft-packs.txt, 2022-05-20)).\n\nThis all works, but can be costly from an I/O-perspective when\nfrequently repacking a repository that has many unreachable objects.\nThis problem is exacerbated when those unreachable objects are rarely\n(if every) pruned.\n\nSince there is at most one cruft pack in the above scheme, each time we\nupdate the cruft pack it must be rewritten from scratch. Because much of\nthe pack is reused, this is a relatively inexpensive operation from a\nCPU-perspective, but is very costly in terms of I/O since we end up\nrewriting basically the same pack (plus any new unreachable objects that\nhave entered the repository since the last time a cruft pack was\ngenerated).\n\nAt the time, we decided against implementing more robust support for\nmultiple cruft packs. This patch implements that support which we were\nlacking.\n\nIntroduce a new option `--max-cruft-size` which allows repositories to\naccumulate cruft packs up to a given size, after which point a new\ngeneration of cruft packs can accumulate until it reaches the maximum\nsize, and so on. To generate a new cruft pack, the process works like\nso:\n\n  - Sort a list of any existing cruft packs in ascending order of pack\n    size.\n\n  - Starting from the beginning of the list, group cruft packs together\n    while the accumulated size is smaller than the maximum specified\n    pack size.\n\n  - Combine the objects in these cruft packs together into a new cruft\n    pack, along with any other unreachable objects which have since\n    entered the repository.\n\nOnce a cruft pack grows beyond the size specified via `--max-cruft-size`\nthe pack is effectively frozen. This limits the I/O churn up to a\nquadratic function of the value specified by the `--max-cruft-size`\noption, instead of behaving quadratically in the number of total\nunreachable objects.\n\nWhen pruning unreachable objects, we bypass the new code paths which\ncombine small cruft packs together, and instead start from scratch,\npassing in the appropriate `--max-pack-size` down to `pack-objects`,\nputting it in charge of keeping the resulting set of cruft packs sized\ncorrectly.\n\nThis may seem like further I/O churn, but in practice it isn't so bad.\nWe could prune old cruft packs for whom all or most objects are removed,\nand then generate a new cruft pack with just the remaining set of\nobjects. But this additional complexity buys us relatively little,\nbecause most objects end up being pruned anyway, so the I/O churn is\nwell contained.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b5b1f4c0ecf20c069d0301732edfdbfec167aa0c", "commit_date": "2023-10-05T20:18:54Z", "commit_message": "builtin/repack.c: parse `--max-pack-size` with OPT_MAGNITUDE\n\nThe repack builtin takes a `--max-pack-size` command-line argument which\nit uses to feed into any of the pack-objects children that it may spawn\nwhen generating a new pack.\n\nThis option is parsed with OPT_STRING, meaning that we'll accept\nanything as input, punting on more fine-grained validation until we get\ndown into pack-objects.\n\nThis is fine, but it's wasteful to spend an entire sub-process just to\nfigure out that one of its option is bogus. Instead, parse the value of\n`--max-pack-size` with OPT_MAGNITUDE in 'git repack', and then pass the\nknown-good result down to pack-objects.\n\nSuggested-by: Junio C Hamano <gitster@pobox.com>\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3349520e1a1ffd268347ec0ebb720830428f872e", "commit_date": "2023-10-05T18:45:46Z", "commit_message": "coverity: detect and report when the token or project is incorrect\n\nWhen trying to obtain the MD5 of the Coverity Scan Tool (in order to\ndecide whether a cached version can be used or a new version has to be\ndownloaded), it is possible to get a 401 (Authorization required) due to\neither an incorrect token, or even more likely due to an incorrect\nCoverity project name.\n\nSeeing an authorization failure that is caused by an incorrect project\nname was somewhat surprising to me when developing the Coverity\nworkflow, as I found such a failure suggestive of an incorrect token\ninstead.\n\nSo let's provide a helpful error message about that specifically when\nencountering authentication issues.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "421f12c284626330cb1738d5e5e98c9ede1ec91e", "commit_date": "2023-10-04T20:30:27Z", "commit_message": "Sync with 'master'", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "520b7711a478e860f4fca4bdc881d0cc9272d09d", "commit_date": "2023-10-04T20:30:15Z", "commit_message": "Merge branch 'jm/git-status-submodule-states-docfix' into next\n\nDocfix.\n\n* jm/git-status-submodule-states-docfix:\n  git-status.txt: fix minor asciidoc format issue", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5d0a2ce3beb6ef1fdb80c64667be00bf495d64d", "commit_date": "2023-10-04T20:30:15Z", "commit_message": "Merge branch 'rs/parse-opt-ctx-cleanup' into next\n\nCode clean-up.\n\n* rs/parse-opt-ctx-cleanup:\n  parse-options: drop unused parse_opt_ctx_t member", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a06386e314565108ad56a9bdb8f7b80ac52fb69", "commit_date": "2023-10-04T20:29:09Z", "commit_message": "The fifteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "64b2419cccdc8b104f3d31981d6623e1829f6a23", "commit_date": "2023-10-04T20:28:53Z", "commit_message": "Merge branch 'bb/unicode-width-table-15'\n\nThe display width table for unicode characters has been updated for\nUnicode 15.1\n\n* bb/unicode-width-table-15:\n  unicode: update the width tables to Unicode 15.1", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ba7d57b8e56305fb4dad2108d59b09c73bffaff4", "commit_date": "2023-10-04T20:28:53Z", "commit_message": "Merge branch 'xz/commit-title-soft-limit-doc'\n\nDoc tweak.\n\n* xz/commit-title-soft-limit-doc:\n  doc: correct the 50 characters soft limit", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c3c00206739afc1016277d5a670d377bef85e69b", "commit_date": "2023-10-04T20:28:53Z", "commit_message": "Merge branch 'jk/commit-graph-verify-fix'\n\nVarious fixes to \"git commit-graph verify\".\n\n* jk/commit-graph-verify-fix:\n  commit-graph: report incomplete chains during verification\n  commit-graph: tighten chain size check\n  commit-graph: detect read errors when verifying graph chain\n  t5324: harmonize sha1/sha256 graph chain corruption\n  commit-graph: check mixed generation validation when loading chain file\n  commit-graph: factor out chain opening function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42b495e9c59f0634f535bbba074d6f75543235a5", "commit_date": "2023-10-04T20:28:53Z", "commit_message": "Merge branch 'ks/ref-filter-mailmap'\n\n\"git for-each-ref\" and friends learn to apply mailmap to authorname\nand other fields.\n\n* ks/ref-filter-mailmap:\n  ref-filter: add mailmap support\n  t/t6300: introduce test_bad_atom\n  t/t6300: cleanup test_atom", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "30291891865b928cfff11735f758ecdd646d7510", "commit_date": "2023-10-04T20:28:52Z", "commit_message": "Merge branch 'ps/revision-cmdline-stdin-not'\n\n\"git rev-list --stdin\" learned to take non-revisions (like \"--not\")\nrecently from the standard input, but the way such a \"--not\" was\nhandled was quite confusing, which has been rethought.  This is\npotentially a change that breaks backward compatibility.\n\n* ps/revision-cmdline-stdin-not:\n  revision: make pseudo-opt flags read via stdin behave consistently", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "641307d3b6b5d2ab1c499c20df47354f64f8c5dc", "commit_date": "2023-10-04T16:55:26Z", "commit_message": "git-status.txt: fix minor asciidoc format issue\n\nThe list of additional XY values for submodules in short format\nisn't formatted consistently with the rest of the document.\nFormat as list for consistency.\n\nSigned-off-by: Javier Mora <cousteaulecommandant@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bd1c20ccd70d7452566bbc56ca2cf1fbb73d747c", "commit_date": "2023-10-03T22:32:37Z", "commit_message": "t7420: test that we correctly handle renamed submodules\n\nCreate a second submodule with a name that differs from its path. Test\nthat calling set-url modifies the correct .gitmodules entries. Make sure\nwe don't create a section named after the path instead of the name.\n\nSigned-off-by: Jan Alexander Steffens (heftig) <heftig@archlinux.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "32bff3675e6b4dc5ae93f0777e5da709f6576275", "commit_date": "2023-10-03T22:32:34Z", "commit_message": "t7419: test that we correctly handle renamed submodules\n\nAdd the submodule again with an explicitly different name and path. Test\nthat calling set-branch modifies the correct .gitmodules entries. Make\nsure we don't create a section named after the path instead of the name.\n\nSigned-off-by: Jan Alexander Steffens (heftig) <heftig@archlinux.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5fc880632d5e9ef6fd40a5ef9b5e01d61cdc320a", "commit_date": "2023-10-03T22:32:31Z", "commit_message": "t7419, t7420: use test_cmp_config instead of grepping .gitmodules\n\nWe have a test function to verify config files. Use it as it's more\nprecise.\n\nSigned-off-by: Jan Alexander Steffens (heftig) <heftig@archlinux.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b027fb07848bdfd84abdf1d6af2cf5d9e4592ffc", "commit_date": "2023-10-03T22:32:27Z", "commit_message": "t7419: actually test the branch switching\n\nThe submodule repo the test set up had the 'topic' branch checked out,\nmeaning the repo's default branch (HEAD) is the 'topic' branch.\n\nThe following tests then pretended to switch between the default branch\nand the 'topic' branch. This was papered over by continually adding\ncommits to the 'topic' branch and checking if the submodule gets updated\nto this new commit.\n\nReturn the submodule repo to the 'main' branch after setup so we can\nactually test the switching behavior.\n\nSigned-off-by: Jan Alexander Steffens (heftig) <heftig@archlinux.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "387c122131a9f8e4a67122d53955133d099b64a7", "commit_date": "2023-10-03T22:30:43Z", "commit_message": "submodule--helper: return error from set-url when modifying failed\n\nset-branch will return an error when setting the config fails so I don't\nsee why set-url shouldn't. Also skip the sync in this case.\n\nSigned-off-by: Jan Alexander Steffens (heftig) <heftig@archlinux.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6327085aa027b7d5936912bed596a3cf86953439", "commit_date": "2023-10-03T22:30:42Z", "commit_message": "submodule--helper: use submodule_from_path in set-{url,branch}\n\nThe commands need a path to a submodule but treated it as the name when\nmodifying the .gitmodules file, leading to confusion when a submodule's\nname does not match its path.\n\nBecause calling submodule_from_path initializes the submodule cache, we\nneed to manually trigger a reread before syncing, as the cache is\nmissing the config change we just made.\n\nSigned-off-by: Jan Alexander Steffens (heftig) <heftig@archlinux.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5a48246094068e47fb83256e852f17b8c58c7a0", "commit_date": "2023-10-03T21:44:40Z", "commit_message": "Merge branch 'cc/repack-sift-filtered-objects-to-separate-pack' into next\n\n\"git repack\" machinery learns to pay attention to the \"--filter=\"\noption.\n\n* cc/repack-sift-filtered-objects-to-separate-pack:\n  gc: add `gc.repackFilterTo` config option\n  repack: implement `--filter-to` for storing filtered out objects\n  gc: add `gc.repackFilter` config option\n  repack: add `--filter=<filter-spec>` option\n  pack-bitmap-write: rebuild using new bitmap when remapping\n  repack: refactor finding pack prefix\n  repack: refactor finishing pack-objects command\n  t/helper: add 'find-pack' test-tool\n  pack-objects: allow `--filter` without `--stdout`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "18383ac8955f9f8b86c44240ec57996472aeed13", "commit_date": "2023-10-03T21:44:40Z", "commit_message": "Merge branch 'ds/init-diffstat-width' into next\n\nCode clean-up.\n\n* ds/init-diffstat-width:\n  diff --stat: set the width defaults in a helper function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59859296120304955c560a2957bf68a0f96e1572", "commit_date": "2023-10-03T21:44:40Z", "commit_message": "Merge branch 'cw/prelim-cleanup' into next\n\nShuffle some bits across headers and sources to prepare for\nlibification effort.\n\n* cw/prelim-cleanup:\n  parse: separate out parsing functions from config.h\n  config: correct bad boolean env value error message\n  wrapper: reduce scope of remove_or_warn()\n  hex-ll: separate out non-hash-algo functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "da09e7af68247519e2b19fc8dff113896c39ac3c", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "commit-graph: clear oidset after finishing write\n\nIn graph_write() we store commits in an oidset, but never clean it up,\nleaking the contents. We should clear it in the cleanup section.\n\nThe oidset comes from 6830c36077 (commit-graph.h: replace 'commit_hex'\nwith 'commits', 2020-04-13), but it was just replacing a string_list\nthat was also leaked. Curiously, we fixed the leak of some adjacent\nvariables in commit fa8953cb40 (builtin/commit-graph.c: extract\n'read_one_commit()', 2020-05-18), but the oidset wasn't included for\nsome reason.\n\nIn combination with the preceding commits, this lets us mark t5324 as\nleak-free.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d9c84c6d67e3418bade00af7bcb5f72d7c656164", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "commit-graph: free write-context base_graph_name during cleanup\n\nCommit 6c622f9f0b (commit-graph: write commit-graph chains, 2019-06-18)\nadded a base_graph_name string to the write_commit_graph_context struct.\nBut the end-of-function cleanup forgot to free it, causing a leak.\n\nThis (presumably in combination with the preceding leak-fixes) lets us\nmark t5328 as leak-free.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "274bfa7f28fea96fafa114f2508ebef53735d7b6", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "commit-graph: free write-context entries before overwriting\n\nWhen writing a split graph file, we replace the final element of the\ncommit_graph_hash_after and commit_graph_filenames_after arrays. But\nsince these are allocated strings, we need to free them before\noverwriting to avoid leaking the old string.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1d94abfe1eedb3f0a9de74ba59483ef8f10b352c", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "commit-graph: free graph struct that was not added to chain\n\nWhen reading the graph chain file, we open (and allocate) each\nindividual slice it mentions and then add them to a linked-list chain.\nBut if adding to the chain fails (e.g., because the base-graph chunk it\ncontains didn't match what we expected), we leave the function without\nfreeing the graph struct that caused the failure, leaking it.\n\nWe can fix it by calling free_graph_commit().\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "991d549f74862d07a38a077f34c0deaf65607c74", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "commit-graph: delay base_graph assignment in add_graph_to_chain()\n\nWhen adding a graph to a chain, we do some consistency checks and then\nif everything looks good, set g->base_graph to add a link to the chain.\nBut when we added a new consistency check in 209250ef38 (commit-graph.c:\nprevent overflow in add_graph_to_chain(), 2023-07-12), it comes _after_\nwe've already set g->base_graph. So we might return failure, even though\nwe actually added to the chain.\n\nThis hasn't caused a bug yet, because after failing to add to the chain,\nwe discard the failed graph struct completely, leaking it. But in order\nto fix that, it's important that the struct be in a consistent and\npredictable state after the failure.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "09a75abba4eabab3f2cc4474e5d2db3a33a3a682", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "commit-graph: free all elements of graph chain\n\nWhen running \"commit-graph verify\", we call free_commit_graph(). That's\nsufficient for the case of a single graph file, but if we loaded a chain\nof split graph files, they form a linked list via the base_graph\npointers. We need to free all of them, or we leak all but the first\nstruct.\n\nWe can make this work by teaching free_commit_graph() to walk the\nbase_graph pointers and free each element. This in turn lets us simplify\nclose_commit_graph(), which does the same thing by recursion (we cannot\njust use close_commit_graph() in \"commit-graph verify\", as the function\ntakes a pointer to an object store, and the verify command creates a\nsingle one-off graph struct).\n\nWhile indenting the code in free_commit_graph() for the loop, I noticed\nthat setting g->data to NULL is rather pointless, as we free the struct\na few lines later. So I cleaned that up while we're here.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac6d45d11f24921ead899c74569b717a7895f4a5", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "commit-graph: move slab-clearing to close_commit_graph()\n\nWhen closing and freeing a commit-graph, the main entry point is\nclose_commit_graph(), which then uses close_commit_graph_one() to\nrecurse through the base_graph links and free each one.\n\nCommit 957ba814bf (commit-graph: when closing the graph, also release\nthe slab, 2021-09-08) put the call to clear the slab into the recursive\nfunction, but this is pointless: there's only a single global slab\nvariable. It works OK in practice because clearing the slab is\nidempotent, but it makes the code harder to reason about and refactor.\n\nMove it into the parent function so it's only called once (and there are\nno other direct callers of the recursive close_commit_graph_one(), so we\nare not hurting them).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "716a6b2c3a54779e1e6f115a5950511d019f4d17", "commit_date": "2023-10-03T21:28:24Z", "commit_message": "merge: free result of repo_get_merge_bases()\n\nWe call repo_get_merge_bases(), which allocates a commit_list, but never\nfree the result, causing a leak.\n\nThe obvious solution is to free it, but we need to look at the contents\nof the first item to decide whether to leave the loop. One option is to\nfree it in both code paths. But since the commit that the list points to\nis longer-lived than the list itself, we can just dereference it\nimmediately, free the list, and then continue with the existing logic.\nThis is about the same amount of code, but keeps the list management all\nin one place.\n\nThis lets us mark a number of merge-related test scripts as leak-free.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ec97ad120caad0c7366a19a6680d37e2b8c5107c", "commit_date": "2023-10-03T21:28:23Z", "commit_message": "commit-reach: free temporary list in get_octopus_merge_bases()\n\nWe loop over the set of commits to merge, and for each one compute the\nmerge base against the existing set of merge base candidates we've\nfound. Then we replace the candidate set with a simple assignment of the\nlist head, leaking the old list. We should free it first before\nassignment.\n\nThis makes t5521 leak-free, so mark it as such.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "be4b578c69e0ac1d974ebc9163ff5793a018da8e", "commit_date": "2023-10-03T21:28:23Z", "commit_message": "t6700: mark test as leak-free\n\nThis test has never leaked since it was added. Let's annotate it to make\nsure it stays that way (and to reduce noise when looking for other\nleak-free scripts after we fix some leaks).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4cbb32c278f95ac8546eccf9aa10b6243030152", "commit_date": "2023-10-03T20:15:03Z", "commit_message": "parse-options: drop unused parse_opt_ctx_t member\n\n5c387428f1 (parse-options: don't emit \"ambiguous option\" for aliases,\n2019-04-29) added \"updated_options\" to struct parse_opt_ctx_t, but it\nhas never been used.  Remove it.\n\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "78de1c6c327b00ec9ed97c478e5f9e56d03c1db8", "commit_date": "2023-10-03T01:28:47Z", "commit_message": "t7700: split cruft-related tests to t7704\n\nA small handful of the tests in t7700 (the main script for testing\nfunctionality of 'git repack') are specifically related to cruft pack\noperations.\n\nPrepare for adding new cruft pack-related tests by moving the existing\nset into a new test script.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9b96046b9239589756cde8fbcbafe05ac7ec4611", "commit_date": "2023-10-02T21:54:31Z", "commit_message": "gc: add `gc.repackFilterTo` config option\n\nA previous commit implemented the `gc.repackFilter` config option\nto specify a filter that should be used by `git gc` when\nperforming repacks.\n\nAnother previous commit has implemented\n`git repack --filter-to=<dir>` to specify the location of the\npackfile containing filtered out objects when using a filter.\n\nLet's implement the `gc.repackFilterTo` config option to specify\nthat location in the config when `gc.repackFilter` is used.\n\nNow when `git gc` will perform a repack with a <dir> configured\nthrough this option and not empty, the repack process will be\npassed a corresponding `--filter-to=<dir>` argument.\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71c5aec1f54eba5a2856f72d85823af64e5deb34", "commit_date": "2023-10-02T21:54:31Z", "commit_message": "repack: implement `--filter-to` for storing filtered out objects\n\nA previous commit has implemented `git repack --filter=<filter-spec>` to\nallow users to filter out some objects from the main pack and move them\ninto a new different pack.\n\nIt would be nice if this new different pack could be created in a\ndifferent directory than the regular pack. This would make it possible\nto move large blobs into a pack on a different kind of storage, for\nexample cheaper storage.\n\nEven in a different directory, this pack can be accessible if, for\nexample, the Git alternates mechanism is used to point to it. In fact\nnot using the Git alternates mechanism can corrupt a repo as the\ngenerated pack containing the filtered objects might not be accessible\nfrom the repo any more. So setting up the Git alternates mechanism\nshould be done before using this feature if the user wants the repo to\nbe fully usable while this feature is used.\n\nIn some cases, like when a repo has just been cloned or when there is no\nother activity in the repo, it's Ok to setup the Git alternates\nmechanism afterwards though. It's also Ok to just inspect the generated\npackfile containing the filtered objects and then just move it into the\n'.git/objects/pack/' directory manually. That's why it's not necessary\nfor this command to check that the Git alternates mechanism has been\nalready setup.\n\nWhile at it, as an example to show that `--filter` and `--filter-to`\nwork well with other options, let's also add a test to check that these\noptions work well with `--max-pack-size`.\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1cd43a9ed96831b983fada37a71daacb6be373dc", "commit_date": "2023-10-02T21:54:30Z", "commit_message": "gc: add `gc.repackFilter` config option\n\nA previous commit has implemented `git repack --filter=<filter-spec>` to\nallow users to filter out some objects from the main pack and move them\ninto a new different pack.\n\nUsers might want to perform such a cleanup regularly at the same time as\nthey perform other repacks and cleanups, so as part of `git gc`.\n\nLet's allow them to configure a <filter-spec> for that purpose using a\nnew gc.repackFilter config option.\n\nNow when `git gc` will perform a repack with a <filter-spec> configured\nthrough this option and not empty, the repack process will be passed a\ncorresponding `--filter=<filter-spec>` argument.\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "48a9b67b4301083d0820e90afef208ed1436298f", "commit_date": "2023-10-02T21:54:30Z", "commit_message": "repack: add `--filter=<filter-spec>` option\n\nThis new option puts the objects specified by `<filter-spec>` into a\nseparate packfile.\n\nThis could be useful if, for example, some blobs take up a lot of\nprecious space on fast storage while they are rarely accessed. It could\nmake sense to move them into a separate cheaper, though slower, storage.\n\nIt's possible to find which new packfile contains the filtered out\nobjects using one of the following:\n\n  - `git verify-pack -v ...`,\n  - `test-tool find-pack ...`, which a previous commit added,\n  - `--filter-to=<dir>`, which a following commit will add to specify\n    where the pack containing the filtered out objects will be.\n\nThis feature is implemented by running `git pack-objects` twice in a\nrow. The first command is run with `--filter=<filter-spec>`, using the\nspecified filter. It packs objects while omitting the objects specified\nby the filter. Then another `git pack-objects` command is launched using\n`--stdin-packs`. We pass it all the previously existing packs into its\nstdin, so that it will pack all the objects in the previously existing\npacks. But we also pass into its stdin, the pack created by the previous\n`git pack-objects --filter=<filter-spec>` command as well as the kept\npacks, all prefixed with '^', so that the objects in these packs will be\nomitted from the resulting pack. The result is that only the objects\nfiltered out by the first `git pack-objects` command are in the pack\nresulting from the second `git pack-objects` command.\n\nAs the interactions with kept packs are a bit tricky, a few related\ntests are added.\n\nHelped-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: John Cai <johncai86@gmail.com>\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e4747ec8b5558e7106146fd37501649f577bcfa", "commit_date": "2023-10-02T21:54:30Z", "commit_message": "pack-bitmap-write: rebuild using new bitmap when remapping\n\n`git repack` is about to learn a new `--filter=<filter-spec>` option and\nwe will want to check that this option is incompatible with\n`--write-bitmap-index`.\n\nUnfortunately it appears that a test like:\n\ntest_expect_success '--filter fails with --write-bitmap-index' '\n       test_must_fail \\\n               env GIT_TEST_MULTI_PACK_INDEX_WRITE_BITMAP=0 \\\n               git -C bare.git repack -a -d --write-bitmap-index --filter=blob:none\n'\n\nsometimes fail because when rebuilding bitmaps, it appears that we are\nreusing existing bitmap information. So instead of detecting that some\nobjects are missing and erroring out as it should, the\n`git repack --write-bitmap-index --filter=...` command succeeds.\n\nLet's fix that by making sure we rebuild bitmaps using new bitmaps\ninstead of existing ones.\n\nHelped-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "be315e9a3fe070af60821f01c2bc508457d2c1b2", "commit_date": "2023-10-02T21:54:30Z", "commit_message": "repack: refactor finding pack prefix\n\nCreate a new find_pack_prefix() to refactor code that handles finding\nthe pack prefix from the packtmp and packdir global variables, as we are\ngoing to need this feature again in following commit.\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff8504e4ec5628edddb67f989256b7f2aea6c45d", "commit_date": "2023-10-02T21:54:29Z", "commit_message": "repack: refactor finishing pack-objects command\n\nCreate a new finish_pack_objects_cmd() to refactor duplicated code\nthat handles reading the packfile names from the output of a\n`git pack-objects` command and putting it into a string_list, as well as\ncalling finish_command().\n\nWhile at it, beautify a code comment a bit in the new function.\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "66589f89ab8bf19f79fa9e9ec156bce43ed70e53", "commit_date": "2023-10-02T21:54:29Z", "commit_message": "t/helper: add 'find-pack' test-tool\n\nIn a following commit, we will make it possible to separate objects in\ndifferent packfiles depending on a filter.\n\nTo make sure that the right objects are in the right packs, let's add a\nnew test-tool that can display which packfile(s) a given object is in.\n\nLet's also make it possible to check if a given object is in the\nexpected number of packfiles with a `--check-count <n>` option.\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6cfcabfb9f60369f6fb4d24465a7c98b1d90b34b", "commit_date": "2023-10-02T21:54:29Z", "commit_message": "pack-objects: allow `--filter` without `--stdout`\n\n9535ce7337 (pack-objects: add list-objects filtering, 2017-11-21)\ntaught `git pack-objects` to use `--filter`, but required the use of\n`--stdout` since a partial clone mechanism was not yet in place to\nhandle missing objects. Since then, changes like 9e27beaa23\n(promisor-remote: implement promisor_remote_get_direct(), 2019-06-25)\nand others added support to dynamically fetch objects that were missing.\n\nEven without a promisor remote, filtering out objects can also be useful\nif we can put the filtered out objects in a separate pack, and in this\ncase it also makes sense for pack-objects to write the packfile directly\nto an actual file rather than on stdout.\n\nRemove the `--stdout` requirement when using `--filter`, so that in a\nfollow-up commit, repack can pass `--filter` to pack-objects to omit\ncertain objects from the resulting packfile.\n\nSigned-off-by: John Cai <johncai86@gmail.com>\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4adceb5a299164aad1ef9794cdcbdb232ab10299", "commit_date": "2023-10-02T18:55:42Z", "commit_message": "diff: fix --merge-base with annotated tags\n\nChecking early for OBJ_COMMIT excludes other objects that can be\nresolved to commits, like annotated tags.  If we remove it, annotated\ntags will be resolved and handled just fine by\nlookup_commit_reference(), and if we are given something that can't be\nresolved to a commit, we'll still get a useful error message, e.g.:\n\n> error: object 21ab162211ac3ef13c37603ca88b27e9c7e0d40b is a tree, not a commit\n> fatal: no merge base found\n\nSigned-off-by: Alyssa Ross <hi@alyssa.is>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2d36e41d1a24beaf57bc0d7146d2b0ae93a5d61b", "commit_date": "2023-10-02T18:26:54Z", "commit_message": "Sync with 'master'", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89c9c95966df6709217bf0fb07db75d1089d37c9", "commit_date": "2023-10-02T18:26:37Z", "commit_message": "Merge branch 'eb/limit-bulk-checkin-to-blobs' into next\n\nThe \"streaming\" interface used for bulk-checkin codepath has been\nnarrowed to take only blob objects for now, with no real loss of\nfunctionality.\n\n* eb/limit-bulk-checkin-to-blobs:\n  bulk-checkin: only support blobs in index_bulk_checkin", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d0e8084c65cbf949038ae4cc344ac2c2efd77415", "commit_date": "2023-10-02T18:20:00Z", "commit_message": "The fourteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4a0bcc832a276b68f910729dee698bc6050ef0cc", "commit_date": "2023-10-02T18:20:00Z", "commit_message": "Merge branch 'js/doc-status-with-submodules-mark-up-fix'\n\nDocfix.\n\n* js/doc-status-with-submodules-mark-up-fix:\n  Documentation/git-status: add missing line breaks", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5bb67fb7ab035ef399d019440f184aee3608f3e7", "commit_date": "2023-10-02T18:20:00Z", "commit_message": "Merge branch 'jc/unresolve-removal'\n\n\"checkout --merge -- path\" and \"update-index --unresolve path\" did\nnot resurrect conflicted state that was resolved to remove path,\nbut now they do.\n\n* jc/unresolve-removal:\n  checkout: allow \"checkout -m path\" to unmerge removed paths\n  checkout/restore: add basic tests for --merge\n  checkout/restore: refuse unmerging paths unless checking out of the index\n  update-index: remove stale fallback code for \"--unresolve\"\n  update-index: use unmerge_index_entry() to support removal\n  resolve-undo: allow resurrecting conflicted state that resolved to deletion\n  update-index: do not read HEAD and MERGE_HEAD unconditionally", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4ca7a3fd26d0c6214f46f2413c5ba8ed346fea1a", "commit_date": "2023-09-29T22:46:06Z", "commit_message": "diff --stat: set the width defaults in a helper function\n\nExtract the commonly used initialization of the --stat-width=<width>,\n--stat-name-width=<width> and --stat-graph-with=<width> parameters to their\ninternal default values into a helper function, to avoid repeating the same\ninitialization code in a few places.\n\nAdd a couple of tests to additionally cover existing configuration options\ndiff.statNameWidth=<width> and diff.statGraphWidth=<width> when used by\ngit-merge to generate --stat outputs.  This closes the gap that existed\npreviously in the --stat tests, and reduces the chances for having any\nregressions introduced by this commit.\n\nWhile there, perform a small bunch of minor wording tweaks in the improved\nunit test, to improve its test-level consistency a bit.\n\nSigned-off-by: Dragan Simic <dsimic@manjaro.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b1bda751739d90e1a94b47397676bcb8eebf16d5", "commit_date": "2023-09-29T22:14:57Z", "commit_message": "parse: separate out parsing functions from config.h\n\nThe files config.{h,c} contain functions that have to do with parsing,\nbut not config.\n\nIn order to further reduce all-in-one headers, separate out functions in\nconfig.c that do not operate on config into its own file, parse.h,\nand update the include directives in the .c files that need only such\nfunctions accordingly.\n\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Jonathan Tan <jonathantanmy@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e16be13cfaf1102340c7816d14cec2009a864faf", "commit_date": "2023-09-29T22:14:56Z", "commit_message": "config: correct bad boolean env value error message\n\nAn incorrectly defined boolean environment value would result in the\nfollowing error message:\n\nbad boolean config value '%s' for '%s'\n\nThis is a misnomer since environment value != config value. Instead of\ncalling git_config_bool() to parse the environment value, mimic the\nfunctionality inside of git_config_bool() but with the correct error\nmessage.\n\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "afd2a1d5f1fc371fe1fda0ed07e0f2f27100fbab", "commit_date": "2023-09-29T22:14:56Z", "commit_message": "wrapper: reduce scope of remove_or_warn()\n\nremove_or_warn() is only used by entry.c and apply.c, but it is\ncurrently declared and defined in wrapper.{h,c}, so it has a scope much\ngreater than it needs. This needlessly large scope also causes wrapper.c\nto need to include object.h, when this file is largely unconcerned with\nGit objects.\n\nMove remove_or_warn() to entry.{h,c}. The file apply.c still has access\nto it, since it already includes entry.h for another reason.\n\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Jonathan Tan <jonathantanmy@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d88e8106e892109f4f4b13312dd026d0a7fcfeec", "commit_date": "2023-09-29T22:14:56Z", "commit_message": "hex-ll: separate out non-hash-algo functions\n\nIn order to further reduce all-in-one headers, separate out functions in\nhex.h that do not operate on object hashes into its own file, hex-ll.h,\nand update the include directives in the .c files that need only such\nfunctions accordingly.\n\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Jonathan Tan <jonathantanmy@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "17973ab24622019495b7da9b5595e3852d11d27c", "commit_date": "2023-09-29T16:04:50Z", "commit_message": "Sync with 'master'", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aa65b54416c886ecb950b02aa844df74a8756226", "commit_date": "2023-09-29T16:04:41Z", "commit_message": "Merge branch 'ty/merge-tree-strategy-options' into next\n\n\"git merge-tree\" learned to take strategy backend specific options\nvia the \"-X\" option, like \"git merge\" does.\n\n* ty/merge-tree-strategy-options:\n  merge-tree: add -X strategy option", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "493f4622739e9b64f24b465b21aa85870dd9dc09", "commit_date": "2023-09-29T16:04:16Z", "commit_message": "The thirteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a03cc4ba1dd8eca619fb46e0fa3cba8b393e1652", "commit_date": "2023-09-29T16:04:16Z", "commit_message": "Merge branch 'ob/am-msgfix'\n\nThe parameters to generate an error message have been corrected.\n\n* ob/am-msgfix:\n  am: fix error message in parse_opt_show_current_patch()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a4eebfadf2da24ba63c9027c1d28e0a9514ed1bd", "commit_date": "2023-09-29T16:04:16Z", "commit_message": "Merge branch 'jk/test-pass-ubsan-options-to-http-test'\n\nUBSAN options were not propagated through the test framework to git\nrun via the httpd, unlike ASAN options, which has been corrected.\n\n* jk/test-pass-ubsan-options-to-http-test:\n  test-lib: set UBSAN_OPTIONS to match ASan", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d15f92e3791d481ae244cb1436da06fe89479641", "commit_date": "2023-09-29T16:04:15Z", "commit_message": "Merge branch 'jc/alias-completion'\n\nThe command line completion script (in contrib/) can be told to\ncomplete aliases by including \": git <cmd> ;\" in the alias to tell\nit that the alias should be completed similar to how \"git <cmd>\" is\ncompleted.  The parsing code for the alias as been loosened to\nallow ';' without an extra space before it.\n\n* jc/alias-completion:\n  completion: loosen and document the requirement around completing alias", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e076f3a23f0b6a8c56389b7ad672602853a91e57", "commit_date": "2023-09-29T16:04:15Z", "commit_message": "Merge branch 'hy/doc-show-is-like-log-not-diff-tree'\n\nDoc update.\n\n* hy/doc-show-is-like-log-not-diff-tree:\n  show doc: redirect user to git log manual instead of git diff-tree", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5cd3f68add3cf24c322f925a5ca05a278bc6c027", "commit_date": "2023-09-29T16:04:15Z", "commit_message": "Merge branch 'kh/range-diff-notes'\n\n\"git range-diff --notes=foo\" compared \"log --notes=foo --notes\" of\nthe two ranges, instead of using just the specified notes tree.\n\n* kh/range-diff-notes:\n  range-diff: treat notes like `log`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0b493d2986ab2664a35a87db04154c795f74d3fd", "commit_date": "2023-09-29T16:04:15Z", "commit_message": "Merge branch 'ds/stat-name-width-configuration'\n\n\"git diff\" learned diff.statNameWidth configuration variable, to\ngive the default width for the name part in the \"--stat\" output.\n\n* ds/stat-name-width-configuration:\n  diff --stat: add config option to limit filename width", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2affeb3cb57ec7124dc37743ace17a46921f8ce0", "commit_date": "2023-09-29T16:04:14Z", "commit_message": "Merge branch 'jk/fsmonitor-unused-parameter'\n\nUnused parameters in fsmonitor related code paths have been marked\nas such.\n\n* jk/fsmonitor-unused-parameter:\n  run-command: mark unused parameters in start_bg_wait callbacks\n  fsmonitor: mark unused hashmap callback parameters\n  fsmonitor/darwin: mark unused parameters in system callback\n  fsmonitor: mark unused parameters in stub functions\n  fsmonitor/win32: mark unused parameter in fsm_os__incompatible()\n  fsmonitor: mark some maybe-unused parameters\n  fsmonitor/win32: drop unused parameters\n  fsmonitor: prefer repo_git_path() to git_pathdup()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2b04c3ce59ee9605c4a193c00c9cc92b384cd1cd", "commit_date": "2023-09-29T16:04:14Z", "commit_message": "Merge branch 'ml/git-gui-exec-path-fix'\n\nFix recent regression in Git-GUI that fails to run hook scripts at\nall.\n\n* ml/git-gui-exec-path-fix:\n  git-gui - use git-hook, honor core.hooksPath\n  git-gui - re-enable use of hook scripts", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb76f4660628719c052ba326e360fb0c84258b3c", "commit_date": "2023-09-28T20:37:04Z", "commit_message": "Merge branch 'bb/unicode-width-table-15' into next\n\nThe display width table for unicode characters has been updated for\nUnicode 15.1\n\n* bb/unicode-width-table-15:\n  unicode: update the width tables to Unicode 15.1", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "20df852430b782d891a4a3f7b62b59b838dd8e4d", "commit_date": "2023-09-28T20:37:04Z", "commit_message": "Merge branch 'xz/commit-title-soft-limit-doc' into next\n\nDoc tweak.\n\n* xz/commit-title-soft-limit-doc:\n  doc: correct the 50 characters soft limit", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e3ed560a2fa641210bd82b785ea7a6a9a719d7ea", "commit_date": "2023-09-28T20:37:04Z", "commit_message": "Merge branch 'jk/commit-graph-verify-fix' into next\n\nVarious fixes to \"git commit-graph verify\".\n\n* jk/commit-graph-verify-fix:\n  commit-graph: report incomplete chains during verification\n  commit-graph: tighten chain size check\n  commit-graph: detect read errors when verifying graph chain\n  t5324: harmonize sha1/sha256 graph chain corruption\n  commit-graph: check mixed generation validation when loading chain file\n  commit-graph: factor out chain opening function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0d3fd9959a880a89eeabf983ae610d87788e63df", "commit_date": "2023-09-28T20:37:04Z", "commit_message": "Merge branch 'ks/ref-filter-mailmap' into next\n\n\"git for-each-ref\" and friends learn to apply mailmap to authorname\nand other fields.\n\n* ks/ref-filter-mailmap:\n  ref-filter: add mailmap support\n  t/t6300: introduce test_bad_atom\n  t/t6300: cleanup test_atom", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a28201e0dd6ecb2e700f3bf5cf77a88d7778bd75", "commit_date": "2023-09-28T20:37:04Z", "commit_message": "Merge branch 'ps/revision-cmdline-stdin-not' into next\n\n\"git rev-list --stdin\" learned to take non-revisions (like \"--not\")\nrecently from the standard input, but the way such a \"--not\" was\nhandled was quite confusing, which has been rethought.  This is\npotentially a change that breaks backward compatibility.\n\n* ps/revision-cmdline-stdin-not:\n  revision: make pseudo-opt flags read via stdin behave consistently", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c2c349a15c0430a2ef9f858d69d095a00693379c", "commit_date": "2023-09-28T17:49:23Z", "commit_message": "doc: correct the 50 characters soft limit\n\nThe soft limit of the first line of the commit message should be\n\"no more than 50 characters\" or \"50 characters or less\", but not\n\"less than 50 character\".\n\nSigned-off-by: \u8c22\u81f4\u90a6 (XIE Zhibang) <Yeking@Red54.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5f259197eea0a3acc48f46748778f33c935476cb", "commit_date": "2023-09-28T14:00:43Z", "commit_message": "commit-graph: report incomplete chains during verification\n\nThe load_commit_graph_chain_fd_st() function will stop loading chains\nwhen it sees an error. But if it has loaded any graph slice at all, it\nwill return it. This is a good thing for normal use (we use what data we\ncan, and this is just an optimization). But it's a bad thing for\n\"commit-graph verify\", which should be careful about finding any\nirregularities. We do complain to stderr with a warning(), but the\nverify command still exits with a successful return code.\n\nThe new tests here cover corruption of both the base and tip slices of\nthe chain. The corruption of the base file already works (it is the\nfirst file we look at, so when we see the error we return NULL). The\n\"tip\" case is what is fixed by this patch (it complains to stderr but\nstill returns the base slice).\n\nLikewise the existing tests for corruption of the commit-graph-chain\nfile itself need to be updated. We already exited non-zero correctly for\nthe \"base\" case, but the \"tip\" case can now do so, too.\n\nNote that this also causes us to adjust a test later in the file that\nsimilarly corrupts a tip (though confusingly the test script calls this\n\"base\"). It checks stderr but erroneously expects the whole \"verify\"\ncommand to exit with a successful code.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7754a565e2e78e4163dbf597bba5fc729cc3bbc7", "commit_date": "2023-09-28T14:00:43Z", "commit_message": "commit-graph: tighten chain size check\n\nWhen we open a commit-graph-chain file, if it's smaller than a single\nentry, we just quietly treat that as ENOENT. That make some sense if the\nfile is truly zero bytes, but it means that \"commit-graph verify\" will\nquietly ignore a file that contains garbage if that garbage happens to\nbe short.\n\nInstead, let's only simulate ENOENT when the file is truly empty, and\notherwise return EINVAL. The normal graph-loading routines don't care,\nbut \"commit-graph verify\" will notice and complain about the difference.\n\nIt's not entirely clear to me that the 0-is-ENOENT case actually happens\nin real life, so we could perhaps just eliminate this special-case\naltogether. But this is how we've always behaved, so I'm preserving it\nin the name of backwards compatibility (though again, it really only\nmatters for \"verify\", as the regular routines are happy to load what\nthey can).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "47d06bb010867cd122f732be93e55a797371570c", "commit_date": "2023-09-28T14:00:43Z", "commit_message": "commit-graph: detect read errors when verifying graph chain\n\nBecause it's OK to not have a graph file at all, the graph_verify()\nfunction needs to tell the difference between a missing file and a real\nerror.  So when loading a traditional graph file, we call\nopen_commit_graph() separately from load_commit_graph_chain_fd_st(), and\ndon't complain if the first one fails with ENOENT.\n\nWhen the function learned about chain files in 3da4b609bb (commit-graph:\nverify chains with --shallow mode, 2019-06-18), we couldn't be as\ncareful, since the only way to load a chain was with\nread_commit_graph_one(), which did both the open/load as a single unit.\nSo we'll miss errors in chain files we load, thinking instead that there\nwas just no chain file at all.\n\nNote that we do still report some of these problems to stderr, as the\nloading function calls error() and warning(). But we'd exit with a\nsuccessful exit code, which is wrong.\n\nWe can fix that by using the recently split open/load functions for\nchains. That lets us treat the chain file just like a single file with\nrespect to error handling here.\n\nAn existing test (from 3da4b609bb) shows off the problem; we were\nexpecting \"commit-graph verify\" to report success, but that makes no\nsense. We did not even verify the contents of the graph data, because we\ncouldn't load it! I don't think this was an intentional exception, but\nrather just the test covering what happened to occur.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2d45710c5d1dc20db0d6c856e9e711dd6a19e18f", "commit_date": "2023-09-28T14:00:43Z", "commit_message": "t5324: harmonize sha1/sha256 graph chain corruption\n\nIn t5324.20, we corrupt a hex character 60 bytes into the graph chain\nfile. Since the file consists of two hash identifiers, one per line, the\ncorruption differs between sha1 and sha256. In a sha1 repository, the\ncorruption is on the second line, and in a sha256 repository, it is on\nthe first.\n\nWe should of course detect the problem with either line. But as the next\nfew patches will show (and fix), that is not the case (in fact, we\ncurrently do not exit non-zero for either line!). And while at the end\nof our series we'll catch all errors, our intermediate states will have\ndiffering behavior between the two hashes.\n\nLet's make sure we test corruption of both the first and second lines,\nand do so consistently with either hash by choosing offsets which are\nalways in the first hash (30 bytes) or in the second (70).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8298b54317772ca28fec2673f59a8c2048552ae6", "commit_date": "2023-09-28T14:00:43Z", "commit_message": "commit-graph: check mixed generation validation when loading chain file\n\nIn read_commit_graph_one(), we call validate_mixed_generation_chain()\nafter loading the graph. Even though we don't check the return value,\nthis has the side effect of clearing the read_generation_data flag,\nwhich is important when working with mixed generation numbers.\n\nBut doing this in load_commit_graph_chain_fd_st() makes more sense:\n\n  1. We are calling it even when we did not load a chain at all, which\n     is pointless (you cannot have mixed generations in a single file).\n\n  2. For now, all callers load the graph via read_commit_graph_one().\n     But the point of factoring out the open/load in the previous commit\n     was to let \"commit-graph verify\" call them separately. So it needs\n     to trigger this function as part of the load.\n\n     Without this patch, the mixed-generation tests in t5324 would start\n     failing on \"git commit-graph verify\" calls, once we switch to using\n     a separate open/load call there.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ed76b4eb25f03f3bec6abad219d4dda651fc30f", "commit_date": "2023-09-28T14:00:43Z", "commit_message": "commit-graph: factor out chain opening function\n\nThe load_commit_graph_chain() function opens the chain file and all of\nthe slices of graph that it points to. If there is no chain file (which\nis a totally normal condition), we return NULL. But if we run into\nerrors with the chain file or loading the actual graph data, we also\nreturn NULL, and the caller cannot tell the difference.\n\nThe caller can check for ENOENT for the unremarkable \"no such file\"\ncase. But I'm hesitant to assume that the rest of the function would\nnever accidentally set errno to ENOENT itself, since it is opening the\nslice files (and that would mean the caller fails to notice a real\nerror).\n\nSo let's break this into two functions: one to open the file, and one to\nactually load it. This matches the interface we provide for the\nnon-chain graph file, which will also come in handy in a moment when we\nfix some bugs in the \"git commit-graph verify\" code.\n\nSome notes:\n\n  - I've kept the \"1 is good, 0 is bad\" return convention (and the weird\n    \"fd\" out-parameter) used by the matching open_commit_graph()\n    function and other parts of the commit-graph code. This is unlike\n    most of the rest of Git (which would just return the fd, with -1 for\n    error), but it makes sense to stay consistent with the adjacent bits\n    of the API here.\n\n  - The existing chain loading function will quietly return if the file\n    is too small to hold a single entry. I've retained that behavior\n    (and explicitly set ENOENT in the opener function) for now, under\n    the notion that it's probably valid (though I'd imagine unusual) to\n    have an empty chain file.\n\nThere are two small behavior changes here, but I think both are strictly\npositive:\n\n  1. The original blindly did a stat() before checking if fopen()\n     succeeded, meaning we were making a pointless extra stat call.\n\n  2. We now use fstat() to check the file size. The previous code using\n     a regular stat() on the pathname meant we could technically race\n     with somebody updating the chain file, and end up with a size that\n     does not match what we just opened with fopen(). I doubt anybody\n     ever hit this in practice, but it may have caused an out-of-bounds\n     read.\n\nWe'll retain the load_commit_graph_chain() function which does both the\nopen and reading steps (most existing callers do not care about seeing\nerrors anyway, since loading commit-graphs is optimistic).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9eb5419799f08402ee3bd185c2d2c50ded669b06", "commit_date": "2023-09-26T17:17:56Z", "commit_message": "bulk-checkin: only support blobs in index_bulk_checkin\n\nAs the code is written today index_bulk_checkin only accepts blobs.\nRemove the enum object_type parameter and rename index_bulk_checkin to\nindex_blob_bulk_checkin, index_stream to index_blob_stream,\ndeflate_to_pack to deflate_blob_to_pack, stream_to_pack to\nstream_blob_to_pack, to make this explicit.\n\nNot supporting commits, tags, or trees has no downside as it is not\ncurrently supported now, and commits, tags, and trees being smaller by\ndesign do not have the problem that the problem that index_bulk_checkin\nwas built to solve.\n\nBefore we start adding code to support the hash function transition\nsupporting additional objects types in index_bulk_checkin has no real\nadditional cost, just an extra function parameter to know what the\nobject type is.  Once we begin the hash function transition this is not\nthe case.\n\nThe hash function transition document specifies that a repository with\ncompatObjectFormat enabled will compute and store both the SHA-1 and\nSHA-256 hash of every object in the repository.\n\nWhat makes this a challenge is that it is not just an additional hash\nover the same object.  Instead the hash function transition document\nspecifies that the compatibility hash (specified with\ncompatObjectFormat) be computed over the equivalent object that another\ngit repository whose storage hash (specified with objectFormat) would\nstore.  When comparing equivalent repositories built with different\nstorage hash functions, the oids embedded in objects used to refer to\nother objects differ and the location of signatures within objects\ndiffer.\n\nAs blob objects have neither oids referring to other objects nor stored\nsignatures their storage hash and their compatibility hash are computed\nover the same object.\n\nThe other kinds of objects: trees, commits, and tags, all store oids\nreferring to other objects.  Signatures are stored in commit and tag\nobjects.  As oids and the tags to store signatures are not the same size\nin repositories built with different storage hashes the size of the\nequivalent objects are also different.\n\nA version of index_bulk_checkin that supports more than just blobs when\ncomputing both the SHA-1 and the SHA-256 of every object added would\nneed a different, and more expensive structure.  The structure is more\nexpensive because it would be required to temporarily buffering the\nequivalent object the compatibility hash needs to be computed over.\n\nA temporary object is needed, because before a hash over an object can\ncomputed it's object header needs to be computed.  One of the members of\nthe object header is the entire size of the object.  To know the size of\nan equivalent object an entire pass over the original object needs to be\nmade, as trees, commits, and tags are composed of a variable number of\nvariable sized pieces.  Unfortunately there is no formula to compute the\nsize of an equivalent object from just the size of the original object.\n\nAvoid all of those future complications by limiting index_bulk_checkin\nto only work on blobs.\n\nInspired-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "872976c37ef6314d0480e8487a97ad5910d31148", "commit_date": "2023-09-25T23:17:28Z", "commit_message": "unicode: update the width tables to Unicode 15.1\n\nUnicode 15.1 has been announced on 2023-09-12 [0], so update the\ncharacter width tables to the new version.\n\n[0] http://blog.unicode.org/2023/09/announcing-unicode-standard-version-151.html\n\nSigned-off-by: Beat Bolli <dev+git@drbeat.li>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7ed318fc91ccd746a38d175b7664c6b964423c8f", "commit_date": "2023-09-25T22:01:06Z", "commit_message": "Merge branch 'js/doc-status-with-submodules-mark-up-fix' into next\n\nDocfix.\n\n* js/doc-status-with-submodules-mark-up-fix:\n  Documentation/git-status: add missing line breaks", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0563c8d8a11c753ac9d4bb2b150522bb322438d5", "commit_date": "2023-09-25T22:01:05Z", "commit_message": "Merge branch 'jc/unresolve-removal' into next\n\n\"checkout --merge -- path\" and \"update-index --unresolve path\" did\nnot resurrect conflicted state that was resolved to remove path,\nbut now they do.\n\n* jc/unresolve-removal:\n  checkout: allow \"checkout -m path\" to unmerge removed paths\n  checkout/restore: add basic tests for --merge\n  checkout/restore: refuse unmerging paths unless checking out of the index\n  update-index: remove stale fallback code for \"--unresolve\"\n  update-index: use unmerge_index_entry() to support removal\n  resolve-undo: allow resurrecting conflicted state that resolved to deletion\n  update-index: do not read HEAD and MERGE_HEAD unconditionally", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a3d2e83a17d6ab9c50d14cfdff9f70a69de5c4c4", "commit_date": "2023-09-25T21:52:34Z", "commit_message": "ref-filter: add mailmap support\n\nAdd mailmap support to ref-filter formats which are similar in\npretty. This support is such that the following pretty placeholders are\nequivalent to the new ref-filter atoms:\n\n\t%aN = authorname:mailmap\n\t%cN = committername:mailmap\n\n\t%aE = authoremail:mailmap\n\t%aL = authoremail:mailmap,localpart\n\t%cE = committeremail:mailmap\n\t%cL = committeremail:mailmap,localpart\n\nAdditionally, mailmap can also be used with \":trim\" option for email by\ndoing something like \"authoremail:mailmap,trim\".\n\nThe above also applies for the \"tagger\" atom, that is,\n\"taggername:mailmap\", \"taggeremail:mailmap\", \"taggeremail:mailmap,trim\"\nand \"taggername:mailmap,localpart\".\n\nThe functionality of \":trim\" and \":localpart\" remains the same. That is,\n\":trim\" gives the email, but without the angle brackets and \":localpart\"\ngives the part of the email before the '@' character (if such a\ncharacter is not found then we directly grab everything between the\nangle brackets).\n\nMentored-by: Christian Couder <christian.couder@gmail.com>\nMentored-by: Hariom Verma <hariom18599@gmail.com>\nSigned-off-by: Kousik Sanagavarapu <five231003@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0144f0de77edc96c6cd72ab9d50a68fc4c9c092e", "commit_date": "2023-09-25T21:52:33Z", "commit_message": "t/t6300: introduce test_bad_atom\n\nIntroduce a new function \"test_bad_atom\", which is similar to\n\"test_atom()\" but should be used to check whether the correct error\nmessage is shown on stderr.\n\nLike \"test_atom\", the new function takes three arguments. The three\narguments specify the ref, the format and the expected error message\nrespectively, with an optional fourth argument for tweaking\n\"test_expect_*\" (which is by default \"success\").\n\nMentored-by: Christian Couder <christian.couder@gmail.com>\nMentored-by: Hariom Verma <hariom18599@gmail.com>\nSigned-off-by: Kousik Sanagavarapu <five231003@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "04830eb762c83609a63805716daedb36014f6b6c", "commit_date": "2023-09-25T21:52:33Z", "commit_message": "t/t6300: cleanup test_atom\n\nPreviously, when the executable part of \"test_expect_{success,failure}\"\n(inside \"test_atom\") got \"eval\"ed, it would have been syntactically\nincorrect if the second argument ($2, which is the format) to \"test_atom\"\nwere enclosed in single quotes because the $variables would get\ninterpolated even before the arguments to \"test_expect_{success,failure}\"\nare formed.\n\nSo fix this and also some style issues along the way.\n\nHelped-by: Junio C Hamano <gitster@pobox.com>\nMentored-by: Christian Couder <christian.couder@gmail.com>\nMentored-by: Hariom Verma <hariom18599@gmail.com>\nSigned-off-by: Kousik Sanagavarapu <five231003@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a4c9e7b32c4154345785bd7b8d4afee5fddcead", "commit_date": "2023-09-25T21:37:42Z", "commit_message": "merge-tree: add -X strategy option\n\nAdd merge strategy option to produce more customizable merge result such\nas automatically resolving conflicts.\n\nSigned-off-by: Tang Yuyi <winglovet@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c13d2adf8b4e5e364224b97c3ec6cbe29a7f23ed", "commit_date": "2023-09-25T17:12:49Z", "commit_message": "coverity: allow running on macOS\n\nFor completeness' sake, let's add support for submitting macOS builds to\nCoverity Scan.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d3c3ffa6249adce1f007ac43374cb540524fe767", "commit_date": "2023-09-25T17:12:49Z", "commit_message": "coverity: support building on Windows\n\nBy adding the repository variable `ENABLE_COVERITY_SCAN_ON_OS` with a\nvalue, say, `[\"windows-latest\"]`, this GitHub workflow now runs on\nWindows, allowing to analyze Windows-specific issues.\n\nThis allows, say, the Git for Windows fork to submit Windows builds to\nCoverity Scan instead of Linux builds.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7bc49e8f553c0f76cccd142c33715ee8f1b15811", "commit_date": "2023-09-25T17:12:49Z", "commit_message": "coverity: allow overriding the Coverity project\n\nBy default, the builds are submitted to the `git` project at\nhttps://scan.coverity.com/projects/git.\n\nThe Git for Windows project would like to use this workflow, too,\nthough, and needs the builds to be submitted to the `git-for-windows`\nCoverity project.\n\nTo that end, allow configuring the Coverity project name via the\nrepository variable, you guessed it, `COVERITY_PROJECT`. The default if\nthat variable is not configured or has an empty value is still `git`.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "002e5e9ad163f30e1664a2bf37e45097c8ab6be5", "commit_date": "2023-09-25T17:12:48Z", "commit_message": "coverity: cache the Coverity Build Tool\n\nIt would add a 1GB+ download for every run, better cache it.\n\nThis is inspired by the GitHub Action `vapier/coverity-scan-action`,\nhowever, it uses the finer-grained `restore`/`save` method to be able to\ncache the Coverity Build Tool even if an unrelated step in the GitHub\nworkflow fails later on.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a56b6230d0b1901c01e355320c7afdbf5a6ae01b", "commit_date": "2023-09-25T17:12:48Z", "commit_message": "ci: add a GitHub workflow to submit Coverity scans\n\nCoverity is a static analysis tool that detects and generates reports on\nvarious security and code quality issues.\n\nIt is particularly useful when diagnosing memory safety issues which may\nbe used as part of exploiting a security vulnerability.\n\nCoverity's website provides a service that accepts \"builds\" (which\ncontains the object files generated during a standard build as well as a\ndatabase generated by Coverity's scan tool).\n\nLet's add a GitHub workflow to automate all of this. To avoid running it\nwithout appropriate Coverity configuration (e.g. the token required to\nuse Coverity's services), the job only runs when the repository variable\n\"ENABLE_COVERITY_SCAN_FOR_BRANCHES\" has been configured accordingly (see\nhttps://docs.github.com/en/actions/learn-github-actions/variables for\ndetails how to configure repository variables): It is expected to be a\nvalid JSON array of branch strings, e.g. `[\"main\", \"next\"]`.\n\nIn addition, this workflow requires two repository secrets:\n\n- COVERITY_SCAN_EMAIL: the email to send the report to, and\n\n- COVERITY_SCAN_TOKEN: the Coverity token (look in the Project Settings\n  tab of your Coverity project).\n\nNote: The initial version of this patch used\n`vapier/coverity-scan-action` to benefit from that Action's caching of\nthe Coverity tool, which is rather large. Sadly, that Action only\nsupports Linux, and we want to have the option of building on Windows,\ntoo. Besides, in the meantime Coverity requires `cov-configure` to be\nrunantime, and that Action was not adjusted accordingly, i.e. it seems\nnot to be maintained actively. Therefore it would seem prudent to\nimplement the steps manually instead of using that Action.\n\nInitial-patch-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f97c8b1e00297570a390789be84513f435d5ea52", "commit_date": "2023-09-25T16:59:04Z", "commit_message": "revision: make pseudo-opt flags read via stdin behave consistently\n\nWhen reading revisions from stdin via git-rev-list(1)'s `--stdin` option\nthen these revisions never honor flags like `--not` which have been\npassed on the command line. Thus, an invocation like e.g. `git rev-list\n--all --not --stdin` will not treat all revisions read from stdin as\nuninteresting. While this behaviour may be surprising to a user, it's\nbeen this way ever since it has been introduced via 42cabc341c4 (Teach\nrev-list an option to read revs from the standard input., 2006-09-05).\n\nWith that said, in c40f0b7877 (revision: handle pseudo-opts in `--stdin`\nmode, 2023-06-15) we have introduced a new mode to read pseudo opts from\nstandard input where this behaviour is a lot more confusing. If you pass\n`--not` via stdin, it will:\n\n    - Influence subsequent revisions or pseudo-options passed on the\n      command line.\n\n    - Influence pseudo-options passed via standard input.\n\n    - _Not_ influence normal revisions passed via standard input.\n\nThis behaviour is extremely inconsistent and bound to cause confusion.\n\nWhile it would be nice to retroactively change the behaviour for how\n`--not` and `--stdin` behave together, chances are quite high that this\nwould break existing scripts that expect the current behaviour that has\nbeen around for many years by now. This is thus not really a viable\noption to explore to fix the inconsistency.\n\nInstead, we change the behaviour of how pseudo-opts read via standard\ninput influence the flags such that the effect is fully localized. With\nthis change, when reading `--not` via standard input, it will:\n\n    - _Not_ influence subsequent revisions or pseudo-options passed on\n      the command line, which is a change in behaviour.\n\n    - Influence pseudo-options passed via standard input.\n\n    - Influence normal revisions passed via standard input, which is a\n      change in behaviour.\n\nThus, all flags read via standard input are fully self-contained to that\nstandard input, only.\n\nWhile this is a breaking change as well, the behaviour has only been\nrecently introduced with Git v2.42.0. Furthermore, the current behaviour\ncan be regarded as a simple bug. With that in mind it feels like the\nright thing to retroactively change it and make the behaviour sane.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nReported-by: Christian Couder <christian.couder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8ccd20d70d13287c9d32e64e7979b41cda189595", "commit_date": "2023-09-23T00:03:14Z", "commit_message": "Sync with 'master'", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7f7589a06ac3f3b527951c9f7bed09c64e819ff2", "commit_date": "2023-09-23T00:02:45Z", "commit_message": "Merge branch 'ob/am-msgfix' into next\n\nThe parameters to generate an error message have been corrected.\n\n* ob/am-msgfix:\n  am: fix error message in parse_opt_show_current_patch()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bbe2f7593786a92cd3550aa067b2286800ec2a65", "commit_date": "2023-09-23T00:02:45Z", "commit_message": "Merge branch 'jk/test-pass-ubsan-options-to-http-test' into next\n\nUBSAN options were not propagated through the test framework to git\nrun via the httpd, unlike ASAN options, which has been corrected.\n\n* jk/test-pass-ubsan-options-to-http-test:\n  test-lib: set UBSAN_OPTIONS to match ASan", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1d069e900bd14277c7f03c97b7e486aea67a01ce", "commit_date": "2023-09-23T00:02:44Z", "commit_message": "Merge branch 'jc/alias-completion' into next\n\nThe command line completion script (in contrib/) can be told to\ncomplete aliases by including \": git <cmd> ;\" in the alias to tell\nit that the alias should be completed similar to how \"git <cmd>\" is\ncompleted.  The parsing code for the alias as been loosened to\nallow ';' without an extra space before it.\n\n* jc/alias-completion:\n  completion: loosen and document the requirement around completing alias", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5492c03eae81c51a2d140a10cc2e29ae560bae90", "commit_date": "2023-09-23T00:02:44Z", "commit_message": "Merge branch 'hy/doc-show-is-like-log-not-diff-tree' into next\n\nDoc update.\n\n* hy/doc-show-is-like-log-not-diff-tree:\n  show doc: redirect user to git log manual instead of git diff-tree", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac04978b4bde05daa25eeea2c030ae7e2b460d9c", "commit_date": "2023-09-23T00:02:44Z", "commit_message": "Merge branch 'kh/range-diff-notes' into next\n\n\"git range-diff --notes=foo\" compared \"log --notes=foo --notes\" of\nthe two ranges, instead of using just the specified notes tree.\n\n* kh/range-diff-notes:\n  range-diff: treat notes like `log`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dbf5bd96e8c86c6f79b61528f12ca806bd6d9fba", "commit_date": "2023-09-23T00:02:44Z", "commit_message": "Merge branch 'ds/stat-name-width-configuration' into next\n\n\"git diff\" learned diff.statNameWidth configuration variable, to\ngive the default width for the name part in the \"--stat\" output.\n\n* ds/stat-name-width-configuration:\n  diff --stat: add config option to limit filename width", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d24cb318e91c06edb4d3bbda0f8895edf16662b1", "commit_date": "2023-09-22T23:17:20Z", "commit_message": "Merge branch 'la/trailer-cleanups' into next\n\n* la/trailer-cleanups:\n  Revert \"trailer: teach find_patch_start about --no-divider\"\n  Revert \"trailer: rename *_DEFAULT enums to *_UNSPECIFIED\"\n  Revert \"trailer: use offsets for trailer_start/trailer_end\"", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0d803f2547f21040ddad4594003de3bfd1beb1eb", "commit_date": "2023-09-22T23:17:03Z", "commit_message": "Revert \"trailer: teach find_patch_start about --no-divider\"\n\nThis reverts commit ee8c5ee08cee9aee6732ab315e94bc88631c7431, which\nwas premature.  It will be replaced with an updated patch.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a519df3a425e1bb6e4079b660d074d8fe8679d5d", "commit_date": "2023-09-22T23:16:42Z", "commit_message": "Revert \"trailer: rename *_DEFAULT enums to *_UNSPECIFIED\"\n\nThis reverts commit d2be104085b24867e3dd9cb061c75b456071b351, which\nwas premature.  It will be replaced with an updated patch.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "730a981d040b489b8371220af5aba762c3791241", "commit_date": "2023-09-22T23:16:12Z", "commit_message": "Revert \"trailer: use offsets for trailer_start/trailer_end\"\n\nThis reverts commit b5e75f87b5881811a7eee8ea6aa10cd43f1fe430, which\nwas premature.  It will be replaced with an updated patch.", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "252d693797912ddb2684733160170f0408b73274", "commit_date": "2023-09-21T21:10:36Z", "commit_message": "test-lib: set UBSAN_OPTIONS to match ASan\n\nFor a long time we have used ASAN_OPTIONS to set abort_on_error. This is\nimportant because we want to notice detected problems even in programs\nwhich are expected to fail. But we never did the same for UBSAN_OPTIONS.\nThis means that our UBSan test suite runs might silently miss some\ncases.\n\nIt also causes a more visible effect, which is that t4058 complains\nabout unexpected \"fixes\" (and this is how I noticed the issue):\n\n  $ make SANITIZE=undefined CC=gcc && (cd t && ./t4058-*)\n  ...\n  ok 8 - git read-tree does not segfault # TODO known breakage vanished\n  ok 9 - reset --hard does not segfault # TODO known breakage vanished\n  ok 10 - git diff HEAD does not segfault # TODO known breakage vanished\n\nThe tests themselves aren't that interesting. We have a known bug where\nthese programs segfault, and they do when compiled without sanitizers.\nWith UBSan, when the test runs:\n\n  test_might_fail git read-tree --reset base\n\nit gets:\n\n  cache-tree.c:935:9: runtime error: member access within misaligned address 0x5a5a5a5a5a5a5a5a for type 'struct cache_entry', which requires 8 byte alignment\n\nSo that's garbage memory which would _usually_ cause us to segfault, but\nUBSan catches it and complains first about the alignment. That makes\nsense, but the weird thing is that UBSan then exits instead of aborting,\nso our test_might_fail call considers that an acceptable outcome and the\ntest \"passes\".\n\nCuriously, this historically seems to have aborted, because I've run\n\"make test\" with UBSan many times (and so did our CI) and we never saw\nthe problem. Even more curiously, I see an abort if I use clang with\nASan and UBSan together, like:\n\n  # this aborts!\n  make SANITIZE=undefined,address CC=clang\n\nBut not with just UBSan, and not with both when used with gcc:\n\n  # none of these do\n  make SANITIZE=undefined CC=gcc\n  make SANITIZE=undefined CC=clang\n  make SANITIZE=undefined,address CC=gcc\n\nLikewise moving to older versions of gcc (I tried gcc-11 and gcc-12 on\nmy Debian system) doesn't abort. Nor does moving around in Git's\nhistory. Neither this test nor the relevant code have been touched in a\nwhile, and going back to v2.41.0 produces the same outcome (even though\nmany UBSan CI runs have passed in the meantime).\n\nSo _something_ changed on my system (and likely will soon on other\npeople's, since this is stock Debian unstable), but I didn't track\nit further. I don't know why it ever aborted in the past, but we\ndefinitely should be explicit here and tell UBSan what we want to\nhappen.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8d73a2cc036199a25cc97586937267ec14cb6eae", "commit_date": "2023-09-20T18:41:41Z", "commit_message": "completion: loosen and document the requirement around completing alias\n\nRecently we started to tell users to spell \": git foo ;\" with\nspace(s) around 'foo' for an alias to be completed similarly\nto the 'git foo' command.  It however is easy to also allow users to\nspell it in a more natural way with the semicolon attached to 'foo',\ni.e. \": git foo;\".  Also, add a comment to note that 'git' is optional\nand writing \": foo;\" would complete the alias just fine.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "421c3b1b808c864af83e15efdc400a26ef4a61cd", "commit_date": "2023-09-20T17:49:27Z", "commit_message": "Sync with 'master'", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6bdb5b11d60b6990a62bd924d2e7c3f0115d4827", "commit_date": "2023-09-20T17:45:58Z", "commit_message": "The eleventh batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3c2af826a35ecba8533748db5bd0a4dbda2d33db", "commit_date": "2023-09-20T17:45:16Z", "commit_message": "Merge branch 'jc/update-index-show-index-version'\n\n\"git update-index\" learns \"--show-index-version\" to inspect\nthe index format version used by the on-disk index file.\n\n* jc/update-index-show-index-version:\n  test-tool: retire \"index-version\"\n  update-index: add --show-index-version\n  update-index doc: v4 is OK with JGit and libgit2", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "767e4d68c7dab58e55c4f43ee8a490c946e480b8", "commit_date": "2023-09-20T17:44:58Z", "commit_message": "Merge branch 'ob/t3404-typofix'\n\nCode clean-up.\n\n* ob/t3404-typofix:\n  t3404-rebase-interactive.sh: fix typos in title of a rewording test", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e72b42a52bd7171c5173cfd82bda5c30bc024c8", "commit_date": "2023-09-20T17:44:58Z", "commit_message": "Merge branch 'ob/sequencer-remove-dead-code'\n\nCode clean-up.\n\n* ob/sequencer-remove-dead-code:\n  sequencer: remove unreachable exit condition in pick_commits()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8c71f082eb2336909b4a291d014c98dbdde18a92", "commit_date": "2023-09-20T17:44:58Z", "commit_message": "Merge branch 'pb/completion-aliases-doc'\n\nClarify how \"alias.foo = : git cmd ; aliased-command-string\" should\nbe spelled with necessary whitespaces around punctuation marks to\nwork.\n\n* pb/completion-aliases-doc:\n  completion: improve doc for complex aliases", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e9dac4b86c2c06f834eedad88302b76d2981c039", "commit_date": "2023-09-20T17:44:57Z", "commit_message": "Merge branch 'pb/complete-commit-trailers'\n\nThe command-line complation support (in contrib/) learned to\ncomplete \"git commit --trailer=\" for possible trailer keys.\n\n* pb/complete-commit-trailers:\n  completion: commit: complete trailers tokens more robustly\n  completion: commit: complete configured trailer tokens", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "671eaaac0caac4826d6182bd5a57c9e0a8ed7a27", "commit_date": "2023-09-20T17:44:57Z", "commit_message": "Merge branch 'js/diff-cached-fsmonitor-fix'\n\n\"git diff --cached\" codepath did not fill the necessary stat\ninformation for a file when fsmonitor knows it is clean and ended\nup behaving as if it is not clean, which has been corrected.\n\n* js/diff-cached-fsmonitor-fix:\n  diff-lib: fix check_removed when fsmonitor is on", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bd49a2998a87fe911dfa5f6574443968faa5878a", "commit_date": "2023-09-20T17:44:57Z", "commit_message": "Merge branch 'js/systemd-timers-wsl-fix'\n\nUpdate \"git maintainance\" timers' implementation based on systemd\ntimers to work with WSL.\n\n* js/systemd-timers-wsl-fix:\n  maintenance(systemd): support the Windows Subsystem for Linux", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7435d51bfd183d2f6fd9fc9fc20a11d413d152ac", "commit_date": "2023-09-20T17:44:57Z", "commit_message": "Merge branch 'pw/diff-no-index-from-named-pipes'\n\n\"git diff --no-index -R <(one) <(two)\" did not work correctly,\nwhich has been corrected.\n\n* pw/diff-no-index-from-named-pipes:\n  diff --no-index: fix -R with stdin", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4fbe83fcd96cb49d2cdec3bc1660fe280d02c9a4", "commit_date": "2023-09-20T15:52:59Z", "commit_message": "show doc: redirect user to git log manual instead of git diff-tree\n\nWhile git show accepts options that apply to the git diff-tree command,\nsome options do not make sense in the context of git show.\nThe options of git show are handled using the machinery of git log.\nThe git log manual page is a better place to look into than git diff-tree\nfor options that are not in the git show manual page.\n\nSigned-off-by: Han Young <hanyang.tony@bytedance.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2e0d30d928dbb8899ebae749ceeb257e634d57f7", "commit_date": "2023-09-19T21:40:19Z", "commit_message": "range-diff: treat notes like `log`\n\nCurrently, `range-diff` shows the default notes if no notes-related\narguments are given. This is also how `log` behaves. But unlike\n`range-diff`, `log` does *not* show the default notes if\n`--notes=<custom>` are given. In other words, this:\n\n    git log --notes=custom\n\nis equivalent to this:\n\n    git log --no-notes --notes=custom\n\nWhile:\n\n    git range-diff --notes=custom\n\nacts like this:\n\n    git log --notes --notes-custom\n\nThis can\u2019t be how the user expects `range-diff` to behave given that the\nman page for `range-diff` under `--[no-]notes[=<ref>]` says:\n\n> This flag is passed to the `git log` program (see git-log(1)) that\n> generates the patches.\n\nThis behavior also affects `format-patch` since it uses `range-diff` for\nthe cover letter. Unlike `log`, though, `format-patch` is not supposed\nto show the default notes if no notes-related arguments are given.[1]\nBut this promise is broken when the range-diff happens to have something\nto say about the changes to the default notes, since that will be shown\nin the cover letter.\n\nRemedy this by introducing `--show-notes-by-default` that `range-diff` can\nuse to tell the `log` subprocess what to do.\n\n\u00a7 Authors\n\n\u2022 Fix by Johannes\n\u2022 Tests by Kristoffer\n\n\u2020 1: See e.g. 66b2ed09c2 (Fix \"log\" family not to be too agressive about\n    showing notes, 2010-01-20).\n\nCo-authored-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>\nSigned-off-by: Kristoffer Haugsbakk <code@khaugsbakk.name>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bd06505f9e3b71fbe55c339b9e635ade27246b0f", "commit_date": "2023-09-19T19:47:22Z", "commit_message": "Merge branch 'jk/fsmonitor-unused-parameter' into next\n\nUnused parameters in fsmonitor related code paths have been marked\nas such.\n\n* jk/fsmonitor-unused-parameter:\n  run-command: mark unused parameters in start_bg_wait callbacks\n  fsmonitor: mark unused hashmap callback parameters\n  fsmonitor/darwin: mark unused parameters in system callback\n  fsmonitor: mark unused parameters in stub functions\n  fsmonitor/win32: mark unused parameter in fsm_os__incompatible()\n  fsmonitor: mark some maybe-unused parameters\n  fsmonitor/win32: drop unused parameters\n  fsmonitor: prefer repo_git_path() to git_pathdup()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0565b0b14bd7696f862add771bb68e61a04299dd", "commit_date": "2023-09-19T19:47:22Z", "commit_message": "Merge branch 'ml/git-gui-exec-path-fix' into next\n\nFix recent regression in Git-GUI that fails to run hook scripts at\nall.\n\n* ml/git-gui-exec-path-fix:\n  git-gui - use git-hook, honor core.hooksPath\n  git-gui - re-enable use of hook scripts", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d0372823919da5b40d0c3ce1f4d009c033db838b", "commit_date": "2023-09-19T19:47:22Z", "commit_message": "Merge branch 'tb/send-email-extract-valid-address-error-message-fix' into next\n\nAn error message given by \"git send-email\" when given a malformed\naddress did not give correct information, which has been corrected.\n\n* tb/send-email-extract-valid-address-error-message-fix:\n  git-send-email.perl: avoid printing undef when validating addresses", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e16b715bb252e67f1f5e511cac9e1830bfef9b2", "commit_date": "2023-09-19T19:47:21Z", "commit_message": "Merge branch 'ch/clean-docfix' into next\n\nTypofix.\n\n* ch/clean-docfix:\n  git-clean doc: fix \"without do cleaning\" typo", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2c8ad3e731c5c28b9aa6ebdf7d19c4061b83b7ad", "commit_date": "2023-09-19T19:47:21Z", "commit_message": "Merge branch 'eg/config-type-path-docfix' into next\n\nTypofix.\n\n* eg/config-type-path-docfix:\n  git-config: fix misworded --type=path explanation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d40278ef9e7696d7e9fcb4e40d03537c76eff53c", "commit_date": "2023-09-19T19:47:21Z", "commit_message": "Merge branch 'jk/redact-h2h3-headers-fix' into next\n\nHTTP Header redaction code has been adjusted for a newer version of\ncURL library that shows its traces differently from earlier\nversions.\n\n* jk/redact-h2h3-headers-fix:\n  http: update curl http/2 info matching for curl 8.3.0\n  http: factor out matching of curl http/2 trace lines", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "72da9832c21c96b2109408d9de7b6ce45fff8847", "commit_date": "2023-09-18T22:56:15Z", "commit_message": "run-command: mark unused parameters in start_bg_wait callbacks\n\nThe start_bg_command() function takes a callback to tell when the\nbackground-ed process is \"ready\". The callback receives the\nchild_process struct as well as an extra void pointer. But curiously,\nneither of the two users of this interface look at either parameter!\n\nThis makes some sense. The only non-test user of the API is fsmonitor,\nwhich uses fsmonitor_ipc__get_state() to connect to a single global\nfsmonitor daemon (i.e., the one we just started!).\n\nSo we could just drop these parameters entirely. But it seems like a\npretty reasonable interface for the \"wait\" callback to have access to\nthe details of the spawned process, and to have room for passing extra\ndata through a void pointer. So let's leave these in place but mark the\nunused ones so that -Wunused-parameter does not complain.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1fe41944b268c5e999c5bbd9539e7dcd18c2c5de", "commit_date": "2023-09-18T22:56:15Z", "commit_message": "fsmonitor: mark unused hashmap callback parameters\n\nLike many hashmap comparison functions, our cookies_cmp() does not look\nat its extra void data parameter. This should have been annotated in\n02c3c59e62 (hashmap: mark unused callback parameters, 2022-08-19), but\nthis new case was added around the same time (plus fsmonitor is not\nbuilt at all on Linux, so it is easy to miss there).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "997eb910a644491b8793ae0459ee2c5d89f239f8", "commit_date": "2023-09-18T22:56:15Z", "commit_message": "fsmonitor/darwin: mark unused parameters in system callback\n\nWe pass fsevent_callback() to the system FSEventStreamCreate() function\nas a callback. So we must match the expected function signature, even\nthough we don't care about all of the parameters. Mark the unused ones\nto satisfy -Wunused-parameter.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4cb5e0b3b98c70912756551238b91fccf5f09c1e", "commit_date": "2023-09-18T22:56:15Z", "commit_message": "fsmonitor: mark unused parameters in stub functions\n\nThe fsmonitor code has some platform-specific functions for which one or\nmore platforms implement noop or stub functions. We can't get rid of\nthese functions nor change their interface, since the point is to match\ntheir equivalents in other platforms. But let's annotate their\nparameters to quiet the compiler's -Wunused-parameter warning.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "caf433bbdf5516d6b17420c952795e8debdb2a6f", "commit_date": "2023-09-18T22:56:15Z", "commit_message": "fsmonitor/win32: mark unused parameter in fsm_os__incompatible()\n\nWe never look at the \"ipc\" argument we receive. It was added in\n8f44976882 (fsmonitor: avoid socket location check if using hook,\n2022-10-04) to support the darwin fsmonitor code. The win32 code has to\nmatch the same interface, but we should use an annotation to silence\n-Wunused-parameter.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4c5778b2dca447ae130cfab6cc9b7b614e7ec43", "commit_date": "2023-09-18T22:56:14Z", "commit_message": "fsmonitor: mark some maybe-unused parameters\n\nThere's a bit of conditionally-compiled code in fsmonitor, so some\nfunction parameters may be unused depending on the build options:\n\n  - in fsmonitor--daemon.c's try_to_run_foreground_daemon(), we take a\n    detach_console argument, but it's only used on Windows. This seems\n    intentional (and not mistakenly missing other platforms) based on\n    the discussion in c284e27ba7 (fsmonitor--daemon: implement 'start'\n    command, 2022-03-25), which introduced it.\n\n  - in fsmonitor-setting.c's check_for_incompatible(), we pass the \"ipc\"\n    flag down to the system-specific fsm_os__incompatible() helper. But\n    we can only do so if our platform has such a helper.\n\nIn both cases we can mark the argument as MAYBE_UNUSED. That annotates\nit enough to suppress the compiler's -Wunused-parameter warning, but\nwithout making it impossible to use the variable, as a regular UNUSED\nannotation would.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42e862c0b3127736040790a11a4f44a0dee69888", "commit_date": "2023-09-18T22:56:14Z", "commit_message": "fsmonitor/win32: drop unused parameters\n\nA few helper functions (centered around file-watch events) take extra\nfsmonitor state parameters that they don't use. These are static helpers\nlocal to the win32 implementation, and don't need to conform to any\nparticular interface. We can just drop the extra parameters, which\nsimplifies the code and silences -Wunused-parameter.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "00df20a7ab4a4de355f69157acfd2502ab58a3aa", "commit_date": "2023-09-18T22:56:14Z", "commit_message": "fsmonitor: prefer repo_git_path() to git_pathdup()\n\nThe fsmonitor_ipc__get_path() function ignores its repository argument.\nIt should use it when constructing repo paths (though in practice, it is\nunlikely anything but the_repository is ever passed, so this is cleanup\nand future proofing, not a bug fix).\n\nNote that despite the lack of \"dup\" in the name, repo_git_path() behaves\nlike git_pathdup() and returns an allocated string.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a6d417599a4db79b6ed6cfbb295c98e8d1690fd5", "commit_date": "2023-09-18T21:03:57Z", "commit_message": "Sync with 'master'", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d4a83d07b8cc66d4afac2f33a8af729f2ba93bba", "commit_date": "2023-09-18T20:53:22Z", "commit_message": "The tenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f41c5a5eec6a8fcc2ed683541d50e4bfe0a066ba", "commit_date": "2023-09-18T20:53:13Z", "commit_message": "Merge branch 'js/complete-checkout-t'\n\nThe completion script (in contrib/) has been taught to treat the\n\"-t\" option to \"git checkout\" and \"git switch\" just like the\n\"--track\" option, to complete remote-tracking branches.\n\n* js/complete-checkout-t:\n  completion(switch/checkout): treat --track and -t the same", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "921a713d66acdc90427ab80c4cb039be73b3ae72", "commit_date": "2023-09-18T20:53:13Z", "commit_message": "Merge branch 'rs/grep-no-no-or'\n\n\"git grep -e A --no-or -e B\" is accepted, even though the negation\nof \"or\" did not mean anything, which has been tightened.\n\n* rs/grep-no-no-or:\n  grep: reject --no-or", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25a5dfc38e3899ac560809321e23402d874c8d36", "commit_date": "2023-09-18T19:14:08Z", "commit_message": "Merge branch 'jk/ort-unused-parameter-cleanups' into next\n\nCode clean-up.\n\n* jk/ort-unused-parameter-cleanups:\n  merge-ort: lowercase a few error messages\n  merge-ort: drop unused \"opt\" parameter from merge_check_renames_reusable()\n  merge-ort: drop unused parameters from detect_and_process_renames()\n  merge-ort: stop passing \"opt\" to read_oid_strbuf()\n  merge-ort: drop custom err() function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12288cc44e48810758b6d38b453b94568cb6fce3", "commit_date": "2023-09-18T19:04:30Z", "commit_message": "git-send-email.perl: avoid printing undef when validating addresses\n\nWhen validating email addresses with `extract_valid_address_or_die()`,\nwe print out a helpful error message when the given input does not\ncontain a valid email address.\n\nHowever, the pre-image of this patch looks something like:\n\n    my $address = shift;\n    $address = extract_valid_address($address):\n    die sprintf(__(\"...\"), $address) if !$address;\n\nwhich fails when given a bogus email address by trying to use $address\n(which is undef) in a sprintf() expansion, like so:\n\n    $ git.compile send-email --to=\"pi <pi@pi>\" /tmp/x/*.patch --force\n    Use of uninitialized value $address in sprintf at /home/ttaylorr/src/git/git-send-email line 1175.\n    error: unable to extract a valid address from:\n\nThis regression dates back to e431225569 (git-send-email: remove invalid\naddresses earlier, 2012-11-22), but became more noticeable in a8022c5f7b\n(send-email: expose header information to git-send-email's\nsendemail-validate hook, 2023-04-19), which validates SMTP headers in\nthe sendemail-validate hook.\n\nAvoid trying to format an undef by storing the given and cleaned address\nseparately. After applying this fix, the error contains the invalid\nemail address, and the warning disappears:\n\n    $ git.compile send-email --to=\"pi <pi@pi>\" /tmp/x/*.patch --force\n    error: unable to extract a valid address from: pi <pi@pi>\n\nReported-by: Bagas Sanjaya <bagasdotme@gmail.com>\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c22e9efe9c283ec34a4bb79856114088ee616237", "commit_date": "2023-09-18T17:52:30Z", "commit_message": "Merge git-gui into ml/git-gui-exec-path-fix\n\n* git-gui:\n  git-gui - use git-hook, honor core.hooksPath\n  git-gui - re-enable use of hook scripts", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0730a5a3a5e69e4b5fa0fbf6edd7fcbd7a08c992", "commit_date": "2023-09-18T17:51:32Z", "commit_message": "git-gui - use git-hook, honor core.hooksPath\n\ngit-gui currently runs some hooks directly using its own code written\nbefore 2010, long predating git v2.9 that added the core.hooksPath\nconfiguration to override the assumed location at $GIT_DIR/hooks.  Thus,\ngit-gui looks for and runs hooks including prepare-commit-msg,\ncommit-msg, pre-commit, post-commit, and post-checkout from\n$GIT_DIR/hooks, regardless of configuration. Commands (e.g., git-merge)\nthat git-gui invokes directly do honor core.hooksPath, meaning the\noverall behaviour is inconsistent.\n\nFurthermore, since v2.36 git exposes its hook execution machinery via\n`git-hook run`, eliminating the need for others to maintain code\nduplicating that functionality.  Using git-hook will both fix git-gui's\ncurrent issues on hook configuration and (presumably) reduce the\nmaintenance burden going forward. So, teach git-gui to use git-hook.\n\nSigned-off-by: Mark Levedahl <mlevedahl@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bd48adc31d0522e7877aa494ce7df91581e09587", "commit_date": "2023-09-18T16:39:07Z", "commit_message": "diff --stat: add config option to limit filename width\n\nAdd new configuration option diff.statNameWidth=<width> that is equivalent\nto the command-line option --stat-name-width=<width>, but it is ignored\nby format-patch.  This follows the logic established by the already\nexisting configuration option diff.statGraphWidth=<width>.\n\nLimiting the widths of names and graphs in the --stat output makes sense\nfor interactive work on wide terminals with many columns, hence the support\nfor these configuration options.  They don't affect format-patch because\nit already adheres to the traditional 80-column standard.\n\nUpdate the documentation and add more tests to cover new configuration\noption diff.statNameWidth=<width>.  While there, perform a few minor code\nand whitespace cleanups here and there, as spotted.\n\nSigned-off-by: Dragan Simic <dsimic@manjaro.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3f71c97e180de4a9286ad2d7d19dfe4a22f2dd8b", "commit_date": "2023-09-17T00:46:25Z", "commit_message": "git-gui - re-enable use of hook scripts\n\nEarlier, commit aae9560a introduced search in $PATH to find executables\nbefore running them, avoiding an issue where on Windows a same named\nfile in the current directory can be executed in preference to anything\nin a directory in $PATH. This search is intended to find an absolute\npath for a bare executable ( e.g, a function \"foo\") by finding the first\ninstance of \"foo\" in a directory given in $PATH, and this search works\ncorrectly.  The search is explicitly avoided for an executable named\nwith an absolute path (e.g., /bin/sh), and that works as well.\n\nUnfortunately, the search is also applied to commands named with a\nrelative path. A hook script (or executable) $HOOK is usually located\nrelative to the project directory as .git/hooks/$HOOK. The search for\nthis will generally fail as that relative path will (probably) not exist\non any directory in $PATH. This means that git hooks in general now fail\nto run. Considerable mayhem could occur should a directory on $PATH be\ngit controlled. If such a directory includes .git/hooks/$HOOK, that\nrepository's $HOOK will be substituted for the one in the current\nproject, with unknown consequences.\n\nThis lookup failure also occurs in worktrees linked to a remote .git\ndirectory using git-new-workdir. However, a worktree using a .git file\npointing to a separate git directory apparently avoids this: in that\ncase the hook command is resolved to an absolute path before being\npassed down to the code introduced in aae9560a.\n\nFix this by replacing the test for an \"absolute\" pathname to a check for\na command name having more than one pathname component. This limits the\nsearch and absolute pathname resolution to bare commands. The new test\nuses tcl's \"file split\" command. Experiments on Linux and Windows, using\ntclsh, show that command names with relative and absolute paths always\ngive at least two components, while a bare command gives only one.\n\n\t  Linux:   puts [file split {foo}]       ==>  foo\n\t  Linux:   puts [file split {/foo}]      ==>  / foo\n\t  Linux:   puts [file split {.git/foo}]  ==> .git foo\n\t  Windows: puts [file split {foo}]       ==>  foo\n\t  Windows: puts [file split {c:\\foo}]    ==>  c:/ foo\n\t  Windows: puts [file split {.git\\foo}]  ==> .git foo\n\nThe above results show the new test limits search and replacement\nto bare commands on both Linux and Windows.\n\nSigned-off-by: Mark Levedahl <mlevedahl@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "24c5a270d10a7857cc3f0e6f3b04933f69ee2c8c", "commit_date": "2023-09-17T00:26:53Z", "commit_message": "merge-ort: lowercase a few error messages\n\nAs noted in CodingGuidelines, error messages should not be capitalized.\nFix up a few of these that were copied verbatim from merge-recursive to\nmatch our modern style.\n\nWe'll likewise fix up the matching ones from merge-recursive. We care a\nbit less there, since the hope is that it will eventually go away. But\nbesides being the right thing to do in the meantime, it is necessary for\nt6406 to pass both with and without GIT_TEST_MERGE_ALGORITHM set (one of\nour CI jobs sets it to \"recursive\", which will use the merge-recursive.c\ncode). An alternative would be to use \"grep -i\" in the test to check\nthe message, but it's nice for the test suite to be be more exact (we'd\nnotice if the capitalization fix regressed).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "563f339d984f42d6c6e65a693ce52c2fea68788b", "commit_date": "2023-09-15T23:05:01Z", "commit_message": "git-clean doc: fix \"without do cleaning\" typo\n\n\"quit without do cleaning\" is not grammatical.\n\nSigned-off-by: Caleb Hill <chill389cc@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "58be11432edfe2fc9887266fe9dbc450b5547e78", "commit_date": "2023-09-15T21:09:37Z", "commit_message": "git-config: fix misworded --type=path explanation\n\nWhen `--type=<type>` was added as a prefered alias for `--<type>` by\nfb0dc3bac1 (builtin/config.c: support `--type=<type>` as preferred\nalias for `--<type>`), the explanation for the path type was\nreworded.  Whereas the previous explanation said \"expand a leading\n`~`\" this was changed to \"adding a leading `~`\".  Change \"adding\" to\n\"expanding\" to correctly explain the canonicalization.\n\nSigned-off-by: Evan Gates <evan.gates@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0763c3a2c4f21a9e81990cc5cbee4a66d4efefcb", "commit_date": "2023-09-15T17:54:11Z", "commit_message": "http: update curl http/2 info matching for curl 8.3.0\n\nTo redact header lines in http/2 curl traces, we have to parse past some\nprefix bytes that curl sticks in the info lines it passes to us. That\nchanged once already, and we adapted in db30130165 (http: handle both\n\"h2\" and \"h2h3\" in curl info lines, 2023-06-17).\n\nNow it has changed again, in curl's fbacb14c4 (http2: cleanup trace\nmessages, 2023-08-04), which was released in curl 8.3.0. Running a build\nof git linked against that version will fail to redact the trace (and as\nbefore, t5559 notices and complains).\n\nThe format here is a little more complicated than the other ones, as it\nnow includes a \"stream id\". This is not constant but is always numeric,\nso we can easily parse past it.\n\nWe'll continue to match the old versions, of course, since we want to\nwork with many different versions of curl. We can't even select one\nformat at compile time, because the behavior depends on the runtime\nversion of curl we use, not the version we build against.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "39fa527c8976da84cf70a9ea6b6d92a1fd9bd772", "commit_date": "2023-09-15T17:54:08Z", "commit_message": "http: factor out matching of curl http/2 trace lines\n\nWe have to parse out curl's http/2 trace lines so we can redact their\nheaders. We already match two different types of lines from various\nvintages of curl. In preparation for adding another (which will be\nslightly more complex), let's pull the matching into its own function,\nrather than doing it in the middle of a conditional.\n\nWhile we're doing so, let's expand the comment a bit to describe the two\nmatches. That probably should have been part of db30130165 (http: handle\nboth \"h2\" and \"h2h3\" in curl info lines, 2023-06-17), but will become\neven more important as we add new types.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6eb0c0eb7ac23da7d3bc437b7a5c31f628c25531", "commit_date": "2023-09-14T19:01:29Z", "commit_message": "merge-ort: drop unused \"opt\" parameter from merge_check_renames_reusable()\n\nThe merge_options parameter has never been used since the function was\nintroduced in 64aceb6d73 (merge-ort: add code to check for whether\ncached renames can be reused, 2021-05-20). In theory some merge options\nmight impact our decisions here, but that has never been the case so\nfar.\n\nLet's drop it to appease -Wunused-parameter; it would be easy to add\nback later if we need to (there is only one caller).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fce9ffb2253660346c826a969c2b49a485e70cbd", "commit_date": "2023-09-14T19:01:29Z", "commit_message": "merge-ort: drop unused parameters from detect_and_process_renames()\n\nThis function takes three trees representing the merge base and both\nsides of the merge, but never looks at any of them. This is due to\nf78cf97617 (merge-ort: call diffcore_rename() directly, 2021-02-14).\nPrior to that commit, we passed pairs of trees to diff_tree_oid(). But\nafter that commit, we collect a custom diff_queue for each pair in the\nmerge_options struct, and just run diffcore_rename() on the result. So\nthe function does not need to know about the original trees at all\nanymore.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1c9419ae9d262dab33bef22dea5c166d990b921e", "commit_date": "2023-09-14T19:01:29Z", "commit_message": "merge-ort: stop passing \"opt\" to read_oid_strbuf()\n\nThis function doesn't look at its merge_options parameter. It used to\npass it down to err(), but that function no longer exists (and didn't\nlook at \"opt\" anyway). We can drop it here.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "808e83f2667e4b442a8f58f0c7ef55feb6864f65", "commit_date": "2023-09-14T19:01:29Z", "commit_message": "merge-ort: drop custom err() function\n\nThe merge-ort code has an err() function, but it's really just error()\nin disguise. It differs in two ways:\n\n  1. It takes a \"struct merge_options\" argument. But the function\n     completely ignores it! We can simply remove it.\n\n  2. It formats the error string into a strbuf, prepending \"error: \",\n     and then feeds the result into error(). But this is wrong! The\n     error() function already adds the prefix, so we end up with:\n\n        error: error: Failed to execute internal merge\n\nSo let's just drop this function entirely and call error() directly, as\nthe functions are otherwise identical (note that they both always return\n-1).\n\nPresumably nobody noticed the bogus messages because they are quite hard\nto trigger (they are mostly internal errors reading and writing\nobjects). However, one easy trigger is a custom merge driver which dies\nby signal; we have a test already here, but we were not checking the\ncontents of stderr.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "380fc7ccd1acc85fe06785a0a56d9f99d56dc306", "commit_date": "2023-09-14T18:18:07Z", "commit_message": "Sync with 'master'", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb8065e89c3750d87054c27db564d64876469d65", "commit_date": "2023-09-14T18:17:58Z", "commit_message": "Merge branch 'tb/repack-existing-packs-cleanup' into next\n\nThe code to keep track of existing packs in the repository while\nrepacking has been refactored.\n\n* tb/repack-existing-packs-cleanup:\n  builtin/repack.c: extract common cruft pack loop\n  builtin/repack.c: avoid directly inspecting \"util\"\n  builtin/repack.c: store existing cruft packs separately\n  builtin/repack.c: extract `has_existing_non_kept_packs()`\n  builtin/repack.c: extract redundant pack cleanup for existing packs\n  builtin/repack.c: extract redundant pack cleanup for --geometric\n  builtin/repack.c: extract marking packs for deletion\n  builtin/repack.c: extract structure to store existing packs", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bda494f4043963b9ec9a1ecd4b19b7d1cd9a0518", "commit_date": "2023-09-14T18:17:00Z", "commit_message": "The ninth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "18ad82232f283683612dce2231fcc297d2fcbf5e", "commit_date": "2023-09-14T18:17:00Z", "commit_message": "Merge branch 'so/diff-doc-for-patch-update'\n\nReferences from description of the `--patch` option in various\nmanual pages have been simplified and improved.\n\n* so/diff-doc-for-patch-update:\n  doc/diff-options: fix link to generating patch section", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b995e78147d0ec6bf3af4a7c31e41535409102da", "commit_date": "2023-09-14T18:17:00Z", "commit_message": "Merge branch 'pw/rebase-i-after-failure'\n\nVarious fixes to the behaviour of \"rebase -i\" when the command got\ninterrupted by conflicting changes.\n\n* pw/rebase-i-after-failure:\n  rebase -i: fix adding failed command to the todo list\n  rebase --continue: refuse to commit after failed command\n  rebase: fix rewritten list for failed pick\n  sequencer: factor out part of pick_commits()\n  sequencer: use rebase_path_message()\n  rebase -i: remove patch file after conflict resolution\n  rebase -i: move unlink() calls", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f73604fabf7aa8bc294f346f6a610adb5a464e5e", "commit_date": "2023-09-14T18:16:59Z", "commit_message": "Merge branch 'ob/revert-of-revert-is-reapply'\n\nThe default log message created by \"git revert\", when reverting a\ncommit that records a revert, has been tweaked.\n\n* ob/revert-of-revert-is-reapply:\n  git-revert.txt: add discussion\n  sequencer: beautify subject of reverts of reverts", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "86b56ff267962ab91aa368b10d6df10b1e9e291e", "commit_date": "2023-09-14T18:16:59Z", "commit_message": "Merge branch 'ak/pretty-decorate-more'\n\n\"git log --format\" has been taught the %(decorate) placeholder.\n\n* ak/pretty-decorate-more:\n  decorate: use commit color for HEAD arrow\n  pretty: add pointer and tag options to %(decorate)\n  pretty: add %(decorate[:<options>]) format\n  decorate: color each token separately\n  decorate: avoid some unnecessary color overhead\n  decorate: refactor format_decorations()\n  pretty-formats: enclose options in angle brackets\n  pretty-formats: define \"literal formatting code\"", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "174dfe463778680382d32a280ad73bc12e2017d3", "commit_date": "2023-09-14T18:16:59Z", "commit_message": "Merge branch 'jk/tree-name-and-depth-limit'\n\nWe now limit depth of the tree objects and maximum length of\npathnames recorded in tree objects.\n\n* jk/tree-name-and-depth-limit:\n  lower core.maxTreeDepth default to 2048\n  tree-diff: respect max_allowed_tree_depth\n  list-objects: respect max_allowed_tree_depth\n  read_tree(): respect max_allowed_tree_depth\n  traverse_trees(): respect max_allowed_tree_depth\n  add core.maxTreeDepth config\n  fsck: detect very large tree pathnames\n  tree-walk: rename \"error\" variable\n  tree-walk: drop MAX_TRAVERSE_TREES macro\n  tree-walk: reduce stack size for recursive functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a4e7440fb4b20822e1854925c0dcfae0c64402d", "commit_date": "2023-09-14T18:16:59Z", "commit_message": "Merge branch 'ks/ref-filter-sort-numerically'\n\n\"git for-each-ref --sort='contents:size'\" sorts the refs according\nto size numerically, giving a ref that points at a blob twelve-byte\n(12) long before showing a blob hundred-byte (100) long.\n\n* ks/ref-filter-sort-numerically:\n  ref-filter: sort numerically when \":size\" is used", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d4cab3717f1afb6d0f423fa7b1cd87b657c507e3", "commit_date": "2023-09-14T18:16:58Z", "commit_message": "Merge branch 'rs/name-rev-use-opt-hidden-bool'\n\nSimplify use of parse-options API a bit.\n\n* rs/name-rev-use-opt-hidden-bool:\n  name-rev: use OPT_HIDDEN_BOOL for --peel-tag", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "19d5a0b2c130b167c1f8c5bfab9ef2d8c49f78d0", "commit_date": "2023-09-14T18:16:58Z", "commit_message": "Merge branch 'rs/grep-parseopt-simplify'\n\nSimplify use of parse-options API a bit.\n\n* rs/grep-parseopt-simplify:\n  grep: use OPT_INTEGER_F for --max-depth", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c6a0468f824f458acea442450d204a3d01d1aa9b", "commit_date": "2023-09-13T19:32:48Z", "commit_message": "builtin/repack.c: extract common cruft pack loop\n\nWhen generating the list of packs to store in a MIDX (when given the\n`--write-midx` option), we include any cruft packs both during\n--geometric and non-geometric repacks.\n\nBut the rules for when we do and don't have to check whether any of\nthose cruft packs were queued for deletion differ slightly between the\ntwo cases.\n\nBut the two can be unified, provided there is a little bit of extra\ndetail added in the comment to clarify when it is safe to avoid checking\nfor any pending deletions (and why it is OK to do so even when not\nrequired).\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4a17e97246470049b8bde5be0d767ef66e550555", "commit_date": "2023-09-13T19:32:48Z", "commit_message": "builtin/repack.c: avoid directly inspecting \"util\"\n\nThe `->util` field corresponding to each string_list_item is used to\ntrack the existence of some pack at the beginning of a repack operation\nwas originally intended to be used as a bitfield.\n\nThis bitfield tracked:\n\n  - (1 << 0): whether or not the pack should be deleted\n  - (1 << 1): whether or not the pack is cruft\n\nThe previous commit removed the use of the second bit, but a future\npatch (from a different series than this one) will introduce a new use\nof it.\n\nSo we could stop treating the util pointer as a bitfield and instead\nstart treating it as if it were a boolean. But this would require some\nbacktracking when that later patch is applied.\n\nInstead, let's avoid touching the ->util field directly, and instead\nintroduce convenience functions like:\n\n  - pack_mark_for_deletion()\n  - pack_is_marked_for_deletion()\n\nHelped-by: Junio C Hamano <gitster@pobox.com>\nHelped-by: Jeff King <peff@peff.net>\nHelped-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eabfaf8e8db27dd76ec1f1d4e0a2a124374475ab", "commit_date": "2023-09-13T19:32:48Z", "commit_message": "builtin/repack.c: store existing cruft packs separately\n\nWhen repacking with the `--write-midx` option, we invoke the function\n`midx_included_packs()` in order to produce the list of packs we want to\ninclude in the resulting MIDX.\n\nThis list is comprised of:\n\n  - existing .keep packs\n  - any pack(s) which were written earlier in the same process\n  - any unchanged packs when doing a `--geometric` repack\n  - any cruft packs\n\nPrior to this patch, we stored pre-existing cruft and non-cruft packs\ntogether (provided those packs are non-kept). This meant we needed an\nadditional bit to indicate which non-kept pack(s) were cruft versus\nthose that aren't.\n\nBut alternatively we can store cruft packs in a separate list, avoiding\nthe need for this extra bit, and simplifying the code below.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4bbfb003c06c9a3b8e02d8957f053ce938c3d93e", "commit_date": "2023-09-13T19:32:47Z", "commit_message": "builtin/repack.c: extract `has_existing_non_kept_packs()`\n\nWhen there is:\n\n  - at least one pre-existing packfile (which is not marked as kept),\n  - repacking with the `-d` flag, and\n  - not doing a cruft repack\n\n, then we pass a handful of additional options to the inner\n`pack-objects` process, like `--unpack-unreachable`,\n`--keep-unreachable`, and `--pack-loose-unreachable`, in addition to\nmarking any packs we just wrote for promisor remotes as kept in-core\n(with `--keep-pack`, as opposed to the presence of a \".keep\" file on\ndisk).\n\nBecause we store both cruft and non-cruft packs together in the same\n`existing.non_kept_packs` list, it suffices to check its `nr` member to\nsee if it is zero or not.\n\nBut a following change will store cruft- and non-cruft packs separately,\nmeaning this check would break as a result. Prepare for this by\nextracting this part of the check into a new helper function called\n`has_existing_non_kept_packs()`.\n\nThis patch does not introduce any functional changes, but prepares us to\nmake a more isolated change in a subsequent patch.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2d3bf178aaf4e590f3618d657e14aceb44514f0", "commit_date": "2023-09-13T19:32:47Z", "commit_message": "builtin/repack.c: extract redundant pack cleanup for existing packs\n\nTo remove redundant packs at the end of a repacking operation, Git uses\nits `remove_redundant_pack()` function in a loop over the set of\npre-existing, non-kept packs.\n\nIn a later commit, we will split this list into two, one for\npre-existing cruft pack(s), and another for non-cruft pack(s). Prepare\nfor this by factoring out the routine to loop over and delete redundant\npacks into its own function.\n\nInstead of calling `remove_redundant_pack()` directly, we now will call\n`remove_redundant_existing_packs()`, which itself dispatches a call to\n`remove_redundant_packs_1()`. Note that the geometric repacking code\nwill still call `remove_redundant_pack()` directly, but see the previous\ncommit for more details.\n\nHaving `remove_redundant_packs_1()` exist as a separate function may\nseem like overkill in this patch. However, a later patch will call\n`remove_redundant_packs_1()` once over two separate lists, so this\nrefactoring sets us up for that.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "639c4a3992337e15c0faa2fa6d73462cc76ca7b9", "commit_date": "2023-09-13T19:32:47Z", "commit_message": "builtin/repack.c: extract redundant pack cleanup for --geometric\n\nTo reduce the complexity of the already quite-long `cmd_repack()`\nimplementation, extract out the parts responsible for deleting redundant\npacks from a geometric repack out into its own sub-routine.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "054b5e4873d9ef2348f0880d66f1acf73bad7d59", "commit_date": "2023-09-13T19:32:47Z", "commit_message": "builtin/repack.c: extract marking packs for deletion\n\nAt the end of a repack (when given `-d`), Git attempts to remove any\npacks which have been made \"redundant\" as a result of the repacking\noperation. For example, an all-into-one (`-A` or `-a`) repack makes\nevery pre-existing pack which is not marked as kept redundant. Geometric\nrepacks (with `--geometric=<n>`) make any packs which were rolled up\nredundant, and so on.\n\nBut before deleting the set of packs we think are redundant, we first\ncheck to see whether or not we just wrote a pack which is identical to\nany one of the packs we were going to delete. When this is the case, Git\nmust avoid deleting that pack, since it matches a pack we just wrote\n(so deleting it may cause the repository to become corrupt).\n\nRight now we only process the list of non-kept packs in a single pass.\nBut a future change will split the existing non-kept packs further into\ntwo lists: one for cruft packs, and another for non-cruft packs.\n\nFactor out this routine to prepare for calling it twice on two separate\nlists in a future patch.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e2b43831a5e4b482be19746d2257a309b51ba5fe", "commit_date": "2023-09-13T19:32:47Z", "commit_message": "builtin/repack.c: extract structure to store existing packs\n\nThe repack machinery needs to keep track of which packfiles were present\nin the repository at the beginning of a repack, segmented by whether or\nnot each pack is marked as kept.\n\nThe names of these packs are stored in two `string_list`s, corresponding\nto kept- and non-kept packs, respectively. As a consequence, many\nfunctions within the repack code need to take both `string_list`s as\narguments, leading to code like this:\n\n    ret = write_cruft_pack(&cruft_po_args, packtmp, pack_prefix,\n                           cruft_expiration, &names,\n                           &existing_nonkept_packs, /* <- */\n                           &existing_kept_packs);   /* <- */\n\nWrap up this pair of `string_list`s into a single structure that stores\nboth. This saves us from having to pass both string lists separately,\nand prepares for adding additional fields to this structure.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a5aee7a8a73a9ea04035bb6506b0e46cfeee87e4", "commit_date": "2023-09-13T17:12:52Z", "commit_message": "Sync with 'master'", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b754554df87983941f24002d55d5abdcc8f719e2", "commit_date": "2023-09-13T17:12:40Z", "commit_message": "Merge branch 'jc/update-index-show-index-version' into next\n\n* jc/update-index-show-index-version:\n  test-tool: retire \"index-version\"\n  update-index: add --show-index-version\n  update-index doc: v4 is OK with JGit and libgit2", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b17fa78c3f7e9a490e44e04e22791af4772f97a0", "commit_date": "2023-09-13T17:12:19Z", "commit_message": "Merge branch 'ob/t3404-typofix' into next\n\nCode clean-up.\n\n* ob/t3404-typofix:\n  t3404-rebase-interactive.sh: fix typos in title of a rewording test", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1f6c2b336b16e7da3f28bc502194e7359313956c", "commit_date": "2023-09-13T17:12:19Z", "commit_message": "Merge branch 'ob/sequencer-remove-dead-code' into next\n\nCode clean-up.\n\n* ob/sequencer-remove-dead-code:\n  sequencer: remove unreachable exit condition in pick_commits()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b248a5bc2648e6fdc7c2a95226db2986d9f477ca", "commit_date": "2023-09-13T17:12:18Z", "commit_message": "Merge branch 'pb/completion-aliases-doc' into next\n\nClarify how \"alias.foo = : git cmd ; aliased-command-string\" should\nbe spelled with necessary whitespaces around punctuation marks to\nwork.\n\n* pb/completion-aliases-doc:\n  completion: improve doc for complex aliases", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a0ec176060393f78f56ccf248a8928ec7f2b93b", "commit_date": "2023-09-13T17:12:18Z", "commit_message": "Merge branch 'pb/complete-commit-trailers' into next\n\nThe command-line complation support (in contrib/) learned to\ncomplete \"git commit --trailer=\" for possible trailer keys.\n\n* pb/complete-commit-trailers:\n  completion: commit: complete trailers tokens more robustly", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6c51973e4a0e889d1a426da08f52b9203fa1df2", "commit_date": "2023-09-13T17:07:57Z", "commit_message": "The eighth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d070b77d250e3b29b93dac2c39eb222ab49bce52", "commit_date": "2023-09-13T17:07:57Z", "commit_message": "Merge branch 'ob/sequencer-reword-error-message'\n\nUpdate an error message (which would probably never been seen).\n\n* ob/sequencer-reword-error-message:\n  sequencer: fix error message on failure to copy SQUASH_MSG", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "877c9919d6175585fba9904b3c38c8156c73f965", "commit_date": "2023-09-13T17:07:57Z", "commit_message": "Merge branch 'bc/more-git-var'\n\nFix-up for a topic that already has graduated.\n\n* bc/more-git-var:\n  var: avoid a segmentation fault when `HOME` is unset", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "331f20d52df2fd5eb4bea4a9e14a368472f32819", "commit_date": "2023-09-13T17:07:57Z", "commit_message": "Merge branch 'ew/hash-with-openssl-evp'\n\nFix-up new-ish code to support OpenSSL EVP API.\n\n* ew/hash-with-openssl-evp:\n  treewide: fix various bugs w/ OpenSSL 3+ EVP API", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c52a02a0f0025df0e83ba00dc469df0dc8838b5e", "commit_date": "2023-09-13T17:07:56Z", "commit_message": "Merge branch 'jk/unused-post-2.42-part2'\n\nUnused parameters to functions are marked as such, and/or removed,\nin order to bring us closer to -Wunused-parameter clean.\n\n* jk/unused-post-2.42-part2:\n  parse-options: mark unused parameters in noop callback\n  interpret-trailers: mark unused \"unset\" parameters in option callbacks\n  parse-options: add more BUG_ON() annotations\n  merge: do not pass unused opt->value parameter\n  parse-options: mark unused \"opt\" parameter in callbacks\n  parse-options: prefer opt->value to globals in callbacks\n  checkout-index: delay automatic setting of to_tempfile\n  format-patch: use OPT_STRING_LIST for to/cc options\n  merge: simplify parsing of \"-n\" option\n  merge: make xopts a strvec", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7479278da0616c4faad3167c5caec0836b9ed6ae", "commit_date": "2023-09-13T01:10:12Z", "commit_message": "Merge branch 'js/diff-cached-fsmonitor-fix' into next\n\n\"git diff --cached\" codepath did not fill the necessary stat\ninformation for a file when fsmonitor knows it is clean and ended\nup behaving as if it is not clean, which has been corrected.\n\n* js/diff-cached-fsmonitor-fix:\n  diff-lib: fix check_removed when fsmonitor is on", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "779c4a097a9df8f9847be44287b1aade20c2f9da", "commit_date": "2023-09-13T01:10:12Z", "commit_message": "Merge branch 'la/trailer-cleanups' into next\n\nCode clean-up.\n\n* la/trailer-cleanups:\n  trailer: use offsets for trailer_start/trailer_end\n  trailer: rename *_DEFAULT enums to *_UNSPECIFIED\n  trailer: teach find_patch_start about --no-divider\n  trailer: split process_command_line_args into separate functions\n  trailer: split process_input_file into separate pieces\n  trailer: separate public from internal portion of trailer_iterator", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "71c4cbb1dfe3ede09a4d29c11e4e1321c7e6ac59", "commit_date": "2023-09-13T01:10:12Z", "commit_message": "Merge branch 'js/systemd-timers-wsl-fix' into next\n\nUpdate \"git maintainance\" timers' implementation based on systemd\ntimers to work with WSL.\n\n* js/systemd-timers-wsl-fix:\n  maintenance(systemd): support the Windows Subsystem for Linux", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "135ecd136f0cf45dcbd31a4aeb82d5813fb1dc14", "commit_date": "2023-09-13T01:10:11Z", "commit_message": "Merge branch 'pw/diff-no-index-from-named-pipes' into next\n\n\"git diff --no-index -R <(one) <(two)\" did not work correctly,\nwhich has been corrected.\n\n* pw/diff-no-index-from-named-pipes:\n  diff --no-index: fix -R with stdin", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4333267995662ccc9f4db3b628eebb78599e0025", "commit_date": "2023-09-13T00:46:01Z", "commit_message": "completion: improve doc for complex aliases\n\nThe completion code can be told to use a particular completion for\naliases that shell out by using ': git <cmd> ;' as the first command of\nthe alias. This only works if <cmd> and the semicolon are separated by a\nspace, since if the space is missing __git_aliased_command returns (for\nexample) 'checkout;' instead of just 'checkout', and then\n__git_complete_command fails to find a completion for 'checkout;'.\n\nThe examples have that space but it's not clear if it's just for\nstyle or if it's mandatory. Explicitly mention it.\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0b658eae751968506552f1bddadc338653819d20", "commit_date": "2023-09-13T00:33:59Z", "commit_message": "completion: commit: complete trailers tokens more robustly\n\nIn the previous commit, we added support for completing configured\ntrailer tokens in 'git commit --trailer'.\n\nMake the implementation more robust by:\n\n- using '__git' instead of plain 'git', as the rest of the completion\n  script does\n- using a stricter pattern for --get-regexp to avoid false hits\n- using 'cut' and 'rev' instead of 'awk' to account for tokens including\n  dots.\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "63642d58b4b28c3caba6d5ab0c3aa98c4ce54eaa", "commit_date": "2023-09-13T00:32:09Z", "commit_message": "sequencer: remove unreachable exit condition in pick_commits()\n\nThis was introduced by 56dc3ab04 (\"sequencer (rebase -i): implement the\n'edit' command\", 2017-01-02), and was pointless from the get-go: all\nearly exits from the loop above are returns, so todo_list->current ==\ntodo_list->nr is an invariant after the loop.\n\nSigned-off-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>\nAcked-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8aae4897567f4cd720f553b40b2f11c21cb5599e", "commit_date": "2023-09-13T00:24:56Z", "commit_message": "t3404-rebase-interactive.sh: fix typos in title of a rewording test\n\nThis test was introduced by commit 0c164ae7a (\"rebase -i: add another\nreword test\", 2021-08-20). I didn't quite get what it was meant to do,\nso here's an explanation from Phillip:\n\nThe purpose of the test is to ensure that\n\n  (i) There are no uncommitted changes when the editor runs. i.e., we\n      commit without running the editor and then reword by amending\n      that commit. This ensures that we have the same user experience\n      whether or not the commit was fast-forwarded [1].\n\n (ii) That the todo list is re-read after the commit has been reworded.\n      This is to allow the user to update the todo list while the rebase\n      is paused for editing the commit message.\n\n[1] https://lore.kernel.org/git/20190812175046.GM20404@szeder.dev/\n\nSigned-off-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "83708f80fc5fc7202df0bf3c0951f85d31249fe3", "commit_date": "2023-09-12T23:21:53Z", "commit_message": "test-tool: retire \"index-version\"\n\nAs \"git update-index --show-index-version\" can do the same thing,\nthe 'index-version' subcommand in the test-tool lost its reason to\nexist.  Remove it and replace its use with the end-user facing\n'git update-index --show-index-version'.\n\nHelped-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "606e088d5d9af2393b4b05a8a180162c129cd734", "commit_date": "2023-09-12T23:21:53Z", "commit_message": "update-index: add --show-index-version\n\n\"git update-index --index-version N\" is used to set the index format\nversion to a specific version, but there was no way to query the\ncurrent version used in the on-disk index file.\n\nTeach the command a new \"--show-index-version\" option, and also\nteach the \"--index-version N\" option to report what the version was\nwhen run with the \"--verbose\" option.\n\nHelped-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "764b2330db42d07ed8c7d4f6c66a1d1203fb95de", "commit_date": "2023-09-12T23:21:53Z", "commit_message": "update-index doc: v4 is OK with JGit and libgit2\n\nBeing invented in late 2012 no longer makes the index v4 format\n\"relatively young\".\n\nThe support for the index version 4 was added to libgit2 with their\n5625d86b (index: support index v4, 2016-05-17) and to JGit with\ntheir e9cb0a8e (DirCache: support index V4, 2020-08-10).\n\nLet's update the paragraph that discouraged its use for folks overly\ncautious about cross-tool compatibility.\n\nHelped-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>\nHelped-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a044a20480a8ef56f7ddb8142f660ca01a3391e", "commit_date": "2023-09-11T23:45:49Z", "commit_message": "diff-lib: fix check_removed when fsmonitor is on\n\n`git diff-index` may return incorrect deleted entries when fsmonitor\nis used in a repository with git submodules. This can be observed on\nMac machines, but it can affect all other supported platforms too.\n\nIf fsmonitor is used, `stat *st` is not initialized if cache_entry has\nCE_FSMONITOR_VALID set. But, there are three call sites that rely on stat\nafterwards, which can result in incorrect results.\n\nThis change partially reverts commit 4f3d6d02 (fsmonitor: skip lstat\ndeletion check during git diff-index, 2021-03-17).\n\nSigned-off-by: Josip Sokcevic <sokcevic@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e8515e8e8d10f882d1e8ffeb34b8348426515ed", "commit_date": "2023-09-11T19:41:30Z", "commit_message": "maintenance(systemd): support the Windows Subsystem for Linux\n\nWhen running in the Windows Subsystem for Linux (WSL), it is usually\nnecessary to use the Git Credential Manager for authentication when\nperforming the background fetches.\n\nThis requires interoperability between the Windows Subsystem for Linux\nand the Windows host to work, which uses so-called vsocks, i.e. sockets\nintended for communcations between virtual machines and the host they\nare running on.\n\nHowever, when Git is configured to run background maintenance via\n`systemd`, the address families available to those maintenance processes\nare restricted, and did not include `AF_VSOCK`. This leads to problems\ne.g. when a background fetch tries to access github.com:\n\n\tsystemd[437]: Starting Optimize Git repositories data...\n\tgit[747387]: WSL (747387) ERROR: UtilBindVsockAnyPort:285: socket failed 97\n\tgit[747381]: fatal: could not read Username for 'https://github.com': No such device or address\n\tgit[747381]: error: failed to prefetch remotes\n\tgit[747381]: error: task 'prefetch' failed\n\tsystemd[437]: git-maintenance@hourly.service: Main process exited, code=exited, status=1/FAILURE\n\tsystemd[437]: git-maintenance@hourly.service: Failed with result 'exit-code'.\n\tsystemd[437]: Failed to start Optimize Git repositories data.\n\nAddress this (pun intended) by adding the `AF_VSOCK` address family to\nthe allow list.\n\nThis fixes https://github.com/microsoft/git/issues/604.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "48944f214c7cd7402e70e661cf9efb8dd118fe0c", "commit_date": "2023-09-11T19:05:37Z", "commit_message": "diff --no-index: fix -R with stdin\n\nWhen -R is given, queue_diff() swaps the mode and name variables of the\ntwo files to produce a reverse diff.  1e3f26542a (diff --no-index:\nsupport reading from named pipes, 2023-07-05) added variables that\nindicate whether files are special, i.e named pipes or - for stdin.\nThese new variables were not swapped, though, which broke the handling\nof stdin with with -R.  Swap them like the other metadata variables.\n\nReported-by: Martin Storsj\u00f6 <martin@martin.st>\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b5e75f87b5881811a7eee8ea6aa10cd43f1fe430", "commit_date": "2023-09-11T17:01:19Z", "commit_message": "trailer: use offsets for trailer_start/trailer_end\n\nPreviously these fields in the trailer_info struct were of type \"const\nchar *\" and pointed to positions in the input string directly (to the\nstart and end positions of the trailer block).\n\nUse offsets to make the intended usage less ambiguous. We only need to\nreference the input string in format_trailer_info(), so update that\nfunction to take a pointer to the input.\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d2be104085b24867e3dd9cb061c75b456071b351", "commit_date": "2023-09-11T17:01:19Z", "commit_message": "trailer: rename *_DEFAULT enums to *_UNSPECIFIED\n\nDo not use *_DEFAULT as a suffix to the enums, because the word\n\"default\" is overloaded. The following are two examples of the ambiguity\nof the word \"default\":\n\n(1) \"Default\" can mean using the \"default\" values that are hardcoded\n    in trailer.c as\n\n        default_conf_info.where = WHERE_END;\n        default_conf_info.if_exists = EXISTS_ADD_IF_DIFFERENT_NEIGHBOR;\n        default_conf_info.if_missing = MISSING_ADD;\n\n    in ensure_configured(). These values are referred to as \"the\n    default\" in the docs for interpret-trailers. These defaults are used\n    if no \"trailer.*\" configurations are defined.\n\n(2) \"Default\" can also mean the \"trailer.*\" configurations themselves,\n    because these configurations are used by \"default\" (ahead of the\n    hardcoded defaults in (1)) if no command line arguments are\n    provided. This concept of defaulting back to the configurations was\n    introduced in 0ea5292e6b (interpret-trailers: add options for\n    actions, 2017-08-01).\n\nIn addition, the corresponding *_DEFAULT values are chosen when the user\nprovides the \"--no-where\", \"--no-if-exists\", or \"--no-if-missing\" flags\non the command line. These \"--no-*\" flags are used to clear previously\nprovided flags of the form \"--where\", \"--if-exists\", and \"--if-missing\".\nUsing these \"--no-*\" flags undoes the specifying of these flags (if\nany), so using the word \"UNSPECIFIED\" is more natural here.\n\nSo instead of using \"*_DEFAULT\", use \"*_UNSPECIFIED\" because this\nsignals to the reader that the *_UNSPECIFIED value by itself carries no\nmeaning (it's a zero value and by itself does not \"default\" to anything,\nnecessitating the need to have some other way of getting to a useful\nvalue).\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ee8c5ee08cee9aee6732ab315e94bc88631c7431", "commit_date": "2023-09-11T17:01:19Z", "commit_message": "trailer: teach find_patch_start about --no-divider\n\nCurrently, find_patch_start only finds the start of the patch part of\nthe input (by looking at the \"---\" divider) for cases where the\n\"--no-divider\" flag has not been provided. If the user provides this\nflag, we do not rely on find_patch_start at all and just call strlen()\ndirectly on the input.\n\nInstead, make find_patch_start aware of \"--no-divider\" and make it\nhandle that case as well. This means we no longer need to call strlen at\nall and can just rely on the existing code in find_patch_start. By\nforcing callers to consider this important option, we avoid the kind of\nmistake described in be3d654343 (commit: pass --no-divider to\ninterpret-trailers, 2023-06-17).\n\nThis patch will make unit testing a bit more pleasant in this area in\nthe future when we adopt a unit testing framework, because we would not\nhave to test multiple functions to check how finding the start of a\npatch part works (we would only need to test find_patch_start).\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "94430d03df639ef49f178f1339ed48a31d84061f", "commit_date": "2023-09-11T17:01:19Z", "commit_message": "trailer: split process_command_line_args into separate functions\n\nPreviously, process_command_line_args did two things:\n\n    (1) parse trailers from the configuration, and\n    (2) parse trailers defined on the command line.\n\nSeparate (1) outside to a new function, parse_trailers_from_config.\nRename the remaining logic to parse_trailers_from_command_line_args.\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c2a8edf997a8d9f3f005666f63105172a23bd3a0", "commit_date": "2023-09-11T17:01:19Z", "commit_message": "trailer: split process_input_file into separate pieces\n\nCurrently, process_input_file does three things:\n\n    (1) parse the input string for trailers,\n    (2) print text before the trailers, and\n    (3) calculate the position of the input where the trailers end.\n\nRename this function to parse_trailers(), and make it only do\n(1). The caller of this function, process_trailers, becomes responsible\nfor (2) and (3). These items belong inside process_trailers because they\nare both concerned with printing the surrounding text around\ntrailers (which is already one of the immediate concerns of\nprocess_trailers).\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "13211ae23f9126be81b3b483163bf963df4826aa", "commit_date": "2023-09-11T17:01:18Z", "commit_message": "trailer: separate public from internal portion of trailer_iterator\n\nThe fields here are not meant to be used by downstream callers, so put\nthem behind an anonymous struct named as \"internal\" to warn against\ntheir use. This follows the pattern in 576de3d956 (unpack_trees: start\nsplitting internal fields from public API, 2023-02-27).\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac83bc5054c2ac489166072334b4147ce6d0fccb", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Git 2.42-rc0\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "65e25ae52298e9f1a8c7d94fd0ddffaf30cd944e", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'jc/branch-in-use-error-message'\n\n\"git branch -f X\" to repoint the branch X said that X was \"checked\nout\" in another worktree, even when branch X was not and instead\nbeing bisected or rebased.  The message was reworded to say the\nbranch was \"in use\".\n\n* jc/branch-in-use-error-message:\n  branch: update the message to refuse touching a branch in-use", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4a7c24c094cff87a4b5a02550b321591d847ca0", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'hy/blame-in-bare-with-contents'\n\n\"git blame --contents=file\" has been taught to work in a bare\nrepository.\n\n* hy/blame-in-bare-with-contents:\n  blame: allow --contents to work with bare repo", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f9712d75e6389866efbe6ad918dc9773a8a880ad", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'jc/parse-options-short-help'\n\nCommand line parser fix, and a small parse-options API update.\n\n* jc/parse-options-short-help:\n  short help: allow a gap smaller than USAGE_GAP\n  remote: simplify \"remote add --tags\" help text\n  short help: allow multi-line opthelp", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "23b20fff3ab28b31678d23e67de328ac24801f18", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'jc/doc-sent-patch-now-what'\n\nProcess document update.\n\n* jc/doc-sent-patch-now-what:\n  MyFirstContribution: refrain from self-iterating too much", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "840affcb8ddfa78e4988c276f98773e40ccba4f4", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'la/doc-choose-starting-point-fixup'\n\nClarify how to pick a starting point for a new topic in the\nSubmittingPatches document.\n\n* la/doc-choose-starting-point-fixup:\n  SubmittingPatches: use of older maintenance tracks is an exception\n  SubmittingPatches: explain why 'next' and above are inappropriate base\n  SubmittingPatches: choice of base for fixing an older maintenance track", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a53e8a64884dffb23ea416687ae8fbdaf332641a", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'pv/doc-submodule-update-settings'\n\nRewrite the description of giving a custom command to the\nsubmodule.<name>.update configuration variable.\n\n* pv/doc-submodule-update-settings:\n  doc: highlight that .gitmodules does not support !command", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4d060018467d5a8d05349294baad426d5407414d", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'ja/worktree-orphan-fix'\n\nFix tests with unportable regex patterns.\n\n* ja/worktree-orphan-fix:\n  t2400: rewrite regex to avoid unintentional PCRE\n  builtin/worktree.c: convert tab in advice to space\n  t2400: drop no-op `--sq` from rev-parse call", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3365e2675e5ac95e0a44665966e8cfbb9433456e", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'jc/retire-get-sha1-hex'\n\nThe implementation of \"get_sha1_hex()\" that reads a hexadecimal\nstring that spells a full object name has been extended to cope\nwith any hash function used in the repository, but the \"sha1\" in\nits name survived.  Rename it to get_hash_hex(), a name that is\nmore consistent within its friends like get_hash_hex_algop().\n\n* jc/retire-get-sha1-hex:\n  hex: retire get_sha1_hex()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dd68b57fc404e9117385879460a63a25f8b3c354", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'la/doc-choose-starting-point'\n\nClarify how to choose the starting point for a new topic in\ndeveloper guidance document.\n\n* la/doc-choose-starting-point:\n  SubmittingPatches: simplify guidance for choosing a starting point\n  SubmittingPatches: emphasize need to communicate non-default starting points\n  SubmittingPatches: de-emphasize branches as starting points\n  SubmittingPatches: discuss subsystems separately from git.git\n  SubmittingPatches: reword awkward phrasing", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0a5129563ebe720330fdc8f5c6843d27641137", "commit_date": "2023-08-02T16:37:52Z", "commit_message": "The eighteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "955c2b1c6ad736a685fcb7cab1c079a9c7cc18c8", "commit_date": "2023-08-02T16:37:52Z", "commit_message": "Documentation/RelNotes/2.42.0.txt: typofix\n\nFix a typo introduced in aa9166bcc0 (The ninth batch, 2023-07-08).\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "70e5c5ddddadc7f15f64f812ae511eab83ca0040", "commit_date": "2023-08-02T16:37:24Z", "commit_message": "Merge branch 'ks/ref-filter-describe'\n\n\"git branch --list --format=<format>\" and friends are taught\na new \"%(describe)\" placeholder.\n\n* ks/ref-filter-describe:\n  ref-filter: add new \"describe\" atom\n  ref-filter: add multiple-option parsing functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8bfb359844cf51aedaf0d28486d4ce9867ccb46c", "commit_date": "2023-08-02T16:37:24Z", "commit_message": "Merge branch 'ah/sequencer-rewrite-todo-fix'\n\nWhen the user edits \"rebase -i\" todo file so that it starts with a\n\"fixup\", which would make it invalid, the command truncated the\nrest of the file before giving an error and returning the control\nback to the user.  Stop truncating to make it easier to correct\nsuch a malformed todo file.\n\n* ah/sequencer-rewrite-todo-fix:\n  sequencer: finish parsing the todo list despite an invalid first line", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "52d9dc20e1ddd5ac6b9e9113983b2f8d6977e6b0", "commit_date": "2023-08-02T16:37:23Z", "commit_message": "Merge branch 'bb/use-trace2-counters-for-fsync-stats'\n\nInstead of inventing a custom counter variables for debugging,\nuse existing trace2 facility in the fsync customization codepath.\n\n* bb/use-trace2-counters-for-fsync-stats:\n  wrapper: use trace2 counters to collect fsync stats", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "99acb0fa54775a383cab70a6e662e45180dee3f0", "commit_date": "2023-08-02T16:37:23Z", "commit_message": "Merge branch 'ah/autoconf-fixes'\n\n\"./configure --with-expat=no\" did not work as a way to refuse use\nof the expat library on a system with the library installed, which\nhas been corrected.\n\n* ah/autoconf-fixes:\n  configure.ac: always save NO_ICONV to config.status\n  configure.ac: don't overwrite NO_CURL option\n  configure.ac: don't overwrite NO_EXPAT option", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fea92e4cac30b1204ecc8dfd53675bbdd68611e0", "commit_date": "2023-08-02T16:37:23Z", "commit_message": "Merge branch 'jc/tree-walk-drop-base-offset'\n\nCode simplification.\n\n* jc/tree-walk-drop-base-offset:\n  tree-walk: drop unused base_offset from do_match()\n  tree-walk: lose base_offset that is never used in tree_entry_interesting", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ee48e70a829d1fa2da82f14787051ad8e7c45b71", "commit_date": "2023-07-28T16:45:22Z", "commit_message": "The seventeenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ddcb8fd8b94c066406c2a4f41e04122cb2a742ad", "commit_date": "2023-07-28T16:45:22Z", "commit_message": "Merge branch 'rs/pack-objects-parseopt-fix'\n\nCommand line parser fix.\n\n* rs/pack-objects-parseopt-fix:\n  pack-objects: fix --no-quiet\n  pack-objects: fix --no-keep-true-parents", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3085f949bf4aafe04dac7441308bb769ccf9c351", "commit_date": "2023-07-28T16:45:21Z", "commit_message": "Merge branch 'rs/describe-parseopt-fix'\n\nCommand line parser fix.\n\n* rs/describe-parseopt-fix:\n  describe: fix --no-exact-match", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c8a33b44c5a56c7b2c7778506acdc71e5365ec1f", "commit_date": "2023-07-28T16:45:21Z", "commit_message": "Merge branch 'bb/trace2-comment-fix'\n\nIn-code comment fix.\n\n* bb/trace2-comment-fix:\n  trace2: fix a comment", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "010447cf098f7407008f2940b4fefa5351477044", "commit_date": "2023-07-28T00:44:07Z", "commit_message": "MyFirstContribution: refrain from self-iterating too much\n\nFinding mistakes in and improving your own patches is a good idea,\nbut doing so too quickly is being inconsiderate to reviewers who\nhave just seen the initial iteration and taking their time to review\nit.  Encourage new developers to perform such a self review before\nthey send out their patches, not after.  After sending a patch that\nthey immediately found mistakes in, they are welcome to comment on\nthem, mentioning what and how they plan to improve them in an\nupdated version, before sending out their updates.\n\nHelped-by: Torsten B\u00f6gershausen <tboegi@web.de>\nHelped-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bfce02c22f3f1b0539686cabb69a637854448be3", "commit_date": "2023-07-27T22:26:37Z", "commit_message": "The sixteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e672bc4f76754ff6e39d09a84cb4544e193c96e5", "commit_date": "2023-07-27T22:26:37Z", "commit_message": "Merge branch 'jc/parse-options-reset'\n\nCommand line parser fix.\n\n* jc/parse-options-reset:\n  reset: reject --no-(mixed|soft|hard|merge|keep) option", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6966f6fffc69e38dc78f3b2b199e4c8def69b3e", "commit_date": "2023-07-27T22:26:37Z", "commit_message": "Merge branch 'jc/parse-options-show-branch'\n\nCommand line parser fixes.\n\n* jc/parse-options-show-branch:\n  show-branch: reject --[no-](topo|date)-order\n  show-branch: --no-sparse should give dense output", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9562f19026f1dcdfcfda86c2c9b7cff21c8b0642", "commit_date": "2023-07-27T22:26:37Z", "commit_message": "Merge branch 'jc/transport-parseopt-fix'\n\nCommand line parser fixes.\n\n* jc/transport-parseopt-fix:\n  fetch: reject --no-ipv[46]\n  parse-options: introduce OPT_IPVERSION()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7fb1483c27f367e5654e6f23586de58a30be6025", "commit_date": "2023-07-27T22:26:37Z", "commit_message": "Merge branch 'jc/gitignore-doc-pattern-markup'\n\nDoc mark-up update.\n\n* jc/gitignore-doc-pattern-markup:\n  gitignore.txt: mark up explanation of patterns consistently", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "369998df83d779e0b3fc45072be20d43a6559b27", "commit_date": "2023-07-27T20:07:40Z", "commit_message": "SubmittingPatches: use of older maintenance tracks is an exception\n\nWhile we could technically fix each and every bug on top of the\ncommit that introduced it, it is not necessarily practical.  For\ntrivial and low-value bugfixes, it often is simpler and sufficient\nto just fix it in the current maintenance track, leaving the bug\nunfixed in the older maintenance tracks.\n\nDemote the \"use older maintenance track to fix old bugs\" as a side\nnote, and explain that the choice is used only in exceptional cases.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f835de52d7c36c278004383919c58457861dac6c", "commit_date": "2023-07-27T20:06:20Z", "commit_message": "SubmittingPatches: explain why 'next' and above are inappropriate base\n\nThe 'next' branch is primarily meant to be a testing ground to make\nsure that topics that are reasonably well done work well together.\nBuilding a new work on it would mean everything that was already in\n'next' must have graduated to 'master' before the new work can also\nbe merged to 'master', and that is why we do not encourage basing\nnew work on 'next'.\n\nHelped-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1b72cb36487772fa70217f4234c886db7a5892f", "commit_date": "2023-07-26T21:49:02Z", "commit_message": "t2400: rewrite regex to avoid unintentional PCRE\n\nReplace all cases of `\\s` with ` ` as it is not part of POSIX BRE or ERE\nand therefore not all versions of grep handle it.\n\nFor the same reason all cases of `\\S` are replaced with `[^ ]`. It is\nnot an exact replacement but it is close enough for this use case.\n\nAlso, do not write `\\+` in BRE and expect it to mean 1 or more;\nit is a GNU extension that may not work everywhere.\n\nRemove `.*` from the end of a pattern that is not right-anchored.\n\nSigned-off-by: Jacob Abel <jacobabel@nullpo.dev>\nHelped-by: Junio C Hamano <gitster@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7e42d4bf15b5d8fee1f43cefdc49cf516e94bc27", "commit_date": "2023-07-26T21:49:02Z", "commit_message": "builtin/worktree.c: convert tab in advice to space\n\nSigned-off-by: Jacob Abel <jacobabel@nullpo.dev>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9111ea1cbeba0861ea1c90e16bea980be4910d8c", "commit_date": "2023-07-26T21:49:02Z", "commit_message": "t2400: drop no-op `--sq` from rev-parse call\n\nSigned-off-by: Jacob Abel <jacobabel@nullpo.dev>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b4fce4b6e4149f0482b9ecaffd59d96cf8fe3466", "commit_date": "2023-07-26T21:13:16Z", "commit_message": "The fifteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9a5e3b5f47098221023131c4e31cb53295211b5f", "commit_date": "2023-07-26T21:13:15Z", "commit_message": "Merge branch 'jc/branch-parseopt-fix'\n\nCommand line parser fixes.\n\n* jc/branch-parseopt-fix:\n  branch: reject \"--no-all\" and \"--no-remotes\" early", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "914a353a128d4d885e138f189e235ad6094d436e", "commit_date": "2023-07-26T21:13:15Z", "commit_message": "Merge branch 'jc/am-parseopt-fix'\n\nCode simplification.\n\n* jc/am-parseopt-fix:\n  am: simplify parsing of \"--[no-]keep-cr\"", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8ae477e2b4a50cb64864e2e0b6d16de35d7bc5cf", "commit_date": "2023-07-26T21:13:15Z", "commit_message": "Merge branch 'rs/ls-tree-no-full-name-fix'\n\nCommand line parser fix.\n\n* rs/ls-tree-no-full-name-fix:\n  ls-tree: fix --no-full-name", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89672f14d52ebe5001ccf0bd44a11355817cc262", "commit_date": "2023-07-26T21:13:15Z", "commit_message": "Merge branch 'jr/gitignore-doc-example-markup'\n\nDoc update.\n\n* jr/gitignore-doc-example-markup:\n  gitignore.txt: use backticks instead of double quotes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "37f6040764489ee63b14807c1196c3b2e6469eb4", "commit_date": "2023-07-26T16:39:00Z", "commit_message": "SubmittingPatches: choice of base for fixing an older maintenance track\n\nWhen working on an high-value bugfix that must be given to ancient\nmaintenance tracks, a starting point that is older than `maint` may\nhave to be chosen.\n\nHelped-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7cebc5bd786a95722dc545a2cad22124ec996c00", "commit_date": "2023-07-25T21:55:07Z", "commit_message": "doc: highlight that .gitmodules does not support !command\n\nBugfix for fc01a5d2 (submodule update documentation: don't repeat\nourselves, 2016-12-27).\n\nThe `custom command` and `none` options are described as sharing the\nsame limitations, but one is allowed in .gitmodules and the other is\nnot.\n\nRewrite the description for custom commands to be more precise,\nand make it easier for readers to notice that custom commands cannot\nbe used in the .gitmodules file.\n\nSigned-off-by: Petar Vutov <pvutov@imap.cc>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a80be152923a46f04a06bade7bcc72870e46ca09", "commit_date": "2023-07-25T19:05:40Z", "commit_message": "The fourteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5929e66755acc797b2612d8d6d6b6fd6e7759169", "commit_date": "2023-07-25T19:05:24Z", "commit_message": "Merge branch 'jk/nested-points-at'\n\n\"git tag --list --points-at X\" showed tags that directly refers to\nobject X, but did not list a tag that points at such a tag, which\nhas been corrected.\n\n* jk/nested-points-at:\n  ref-filter: simplify return type of match_points_at\n  ref-filter: avoid parsing non-tags in match_points_at()\n  ref-filter: avoid parsing tagged objects in match_points_at()\n  ref-filter: handle nested tags in --points-at option", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "02f50d0d1901759d9e7aec1367902cab09db63a6", "commit_date": "2023-07-25T19:05:24Z", "commit_message": "Merge branch 'rs/strbuf-addftime-simplify'\n\nCode clean-up.\n\n* rs/strbuf-addftime-simplify:\n  strbuf: use skip_prefix() in strbuf_addftime()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "261ff512e12c124f211124c2b342eb449fca6b3b", "commit_date": "2023-07-25T19:05:24Z", "commit_message": "Merge branch 'rs/ref-filter-signature-fix'\n\nTest fix.\n\n* rs/ref-filter-signature-fix:\n  t6300: fix setup with GPGSSH but without GPG", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c5fcd34e1bfabde14dff226ad92aca9c39d67391", "commit_date": "2023-07-25T19:05:24Z", "commit_message": "Merge branch 'jk/unused-parameter'\n\nMark-up unused parameters in the code so that we can eventually\nenable -Wunused-parameter by default.\n\n* jk/unused-parameter:\n  t/helper: mark unused callback void data parameters\n  tag: mark unused parameters in each_tag_name_fn callbacks\n  rev-parse: mark unused parameter in for_each_abbrev callback\n  replace: mark unused parameter in each_mergetag_fn callback\n  replace: mark unused parameter in ref callback\n  merge-tree: mark unused parameter in traverse callback\n  fsck: mark unused parameters in various fsck callbacks\n  revisions: drop unused \"opt\" parameter in \"tweak\" callbacks\n  count-objects: mark unused parameter in alternates callback\n  am: mark unused keep_cr parameters\n  http-push: mark unused parameter in xml callback\n  http: mark unused parameters in curl callbacks\n  do_for_each_ref_helper(): mark unused repository parameter\n  test-ref-store: drop unimplemented reflog-expire command", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dd224ce15d926ec4d47a727e0f2ee3dd4cc4d5e5", "commit_date": "2023-07-25T19:05:24Z", "commit_message": "Merge branch 'dk/bundle-i18n-more'\n\nUpdate message mark-up for i18n in \"git bundle\".\n\n* dk/bundle-i18n-more:\n  i18n: mark more bundle.c strings for translation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e3095804499c2445b30bf7836a3ff34aae6fbc5", "commit_date": "2023-07-25T19:05:23Z", "commit_message": "Merge branch 'mh/mingw-case-sensitive-build'\n\nNames of MinGW header files are spelled in mixed case in some\nsource files, but the build host can be using case sensitive\nfilesystem with header files with their name spelled in all\nlowercase.\n\n* mh/mingw-case-sensitive-build:\n  mingw: use lowercase includes for some Windows headers", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d4ce18536acbfebebe8007bcab4656922cdd12e8", "commit_date": "2023-07-25T19:05:23Z", "commit_message": "Merge branch 'dk/t4002-syntaxo-fix'\n\nTest fix.\n\n* dk/t4002-syntaxo-fix:\n  t4002: fix \"diff can read from stdin\" syntax", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4488bb3bed8cc80aee1642d0cdc331c9ea6be8fb", "commit_date": "2023-07-25T19:05:23Z", "commit_message": "Merge branch 'tb/object-access-overflow-protection'\n\nVarious offset computation in the code that accesses the packfiles\nand other data in the object layer has been hardened against\narithmetic overflow, especially on 32-bit systems.\n\n* tb/object-access-overflow-protection:\n  commit-graph.c: prevent overflow in `verify_commit_graph()`\n  commit-graph.c: prevent overflow in `write_commit_graph()`\n  commit-graph.c: prevent overflow in `merge_commit_graph()`\n  commit-graph.c: prevent overflow in `split_graph_merge_strategy()`\n  commit-graph.c: prevent overflow in `load_tree_for_commit()`\n  commit-graph.c: prevent overflow in `fill_commit_in_graph()`\n  commit-graph.c: prevent overflow in `fill_commit_graph_info()`\n  commit-graph.c: prevent overflow in `load_oid_from_graph()`\n  commit-graph.c: prevent overflow in add_graph_to_chain()\n  commit-graph.c: prevent overflow in `write_commit_graph_file()`\n  pack-bitmap.c: ensure that eindex lookups don't overflow\n  midx.c: prevent overflow in `fill_included_packs_batch()`\n  midx.c: prevent overflow in `write_midx_internal()`\n  midx.c: store `nr`, `alloc` variables as `size_t`'s\n  midx.c: prevent overflow in `nth_midxed_offset()`\n  midx.c: prevent overflow in `nth_midxed_object_oid()`\n  midx.c: use `size_t`'s for fanout nr and alloc\n  packfile.c: use checked arithmetic in `nth_packed_object_offset()`\n  packfile.c: prevent overflow in `load_idx()`\n  packfile.c: prevent overflow in `nth_packed_object_id()`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "88d08c342af961c5fb57d7ea5f51233770f06639", "commit_date": "2023-07-25T19:05:23Z", "commit_message": "Merge branch 'ah/advise-force-pushing'\n\nHelp newbies by suggesting that there are cases where force-pushing\nis a valid and sensible thing to update a branch at a remote\nrepository, rather than reconciling with merge/rebase.\n\n* ah/advise-force-pushing:\n  push: don't imply that integration is always required before pushing\n  remote: don't imply that integration is always required before pushing\n  wt-status: don't show divergence advice when committing", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "08e5fb1296238c9c4468ae2cfbd7a49045159c60", "commit_date": "2023-07-24T23:11:23Z", "commit_message": "hex: retire get_sha1_hex()\n\nThe naming convention around get_sha1_hex() and its friends is\nawkward these days, after \"struct object_id\" was introduced.\n\nThere are three public functions around this area:\n\n * get_sha1_hex()       - use the implied the_hash_algo, fill uchar *\n * get_oid_hex()        - use the implied the_hash_algo, fill oid *\n * get_oid_hex_algop()  - use the passed algop, fill oid *\n\nBetween the latter two, the \"_algop\" suffix signals whether the\nthe_hash_algo is used as the implied algorithm or the caller should\npass an algorithm explicitly.  That is very much understandable and\nis a good convention.\n\nBetween the former two, however, the \"SHA1\" vs \"OID\" in the names\ndifferentiate in what type of variable the result is stored.\n\nWe could argue that it makes sense to use \"SHA1\" to mean \"flat byte\nbuffer\" to honor the historical practice in the days before \"struct\nobject_id\" was invented, but the natural fourth friend of the above\ngroup would take an algop and fill a flat byte buffer, and it would\nbe strange to name it get_sha1_hex_algop().  Do we use the passed in\nalgo, or are we limited to SHA-1 ;-)?\n\nIn fact, such a function exists, albeit as a private helper function\nused by the implementation of these functions, and is named a lot\nmore sensibly: get_hash_hex_algop().\n\nCorrect the misnomer of get_sha1_hex() and use \"hash\", instead of\n\"sha1\", as \"flat byte buffer that stores binary (as opposed to\nhexadecimal) representation of the hash\".\n\nThe four (2x2) friends now become:\n\n * get_hash_hex()       - use the implied the_hash_algo, fill uchar *\n * get_oid_hex()        - use the implied the_hash_algo, fill oid *\n * get_hash_hex_algop() - use the passed algop, fill uchar *\n * get_oid_hex_algop()  - use the passed algop, fill oid *\n\nAs there are only two remaining calls to get_sha1_hex() in the\ncodebase right now, the blast radious of this change is fairly\nsmall.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f5d18f8c0ef9cc3e62420268c2e72d1fd46b940c", "commit_date": "2023-07-24T17:42:29Z", "commit_message": "ref-filter: add new \"describe\" atom\n\nDuplicate the logic of %(describe) and friends from pretty to\nref-filter. In the future, this change helps in unifying both the\nformats as ref-filter will be able to do everything that pretty is doing\nand we can have a single interface.\n\nThe new atom \"describe\" and its friends are equivalent to the existing\npretty formats with the same name.\n\nHelped-by: Junio C Hamano <gitster@pobox.com>\nMentored-by: Christian Couder <christian.couder@gmail.com>\nMentored-by: Hariom Verma <hariom18599@gmail.com>\nSigned-off-by: Kousik Sanagavarapu <five231003@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f46094a5e6b80098786b4e1448be032dfbdf3f43", "commit_date": "2023-07-24T16:55:00Z", "commit_message": "ref-filter: add multiple-option parsing functions\n\nThe functions\n\n\tmatch_placeholder_arg_value()\n\tmatch_placeholder_bool_arg()\n\nwere added in pretty 4f732e0fd7 (pretty: allow %(trailers) options\nwith explicit value, 2019-01-29) to parse multiple options in an\nargument to --pretty. For example,\n\n\tgit log --pretty=\"%(trailers:key=Signed-Off-By,separator=%x2C )\"\n\nwill output all the trailers matching the key and seperates them by\na comma followed by a space per commit.\n\nAdd similar functions,\n\n\tmatch_atom_arg_value()\n\tmatch_atom_bool_arg()\n\nin ref-filter.\n\nThere is no atom yet that can use these functions in ref-filter, but we\nare going to add a new %(describe) atom in a subsequent commit where we\nparse options like tags=<bool-value> or match=<pattern> given to it.\n\nHelped-by: Junio C Hamano <gitster@pobox.com>\nMentored-by: Christian Couder <christian.couder@gmail.com>\nMentored-by: Hariom Verma <hariom18599@gmail.com>\nSigned-off-by: Kousik Sanagavarapu <five231003@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9645a087c2e848b8f48d03a3ae3222c5d5aa8261", "commit_date": "2023-07-24T16:49:44Z", "commit_message": "sequencer: finish parsing the todo list despite an invalid first line\n\nBefore the todo list is edited it is rewritten to shorten the OIDs of\nthe commits being picked and to append advice about editing the list.\nThe exact advice depends on whether the todo list is being edited for\nthe first time or not. After the todo list has been edited it is\nrewritten to lengthen the OIDs of the commits being picked and to remove\nthe advice. If the edited list cannot be parsed then this last step is\nskipped.\n\nPrior to db81e50724 (rebase-interactive: use todo_list_write_to_file()\nin edit_todo_list(), 2019-03-05) if the existing todo list could not be\nparsed then the initial rewrite was skipped as well. This had the\nunfortunate consequence that if the list could not be parsed after the\ninitial edit the advice given to the user was wrong when they re-edited\nthe list. This change relied on todo_list_parse_insn_buffer() returning\nthe whole todo list even when it cannot be parsed. Unfortunately if the\nlist starts with a \"fixup\" command then it will be truncated and the\nremaining lines are lost. Fix this by continuing to parse after an\ninitial \"fixup\" commit as we do when we see any other invalid line.\n\nSigned-off-by: Alex Henrie <alexhenrie24@gmail.com>\n[jc: removed an apparently unneeded subshell around the test body]\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4970bedef2e077f78baac5c6e825d17786be735b", "commit_date": "2023-07-21T22:30:57Z", "commit_message": "branch: update the message to refuse touching a branch in-use\n\nThe \"git branch -f\" command can refuse to force-update a branch that\nis used by another worktree.  The original rationale for this\nbehaviour was that updating a branch that is checked out in another\nworktree, without making a matching change to the index and the\nworking tree files in that worktree, will lead to a very confused\nuser.  \"git diff HEAD\" will no longer give a useful patch, because\nHEAD is a commit unrelated to what the index and the working tree in\nthe worktree were based on, for example.\n\nThese days, the same mechanism also protects branches that are being\nrebased or bisected, and the same machanism is expected to be the\nright place to add more checks, when we decide to protect branches\nundergoing other kinds of operations.  We however forgot to rethink\nthe messaging, which originally said that we are refusing to touch\nthe branch because it is \"checked out\" elsewhere, when d2ba271a\n(branch: check for bisects and rebases, 2022-06-14) started to\nprotect branches that are being rebased or bisected.\n\nThe spirit of the check has always been that we do not want to\ndisrupt the use of the same branch in other worktrees.  Let's reword\nthe message slightly to say that the branch is \"used by\" another\nworktree, instead of \"checked out\".\n\nWe could teach the branch.c:prepare_checked_out_branches() function\nto remember why it decided that a particular branch needs protecting\n(i.e. was it because it was checked out?  being bisected?  something\nelse?) in addition to which worktree the branch was in use, and use\nthat in the error message to say \"you cannot force update this\nbranch because it is being bisected in the worktree X\", etc., but it\nis dubious that such extra complexity is worth it.  The message\nalready tells which directory the worktree in question is, and it\nshould be just a \"chdir\" away for the user to find out what state it\nis in, if the user felt curious enough.  So let's not go there yet.\n\nHelped-by: Josh Sref <jsoref@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e43f4fd0bd864e0472dd4285190d411f4342e8d8", "commit_date": "2023-07-21T20:47:26Z", "commit_message": "The thirteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "39fe402d6727efb6c98ddca19fae1f094ffaa6b3", "commit_date": "2023-07-21T20:47:26Z", "commit_message": "Merge branch 'tb/refs-exclusion-and-packed-refs'\n\nEnumerating refs in the packed-refs file, while excluding refs that\nmatch certain patterns, has been optimized.\n\n* tb/refs-exclusion-and-packed-refs:\n  ls-refs.c: avoid enumerating hidden refs where possible\n  upload-pack.c: avoid enumerating hidden refs where possible\n  builtin/receive-pack.c: avoid enumerating hidden references\n  refs.h: implement `hidden_refs_to_excludes()`\n  refs.h: let `for_each_namespaced_ref()` take excluded patterns\n  revision.h: store hidden refs in a `strvec`\n  refs/packed-backend.c: add trace2 counters for jump list\n  refs/packed-backend.c: implement jump lists to avoid excluded pattern(s)\n  refs/packed-backend.c: refactor `find_reference_location()`\n  refs: plumb `exclude_patterns` argument throughout\n  builtin/for-each-ref.c: add `--exclude` option\n  ref-filter.c: parameterize match functions over patterns\n  ref-filter: add `ref_filter_clear()`\n  ref-filter: clear reachable list pointers after freeing\n  ref-filter.h: provide `REF_FILTER_INIT`\n  refs.c: rename `ref_filter`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "36f76d2a253a0346491cc127de5ca4b9f7895d60", "commit_date": "2023-07-21T17:04:04Z", "commit_message": "pack-objects: fix --no-quiet\n\nSince 99fb6e04cb (pack-objects: convert to use parse_options(),\n2012-02-01) git pack-objects has accepted the option --no-quiet, but it\ndoes the same as --quiet.  That's because it's defined using OPT_SET_INT\nwith a value of 0, which sets 0 when negated, too.\n\nMake --no-quiet equivalent to --progress and ignore it if --all-progress\nwas given.\n\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a5f30874120880ddaa53d0db4c3b4ec0a07297a", "commit_date": "2023-07-21T17:02:59Z", "commit_message": "pack-objects: fix --no-keep-true-parents\n\nSince 99fb6e04cb (pack-objects: convert to use parse_options(),\n2012-02-01) git pack-objects has accepted --no-keep-true-parents, but\nthis option does the same as --keep-true-parents.  That's because it's\ndefined using OPT_SET_INT with a value of 0, which sets 0 when negated\nas well.\n\nTurn --no-keep-true-parents into the opposite of --keep-true-parents by\nusing OPT_BOOL and storing the option's status directly in a variable\nnamed \"grafts_keep_true_parents\" instead of in negative form in\n\"grafts_replace_parents\".\n\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c95ae3ff9cdcbe6229dc3aa4cd7aa14b1354759a", "commit_date": "2023-07-21T16:57:15Z", "commit_message": "describe: fix --no-exact-match\n\nSince 2c33f75754 (Teach git-describe --exact-match to avoid expensive\ntag searches, 2008-02-24) git describe accepts --no-exact-match, but it\ndoes the same as --exact-match, an alias for --candidates=0.  That's\nbecause it's defined using OPT_SET_INT with a value of 0, which sets 0\nwhen negated as well.\n\nLet --no-exact-match set the number of candidates to the default value\ninstead.  Users that need a more specific lack of exactitude can specify\ntheir preferred value using --candidates, as before.\n\nThe \"--no-exact-match\" option was not covered in the tests, so let's\nadd a few.  Also add a case where --exact-match option is used on a\ncommit that cannot be described without distance from tags and make\nsure the command fails.\n\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\n[jc: added trivial tests]\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "835950bd19260426f664a9b0164c580db9f9aacb", "commit_date": "2023-07-21T14:32:58Z", "commit_message": "blame: allow --contents to work with bare repo\n\nThe --contents option can be used with git blame to blame the file\nas if it had the contents from the specified file. Since 1a3119ed\n(blame: allow --contents to work with non-HEAD commit, 2023-03-24),\nthe --contents option can work with non-HEAD commit. However, if you\ntry to use --contents in a bare repository, you get the following\nerror:\n\n    fatal: this operation must be run in a work tree\n\nThis is because before trying to generate a fake working tree\ncommit, we always call setup_work_tree(). But in a bare repo,\nworking tree is not available. The call to setup_work_tree is used\nto prepare the reading of the blamed file in the working tree, which\nisn't necessary if we are reading the contents from the specific\nfile instead of the file in the working tree.\n\nAdd a check in setup_scoreboard to skip setup_work_tree if we are\nreading from the file specified in --contents.\n\nThis enables us to use --contents in a bare repo. This is a nice\naddition on top of 1a3119ed, having a working tree to use --contents\nis optional.\n\nAdd test for the --contents option with bare repo to the\nannotate-tests.sh test script.\n\nSigned-off-by: Han Young <hanyang.tony@bytedance.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a27eecea75b3858b4052b191143f144a7e966869", "commit_date": "2023-07-20T18:52:53Z", "commit_message": "wrapper: use trace2 counters to collect fsync stats\n\nAs mentioned in the thread starting at [1], trace2 counters should be\nused to count events instead of ad-hoc static variables.\n\nConvert the two fsync static variables to trace2 counters, reducing the\ncoupling between wrapper.c and the trace2 subsystem. Adjust t/t5351 to\nmatch the trace2 counter output format.\n\nThe counters are not per-thread because the ones being replaced also\nwere not.\n\n[1] https://lore.kernel.org/git/20230627195251.1973421-2-calvinwan@google.com/\n\nSigned-off-by: Beat Bolli <dev+git@drbeat.li>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3821eb6c3dedba1c57522a1254a916f5ad0d15dc", "commit_date": "2023-07-20T05:02:53Z", "commit_message": "reset: reject --no-(mixed|soft|hard|merge|keep) option\n\n\"git reset --no-mixed\" behaved exactly like \"git reset --mixed\",\nwhich was nonsense.\n\nIf there were only two kinds, e.g. \"mixed\" vs \"separate\", it might\nhave made sense to make \"git reset --no-mixed\" behave identically to\n\"git reset --separate\" and vice-versa, but because we have many\ntypes of reset, let's just forbid \"--no-mixed\" and negated form of\nother types.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "68cbb20e737218bcd067bb5b5be658378095d0ed", "commit_date": "2023-07-20T05:00:39Z", "commit_message": "show-branch: reject --[no-](topo|date)-order\n\n\"git show-branch --no-topo-order\" behaved exactly the same way as\n\"git show-branch --topo-order\" did, which was nonsense.  This was\nbecause we choose between topo- and date- by setting a variable to\neither REV_SORT_IN_GRAPH_ORDER or REV_SORT_BY_COMMIT_DATE with\nOPT_SET_INT() and REV_SORT_IN_GRAPH_ORDER happens to be 0.  The\nOPT_SET_INT() macro assigns 0 to the target variable in respose to\nthe negated form of its option.\n\n\"--no-date-order\" by luck behaves identically to \"--topo-order\"\nexactly for the same reason, and it sort-of makes sense right now,\nbut the \"sort-of makes sense\" will quickly break down once we add a\nthird way to sort.  Not-A may be B when there are only two choices\nbetween A and B, but once your choices become among A, B, and C,\nnot-A does not mean B.\n\nJust mark these two ordering options to reject negation, and add a\ntest, which was missing.  \"git show-branch --no-reflog\" is also\nunnegatable, so throw in a test for that while we are at it.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c48af99a3e516efd0873b9e8c1f1feda453e3cf1", "commit_date": "2023-07-20T00:02:16Z", "commit_message": "trace2: fix a comment\n\nWhen the trace2 counter mechanism was added in 81071626ba (trace2: add\nglobal counter mechanism, 2022-10-24), the name of the file where new\ncounters are added was misspelled in a comment.\n\nUse the correct file name.\n\nSigned-off-by: Beat Bolli <dev+git@drbeat.li>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c512643e67d33673933fa3d245be28b08b974755", "commit_date": "2023-07-19T23:39:02Z", "commit_message": "short help: allow a gap smaller than USAGE_GAP\n\nThe parse-options API responds to \"git cmd -h\" by listing the option\nflag (padded to the USAGE_OPTS_WIDTH column), followed by USAGE_GAP\n(set to 2) whitespaces, followed by the help text.  If the flags\npart does not fit within the USAGE_OPTS_WIDTH, the help text is given\non its own line.  Imagine that \"@\" below depicts the USAGE_OPTS_WIDTH'th\ncolumn, and \"#\" are for the usage help text, the output may look\nlike this:\n\n    @@@@@@@@@@@@@  ########################################\n    -f\t\t   description of the flag '-f' comes here\n    --short=<num>  description of the flag '--short'\n    --very-long-option=<number>\n                   description of the flag '--very-long-option'\n\nThis is all good and nice in principle, but it becomes awkward when\nthe flags part is just one column over the limit and forces a line\nbreak.  See the description of the \"--almost\" option below:\n\n    @@@@@@@@@@@@@  ########################################\n    -f\t\t   description of the flag '-f' comes here\n    --short=<num>  description of the flag '--short'\n    --almost=<num>\n                   description of the flag '--almost'\n    --very-long-option=<number>\n                   description of the flag '--very-long-option'\n\nIf we allow shrinking the gap to a single whitespace only in such a\ncase, we would instead get:\n\n    @@@@@@@@@@@@@  ########################################\n    -f\t\t   description of the flag '-f' comes here\n    --short=<num>  description of the flag '--short'\n    --almost=<num> description of the flag '--almost'\n    --very-long-option=<number>\n                   description of the flag '--very-long-option'\n\nand the boundary between the flags and their descriptions does not\nbecome any harder to see, while saving precious vertical screen real\nestate.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d86a8f386d89edaffec63a626f5226c9f39f5027", "commit_date": "2023-07-19T23:39:02Z", "commit_message": "remote: simplify \"remote add --tags\" help text\n\nThe help text for the --tags option was split into two option[]\nentries, which was a hacky way to give two lines of help text (the\nsecond entry did not have either short or long help, and there was\nno way to invoke its entry---it was there only for the help text).\n\nAs we now support multi-line text in the option help, let's make\nthe second line of the help a proper second line and remove the\nhacky second entry.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "448abbba63471153df6ba520a5621595557ce3c8", "commit_date": "2023-07-19T23:30:06Z", "commit_message": "short help: allow multi-line opthelp\n\nWhen \"-h\" triggers the short-help in a command that implements its\noption parsing using the parse-options API, the option help text is\nshown with a single fprintf() as a long line.  When the text is\nmulti-line, the second and subsequent lines are not left padded,\nthat breaks the alignment across options.\n\nBorrowing the idea from the advice API where its hint strings are\nshown with (localized) \"hint:\" prefix, let's internally split the\n(localized) help text into lines, and showing the first line, pad\nthe remaining lines to align.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb8f7269c2fc69ada6238bc766168adbfd15a369", "commit_date": "2023-07-19T17:07:55Z", "commit_message": "configure.ac: always save NO_ICONV to config.status\n\nIn case 'configure --with-iconv=no' is used, NO_ICONV is not saved to\nconfig.status and thus git is built with iconv support.\n\nAlways save NO_ICONV to config.status to honor what user selected\nduring configure step.\n\nSigned-off-by: Andreas Herrmann <aherrmann@suse.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "92d8f00a1118b47fed5806b0830cdccf810500d3", "commit_date": "2023-07-19T17:07:55Z", "commit_message": "configure.ac: don't overwrite NO_CURL option\n\nEven if 'configure --with-curl=no' was run, curl support is used,\nbecause library detection overwrites it. Avoid this overwrite.\nConfigure should obey what the user has specified.\n\nSigned-off-by: Andreas Herrmann <aherrmann@suse.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0dd79e0d49818e964079c6d45f7f06a385bf2704", "commit_date": "2023-07-19T17:07:55Z", "commit_message": "configure.ac: don't overwrite NO_EXPAT option\n\nEven if 'configure --with-expat=no' was run, expat support is used,\nbecause library detection overwrites it. Avoid this overwrite.\nConfigure should obey what the user has specified.\n\nSigned-off-by: Andreas Herrmann <aherrmann@suse.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "83bb8e5a0689e236f06a24ffede0b4c823b4a0b2", "commit_date": "2023-07-19T16:16:37Z", "commit_message": "show-branch: --no-sparse should give dense output\n\n\"git show-branch --no-sparse\" behaved exactly the same way as \"git\nshow-branch --sparse\", which did not make any sense.  This was\nbecause it used a variable \"dense\" initialized to 1 by default to\ngive \"non sparse\" behaviour, and OPT_SET_INT() to set the varilable\nto 0 in response to the \"--sparse\" option.  Unfortunately,\nOPT_SET_INT() sets 0 to the given variable when the option is\nnegated.\n\nFlip the polarity of the variable \"dense\" by renaming it to \"sparse\"\nand initializing it to 0, and have OPT_SET_INT() set the variable to\n1 when \"--sparse\" is given.  This way, \"--no-sparse\" would set 0 to\nthe variable and would give us the \"dense\" behaviour.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a2dad4868bf0681f63fe10264c171b5a547324a5", "commit_date": "2023-07-18T21:47:30Z", "commit_message": "fetch: reject --no-ipv[46]\n\nNow we have introduced OPT_IPVERSION(), tweak its implementation so\nthat \"git clone\", \"git fetch\", and \"git push\" reject the negated\nform of \"Use only IP version N\" options.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae2c912c04cf9902653409d686ca6d5017c3906f", "commit_date": "2023-07-18T21:35:54Z", "commit_message": "parse-options: introduce OPT_IPVERSION()\n\nThe command line option parsing for \"git clone\", \"git fetch\", and\n\"git push\" have duplicated implementations of parsing \"--ipv4\" and\n\"--ipv6\" options, by having two OPT_SET_INT() for \"ipv4\" and \"ipv6\".\n\nIntroduce a new OPT_IPVERSION() macro and use it in these three\ncommands.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e12cb98e1e083c23a03fcfabb3a3c6a5a22ce3c5", "commit_date": "2023-07-18T19:19:53Z", "commit_message": "branch: reject \"--no-all\" and \"--no-remotes\" early\n\nAs the command line parser for \"git branch --all\" forgets to use\nPARSE_OPT_NONEG, it accepted \"git branch --no-all\", and then passed\na nonsense value to the underlying machinery, leading to a fatal\nerror \"filter_refs: invalid type\".  The \"--remotes\" option had\nexactly the same issue.\n\nCatch the unsupported options early in the option parser.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "947ebd62a0cc830b00f106f6fa5f0715674990a2", "commit_date": "2023-07-18T19:19:31Z", "commit_message": "am: simplify parsing of \"--[no-]keep-cr\"\n\nCommand line options \"--keep-cr\" and its negation trigger\nOPT_SET_INT_F(PARSE_OPT_NONEG) to set a variable to 1 and 0\nrespectively.  Using OPT_SET_INT() to implement the positive variant\nthat sets the variable to 1 without specifying PARSE_OPT_NONEG gives\nus the negative variant to set it to 0 for free.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6f598e443f705d1f08a87d65aa3d574289c0be3", "commit_date": "2023-07-18T19:19:08Z", "commit_message": "gitignore.txt: mark up explanation of patterns consistently\n\nIn the \"PATTERN FORMAT\" section, all the other pattern elements are\nshown as `monospace` literals inside \"double quoted\" strings.  Do\nthe same for the explanation of a slash to make it consistent.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "991c552916d3c8fa464acfca135b4235e11792bf", "commit_date": "2023-07-18T16:38:24Z", "commit_message": "ls-tree: fix --no-full-name\n\nSince 61fdbcf98b (ls-tree: migrate to parse-options, 2009-11-13) git\nls-tree has accepted the option --no-full-name, but it does the same\nas --full-name, contrary to convention.  That's because it's defined\nusing OPT_SET_INT with a value of 0, where the negative variant sets\n0 as well.\n\nTurn --no-full-name into the opposite of --full-name by using OPT_BOOL\ninstead and storing the option's status directly in a variable named\n\"full_name\" instead of in negated form in \"chomp_prefix\".\n\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cba07a324d2cda06dd7a7b35b4579f800de024aa", "commit_date": "2023-07-18T14:29:00Z", "commit_message": "The twelfth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c6a5e1a22e0fcafbcc67a2b098cc13150f8aaf4a", "commit_date": "2023-07-18T14:28:53Z", "commit_message": "Merge branch 'tb/repack-cleanup'\n\nThe recent change to \"git repack\" made it react less nicely when a\nleftover .idx file that no longer has the corresponding .pack file\nin the repository, which has been corrected.\n\n* tb/repack-cleanup:\n  builtin/repack.c: avoid dir traversal in `collect_pack_filenames()`\n  builtin/repack.c: only repack `.pack`s that exist", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6016ee0a7130d3ad656def12d724d1525d39af9b", "commit_date": "2023-07-18T14:28:53Z", "commit_message": "Merge branch 'tb/fsck-no-progress'\n\n\"git fsck --no-progress\" still spewed noise from the commit-graph\nsubsystem, which has been corrected.\n\n* tb/fsck-no-progress:\n  commit-graph.c: avoid duplicated progress output during `verify`\n  commit-graph.c: pass progress to `verify_one_commit_graph()`\n  commit-graph.c: iteratively verify commit-graph chains\n  commit-graph.c: extract `verify_one_commit_graph()`\n  fsck: suppress MIDX output with `--no-progress`\n  fsck: suppress commit-graph output with `--no-progress`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6e67222c103783616912c26c9906b8167c39ab8", "commit_date": "2023-07-18T14:28:52Z", "commit_message": "Merge branch 'mh/doc-credential-helpers'\n\nDoc update.\n\n* mh/doc-credential-helpers:\n  doc: gitcredentials: link to helper list", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3437f549dd28fde454977921ae355a0aa3d76011", "commit_date": "2023-07-18T13:56:19Z", "commit_message": "gitignore.txt: use backticks instead of double quotes\n\nAmong four examples, only this one used \"double quoted\" sample\npatterns, but all others marked up the patterns in `monospace`.\n\nSigned-off-by: Johan Ruokangas <johan@latehours.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d9e00621591549cd2d9989d290a7e0c63eadd03b", "commit_date": "2023-07-17T21:16:05Z", "commit_message": "ref-filter: simplify return type of match_points_at\n\nWe return the oid that matched, but the sole caller only cares whether\nwe matched anything at all. This is mostly academic, since there's only\none caller, but the lifetime of the returned pointer is not immediately\nclear. Sometimes it points to an oid in a tag struct, which should live\nforever. And sometimes to the oid passed in, which only lives as long as\nthe each_ref_fn callback we're called from.\n\nSimplify this to a boolean return which is more direct and obvious. As a\nbonus, this lets us avoid the weird pattern of overwriting our \"oid\"\nparameter in the loop (since we now only refer to the tagged oid one\ntime, and can just inline the call to get it).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "870eb53ab20e9ff453e3b89b4927c154c2b7211a", "commit_date": "2023-07-17T21:16:05Z", "commit_message": "ref-filter: avoid parsing non-tags in match_points_at()\n\nWhen handling --points-at, we have to try to peel each ref to see if\nit's a tag that points at a requested oid. We start this process by\ncalling parse_object() on the oid pointed to by each ref.\n\nThe cost of parsing each object adds up, especially in an output that\ndoesn't otherwise need to open the objects at all. Ideally we'd use\npeel_iterated_oid() here, which uses the cached information in the\npacked-refs file. But we can't, because our --points-at must match not\nonly the fully peeled value, but any interim values (so if tag A points\nto tag B which points to commit C, we should match --points-at=B, but\npeel_iterated_oid() will only tell us about C).\n\nSo the best we can do (absent changes to the packed-refs peel traits) is\nto avoid parsing non-tags. The obvious way to do that is to call\noid_object_info() to check the type before parsing. But there are a few\ngotchas there, like checking if the object has already been parsed.\n\nInstead we can just tell parse_object() that we are OK skipping the hash\ncheck, which lets it turn on several optimizations. Commits can be\nloaded via the commit graph (so it's both fast and we have the benefit\nof the parsed data if we need it later at the output stage). Blobs are\nnot loaded at all. Trees are still loaded, but it's rather rare to have\na ref point directly to a tree (and since this is just an optimization,\nkicking in 99% of the time is OK).\n\nEven though we're paying for an extra lookup, the cost to avoid parsing\nthe non-tags is a net benefit. In my git.git repository with 941 tags\nand 1440 other refs pointing to commits, this significantly cuts the\nruntime:\n\n  Benchmark 1: ./git.old for-each-ref --points-at=HEAD\n    Time (mean \u00b1 \u03c3):      26.8 ms \u00b1   0.5 ms    [User: 24.5 ms, System: 2.2 ms]\n    Range (min \u2026 max):    25.9 ms \u2026  29.2 ms    107 runs\n\n  Benchmark 2: ./git.new for-each-ref --points-at=HEAD\n    Time (mean \u00b1 \u03c3):       9.1 ms \u00b1   0.3 ms    [User: 6.8 ms, System: 2.2 ms]\n    Range (min \u2026 max):     8.6 ms \u2026  10.2 ms    308 runs\n\n  Summary\n    './git.new for-each-ref --points-at=HEAD' ran\n      2.96 \u00b1 0.10 times faster than './git.old for-each-ref --points-at=HEAD'\n\nIn a repository that is mostly annotated tags, we'd expect less\nimprovement (we might still skip a few object loads, but that's balanced\nby the extra lookups). In my clone of linux.git, which has 782 tags and\n3 branches, the run-time is about the same (it's actually ~1% faster on\naverage after this patch, but that's within the run-to-run noise).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9584c5858799d5603851af5f0dbad5e7af29b22", "commit_date": "2023-07-17T21:16:05Z", "commit_message": "ref-filter: avoid parsing tagged objects in match_points_at()\n\nWhen we peel tags to check if they match a --points-at oid, we\nrecursively parse the tagged object to see if it is also a tag. But\nsince the tag itself tells us the type of the object it points to (and\neven gives us the appropriate object struct via its \"tagged\" member), we\ncan use that directly.\n\nWe do still have to make sure to call parse_tag() before looking at each\ntag. This is redundant for the outermost tag (since we did call\nparse_object() to find its type), but that's OK; parse_tag() is smart\nenough to make this a noop when the tag has already been parsed.\n\nIn my clone of linux.git, with 782 tags (and only 3 non-tags), this\nyields a significant speedup (bringing us back where we were before the\ncommit before this one started recursively dereferencing tags):\n\n  Benchmark 1: ./git.old for-each-ref --points-at=HEAD --format=\"%(refname)\"\n    Time (mean \u00b1 \u03c3):      20.3 ms \u00b1   0.5 ms    [User: 11.1 ms, System: 9.1 ms]\n    Range (min \u2026 max):    19.6 ms \u2026  21.5 ms    141 runs\n\n  Benchmark 2: ./git.new for-each-ref --points-at=HEAD --format=\"%(refname)\"\n    Time (mean \u00b1 \u03c3):      11.4 ms \u00b1   0.2 ms    [User: 6.3 ms, System: 5.0 ms]\n    Range (min \u2026 max):    11.0 ms \u2026  12.2 ms    250 runs\n\n  Summary\n    './git.new for-each-ref --points-at=HEAD --format=\"%(refname)\"' ran\n      1.79 \u00b1 0.05 times faster than './git.old for-each-ref --points-at=HEAD --format=\"%(refname)\"'\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "468887f0f8a0a9e465737c3ad23cb40c8d690f2f", "commit_date": "2023-07-17T21:16:05Z", "commit_message": "ref-filter: handle nested tags in --points-at option\n\nTags are dereferenced until reaching a different object type to handle\nnested tags, e.g. on checkout. In contrast, \"git tag --points-at=...\"\nfails to list such nested tags because only one level of indirection is\nobtained in filter_refs(). Implement the recursive dereferencing for the\n\"--points-at\" option when filtering refs to unify the behaviour.\n\nSigned-off-by: Jan Kl\u00f6tzke <jan@kloetzke.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e238546dc7a232d8998f1cd1ec9d3f4a0add68b", "commit_date": "2023-07-17T18:30:43Z", "commit_message": "The eleventh batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "13ed10efd422fe143a4d732100c25a6c6c60f656", "commit_date": "2023-07-17T18:30:43Z", "commit_message": "Merge branch 'jc/pathspec-match-with-common-prefix'\n\n\"git ls-files '(attr:X)D/'\" that triggers the common prefix\noptimization codepath failed to read from \"D/.gitattributes\",\nwhich has been corrected.\n\n* jc/pathspec-match-with-common-prefix:\n  dir: match \"attr\" pathspec magic with correct paths\n  t6135: attr magic with path pattern", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce481ac8b31c9061eeecd1ba0d7174b621f96632", "commit_date": "2023-07-17T18:30:42Z", "commit_message": "Merge branch 'cw/compat-util-header-cleanup'\n\nFurther shuffling of declarations across header files to streamline\nfile dependencies.\n\n* cw/compat-util-header-cleanup:\n  git-compat-util: move alloc macros to git-compat-util.h\n  treewide: remove unnecessary includes for wrapper.h\n  kwset: move translation table from ctype\n  sane-ctype.h: create header for sane-ctype macros\n  git-compat-util: move wrapper.c funcs to its header\n  git-compat-util: move strbuf.c funcs to its header", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d5bb430ec68303cc8fd8a899ba35d6a8bc857df7", "commit_date": "2023-07-17T18:30:42Z", "commit_message": "Merge branch 'vd/adjust-mfow-doc-to-updated-headers'\n\nCode snippets in a tutorial document no longer compiled after\nrecent header shuffling, which have been corrected.\n\n* vd/adjust-mfow-doc-to-updated-headers:\n  docs: add necessary headers to Documentation/MFOW.txt", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0e074fb4e51fe2bcae989886171679da1e939736", "commit_date": "2023-07-17T18:30:42Z", "commit_message": "Merge branch 'rs/ls-tree-prefix-simplify'\n\nCode simplification.\n\n* rs/ls-tree-prefix-simplify:\n  ls-tree: simplify prefix handling", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d383b4f24e29a4654276d54f8ba9102230342c09", "commit_date": "2023-07-17T18:30:41Z", "commit_message": "Merge branch 'rs/userformat-find-requirements-simplify'\n\nCode simplification.\n\n* rs/userformat-find-requirements-simplify:\n  pretty: use strchr(3) in userformat_find_requirements()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "55e8fad660e52df2be425a65d409226237fcff48", "commit_date": "2023-07-17T18:30:41Z", "commit_message": "Merge branch 'rs/pretty-format-double-negation-fix'\n\nCode clarification.\n\n* rs/pretty-format-double-negation-fix:\n  pretty: avoid double negative in format_commit_item()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "377d1ca423c936236f7907443cb8e5fa76111c9f", "commit_date": "2023-07-17T18:30:41Z", "commit_message": "Merge branch 'rs/packet-length-simplify'\n\nCode simplification.\n\n* rs/packet-length-simplify:\n  pkt-line: add size parameter to packet_length()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9187b276e98762f08a96db8694eb42f8ca1ab532", "commit_date": "2023-07-17T18:30:41Z", "commit_message": "Merge branch 'pw/diff-no-index-from-named-pipes'\n\n\"git diff --no-index\" learned to read from named pipes as if they\nwere regular files, to allow \"git diff <(process) <(substitution)\"\nsome shells support.\n\n* pw/diff-no-index-from-named-pipes:\n  diff --no-index: support reading from named pipes\n  t4054: test diff --no-index with stdin\n  diff --no-index: die on error reading stdin\n  diff --no-index: refuse to compare stdin to a directory", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "830b4a04c45bf0a6db26defe02ed1f490acd18ee", "commit_date": "2023-07-14T17:46:08Z", "commit_message": "The tenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "daa2589b6350b298512317d0b63a82faf7cb22fe", "commit_date": "2023-07-14T17:46:07Z", "commit_message": "Merge branch 'jk/imap-send-unused-variable-cleanup'\n\n\"imap-send\" codepaths got cleaned up to get rid of unused\nparameters.\n\n* jk/imap-send-unused-variable-cleanup:\n  imap-send: drop unused fields from imap_cmd_cb\n  imap-send: drop unused parameter from imap_cmd_cb callback\n  imap-send: use server conf argument in setup_curl()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ce36dea07b94ee70be545fcef4b81600ff8e036d", "commit_date": "2023-07-14T17:46:07Z", "commit_message": "Merge branch 'ma/t0091-fixup'\n\n\"git bugreport\" tests did not test what it wanted to test, which\nhas been corrected.\n\n* ma/t0091-fixup:\n  t0091-bugreport.sh: actually verify some content of report", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "81ebc54e81619ccc71fca6a4ce7822e78b24e80c", "commit_date": "2023-07-14T17:46:07Z", "commit_message": "Merge branch 'ks/ref-filter-signature'\n\nThe \"git for-each-ref\" family of commands learned placeholders\nrelated to GPG signature verification.\n\n* ks/ref-filter-signature:\n  ref-filter: add new \"signature\" atom\n  t/lib-gpg: introduce new prereq GPG2", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aa9166bcc0ba654fc21f198a30647ec087f733ed", "commit_date": "2023-07-08T18:23:08Z", "commit_message": "The ninth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b00ec259e735fcb0dc4f697b7cc98b2730879d63", "commit_date": "2023-07-08T18:23:08Z", "commit_message": "Merge branch 'jk/fsck-indices-in-worktrees'\n\nCode clarification.\n\n* jk/fsck-indices-in-worktrees:\n  fsck: avoid misleading variable name", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7f5ad0ca8d1d7db7a21755af34251714d86b2ec1", "commit_date": "2023-07-08T18:23:07Z", "commit_message": "Merge branch 'js/empty-index-fixes'\n\nA few places failed to differenciate the case where the index is\ntruly empty (nothing added) and we haven't yet read from the\non-disk index file, which have been corrected.\n\n* js/empty-index-fixes:\n  commit -a -m: allow the top-level tree to become empty again\n  split-index: accept that a base index can be empty\n  do_read_index(): always mark index as initialized unless erroring out", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d52a45cf5635f9f40a99ddc6efa92713f2d357b4", "commit_date": "2023-07-08T18:23:07Z", "commit_message": "Merge branch 'ks/t4205-test-describe-with-abbrev-fix'\n\nTest update.\n\n* ks/t4205-test-describe-with-abbrev-fix:\n  t4205: correctly test %(describe:abbrev=...)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "061c58647eb4b3f0e2c898333577d4b2af115b1d", "commit_date": "2023-07-06T18:54:48Z", "commit_message": "The eighth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b3d1c85d4833aef546f11e4d37516a1ececaefc3", "commit_date": "2023-07-06T18:54:48Z", "commit_message": "Merge branch 'gc/config-context'\n\nReduce reliance on a global state in the config reading API.\n\n* gc/config-context:\n  config: pass source to config_parser_event_fn_t\n  config: add kvi.path, use it to evaluate includes\n  config.c: remove config_reader from configsets\n  config: pass kvi to die_bad_number()\n  trace2: plumb config kvi\n  config.c: pass ctx with CLI config\n  config: pass ctx with config files\n  config.c: pass ctx in configsets\n  config: add ctx arg to config_fn_t\n  urlmatch.h: use config_fn_t type\n  config: inline git_color_default_config", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1d76e69212102c3373b552186590b76d6ad8d84c", "commit_date": "2023-07-06T18:54:47Z", "commit_message": "Merge branch 'jc/doc-hash-object-types'\n\nDoc update.\n\n* jc/doc-hash-object-types:\n  docs: add git hash-object -t option's possible values", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "391414e971d552e5e0fa1363347ec2c076062daf", "commit_date": "2023-07-06T18:54:47Z", "commit_message": "Merge branch 'jk/cherry-pick-revert-status'\n\nDuring a cherry-pick or revert session that works on multiple\ncommits, \"git status\" did not give correct information, which has\nbeen corrected.\n\n* jk/cherry-pick-revert-status:\n  fix cherry-pick/revert status when doing multiple commits", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84b889bd035886cb19b1e9a9524dcf8a431836cd", "commit_date": "2023-07-06T18:54:47Z", "commit_message": "Merge branch 'pw/apply-too-large'\n\n\"git apply\" punts when it is fed too large a patch input; the error\nmessage it gives when it happens has been clarified.\n\n* pw/apply-too-large:\n  apply: improve error messages when reading patch", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a9cc3b8fc7c904227640aebc9b543bd9a0fb31d2", "commit_date": "2023-07-06T18:54:47Z", "commit_message": "Merge branch 'tl/notes-separator'\n\n'git notes append' was taught '--separator' to specify string to insert\nbetween paragraphs.\n\n* tl/notes-separator:\n  notes: introduce \"--no-separator\" option\n  notes.c: introduce \"--[no-]stripspace\" option\n  notes.c: append separator instead of insert by pos\n  notes.c: introduce '--separator=<paragraph-break>' option\n  t3321: add test cases about the notes stripspace behavior\n  notes.c: use designated initializers for clarity\n  notes.c: cleanup 'strbuf_grow' call in 'append_edit'", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5a1d9e8f8777a60d388278af6093af8483f48811", "commit_date": "2023-07-06T18:54:46Z", "commit_message": "Merge branch 'gc/config-partial-submodule-kvi-fix'\n\nPartially revert a sanity check that the rest of the config code\nwas not ready, to avoid triggering it in a corner case.\n\n* gc/config-partial-submodule-kvi-fix:\n  config: don't BUG when both kvi and source are set", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4c18e58be60d3f7cfec5da23f8d89526abce75a", "commit_date": "2023-07-06T18:54:46Z", "commit_message": "Merge branch 'pb/complete-diff-options'\n\nCompletion updates.\n\n* pb/complete-diff-options: (24 commits)\n  diff.c: mention completion above add_diff_options\n  completion: complete --remerge-diff\n  completion: complete --diff-merges, its options and --no-diff-merges\n  completion: move --pickaxe-{all,regex} to __git_diff_common_options\n  completion: complete --ws-error-highlight\n  completion: complete --unified\n  completion: complete --output-indicator-{context,new,old}\n  completion: complete --output\n  completion: complete --no-stat\n  completion: complete --no-relative\n  completion: complete --line-prefix\n  completion: complete --ita-invisible-in-index and --ita-visible-in-index\n  completion: complete --irreversible-delete\n  completion: complete --ignore-matching-lines\n  completion: complete --function-context\n  completion: complete --find-renames\n  completion: complete --find-object\n  completion: complete --find-copies\n  completion: complete --default-prefix\n  completion: complete --compact-summary\n  ...", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "67e7305e64fea8d15879e9dc3831fc8e31cfe619", "commit_date": "2023-07-06T18:54:46Z", "commit_message": "Merge branch 'cw/strbuf-cleanup'\n\nMove functions that are not about pure string manipulation out of\nstrbuf.[ch]\n\n* cw/strbuf-cleanup:\n  strbuf: remove global variable\n  path: move related function to path\n  object-name: move related functions to object-name\n  credential-store: move related functions to credential-store file\n  abspath: move related functions to abspath\n  strbuf: clarify dependency\n  strbuf: clarify API boundary", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "da269af9207e38e820daad8aa993caa7d2fad76c", "commit_date": "2023-07-06T18:54:45Z", "commit_message": "Merge branch 'rs/strbuf-expand-step'\n\nCode clean-up around strbuf_expand() API.\n\n* rs/strbuf-expand-step:\n  strbuf: simplify strbuf_expand_literal_cb()\n  replace strbuf_expand() with strbuf_expand_step()\n  replace strbuf_expand_dict_cb() with strbuf_expand_step()\n  strbuf: factor out strbuf_expand_step()\n  pretty: factor out expand_separator()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e3f26542a6ecd3006c2c0d5ccc0bae4a700f7e5", "commit_date": "2023-07-05T21:00:28Z", "commit_message": "diff --no-index: support reading from named pipes\n\nIn some shells, such as bash and zsh, it's possible to use a command\nsubstitution to provide the output of a command as a file argument to\nanother process, like so:\n\n  diff -u <(printf \"a\\nb\\n\") <(printf \"a\\nc\\n\")\n\nHowever, this syntax does not produce useful results with \"git diff\n--no-index\". On macOS, the arguments to the command are named pipes\nunder /dev/fd, and git diff doesn't know how to handle a named pipe. On\nLinux, the arguments are symlinks to pipes, so git diff \"helpfully\"\ndiffs these symlinks, comparing their targets like \"pipe:[1234]\" and\n\"pipe:[5678]\".\n\nTo address this \"diff --no-index\" is changed so that if a path given on\nthe commandline is a named pipe or a symbolic link that resolves to a\nnamed pipe then we read the data to diff from that pipe. This is\nimplemented by generalizing the code that already exists to handle\nreading from stdin when the user passes the path \"-\".\n\nIf the user tries to compare a named pipe to a directory then we die as\nwe do when trying to compare stdin to a directory.\n\nAs process substitution is not support by POSIX this change is tested by\nusing a pipe and a symbolic link to a pipe.\n\nHelped-by: Junio C Hamano <gitster@pobox.com>\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "df521462f01b61314c9c18a4b58a53db0cd7bf3c", "commit_date": "2023-07-05T21:00:28Z", "commit_message": "t4054: test diff --no-index with stdin\n\n\"git diff --no-index\" supports reading from stdin with the path \"-\".\nThere is no test coverage for this so add a regression test before\nchanging the code in the next commit.\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4e61e0f68053ff3fcca298ebd3080527e3565004", "commit_date": "2023-07-05T21:00:28Z", "commit_message": "diff --no-index: die on error reading stdin\n\nIf there is an error when reading from stdin then \"diff --no-index\"\nprints an error message but continues to try and diff a file named \"-\"\nresulting in an error message that looks like\n\n    error: error while reading from stdin: Invalid argument\n    fatal: stat '-': No such file or directory\n\nassuming that no file named \"-\" exists. If such a file exists it prints\nthe first error message and generates the diff from that file which is\nnot what the user wanted. Instead just die() straight away if we cannot\nread from stdin.\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "498198453dbb8ae46becbc83a1ef0979a0eb805d", "commit_date": "2023-07-05T21:00:28Z", "commit_message": "diff --no-index: refuse to compare stdin to a directory\n\nWhen the user runs\n\n    git diff --no-index file directory\n\nwe follow the behavior of POSIX diff and rewrite the arguments as\n\n    git diff --no-index file directory/file\n\nDoing that when \"file\" is \"-\" (which means \"read from stdin\") does not\nmake sense so we should error out if the user asks us to compare \"-\" to\na directory. This matches the behavior of GNU diff and diff on *BSD.\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1aa92b8500b7189bafb1cff26c056ada3e911a3d", "commit_date": "2023-07-05T18:45:46Z", "commit_message": "t0091-bugreport.sh: actually verify some content of report\n\nIn the first test in this script, 'creates a report with content in the\nright places', we generate a report and pipe it into our helper\n`check_all_headers_populated()`. The idea of the helper is to find all\nlines that look like headers (\"[Some Header Here]\") and to check that\nthe next line is non-empty. This is supposed to catch erroneous outputs\nsuch as the following:\n\n  [A Header]\n  something\n  more here\n\n  [Another Header]\n\n  [Too Early Header]\n  contents\n\nHowever, we provide the lines of the bug report as filenames to grep,\nmeaning we mostly end up spewing errors:\n\n  grep: : No such file or directory\n  grep: [System Info]: No such file or directory\n  grep: git version:: No such file or directory\n  grep: git version 2.41.0.2.gfb7d80edca: No such file or directory\n\nThis doesn't disturb the test, which tugs along and reports success, not\nreally having verified the contents of the report at all.\n\nNote that after 788a776069 (\"bugreport: collect list of populated\nhooks\", 2020-05-07), the bug report, which is created in our hook-less\ntest repo, contains an empty section with the enabled hooks. Thus, even\nthe intention of our helper is a bit misguided: there is nothing\ninherently wrong with having an empty section in the bug report.\n\nLet's instead split this test into three: first verify that we generate\na report at all, then check that the introductory blurb looks the way it\nshould, then verify that the \"[System Info]\" seems to contain the right\nthings. (The \"[Enabled Hooks]\" section is tested later in the script.)\n\nReported-by: SZEDER G\u00e1bor <szeder.dev@gmail.com>\nHelped-by: Phillip Wood <phillip.wood123@gmail.com>\nSigned-off-by: Martin \u00c5gren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d378637d2fe9eed3bd3bd0858e6cc79a8f23510a", "commit_date": "2023-07-05T17:16:53Z", "commit_message": "imap-send: drop unused fields from imap_cmd_cb\n\nThe imap_cmd_cb struct has several fields which are totally unused.\nPresumably they did useful things in the upstream isync code from which\nthis is derived, but they don't in our more limited program. This is\nparticularly confusing for the \"done\" callback, which (as of the\nprevious patch) no longer matches the signature of the adjacent \"cont\"\ncallback.\n\nSince we're unlikely to share code with isync going forward, we should\nfeel free to simplify the code here. Note that \"done\" is examined but\nnever set, so we can also drop a little bit of code outside of the\nstruct definition.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ec9e358a4a1a0f5513d57f5447d43e31a508dd17", "commit_date": "2023-07-05T17:16:53Z", "commit_message": "imap-send: drop unused parameter from imap_cmd_cb callback\n\nThere's a generic callback mechanism for handling plus-continuation of\nIMAP commands. It takes the imap_cmd struct itself as an argument. That\nseems reasonable, and in a larger imap-using program it might be used.\nBut in imap-send, we have only one such callback (auth_cram_md5) and it\ndoesn't use this value, triggering -Wunused-parameter warnings.\n\nWe could just mark the parameter as UNUSED. But since this is the only\nsuch function, and because we are not likely to share code with the\nupstream isync anymore, we can just simplify the interface to remove\nthis parameter.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "84d689a810842c44d95ac759d39702dfa170093b", "commit_date": "2023-07-05T17:16:53Z", "commit_message": "imap-send: use server conf argument in setup_curl()\n\nOur caller passes in an imap_server_conf struct, but we ignore it\ntotally, and instead read the config directly from the global \"server\"\nvariable. This works OK, since our sole caller will pass in that same\nglobal variable. But the intent seems to have been to use the passed-in\nvariable, as otherwise it has no purpose (and many other functions use\nthe same pattern).\n\nLet's use the passed-in value, which also silences a -Wunused-parameter\nwarning.\n\nIt would be nice if \"server\" was not a global here, as we could avoid\nmaking similar mistakes. But changing that would be a larger refactor,\nas it must be accessed as a global in a few spots (e.g., filling it in\nwith the config callback).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a646b86cd10282de2ceb64ef33b5412e4fb2a54c", "commit_date": "2023-07-04T23:08:18Z", "commit_message": "The seventh batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "89d62d5e8ef42be3a73493e8ffbede589c7a31d1", "commit_date": "2023-07-04T23:08:18Z", "commit_message": "Merge branch 'bc/more-git-var'\n\nAdd more \"git var\" for toolsmiths to learn various locations Git is\nconfigured with either via the configuration or hardcoded defaults.\n\n* bc/more-git-var:\n  var: add config file locations\n  var: add attributes files locations\n  attr: expose and rename accessor functions\n  var: adjust memory allocation for strings\n  var: format variable structure with C99 initializers\n  var: add support for listing the shell\n  t: add a function to check executable bit\n  var: mark unused parameters in git_var callbacks", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "812907d16fb46181d6eb17309dde697edfd06add", "commit_date": "2023-07-04T23:08:18Z", "commit_message": "Merge branch 'ps/revision-stdin-with-options'\n\nThe set-up code for the get_revision() API now allows feeding\noptions like --all and --not in the --stdin mode.\n\n* ps/revision-stdin-with-options:\n  revision: handle pseudo-opts in `--stdin` mode\n  revision: small readability improvement for reading from stdin\n  revision: reorder `read_revisions_from_stdin()`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9748a6820043d5815bee770ffa51647e0adc2cf0", "commit_date": "2023-06-29T23:43:21Z", "commit_message": "The sixth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4c237d2ca2b5aa1f8b79e9ac5e1afa907436fbfe", "commit_date": "2023-06-29T23:43:21Z", "commit_message": "Merge branch 'tb/gc-recent-object-hook'\n\nTest update.\n\n* tb/gc-recent-object-hook:\n  t7701: make annotated tag unreachable", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3ea43bbe17b9f0d8ffcad17ce602d36ea0668ab8", "commit_date": "2023-06-29T23:43:21Z", "commit_message": "Merge branch 'jc/abort-ll-merge-with-a-signal'\n\nWhen the external merge driver is killed by a signal, its output\nshould not be trusted as a resolution with conflicts that is\nproposed by the driver, but the code did.\n\n* jc/abort-ll-merge-with-a-signal:\n  t6406: skip \"external merge driver getting killed by a signal\" test on Windows\n  ll-merge: killing the external merge driver aborts the merge", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a1264a08a1a6e0cd7e510c899cd0ba42dcf1045d", "commit_date": "2023-06-29T23:43:21Z", "commit_message": "Merge branch 'en/header-split-cache-h-part-3'\n\nHeader files cleanup.\n\n* en/header-split-cache-h-part-3: (28 commits)\n  fsmonitor-ll.h: split this header out of fsmonitor.h\n  hash-ll, hashmap: move oidhash() to hash-ll\n  object-store-ll.h: split this header out of object-store.h\n  khash: name the structs that khash declares\n  merge-ll: rename from ll-merge\n  git-compat-util.h: remove unneccessary include of wildmatch.h\n  builtin.h: remove unneccessary includes\n  list-objects-filter-options.h: remove unneccessary include\n  diff.h: remove unnecessary include of oidset.h\n  repository: remove unnecessary include of path.h\n  log-tree: replace include of revision.h with simple forward declaration\n  cache.h: remove this no-longer-used header\n  read-cache*.h: move declarations for read-cache.c functions from cache.h\n  repository.h: move declaration of the_index from cache.h\n  merge.h: move declarations for merge.c from cache.h\n  diff.h: move declaration for global in diff.c from cache.h\n  preload-index.h: move declarations for preload-index.c from elsewhere\n  sparse-index.h: move declarations for sparse-index.c from cache.h\n  name-hash.h: move declarations for name-hash.c from cache.h\n  run-command.h: move declarations for run-command.c from cache.h\n  ...", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b2166b0d496c2f3df96929da300039a01227e719", "commit_date": "2023-06-29T23:43:20Z", "commit_message": "Merge branch 'ds/remove-idx-before-pack'\n\nWe create .pack and then .idx, we consider only packfiles that have\n.idx usable (those with only .pack are not ready yet), so we should\nremove .idx before removing .pack for consistency.\n\n* ds/remove-idx-before-pack:\n  packfile: delete .idx files before .pack files", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6e6a529b573398f0a8828551cf04dafb4f084c9a", "commit_date": "2023-06-29T20:58:57Z", "commit_message": "fsck: avoid misleading variable name\n\nWhen reporting a problem, `git fsck` emits a message such as:\n\n    missing blob 1234abcd (:file)\n\nHowever, this can be ambiguous when the problem is detected in the index\nof a worktree other than the one in which `git fsck` was invoked. To\naddress this shortcoming, 592ec63b38 (fsck: mention file path for index\nerrors, 2023-02-24) enhanced the output to mention the path of the index\nwhen the problem is detected in some other worktree:\n\n    missing blob 1234abcd (.git/worktrees/wt/index:file)\n\nUnfortunately, the variable in fsck_index() which controls whether the\nindex path should be shown is misleadingly named \"is_main_index\" which\ncan be misunderstood as referring to the main worktree (i.e. the one\nhousing the .git/ repository) rather than to the current worktree (i.e.\nthe one in which `git fsck` was invoked). Avoid such potential confusion\nby choosing a name more reflective of its actual purpose.\n\nSigned-off-by: Eric Sunshine <sunshine@sunshineco.com>\nAcked-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1876a5ae152018ca3b03540d319c5fc981fd3061", "commit_date": "2023-06-29T19:20:35Z", "commit_message": "t4205: correctly test %(describe:abbrev=...)\n\nThe pretty format %(describe:abbrev=<number>) tells describe to use\nat least <number> digits of the oid to generate the human-readable\nformat of the commit-ish.\n\nThere are three things to test here:\n  - Check that we can describe a commit that is not tagged (that is,\n    for example our HEAD is at least one commit ahead of some reachable\n    commit which is tagged) with at least <number> digits of the oid\n    being used for describing it.\n\n  - Check that when using such a commit-ish, we always use at least\n    <number> digits of the oid to describe it.\n\n  - Check that we can describe a tag. This just gives the name of the\n    tag irrespective of abbrev (abbrev doesn't make sense here).\n\nDo this, instead of the current test which only tests the last case.\n\nHelped-by: Junio C Hamano <gitster@pobox.com>\nMentored-by: Christian Couder <christian.couder@gmail.com>\nMentored-by: Hariom Verma <hariom18599@gmail.com>\nSigned-off-by: Kousik Sanagavarapu <five231003@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2ee045eea103e8818ffe0c4085fad3f6b535c8d6", "commit_date": "2023-06-29T19:20:04Z", "commit_message": "commit -a -m: allow the top-level tree to become empty again\n\nIn 03267e8656c (commit: discard partial cache before (re-)reading it,\n2022-11-08), a memory leak was plugged by discarding any partial index\nbefore re-reading it.\n\nThe problem with this memory leak fix is that it was based on an\nincomplete understanding of the logic introduced in 7168624c353 (Do not\ngenerate full commit log message if it is not going to be used,\n2007-11-28).\n\nThat logic was introduced to add a shortcut when committing without\nediting the commit message interactively. A part of that logic was to\nensure that the index was read into memory:\n\n\tif (!active_nr && read_cache() < 0)\n\t\tdie(...)\n\nTranslation to English: If the index has not yet been read, read it, and\nif that fails, error out.\n\nThat logic was incorrect, though: It used `!active_nr` as an indicator\nthat the index was not yet read. Usually this is not a problem because\nin the vast majority of instances, the index contains at least one\nentry.\n\nAnd it was natural to do it this way because at the time that condition\nwas introduced, the `index_state` structure had no explicit flag to\nindicate that it was initialized: This flag was only introduced in\n913e0e99b6a (unpack_trees(): protect the handcrafted in-core index from\nread_cache(), 2008-08-23), but that commit did not adjust the code path\nwhere no index file was found and a new, pristine index was initialized.\n\nNow, when the index does not contain any entry (which is quite\ncommon in Git's test suite because it starts quite a many repositories\nfrom scratch), subsequent calls to `do_read_index()` will mistake the\nindex not to be initialized, and read it again unnecessarily.\n\nThis is a problem because after initializing the empty index e.g. the\n`cache_tree` in that index could have been initialized before a\nsubsequent call to `do_read_index()` wants to ensure an initialized\nindex. And if that subsequent call mistakes the index not to have been\ninitialized, it would lead to leaked memory.\n\nThe correct fix for that memory leak is to adjust the condition so that\nit does not mistake `active_nr == 0` to mean that the index has not yet\nbeen read.\n\nUsing the `initialized` flag instead, we avoid that mistake, and as a\nbonus we can fix a bug at the same time that was introduced by the\nmemory leak fix: When deleting all tracked files and then asking `git\ncommit -a -m ...` to commit the result, Git would internally update the\nindex, then discard and re-read the index undoing the update, and fail\nto commit anything.\n\nThis fixes https://github.com/git-for-windows/git/issues/4462\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7667f4f0a3c2002940c0b03930597fddc8599277", "commit_date": "2023-06-29T19:20:04Z", "commit_message": "split-index: accept that a base index can be empty\n\nWe are about to fix an ancient bug where `do_read_index()` pretended\nthat the index was not initialized when there are no index entries.\n\nBefore the `index_state` structure gained the `initialized` flag in\n913e0e99b6a (unpack_trees(): protect the handcrafted in-core index from\nread_cache(), 2008-08-23), that was the best we could do (even if it was\nincorrect: it is totally possible to read a Git index file that contains\nno index entries).\n\nThis pattern was repeated also in 998330ac2e7 (read-cache: look for\nshared index files next to the index, too, 2021-08-26), which we fix\nhere by _not_ mistaking an empty base index for a missing\n`sharedindex.*` file.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "866b43e6442f16d0073ae9ce8d79b6cb1161b1a9", "commit_date": "2023-06-29T19:20:04Z", "commit_message": "do_read_index(): always mark index as initialized unless erroring out\n\nIn 913e0e99b6a (unpack_trees(): protect the handcrafted in-core index\nfrom read_cache(), 2008-08-23) a flag was introduced into the\n`index_state` structure to indicate whether it had been initialized (or\nmore correctly: read and parsed).\n\nThere was one code path that was not handled, though: when the index\nfile does not yet exist (but the `must_exist` parameter is set to 0 to\nindicate that that's okay). In this instance, Git wants to go forward\nwith a new, pristine Git index, almost as if the file had existed and\ncontained no index entries or extensions.\n\nSince Git wants to handle this situation the same as if an \"empty\" Git\nindex file existed, let's set the `initialized` flag also in that case.\n\nThis is necessary to prepare for fixing the bug where the condition\n`cache_nr == 0` is incorrectly used as an indicator that the index was\nalready read, and the condition `initialized != 0` needs to be used\ninstead.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d4f28279ada8c8dce6cb13a0c4a13b8d06000af8", "commit_date": "2023-06-29T06:00:10Z", "commit_message": "docs: add git hash-object -t option's possible values\n\nThe summary under the NAME section for git hash-object can mislead\nreaders to conclude that the command can only be used to create blobs,\nwhereas the description makes it clear that it can be used to create\nobjects, not just blobs. Let's clarify the one-line summary.\n\nFurther, the description for the option -t does not list out other types\nthat can be used when creating objects. Let's make this explicit by\nlisting out the different object types.\n\nSigned-off-by: John Cai <johncai86@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6e8e7981eb86e2c19401825dbdb55d5860d11313", "commit_date": "2023-06-28T21:06:40Z", "commit_message": "config: pass source to config_parser_event_fn_t\n\n..so that the callback can use a \"struct config_source\" parameter\ninstead of \"config_reader.source\". \"struct config_source\" is internal to\nconfig.c, so we are adding a pointer to a struct defined in config.c\ninto a public function signature defined in config.h, but this is okay\nbecause this function has only ever been (and probably ever will be)\nused internally by config.c.\n\nAs a result, the_reader isn't used anywhere, so \"struct config_reader\"\nis obsolete (it was only intended to be used with the_reader). Remove\nthem.\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "908857a9f8a63c7d8fee1bd5f52b1aa1cf3434de", "commit_date": "2023-06-28T21:06:40Z", "commit_message": "config: add kvi.path, use it to evaluate includes\n\nInclude directives are evaluated using the path of the config file. To\nreduce the dependence on \"config_reader.source\", add a new\n\"key_value_info.path\" member and use that instead of\n\"config_source.path\". This allows us to remove a \"struct config_reader\n*\" field from \"struct config_include_data\", which will subsequently\nallow us to remove \"struct config_reader\" entirely.\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f6c213a0cbf7071c845eef0afa4bc5f9c4883e51", "commit_date": "2023-06-28T21:06:40Z", "commit_message": "config.c: remove config_reader from configsets\n\nRemove the last usage of \"struct config_reader\" from configsets by\ncopying the \"kvi\" arg instead of recomputing \"kvi\" from\nconfig_reader.source. Since we no longer need to pass both \"struct\nconfig_reader\" and \"struct config_set\" in a single \"void *cb\", remove\n\"struct configset_add_data\" too.\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8868b1ebfb8274a3ef90e1ba69ed45be94f6c3fb", "commit_date": "2023-06-28T21:06:40Z", "commit_message": "config: pass kvi to die_bad_number()\n\nPlumb \"struct key_value_info\" through all code paths that end in\ndie_bad_number(), which lets us remove the helper functions that read\nanalogous values from \"struct config_reader\". As a result, nothing reads\nconfig_reader.config_kvi any more, so remove that too.\n\nIn config.c, this requires changing the signature of\ngit_configset_get_value() to 'return' \"kvi\" in an out parameter so that\ngit_configset_get_<type>() can pass it to git_config_<type>(). Only\nnumeric types will use \"kvi\", so for non-numeric types (e.g.\ngit_configset_get_string()), pass NULL to indicate that the out\nparameter isn't needed.\n\nOutside of config.c, config callbacks now need to pass \"ctx->kvi\" to any\nof the git_config_<type>() functions that parse a config string into a\nnumber type. Included is a .cocci patch to make that refactor.\n\nThe only exceptional case is builtin/config.c, where git_config_<type>()\nis called outside of a config callback (namely, on user-provided input),\nso config source information has never been available. In this case,\ndie_bad_number() defaults to a generic, but perfectly descriptive\nmessage. Let's provide a safe, non-NULL for \"kvi\" anyway, but make sure\nnot to change the message.\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc9020849773393e47c37c2834a5582374b55ecc", "commit_date": "2023-06-28T21:06:39Z", "commit_message": "trace2: plumb config kvi\n\nThere is a code path starting from trace2_def_param_fl() that eventually\ncalls current_config_scope(), and thus it needs to have \"kvi\" plumbed\nthrough it. Additional plumbing is also needed to get \"kvi\" to\ntrace2_def_param_fl(), which gets called by two code paths:\n\n- Through tr2_cfg_cb(), which is a config callback, so it trivially\n  receives \"kvi\" via the \"struct config_context ctx\" parameter.\n\n- Through tr2_list_env_vars_fl(), which is a high level function that\n  lists environment variables for tracing. This has been secretly\n  behaving like git_config_from_parameters() (in that it parses config\n  from environment variables/the CLI), but does not set config source\n  information.\n\n  Teach tr2_list_env_vars_fl() to be well-behaved by using\n  kvi_from_param(), which is used elsewhere for CLI/environment\n  variable-based config.\n\nAs a result, current_config_scope() has no more callers, so remove it.\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "26b669324bb3ef8fd15387815bc020f08d0b4e7b", "commit_date": "2023-06-28T21:06:39Z", "commit_message": "config.c: pass ctx with CLI config\n\nPass config_context when parsing CLI config. To provide the .kvi member,\nrefactor out kvi_from_param() from the logic that caches CLI config in\nconfigsets. Now that config_context and config_context.kvi is always\npresent when config machinery calls config callbacks, plumb \"kvi\" so\nthat we can remove all calls of current_config_scope() except for\ntrace2/*.c (which will be handled in a later commit), and remove all\nother current_config_*() (the functions themselves and their calls).\nNote that this results in .kvi containing a different, more complete\nset of information than the mocked up \"struct config_source\" in\ngit_config_from_parameters().\n\nPlumbing \"kvi\" reveals a few places where we've been doing the wrong\nthing:\n\n* git_config_parse_parameter() hasn't been setting config source\n  information, so plumb \"kvi\" there too.\n\n* Several sites in builtin/config.c have been calling current_config_*()\n  functions outside of config callbacks (indirectly, via the\n  format_config() helper), which means they're reading state that isn't\n  set correctly:\n\n  * \"git config --get-urlmatch --show-scope\" iterates config to collect\n    values, but then attempts to display the scope after config\n    iteration, causing the \"unknown\" scope to be shown instead of the\n    config file's scope. It's clear that this wasn't intended: we knew\n    that \"--get-urlmatch\" couldn't show config source metadata, which is\n    why \"--show-origin\" was marked incompatible with \"--get-urlmatch\"\n    when it was introduced [1]. It was most likely a mistake that we\n    allowed \"--show-scope\" to sneak through.\n\n    Fix this by copying the \"kvi\" value in the collection phase so that\n    it can be read back later. This means that we can now support \"git\n    config --get-urlmatch --show-origin\", but that is left unchanged\n    for now.\n\n  * \"git config --default\" doesn't have config source metadata when\n    displaying the default value, so \"--show-scope\" also results in\n    \"unknown\", and \"--show-origin\" results in a BUG(). Fix this by\n    treating the default value as if it came from the command line (e.g.\n    like we do with \"git -c\" or \"git config --file\"), using\n    kvi_from_param().\n\n[1] https://lore.kernel.org/git/20160205112001.GA13397@sigill.intra.peff.net/\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "809d868061c5e55e9b3bd59a4118628318eb46e9", "commit_date": "2023-06-28T21:06:39Z", "commit_message": "config: pass ctx with config files\n\nPass config_context to config_callbacks when parsing config files. To\nprovide the .kvi member, refactor out the configset logic that caches\n\"struct config_source\" and \"enum config_scope\" as a \"struct\nkey_value_info\". Make the \"enum config_scope\" available to the config\nfile machinery by plumbing an additional arg through\ngit_config_from_file_with_options().\n\nWe do not exercise ctx yet because the remaining current_config_*()\ncallers may be used with config_with_options(), which may read config\nfrom parameters, but parameters don't pass ctx yet.\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6021e1d1580169532512772afbb86996f717f4ae", "commit_date": "2023-06-28T21:06:39Z", "commit_message": "config.c: pass ctx in configsets\n\nPass config_context to config callbacks in configset_iter(), trivially\nsetting the .kvi member to the cached key_value_info. Then, in config\ncallbacks that are only used with configsets, use the .kvi member to\nreplace calls to current_config_*(), and delete current_config_line()\nbecause it has no remaining callers.\n\nThis leaves builtin/config.c and config.c as the only remaining users of\ncurrent_config_*().\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a4e7e317f8f27f861321e6eb08b9c8c0f3ab570c", "commit_date": "2023-06-28T21:06:39Z", "commit_message": "config: add ctx arg to config_fn_t\n\nAdd a new \"const struct config_context *ctx\" arg to config_fn_t to hold\nadditional information about the config iteration operation.\nconfig_context has a \"struct key_value_info kvi\" member that holds\nmetadata about the config source being read (e.g. what kind of config\nsource it is, the filename, etc). In this series, we're only interested\nin .kvi, so we could have just used \"struct key_value_info\" as an arg,\nbut config_context makes it possible to add/adjust members in the future\nwithout changing the config_fn_t signature. We could also consider other\nways of organizing the args (e.g. moving the config name and value into\nconfig_context or key_value_info), but in my experiments, the\nincremental benefit doesn't justify the added complexity (e.g. a\nconfig_fn_t will sometimes invoke another config_fn_t but with a\ndifferent config value).\n\nIn subsequent commits, the .kvi member will replace the global \"struct\nconfig_reader\" in config.c, making config iteration a global-free\noperation. It requires much more work for the machinery to provide\nmeaningful values of .kvi, so for now, merely change the signature and\ncall sites, pass NULL as a placeholder value, and don't rely on the arg\nin any meaningful way.\n\nMost of the changes are performed by\ncontrib/coccinelle/config_fn_ctx.pending.cocci, which, for every\nconfig_fn_t:\n\n- Modifies the signature to accept \"const struct config_context *ctx\"\n- Passes \"ctx\" to any inner config_fn_t, if needed\n- Adds UNUSED attributes to \"ctx\", if needed\n\nMost config_fn_t instances are easily identified by seeing if they are\ncalled by the various config functions. Most of the remaining ones are\nmanually named in the .cocci patch. Manual cleanups are still needed,\nbut the majority of it is trivial; it's either adjusting config_fn_t\nthat the .cocci patch didn't catch, or adding forward declarations of\n\"struct config_context ctx\" to make the signatures make sense.\n\nThe non-trivial changes are in cases where we are invoking a config_fn_t\noutside of config machinery, and we now need to decide what value of\n\"ctx\" to pass. These cases are:\n\n- trace2/tr2_cfg.c:tr2_cfg_set_fl()\n\n  This is indirectly called by git_config_set() so that the trace2\n  machinery can notice the new config values and update its settings\n  using the tr2 config parsing function, i.e. tr2_cfg_cb().\n\n- builtin/checkout.c:checkout_main()\n\n  This calls git_xmerge_config() as a shorthand for parsing a CLI arg.\n  This might be worth refactoring away in the future, since\n  git_xmerge_config() can call git_default_config(), which can do much\n  more than just parsing.\n\nHandle them by creating a KVI_INIT macro that initializes \"struct\nkey_value_info\" to a reasonable default, and use that to construct the\n\"ctx\" arg.\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e0f9a51c327b54216f85f4569ea54da8a5092802", "commit_date": "2023-06-28T21:06:38Z", "commit_message": "urlmatch.h: use config_fn_t type\n\nThese are actually used as config callbacks, so use the typedef-ed type\nand make future refactors easier.\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "97eeeea2dc069a1fcb03db99ef3810ebe3056188", "commit_date": "2023-06-28T21:06:38Z", "commit_message": "config: inline git_color_default_config\n\ngit_color_default_config() is a shorthand for calling two other config\ncallbacks. There are no other non-static functions that do this and it\nwill complicate our refactoring of config_fn_t so inline it instead.\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a096a889f43a40223bae89efa7d1896e0d4c37cb", "commit_date": "2023-06-27T22:48:55Z", "commit_message": "fix cherry-pick/revert status when doing multiple commits\n\nThe status report for an in-progress cherry-pick does not show the\ncurrent commit if the cherry-pick happens as part of a series of\nmultiple commits:\n\n $ git cherry-pick <commit1> <commit2>\n < one of the cherry-picks fails to merge clean >\n Cherry-pick currently in progress.\n  (run \"git cherry-pick --continue\" to continue)\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\n $ git status\n On branch <branch>\n Your branch is ahead of '<upstream>' by 1 commit.\n   (use \"git push\" to publish your local commits)\n\n Cherry-pick currently in progress.\n   (run \"git cherry-pick --continue\" to continue)\n   (use \"git cherry-pick --skip\" to skip this patch)\n   (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nThe show_cherry_pick_in_progress() function prints \"Cherry-pick\ncurrently in progress\". That function does have a more verbose print\nbased on whether the cherry_pick_head_oid is null or not. If it is not\nnull, then a more helpful message including which commit is actually\nbeing picked is displayed.\n\nThe introduction of the \"Cherry-pick currently in progress\" message\ncomes from 4a72486de97b (\"fix cherry-pick/revert status after commit\",\n2019-04-17). This commit modified wt_status_get_state() in order to\ndetect that a cherry-pick was in progress even if the user has used `git\ncommit` in the middle of the sequence.\n\nThe check used to detect this is the call to sequencer_get_last_command.\nIf the sequencer indicates that the lass command was a REPLAY_PICK, then\nthe state->cherry_pick_in_progress is set to 1 and the\ncherry_pick_head_oid is initialized to the null_oid. Similar behavior is\ndone for the case of REPLAY_REVERT.\n\nIt happens that this call of sequencer_get_last_command will always\nreport the action even if the user hasn't interrupted anything. Thus,\nduring a range of cherry-picks or reverts, the cherry_pick_head_oid and\nrevert_head_oid will always be overwritten and initialized to the null\noid.\n\nThis results in status always displaying the terse message which does\nnot include commit information.\n\nFix this by adding an additional check so that we do not re-initialize\nthe cherry_pick_head_oid or revert_head_oid if we have already set the\ncherry_pick_in_progress or revert_in_progress bits. This ensures that\ngit status will display the more helpful information when its available.\nAdd a test case covering this behavior.\n\nSigned-off-by: Jacob Keller <jacob.keller@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ed773a18c6e92ae4f4e016f4529d6bdfbbbd56d8", "commit_date": "2023-06-27T18:31:06Z", "commit_message": "var: add config file locations\n\nMuch like with attributes files, sometimes programs would like to know\nthe location of configuration files at the global or system levels.\nHowever, it isn't always clear where these may live, especially for the\nsystem file, which may have been hard-coded at compile time or computed\ndynamically based on the runtime prefix.\n\nSince other parties cannot intuitively know how Git was compiled and\nwhere it looks for these files, help them by providing variables that\ncan be queried.  Because we have multiple paths for global config\nvalues, print them in order from highest to lowest priority, and be sure\nto split on newlines so that \"git var -l\" produces two entries for the\nglobal value.\n\nHowever, be careful not to split all values on newlines, since our\neditor values could well contain such characters, and we don't want to\nsplit them in such a case.\n\nNote in the documentation that some values may contain multiple paths\nand that callers should be prepared for that fact.  This helps people\nwrite code that will continue to work in the event we allow multiple\nitems elsewhere in the future.\n\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "576a37fccbf2a46d98a6dd367dbb3d1636e62f57", "commit_date": "2023-06-27T18:31:06Z", "commit_message": "var: add attributes files locations\n\nCurrently, there are some programs which would like to read and parse\nthe gitattributes files at the global or system levels.  However, it's\nnot always obvious where these files live, especially for the system\nfile, which may have been hard-coded at compile time or computed\ndynamically based on the runtime prefix.\n\nIt's not reasonable to expect all callers of Git to intuitively know\nwhere the Git distributor or user has configured these locations to\nbe, so add some entries to allow us to determine their location.  Honor\nthe GIT_ATTR_NOSYSTEM environment variable if one is specified.  Expose\nthe accessor functions in a way that we can reuse them from within the\nvar code.\n\nIn order to make our paths consistent on Windows and also use the same\nform as paths use in \"git rev-parse\", let's normalize the path before we\nreturn it.  This results in Windows-style paths that use slashes, which\nis convenient for making our tests function in a consistent way across\nplatforms.  Note that this requires that some of our values be freed, so\nlet's add a flag about whether the value needs to be freed and use it\naccordingly.\n\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "15780bb4f0cb07624ca6bac3c430ef07e9501663", "commit_date": "2023-06-27T18:31:06Z", "commit_message": "attr: expose and rename accessor functions\n\nRight now, the functions which determine the current system and global\ngitattributes files are not exposed.  We'd like to use them in a future\ncommit, but they're not ideally named.  Rename them to something more\nsuitable as a public interface, expose them, and document them.\n\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cdd489eaf9cd3c46c30b485601e2bcb989586274", "commit_date": "2023-06-27T18:31:06Z", "commit_message": "var: adjust memory allocation for strings\n\nRight now, all of our values are constants whose allocation is managed\nelsewhere.  However, in the future, we'll have some variables whose\nmemory we will need to free.  To keep things consistent, let's make each\nof our functions allocate its own memory and make the caller responsible\nfor freeing it.\n\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f74c90dcf7ed8ef7994ab583de089dba2a2b1a22", "commit_date": "2023-06-27T18:31:06Z", "commit_message": "var: format variable structure with C99 initializers\n\nRight now, we have only two items in our variable struct.  However, in\nthe future, we're going to add two more items.  To help keep our diffs\nnice and tidy and make this structure easier to read, switch to use\nC99-style initializers for our data.\n\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1e6572122702cbf0e3b6d3226f73e6b8b45e6e37", "commit_date": "2023-06-27T18:31:05Z", "commit_message": "var: add support for listing the shell\n\nOn most Unix systems, finding a suitable shell is easy: one simply uses\n\"sh\" with an appropriate PATH value.  However, in many Windows\nenvironments, the shell is shipped alongside Git, and it may or may not\nbe in PATH, even if Git is.\n\nIn such an environment, it can be very helpful to query Git for the\nshell it's using, since other tools may want to use the same shell as\nwell.  To help them out, let's add a variable, GIT_SHELL_PATH, that\npoints to the location of the shell.\n\nOn Unix, we know our shell must be executable to be functional, so\nassume that the distributor has correctly configured their environment,\nand use that as a basic test.  On Git for Windows, we know that our\nshell will be one of a few fixed values, all of which end in \"sh\" (such\nas \"bash\").  This seems like it might be a nice test on Unix as well,\nsince it is customary for all shells to end in \"sh\", but there probably\nexist such systems that don't have such a configuration, so be careful\nhere not to break them.\n\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d6546af75c3cda2815f2e4d5322dd7a41cc0963b", "commit_date": "2023-06-27T18:31:05Z", "commit_message": "t: add a function to check executable bit\n\nIn line with our other helper functions for paths, let's add a function\nto check whether a path is executable, and if not, print a suitable\nerror message.  Document this function, and note that it must only be\nused under the POSIXPERM prerequisite, since it doesn't otherwise work\non Windows.\n\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4db16f58c7720257eea9ffb7d4e76809f2c403f0", "commit_date": "2023-06-27T18:31:05Z", "commit_message": "var: mark unused parameters in git_var callbacks\n\nWe abstract the set of variables into a table, with a \"read\" callback to\nprovide the value of each. Each callback takes a \"flag\" argument, but\nmost callbacks don't make use of it.\n\nThis flag is a bit odd. It may be set to IDENT_STRICT, which make sense\nfor ident-based callbacks, but is just confusing for things like\nGIT_EDITOR.\n\nAt first glance, it seems like this is just a hack to let us directly\nstick the generic git_committer_info() and git_author_info() functions\ninto our table. And we'd be better off to wrap them with local functions\nwhich pass IDENT_STRICT, and have our callbacks take no option at all.\n\nBut that doesn't quite work. We pass IDENT_STRICT when the caller asks\nfor a specific variable, but otherwise do not (so that \"git var -l\" does\nnot bail if the committer ident cannot be formed).\n\nSo we really do need to pass in the flag to each invocation, even if the\nindividual callback doesn't care about it. Let's mark the unused ones so\nthat -Wunused-parameter does not complain. And while we're here, let's\nrename them so that it's clear that the flag values we get will be from\nthe IDENT_* set. That may prevent confusion for future readers of the\ncode.\n\nAnother option would be to define our own local \"strict\" flag for the\ncallbacks, and then have wrappers that translate that to IDENT_STRICT\nwhere it matters. But that would be more boilerplate for little gain\n(most functions would still ignore the \"strict\" flag anyway).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a53f43f9005e8a6fd4c5a6733c69b46199c7bb75", "commit_date": "2023-06-26T19:07:47Z", "commit_message": "config: don't BUG when both kvi and source are set\n\nWhen iterating through config, we read config source metadata from\nglobal values - either a \"struct config_source + enum config_scope\"\nor a \"struct key_value_info\", using the current_config* functions. Prior\nto the series starting from 0c60285147 (config.c: create config_reader\nand the_reader, 2023-03-28), we weren't very picky about which values we\nshould read in which situation; we did note that both groups of values\ngenerally shouldn't be set together, but if both were set,\ncurrent_config* preferentially reads key_value_info. When that series\nadded more structure, we enforced that either the former (when parsing a\nconfig source) can be set, or the latter (when iterating a config set),\nbut *never* both at the same time. See 9828453ff0 (config.c: remove\ncurrent_config_kvi, 2023-03-28) and 5cdf18e7cd (config.c: remove\ncurrent_parsing_scope, 2023-03-28).\n\nThat was a good simplifying constraint that helped us reason about the\nglobal state, but it turns out that there is at least one situation\nwhere we need both to be set at the same time: in a blobless partial\nclone where .gitmodules is missing. \"git fetch\" in such a repo will\nstart a config parse over .gitmodules (setting the config_source), and\nGit will attempt to lazy-fetch it from the promisor remote. However,\nwhen we try to read the promisor configuration, we start iterating a\nconfig set (setting the key_value_info), and we BUG() out because that's\nnot allowed any more.\n\nTeaching config_reader to gracefully handle this is somewhat\ncomplicated, but fortunately, there are proposed changes to the config.c\nmachinery to get rid of this global state, and make the BUG() obsolete\n[1]. We should rely on that as the eventual solution, and avoid doing\nyet another refactor in the meantime.\n\nTherefore, fix the bug by removing the BUG() check. We're reverting to\nan older, less safe state, but that's generally okay since\nkey_value_info is always preferentially read, so we'd always read the\ncorrect values when we iterate a config set in the middle of a config\nparse (like we are here). The reverse would be wrong, but extremely\nunlikely to happen since very few callers parse config without going\nthrough a config set.\n\n[1] https://lore.kernel.org/git/pull.1497.v3.git.git.1687290231.gitgitgadget@gmail.com\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0a868031edee0f7a38b42e13c8017d6cbbb4af1b", "commit_date": "2023-06-26T16:40:14Z", "commit_message": "diff.c: mention completion above add_diff_options\n\nAdd a comment on top of add_diff_options, where common diff options are\nlisted, mentioning __git_diff_common_options in the completion script,\nin the hope that contributors update it when they add new diff flags.\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "55245d669a6c427efd9f7c1782105bea4e97a431", "commit_date": "2023-06-26T16:40:14Z", "commit_message": "completion: complete --remerge-diff\n\n--remerge-diff only makes sense for 'git log' and 'git show', so add it\nto __git_log_show_options which is referenced in the completion for\nthese two commands.\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "98aaeb2f775949faac4840ba90b10d8cc328a71b", "commit_date": "2023-06-26T16:40:14Z", "commit_message": "completion: complete --diff-merges, its options and --no-diff-merges\n\nThe flags --[no-]diff-merges only make sense for 'git log' and 'git\nshow', so add a new variable __git_log_show_options for options only\nrelevant to these two commands, and add them there. Also add\n__git_diff_merges_opts and list the accepted values for --diff-merges,\nand use it in _git_log and _git_show.\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d520d98382d3ad7071bc33e2ea2204a4c64ba7bb", "commit_date": "2023-06-26T16:40:13Z", "commit_message": "completion: move --pickaxe-{all,regex} to __git_diff_common_options\n\nThe options --pickaxe-all and --pickaxe-regex are listed in\n__git_diff_difftool_options and repeated in _git_log. Move them to\n__git_diff_common_options instead, which makes them available\nautomatically in the completion of other commands referencing this\nvariable.\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "da260f61889f0cda3267ca09db3fe48794f52a26", "commit_date": "2023-06-26T16:40:13Z", "commit_message": "completion: complete --ws-error-highlight\n\nAdd --ws-error-highlight= to the list in __git_diff_common_options, and\nadd the accepted values in a new list __git_ws_error_highlight_opts.\n\nUse __git_ws_error_highlight_opts in _git_diff, _git_log and _git_show\nto offer the accepted values.\n\nAs noted in fd0bc17557 (completion: add diff --color-moved[-ws],\n2020-02-21), there is no easy way to offer completion for several\ncomma-separated values, so this is limited to completing a single\nvalue.\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3b698111d5324236c7af330b0c02698f30d15d19", "commit_date": "2023-06-26T16:40:13Z", "commit_message": "completion: complete --unified\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b5c3edc17ea10f0946ca0876028b077ef51509c3", "commit_date": "2023-06-26T16:40:13Z", "commit_message": "completion: complete --output-indicator-{context,new,old}\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8fe2bd79055d9dbff3f798abfde61408d55f9ab8", "commit_date": "2023-06-26T16:40:13Z", "commit_message": "completion: complete --output\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5727be06c6df7aca70dd02636c7e3d619febbd1f", "commit_date": "2023-06-26T16:40:13Z", "commit_message": "completion: complete --no-stat\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ffcccc62b02ff41d5b436ea7cbd852bb2bd83bf8", "commit_date": "2023-06-26T16:40:12Z", "commit_message": "completion: complete --no-relative\n\nAdd --no-relative to __git_diff_common_options in the completion script,\nand move --relative from __git_diff_difftool_options to\n__git_diff_common_options since it applies to more than just diff and\ndifftool.\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a4d45324614ab96754636e545fa054dac09d9f5", "commit_date": "2023-06-26T16:40:12Z", "commit_message": "completion: complete --line-prefix\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "08a9a6d615ac74324e7f0e9a97a17e38f799c5ec", "commit_date": "2023-06-26T16:40:12Z", "commit_message": "completion: complete --ita-invisible-in-index and --ita-visible-in-index\n\nThe options --ita-invisible-in-index and --ita-visible-in-index are\nlisted in diff-options.txt and so are included in the documentation of\ncommands which include this file (diff, diff-*, log, show, format-patch)\nbut they only make sense for diffs relating to the index. As such, add\nthem to '__git_diff_difftool_options' instead of\n'__git_diff_common_options' since it makes more sense to add them there.\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8885532abb0d34e5e7d77b255df53914361b64d9", "commit_date": "2023-06-26T16:40:12Z", "commit_message": "completion: complete --irreversible-delete\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b454ed2c5df3f7ed0648fcb33f8104b7f4eea6af", "commit_date": "2023-06-26T16:40:11Z", "commit_message": "completion: complete --ignore-matching-lines\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "57159d5daae7c1e9e6aef01de03bfeb4cff08db0", "commit_date": "2023-06-26T16:40:11Z", "commit_message": "completion: complete --function-context\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1eb638a5db8e65620f3b316482c526708fc0797a", "commit_date": "2023-06-26T16:40:11Z", "commit_message": "completion: complete --find-renames\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "04d430ff8d23f69f046513e62b6ae27ea95e9e5f", "commit_date": "2023-06-26T16:40:11Z", "commit_message": "completion: complete --find-object\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2f677ad3482e2d99e143292a724483737343b343", "commit_date": "2023-06-26T16:40:11Z", "commit_message": "completion: complete --find-copies\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a4d13aaf220a22dc4bd1192ace4694a26ea0c064", "commit_date": "2023-06-26T16:40:11Z", "commit_message": "completion: complete --default-prefix\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fd9058649a9c3e80ce726d419fe9ae49ee18b538", "commit_date": "2023-06-26T16:40:10Z", "commit_message": "completion: complete --compact-summary\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "de4898d7d8b9674d14a5f12ac567d033e378326c", "commit_date": "2023-06-26T16:40:10Z", "commit_message": "completion: complete --combined-all-paths\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "93ec6111a6460dd5acf52dbdd7bbfe8ec0c49598", "commit_date": "2023-06-26T16:40:10Z", "commit_message": "completion: complete --cc\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6a38b0a0dc4e874bb3b1fb2bfe5aa04b140f9a96", "commit_date": "2023-06-26T16:40:10Z", "commit_message": "completion: complete --break-rewrites\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0b9e1537832e22b17741fb2fc5bfa28fafd6dc9", "commit_date": "2023-06-26T16:40:10Z", "commit_message": "completion: add comments describing __git_diff_* globals\n\nAdd descriptive comments for '__git_diff_common_options' and\n'__git_diff_difftool_options', so that it is clearer when looking at\nthese variables to know in which command's completion they are used.\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a9e066fa63149291a55f383cfa113d8bdbdaa6b3", "commit_date": "2023-06-26T16:29:50Z", "commit_message": "The fifth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e224f26892ffc3e2cb98fd68c6f74dc3d650ffc8", "commit_date": "2023-06-26T16:29:50Z", "commit_message": "Merge branch 'tb/collect-pack-filenames-fix'\n\nAvoid breakage of \"git pack-objects --cruft\" due to inconsistency\nbetween the way the code enumerates packfiles in the repository.\n\n* tb/collect-pack-filenames-fix:\n  builtin/repack.c: only collect fully-formed packs", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8d5c5a05d7abd67f8b667c888fe17783e1d676a5", "commit_date": "2023-06-26T16:29:49Z", "commit_message": "Merge branch 'jk/commit-use-no-divider-with-interpret-trailers'\n\nWhen \"git commit --trailer=...\" invokes the interpret-trailers\nmachinery, it knows what it feeds to interpret-trailers is a full\nlog message without any patch, but failed to express that by\npassing the \"--no-divider\" option, which has been corrected.\n\n* jk/commit-use-no-divider-with-interpret-trailers:\n  commit: pass --no-divider to interpret-trailers", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "42612e18d2e7c002054b677df791b848b62c1628", "commit_date": "2023-06-26T15:58:50Z", "commit_message": "apply: improve error messages when reading patch\n\nCommit f1c0e3946e (apply: reject patches larger than ~1 GiB, 2022-10-25)\nadded a limit on the size of patch that apply will process to avoid\ninteger overflows. The implementation re-used the existing error message\nfor when we are unable to read the patch. This is unfortunate because (a) it\ndoes not signal to the user that the patch is being rejected because it\nis too large and (b) it uses error_errno() without setting errno.\n\nThis patch adds a specific error message for the case when a patch is\ntoo large. It also updates the existing message to make it clearer that\nit is the patch that cannot be read rather than any other file and marks\nboth messages for translation. The \"git apply\" prefix is also dropped to\nmatch most of the rest of the error messages in apply.c (there are still\na few error messages that prefixed with \"git apply\" and are not marked\nfor translation after this patch). The test added in f1c0e3946e is\nupdated accordingly.\n\nReported-by: Premek Vysoky <Premek.Vysoky@microsoft.com>\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "25d59524bbc79b4f4560fca1b9b22c8c36780636", "commit_date": "2023-06-24T22:50:41Z", "commit_message": "t7701: make annotated tag unreachable\n\nIn 4dc16e2cb0 (gc: introduce `gc.recentObjectsHook`, 2023-06-07), we\nadded tests to ensure that prune-able (i.e. unreachable and with mtime\nolder than the cutoff) objects which are marked as recent via the new\n`gc.recentObjectsHook` configuration are unpacked as loose with\n`--unpack-unreachable`.\n\nIn that test, we also ensure that objects which are reachable from other\nunreachable objects which were *not* pruned are kept as well, regardless\nof their mtimes. For this, we use an annotated tag pointing at a blob\n($obj2) which would otherwise be pruned.\n\nBut after pruning, that object is kept around for two reasons. One, the\ntag object's mtime wasn't adjusted to be beyond the 1-hour cutoff, so it\nwould be kept as due to its recency regardless. The other reason is\nbecause the tag itself is reachable.\n\nUse mktag to write the tag object directly without pointing a reference\nat it, and adjust the mtime of the tag object to be older than the\ncutoff to ensure that our `gc.recentObjectsHook` configuration is\nworking as intended.\n\nNoticed-by: Jeff King <peff@peff.net>\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "94486b6763c29144c60932829a65fec0597e17b3", "commit_date": "2023-06-24T22:05:06Z", "commit_message": "Merge branch 'maint'\n\n* maint:\n  http: handle both \"h2\" and \"h2h3\" in curl info lines", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb7d80edcae482f4fa5d4be0227dc3054734e5f3", "commit_date": "2023-06-24T22:04:48Z", "commit_message": "Merge branch 'jk/redact-h2h3-headers-fix' into maint-2.41\n\n* jk/redact-h2h3-headers-fix:\n  http: handle both \"h2\" and \"h2h3\" in curl info lines", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "34d765e736e015f5c4790db2c0a1d3ddbd4bd3e9", "commit_date": "2023-06-23T23:34:40Z", "commit_message": "t6406: skip \"external merge driver getting killed by a signal\" test on Windows\n\nThe run_command() on the platform does not seem to report death by\nsignal as the caller expects.  For now, skip the test on Windows.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6ff334181cfb6485d3ba50843038209a2a253907", "commit_date": "2023-06-23T18:21:28Z", "commit_message": "The fourth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4ee088deb83e2a4a78ac3882168b3e8fadd4f541", "commit_date": "2023-06-23T18:21:17Z", "commit_message": "Merge branch 'js/defeat-ignore-submodules-config-with-explicit-addition'\n\nEven when diff.ignoreSubmodules tells us to ignore submodule\nchanges, \"git commit\" with an index that already records changes to\nsubmodules should include the submodule changes in the resulting\ncommit, but it did not.\n\n* js/defeat-ignore-submodules-config-with-explicit-addition:\n  diff-lib: honor override_submodule_config flag bit", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4e4fc50cf733bb0071e43ea128b13439b93975d2", "commit_date": "2023-06-23T18:21:17Z", "commit_message": "Merge branch 'rj/leakfixes'\n\nLeakfixes\n\n* rj/leakfixes:\n  tests: mark as passing with SANITIZE=leak\n  config: fix a leak in git_config_copy_or_rename_section_in_file\n  branch: fix a leak in cmd_branch\n  branch: fix a leak in setup_tracking\n  rev-parse: fix a leak with --abbrev-ref\n  branch: fix a leak in setup_tracking\n  branch: fix a leak in check_tracking_branch\n  branch: fix a leak in inherit_tracking\n  branch: fix a leak in dwim_and_setup_tracking\n  remote: fix a leak in query_matches_negative_refspec\n  config: fix a leak in git_config_copy_or_rename_section_in_file", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1d15be363ccf0ff4337886568087d0467c93c9a9", "commit_date": "2023-06-23T18:21:17Z", "commit_message": "Merge branch 'tb/open-midx-bitmap-fallback'\n\nGracefully deal with a stale MIDX file that lists a packfile that\nno longer exists.\n\n* tb/open-midx-bitmap-fallback:\n  pack-bitmap.c: gracefully degrade on failure to load MIDX'd pack", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "58ecb2e3838b1dfd9c3705de88dcd491fa4e44fc", "commit_date": "2023-06-23T18:21:17Z", "commit_message": "Merge branch 'tb/gc-recent-object-hook'\n\n\"git pack-objects\" learned to invoke a new hook program that\nenumerates extra objects to be used as anchoring points to keep\notherwise unreachable objects in cruft packs.\n\n* tb/gc-recent-object-hook:\n  gc: introduce `gc.recentObjectsHook`\n  reachable.c: extract `obj_is_recent()`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "891e631401268ba513d903e0646c2967d629a8d9", "commit_date": "2023-06-23T18:21:17Z", "commit_message": "Merge branch 'tz/lib-gpg-prereq-fix'\n\nTest update.\n\n* tz/lib-gpg-prereq-fix:\n  t/lib-gpg: require GPGSSH for GPGSSH_VERIFYTIME prereq", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a813d9e23962ba5c922b486757d69ae582adea4d", "commit_date": "2023-06-23T18:21:16Z", "commit_message": "Merge branch 'sl/worktree-sparse'\n\n\"git worktree\" learned to work better with sparse index feature.\n\n* sl/worktree-sparse:\n  worktree: integrate with sparse-index", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dcedba13b38978f56e5b703bfaff379a86d6e52f", "commit_date": "2023-06-23T18:21:16Z", "commit_message": "Merge branch 'rs/run-command-exec-error-on-noent'\n\nSimplify error message when run-command fails to start a command.\n\n* rs/run-command-exec-error-on-noent:\n  run-command: report exec error even on ENOENT\n  t1800: loosen matching of error message for bad shebang", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5ee8fcdabc25ade1f8c5295575a1c20ab4f6f347", "commit_date": "2023-06-23T18:21:16Z", "commit_message": "Merge branch 'mh/credential-erase-improvements'\n\n* mh/credential-erase-improvements:\n  credential: erase all matching credentials\n  credential: avoid erasing distinct password", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "01202f5f68315fec7780a47b8b761c9ca7eafee4", "commit_date": "2023-06-23T18:21:16Z", "commit_message": "Merge branch 'gc/discover-not-setup'\n\ndiscover_git_directory() no longer touches the_repository.\n\n* gc/discover-not-setup:\n  setup.c: don't setup in discover_git_directory()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0bfa463d37834304f127b22bbd77fd8f2eda2fa6", "commit_date": "2023-06-22T23:29:07Z", "commit_message": "The third batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5fd4e2f6d106b1f65b69fdd11172d6d53f5dfce6", "commit_date": "2023-06-22T23:29:07Z", "commit_message": "Merge branch 'jt/doc-use-octal-with-printf'\n\nSuggest to refrain from using hex literals that are non-portable\nwhen writing printf(1) format strings.\n\n* jt/doc-use-octal-with-printf:\n  CodingGuidelines: use octal escapes, not hex", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e0e8a2dfa05d66562688804ec38939d8bb56a8fd", "commit_date": "2023-06-22T23:29:07Z", "commit_message": "Merge branch 'rs/doc-ls-tree-hex-literal'\n\nDoc update.\n\n* rs/doc-ls-tree-hex-literal:\n  ls-tree: fix documentation of %x format placeholder", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad6d37ea7e9e9e24187462b0f25a74e3b9c5961d", "commit_date": "2023-06-22T23:29:06Z", "commit_message": "Merge branch 'la/docs-typofixes'\n\nTypofixes.\n\n* la/docs-typofixes:\n  docs: typofixes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1bff6a97fef071b49b30f730ba138c16ef0ff93c", "commit_date": "2023-06-22T23:29:06Z", "commit_message": "Merge branch 'as/dtype-compilation-fix'\n\nCompilation fix for platforms without D_TYPE in struct dirent.\n\n* as/dtype-compilation-fix:\n  statinfo.h: move DTYPE defines from dir.h", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "644591bd0659979f46f92baab197af633f30931d", "commit_date": "2023-06-22T23:29:06Z", "commit_message": "Merge branch 'ds/add-i-color-configuration-fix'\n\nThe reimplemented \"git add -i\" did not honor color.ui configuration.\n\n* ds/add-i-color-configuration-fix:\n  add: test use of brackets when color is disabled\n  add: check color.ui for interactive add", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a9ea4c23dc34bd0c27166f3445aba5a8696700c7", "commit_date": "2023-06-22T23:29:06Z", "commit_message": "Merge branch 'ps/cat-file-null-output'\n\n\"git cat-file --batch\" and friends learned \"-Z\" that uses NUL\ndelimiter for both input and output.\n\n* ps/cat-file-null-output:\n  cat-file: add option '-Z' that delimits input and output with NUL\n  cat-file: simplify reading from standard input\n  strbuf: provide CRLF-aware helper to read until a specified delimiter\n  t1006: modernize test style to use `test_cmp`\n  t1006: don't strip timestamps from expected results", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d9f9f6b358c4d8aad492bc4995be0926048a6248", "commit_date": "2023-06-22T23:29:06Z", "commit_message": "Merge branch 'ds/disable-replace-refs'\n\nIntroduce a mechanism to disable replace refs globally and per\nrepository.\n\n* ds/disable-replace-refs:\n  repository: create read_replace_refs setting\n  replace-objects: create wrapper around setting\n  repository: create disable_replace_refs()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f2ffc7418685f75e43e2919426276141fd62c656", "commit_date": "2023-06-22T23:29:05Z", "commit_message": "Merge branch 'tb/pack-bitmap-traversal-with-boundary'\n\nThe object traversal using reachability bitmap done by\n\"pack-object\" has been tweaked to take advantage of the fact that\nusing \"boundary\" commits as representative of all the uninteresting\nones can save quite a lot of object enumeration.\n\n* tb/pack-bitmap-traversal-with-boundary:\n  pack-bitmap.c: use commit boundary during bitmap traversal\n  pack-bitmap.c: extract `fill_in_bitmap()`\n  object: add object_array initializer helper function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4dd046932835d14c449f04ee0f3885669cad60c5", "commit_date": "2023-06-22T23:29:05Z", "commit_message": "Merge branch 'ja/worktree-orphan'\n\n'git worktree add' learned how to create a worktree based on an\norphaned branch with `--orphan`.\n\n* ja/worktree-orphan:\n  worktree add: emit warn when there is a bad HEAD\n  worktree add: extend DWIM to infer --orphan\n  worktree add: introduce \"try --orphan\" hint\n  worktree add: add --orphan flag\n  t2400: add tests to verify --quiet\n  t2400: refactor \"worktree add\" opt exclusion tests\n  t2400: cleanup created worktree in test\n  worktree add: include -B in usage docs", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6640c2d06d112675426cf436f0594f0e8c614848", "commit_date": "2023-06-20T22:53:13Z", "commit_message": "The second batch for 2.42\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "917d4c25692e1169c896b25c39e42d0004d22184", "commit_date": "2023-06-20T22:53:13Z", "commit_message": "Merge branch 'la/doc-interpret-trailers'\n\nDoc update.\n\n* la/doc-interpret-trailers:\n  doc: trailer: add more examples in DESCRIPTION\n  doc: trailer: mention 'key' in DESCRIPTION\n  doc: trailer.<token>.command: emphasize deprecation\n  doc: trailer: use angle brackets for <token> and <value>\n  doc: trailer: remove redundant phrasing\n  doc: trailer: examples: avoid the word \"message\" by itself\n  doc: trailer: drop \"commit message part\" phrasing\n  doc: trailer: swap verb order\n  doc: trailer: fix grammar", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "de00f4b7f3fd3aca18e4bea286bf060c595efd3b", "commit_date": "2023-06-20T22:53:13Z", "commit_message": "Merge branch 'jk/log-follow-with-non-literal-pathspec'\n\n\"git [-c log.follow=true] log [--follow] ':(glob)f**'\" used to barf.\n\n* jk/log-follow-with-non-literal-pathspec:\n  diff: detect pathspec magic not supported by --follow\n  diff: factor out --follow pathspec check\n  pathspec: factor out magic-to-name function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7cb4274d2606775b0d5b373756f76f386a31bb64", "commit_date": "2023-06-20T22:53:13Z", "commit_message": "Merge branch 'vd/worktree-config-is-per-repository'\n\nThe value of config.worktree is per-repository, but has been kept\nin a singleton global variable per process. This has been OK as\nmost Git operations interacted with a single repository at a time,\nbut not right for operations like recursive \"grep\" that want to\naccess multiple repositories from a single process without forking.\n\nThe global variable has been eliminated and made into a member in\nthe per-repository data structure.\n\n* vd/worktree-config-is-per-repository:\n  repository: move 'repository_format_worktree_config' to repo scope\n  config: pass 'repo' directly to 'config_with_options()'\n  config: use gitdir to get worktree config", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9cd234e6465ab2bea5c402f0d9ee1495501250ef", "commit_date": "2023-06-20T22:53:13Z", "commit_message": "Merge branch 'tb/submodule-null-deref-fix'\n\n\"git submodule\" code trusted the data coming from the config (and\nthe in-tree .gitmodules file) too much without validating, leading\nto NULL dereference if the user mucks with a repository (e.g.\nsubmodule.<name>.url is removed).  This has been corrected.\n\n* tb/submodule-null-deref-fix:\n  builtin/submodule--helper.c: handle missing submodule URLs", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "098a191a9705b013850dc64381ed9a5ca7ac0f80", "commit_date": "2023-06-20T22:53:12Z", "commit_message": "Merge branch 'jc/test-modernization-2'\n\nTest style updates.\n\n* jc/test-modernization-2:\n  t9400-git-cvsserver-server: modernize test format\n  t9200-git-cvsexportcommit: modernize test format\n  t9104-git-svn-follow-parent: modernize test format\n  t9100-git-svn-basic: modernize test format\n  t7700-repack: modernize test format\n  t7600-merge: modernize test format\n  t7508-status: modernize test format\n  t7201-co: modernize test format\n  t7111-reset-table: modernize test format\n  t7110-reset-merge: modernize test format", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "208a28ec08bc472cdc54fcc2bbdb0179f626ab3d", "commit_date": "2023-06-20T22:53:12Z", "commit_message": "Merge branch 'jc/test-modernization'\n\n* jc/test-modernization:\n  t7101-reset-empty-subdirs: modernize test format\n  t6050-replace: modernize test format\n  t5306-pack-nobase: modernize test format\n  t5303-pack-corruption-resilience: modernize test format\n  t5301-sliding-window: modernize test format\n  t5300-pack-object: modernize test format\n  t4206-log-follow-harder-copies: modernize test format\n  t4202-log: modernize test format\n  t4004-diff-rename-symlink: modernize test format\n  t4003-diff-rename-1: modernize test format\n  t4002-diff-basic: modernize test format\n  t3903-stash: modernize test format\n  t3700-add: modernize test format\n  t3500-cherry: modernize test format\n  t1006-cat-file: modernize test format\n  t1002-read-tree-m-u-2way: modernize test format\n  t1001-read-tree-m-2way: modernize test format\n  t3210-pack-refs: modernize test format\n  t0030-stripspace: modernize test format\n  t0000-basic: modernize test format", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6069c1a5a7631deeec550d85c19ebd004c134ea5", "commit_date": "2023-06-20T22:53:12Z", "commit_message": "Merge branch 'kh/use-default-notes-doc'\n\nDoc update.\n\n* kh/use-default-notes-doc:\n  notes: move the documentation to the struct\n  notes: update documentation for `use_default_notes`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0899beb63c525c8254b2367e879cc8744092243f", "commit_date": "2023-06-20T22:53:12Z", "commit_message": "Merge branch 'pb/complete-and-document-auto-merge-and-friends'\n\nDocument more pseudo-refs and teach the command line completion\nmachinery to complete AUTO_MERGE.\n\n* pb/complete-and-document-auto-merge-and-friends:\n  completion: complete AUTO_MERGE\n  Documentation: document AUTO_MERGE\n  git-merge.txt: modernize word choice in \"True merge\" section\n  completion: complete REVERT_HEAD and BISECT_HEAD\n  revisions.txt: document more special refs\n  revisions.txt: use description list for special refs", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "693bde461cfc3b2bd448ebc3c300302a167febba", "commit_date": "2023-06-20T22:53:11Z", "commit_message": "Merge branch 'mh/commit-reach-get-reachable-plug-leak'\n\nPlug memory leak.\n\n* mh/commit-reach-get-reachable-plug-leak:\n  commit-reach: fix memory leak in get_reachable_subset()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7f9b5ff41ecc069753cb60e375286e4c90fe3bbd", "commit_date": "2023-06-20T22:53:11Z", "commit_message": "Merge branch 'tz/test-fix-pthreads-prereq'\n\nTest fix.\n\n* tz/test-fix-pthreads-prereq:\n  trace2 tests: fix PTHREADS prereq", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "40693ae926d8c69f1c1812de74698b6980fb360e", "commit_date": "2023-06-20T22:53:11Z", "commit_message": "Merge branch 'tz/test-ssh-verifytime-fix'\n\nTest fix.\n\n* tz/test-ssh-verifytime-fix:\n  t/lib-gpg: fix ssh-keygen -Y check-novalidate with openssh-9.0", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "056d16406d073cb512a32c64091b1931d1d694c9", "commit_date": "2023-06-20T22:53:11Z", "commit_message": "Merge branch 'jk/ci-use-clang-for-sanitizer-jobs'\n\nClang's sanitizer implementation seems to work better than GCC's.\n\n* jk/ci-use-clang-for-sanitizer-jobs:\n  ci: drop linux-clang job\n  ci: run ASan/UBSan in a single job\n  ci: use clang for ASan/UBSan checks", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ae196330213c5eecd0f01e57d58efb3fcf58f887", "commit_date": "2023-06-20T22:53:10Z", "commit_message": "Merge branch 'tl/quote-problematic-arg-for-clarity'\n\nError message fix.\n\n* tl/quote-problematic-arg-for-clarity:\n  surround %s with quotes when failed to lookup commit", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "06cff0c8d4be7367b97935f606caf0f428e38fb4", "commit_date": "2023-06-20T22:53:10Z", "commit_message": "Merge branch 'ps/fetch-cleanups'\n\nCode clean-up.\n\n* ps/fetch-cleanups:\n  fetch: use `fetch_config` to store \"submodule.fetchJobs\" value\n  fetch: use `fetch_config` to store \"fetch.parallel\" value\n  fetch: use `fetch_config` to store \"fetch.recurseSubmodules\" value\n  fetch: use `fetch_config` to store \"fetch.showForcedUpdates\" value\n  fetch: use `fetch_config` to store \"fetch.pruneTags\" value\n  fetch: use `fetch_config` to store \"fetch.prune\" value\n  fetch: pass through `fetch_config` directly\n  fetch: drop unneeded NULL-check for `remote_ref`\n  fetch: drop unused DISPLAY_FORMAT_UNKNOWN enum value", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "69f4da8eadac4213fddbf68d85c992f230287001", "commit_date": "2023-06-16T15:35:06Z", "commit_message": "setup.c: don't setup in discover_git_directory()\n\ndiscover_git_directory() started modifying the_repository in ebaf3bcf1ae\n(repository: move global r_f_p_c to repo struct, 2021-06-17), when, in\nthe repository setup process, we started copying members from the\n\"struct repository_format\" we're inspecting to the appropriate \"struct\nrepository\". However, discover_git_directory() isn't actually used in\nthe setup process (its only caller in the Git binary is\nread_early_config()), so it shouldn't be doing this setup at all!\n\nAs explained by 16ac8b8db6 (setup: introduce the\ndiscover_git_directory() function, 2017-03-13) and the comment on its\ndeclaration, discover_git_directory() is intended to be an entrypoint\ninto setup.c machinery that allows the Git directory to be discovered\nwithout side effects, e.g. so that read_early_config() can read\n\".git/config\" before the_repository has been set up.\n\nFortunately, we didn't start to rely on this unintended behavior between\nthen and now, so we let's just remove it. It isn't harming anyone, but\nit's confusing.\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nAcked-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6c26da8404c8acfed62fa4775b7b591f099bcd33", "commit_date": "2023-06-15T20:26:41Z", "commit_message": "credential: erase all matching credentials\n\n`credential reject` sends the erase action to each helper, but the\nexact behaviour of erase isn't specified in documentation or tests.\nSome helpers (such as credential-store and credential-libsecret) delete\nall matching credentials, others (such as credential-cache) delete at\nmost one matching credential.\n\nTest that helpers erase all matching credentials. This behaviour is\neasiest to reason about. Users expect that `echo\n\"url=https://example.com\" | git credential reject` or `echo\n\"url=https://example.com\\nusername=tim\" | git credential reject` erase\nall matching credentials.\n\nFix credential-cache.\n\nSigned-off-by: M Hickford <mirth.hickford@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aeb21ce22eec112b37975443a160cb5418c6ec22", "commit_date": "2023-06-15T20:26:39Z", "commit_message": "credential: avoid erasing distinct password\n\nTest that credential helpers do not erase a password distinct from the\ninput. Such calls can happen when multiple credential helpers are\nconfigured.\n\nFixes for credential-cache and credential-store.\n\nSigned-off-by: M Hickford <mirth.hickford@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3744ffcbcdcd5a619b7522671e6137b33d84626b", "commit_date": "2023-06-15T18:19:02Z", "commit_message": "ls-tree: fix documentation of %x format placeholder\n\nls-tree --format expands %x followed by two hexadecimal digits to the\ncharacter indicated by that hexadecimal number, e.g.:\n\n   $ git ls-tree --format=%x41 HEAD | head -1\n   A\n\nIt rejects % followed by a hexadecimal digit, e.g.:\n\n   $ git ls-tree --format=%41 HEAD | head -1\n   fatal: bad ls-tree format: element '41' does not start with '('\n\nThis functionality is provided by strbuf_expand_literal_cb(), which has\nnot been changed since it was factored out by fd2015b323 (strbuf:\nseparate callback for strbuf_expand:ing literals, 2019-01-28).\n\nAdjust the documentation accordingly.\n\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d57fa7fc73202af226b6c0e0d9788c6460ce23b9", "commit_date": "2023-06-15T04:42:20Z", "commit_message": "doc: trailer: add more examples in DESCRIPTION\n\nBe more up-front about what trailers are in practice with examples, to\ngive the reader a visual cue while they go on to read the rest of the\ndescription.\n\nAlso add an example for multiline values.\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "eda2c44c8b999547c0726baa7a12a40960ac5d6a", "commit_date": "2023-06-15T04:42:20Z", "commit_message": "doc: trailer: mention 'key' in DESCRIPTION\n\nThe 'key' option is used frequently in the examples at the bottom but\nthere is no mention of it in the description.\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dc8937fbb99aa00de777852cc7d04d0534bb956c", "commit_date": "2023-06-15T04:42:20Z", "commit_message": "doc: trailer.<token>.command: emphasize deprecation\n\nThis puts the deprecation notice up front, instead of leaving it to the\nnext paragraph.\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e80f2916b82501b9d726b75ba0df32c951e4a7e", "commit_date": "2023-06-15T04:42:20Z", "commit_message": "doc: trailer: use angle brackets for <token> and <value>\n\nWe already use angle brackets elsewhere, so this makes things more\nconsistent.\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "74a50fbd7f2a4a32ef6a5d7d10afa4cdaf00f8e4", "commit_date": "2023-06-15T04:42:19Z", "commit_message": "doc: trailer: remove redundant phrasing\n\nThe phrase \"many rules\" gets essentially repeated again with \"many other\nrules\", so remove this repetition.\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "229d6ab6bf1976906c1f0294c3f1781c12478505", "commit_date": "2023-06-15T04:42:19Z", "commit_message": "doc: trailer: examples: avoid the word \"message\" by itself\n\nPreviously, \"message\" could mean the input, output, commit message, or\n\"internal body text inside the commit message\" (in the EXAMPLES\nsection). Avoid overloading this term by using the appropriate meanings\nexplicitly.\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "94f15fe5d5d2c119908e3f95c69a86cb9e905439", "commit_date": "2023-06-15T04:42:19Z", "commit_message": "doc: trailer: drop \"commit message part\" phrasing\n\nThe command can take inputs that are either just a commit message, or\nan email-like output such as git-format-patch which includes a commit\nmessage, \"---\" divider, and patch part. The existing explanation blends\nthese two inputs together in the first sentence\n\n    This command reads some patches or commit messages\n\nwhich then necessitates using the \"commit message part\" phrasing (as\nopposed to just \"commit message\") because the input is ambiguous per the\nabove definition.\n\nThis change separates the two input types and explains them separately,\nand so there is no longer a need to use the \"commit message part\"\nphrase.\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "00432a36e20f86338774e5daf8c7fb2eff0beda8", "commit_date": "2023-06-15T04:42:19Z", "commit_message": "doc: trailer: swap verb order\n\nThis matches the order already used in the NAME section.\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bfb5f57bb33c864c162c13667b2d02b573a179f3", "commit_date": "2023-06-15T04:42:19Z", "commit_message": "doc: trailer: fix grammar\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f0b68f0546a44e2bc3a764bd75b3aa4418c01601", "commit_date": "2023-06-14T21:44:19Z", "commit_message": "CodingGuidelines: use octal escapes, not hex\n\nExtend the shell-scripting section of CodingGuidelines to suggest octal\nescape sequences (e.g. \"\\302\\242\") over hexadecimal (e.g. \"\\xc2\\xa2\")\nsince the latter can be a source of portability problems.\n\nSigned-off-by: Jonathan Tan <jonathantanmy@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d7d8841f67f29e6ecbad85a11805c907d0f00d5d", "commit_date": "2023-06-13T19:29:46Z", "commit_message": "Start the 2.42 cycle\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "32fe7fff0c141784dcfcece405e8e1866c55a2a9", "commit_date": "2023-06-13T19:29:46Z", "commit_message": "Merge branch 'zh/ls-files-format-atoms'\n\nSome atoms that can be used in \"--format=<format>\" for \"git ls-tree\"\nwere not supported by \"git ls-files\", even though they were relevant\nin the context of the latter.\n\n* zh/ls-files-format-atoms:\n  ls-files: align format atoms with ls-tree", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ca9c063c1820a78e29306c7d54b4f840ea5db62e", "commit_date": "2023-06-13T19:29:46Z", "commit_message": "Merge branch 'sl/diff-tree-sparse'\n\n\"git diff-tree\" has been taught to take advantage of the\nsparse-index feature.\n\n* sl/diff-tree-sparse:\n  diff-tree: integrate with sparse index", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e490bea8a68fceb227277fef38daa1b7522b97a5", "commit_date": "2023-06-13T19:29:46Z", "commit_message": "Merge branch 'jk/format-patch-message-id-unleak'\n\nLeakfix.\n\n* jk/format-patch-message-id-unleak:\n  format-patch: free elements of rev.ref_message_ids list\n  format-patch: free rev.message_id when exiting", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cbc882ea388143bd6bbed139f97f67589777be60", "commit_date": "2023-06-13T19:29:45Z", "commit_message": "Merge branch 'jc/pack-ref-exclude-include'\n\n\"git pack-refs\" learns \"--include\" and \"--exclude\" to tweak the ref\nhierarchy to be packed using pattern matching.\n\n* jc/pack-ref-exclude-include:\n  pack-refs: teach pack-refs --include option\n  pack-refs: teach --exclude option to exclude refs from being packed\n  docs: clarify git-pack-refs --all will pack all refs", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ebd07c9f7e5d56fbe9d5816db95ecf137ed447ea", "commit_date": "2023-06-13T19:29:45Z", "commit_message": "Merge branch 'sa/doc-ls-remote'\n\nDoc update.\n\n* sa/doc-ls-remote:\n  ls-remote doc: document the output format\n  ls-remote doc: explain what each example does\n  ls-remote doc: show peeled tags in examples\n  ls-remote doc: remove redundant --tags example\n  show-branch doc: say <ref>, not <reference>\n  show-ref doc: update for internal consistency", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4c7d878df6fa3793a0a4dde84ffb14b865e569f4", "commit_date": "2023-06-13T19:29:45Z", "commit_message": "Merge branch 'gc/doc-cocci-updates'\n\nUpdate documentation regarding Coccinelle patches.\n\n* gc/doc-cocci-updates:\n  cocci: codify authoring and reviewing practices\n  cocci: add headings to and reword README", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6901ffe80cefba50ad3e974b53c2457973e1425d", "commit_date": "2023-06-13T19:29:45Z", "commit_message": "Merge branch 'jc/diff-s-with-other-options'\n\nThe \"-s\" (silent, squelch) option of the \"diff\" family of commands\ndid not interact with other options that specify the output format\nwell.  This has been cleaned up so that it will clear all the\nformatting options given before.\n\n* jc/diff-s-with-other-options:\n  diff: fix interaction between the \"-s\" option and other options", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6d2a88c7289b56999426354f44b536255b57c5c8", "commit_date": "2023-06-13T19:29:44Z", "commit_message": "Merge branch 'kh/keep-tag-editmsg-upon-failure'\n\n\"git tag\" learned to leave the \"$GIT_DIR/TAG_EDITMSG\" file when the\ncommand failed, so that the user can salvage what they typed.\n\n* kh/keep-tag-editmsg-upon-failure:\n  tag: keep the message file in case ref transaction fails\n  t/t7004-tag: add regression test for successful tag creation\n  doc: tag: document `TAG_EDITMSG`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "548afb0d9a5a15e538fbf7e01fafbc27691365f1", "commit_date": "2023-06-12T20:52:51Z", "commit_message": "docs: typofixes\n\nThese were found with an automated CLI tool [1]. Only the\n\"Documentation\" subfolder (and not source code files) was considered\nbecause the docs are user-facing.\n\n[1]: https://crates.io/crates/typos-cli\n\nSigned-off-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9c7d1b057ff36ee4190621d46e9fe3c83377aea7", "commit_date": "2023-06-12T20:34:55Z", "commit_message": "repository: create read_replace_refs setting\n\nThe 'read_replace_refs' global specifies whether or not we should\nrespect the references of the form 'refs/replace/<oid>' to replace which\nobject we look up when asking for '<oid>'. This global has caused issues\nwhen it is not initialized properly, such as in b6551feadfd (merge-tree:\nload default git config, 2023-05-10).\n\nTo make this more robust, move its config-based initialization out of\ngit_default_config and into prepare_repo_settings(). This provides a\nrepository-scoped version of the 'read_replace_refs' global.\n\nThe global still has its purpose: it is disabled process-wide by the\nGIT_NO_REPLACE_OBJECTS environment variable or by a call to\ndisable_replace_refs() in some specific Git commands.\n\nSince we already encapsulated the use of the constant inside\nreplace_refs_enabled(), we can perform the initialization inside that\nmethod, if necessary. This solves the problem of forgetting to check the\nconfig, as we will check it before returning this value.\n\nDue to this encapsulation, the global can move to be static within\nreplace-object.c.\n\nThere is an interesting behavior change possible here: we now have a\nrepository-scoped understanding of this config value. Thus, if there was\na command that recurses into submodules and might follow replace refs,\nthen it would now respect the core.useReplaceRefs config value in each\nrepository.\n\n'git grep --recurse-submodules' is such a command that recurses into\nsubmodules in-process. We can demonstrate the granularity of this config\nvalue via a test in t7814.\n\nSigned-off-by: Derrick Stolee <derrickstolee@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f1178380ac645684fcf0519488f9336e55f0946f", "commit_date": "2023-06-12T20:34:55Z", "commit_message": "replace-objects: create wrapper around setting\n\nThe 'read_replace_objects' constant is initialized by git_default_config\n(if core.useReplaceRefs is disabled) and within setup_git_env (if\nGIT_NO_REPLACE_OBJECTS) is set. To ensure that this variable cannot be\nset accidentally in other places, wrap it in a replace_refs_enabled()\nmethod.\n\nSince we still assign this global in config.c, we are not able to remove\nthe global scope of this variable and make it a static within\nreplace-object.c. This will happen in a later change which will also\nprevent the variable from being read before it is initialized.\n\nCentralizing read access to the variable is an important first step.\n\nSigned-off-by: Derrick Stolee <derrickstolee@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d24eda4e03cabbd39ce06827d47e52a97b9095db", "commit_date": "2023-06-12T20:34:55Z", "commit_message": "repository: create disable_replace_refs()\n\nSeveral builtins depend on being able to disable the replace references\nso we actually operate on each object individually. These currently do\nso by directly mutating the 'read_replace_refs' global.\n\nA future change will move this global into a different place, so it will\nbe necessary to change all of these lines. However, we can simplify that\ntransition by abstracting the purpose of these global assignments with a\nmethod call.\n\nWe will need to keep this read_replace_refs global forever, as we want\nto make sure that we never use replace refs throughout the life of the\nprocess if this method is called. Future changes may present a\nrepository-scoped version of the variable to represent that repository's\ncore.useReplaceRefs config value, but a zero-valued read_replace_refs\nwill always override such a setting.\n\nSigned-off-by: Derrick Stolee <derrickstolee@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f79e18849b5dd8ad83f38744a2e08370f919491a", "commit_date": "2023-06-12T20:23:46Z", "commit_message": "cat-file: add option '-Z' that delimits input and output with NUL\n\nIn db9d67f2e9 (builtin/cat-file.c: support NUL-delimited input with\n`-z`, 2022-07-22), we have introduced a new mode to read the input via\nNUL-delimited records instead of newline-delimited records. This allows\nthe user to query for revisions that have newlines in their path\ncomponent. While unusual, such queries are perfectly valid and thus it\nis clear that we should be able to support them properly.\n\nUnfortunately, the commit only changed the input to be NUL-delimited,\nbut didn't change the output at the same time. While this is fine for\nqueries that are processed successfully, it is less so for queries that\naren't. In the case of missing commits for example the result can become\nentirely unparsable:\n\n```\n$ printf \"7ce4f05bae8120d9fa258e854a8669f6ea9cb7b1 blob 10\\n1234567890\\n\\n\\commit000\" |\n    git cat-file --batch -z\n7ce4f05bae8120d9fa258e854a8669f6ea9cb7b1 blob 10\n1234567890\n\ncommit missing\n```\n\nThis is of course a crafted query that is intentionally gaming the\ndeficiency, but more benign queries that contain newlines would have\nsimilar problems.\n\nIdeally, we should have also changed the output to be NUL-delimited when\n`-z` is specified to avoid this problem. As the input is NUL-delimited,\nit is clear that the output in this case cannot ever contain NUL\ncharacters by itself. Furthermore, Git does not allow NUL characters in\nrevisions anyway, further stressing the point that using NUL-delimited\noutput is safe. The only exception is of course the object data itself,\nbut as git-cat-file(1) prints the size of the object data clients should\nread until that specified size has been consumed.\n\nBut even though `-z` has only been introduced a few releases ago in Git\nv2.38.0, changing the output format retroactively to also NUL-delimit\noutput would be a backwards incompatible change. And while one could\nmake the argument that the output is inherently broken already, we need\nto assume that there are existing users out there that use it just fine\ngiven that revisions containing newlines are quite exotic.\n\nInstead, introduce a new option `-Z` that switches to NUL-delimited\ninput and output. While this new option could arguably only switch the\noutput format to be NUL-delimited, the consequence would be that users\nhave to always specify both `-z` and `-Z` when the input may contain\nnewlines. On the other hand, if the user knows that there never will be\nnewlines in the input, they don't have to use either of those options.\nThere is thus no usecase that would warrant treating input and output\nformat separately, which is why we instead opt to \"do the right thing\"\nand have `-Z` mean to NUL-terminate both formats.\n\nThe old `-z` option is marked as deprecated with a hint that its output\nmay become unparsable. It is thus hidden both from the synopsis as well\nas the command's help output.\n\nCo-authored-by: Toon Claes <toon@iotcl.com>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3217f52a499d5264d98065374a62deb15717b727", "commit_date": "2023-06-12T20:23:24Z", "commit_message": "cat-file: simplify reading from standard input\n\nThe batch modes of git-cat-file(1) read queries from stantard input that\nare either newline- or NUL-delimited. This code was introduced via\ndb9d67f2e9 (builtin/cat-file.c: support NUL-delimited input with `-z`,\n2022-07-22), which notes that:\n\n\"\"\"\nThe refactoring here is slightly unfortunate, since we turn loops like:\n\n     while (strbuf_getline(&buf, stdin) != EOF)\n\n into:\n\n     while (1) {\n         int ret;\n         if (opt->nul_terminated)\n             ret = strbuf_getline_nul(&input, stdin);\n         else\n             ret = strbuf_getline(&input, stdin);\n\n         if (ret == EOF)\n             break;\n     }\n\"\"\"\n\nThe commit proposed introducing a helper function that is easier to use,\nwhich is just what we have done in the preceding commit. Refactor the\ncode to use this new helper to simplify the loop.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "af35e56b0f83f872a8d82d8293fae87c80b491ef", "commit_date": "2023-06-12T20:23:24Z", "commit_message": "strbuf: provide CRLF-aware helper to read until a specified delimiter\n\nMany of our commands support reading input that is separated either via\nnewlines or via NUL characters. Furthermore, in order to be a better\ncross platform citizen, these commands typically know to strip the CRLF\nsequence so that we also support reading newline-separated inputs on\ne.g. the Windows platform. This results in the following kind of awkward\npattern:\n\n```\nstruct strbuf input = STRBUF_INIT;\n\nwhile (1) {\n\tint ret;\n\n\tif (nul_terminated)\n\t\tret = strbuf_getline_nul(&input, stdin);\n\telse\n\t\tret = strbuf_getline(&input, stdin);\n\tif (ret)\n\t\tbreak;\n\n\t...\n}\n```\n\nIntroduce a new CRLF-aware helper function that can read up to a user\nspecified delimiter. If the delimiter is `\\n` the function knows to also\nstrip CRLF, otherwise it will only strip the specified delimiter. This\nresults in the following, much more readable code pattern:\n\n```\nstruct strbuf input = STRBUF_INIT;\n\nwhile (strbuf_getdelim_strip_crlf(&input, stdin, delim) != EOF) {\n\t...\n}\n```\n\nThe new function will be used in a subsequent commit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b116c77307853a9fa8f74d1ad16bed98a7211207", "commit_date": "2023-06-12T20:23:24Z", "commit_message": "t1006: modernize test style to use `test_cmp`\n\nThe tests for git-cat-file(1) are quite old and haven't ever been\nupdated since they were introduced. They thus tend to use old idioms\nthat have since grown outdated. Most importantly, many of the tests use\n`test $A = $B` to compare expected and actual output. This has the\ndownside that it is impossible to tell what exactly is different between\nboth versions in case the test fails.\n\nRefactor the tests to instead use `test_cmp`. While more verbose, it\nboth tends to be more readable and will result in a nice diff in case\nstates don't match.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c7309f63c606cebd4dea8b2a31e5ffbb2e2bf205", "commit_date": "2023-06-12T20:23:24Z", "commit_message": "t1006: don't strip timestamps from expected results\n\nIn t1006 we have a bunch of tests that verify the output format of the\ngit-cat-file(1) command. But while part of the output for some tests\nwould include commit timestamps, we don't verify those but instead strip\nthem before comparing expected with actual results. This is done by the\nfunction `maybe_remove_timestamp`, which goes all the way back to the\nancient commit b335d3f121 (Add tests for git cat-file, 2008-04-23).\n\nOur tests had been in a different shape back then. Most importantly we\ndidn't yet have the infrastructure to create objects with deterministic\ntimestamps. Nowadays we do though, and thus there is no reason anymore\nto strip the timestamps.\n\nRefactor the tests to not strip the timestamp anymore.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8fac776f441c69af60825452a3b5d4adecd47ad9", "commit_date": "2023-06-12T19:13:58Z", "commit_message": "worktree: integrate with sparse-index\n\nThe index is read in 'worktree.c' at two points:\n\n1.The 'validate_no_submodules' function, which checks if there are any\nsubmodules present in the worktree.\n\n2.The 'check_clean_worktree' function, which verifies if a worktree is\n'clean', i.e., there are no untracked or modified but uncommitted files.\nThis is done by running the 'git status' command, and an error message\nis thrown if the worktree is not clean. Given that 'git status' is\nalready sparse-aware, the function is also sparse-aware.\n\nHence we can just set the requires-full-index to false for\n\"git worktree\".\n\nAdd tests that verify that 'git worktree' behaves correctly when the\nsparse index is enabled and test to ensure the index is not expanded.\n\nThe `p2000` tests demonstrate a ~20% execution time reduction for\n'git worktree' using a sparse index:\n\n(Note:the p2000 test results didn't reflect the huge speedup because of\nthe index reading time is minuscule comparing to the filesystem\noperations.)\n\nTest                                       before  after\n-----------------------------------------------------------------------\n2000.102: git worktree add....(full-v3)    3.15    2.82  -10.5%\n2000.103: git worktree add....(full-v4)    3.14    2.84  -9.6%\n2000.104: git worktree add....(sparse-v3)  2.59    2.14  -16.4%\n2000.105: git worktree add....(sparse-v4)  2.10    1.57  -25.2%\n\nHelped-by: Victoria Dye <vdye@github.com>\nSigned-off-by: Shuqi Liang <cheskaqiqi@gmail.com>\nAcked-by: Victoria Dye <vdye@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6d224ac286d62bb3a10c3697f220b0c10d4b5f51", "commit_date": "2023-06-12T18:00:22Z", "commit_message": "run-command: report exec error even on ENOENT\n\nIf execve(2) fails with ENOENT and we report the error, we use the\nformat \"cannot run %s\", followed by the actual error message.  For other\nerrors we use \"cannot exec '%s'\".\n\nStop making this subtle distinction and use the second format for all\nexecve(2) errors.  This simplifies the code and makes the prefix more\nprecise by indicating the failed operation.  It also allows us to\nslightly simplify t1800.16.\n\nOn Windows -- which lacks execve(2) -- we already use a single format in\nall cases: \"cannot spawn %s\".\n\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6b6fe8b43ee71e52141ad762a38339688278f66f", "commit_date": "2023-06-12T18:00:21Z", "commit_message": "t1800: loosen matching of error message for bad shebang\n\nt1800.16 checks whether an attempt to run a hook script with a missing\nexecutable in its #! line fails and reports that error.  The expected\nerror message differs between platforms.  The test handles two common\nvariants, but on NonStop OS we get a third one: \"fatal: cannot exec\n'bad-hooks/test-hook': ...\", which causes the test to fail there.\n\nWe don't really care about the specific message text all that much here.\nUse grep and a single regex with alternations to ascertain that we get\nan error message (fatal or otherwise) about the failed invocation of the\nhook, but don't bother checking if we get the right variant for the\nplatform the test is running on or whether quoting is done.  This looser\ncheck let's the test pass on NonStop OS.\n\nReported-by: Randall S. Becker <randall.becker@nexbridge.ca>\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "03bf92b9bfee808667588e65645c5427114a5634", "commit_date": "2023-06-12T17:59:01Z", "commit_message": "statinfo.h: move DTYPE defines from dir.h\n\n592fc5b3 (dir.h: move DTYPE defines from cache.h, 2023-04-22) moved\nDTYPE macros from cache.h to dir.h, but they are still used by cache.h\nto implement ce_to_dtype(); cache.h cannot include dir.h because that\nwould cause name-hash.c to have two different and conflicting\ndefinitions of `struct dir_entry`. (That should be separately fixed.)\n\nBoth dir.h and cache.h include statinfo.h, and this seems a reasonable\nplace for these definitions.\n\nThis change fixes a broken build issue on old SunOS.\n\nSigned-off-by: Alejandro R. Sede\u00f1o <asedeno@mit.edu>\nSigned-off-by: Alejandro R Sede\u00f1o <asedeno@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6f74648cea1ada4dd0add46b2ae038606bb47395", "commit_date": "2023-06-12T17:50:18Z", "commit_message": "add: test use of brackets when color is disabled\n\nFrom 02156b81bbb2cafb19d702c55d45714fcf224048 Mon Sep 17 00:00:00 2001\nFrom: Derrick Stolee <derrickstolee@github.com>\nDate: Wed, 7 Jun 2023 09:39:01 -0400\nSubject: [PATCH v2 2/2] add: test use of brackets when color is disabled\n\nThe interactive add command, 'git add -i', displays a menu of options\nusing full words. When color is enabled, the first letter of each word\nis changed to a highlight color to signal that the first letter could be\nused as a command. Without color, brackets (\"[]\") are used around these\nfirst letters.\n\nThis behavior was not previously tested directly in t3701, so add a test\nfor it now. Since we use 'git add -i >actual <input' without\n'force_color', the color system recognizes that colors are not available\non stdout and will be disabled by default.\n\nThis test would reproduce correctly with or without the fix in the\nprevious commit to make sure that color.ui is respected in 'git add'.\n\nReported-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Derrick Stolee <derrickstolee@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7cf3b49f47f02ed1cab5b1cd03a5e27acaa13c99", "commit_date": "2023-06-12T17:49:16Z", "commit_message": "add: check color.ui for interactive add\n\nWhen 'git add -i' and 'git add -p' were converted to a builtin, they\nintroduced a color bug: the 'color.ui' config setting is ignored.\n\nThe included test demonstrates an example that is similar to the\nprevious test, which focuses on customizing colors. Here, we are\ndemonstrating that colors are not being used at all by comparing the raw\noutput and the color-decoded version of that output.\n\nThe fix is simple, to use git_color_default_config() as the fallback for\ngit_add_config(). A more robust change would instead encapsulate the\ngit_use_color_default global in methods that would check the config\nsetting if it has not been initialized yet. Some ideas are being\ndiscussed on this front [1], but nothing has been finalized.\n\n[1] https://lore.kernel.org/git/pull.1539.git.1685716420.gitgitgadget@gmail.com/\n\nThis test case naturally bisects down to 0527ccb1b55 (add -i: default to\nthe built-in implementation, 2021-11-30), but the fix makes it clear\nthat this would be broken even if we added the config to use the builtin\nearlier than this.\n\nReported-by: Greg Alexander <gitgreg@galexander.org>\nSigned-off-by: Derrick Stolee <derrickstolee@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aeee1408ce98f0527d9d22c3aee96360f341443b", "commit_date": "2023-06-06T00:35:05Z", "commit_message": "notes: move the documentation to the struct\n\nIts better to document the struct members directly instead of on a\nfunction that takes a pointer to the struct. This will also make it\neasier to update the documentation in the future.\n\nMake adjustments for this new context. Also drop \u201cmay contain\u201d since we\ndon\u2019t need to emphasize that a list could be empty.\n\nSuggested-by: Jeff King <peff@peff.net>\nSigned-off-by: Kristoffer Haugsbakk <code@khaugsbakk.name>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a2e9dbb8849a29d010dceea2d5d1cab62d4dee6d", "commit_date": "2023-06-06T00:35:03Z", "commit_message": "notes: update documentation for `use_default_notes`\n\n`suppress_default_notes` was renamed to `use_default_notes` in\n3a03cf6b1d (notes: refactor display notes default handling,\n2011-03-29).\n\nThe commit message says that \u201cvalues less than one [indicates] \u201cnot\nset\u201d \u201d, but what was meant was probably \u201cless than zero\u201d (the author of\n3a03cf6b1d agrees on this point).\n\nSigned-off-by: Kristoffer Haugsbakk <code@khaugsbakk.name>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "68b51172e310beeb4ace56645a9f2b823e6fe12d", "commit_date": "2023-06-04T04:43:48Z", "commit_message": "commit-reach: fix memory leak in get_reachable_subset()\n\nThis is a leak that has existed since the method was first created\nin fcb2c0769db (commit-reach: implement get_reachable_subset,\n2018-11-02).\n\nSigned-off-by: Mike Hommey <mh@glandium.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d88d727143c3444897a9fdfe2d443c72808bcc97", "commit_date": "2023-06-03T01:35:13Z", "commit_message": "ci: drop linux-clang job\n\nSince the linux-asan-ubsan job runs using clang under Linux, there is\nnot much point in running a separate clang job. Any errors that a normal\nclang compile-and-test cycle would find are likely to be a subset of\nwhat the sanitizer job will find. Since this job takes ~14 minutes to\nrun in CI, this shaves off some of our CPU load (though it does not\naffect end-to-end runtime, since it's typically run in parallel and is\nnot the longest job).\n\nTechnically this provides us with slightly less signal for a given run,\nsince you won't immediately know if a failure in the sanitizer job is\nfrom using clang or from the sanitizers themselves. But it's generally\nobvious from the logs, and anyway your next step would be to fix the\nprobvlem and re-run CI, since we expect all of these jobs to pass\nnormally.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ec6915265ac4c39f52d89288c9b93ad363636dec", "commit_date": "2023-06-03T01:35:13Z", "commit_message": "ci: run ASan/UBSan in a single job\n\nWhen we started running sanitizers in CI via 1c0962c0c4 (ci: add address\nand undefined sanitizer tasks, 2022-10-20), we ran them as two separate\nCI jobs, since as that commit notes, the combination \"seems to take\nforever\".\n\nAnd indeed, it does with gcc. However, since the previous commit\nswitched to using clang, the situation is different, and we can save\nsome CPU by using a single job for both. Comparing before/after CI runs,\nthis saved about 14 minutes (the single combined job took 54m, versus\n44m plus 24m for ASan and UBSan jobs, respectively). That's wall-clock\nand not CPU, but since our jobs are mostly CPU-bound, the two should be\nclosely proportional.\n\nThis does increase the end-to-end time of a CI run, though, since before\nthis patch the two jobs could run in parallel, and the sanitizer job is\nour longest single job. It also means that we won't get a separate\nresult for \"this passed with UBSan but not with ASan\" or vice versa).\nBut as 1c0962c0c4 noted, that is not a very useful signal in practice.\n\nBelow are some more detailed timings of gcc vs clang that I measured by\nrunning the test suite on my local workstation. Each measurement counts\nonly the time to run the test suite with each compiler (not the compile\ntime itself). We'll focus on the wall-clock times for simplicity, though\nthe CPU times follow roughly similar trends.\n\nHere's a run with CC=gcc as a baseline:\n\n  real\t1m12.931s\n  user\t9m30.566s\n  sys\t8m9.538s\n\nRunning with SANITIZE=address increases the time by a factor of ~4.7x:\n\n  real\t5m40.352s\n  user\t49m37.044s\n  sys\t36m42.950s\n\nRunning with SANITIZE=undefined increases the time by a factor of ~1.7x:\n\n  real\t2m5.956s\n  user\t12m42.847s\n  sys\t19m27.067s\n\nSo let's call that 6.4 time units to run them separately (where a unit\nis the time it takes to run the test suite with no sanitizers). As a\nsimplistic model, we might imagine that running them together would take\n5.4 units (we save 1 unit because we are no longer running the test\nsuite twice, but just paying the sanitizer overhead on top of a single\nrun).\n\nBut that's not what happens. Running with SANITIZE=address,undefined\nresults in a factor of 9.3x:\n\n  real\t11m9.817s\n  user\t77m31.284s\n  sys\t96m40.454s\n\nSo not only did we not get faster when doing them together, we actually\nspent 1.5x as much CPU as doing them separately! And while those\nwall-clock numbers might not look too terrible, keep in mind that this\nis on an unloaded 8-core machine. In the CI environment, wall-clock\ntimes will be much closer to CPU times. So not only are we wasting CPU,\nbut we risk hitting timeouts.\n\nNow let's try the same thing with clang. Here's our no-sanitizer\nbaseline run, which is almost identical to the gcc one (which is quite\nconvenient, because we can keep using the same \"time units\" to get an\napples-to-apples comparison):\n\n  real\t1m11.844s\n  user\t9m28.313s\n  sys\t8m8.240s\n\nAnd now again with SANITIZE=address, we get a 5x factor (so slightly\nworse than gcc's 4.7x, though I wouldn't read too much into it; there is\na fair bit of run-to-run noise):\n\n  real\t6m7.662s\n  user\t49m24.330s\n  sys\t44m13.846s\n\nAnd with SANITIZE=undefined, we are at 1.5x, slightly outperforming gcc\n(though again, that's probably mostly noise):\n\n  real\t1m50.028s\n  user\t11m0.973s\n  sys\t16m42.731s\n\nSo running them separately, our total cost is 6.5x. But if we combine\nthem in a single run (SANITIZE=address,undefined), we get:\n\n  real\t6m51.804s\n  user\t52m32.049s\n  sys\t51m46.711s\n\nwhich is a factor of 5.7x. That's along the lines we'd hoped for!\nRunning them together saves us almost a whole time unit. And that's not\ncounting any time spent outside the test suite itself (starting the job,\nsetting up the environment, compiling) that we're no longer duplicating\nby having two jobs.\n\nSo clang behaves like we'd hope: the overhead to run the sanitizers is\nadditive as you add more sanitizers. Whereas gcc's numbers seem very\nclose to multiplicative, almost as if the sanitizers were enforcing\ntheir overheads on each other (though that is purely a guess on what is\ngoing on; ultimately what matters to us is the amount of time it takes).\n\nAnd that roughly matches the CI improvement I saw. A \"time unit\" there\nis more like 12 minutes, and the observed time savings was 14 minutes\n(with the extra presumably coming from avoiding duplicated setup, etc).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "85a62951e5afc43450779a361da1367c1edee06c", "commit_date": "2023-06-03T01:35:13Z", "commit_message": "ci: use clang for ASan/UBSan checks\n\nBoth gcc and clang support the \"address\" and \"undefined\" sanitizers.\nHowever, they may produce different results. We've seen at least two\nreal world cases where gcc missed a UBSan problem but clang found it:\n\n  1. Clang's UBSan (using clang 14.0.6) found a string index that was\n     subtracted to \"-1\", causing an out-of-bounds read (curiously this\n     didn't trigger ASan, but that may be because the string was in the\n     argv memory, not stack or heap). Using gcc (version 12.2.0) didn't\n     find the same problem.\n\n     Original thread:\n     https://lore.kernel.org/git/20230519005447.GA2955320@coredump.intra.peff.net/\n\n  2. Clang's UBSan (using clang 4.0.1) complained about pointer\n     arithmetic with NULL, but gcc at the time did not. This was in\n     2017, and modern gcc does seem to find the issue, though.\n\n     Original thread:\n     https://lore.kernel.org/git/32a8b949-638a-1784-7fba-948ae32206fc@web.de/\n\nSince we don't otherwise have a particular preference for one compiler\nover the other for this test, let's switch to the one that we think may\nbe more thorough.\n\nNote that it's entirely possible that the two are simply _different_,\nand we are trading off problems that gcc would find that clang wouldn't.\nHowever, my subjective and anecdotal experience has been that clang's\nsanitizer support is a bit more mature (e.g., I recall other oddities\naround leak-checking where clang performed more sensibly).\n\nObviously running both and cross-checking the results would give us the\nbest coverage, but that's very expensive to run (and these are already\nsome of our most expensive CI jobs). So let's use clang as our best\nguess, and we can re-evaluate if we get more data points.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8260bc59023136edeaed1f1006a03f44cc849883", "commit_date": "2023-06-03T01:34:25Z", "commit_message": "diff: detect pathspec magic not supported by --follow\n\nThe --follow code doesn't handle most forms of pathspec magic. We check\nthat no unexpected ones have made it to try_to_follow_renames() with a\nruntime GUARD_PATHSPEC() check, which gives behavior like this:\n\n  $ git log --follow ':(icase)makefile' >/dev/null\n  BUG: tree-diff.c:596: unsupported magic 10\n  Aborted\n\nThe same is true of \":(glob)\", \":(attr)\", and so on. It's good that we\nnotice the problem rather than continuing and producing a wrong answer.\nBut there are two non-ideal things:\n\n  1. The idea of GUARD_PATHSPEC() is to catch programming errors where\n     low-level code gets unexpected pathspecs. We'd usually try to catch\n     unsupported pathspecs by passing a magic_mask to parse_pathspec(),\n     which would give the user a much better message like:\n\n       pathspec magic not supported by this command: 'icase'\n\n     That doesn't happen here because git-log usually _does_ support\n     all types of pathspec magic, and so it passes \"0\" for the mask\n     (this call actually happens in setup_revisions()). It needs to\n     distinguish the normal case from the \"--follow\" one but currently\n     doesn't.\n\n  2. In addition to --follow, we have the log.follow config option. When\n     that is set, we try to turn on --follow mode only when there is a\n     single pathspec (since --follow doesn't handle anything else). But\n     really, that ought to be expanded to \"use --follow when the\n     pathspec supports it\". Otherwise, we'd complain any time you use an\n     exotic pathspec:\n\n       $ git config log.follow true\n       $ git log ':(icase)makefile' >/dev/null\n       BUG: tree-diff.c:596: unsupported magic 10\n       Aborted\n\n     We should instead just avoid enabling follow mode if it's not\n     supported by this particular invocation.\n\nThis patch expands our diff_check_follow_pathspec() function to cover\npathspec magic, solving both problems.\n\nA few final notes:\n\n  - we could also solve (1) by passing the appropriate mask to\n    parse_pathspec(). But that's not great for two reasons. One is that\n    the error message is less precise. It says \"magic not supported by\n    this command\", but really it is not the command, but rather the\n    --follow option which is the problem. The second is that it always\n    calls die(). But for our log.follow code, we want to speculatively\n    ask \"is this pathspec OK?\" and just get a boolean result.\n\n  - This is obviously the right thing to do for ':(icase)' and most\n    other magic options. But ':(glob)' is a bit odd here. The --follow\n    code doesn't support wildcards, but we allow them anyway. From\n    try_to_follow_renames():\n\n\t#if 0\n\t        /*\n\t         * We should reject wildcards as well. Unfortunately we\n\t         * haven't got a reliable way to detect that 'foo\\*bar' in\n\t         * fact has no wildcards. nowildcard_len is merely a hint for\n\t         * optimization. Let it slip for now until wildmatch is taught\n\t         * about dry-run mode and returns wildcard info.\n\t         */\n\t        if (opt->pathspec.has_wildcard)\n\t                BUG(\"wildcards are not supported\");\n\t#endif\n\n    So something like \"git log --follow 'Make*'\" is already doing the\n    wrong thing, since \":(glob)\" behavior is already the default (it is\n    used only to countermand an earlier --noglob-pathspecs).\n\n    So we _could_ loosen the guard to allow :(glob), since it just\n    behaves the same as pathspecs do by default. But it seems like a\n    backwards step to do so. It already doesn't work (it hits the BUG()\n    case currently), and given that the user took an explicit step to\n    say \"this pathspec should glob\", it is reasonable for us to say \"no,\n    --follow does not support globbing\" (or in the case of log.follow,\n    avoid turning on follow mode). Which is what happens after this\n    patch.\n\n  - The set of allowed pathspec magic is obviously the same as in\n    GUARD_PATHSPEC(). We could perhaps factor these out to avoid\n    repetition. The point of having separate masks and GUARD calls is\n    that we don't necessarily know which parsed pathspecs will be used\n    where. But in this case, the two are heavily correlated. Still,\n    there may be some value in keeping them separate; it would make\n    anyone think twice about adding new magic to the list in\n    diff_check_follow_pathspec(). They'd need to touch\n    try_to_follow_renames() as well, which is the code that would\n    actually need to be updated to handle more exotic pathspecs.\n\n  - The documentation for log.follow says that it enables --follow\n    \"...when a single <path> is given\". We could possibly expand that to\n    say \"with no unsupported pathspec magic\", but that raises the\n    question of documenting which magic is supported. I think the\n    existing wording of \"single <path>\" sufficiently encompasses the\n    idea (the forbidden magic is stuff that might match multiple\n    entries), and the spirit remains the same.\n\nReported-by: Jim Pryor <dubiousjim@gmail.com>\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9eac5954e81037f282ace2efff7110af3440dc19", "commit_date": "2023-06-03T01:34:25Z", "commit_message": "diff: factor out --follow pathspec check\n\nIn --follow mode, we require exactly one pathspec. We check this\ncondition in two places:\n\n  - in diff_setup_done(), we complain if --follow is used with an\n    inapropriate pathspec\n\n  - in git-log's revision \"tweak\" function, we enable log.follow only if\n    the pathspec allows it\n\nThe duplication isn't a big deal right now, since the logic is so\nsimple. But in preparation for it becoming more complex, let's pull it\ninto a shared function.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e32caaa783a3a6b1d94834ee6e2d21ac36ff39f", "commit_date": "2023-06-03T01:34:25Z", "commit_message": "pathspec: factor out magic-to-name function\n\nWhen we have unsupported magic in a pathspec (because a command or code\npath does not support particular items), we list the unsupported ones in\nan error message.\n\nLet's factor out the code here that converts the bits back into their\nhuman-readable names, so that it can be used from other callers, which\nmay want to provide more flexible error messages.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e4cf01346831ec8f2d4d2bd4d325d2f152259c49", "commit_date": "2023-06-03T00:01:10Z", "commit_message": "surround %s with quotes when failed to lookup commit\n\nThe output may become confusing to recognize if the user\naccidentally gave an extra opening space, like:\n\n   $ git commit --fixup=\" 6d6360b67e99c2fd82d64619c971fdede98ee74b\"\n   fatal: could not lookup commit  6d6360b67e99c2fd82d64619c971fdede98ee74b\n\nand it will be better if we surround the %s specifier with single quotes.\n\nSigned-off-by: Teng Long <dyroneteng@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}], "seen": [{"commit_oid": "4e164a91f2706ce279634efa7ef0c73cab9ddebe", "commit_date": "2023-10-17T20:58:59Z", "commit_message": "Merge branch 'tb/pair-chunk-expect-size' into seen\n\nCode clean-up for jk/chunk-bounds topic.\n\nComments?\n\n* tb/pair-chunk-expect-size:\n  midx: read `OOFF` chunk with `pair_chunk_expect()`\n  midx: read `OIDL` chunk with `pair_chunk_expect()`\n  midx: read `OIDF` chunk with `pair_chunk_expect()`\n  commit-graph: read `BIDX` chunk with `pair_chunk_expect()`\n  commit-graph: read `GDAT` chunk with `pair_chunk_expect()`\n  commit-graph: read `CDAT` chunk with `pair_chunk_expect()`\n  commit-graph: read `OIDF` chunk with `pair_chunk_expect()`\n  chunk-format: introduce `pair_chunk_expect()` helper", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb28814f23766a4e9b09331fd4a74289eb1a5189", "commit_date": "2023-10-17T20:58:59Z", "commit_message": "Merge branch 'ps/do-not-trust-commit-graph-blindly-for-existence' into seen\n\nThe codepath to traverse the commit-graph learned to notice that a\ncommit is missing (e.g., corrupt repository lost an object), even\nthough it knows something about the commit (like its parents) from\nwhat is in commit-graph.\n\nComments?\n\n* ps/do-not-trust-commit-graph-blindly-for-existence:\n  commit: detect commits that exist in commit-graph but not in the ODB", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "15f3551682204d89891753b542212086410abab5", "commit_date": "2023-10-17T20:58:58Z", "commit_message": "Merge branch 'tb/format-pack-doc-update' into seen\n\nDoc update.\n\n* tb/format-pack-doc-update:\n  Documentation/gitformat-pack.txt: fix incorrect MIDX documentation\n  Documentation/gitformat-pack.txt: fix typo", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "16d5f2a05e41d4f3988ae71d8db130b567f993d3", "commit_date": "2023-10-17T20:58:58Z", "commit_message": "Merge branch 'js/doc-unit-tests-with-cmake' into seen\n\nUpdate the base topic to work with CMake builds.\n\n* js/doc-unit-tests-with-cmake:\n  cmake: handle also unit tests\n  cmake: use test names instead of full paths\n  cmake: fix typo in variable name\n  artifacts-tar: when including `.dll` files, don't forget the unit-tests\n  unit-tests: do show relative file paths\n  unit-tests: do not mistake `.pdb` files for being executable\n  cmake: also build unit tests", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0bd6bb1bb6e492aab0c2c0737f1ec652deabe4eb", "commit_date": "2023-10-17T20:58:57Z", "commit_message": "Merge branch 'js/doc-unit-tests' into seen\n\nProcess to add some form of low-level unit tests has started.\n\n* js/doc-unit-tests:\n  fixup! ci: run unit tests in CI\n  fixup! unit tests: add TAP unit test framework\n  ci: run unit tests in CI\n  unit tests: add TAP unit test framework\n  unit tests: add a project plan document", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e4bcd03016948987f8ac754744681cabab1c15b", "commit_date": "2023-10-17T20:58:57Z", "commit_message": "Merge branch 'eb/hash-transition' into seen\n\nTeach a repository to work with both SHA-1 and SHA-256 hash algorithms.\n\n* eb/hash-transition: (30 commits)\n  t1016-compatObjectFormat: add tests to verify the conversion between objects\n  t1006: test oid compatibility with cat-file\n  t1006: rename sha1 to oid\n  test-lib: compute the compatibility hash so tests may use it\n  builtin/ls-tree: let the oid determine the output algorithm\n  object-file: handle compat objects in check_object_signature\n  tree-walk: init_tree_desc take an oid to get the hash algorithm\n  builtin/cat-file: let the oid determine the output algorithm\n  rev-parse: add an --output-object-format parameter\n  repository: implement extensions.compatObjectFormat\n  object-file: update object_info_extended to reencode objects\n  object-file-convert: convert commits that embed signed tags\n  object-file-convert: convert commit objects when writing\n  object-file-convert: don't leak when converting tag objects\n  object-file-convert: convert tag objects when writing\n  object-file-convert: add a function to convert trees between algorithms\n  object: factor out parse_mode out of fast-import and tree-walk into in object.h\n  cache: add a function to read an OID of a specific algorithm\n  tag: sign both hashes\n  commit: export add_header_signature to support handling signatures on tags\n  ...", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6514b3ad31d9a4fbbf401ad8675532865f10127e", "commit_date": "2023-10-17T20:58:56Z", "commit_message": "Merge branch 'js/update-urls-in-doc-and-comment' into seen\n\nStale URLs have been updated to their current counterparts (or\narchive.org) and HTTP links are replaced with working HTTPS links.\n\n* js/update-urls-in-doc-and-comment:\n  doc: refer to internet archive\n  doc: update links for andre-simon.de\n  doc: update links to current pages\n  doc: switch links to https", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e85685eca6fcc4c8f8fe01f4e2b2ba36b6904532", "commit_date": "2023-10-17T20:58:56Z", "commit_message": "Merge branch 'la/trailer-cleanups' into seen\n\nCode clean-up.\n\n* la/trailer-cleanups:\n  trailer: only use trailer_block_* variables if trailers were found\n  trailer: use offsets for trailer_start/trailer_end\n  trailer: find the end of the log message\n  commit: ignore_non_trailer computes number of bytes to ignore", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "60c313b9dcc1898c9567ccf118ca1702b3d6bc5a", "commit_date": "2023-10-17T20:58:56Z", "commit_message": "Merge branch 'jc/rerere-cleanup' into seen\n\nCode clean-up.\n\n* jc/rerere-cleanup:\n  rerere: modernize use of empty strbuf\n  rerere: try_merge() should use LL_MERGE_ERROR when it means an error\n  rerere: fix comment on handle_file() helper\n  rerere: simplify check_one_conflict() helper function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44eceefa7aad29f07f2943837aa4bf2d8ae7ad24", "commit_date": "2023-10-17T20:58:55Z", "commit_message": "Merge branch 'cc/git-replay' into seen\n\nIntroduce \"git replay\", a tool meant on the server side without\nworking tree to recreate a history.\n\n* cc/git-replay:\n  replay: stop assuming replayed branches do not diverge\n  replay: add --contained to rebase contained branches\n  replay: add --advance or 'cherry-pick' mode\n  replay: use standard revision ranges\n  replay: make it a minimal server side command\n  replay: remove HEAD related sanity check\n  replay: remove progress and info output\n  replay: add an important FIXME comment about gpg signing\n  replay: change rev walking options\n  replay: introduce pick_regular_commit()\n  replay: die() instead of failing assert()\n  replay: start using parse_options API\n  replay: introduce new builtin\n  t6429: remove switching aspects of fast-rebase", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aada17400d18f1baca1c4e656785080bb80a0b3e", "commit_date": "2023-10-17T20:58:55Z", "commit_message": "Merge branch 'jc/diff-cached-fsmonitor-fix' into seen\n\nThe optimization based on fsmonitor in the \"diff --cached\"\ncodepath is resurrected with the \"fake-lstat\" introduced earlier.\n\nIt is unknown if the optimization is worth resurrecting, but in case...\n\n* jc/diff-cached-fsmonitor-fix:\n  diff-lib: fix check_removed() when fsmonitor is active", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7bd310f7cdff38eabb616bb1bcc05354a2b9e3b3", "commit_date": "2023-10-17T20:58:55Z", "commit_message": "Merge branch 'jc/fake-lstat' into seen\n\nA new helper to let us pretend that we called lstat() when we know\nour cache_entry is up-to-date via fsmonitor.\n\n* jc/fake-lstat:\n  cache: add fake_lstat()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12482d803366e1cc8cc14563cecefc897d38687b", "commit_date": "2023-10-17T20:58:49Z", "commit_message": "Merge branch 'kh/t7900-cleanup' into jch\n\n* kh/t7900-cleanup:\n  t7900: fix register dependency\n  t7900: factor out packfile dependency\n  t7900: fix `print-args` dependency\n  t7900: fix `pfx` dependency\n  t7900: factor out common schedule setup\n  t7900: factor out inheritance test dependency\n  t7900: create commit so that branch is born\n  t7900: setup and tear down clones\n  t7900: remove register dependency", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "56a87bee12d44388116f7fb2876825e1c3d60b14", "commit_date": "2023-10-17T20:58:49Z", "commit_message": "Merge branch 'tb/merge-tree-write-pack' into jch\n\n* tb/merge-tree-write-pack:\n  builtin/merge-tree.c: implement support for `--write-pack`\n  bulk-checkin: introduce `index_tree_bulk_checkin_incore()`\n  bulk-checkin: introduce `index_blob_bulk_checkin_incore()`\n  bulk-checkin: factor our `finalize_checkpoint()`\n  bulk-checkin: factor out `truncate_checkpoint()`\n  bulk-checkin: factor out `prepare_checkpoint()`\n  bulk-checkin: factor out `format_object_header_hash()`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dd1465afd80bfc1821f5f9383a4f8c728a1b8165", "commit_date": "2023-10-17T20:58:48Z", "commit_message": "Merge branch 'kh/pathspec-error-wo-repository-fix' into jch\n\n* kh/pathspec-error-wo-repository-fix:\n  grep: die gracefully when outside repository", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "76aae2e7a3136dda34b451e66c9f6b20973e571f", "commit_date": "2023-10-17T20:58:48Z", "commit_message": "Merge branch 'ni/die-message-fix-for-git-add' into jch\n\n* ni/die-message-fix-for-git-add:\n  builtin/add.c: clean up die() messages", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a48d367ed5bb7dbb3e377baacfef412bb9d29619", "commit_date": "2023-10-17T20:58:48Z", "commit_message": "Merge branch 'jc/grep-f-relative-to-cwd' into jch\n\n\"cd sub && git grep -f patterns\" tried to read \"patterns\" file at\nthe top level of the working tree; it has been corrected to read\n\"sub/patterns\" instead.\n\n* jc/grep-f-relative-to-cwd:\n  grep: -f <path> is relative to $cwd", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d277970c028c76f5ccf5f4bacafe512beaa58ddb", "commit_date": "2023-10-17T20:58:47Z", "commit_message": "Merge branch 'jc/update-list-references-to-lore' into jch\n\nDoc update.\n\n* jc/update-list-references-to-lore:\n  doc: update list archive reference to use lore.kernel.org", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "671be921ef5dda7706c82a2e948d077f1a74a5e2", "commit_date": "2023-10-17T20:58:47Z", "commit_message": "Merge branch 'sn/typo-grammo-phraso-fixes' into jch\n\nMany typos, ungrammatical sentences and wrong phrasing have been\nfixed.\n\n* sn/typo-grammo-phraso-fixes:\n  t/README: fix multi-prerequisite example\n  doc/gitk: s/sticked/stuck/\n  git-jump: admit to passing merge mode args to ls-files\n  doc/diff-options: improve wording of the log.diffMerges mention\n  doc: fix some typos, grammar and wording issues", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6652951edd223b883f15aea8d1714badd8617fbe", "commit_date": "2023-10-17T20:58:47Z", "commit_message": "Merge branch 'ak/color-decorate-symbols' into jch\n\nA new config for coloring.\n\n* ak/color-decorate-symbols:\n  decorate: add color.decorate.symbols config option", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "81c1d0e6a376dbd21887bb4c7db3812dfbc19a19", "commit_date": "2023-10-17T20:58:47Z", "commit_message": "Merge branch 'jx/remote-archive-over-smart-http' into jch\n\n\"git archive --remote=<remote>\" learned to talk over the smart\nhttp (aka stateless) transport.\n\n* jx/remote-archive-over-smart-http:\n  archive: support remote archive from stateless transport\n  transport-helper: call do_take_over() in connect_helper\n  transport-helper: call do_take_over() in process_connect\n  transport-helper: no connection restriction in connect_helper", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "865d8f7172d6b3c167e1e1d7f32e84c0532c673f", "commit_date": "2023-10-17T20:58:46Z", "commit_message": "Merge branch 'jx/sideband-chomp-newline-fix' into jch\n\nSideband demultiplexer fixes.\n\n* jx/sideband-chomp-newline-fix:\n  pkt-line: do not chomp newlines for sideband messages\n  pkt-line: memorize sideband fragment in reader\n  test-pkt-line: add option parser for unpack-sideband", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5d61247f7590bd0a6c815a0a42d0b379fa71d291", "commit_date": "2023-10-17T20:58:46Z", "commit_message": "Merge branch 'js/config-parse' into jch\n\nThe parsing routines for the configuration files have been split\ninto a separate file.\n\n* js/config-parse:\n  config-parse: split library out of config.[c|h]\n  config.c: accept config_parse_options in git_config_from_stdin\n  config: report config parse errors using cb\n  config: split do_event() into start and flush operations\n  config: split out config_parse_options", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bc2a74c8c5479ae7824b83651d4ac232399ec9bf", "commit_date": "2023-10-17T20:58:46Z", "commit_message": "Merge branch 'pw/rebase-sigint' into jch\n\nIf the commit log editor or other external programs (spawned via\n\"exec\" insn in the todo list) receive internactive signal during\n\"git rebase -i\", it caused not just the spawned program but the\n\"Git\" process that spawned them, which is often not what the end\nuser intended.  \"git\" learned to ignore SIGINT and SIGQUIT while\nwaiting for these subprocesses.\n\n* pw/rebase-sigint:\n  rebase -i: ignore signals when forking subprocesses", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a08079f1fa54db239f3c1245c9b1405e437a813", "commit_date": "2023-10-17T20:58:45Z", "commit_message": "Merge branch 'tb/path-filter-fix' into jch\n\nThe Bloom filter used for path limited history traversal was broken\non systems whose \"char\" is unsigned; update the implementation and\nbump the format version to 2.\n\n* tb/path-filter-fix:\n  bloom: introduce `deinit_bloom_filters()`\n  commit-graph: reuse existing Bloom filters where possible\n  object.h: fix mis-aligned flag bits table\n  commit-graph: drop unnecessary `graph_read_bloom_data_context`\n  commit-graph.c: unconditionally load Bloom filters\n  bloom: prepare to discard incompatible Bloom filters\n  bloom: annotate filters with hash version\n  commit-graph: new filter ver. that fixes murmur3\n  repo-settings: introduce commitgraph.changedPathsVersion\n  t4216: test changed path filters with high bit paths\n  t/helper/test-read-graph: implement `bloom-filters` mode\n  bloom.h: make `load_bloom_filter_from_graph()` public\n  t/helper/test-read-graph.c: extract `dump_graph_info()`\n  gitformat-commit-graph: describe version 2 of BDAT\n  commit-graph: ensure Bloom filters are read with consistent settings\n  revision.c: consult Bloom filters for root commits\n  t/t4216-log-bloom.sh: harden `test_bloom_filters_not_used()`", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "424f5e82fb271dee464e790d5f385f054b83bce3", "commit_date": "2023-10-17T20:58:45Z", "commit_message": "Merge branch 'rs/parse-options-value-int' into jch\n\nA bit of type safety for the \"value\" pointer used in the\nparse-options API.\n\n* rs/parse-options-value-int:\n  parse-options: use and require int pointer for OPT_CMDMODE\n  parse-options: add int value pointer to struct option", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0a87c297425413aae43bb65b447e827b8f5d105b", "commit_date": "2023-10-17T20:58:45Z", "commit_message": "Merge branch 'rj/status-bisect-while-rebase' into jch\n\n\"git status\" is taught to show both the branch being bisected and\nbeing rebased when both are in effect at the same time.\n\n* rj/status-bisect-while-rebase:\n  status: fix branch shown when not only bisecting", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e09156b4e63343f2eb94777be14a4b87336d60e4", "commit_date": "2023-10-17T20:58:44Z", "commit_message": "Merge branch 'tk/cherry-pick-sequence-requires-clean-worktree' into jch\n\n\"git cherry-pick A\" that replays a single commit stopped before\nclobbering local modification, but \"git cherry-pick A..B\" did not,\nwhich has been corrected.\n\n* tk/cherry-pick-sequence-requires-clean-worktree:\n  cherry-pick: refuse cherry-pick sequence if index is dirty", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e38ca77f439ea5413238293e290010848c37688d", "commit_date": "2023-10-17T20:58:44Z", "commit_message": "Merge branch 'jc/attr-tree-config' into jch\n\nThe attribute subsystem learned to honor `attr.tree` configuration\nthat specifies which tree to read the .gitattributes files from.\n\n* jc/attr-tree-config:\n  attr: add attr.tree for setting the treeish to read attributes from\n  attr: read attributes from HEAD when bare repo", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6129a3b8e076886790c19e54f9c72fc8a5ce3a0a", "commit_date": "2023-10-17T20:58:44Z", "commit_message": "### match next", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "934f21a72de2cbf20464e9fed6a7b299e967c15e", "commit_date": "2023-10-17T20:58:44Z", "commit_message": "Merge branch 'en/docfixes' into jch\n\nDocumentation typo and grammo fixes.\n\n* en/docfixes: (25 commits)\n  documentation: add missing parenthesis\n  documentation: add missing quotes\n  documentation: add missing fullstops\n  documentation: add some commas where they are helpful\n  documentation: fix whitespace issues\n  documentation: fix capitalization\n  documentation: fix punctuation\n  documentation: use clearer prepositions\n  documentation: add missing hyphens\n  documentation: remove unnecessary hyphens\n  documentation: add missing article\n  documentation: fix choice of article\n  documentation: whitespace is already generally plural\n  documentation: fix singular vs. plural\n  documentation: fix verb vs. noun\n  documentation: fix adjective vs. noun\n  documentation: fix verb tense\n  documentation: employ consistent verb tense for a list\n  documentation: fix subject/verb agreement\n  documentation: remove extraneous words\n  ...", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "23548e7ecb65053f1b2f105f4c696097a7d6c196", "commit_date": "2023-10-17T20:58:43Z", "commit_message": "Merge branch 'bc/racy-4gb-files' into jch\n\nThe index file has room only for lower 32-bit of the file size in\nthe cached stat information, which means cached stat information\nwill have 0 in its sd_size member for a file whose size is multiple\nof 4GiB.  This is mistaken for a racily clean path.  Avoid it by\nstoring a bogus sd_size value instead for such files.\n\n* bc/racy-4gb-files:\n  Prevent git from rehashing 4GiB files\n  t: add a test helper to truncate files", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8188e4060a046618a1c80e21b58ec9a725abaf83", "commit_date": "2023-10-17T20:58:43Z", "commit_message": "Merge branch 'jc/fail-stash-to-store-non-stash' into jch\n\nFeeding \"git stash store\" with a random commit that was not created\nby \"git stash create\" now errors out.\n\n* jc/fail-stash-to-store-non-stash:\n  stash: be careful what we store", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cd182b7c67673610136937e83f68c4fca3e69381", "commit_date": "2023-10-17T20:58:43Z", "commit_message": "Merge branch 'so/diff-merges-dd' into jch\n\n\"git log\" and friends learned \"--dd\" that is a short-hand for\n\"--diff-merges=first-parent -p\".\n\n* so/diff-merges-dd:\n  completion: complete '--dd'\n  diff-merges: introduce '--dd' option\n  diff-merges: improve --diff-merges documentation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f9700612ca701ded974b93ebbd7ff3c660376073", "commit_date": "2023-10-17T20:58:42Z", "commit_message": "Merge branch 'ps/rewritten-is-per-worktree-doc' into jch\n\nDoc update.\n\n* ps/rewritten-is-per-worktree-doc:\n  doc/git-worktree: mention \"refs/rewritten\" as per-worktree refs", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "15c17e96a869f1f4c71d124aac6c6c05afaa076f", "commit_date": "2023-10-17T20:58:42Z", "commit_message": "Merge branch 'ak/pretty-decorate-more-fix' into jch\n\nUnlike \"git log --pretty=%D\", \"git log --pretty=\"%(decorate)\" did\nnot auto-initialize the decoration subsystem, which has been\ncorrected.\n\n* ak/pretty-decorate-more-fix:\n  pretty: fix ref filtering for %(decorate) formats", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6f0940a7808289f9ddde504bc06dde46733cedc0", "commit_date": "2023-10-17T20:58:42Z", "commit_message": "Merge branch 'vd/loose-ref-iteration-optimization' into jch\n\nThe code to iterate over loose references have been optimized to\nreduce the number of lstat() system calls.\n\n* vd/loose-ref-iteration-optimization:\n  files-backend.c: avoid stat in 'loose_fill_ref_dir'\n  dir.[ch]: add 'follow_symlink' arg to 'get_dtype'\n  dir.[ch]: expose 'get_dtype'\n  ref-cache.c: fix prefix matching in ref iteration", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0f4da2baea55921eed94192e420e27de80f0c6c1", "commit_date": "2023-10-17T20:58:42Z", "commit_message": "Merge branch 'jk/chunk-bounds' into jch\n\nThe codepaths that read \"chunk\" formatted files have been corrected\nto pay attention to the chunk size and notice broken files.\n\n* jk/chunk-bounds: (21 commits)\n  t5319: make corrupted large-offset test more robust\n  chunk-format: drop pair_chunk_unsafe()\n  commit-graph: detect out-of-order BIDX offsets\n  commit-graph: check bounds when accessing BIDX chunk\n  commit-graph: check bounds when accessing BDAT chunk\n  commit-graph: bounds-check generation overflow chunk\n  commit-graph: check size of generations chunk\n  commit-graph: bounds-check base graphs chunk\n  commit-graph: detect out-of-bounds extra-edges pointers\n  commit-graph: check size of commit data chunk\n  midx: check size of revindex chunk\n  midx: bounds-check large offset chunk\n  midx: check size of object offset chunk\n  midx: enforce chunk alignment on reading\n  midx: check size of pack names chunk\n  commit-graph: check consistency of fanout table\n  midx: check size of oid lookup chunk\n  commit-graph: check size of oid fanout chunk\n  midx: stop ignoring malformed oid fanout chunk\n  t: add library for munging chunk-format files\n  ...", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d03f37be0bbd2dee62c359d6e29d842d309446cc", "commit_date": "2023-10-17T20:58:41Z", "commit_message": "Merge branch 'jc/merge-ort-attr-index-fix' into jch\n\nFix \"git merge-tree\" to stop segfaulting when the --attr-source\noption is used.\n\n* jc/merge-ort-attr-index-fix:\n  merge-ort: initialize repo in index state", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "080dddc9c03b54d118ec357e6ca61a4f3d84d655", "commit_date": "2023-10-17T20:58:41Z", "commit_message": "Merge branch 'sn/cat-file-doc-update' into jch\n\n\"git cat-file\" documentation updates.\n\n* sn/cat-file-doc-update:\n  doc/cat-file: make synopsis and description less confusing", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8b5b70eda938373e4142a472cfa1a6fd0d078dcd", "commit_date": "2023-10-17T20:58:41Z", "commit_message": "Merge branch 'xz/commit-title-soft-limit-doc' into jch\n\nDoc update.\n\n* xz/commit-title-soft-limit-doc:\n  doc: correct the 50 characters soft limit (+)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "30470954bcf91cea1bf11134915aa8790810cbe8", "commit_date": "2023-10-17T20:58:41Z", "commit_message": "Merge branch 'tb/repack-max-cruft-size' into jch\n\n\"git repack\" learned \"--max-cruft-size\" to prevent cruft packs from\ngrowing without bounds.\n\n* tb/repack-max-cruft-size:\n  repack: free existing_cruft array after use\n  builtin/repack.c: avoid making cruft packs preferred\n  builtin/repack.c: implement support for `--max-cruft-size`\n  builtin/repack.c: parse `--max-pack-size` with OPT_MAGNITUDE\n  t7700: split cruft-related tests to t7704", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4f9554922a5e910f350c6a6033f81cb6361a4624", "commit_date": "2023-10-17T20:58:40Z", "commit_message": "Merge branch 'ty/merge-tree-strategy-options' into jch\n\n\"git merge-tree\" learned to take strategy backend specific options\nvia the \"-X\" option, like \"git merge\" does.\n\n* ty/merge-tree-strategy-options:\n  merge: introduce {copy|clear}_merge_options()\n  merge-tree: add -X strategy option", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5ed4a8f15078a66c690f16b9ad5da472ca68467d", "commit_date": "2023-10-17T20:52:10Z", "commit_message": "builtin/merge-tree.c: implement support for `--write-pack`\n\nWhen using merge-tree often within a repository[^1], it is possible to\ngenerate a relatively large number of loose objects, which can result in\ndegraded performance, and inode exhaustion in extreme cases.\n\nBuilding on the functionality introduced in previous commits, the\nbulk-checkin machinery now has support to write arbitrary blob and tree\nobjects which are small enough to be held in-core. We can use this to\nwrite any blob/tree objects generated by ORT into a separate pack\ninstead of writing them out individually as loose.\n\nThis functionality is gated behind a new `--write-pack` option to\n`merge-tree` that works with the (non-deprecated) `--write-tree` mode.\n\nThe implementation is relatively straightforward. There are two spots\nwithin the ORT mechanism where we call `write_object_file()`, one for\ncontent differences within blobs, and another to assemble any new trees\nnecessary to construct the merge. In each of those locations,\nconditionally replace calls to `write_object_file()` with\n`index_blob_bulk_checkin_incore()` or `index_tree_bulk_checkin_incore()`\ndepending on which kind of object we are writing.\n\nThe only remaining task is to begin and end the transaction necessary to\ninitialize the bulk-checkin machinery, and move any new pack(s) it\ncreated into the main object store.\n\n[^1]: Such is the case at GitHub, where we run presumptive \"test merges\"\n  on open pull requests to see whether or not we can light up the merge\n  button green depending on whether or not the presumptive merge was\n  conflicted.\n\n  This is done in response to a number of user-initiated events,\n  including viewing an open pull request whose last test merge is stale\n  with respect to the current base and tip of the pull request. As a\n  result, merge-tree can be run very frequently on large, active\n  repositories.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "470605d6bbfe2f61f89645831d55beeb69dec3b9", "commit_date": "2023-10-17T20:52:10Z", "commit_message": "bulk-checkin: introduce `index_tree_bulk_checkin_incore()`\n\nThe remaining missing piece in order to teach the `merge-tree` builtin\nhow to write the contents of a merge into a pack is a function to index\ntree objects into a bulk-checkin pack.\n\nThis patch implements that missing piece, which is a thin wrapper around\nall of the functionality introduced in previous commits.\n\nIf and when Git gains support for a \"compatibility\" hash algorithm, the\nchanges to support that here will be minimal. The bulk-checkin machinery\nwill need to convert the incoming tree to compute its length under the\ncompatibility hash, necessary to reconstruct its header. With that\ninformation (and the converted contents of the tree), the bulk-checkin\nmachinery will have enough to keep track of the converted object's hash\nin order to update the compatibility mapping.\n\nWithin `deflate_tree_to_pack_incore()`, the changes should be limited\nto something like:\n\n    struct strbuf converted = STRBUF_INIT;\n    if (the_repository->compat_hash_algo) {\n      if (convert_object_file(&compat_obj,\n                              the_repository->hash_algo,\n                              the_repository->compat_hash_algo, ...) < 0)\n        die(...);\n\n      format_object_header_hash(the_repository->compat_hash_algo,\n                                OBJ_TREE, size);\n    }\n    /* compute the converted tree's hash using the compat algorithm */\n    strbuf_release(&converted);\n\n, assuming related changes throughout the rest of the bulk-checkin\nmachinery necessary to update the hash of the converted object, which\nare likewise minimal in size.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1f68c4eaee6c72522ee9269c6fd54f0d5b1dcc60", "commit_date": "2023-10-17T20:52:09Z", "commit_message": "bulk-checkin: introduce `index_blob_bulk_checkin_incore()`\n\nNow that we have factored out many of the common routines necessary to\nindex a new object into a pack created by the bulk-checkin machinery, we\ncan introduce a variant of `index_blob_bulk_checkin()` that acts on\nblobs whose contents we can fit in memory.\n\nThis will be useful in a couple of more commits in order to provide the\n`merge-tree` builtin with a mechanism to create a new pack containing\nany objects it created during the merge, instead of storing those\nobjects individually as loose.\n\nSimilar to the existing `index_blob_bulk_checkin()` function, the\nentrypoint delegates to `deflate_blob_to_pack_incore()`, which is\nresponsible for formatting the pack header and then deflating the\ncontents into the pack. The latter is accomplished by calling\ndeflate_blob_contents_to_pack_incore(), which takes advantage of the\nearlier refactoring and is responsible for writing the object to the\npack and handling any overage from pack.packSizeLimit.\n\nThe bulk of the new functionality is implemented in the function\n`stream_obj_to_pack_incore()`, which is a generic implementation for\nwriting objects of arbitrary type (whose contents we can fit in-core)\ninto a bulk-checkin pack.\n\nThe new function shares an unfortunate degree of similarity to the\nexisting `stream_blob_to_pack()` function. But DRY-ing up these two\nwould likely be more trouble than it's worth, since the latter has to\ndeal with reading and writing the contents of the object.\n\nConsistent with the rest of the bulk-checkin mechanism, there are no\ndirect tests here. In future commits when we expose this new\nfunctionality via the `merge-tree` builtin, we will test it indirectly\nthere.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b9fde6512959b6d4c9f48b5ed481bd14e4afe752", "commit_date": "2023-10-17T20:52:09Z", "commit_message": "bulk-checkin: factor our `finalize_checkpoint()`\n\nIn a similar spirit as previous commits, factor out the routine to\nfinalize the just-written object from the bulk-checkin mechanism.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9efe1ce1ae73e172476c1205f3fb2747c7f7f060", "commit_date": "2023-10-17T20:52:09Z", "commit_message": "bulk-checkin: factor out `truncate_checkpoint()`\n\nIn a similar spirit as previous commits, factor our the routine to\ntruncate a bulk-checkin packfile when writing past the pack size limit.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "64e695e6f15a2c3c161ba06ed4f631030a1c919b", "commit_date": "2023-10-17T20:52:09Z", "commit_message": "bulk-checkin: factor out `prepare_checkpoint()`\n\nIn a similar spirit as the previous commit, factor out the routine to\nprepare streaming into a bulk-checkin pack into its own function. Unlike\nthe previous patch, this is a verbatim copy and paste.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b821ec6a2972ab7db765dd69c27979f7c01eecb6", "commit_date": "2023-10-17T20:52:09Z", "commit_message": "bulk-checkin: factor out `format_object_header_hash()`\n\nBefore deflating a blob into a pack, the bulk-checkin mechanism prepares\nthe pack object header by calling `format_object_header()`, and writing\ninto a scratch buffer, the contents of which eventually makes its way\ninto the pack.\n\nFuture commits will add support for deflating multiple kinds of objects\ninto a pack, and will likewise need to perform a similar operation as\nbelow.\n\nThis is a mostly straightforward extraction, with one notable exception.\nInstead of hard-coding `the_hash_algo`, pass it in to the new function\nas an argument. This isn't strictly necessary for our immediate purposes\nhere, but will prove useful in the future if/when the bulk-checkin\nmechanism grows support for the hash transition plan.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "828f047c2fcb322f5bd00b6cacdd556d3d5b15d4", "commit_date": "2023-10-17T20:51:08Z", "commit_message": "grep: die gracefully when outside repository\n\nDie gracefully when `git grep --no-index` is run outside of a Git\nrepository and the path is outside the directory tree.\n\nIf you are not in a Git repository and say:\n\n    git grep --no-index search ..\n\nYou trigger a `BUG`:\n\n    BUG: environment.c:213: git environment hasn't been setup\n    Aborted (core dumped)\n\nBecause `..` is a valid path which is treated as a pathspec. Then\n`pathspec` figures out that it is not in the current directory tree. The\n`BUG` is triggered when `pathspec` tries to advice the user about the path\nto the (non-existing) repository.\n\nReported-by: ks1322 ks1322 <ks1322@gmail.com>\nSigned-off-by: Kristoffer Haugsbakk <code@khaugsbakk.name>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3ae4a7178ffba76f7d27dd2c1480d4ded6dda7b5", "commit_date": "2023-10-17T20:00:44Z", "commit_message": "t7900: fix register dependency\n\nThe test `maintenance.auto config option` will fail if any preceding test\nhas run `git maintenance register` since that turns `maintenance.auto` off\nfor that repository and later calls to `unregister` will not turn it back\nto the default `true` value.\n\nStart with a fresh repository in this test.\n\nSigned-off-by: Kristoffer Haugsbakk <code@khaugsbakk.name>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bf236ef83410c91fa00daa83c51ea6e5ba1a7c23", "commit_date": "2023-10-17T20:00:44Z", "commit_message": "t7900: factor out packfile dependency\n\nTests `'--schedule inheritance weekly -> daily -> hourly` and\n`maintenance.strategy inheritance` depend on the packfile made in\n`incremental-repack task`.\n\nFactor out the packfile creation.\n\nSigned-off-by: Kristoffer Haugsbakk <code@khaugsbakk.name>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "df169ebf3b510f220f3093042fd2b39049d93d8f", "commit_date": "2023-10-17T20:00:44Z", "commit_message": "t7900: fix `print-args` dependency\n\nTest `use launchctl list to prevent extra work` depends on `print-args`\nfrom `start and stop macOS maintenance`.\n\nDuplicate the script writing.\n\nSigned-off-by: Kristoffer Haugsbakk <code@khaugsbakk.name>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4489382a5b90216b381cca0e4e1ceed228f634f2", "commit_date": "2023-10-17T20:00:44Z", "commit_message": "t7900: fix `pfx` dependency\n\nTest `start and stop when several schedulers are available` depends on\n`pfx` from `start and stop macOS maintenance`.\n\nDuplicate the behavior.\n\nSigned-off-by: Kristoffer Haugsbakk <code@khaugsbakk.name>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "23db85aff5cb77959602e6ca3d076a688c3bd841", "commit_date": "2023-10-17T20:00:43Z", "commit_message": "t7900: factor out common schedule setup\n\nTests `magic markers are correct` and `stop preserves surrounding\nschedule` depend on some setup in `start preserves existing schedule`.\n\nFactor out the setup code.\n\nSigned-off-by: Kristoffer Haugsbakk <code@khaugsbakk.name>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1053634f097c9a58953bd23df6cc33609a877280", "commit_date": "2023-10-17T20:00:43Z", "commit_message": "t7900: factor out inheritance test dependency\n\nFactor out the dependency that test `maintenance.strategy inheritance` has\non test `--schedule inheritance weekly -> daily -> hourly`.\n\nSigned-off-by: Kristoffer Haugsbakk <code@khaugsbakk.name>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9332d43ccc7d3fe8c1c55dcac5b890ae7d0dacef", "commit_date": "2023-10-17T20:00:43Z", "commit_message": "t7900: create commit so that branch is born\n\n`pack-refs task` cannot be run in isolation but does pass if\n`maintenance.auto config option` is run first.\n\nCreate a commit so that `HEAD` does not point to an unborn branch.\n\nSigned-off-by: Kristoffer Haugsbakk <code@khaugsbakk.name>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "091cc553d3feeb4107c868dda30360bb8b1cad03", "commit_date": "2023-10-17T20:00:43Z", "commit_message": "t7900: setup and tear down clones\n\nTest `loose-objects task` depends on the two clones setup in `prefetch\nmultiple remotes`.\n\nReuse the two clones setup and tear down the clones afterwards in both\ntests.\n\nSigned-off-by: Kristoffer Haugsbakk <code@khaugsbakk.name>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a0a14a3d41fa6694a2b2d7ac3805f0f313caf402", "commit_date": "2023-10-17T20:00:42Z", "commit_message": "t7900: remove register dependency\n\n`stop from existing schedule` depends on the preceding test `start from\nempty cron table` because the preceding test registers the\nrepository. Without it, the \u201cstop\u201d test fails because `config` fails to\nget the repository:\n\n    git config --get --global --fixed-value maintenance.repo \"$(pwd)\"\n\nRemove this dependency by setting up the state and tearing it down\nindependently.\n\nSigned-off-by: Kristoffer Haugsbakk <code@khaugsbakk.name>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "48399e9cf0348060fc03df794dab587eaf14cc6e", "commit_date": "2023-10-17T19:41:55Z", "commit_message": "builtin/add.c: clean up die() messages\n\nAs described in the CodingGuidelines document, a single line message\ngiven to die() and its friends should not capitalize its first word,\nand should not add full-stop at the end.\n\nSigned-off-by: Naomi Ibe <naomi.ibeh69@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "990adccbdf0d8d1056c49a5ed546e744f542ba8f", "commit_date": "2023-10-16T22:05:27Z", "commit_message": "status: fix branch shown when not only bisecting\n\nIn 83c750acde (wt-status.*: better advice for git status added,\n2012-06-05), git-status received new informative messages to describe\nthe ongoing work in a worktree.\n\nThese messages were enhanced in 0722c805d6 (status: show the branch name\nif possible in in-progress info, 2013-02-03), to show, if possible, the\nbranch where the operation was initiated.\n\nSince then, we show incorrect information when several operations are in\nprogress and one of them is bisect:\n\n   $ git checkout -b foo\n   $ GIT_SEQUENCE_EDITOR='echo break >' git rebase -i HEAD~\n   $ git checkout -b bar\n   $ git bisect start\n   $ git status\n   ...\n\n   You are currently editing a commit while rebasing branch 'bar' on '...'.\n\n   You are currently bisecting, started from branch 'bar'.\n\n   ...\n\nNote that we erroneously say \"while rebasing branch 'bar'\" when we\nshould be referring to \"foo\".\n\nThis must have gone unnoticed for so long because it must be unusual to\nstart a bisection while another operation is in progress.  And even less\nusual to involve different branches.\n\nIt caught my attention reviewing a leak introduced in 8b87cfd000\n(wt-status: move strbuf into read_and_strip_branch(), 2013-03-16).\n\nA simple change to deal with this situation can be to record in struct\nwt_status_state, the branch where the bisect starts separately from the\nbranch related to other operations.\n\nLet's do it and so we'll be able to display correct information and\nwe'll avoid the leak as well.\n\nSigned-off-by: Rub\u00e9n Justo <rjusto@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "19b2961a6de63ea5ad946de9ad18f38055b6ce87", "commit_date": "2023-10-16T16:36:30Z", "commit_message": "cmake: handle also unit tests\n\nThe unit tests should also be available e.g. in Visual Studio's Test\nExplorer when configuring Git's source code via CMake.\n\nSuggested-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c9ad532668b879548f655de263123f9ca35b0075", "commit_date": "2023-10-16T16:36:30Z", "commit_message": "cmake: use test names instead of full paths\n\nThe primary purpose of Git's CMake definition is to allow developing Git\nin Visual Studio. As part of that, the CTest feature allows running\nindividual test scripts conveniently in Visual Studio's Test Explorer.\n\nHowever, this Test Explorer's design targets object-oriented languages\nand therefore expects the test names in the form\n`<namespace>.<class>.<testname>`. And since we specify the full path\nof the test scripts instead, including the ugly `/.././t/` part, these\ndots confuse the Test Explorer and it uses a large part of the path as\n\"namespace\".\n\nLet's just use `t.suite.<name>` instead. This presents the tests in\nVisual Studio's Test Explorer in the following form by default (i.e.\nunless the user changes the view via the \"Group by\" menu):\n\n\t\u25e2 \u25c8 git\n\t \u25e2 \u25c8 t\n\t  \u25e2 \u25c8 suite\n\t     \u25c8 t0000-basic\n\t     \u25c8 t0001-init\n\t     \u25c8 t0002-gitfile\n\t     [...]\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "af6a8d0bd63b38d97086ba499c200da4facc58d2", "commit_date": "2023-10-16T16:36:30Z", "commit_message": "cmake: fix typo in variable name\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f5fc20f4f66ef4637514d37ef47f8da1d8db824f", "commit_date": "2023-10-16T16:36:29Z", "commit_message": "artifacts-tar: when including `.dll` files, don't forget the unit-tests\n\nAs of recent, Git also builds executables in `t/unit-tests/`. For\ntechnical reasons, when building with CMake and Visual C, the\ndependencies (\".dll files\") need to be copied there, too, otherwise\nrunning the executable will fail \"due to missing dependencies\".\n\nThe CMake definition already contains the directives to copy those\n`.dll` files, but we also need to adjust the `artifacts-tar` rule in\nthe `Makefile` accordingly to let the `vs-test` job in the CI runs\npass successfully.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a04fe3906bd8dca2c4f0a8d0e41d9bd65e77853", "commit_date": "2023-10-16T16:36:29Z", "commit_message": "unit-tests: do show relative file paths\n\nVisual C interpolates `__FILE__` with the absolute _Windows_ path of\nthe source file. GCC interpolates it with the relative path, and the\ntests even verify that.\n\nSo let's make sure that the unit tests only emit such paths.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7c3f3414bb41de4b821765346804257f905e50c9", "commit_date": "2023-10-16T16:36:29Z", "commit_message": "unit-tests: do not mistake `.pdb` files for being executable\n\nWhen building the unit tests via CMake, the `.pdb` files are built.\nThose are, essentially, files containing the debug information\nseparately from the executables.\n\nLet's not confuse them with the executables we actually want to run.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fb6bf7c4fbbf9dfb7ac637725e7e0f4caec99a2c", "commit_date": "2023-10-16T16:36:29Z", "commit_message": "cmake: also build unit tests\n\nA new, better way to run unit tests was just added to Git. This adds\nsupport for building those unit tests via CMake.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "44c47c94a080b24c1d2cf1024424121d66f45113", "commit_date": "2023-10-16T16:35:40Z", "commit_message": "fixup! ci: run unit tests in CI", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "031348c1b352512d16c1f64e47a873c4dbd1e82e", "commit_date": "2023-10-16T16:34:23Z", "commit_message": "fixup! unit tests: add TAP unit test framework\n\nHere are a couple of cleanups for the unit test framework that I\nnoticed.\n\nUpdate the documentation of the example custom check to reflect the\nchange in return value of test_assert() and mention that\nchecks should be careful when dereferencing pointer arguments.\n\nAlso avoid evaluating macro augments twice in check_int() and\nfriends. The global variable test__tmp was introduced to avoid\nevaluating the arguments to these macros more than once but the macros\nfailed to use it when passing the values being compared to\ncheck_int_loc().\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ad080df1e44f7c563b1c7e3001c061d178f72dbe", "commit_date": "2023-10-14T17:18:33Z", "commit_message": "midx: read `OOFF` chunk with `pair_chunk_expect()`\n\nPerform an identical conversion as in previous commits to read the\nOOFF chunk in the MIDX machinery.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a2f03df93d160956ea4e89ba2ef1e612439f2c66", "commit_date": "2023-10-14T17:18:33Z", "commit_message": "midx: read `OIDL` chunk with `pair_chunk_expect()`\n\nPerform an identical conversion as in previous commits to read the\nOIDL chunk in the MIDX machinery.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cd9fe13721f0d8ba91bf1e6740bfa9ebbcc015f8", "commit_date": "2023-10-14T17:18:33Z", "commit_message": "midx: read `OIDF` chunk with `pair_chunk_expect()`\n\nPerform an identical conversion as in previous commits to read the\nOIDF chunk in the MIDX machinery.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "422bc1df9205a4c7b8f464cb00cb6611b9094718", "commit_date": "2023-10-14T17:18:33Z", "commit_message": "commit-graph: read `BIDX` chunk with `pair_chunk_expect()`\n\nPerform an identical conversion as in previous commits to read the BIDX\nchunk.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6360d9e56e3079eaeb7e8fc9ba9c002768ac856a", "commit_date": "2023-10-14T17:18:33Z", "commit_message": "commit-graph: read `GDAT` chunk with `pair_chunk_expect()`\n\nPerform an identical conversion as in previous commits to read the GDAT\nchunk.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "56cebb74c66f3462f1ded1d99ed186aa65b4446f", "commit_date": "2023-10-14T17:18:33Z", "commit_message": "commit-graph: read `CDAT` chunk with `pair_chunk_expect()`\n\nPerform a similar conversion as in the previous commit read the CDAT\nbits.\n\nWhile we're here, mark the error() string for translation, and guard\nagainst overflow when computing the expected size by wrapping it in an\nst_mult() call.\n\nNote that the pre-image of this patch was already sufficiently guarded\nagainst overflow, since GRAPH_DATA_WIDTH is defined as\n(the_hash_algo->rawsz + 16), so the expression in the parenthesis would\nget performed as a size_t, and then g->num_commits would be promoted to\nthe width of size_t for the purposes of evaluating this expression.\n\nBut let's make it explicitly clear that this computation is safe by\nwrapping it in an st_mult() call.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "af095595252d3dab36c0119643dcdbfdb3db334b", "commit_date": "2023-10-14T17:18:33Z", "commit_message": "commit-graph: read `OIDF` chunk with `pair_chunk_expect()`\n\nThe `OIDF` chunk can benefit from the new chunk-format API function\ndescribed in the previous commit. Convert it to `pair_chunk_expect()`\naccordingly.\n\nWhile we're at it, let's mark the error() string for translation.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e73bd731d4f2beb7a57a00745aa9c5467aac58d1", "commit_date": "2023-10-14T17:18:33Z", "commit_message": "chunk-format: introduce `pair_chunk_expect()` helper\n\nIn previous commits, the pair_chunk() interface grew a required \"size\"\npointer, so that the caller is forced to at least have a handle on the\nactual size of the given chunk.\n\nMany callers were converted to the new interface. A handful were instead\nconverted from the unsafe version of pair_chunk() to read_chunk() so\nthat they could check their expected size.\n\nThis led to a lot of code like:\n\n    static int graph_read_oid_fanout(const unsigned char *chunk_start,\n                                     size_t chunk_size, void *data)\n    {\n      struct commit_graph *g = data;\n      if (chunk_size != 256 * sizeof(uint32_t))\n        return error(\"commit-graph oid fanout chunk is wrong size\");\n      g->chunk_oid_fanout = (const uint32_t *)chunk_start;\n      return 0;\n    }\n\n, leaving the caller to use read_chunk(), like so:\n\n    read_chunk(cf, GRAPH_CHUNKID_OIDFANOUT, graph_read_oid_fanout, graph);\n\nThe callback to read_chunk() (in the above, `graph_read_oid_fanout()`)\ndoes nothing more than (a) assign a pointer to the location of the start\nof the chunk in the mmap'd file, and (b) assert that it has the correct\nsize.\n\nFor callers that know the expected size of their chunk(s) up-front, we\ncan simplify this by teaching the chunk-format API itself to validate\nthe expected size for us.\n\nThis is wrapped in a new function, called `pair_chunk_expect()` which\ntakes a \"size_t\" instead of a \"size_t *\", and validates that the given\nchunk matches the expected size as given.\n\nThis will allow us to reduce the number of lines of code it takes to\nperform these basic read_chunk() operations, by taking the above and\nreplacing it with something like:\n\n    if (pair_chunk_expect(cf, GRAPH_CHUNKID_OIDFANOUT,\n                          (const unsigned char **)&graph->chunk_oid_fanout,\n                          256 * sizeof(uint32_t)))\n      error(_(\"commit-graph oid fanout chunk is wrong size\"));\n\nWe will perform those transformations in the following commits.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7538f9d89b001be33a1b682b5cf207c4ba8fd8c5", "commit_date": "2023-10-14T17:17:25Z", "commit_message": "t5319: make corrupted large-offset test more robust\n\nThe test t5319.88 (\"reader bounds-checks large offset table\") can fail\nintermittently. The failure mode looks like this:\n\n  1. An earlier test sets up \"objects64\", a directory that can be used\n     to produce a midx with a corrupted large-offsets table. To get the\n     large offsets, it corrupts the normal \".idx\" file to have a fake\n     large offset, and then builds a midx from that.\n\n     That midx now has a large offset table, which is what we want. But\n     we also have a .idx on disk that has a corrupted entry. We'll call\n     the object with the corrupted large-offset \"X\".\n\n  2. In t5319.88, we further corrupt the midx by reducing the size of\n     the large-offset chunk (because our goal is to make sure we do not\n     do an out-of-bounds read on it).\n\n  3. We then enumerate all of the objects with \"cat-file --batch-check\n     --batch-all-objects\", expecting to see a complaint when we try to\n     show object X. We use --batch-all-objects because our objects64\n     repo doesn't actually have any refs (but if we check them all, one\n     of them will be the failing one). The default batch-check format\n     includes %(objecttype) and %(objectsize), both of which require us\n     to access the actual pack data (and thus requires looking at the\n     offset).\n\n  4a. Usually, this succeeds. We try to output object X, do a lookup via\n      the midx for the type/size lookup, and run into the corrupt\n      large-offset table.\n\n  4b. But sometimes we hit a different error. If another object points\n      to X as a delta base, then trying to find the type of that object\n      requires walking the delta chain to the base entry (since only the\n      base has the concrete type; deltas themselves are either OFS_DELTA\n      or REF_DELTA).\n\n      Normally this would not require separate offset lookups at all, as\n      deltas are usually stored as OFS_DELTA, specifying the relative\n      offset to the base. But the corrupt idx created in step 1 is done\n      directly with \"git pack-objects\" and does not pass the\n      --delta-base-offset option, meaning we have REF_DELTA entries!\n      Those do have to consult an index to find the location of the base\n      object, and they use the pack .idx to do this. The same pack .idx\n      that we know is corrupted from step 1!\n\n      Git does notice the error, but it does so by seeing the corrupt\n      .idx file, not the corrupt midx file, and the error it reports is\n      different, causing the test to fail.\n\nThe set of objects created in the test is deterministic. But the delta\nselection seems not to be (which is not too surprising, as it is\nmulti-threaded). I have seen the failure in Windows CI but haven't\nreproduced it locally (not even with --stress). Re-running a failed\nWindows CI job tends to work. But when I download and examine the trash\ndirectory from a failed run, it shows a different set of deltas than I\nget locally. But the exact source of non-determinism isn't that\nimportant; our test should be robust against any order.\n\nThere are a few options to fix this:\n\n  a. It would be OK for the \"objects64\" setup to \"unbreak\" the .idx file\n     after generating the midx. But then it would be hard for subsequent\n     tests to reuse it, since it is the corrupted idx that forces the\n     midx to have a large offset table.\n\n  b. The \"objects64\" setup could use --delta-base-offset. This would fix\n     our problem, but earlier tests have many hard-coded offsets. Using\n     OFS_DELTA would change the locations of objects in the pack (this\n     might even be OK because I think most of the offsets are within the\n     .idx file, but it seems brittle and I'm afraid to touch it).\n\n  c. Our cat-file output is in oid order by default. Since we store\n     bases before deltas, if we went in pack order (using the\n     \"--unordered\" flag), we'd always see our corrupt X before any delta\n     which depends on it. But using \"--unordered\" means we skip the midx\n     entirely. That makes sense, since it is just enumerating all of\n     the packs, using the offsets found in their .idx files directly.\n     So it doesn't work for our test.\n\n  d. We could ask directly about object X, rather than enumerating all\n     of them. But that requires further hard-coding of the oid (both\n     sha1 and sha256) of object X. I'd prefer not to introduce more\n     brittleness.\n\n  e. We can use a --batch-check format that looks at the pack data, but\n     doesn't have to chase deltas. The problem in this case is\n     %(objecttype), which has to walk to the base. But %(objectsize)\n     does not; we can get the value directly from the delta itself.\n     Another option would be %(deltabase), where we report the REF_DELTA\n     name but don't look at its data.\n\nI've gone with option (e) here. It's kind of subtle, but it's simple and\nhas no side effects.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a9ecda2788e229afc9b611acaa26d0d9d4da53ed", "commit_date": "2023-10-13T21:18:29Z", "commit_message": "The eighteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2920971a7fd345eeaa72feae554030850e06aeec", "commit_date": "2023-10-13T21:18:28Z", "commit_message": "Merge branch 'jk/decoration-and-other-leak-fixes'\n\nLeakfix.\n\n* jk/decoration-and-other-leak-fixes:\n  daemon: free listen_addr before returning\n  revision: clear decoration structs during release_revisions()\n  decorate: add clear_decoration() function", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "09dcbb486d964b59222136dd1668023098658eda", "commit_date": "2023-10-13T21:18:28Z", "commit_message": "Merge branch 'ar/diff-index-merge-base-fix'\n\n\"git diff --merge-base X other args...\" insisted that X must be a\ncommit and errored out when given an annotated tag that peels to a\ncommit, but we only need it to be a committish.  This has been\ncorrected.\n\n* ar/diff-index-merge-base-fix:\n  diff: fix --merge-base with annotated tags", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b32f5b6b34a2062e94d546c923e3bcb97aba4a16", "commit_date": "2023-10-13T21:18:28Z", "commit_message": "Merge branch 'js/submodule-fix-misuse-of-path-and-name'\n\nIn .gitmodules files, submodules are keyed by their names, and the\npath to the submodule whose name is $name is specified by the\nsubmodule.$name.path variable.  There were a few codepaths that\nmixed the name and path up when consulting the submodule database,\nwhich have been corrected.  It took long for these bugs to be found\nas the name of a submodule initially is the same as its path, and\nthe problem does not surface until it is moved to a different path,\nwhich apparently happens very rarely.\n\n* js/submodule-fix-misuse-of-path-and-name:\n  t7420: test that we correctly handle renamed submodules\n  t7419: test that we correctly handle renamed submodules\n  t7419, t7420: use test_cmp_config instead of grepping .gitmodules\n  t7419: actually test the branch switching\n  submodule--helper: return error from set-url when modifying failed\n  submodule--helper: use submodule_from_path in set-{url,branch}", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a45eddec40b7fd0b9a86ccd0e889a785829d55d7", "commit_date": "2023-10-13T21:18:28Z", "commit_message": "Merge branch 'jk/commit-graph-leak-fixes'\n\nLeakfix.\n\n* jk/commit-graph-leak-fixes:\n  commit-graph: clear oidset after finishing write\n  commit-graph: free write-context base_graph_name during cleanup\n  commit-graph: free write-context entries before overwriting\n  commit-graph: free graph struct that was not added to chain\n  commit-graph: delay base_graph assignment in add_graph_to_chain()\n  commit-graph: free all elements of graph chain\n  commit-graph: move slab-clearing to close_commit_graph()\n  merge: free result of repo_get_merge_bases()\n  commit-reach: free temporary list in get_octopus_merge_bases()\n  t6700: mark test as leak-free", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c75e91499ba78278418b76f85964642a18af449c", "commit_date": "2023-10-13T21:18:27Z", "commit_message": "Merge branch 'la/trailer-test-and-doc-updates'\n\nTest coverage for trailers has been improved.\n\n* la/trailer-test-and-doc-updates:\n  trailer doc: <token> is a <key> or <keyAlias>, not both\n  trailer doc: separator within key suppresses default separator\n  trailer doc: emphasize the effect of configuration variables\n  trailer --unfold help: prefer \"reformat\" over \"join\"\n  trailer --parse docs: add explanation for its usefulness\n  trailer --only-input: prefer \"configuration variables\" over \"rules\"\n  trailer --parse help: expose aliased options\n  trailer --no-divider help: describe usual \"---\" meaning\n  trailer: trailer location is a place, not an action\n  trailer doc: narrow down scope of --where and related flags\n  trailer: add tests to check defaulting behavior with --no-* flags\n  trailer test description: this tests --where=after, not --where=before\n  trailer tests: make test cases self-contained", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e56b9edf228928fed72578bb7a4e6a35b47c551c", "commit_date": "2023-10-13T21:18:27Z", "commit_message": "Merge branch 'ds/mailmap-entry-update'\n\nUpdate mailmap entry for Derrick.\n\n* ds/mailmap-entry-update:\n  mailmap: change primary address for Derrick Stolee", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5143ac07b17e2b025865378fce24cc11ac7bf8b1", "commit_date": "2023-10-13T20:33:35Z", "commit_message": "Prevent git from rehashing 4GiB files\n\nThe index stores file sizes using a uint32_t. This causes any file\nthat is a multiple of 2^32 to have a cached file size of zero.\nZero is a special value used by racily clean. This causes git to\nrehash every file that is a multiple of 2^32 every time git status\nor git commit is run.\n\nThis patch mitigates the problem by making all files that are a\nmultiple of 2^32 appear to have a size of 1<<31 instead of zero.\n\nThe value of 1<<31 is chosen to keep it as far away from zero\nas possible to help prevent things getting mixed up with unpatched\nversions of git.\n\nAn example would be to have a 2^32 sized file in the index of\npatched git. Patched git would save the file as 2^31 in the cache.\nAn unpatched git would very much see the file has changed in size\nand force it to rehash the file, which is safe. The file would\nhave to grow or shrink by exactly 2^31 and retain all of its\nctime, mtime, and other attributes for old git to not notice\nthe change.\n\nThis patch does not change the behavior of any file that is not\nan exact multiple of 2^32.\n\nSigned-off-by: Jason D. Hatton <jhatton@globalfinishing.com>\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "678eb55f5da174fce21f686f0073d56904c081c9", "commit_date": "2023-10-13T20:33:35Z", "commit_message": "t: add a test helper to truncate files\n\nIn a future commit, we're going to work with some large files which will\nbe at least 4 GiB in size.  To take advantage of the sparseness\nfunctionality on most Unix systems and avoid running the system out of\ndisk, it would be convenient to use truncate(2) to simply create a\nsparse file of sufficient size.\n\nHowever, the GNU truncate(1) utility isn't portable, so let's write a\ntiny test helper that does the work for us.\n\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9f9c40cf34c29d4ad700d9869435d159056fa6fb", "commit_date": "2023-10-13T18:43:29Z", "commit_message": "attr: add attr.tree for setting the treeish to read attributes from\n\n44451a2 (attr: teach \"--attr-source=<tree>\" global option to \"git\",\n2023-05-06) provided the ability to pass in a treeish as the attr\nsource. In the context of serving Git repositories as bare repos like we\ndo at GitLab however, it would be easier to point --attr-source to HEAD\nfor all commands by setting it once.\n\nAdd a new config attr.tree that allows this.\n\nSigned-off-by: John Cai <johncai86@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2386535511d1181afd4e892e2a866ffe5e1d7d21", "commit_date": "2023-10-13T18:43:29Z", "commit_message": "attr: read attributes from HEAD when bare repo\n\nThe motivation for 44451a2e5e (attr: teach \"--attr-source=<tree>\" global\noption to \"git\" , 2023-05-06), was to make it possible to use\ngitattributes with bare repositories.\n\nTo make it easier to read gitattributes in bare repositories however,\nlet's just make HEAD:.gitattributes the default. This is in line with\nhow mailmap works, 8c473cecfd (mailmap: default mailmap.blob in bare\nrepositories, 2012-12-13).\n\nSigned-off-by: John Cai <johncai86@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9499da0fd0acbc8376fdb14cd788d5fc573144eb", "commit_date": "2023-10-13T17:58:20Z", "commit_message": "commit: detect commits that exist in commit-graph but not in the ODB\n\nCommit graphs can become stale and contain references to commits that do\nnot exist in the object database anymore. Theoretically, this can lead\nto a scenario where we are able to successfully look up any such commit\nvia the commit graph even though such a lookup would fail if done via\nthe object database directly.\n\nAs the commit graph is mostly intended as a sort of cache to speed up\nparsing of commits we do not want to have diverging behaviour in a\nrepository with and a repository without commit graphs, no matter\nwhether they are stale or not. As commits are otherwise immutable, the\nonly thing that we really need to care about is thus the presence or\nabsence of a commit.\n\nTo address potentially stale commit data that may exist in the graph,\nour `lookup_commit_in_graph()` function will check for the commit's\nexistence in both the commit graph, but also in the object database. So\neven if we were able to look up the commit's data in the graph, we would\nstill pretend as if the commit didn't exist if it is missing in the\nobject database.\n\nWe don't have the same safety net in `parse_commit_in_graph_one()`\nthough. This function is mostly used internally in \"commit-graph.c\"\nitself to validate the commit graph, and this usage is fine. We do\nexpose its functionality via `parse_commit_in_graph()` though, which\ngets called by `repo_parse_commit_internal()`, and that function is in\nturn used in many places in our codebase.\n\nFor all I can see this function is never used to directly turn an object\nID into a commit object without additional safety checks before or after\nthis lookup. What it is being used for though is to walk history via the\nparent chain of commits. So when commits in the parent chain of a graph\nwalk are missing it is possible that we wouldn't notice if that missing\ncommit was part of the commit graph. Thus, a query like `git rev-parse\nHEAD~2` can succeed even if the intermittent commit is missing.\n\nIt's unclear whether there are additional ways in which such stale\ncommit graphs can lead to problems. In any case, it feels like this is a\nbigger bug waiting to happen when we gain additional direct or indirect\ncallers of `repo_parse_commit_internal()`. So let's fix the inconsistent\nbehaviour by checking for object existence via the object database, as\nwell.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4b313eedf530165c54e9f340aa6e9c59c2895308", "commit_date": "2023-10-12T21:55:00Z", "commit_message": "Documentation/gitformat-pack.txt: fix incorrect MIDX documentation\n\nBack in 32f3c541e3 (multi-pack-index: write pack names in chunk, 2018-07-12)\nthe MIDX's \"Packfile Names\" (or \"PNAM\", for short) chunk was described\nas containing an array of string entries. e0d1bcf825 notes that this is\nthe only chunk in the MIDX format's specification that is not guaranteed\nto be 4-byte aligned, and so should be placed last.\n\nThis isn't quite accurate: the entries within the PNAM chunk are not\nguaranteed to be aligned since they are arbitrary strings, but the\nchunk itself is aligned since the ending is padded with NUL bytes.\n\nThat external padding has always been there since 32f3c541e3 via\nmidx.c::write_midx_pack_names(), which ended with:\n\n    i = MIDX_CHUNK_ALIGNMENT - (written % MIDX_CHUNK_ALIGNMENT)\n    if (i < MIDX_CHUNK_ALIGNMENT) {\n      unsigned char padding[MIDX_CHUNK_ALIGNMENT];\n      memset(padding, 0, sizeof(padding))\n      hashwrite(f, padding, i);\n      written += i;\n    }\n\nIn fact, 32f3c541e3's log message itself describes the chunk in its\nfirst paragraph with:\n\n    Since filenames are not well structured, add padding to keep good\n    alignment in later chunks.\n\nSo these have always been externally aligned. Correct the corresponding\npart of our documentation to reflect that.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cc1dc95a66788f7e219e7bd66e36396e2879dedc", "commit_date": "2023-10-12T21:54:59Z", "commit_message": "Documentation/gitformat-pack.txt: fix typo\n\ne0d1bcf825 (multi-pack-index: add format details, 2018-07-12) describes\nthe MIDX's \"PNAM\" chunk as having entries which are \"null-terminated\nstrings\".\n\nThis is a typo, as strings are terminated with a NUL character, which is\na distinct concept from \"NULL\" or \"null\", which we typically reserve for\nthe void pointer to address 0.\n\nCorrect the documentation accordingly.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "59167d7d09fd7a1d64aa1d5be73bc484f6621894", "commit_date": "2023-10-12T19:18:27Z", "commit_message": "The seventeenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4ae4c705775132ff7f782966d20fc2dac1795691", "commit_date": "2023-10-12T19:18:27Z", "commit_message": "Merge branch 'js/ci-coverity'\n\nGitHub CI workflow has learned to trigger Coverity check.\n\n* js/ci-coverity:\n  coverity: detect and report when the token or project is incorrect\n  coverity: allow running on macOS\n  coverity: support building on Windows\n  coverity: allow overriding the Coverity project\n  coverity: cache the Coverity Build Tool\n  ci: add a GitHub workflow to submit Coverity scans", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c70e7a3cfd403fb6d669d3be8fbe3d530d3d8329", "commit_date": "2023-10-12T19:18:26Z", "commit_message": "Merge branch 'jm/git-status-submodule-states-docfix'\n\nDocfix.\n\n* jm/git-status-submodule-states-docfix:\n  git-status.txt: fix minor asciidoc format issue", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6e47cfcffc19a5a9cd5a04b0f81e26c123ba8ca8", "commit_date": "2023-10-12T19:18:26Z", "commit_message": "Merge branch 'rs/parse-opt-ctx-cleanup'\n\nCode clean-up.\n\n* rs/parse-opt-ctx-cleanup:\n  parse-options: drop unused parse_opt_ctx_t member", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6e5457d8c7332c279e1482c442922f954af5f8f2", "commit_date": "2023-10-12T17:59:36Z", "commit_message": "mailmap: change primary address for Derrick Stolee\n\nThe previous primary address is no longer valid.\n\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5b2424b658701c16e4fe12babf83fdb15d0f165a", "commit_date": "2023-10-12T17:41:59Z", "commit_message": "grep: -f <path> is relative to $cwd\n\nJust like OPT_FILENAME() does, \"git grep -f <path>\" should treat\nthe <path> relative to the original $cwd by paying attention to the\nprefix the command is given.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "43c8a30d150ecede9709c1f2527c8fba92c65f40", "commit_date": "2023-08-21T16:34:58Z", "commit_message": "Git 2.42\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "915e51b74eda1649b1066d191a0b47cdfbb63249", "commit_date": "2023-08-21T16:27:44Z", "commit_message": "Merge branch 'jk/function-pointer-mismatches-fix' (early part)\n\nFix a minor regression that some compiler might notice.\n\n* 'jk/function-pointer-mismatches-fix' (early part):\n  fsck: use enum object_type for fsck_walk callback", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5a50dd7edac36c4c2853690cd2c8e84127e29613", "commit_date": "2023-08-21T15:43:46Z", "commit_message": "Merge tag 'l10n-2.42.0-rnd2' of https://github.com/git-l10n/git-po\n\nl10n-2.42.0-rnd2\n\n* tag 'l10n-2.42.0-rnd2' of https://github.com/git-l10n/git-po:\n  l10n: zh_TW.po: Git 2.42\n  l10n: zh_CN: 2.42.0 round 2\n  l10n: zh_CN: v2.42.0 round 1\n  l10n: Update German translation\n  l10n: Update Catalan translation\n  l10n: tr: git 2.42.0\n  l10n: fr v2.42.0 rnd 2\n  l10n: fr v2.42.0 rnd 1\n  l10n: sv.po: Update Swedish translation 5549t0f0u\n  l10n: uk: update translation (2.42.0)\n  l10n: po-id for 2.42 (round 1)\n  l10n: ru.po: update Russian translation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d1f87c2148b025a9c664e64db17205783ef2991c", "commit_date": "2023-08-20T23:05:38Z", "commit_message": "Merge branch 'po-id' of github.com:bagasme/git-po\n\n* 'po-id' of github.com:bagasme/git-po:\n  l10n: po-id for 2.42 (round 1)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5e2dff212aaef6d1babf9735d2a2f583e517362a", "commit_date": "2023-08-20T14:01:37Z", "commit_message": "l10n: zh_TW.po: Git 2.42\n\nCo-authored-by: Lumynous <lumynou5.tw@gmail.com>\nSigned-off-by: Yi-Jyun Pan <pan93412@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bbeddee5d36dfa3fab16ccd0b78dcdcf66c3a99", "commit_date": "2023-08-20T04:17:32Z", "commit_message": "fsck: use enum object_type for fsck_walk callback\n\nWe switched the function interface for fsck callbacks in a1aad71601\n(fsck.h: use \"enum object_type\" instead of \"int\", 2021-03-28). However,\nwe accidentally flipped the type back to \"int\" as part of 0b4e9013f1\n(fsck: mark unused parameters in various fsck callbacks, 2023-07-03).\nThe mistake happened because that commit was written before a1aad71601\nand rebased forward, and I screwed up while resolving the conflict.\n\nCuriously, the compiler does not warn about this mismatch, at least not\nwhen using gcc and clang on Linux (nor in any of our CI environments).\nBased on 28abf260a5 (builtin/fsck.c: don't conflate \"int\" and \"enum\" in\ncallback, 2021-06-01), I'd guess that this would cause the AIX xlc\ncompiler to complain. I noticed because clang-18's UBSan now identifies\nmis-matched function calls at runtime, and does complain of this case\nwhen running the test suite.\n\nI'm not entirely clear on whether this mismatch is a problem in\npractice. Compilers are certainly free to make enums smaller than \"int\"\nif they don't need the bits, but I suspect that they have to promote\nback to int for function calls (though I didn't dig in the standard, and\nI won't be surprised if I'm simply wrong and the real-world impact would\ndepend on the ABI).\n\nRegardless, switching it back to enum is obviously the right thing to do\nhere; the switch to \"int\" was simply a mistake.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3cf978718f7ae720c7f743085e20abe48bd99b27", "commit_date": "2023-08-19T13:09:31Z", "commit_message": "Merge branch 'l10n-de-2.42' of github.com:ralfth/git\n\n* 'l10n-de-2.42' of github.com:ralfth/git:\n  l10n: Update German translation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6fb0e532d522c278ad15b6e55f5467f2f6d8d477", "commit_date": "2023-08-19T13:08:22Z", "commit_message": "Merge branch 'catalan' of github.com:Softcatala/git-po\n\n* 'catalan' of github.com:Softcatala/git-po:\n  l10n: Update Catalan translation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d731a52e4dc7b6b429339bf47382d0b68fe01018", "commit_date": "2023-08-19T13:07:47Z", "commit_message": "Merge branch 'update-uk-l10n' of github.com:arkid15r/git-ukrainian-l10n\n\n* 'update-uk-l10n' of github.com:arkid15r/git-ukrainian-l10n:\n  l10n: uk: update translation (2.42.0)", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c04e26683f8fbeff8c934794006fa64ab6aaead7", "commit_date": "2023-08-19T13:07:03Z", "commit_message": "Merge branch 'tl/zh_CN_2.42.0_rnd1' of github.com:dyrone/git\n\n* 'tl/zh_CN_2.42.0_rnd1' of github.com:dyrone/git:\n  l10n: zh_CN: 2.42.0 round 2\n  l10n: zh_CN: v2.42.0 round 1", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "7fdd36c22bd1ef4ae90dc3e7df1f560e2f06334a", "commit_date": "2023-08-19T13:05:00Z", "commit_message": "Merge branch 'master' of github.com:nafmo/git-l10n-sv\n\n* 'master' of github.com:nafmo/git-l10n-sv:\n  l10n: sv.po: Update Swedish translation 5549t0f0u", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d0d403b8bc33b677e667f68d662ad7b6d2b191d8", "commit_date": "2023-08-19T13:04:09Z", "commit_message": "Merge branch 'l10n-tr' of github.com:bitigchi/git-po\n\n* 'l10n-tr' of github.com:bitigchi/git-po:\n  l10n: tr: git 2.42.0", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "9441efe212bcf46a7695035a0c14e03c792c95c6", "commit_date": "2023-08-18T11:30:03Z", "commit_message": "l10n: zh_CN: 2.42.0 round 2\n\nSigned-off-by: Teng Long <dyroneteng@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb9c8863346dc4894c51654f24b2f4fa44d358e7", "commit_date": "2023-08-18T11:29:01Z", "commit_message": "l10n: zh_CN: v2.42.0 round 1\n\nSigned-off-by: Teng Long <dyroneteng@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f9972720e9a405e4f6924a7cde0ed5880687f4d0", "commit_date": "2023-08-17T22:50:05Z", "commit_message": "Merge branch 'ps/revision-stdin-with-options'\n\nTypofix to documentation added during this cycle.\n\n* ps/revision-stdin-with-options:\n  rev-list-options: fix typo in `--stdin` documentation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "62ce3dcd676f24f3acbc69a4029f2a2f5cd75dc0", "commit_date": "2023-08-17T22:50:05Z", "commit_message": "Merge branch 'sa/doc-ls-remote'\n\nMark-up fix to documentation added during this cycle.\n\n* sa/doc-ls-remote:\n  show-ref doc: fix carets in monospace", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fa43131a0990e264eca652fed3351fcb9a99e7f8", "commit_date": "2023-08-17T22:50:05Z", "commit_message": "Merge branch 'tl/notes-separator'\n\nTypo/grammofix to documentation added during this cycle.\n\n* tl/notes-separator:\n  notes doc: tidy up `--no-stripspace` paragraph\n  notes doc: split up run-on sentences", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a1d7c65007727565d75e2535d3e03f5f6c694864", "commit_date": "2023-08-17T15:00:36Z", "commit_message": "l10n: Update German translation\n\nSigned-off-by: Ralf Thielow <ralf.thielow@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c81f1a167659ce0634fdd1dcdb43c2697b546151", "commit_date": "2023-08-16T18:42:54Z", "commit_message": "rev-list-options: fix typo in `--stdin` documentation\n\nWith `--stdin`, we read *from* standard input, not *for*.\n\nSigned-off-by: Martin \u00c5gren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "18c4aac0dd33eca76607b54d347932d6ec655056", "commit_date": "2023-08-16T18:40:10Z", "commit_message": "show-ref doc: fix carets in monospace\n\nWhen commit 00bf685975 (show-ref doc: update for internal consistency,\n2023-05-19) switched from double quotes to backticks around our {caret}\nmacro, we started rendering \"{caret}\" literally. Fix this by replacing\nby a \"^\" character.\n\nSigned-off-by: Martin \u00c5gren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3a6e1ad80bdf5d09cb484e77cc4bfffdd9a15bdf", "commit_date": "2023-08-16T18:37:25Z", "commit_message": "notes doc: tidy up `--no-stripspace` paragraph\n\nWhere we document the `--no-stripspace` option, remove a superfluous\n\"For\" to fix the grammar. Mark option names and command names using\n`backticks` to set them in monospace.\n\nSigned-off-by: Martin \u00c5gren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "95b6ae9d747ed52912dec95fe397b11f0a5383ec", "commit_date": "2023-08-16T18:36:36Z", "commit_message": "notes doc: split up run-on sentences\n\nWhen commit c4e2aa7d45 (notes.c: introduce \"--[no-]stripspace\" option,\n2023-05-27) mentioned the new `--no-stripspace` in the documentation for\n`-m` and `-F`, it created run-on sentences. It also used slightly\ndifferent language in the two sections for no apparent reason. Split the\nsentences in two to improve readability, and while touching the two\nsites, make them more similar.\n\nSigned-off-by: Martin \u00c5gren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f8a7795b7ae5389e74fdd386a934cb16b05c9e4d", "commit_date": "2023-08-16T16:25:02Z", "commit_message": "l10n: Update Catalan translation\n\nSigned-off-by: Jordi Mas <jmas@softcatala.org>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d9dec13dde48c37d3c65305b3f8e5e4199a632bd", "commit_date": "2023-08-16T11:40:44Z", "commit_message": "l10n: tr: git 2.42.0\n\nSigned-off-by: Emir SARI <emir_sari@icloud.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "87afb88801a89267e5cfe36c9f3923279dfc464b", "commit_date": "2023-08-16T09:50:23Z", "commit_message": "l10n: fr v2.42.0 rnd 2\n\nSigned-off-by: Jean-No\u00ebl Avila <jn.avila@free.fr>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f846e08312d0e3d7eeda106f63eaf131e8af0c2c", "commit_date": "2023-08-16T09:48:16Z", "commit_message": "l10n: fr v2.42.0 rnd 1\n\nSigned-off-by: Jean-No\u00ebl Avila <jn.avila@free.fr>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b90a4a25e630cf40ed295e82f58306a309bbf76d", "commit_date": "2023-08-16T06:42:51Z", "commit_message": "l10n: sv.po: Update Swedish translation 5549t0f0u\n\nSigned-off-by: Peter Krefting <peter@softwolves.pp.se>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "5bf602fc3bc2159762bbce19d7c7a587c1386743", "commit_date": "2023-08-16T01:55:13Z", "commit_message": "l10n: uk: update translation (2.42.0)\n\nCo-authored-by: Kate Golovanova <kate@kgthreads.com>\nSigned-off-by: Arkadii Yakovets <ark@cho.red>\nSigned-off-by: Kate Golovanova <kate@kgthreads.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "62a26b36bd9bf76feb6940e2bee732bd62b429f8", "commit_date": "2023-08-15T23:24:56Z", "commit_message": "Merge branch 'master' of github.com:git/git\n\n* 'master' of github.com:git/git: (34 commits)\n  Git 2.42-rc2\n  t4053: avoid writing to unopened pipe\n  t4053: avoid race when killing background processes\n  Git 2.42-rc1\n  git maintenance: avoid console window in scheduled tasks on Windows\n  win32: add a helper to run `git.exe` without a foreground window\n  t9001: remove excessive GIT_SEND_EMAIL_NOTTY=1\n  mv: handle lstat() failure correctly\n  parse-options: disallow negating OPTION_SET_INT 0\n  repack: free geometry struct\n  send-email: avoid creating more than one Term::ReadLine object\n  send-email: drop FakeTerm hack\n  t0040: declare non-tab indentation to be okay in this script\n  advice: handle \"rebase\" in error_resolve_conflict()\n  A few more topics before -rc1\n  mailmap: change primary address for Glen Choo\n  gitignore: ignore clangd .cache directory\n  docs: update when `git bisect visualize` uses `gitk`\n  compat/mingw: implement a native locate_in_PATH()\n  run-command: conditionally define locate_in_PATH()\n  ...", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f1ed9d7dc0e49dc1a044941d821c9d2342313c26", "commit_date": "2023-08-15T17:20:02Z", "commit_message": "Git 2.42-rc2\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f9fe84b5a2a4055fdc2d272e3593c3f91db41626", "commit_date": "2023-08-15T17:19:47Z", "commit_message": "Merge branch 'pw/diff-no-index-from-named-pipes'\n\nTest updates.\n\n* pw/diff-no-index-from-named-pipes:\n  t4053: avoid writing to unopened pipe\n  t4053: avoid race when killing background processes", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e12aaa7ceb83c9229b392079ed9e38c36e82b81", "commit_date": "2023-08-15T17:19:47Z", "commit_message": "Merge branch 'st/mv-lstat-fix'\n\nCorrect use of lstat() that assumed a failing call would not\nclobber the statbuf.\n\n* st/mv-lstat-fix:\n  mv: handle lstat() failure correctly", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cecd6a5ffce2c35f18e8ac537c9e2f71ac99932b", "commit_date": "2023-08-15T17:19:47Z", "commit_message": "Merge branch 'jc/send-email-pre-process-fix'\n\nTest fix.\n\n* jc/send-email-pre-process-fix:\n  t9001: remove excessive GIT_SEND_EMAIL_NOTTY=1", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "32f4fa8d3be86a00188aa4c4af1cd375e25e4558", "commit_date": "2023-08-15T17:19:47Z", "commit_message": "Merge branch 'ds/maintenance-on-windows-fix'\n\nWindows updates.\n\n* ds/maintenance-on-windows-fix:\n  git maintenance: avoid console window in scheduled tasks on Windows\n  win32: add a helper to run `git.exe` without a foreground window", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc6bba66bc1de0296b7e452499b0ccd8e4c65b18", "commit_date": "2023-08-14T20:26:41Z", "commit_message": "Merge branch 'js/allow-t4000-to-be-indented-with-spaces'\n\nFile attribute update.\n\n* js/allow-t4000-to-be-indented-with-spaces:\n  t0040: declare non-tab indentation to be okay in this script", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fc71d024adbb000e692cbd06cb1a3195514ec771", "commit_date": "2023-08-14T20:26:41Z", "commit_message": "Merge branch 'jk/send-email-with-new-readline'\n\nAdjust to newer Term::ReadLine to prevent it from breaking\nthe interactive prompt code in send-email.\n\n* jk/send-email-with-new-readline:\n  send-email: avoid creating more than one Term::ReadLine object\n  send-email: drop FakeTerm hack", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6df312ad31e6b40e93ea2b1b6b1dc452db7cc0a1", "commit_date": "2023-08-14T20:26:40Z", "commit_message": "Merge branch 'jk/repack-leakfix'\n\nLeakfix.\n\n* jk/repack-leakfix:\n  repack: free geometry struct", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "aea6c0531cc97af2054455dcf4f39bd904dafb50", "commit_date": "2023-08-14T20:26:40Z", "commit_message": "Merge branch 'rs/parse-opt-forbid-set-int-0-without-noneg'\n\nDeveloper support to detect meaningless combination of options.\n\n* rs/parse-opt-forbid-set-int-0-without-noneg:\n  parse-options: disallow negating OPTION_SET_INT 0", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f12cb5052d83f5477f7311ccf00b4249dc6d500b", "commit_date": "2023-08-14T20:26:40Z", "commit_message": "Merge branch 'ob/rebase-conflict-advice-i18n-fix'\n\ni18n coverage improvement and avoidance of sentence lego.\n\n* ob/rebase-conflict-advice-i18n-fix:\n  advice: handle \"rebase\" in error_resolve_conflict()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e5cb1e3f093986815945b85e61de112b8e3ccdd6", "commit_date": "2023-08-13T23:30:36Z", "commit_message": "t4053: avoid writing to unopened pipe\n\nThis fixes an occasional hang I see when running t4053 with\n--verbose-log using dash.\n\nCommit 1e3f26542a (diff --no-index: support reading from named pipes,\n2023-07-05) added a test that \"diff --no-index\" will complain when\ncomparing a named pipe and a directory. The minimum we need to test this\nis to mkfifo the pipe, and then run \"git diff --no-index pipe some_dir\".\nBut the test does one thing more: it spawns a background shell process\nthat opens the pipe for writing, like this:\n\n        {\n                (>pipe) &\n        } &&\n\nThis extra writer _could_ be useful if Git misbehaves and tries to open\nthe pipe for reading. Without the writer, Git would block indefinitely\nand the test would never end. But since we do not have such a bug, Git\ndoes not open the pipe and it is the writing process which will block\nindefinitely, since there are no readers. The test addresses this by\nrunning \"kill $!\" in a test_when_finished block. Since the writer should\nbe blocking forever, this kill command will reliably find it waiting.\n\nHowever, this seems to be somewhat racy, in that the writing process\nsometimes hangs around even after the \"kill\". In a normal run of the\ntest script without options, this doesn't have any effect; the\nmain test script completes anyway. But with --verbose-log, we spawn a\n\"tee\" process that reads the script output, and it won't end until all\ndescriptors pointing to its input pipe are closed. And the background\nprocess that is hanging around still has its stderr, etc, pointed into\nthat pipe.\n\nYou can reproduce the situation like this:\n\n  cd t\n  ./t4053-diff-no-index.sh --verbose-log --stress\n\nLet that run for a few minutes, and then you'll find that some of the\nruns have hung. For example, at 11:53, I ran:\n\n  $ ps xk start o pid,start,command | grep tee | head\n   713459 11:48:06 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-9.out\n   713527 11:48:06 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-15.out\n   719434 11:48:07 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-1.out\n   728117 11:48:08 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-5.out\n   738738 11:48:09 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-31.out\n   739457 11:48:09 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-27.out\n   744432 11:48:10 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-21.out\n   744471 11:48:10 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-29.out\n   761961 11:48:12 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-0.out\n   812299 11:48:19 tee -a /home/peff/compile/git/t/test-results/t4053-diff-no-index.stress-8.out\n\nAll of these have been hung for several minutes. We can investigate one\nand see that it's waiting to get EOF on its input:\n\n  $ strace -p 713459\n  strace: Process 713459 attached\n  read(0,\n  ^C\n\nWho else has that descriptor open?\n\n  $ lsof -a -p 713459 -d 0 +E\n  COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME\n  tee     713459 peff    0r  FIFO   0,13      0t0 3943636 pipe 719203,sh,5w 719203,sh,7w 719203,sh,12w 719203,sh,13w\n  sh      719203 peff    5w  FIFO   0,13      0t0 3943636 pipe 713459,tee,0r 719203,sh,7w 719203,sh,12w 719203,sh,13w\n  sh      719203 peff    7w  FIFO   0,13      0t0 3943636 pipe 713459,tee,0r 719203,sh,5w 719203,sh,12w 719203,sh,13w\n  sh      719203 peff   12w  FIFO   0,13      0t0 3943636 pipe 713459,tee,0r 719203,sh,5w 719203,sh,7w 719203,sh,13w\n  sh      719203 peff   13w  FIFO   0,13      0t0 3943636 pipe 713459,tee,0r 719203,sh,5w 719203,sh,7w 719203,sh,12w\n\nIt's a shell, presumably a subshell spawned by the main script. Though\nit may seem odd, having the same descriptor open several times is not\nunreasonable (they're all basically the original stdout/stderr of the\nscript that has been copied). And they should all close when the process\nexits. So what's it doing? Curiously, it will exit as soon as we strace\nit:\n\n  $ strace -s 64 -p 719203\n  strace: Process 719203 attached\n  openat(AT_FDCWD, \"pipe\", O_WRONLY|O_CREAT|O_TRUNC, 0666) = -1 ENOENT (No such file or directory)\n  write(2, \"./t4053-diff-no-index.sh: 7: eval: \", 35) = 35\n  write(2, \"cannot create pipe: Directory nonexistent\", 41) = 41\n  write(2, \"\\n\", 1)                       = 1\n  exit_group(2)                           = ?\n  +++ exited with 2 +++\n\nI think what happens is this:\n\n  - it is blocking in the openat() call for the pipe, as we expect (so\n    this is definitely the backgrounded subshell mentioned above)\n\n  - strace sends signals (probably STOP/CONT); those cause the kernel to\n    stop blocking, but libc will restart the system call automatically\n\n  - by this time, the \"pipe\" fifo is gone, so we'll actually try to\n    create a regular file. But of course the surrounding directory is\n    gone, too! So we get ENOENT, and then exit as normal.\n\nSo the blocking is something we expect to happen. But what we didn't\nexpect is for the process to still exist at all! It should have been\nkilled earlier when the parent process called \"kill\", but it wasn't. And\nwe can't catch the race at this point, because it happened much earlier.\n\nOne can guess, though, that there is some race with the shell setting up\nthe signal handling in the backgrounded subshell, and possibly blocking\nor ignoring signals at the time that the \"kill\" is received.  Curiously,\nthe race does not seem to happen if I use \"bash\" instead of \"dash\", so\npresumably bash's setup here is more atomic.\n\nOne fix might be to try killing the subshell more aggressively, either\nusing SIGKILL, or looping on kill/wait. But that seems complex and\nlikely to introduce new problems/races. Instead, we can observe that the\nwriter is not needed at all. Git will notice the pipe via stat() before\nit is ever opened. So we can simply drop the writer subshell entirely.\n\nIf we ever changed Git to open the path and fstat() it, this would\nresult in the test hanging. But we're not likely to do that. After all,\nwe have to stat() paths to see if they are openable at all (e.g., it\ncould be a directory), so this seems like a low risk. And anybody who\ndoes make such a change will immediately see the issue, as Git would\nhang consistently.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "231e86c10c674235cf28447a8486f7955d5f4dd9", "commit_date": "2023-08-10T16:16:27Z", "commit_message": "t4053: avoid race when killing background processes\n\nThe test 'diff --no-index reads from pipes' starts a couple of\nbackground processes that write to the pipes that are passed to \"diff\n--no-index\". If the test passes then we expect these processes to exit\nas all their output will have been read. However if the test fails\nthen we want to make sure they do not hang about on the users machine\nand the test remembers they should be killed by calling\n\n      test_when_finished  \"! kill $!\"\n\nafter each background process is created. Unfortunately there is a\nrace where test_when_finished may run before the background process\nexits even when all its output has been read resulting in the kill\ncommand succeeding which causes the test to fail. Fix this by ignoring\nthe exit status of the kill command. If the diff is successful we\ncould instead wait for the background process to exit and check their\nstatus but that feels like it is testing the platform's printf\nimplementation rather than git's code.\n\nReported-by: Jeff King <peff@peff.net>\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fac96dfbb1c24369ba7d37a5affd8adfe6c650fd", "commit_date": "2023-08-09T23:18:16Z", "commit_message": "Git 2.42-rc1\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e8c53ff91282861d4efe5d807129a55e193e6451", "commit_date": "2023-08-09T23:18:16Z", "commit_message": "Merge branch 'pw/rebase-skip-commit-message-fix'\n\n\"git rebase -i\" with a series of squash/fixup, when one of the\nsteps stopped in conflicts and ended up getting skipped, did not\nhandle the accumulated commit log messages, which has been\ncorrected.\n\n* pw/rebase-skip-commit-message-fix:\n  rebase --skip: fix commit message clean up when skipping squash", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8cdd5e713d7ba54b9d26ac997408bb745ab55088", "commit_date": "2023-08-09T23:18:16Z", "commit_message": "Merge branch 'ma/locate-in-path-for-windows'\n\n\"git bisect visualize\" stopped running \"gitk\" on Git for Windows\nwhen the command was reimplemented in C around Git 2.34 timeframe.\nThis has been corrected.\n\n* ma/locate-in-path-for-windows:\n  docs: update when `git bisect visualize` uses `gitk`\n  compat/mingw: implement a native locate_in_PATH()\n  run-command: conditionally define locate_in_PATH()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b6e2a0c0b30dccd050706354eaa64a9e8ed900e5", "commit_date": "2023-08-09T23:18:15Z", "commit_message": "Merge branch 'bc/ignore-clangd-cache'\n\n.gitignore update.\n\n* bc/ignore-clangd-cache:\n  gitignore: ignore clangd .cache directory", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cf07e53bae8492fc6ee8a8d394e2fba858daa0a4", "commit_date": "2023-08-09T23:18:15Z", "commit_message": "Merge branch 'bc/ident-dot-is-no-longer-crud-letter'\n\nExclude \".\" from the set of characters to be removed from the\nbeginning and the end of the human-readable name.\n\n* bc/ident-dot-is-no-longer-crud-letter:\n  ident: don't consider '.' a crud", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "889c94d2a0f4041c8237044db1d7ffd0190a2e0f", "commit_date": "2023-08-09T23:18:15Z", "commit_message": "Merge branch 'ew/hash-with-openssl-evp'\n\nAdjust to OpenSSL 3+, which deprecates its SHA-1 functions based on\nits traditional API, by using its EVP API instead.\n\n* ew/hash-with-openssl-evp:\n  avoid SHA-1 functions deprecated in OpenSSL 3+\n  sha256: avoid functions deprecated in OpenSSL 3+", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "0050f8e401a70b1eda9e7358b04e6d6ef3d64ab1", "commit_date": "2023-08-09T20:58:15Z", "commit_message": "git maintenance: avoid console window in scheduled tasks on Windows\n\nWe just introduced a helper to avoid showing a console window when the\nscheduled task runs `git.exe`. Let's actually use it.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Derrick Stolee <dstolee@microsoft.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4b8a2717bb5ea6b787e0037174dcbf53ccf4985c", "commit_date": "2023-08-09T20:58:13Z", "commit_message": "win32: add a helper to run `git.exe` without a foreground window\n\nOn Windows, there are two kinds of executables, console ones and\nnon-console ones. Git's executables are all console ones.\n\nWhen launching the former e.g. in a scheduled task, a CMD window pops\nup. This is not what we want for the tasks installed via the `git\nmaintenance` command.\n\nTo work around this, let's introduce `headless-git.exe`, which is a\nnon-console program that does _not_ pop up any window. All it does is to\nre-launch `git.exe`, suppressing that console window, passing through\nall command-line arguments as-are.\n\nHelped-by: Carlo Marcelo Arenas Bel\u00f3n <carenas@gmail.com>\nHelped-by: Yuyi Wang <Strawberry_Str@hotmail.com>\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Derrick Stolee <dstolee@microsoft.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b3dcd24b8a186093cd821697b191080b8d53915b", "commit_date": "2023-08-09T19:44:07Z", "commit_message": "t9001: remove excessive GIT_SEND_EMAIL_NOTTY=1\n\nThis was added by 3ece9bf0f9 (send-email: clear the $message_id after\nvalidation, 2023-05-17) for no apparent reason, as this is required only\nin cases when git's stdin is (must be) redirected, which isn't the case\nhere.\n\nSigned-off-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "72695d8214791161a943086e894874b4fd71ba9f", "commit_date": "2023-08-09T18:46:12Z", "commit_message": "mv: handle lstat() failure correctly\n\nWhen moving a directory onto another with `git mv` various checks are\nperformed. One of of these validates that the destination is not existing.\n\nWhen calling `lstat` on the destination path and it fails as the path\ndoesn't exist, some environments seem to overwrite the passed  in\n`stat` memory nonetheless (I observed this issue on debian 12 of x86_64,\nrunning on OrbStack on ARM, emulated with Rosetta).\n\nThis would affect the code that followed as it would still acccess a now\nmodified `st` structure, which now seems to contain uninitialized memory.\n`S_ISDIR(st_dir_mode)` would then typically return false causing the code\nto run into a bad case.\n\nThe fix avoids overwriting the existing `st` structure, providing an\nalternative that exists only for that purpose.\n\nNote that this patch minimizes complexity instead of stack-frame size.\n\nSigned-off-by: Sebastian Thiel <sebastian.thiel@icloud.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3284b93862b0aaea9d8e708f0aabd53e3e94409e", "commit_date": "2023-08-08T23:55:07Z", "commit_message": "parse-options: disallow negating OPTION_SET_INT 0\n\nAn option of type OPTION_SET_INT can be defined to set its variable to\nzero.  It's negated variant will do the same, though, which is\nconfusing.  Several such options were fixed by disabling negation,\nchanging the value to set or using a different option type:\n\n991c552916 (ls-tree: fix --no-full-name, 2023-07-18)\ne12cb98e1e (branch: reject \"--no-all\" and \"--no-remotes\" early, 2023-07-18)\n68cbb20e73 (show-branch: reject --[no-](topo|date)-order, 2023-07-19)\n3821eb6c3d (reset: reject --no-(mixed|soft|hard|merge|keep) option, 2023-07-19)\n36f76d2a25 (pack-objects: fix --no-quiet, 2023-07-21)\n3a5f308741 (pack-objects: fix --no-keep-true-parents, 2023-07-21)\nc95ae3ff9c (describe: fix --no-exact-match, 2023-07-21)\nd089a06421 (bundle: use OPT_PASSTHRU_ARGV, 2023-07-29)\n\nCheck for such options that allow negation in parse_options_check() and\nreport them to find future cases quicker.\n\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "cb888bb6991bb10bddedf9ddc9651ec25da6137d", "commit_date": "2023-08-08T23:49:10Z", "commit_message": "repack: free geometry struct\n\nWhen the program is ending, we call clear_pack_geometry() to free any\nresources in the pack_geometry struct. But the struct itself is\nallocated on the heap, and leak-checkers will complain about the\nresulting small leak.\n\nThis one was marked by Coverity as a \"new\" leak, though it has existed\nsince 0fabafd0b9 (builtin/repack.c: add '--geometric' option,\n2021-02-22). This might be because recent unrelated changes in the file\nconfused it about what is new and what is not. But regardless, it is\nworth addressing.\n\nWe can fix it easily by free-ing the struct. We'll convert our \"clear\"\nfunction to \"free\", since the allocation happens in the matching init()\nfunction (though since there is only one call to each, and the struct is\nlocal to this file, it's mostly academic).\n\nAnother option would be to put the struct on the stack rather than the\nheap. However, this gets tricky, as we check the pointer against NULL in\nseveral places to decide whether we're in geometric mode.\n\nSigned-off-by: Jeff King <peff@peff.net>\nAcked-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c016726c2deb84bcc6a7418efad92ef0562a8af3", "commit_date": "2023-08-08T23:48:17Z", "commit_message": "send-email: avoid creating more than one Term::ReadLine object\n\nEvery time git-send-email calls its ask() function to prompt the user,\nwe call term(), which instantiates a new Term::ReadLine object. But in\nv1.46 of Term::ReadLine::Gnu (which provides the Term::ReadLine\ninterface on some platforms), its constructor refuses to create a second\ninstance[1]. So on systems with that version of the module, most\ngit-send-email instances will fail (as we usually prompt for both \"to\"\nand \"in-reply-to\" unless the user provided them on the command line).\n\nWe can fix this by keeping a single instance variable and returning it\nfor each call to term(). In perl 5.10 and up, we could do that with a\n\"state\" variable. But since we only require 5.008, we'll do it the\nold-fashioned way, with a lexical \"my\" in its own scope.\n\nNote that the tests in t9001 detect this problem as-is, since the\nfailure mode is for the program to die. But let's also beef up the\n\"Prompting works\" test to check that it correctly handles multiple\ninputs (if we had chosen to keep our FakeTerm hack in the previous\ncommit, then the failure mode would be incorrectly ignoring prompts\nafter the first).\n\n[1] For discussion of why multiple instances are forbidden, see:\n    https://github.com/hirooih/perl-trg/issues/16\n\nSigned-off-by: Jeff King <peff@peff.net>\nAcked-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dfd46bae92ec25d71e7c8a2887e9508aaf211ee8", "commit_date": "2023-08-08T23:48:15Z", "commit_message": "send-email: drop FakeTerm hack\n\nBack in 280242d1cc (send-email: do not barf when Term::ReadLine does not\nlike your terminal, 2006-07-02), we added a fallback for when\nTerm::ReadLine's constructor failed: we'd have a FakeTerm object\ninstead, which would then die if anybody actually tried to call\nreadline() on it. Since we instantiated the $term variable at program\nstartup, we needed this workaround to let the program run in modes when\nwe did not prompt the user.\n\nBut later, in f4dc9432fd (send-email: lazily load modules for a big\nspeedup, 2021-05-28), we started loading Term::ReadLine lazily only when\nask() is called. So at that point we know we're trying to prompt the\nuser, and we can just die if ReadLine instantiation fails, rather than\nmaking this fake object to lazily delay showing the error.\n\nThis should be OK even if there is no tty (e.g., we're in a cron job),\nbecause Term::ReadLine will return a stub object in that case whose \"IN\"\nand \"OUT\" functions return undef. And since 5906f54e47 (send-email:\ndon't attempt to prompt if tty is closed, 2009-03-31), we check for that\ncase and skip prompting.\n\nAnd we can be sure that FakeTerm was not kicking in for such a\nsituation, because it has actually been broken since that commit! It\ndoes not define \"IN\" or \"OUT\" methods, so perl would barf with an error.\nIf FakeTerm was in use, we were neither honoring what 5906f54e47 tried\nto do, nor producing the readable message that 280242d1cc intended.\n\nSo we're better off just dropping FakeTerm entirely, and letting the\nerror reported by constructing Term::ReadLine through.\n\nSigned-off-by: Jeff King <peff@peff.net>\nAcked-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "12009a182b51c1dd1f8020a3d88a1813e0af5f33", "commit_date": "2023-08-08T23:47:26Z", "commit_message": "t0040: declare non-tab indentation to be okay in this script\n\nBy necessity, this script needs to verify that certain Git output\nmatches expectations, including text indented with spaces instead of\ntabs.\n\nMost recently, such a check was introduced in 448abbba6347 (short help:\nallow multi-line opthelp, 2023-07-18) which is reported by `git diff\n--check 448abbba6347^!` as having whitespace issues.\n\nLet's not complain about this because it is intentional.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nAcked-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ff29a61cbbc83f0948606df37dbc734436b62c17", "commit_date": "2023-08-07T20:21:00Z", "commit_message": "advice: handle \"rebase\" in error_resolve_conflict()\n\nThis makes sure that we get a properly translated message rather than\ninserting the command (which we failed to translate) into a generic\nfallback message.\n\nThe function is called indirectly via die_resolve_conflict() with fixed\nstrings, and directly with the string obtained via action_name(), which\nin turn returns a string from a fixed set. Hence we know that the now\ncovered set of strings is exhausitive, and will therefore BUG() out when\nencountering an unexpected string. We also know that all covered strings\nare actually used.\n\nArguably, the above suggests that it would be cleaner to pass the\ncommand as an enum in the first place, but that's left for another time.\n\nSigned-off-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a82fb66fed250e16d3010c75404503bea3f0ab61", "commit_date": "2023-08-07T18:58:17Z", "commit_message": "A few more topics before -rc1\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1221e94bd0ad7f5734cdbfe1ebc5b922bea106fa", "commit_date": "2023-08-07T18:58:17Z", "commit_message": "mailmap: change primary address for Glen Choo\n\nGlen will lose access to his work email soon.\n\nSigned-off-by: Glen Choo <chooglen@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b2797581d0b362059be6e7bed9be98e5cda44e4b", "commit_date": "2023-08-07T18:57:18Z", "commit_message": "Merge branch 'ew/sha256-gcrypt-leak-fixes'\n\nLeakfixes.\n\n* ew/sha256-gcrypt-leak-fixes:\n  sha256/gcrypt: die on gcry_md_open failures\n  sha256/gcrypt: fix memory leak with SHA-256 repos\n  sha256/gcrypt: fix build with SANITIZE=leak", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a04cef9fd74df0af3f406102897fc265ff53dc1b", "commit_date": "2023-08-07T18:57:18Z", "commit_message": "Merge branch 'rs/bundle-parseopt-cleanup'\n\nCode clean-up.\n\n* rs/bundle-parseopt-cleanup:\n  bundle: use OPT_PASSTHRU_ARGV", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e48d9c78cc00805660b83ac809188d0c413e4c46", "commit_date": "2023-08-07T18:57:18Z", "commit_message": "Merge branch 'am/doc-sha256'\n\nTone down the warning on SHA-256 repositories being an experimental\ncuriosity.  We do not have support for them to interoperate with\ntraditional SHA-1 repositories, but at this point, we do not plan\nto make breaking changes to SHA-256 repositories and there is no\nlonger need for such a strongly phrased warning.\n\n* am/doc-sha256:\n  doc: sha256 is no longer experimental", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dee27be9056c05067b6dba3fc5805f311f03ce67", "commit_date": "2023-08-07T18:57:18Z", "commit_message": "Merge branch 'tb/commit-graph-tests'\n\nTest updates.\n\n* tb/commit-graph-tests:\n  t/lib-commit-graph.sh: avoid sub-shell in `graph_git_behavior()`\n  t5328: avoid top-level directory changes\n  t5318: avoid top-level directory changes\n  t/lib-commit-graph.sh: avoid directory change in `graph_git_behavior()`\n  t/lib-commit-graph.sh: allow `graph_read_expect()` in sub-directories", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "e600568929c3c7fdda62843412585489d091111d", "commit_date": "2023-08-06T12:41:06Z", "commit_message": "l10n: po-id for 2.42 (round 1)\n\nUpdate following components:\n\n* commit-graph.c\n* diff-no-index.c\n* builtin/notes.c\n* builtin/pack-refs.c\n* builtin/worktree.c\n\nSigned-off-by: Bagas Sanjaya <bagasdotme@gmail.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "450f2c9e3e461e4785643730f9c82eb9a64faddd", "commit_date": "2023-08-05T15:26:39Z", "commit_message": "Merge branch 'russian-l10n' of https://github.com/DJm00n/git-po-ru\n\n* 'russian-l10n' of https://github.com/DJm00n/git-po-ru:\n  l10n: ru.po: update Russian translation", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a5c01603b397f7f99b013a1334e0792d70be641c", "commit_date": "2023-08-04T17:56:51Z", "commit_message": "gitignore: ignore clangd .cache directory\n\nIn at least some versions of clangd, including version 15 in Ubuntu\n23.04, a directory, .cache, is written in the root of the repository\nwith index information about the files in the repository.  Since clangd\nis the most common language server protocol (LSP) implementation for C,\nand we already support it using the GENERATE_COMPILATION_DATABASE flags\nto make it functional, it's likely many users are using or will want to\nuse it.\n\nAs a result, ignore the \".cache\" directory to help avoid users\naccidentally committing the data.\n\nSigned-off-by: brian m. carlson <bk2204@github.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ac83bc5054c2ac489166072334b4147ce6d0fccb", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Git 2.42-rc0\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "65e25ae52298e9f1a8c7d94fd0ddffaf30cd944e", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'jc/branch-in-use-error-message'\n\n\"git branch -f X\" to repoint the branch X said that X was \"checked\nout\" in another worktree, even when branch X was not and instead\nbeing bisected or rebased.  The message was reworded to say the\nbranch was \"in use\".\n\n* jc/branch-in-use-error-message:\n  branch: update the message to refuse touching a branch in-use", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f4a7c24c094cff87a4b5a02550b321591d847ca0", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'hy/blame-in-bare-with-contents'\n\n\"git blame --contents=file\" has been taught to work in a bare\nrepository.\n\n* hy/blame-in-bare-with-contents:\n  blame: allow --contents to work with bare repo", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "f9712d75e6389866efbe6ad918dc9773a8a880ad", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'jc/parse-options-short-help'\n\nCommand line parser fix, and a small parse-options API update.\n\n* jc/parse-options-short-help:\n  short help: allow a gap smaller than USAGE_GAP\n  remote: simplify \"remote add --tags\" help text\n  short help: allow multi-line opthelp", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "23b20fff3ab28b31678d23e67de328ac24801f18", "commit_date": "2023-08-04T17:52:31Z", "commit_message": "Merge branch 'jc/doc-sent-patch-now-what'\n\nProcess document update.\n\n* jc/doc-sent-patch-now-what:\n  MyFirstContribution: refrain from self-iterating too much", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "840affcb8ddfa78e4988c276f98773e40ccba4f4", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'la/doc-choose-starting-point-fixup'\n\nClarify how to pick a starting point for a new topic in the\nSubmittingPatches document.\n\n* la/doc-choose-starting-point-fixup:\n  SubmittingPatches: use of older maintenance tracks is an exception\n  SubmittingPatches: explain why 'next' and above are inappropriate base\n  SubmittingPatches: choice of base for fixing an older maintenance track", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "a53e8a64884dffb23ea416687ae8fbdaf332641a", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'pv/doc-submodule-update-settings'\n\nRewrite the description of giving a custom command to the\nsubmodule.<name>.update configuration variable.\n\n* pv/doc-submodule-update-settings:\n  doc: highlight that .gitmodules does not support !command", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "4d060018467d5a8d05349294baad426d5407414d", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'ja/worktree-orphan-fix'\n\nFix tests with unportable regex patterns.\n\n* ja/worktree-orphan-fix:\n  t2400: rewrite regex to avoid unintentional PCRE\n  builtin/worktree.c: convert tab in advice to space\n  t2400: drop no-op `--sq` from rev-parse call", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3365e2675e5ac95e0a44665966e8cfbb9433456e", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'jc/retire-get-sha1-hex'\n\nThe implementation of \"get_sha1_hex()\" that reads a hexadecimal\nstring that spells a full object name has been extended to cope\nwith any hash function used in the repository, but the \"sha1\" in\nits name survived.  Rename it to get_hash_hex(), a name that is\nmore consistent within its friends like get_hash_hex_algop().\n\n* jc/retire-get-sha1-hex:\n  hex: retire get_sha1_hex()", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "dd68b57fc404e9117385879460a63a25f8b3c354", "commit_date": "2023-08-04T17:52:30Z", "commit_message": "Merge branch 'la/doc-choose-starting-point'\n\nClarify how to choose the starting point for a new topic in\ndeveloper guidance document.\n\n* la/doc-choose-starting-point:\n  SubmittingPatches: simplify guidance for choosing a starting point\n  SubmittingPatches: emphasize need to communicate non-default starting points\n  SubmittingPatches: de-emphasize branches as starting points\n  SubmittingPatches: discuss subsystems separately from git.git\n  SubmittingPatches: reword awkward phrasing", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fff1594fa77372ea7a51f6b445267f23fdbf3089", "commit_date": "2023-08-04T16:47:10Z", "commit_message": "docs: update when `git bisect visualize` uses `gitk`\n\nThis check has involved more environment variables than just `DISPLAY` since\n508e84a790 (bisect view: check for MinGW32 and MacOSX in addition to X11,\n2008-02-14), so let's update the documentation accordingly.\n\nSigned-off-by: Matthias A\u00dfhauer <mha1993@live.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "2bf46a9f62159ced3a84ab8bc9ba151778414bd6", "commit_date": "2023-08-04T04:21:10Z", "commit_message": "compat/mingw: implement a native locate_in_PATH()\n\nsince 5e1f28d (bisect--helper: reimplement `bisect_visualize()` shell\n function in C, 2021-09-13) `git bisect visualize` uses exists_in_PATH()\nto check wether it should call `gitk`, but exists_in_PATH() relies on\nlocate_in_PATH() which currently only understands POSIX-ish PATH variables\n(a list of paths, separated by colons) on native Windows executables\nwe encounter Windows PATH variables (a list of paths that often contain\ndrive letters (and thus colons), separated by semicolons). Luckily we do\nalready have a function that can lookup executables on windows PATHs:\npath_lookup(). Implement a small replacement for the existing\nlocate_in_PATH() based on path_lookup().\n\nReported-by: Louis Strous <Louis.Strous@intellimagic.com>\nSigned-off-by: Matthias A\u00dfhauer <mha1993@live.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bb532b534547d0a6b203baaf2f3379d987f611b9", "commit_date": "2023-08-04T04:21:07Z", "commit_message": "run-command: conditionally define locate_in_PATH()\n\nThis commit doesn't change any behaviour by itself, but allows us to easily\ndefine compat replacements for locate_in_PATH(). It prepares us for the next\ncommit that adds a native Windows implementation of locate_in_PATH().\n\nSigned-off-by: Matthias A\u00dfhauer <mha1993@live.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "6ce7afe16384b741f1ee4c5f310fa4a9f66348ba", "commit_date": "2023-08-03T20:42:54Z", "commit_message": "rebase --skip: fix commit message clean up when skipping squash\n\nDuring a series of \"fixup\" and/or \"squash\" commands, the interactive\nrebase accumulates a commit message from all the commits that are being\nsquashed together. If one of the commits has conflicts when it is picked\nand the user chooses to skip that commit then we need to remove that\ncommit's message from accumulated messages.  To do this 15ef69314d5\n(rebase --skip: clean up commit message after a failed fixup/squash,\n2018-04-27) updated commit_staged_changes() to reset the accumulated\nmessage to the commit message of HEAD (which does not contain the\nmessage from the skipped commit) when the last command was \"fixup\" or\n\"squash\" and there are no staged changes. Unfortunately the code to do\nthis contains two bugs.\n\n(1) If parse_head() fails we pass an invalid pointer to\n    unuse_commit_buffer().\n\n(2) The reconstructed message uses the entire commit buffer from HEAD\n    including the headers, rather than just the commit message.\n\nThe first issue is fixed by splitting up the \"if\" condition into several\nstatements each with its own error handling. The second issue is fixed\nby finding the start of the commit message within the commit buffer\nusing find_commit_subject().\n\nThe existing test added by 15ef69314d5 is modified to show the effect of\nthis bug.  The bug is triggered when skipping the first command in the\nchain (as the test does before this commit) but the effect is hidden\nbecause opts->current_fixup_count is set to zero which leads\nupdate_squash_messages() to recreate the squash message file from\nscratch overwriting the bad message created by\ncommit_staged_changes(). The test is also updated to explicitly check\nthe commit messages rather than relying on grep to ensure they do not\ncontain any stray commit headers.\n\nTo check the commit message the function test_commit_message() is moved\nfrom t3437-rebase-fixup-options.sh to test-lib.sh. As the function is\nnow publicly available it is updated to provide better error detection\nand avoid overwriting the commonly used files \"actual\" and \"expect\".\nSupport for reading the expected commit message from stdin is also\nadded.\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1c04cb0744d2acdcaebc77b0e78c47efbba67fd5", "commit_date": "2023-08-02T16:50:52Z", "commit_message": "ident: don't consider '.' a crud\n\nWhen we process a user's name (as in user.name), we strip all\nleading and trailing crud from it.  Right now, we consider a dot\na crud character, and strip it off.\n\nHowever, this is unsuitable for many personal names because humans\nfrequently have abbreviated suffixes, such as \"Jr.\" or \"Sr.\" at the end\nof their names, and this corrupts them.  Some other users may wish to\nuse an abbreviated name or initial, which will pose a problem especially\nin cultures that write the family name first, followed by the personal\nname.\n\nSince the current approach causes lots of practical problems, let's\navoid it by no longer considering a dot to be crud.\n\nNote that \".\" in the name forces the entire name to be quoted to\nplease mailers, but stripping \".\" only at the beginning and the end\ndoes not help a name with \".\" in the middle (like \"brian m. carlson\")\nso this change will not make it much worse.  A name like \"Given\nFamily, Jr.\" that did not have to be quoted now would need to be, in\norder to be placed on the e-mail headers, though.\n\nThis is based on a weather-balloon patch by Jeff King sent in Aug 2021\nhttps://lore.kernel.org/git/YSKm8Q8nyTavQaox@coredump.intra.peff.net/\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "1b0a5129563ebe720330fdc8f5c6843d27641137", "commit_date": "2023-08-02T16:37:52Z", "commit_message": "The eighteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "955c2b1c6ad736a685fcb7cab1c079a9c7cc18c8", "commit_date": "2023-08-02T16:37:52Z", "commit_message": "Documentation/RelNotes/2.42.0.txt: typofix\n\nFix a typo introduced in aa9166bcc0 (The ninth batch, 2023-07-08).\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "70e5c5ddddadc7f15f64f812ae511eab83ca0040", "commit_date": "2023-08-02T16:37:24Z", "commit_message": "Merge branch 'ks/ref-filter-describe'\n\n\"git branch --list --format=<format>\" and friends are taught\na new \"%(describe)\" placeholder.\n\n* ks/ref-filter-describe:\n  ref-filter: add new \"describe\" atom\n  ref-filter: add multiple-option parsing functions", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8bfb359844cf51aedaf0d28486d4ce9867ccb46c", "commit_date": "2023-08-02T16:37:24Z", "commit_message": "Merge branch 'ah/sequencer-rewrite-todo-fix'\n\nWhen the user edits \"rebase -i\" todo file so that it starts with a\n\"fixup\", which would make it invalid, the command truncated the\nrest of the file before giving an error and returning the control\nback to the user.  Stop truncating to make it easier to correct\nsuch a malformed todo file.\n\n* ah/sequencer-rewrite-todo-fix:\n  sequencer: finish parsing the todo list despite an invalid first line", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "52d9dc20e1ddd5ac6b9e9113983b2f8d6977e6b0", "commit_date": "2023-08-02T16:37:23Z", "commit_message": "Merge branch 'bb/use-trace2-counters-for-fsync-stats'\n\nInstead of inventing a custom counter variables for debugging,\nuse existing trace2 facility in the fsync customization codepath.\n\n* bb/use-trace2-counters-for-fsync-stats:\n  wrapper: use trace2 counters to collect fsync stats", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "99acb0fa54775a383cab70a6e662e45180dee3f0", "commit_date": "2023-08-02T16:37:23Z", "commit_message": "Merge branch 'ah/autoconf-fixes'\n\n\"./configure --with-expat=no\" did not work as a way to refuse use\nof the expat library on a system with the library installed, which\nhas been corrected.\n\n* ah/autoconf-fixes:\n  configure.ac: always save NO_ICONV to config.status\n  configure.ac: don't overwrite NO_CURL option\n  configure.ac: don't overwrite NO_EXPAT option", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "fea92e4cac30b1204ecc8dfd53675bbdd68611e0", "commit_date": "2023-08-02T16:37:23Z", "commit_message": "Merge branch 'jc/tree-walk-drop-base-offset'\n\nCode simplification.\n\n* jc/tree-walk-drop-base-offset:\n  tree-walk: drop unused base_offset from do_match()\n  tree-walk: lose base_offset that is never used in tree_entry_interesting", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "bda9c12073e786e2ffa2c3ec479c7fe098d49999", "commit_date": "2023-08-01T15:34:56Z", "commit_message": "avoid SHA-1 functions deprecated in OpenSSL 3+\n\nOpenSSL 3+ deprecates the SHA1_Init, SHA1_Update, and SHA1_Final\nfunctions, leading to errors when building with `DEVELOPER=1'.\n\nUse the newer EVP_* API with OpenSSL 3+ (only) despite being more\nerror-prone and less efficient due to heap allocations.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3e440ea0aba0660f356a3e5b9fc366d5d6960847", "commit_date": "2023-08-01T15:34:54Z", "commit_message": "sha256: avoid functions deprecated in OpenSSL 3+\n\nOpenSSL 3+ deprecates the SHA256_Init, SHA256_Update, and SHA256_Final\nfunctions, leading to errors when building with `DEVELOPER=1'.\n\nUse the newer EVP_* API with OpenSSL 3+ despite being more\nerror-prone and less efficient due to heap allocations.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8e42eb0e9ae44f65c360cd95ce28e84496ad8247", "commit_date": "2023-07-31T16:11:04Z", "commit_message": "doc: sha256 is no longer experimental\n\nRemove scary wording that basically stops people using sha256\nrepositories not because of interoperability issues with sha1\nrepositories, but from fear that their work will suddenly become\nincompatible in some future version of git.\n\nWe should be clear that currently sha256 repositories will not work with\nsha1 repositories but stop the scary words.\n\nSigned-off-by: Adam Majer <adamm@zombino.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "823839bda1a72c54fe8ac025fb70dd3403c11f46", "commit_date": "2023-07-31T15:57:24Z", "commit_message": "sha256/gcrypt: die on gcry_md_open failures\n\n`gcry_md_open' allocates memory and must (like all allocation\nfunctions) be checked for failure.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "8b608f3fb84388bb1b6da70feb62e20a19390cb6", "commit_date": "2023-07-31T15:57:15Z", "commit_message": "sha256/gcrypt: fix memory leak with SHA-256 repos\n\n`gcry_md_open' needs to be paired with `gcry_md_close' to ensure\nresources are released.  Since our internal APIs don't have\nseparate close/release callbacks, sticking it into the finalization\ncallback seems appropriate.\n\nBuilding with SANITIZE=leak and running `git fsck' on a SHA-256\nrepository no longer reports leaks.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "b4b85e41a74eaf61dfb490004541622e63df092b", "commit_date": "2023-07-31T15:56:54Z", "commit_message": "sha256/gcrypt: fix build with SANITIZE=leak\n\nNon-static functions cause `undefined reference' errors when\nbuilding with `SANITIZE=leak' due to the lack of prototypes.\nMark all these functions as `static inline' as we do in\nsha256/nettle.h to avoid the need to maintain prototypes.\n\nSigned-off-by: Eric Wong <e@80x24.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "d089a06421c86d120f50f05020ca6b833b068dcb", "commit_date": "2023-07-31T15:33:53Z", "commit_message": "bundle: use OPT_PASSTHRU_ARGV\n\n\"git bundle\" passes the progress control options to \"git pack-objects\"\nby parsing and then recreating them explicitly.  Simplify that process\nby using OPT_PASSTHRU_ARGV instead.\n\nThis also fixes --no-quiet, which has been doing the same as --quiet\nsince its introduction by 79862b6b77 (bundle-create: progress output\ncontrol, 2019-11-10) because it had been defined using OPT_SET_INT with\na value of 0, which sets 0 when negated as well.\n\nSigned-off-by: Ren\u00e9 Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ee48e70a829d1fa2da82f14787051ad8e7c45b71", "commit_date": "2023-07-28T16:45:22Z", "commit_message": "The seventeenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "ddcb8fd8b94c066406c2a4f41e04122cb2a742ad", "commit_date": "2023-07-28T16:45:22Z", "commit_message": "Merge branch 'rs/pack-objects-parseopt-fix'\n\nCommand line parser fix.\n\n* rs/pack-objects-parseopt-fix:\n  pack-objects: fix --no-quiet\n  pack-objects: fix --no-keep-true-parents", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "3085f949bf4aafe04dac7441308bb769ccf9c351", "commit_date": "2023-07-28T16:45:21Z", "commit_message": "Merge branch 'rs/describe-parseopt-fix'\n\nCommand line parser fix.\n\n* rs/describe-parseopt-fix:\n  describe: fix --no-exact-match", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "c8a33b44c5a56c7b2c7778506acdc71e5365ec1f", "commit_date": "2023-07-28T16:45:21Z", "commit_message": "Merge branch 'bb/trace2-comment-fix'\n\nIn-code comment fix.\n\n* bb/trace2-comment-fix:\n  trace2: fix a comment", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}, {"commit_oid": "010447cf098f7407008f2940b4fefa5351477044", "commit_date": "2023-07-28T00:44:07Z", "commit_message": "MyFirstContribution: refrain from self-iterating too much\n\nFinding mistakes in and improving your own patches is a good idea,\nbut doing so too quickly is being inconsiderate to reviewers who\nhave just seen the initial iteration and taking their time to review\nit.  Encourage new developers to perform such a self review before\nthey send out their patches, not after.  After sending a patch that\nthey immediately found mistakes in, they are welcome to comment on\nthem, mentioning what and how they plan to improve them in an\nupdated version, before sending out their updates.\n\nHelped-by: Torsten B\u00f6gershausen <tboegi@web.de>\nHelped-by: Linus Arver <linusa@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>", "commit_author": "", "message_analysis": {"glm6b_2": [], "llama2_7b_chat": [], "manual": [], "noob_engine": []}}]}